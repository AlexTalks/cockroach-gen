// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9081

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 969,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 804,
	193, 804,
	207, 229,
	281, 229,
	289, 660,
	316, 229,
	325, 660,
	362, 660,
	386, 229,
	409, 660,
	-2, 0,
	-1, 75,
	207, 233,
	-2, 0,
	-1, 76,
	105, 969,
	182, 969,
	395, 969,
	396, 969,
	-2, 0,
	-1, 87,
	118, 943,
	132, 943,
	190, 943,
	218, 943,
	247, 943,
	257, 943,
	391, 943,
	-2, 930,
	-1, 115,
	123, 584,
	206, 584,
	379, 584,
	-2, 0,
	-1, 116,
	4, 971,
	21, 971,
	22, 971,
	23, 971,
	24, 971,
	25, 971,
	27, 971,
	32, 971,
	37, 971,
	38, 971,
	39, 971,
	40, 971,
	41, 971,
	42, 971,
	43, 971,
	44, 971,
	45, 971,
	46, 971,
	48, 971,
	49, 971,
	50, 971,
	51, 971,
	52, 971,
	53, 971,
	56, 971,
	57, 971,
	58, 971,
	59, 971,
	61, 971,
	62, 971,
	66, 971,
	67, 971,
	68, 971,
	69, 971,
	70, 971,
	72, 971,
	73, 971,
	74, 971,
	75, 971,
	77, 971,
	79, 971,
	80, 971,
	81, 971,
	84, 971,
	85, 971,
	93, 971,
	94, 971,
	95, 971,
	96, 971,
	97, 971,
	98, 971,
	99, 971,
	100, 971,
	102, 971,
	104, 971,
	105, 971,
	107, 971,
	110, 971,
	111, 971,
	112, 971,
	114, 971,
	116, 971,
	117, 971,
	119, 971,
	120, 971,
	121, 971,
	122, 971,
	123, 971,
	124, 971,
	125, 971,
	126, 971,
	127, 971,
	128, 971,
	129, 971,
	131, 971,
	137, 971,
	138, 971,
	139, 971,
	140, 971,
	141, 971,
	142, 971,
	144, 971,
	146, 971,
	150, 971,
	151, 971,
	153, 971,
	154, 971,
	156, 971,
	157, 971,
	159, 971,
	160, 971,
	161, 971,
	162, 971,
	163, 971,
	164, 971,
	165, 971,
	166, 971,
	167, 971,
	168, 971,
	171, 971,
	172, 971,
	176, 971,
	177, 971,
	178, 971,
	179, 971,
	182, 971,
	183, 971,
	184, 971,
	185, 971,
	186, 971,
	187, 971,
	188, 971,
	189, 971,
	191, 971,
	193, 971,
	196, 971,
	197, 971,
	198, 971,
	200, 971,
	201, 971,
	204, 971,
	205, 971,
	206, 971,
	207, 971,
	209, 971,
	210, 971,
	212, 971,
	213, 971,
	215, 971,
	216, 971,
	219, 971,
	220, 971,
	223, 971,
	225, 971,
	226, 971,
	227, 971,
	228, 971,
	229, 971,
	230, 971,
	231, 971,
	232, 971,
	233, 971,
	235, 971,
	236, 971,
	237, 971,
	238, 971,
	240, 971,
	243, 971,
	244, 971,
	245, 971,
	246, 971,
	248, 971,
	249, 971,
	250, 971,
	252, 971,
	253, 971,
	254, 971,
	255, 971,
	258, 971,
	259, 971,
	261, 971,
	263, 971,
	264, 971,
	265, 971,
	266, 971,
	267, 971,
	268, 971,
	269, 971,
	270, 971,
	271, 971,
	273, 971,
	274, 971,
	275, 971,
	276, 971,
	277, 971,
	278, 971,
	280, 971,
	282, 971,
	283, 971,
	284, 971,
	285, 971,
	286, 971,
	287, 971,
	288, 971,
	289, 971,
	290, 971,
	292, 971,
	293, 971,
	294, 971,
	295, 971,
	296, 971,
	298, 971,
	299, 971,
	300, 971,
	301, 971,
	302, 971,
	303, 971,
	304, 971,
	305, 971,
	307, 971,
	309, 971,
	310, 971,
	311, 971,
	312, 971,
	313, 971,
	314, 971,
	316, 971,
	317, 971,
	318, 971,
	319, 971,
	320, 971,
	321, 971,
	322, 971,
	323, 971,
	325, 971,
	326, 971,
	327, 971,
	328, 971,
	329, 971,
	330, 971,
	331, 971,
	332, 971,
	333, 971,
	334, 971,
	336, 971,
	337, 971,
	338, 971,
	339, 971,
	341, 971,
	342, 971,
	343, 971,
	344, 971,
	346, 971,
	347, 971,
	348, 971,
	349, 971,
	350, 971,
	351, 971,
	352, 971,
	353, 971,
	354, 971,
	355, 971,
	356, 971,
	357, 971,
	359, 971,
	360, 971,
	361, 971,
	363, 971,
	364, 971,
	365, 971,
	366, 971,
	367, 971,
	368, 971,
	369, 971,
	370, 971,
	371, 971,
	373, 971,
	374, 971,
	375, 971,
	376, 971,
	379, 971,
	380, 971,
	381, 971,
	382, 971,
	383, 971,
	385, 971,
	386, 971,
	387, 971,
	389, 971,
	390, 971,
	393, 971,
	394, 971,
	395, 971,
	396, 971,
	397, 971,
	399, 971,
	401, 971,
	402, 971,
	403, 971,
	404, 971,
	405, 971,
	406, 971,
	407, 971,
	409, 971,
	410, 971,
	411, 971,
	416, 971,
	417, 971,
	418, 971,
	419, 971,
	420, 971,
	421, 971,
	-2, 0,
	-1, 117,
	1, 861,
	196, 861,
	280, 861,
	287, 861,
	424, 861,
	447, 861,
	-2, 0,
	-1, 119,
	1, 861,
	447, 861,
	-2, 0,
	-1, 120,
	1, 861,
	447, 861,
	-2, 0,
	-1, 121,
	1, 865,
	447, 865,
	-2, 0,
	-1, 145,
	118, 942,
	132, 942,
	190, 942,
	218, 942,
	247, 942,
	257, 942,
	391, 942,
	-2, 939,
	-1, 175,
	4, 978,
	5, 978,
	6, 978,
	7, 978,
	8, 978,
	9, 978,
	10, 978,
	21, 978,
	22, 978,
	23, 978,
	24, 978,
	25, 978,
	27, 978,
	32, 978,
	33, 978,
	37, 978,
	38, 978,
	39, 978,
	40, 978,
	41, 978,
	42, 978,
	43, 978,
	44, 978,
	45, 978,
	46, 978,
	48, 978,
	49, 978,
	50, 978,
	51, 978,
	52, 978,
	53, 978,
	54, 978,
	55, 978,
	56, 978,
	57, 978,
	58, 978,
	59, 978,
	61, 978,
	62, 978,
	64, 978,
	66, 978,
	67, 978,
	68, 978,
	69, 978,
	70, 978,
	72, 978,
	73, 978,
	74, 978,
	75, 978,
	77, 978,
	79, 978,
	80, 978,
	81, 978,
	83, 978,
	84, 978,
	85, 978,
	86, 978,
	87, 978,
	88, 978,
	89, 978,
	90, 978,
	91, 978,
	92, 978,
	93, 978,
	94, 978,
	95, 978,
	96, 978,
	97, 978,
	98, 978,
	99, 978,
	100, 978,
	101, 978,
	102, 978,
	104, 978,
	105, 978,
	107, 978,
	110, 978,
	111, 978,
	112, 978,
	114, 978,
	116, 978,
	117, 978,
	119, 978,
	120, 978,
	121, 978,
	122, 978,
	123, 978,
	124, 978,
	125, 978,
	126, 978,
	127, 978,
	128, 978,
	129, 978,
	130, 978,
	131, 978,
	137, 978,
	138, 978,
	139, 978,
	140, 978,
	141, 978,
	142, 978,
	144, 978,
	146, 978,
	149, 978,
	150, 978,
	151, 978,
	153, 978,
	154, 978,
	156, 978,
	157, 978,
	159, 978,
	160, 978,
	161, 978,
	162, 978,
	163, 978,
	164, 978,
	165, 978,
	166, 978,
	167, 978,
	168, 978,
	169, 978,
	171, 978,
	172, 978,
	176, 978,
	177, 978,
	178, 978,
	179, 978,
	181, 978,
	182, 978,
	183, 978,
	184, 978,
	185, 978,
	186, 978,
	187, 978,
	188, 978,
	189, 978,
	191, 978,
	193, 978,
	194, 978,
	195, 978,
	196, 978,
	197, 978,
	198, 978,
	199, 978,
	200, 978,
	201, 978,
	204, 978,
	205, 978,
	206, 978,
	207, 978,
	209, 978,
	210, 978,
	212, 978,
	213, 978,
	214, 978,
	215, 978,
	216, 978,
	217, 978,
	219, 978,
	220, 978,
	223, 978,
	225, 978,
	226, 978,
	227, 978,
	228, 978,
	229, 978,
	230, 978,
	231, 978,
	232, 978,
	233, 978,
	234, 978,
	235, 978,
	236, 978,
	237, 978,
	238, 978,
	239, 978,
	240, 978,
	241, 978,
	242, 978,
	243, 978,
	244, 978,
	245, 978,
	246, 978,
	248, 978,
	249, 978,
	250, 978,
	253, 978,
	254, 978,
	255, 978,
	258, 978,
	259, 978,
	260, 978,
	261, 978,
	262, 978,
	263, 978,
	264, 978,
	265, 978,
	266, 978,
	267, 978,
	268, 978,
	269, 978,
	270, 978,
	271, 978,
	273, 978,
	274, 978,
	275, 978,
	276, 978,
	277, 978,
	278, 978,
	280, 978,
	282, 978,
	283, 978,
	284, 978,
	285, 978,
	286, 978,
	287, 978,
	288, 978,
	289, 978,
	290, 978,
	292, 978,
	293, 978,
	294, 978,
	295, 978,
	296, 978,
	298, 978,
	299, 978,
	300, 978,
	301, 978,
	302, 978,
	303, 978,
	304, 978,
	305, 978,
	307, 978,
	308, 978,
	309, 978,
	310, 978,
	311, 978,
	312, 978,
	313, 978,
	314, 978,
	316, 978,
	317, 978,
	318, 978,
	319, 978,
	320, 978,
	321, 978,
	322, 978,
	323, 978,
	325, 978,
	326, 978,
	327, 978,
	328, 978,
	329, 978,
	330, 978,
	331, 978,
	332, 978,
	333, 978,
	334, 978,
	335, 978,
	336, 978,
	337, 978,
	338, 978,
	339, 978,
	340, 978,
	341, 978,
	342, 978,
	343, 978,
	344, 978,
	346, 978,
	347, 978,
	348, 978,
	349, 978,
	350, 978,
	351, 978,
	352, 978,
	353, 978,
	354, 978,
	355, 978,
	356, 978,
	357, 978,
	359, 978,
	360, 978,
	361, 978,
	363, 978,
	364, 978,
	365, 978,
	366, 978,
	367, 978,
	368, 978,
	369, 978,
	370, 978,
	371, 978,
	373, 978,
	374, 978,
	375, 978,
	376, 978,
	379, 978,
	380, 978,
	381, 978,
	382, 978,
	383, 978,
	384, 978,
	385, 978,
	386, 978,
	387, 978,
	389, 978,
	390, 978,
	392, 978,
	393, 978,
	394, 978,
	395, 978,
	396, 978,
	397, 978,
	398, 978,
	399, 978,
	401, 978,
	402, 978,
	403, 978,
	404, 978,
	405, 978,
	406, 978,
	407, 978,
	409, 978,
	410, 978,
	411, 978,
	416, 978,
	417, 978,
	418, 978,
	419, 978,
	420, 978,
	421, 978,
	422, 978,
	430, 978,
	435, 978,
	436, 978,
	437, 978,
	444, 978,
	449, 978,
	-2, 0,
	-1, 537,
	148, 1637,
	377, 1637,
	427, 1637,
	446, 1637,
	-2, 0,
	-1, 538,
	148, 1713,
	377, 1713,
	427, 1713,
	446, 1713,
	-2, 0,
	-1, 539,
	148, 1627,
	377, 1627,
	427, 1627,
	446, 1627,
	-2, 0,
	-1, 541,
	148, 1797,
	377, 1797,
	427, 1797,
	446, 1797,
	-2, 0,
	-1, 543,
	148, 1825,
	377, 1825,
	427, 1825,
	446, 1825,
	-2, 0,
	-1, 550,
	148, 1721,
	377, 1721,
	427, 1721,
	446, 1721,
	-2, 459,
	-1, 567,
	446, 1587,
	448, 1587,
	-2, 629,
	-1, 568,
	446, 1589,
	448, 1589,
	-2, 630,
	-1, 569,
	446, 1588,
	448, 1588,
	-2, 631,
	-1, 570,
	448, 1535,
	-2, 632,
	-1, 715,
	1, 557,
	443, 557,
	445, 557,
	447, 557,
	-2, 0,
	-1, 716,
	1, 628,
	145, 628,
	443, 628,
	445, 628,
	447, 628,
	-2, 0,
	-1, 722,
	1, 571,
	443, 571,
	445, 571,
	447, 571,
	-2, 0,
	-1, 724,
	1, 575,
	443, 575,
	445, 575,
	447, 575,
	-2, 0,
	-1, 726,
	1, 585,
	443, 585,
	445, 585,
	447, 585,
	-2, 0,
	-1, 727,
	1, 594,
	443, 594,
	445, 594,
	447, 594,
	-2, 0,
	-1, 728,
	1, 596,
	443, 596,
	445, 596,
	447, 596,
	-2, 0,
	-1, 732,
	1, 610,
	443, 610,
	445, 610,
	447, 610,
	-2, 0,
	-1, 733,
	1, 612,
	443, 612,
	445, 612,
	447, 612,
	-2, 0,
	-1, 776,
	132, 982,
	218, 982,
	247, 982,
	-2, 939,
	-1, 791,
	132, 981,
	218, 981,
	247, 981,
	-2, 939,
	-1, 815,
	446, 1586,
	-2, 467,
	-1, 844,
	444, 1578,
	-2, 1569,
	-1, 850,
	5, 1109,
	-2, 1618,
	-1, 851,
	5, 1110,
	-2, 1622,
	-1, 852,
	5, 1111,
	-2, 1621,
	-1, 853,
	5, 1112,
	-2, 1823,
	-1, 854,
	5, 1113,
	-2, 1723,
	-1, 855,
	5, 1114,
	-2, 1789,
	-1, 856,
	5, 1115,
	-2, 1791,
	-1, 857,
	5, 1116,
	-2, 1802,
	-1, 858,
	5, 1117,
	-2, 1792,
	-1, 859,
	5, 1118,
	-2, 1793,
	-1, 860,
	5, 1119,
	-2, 1617,
	-1, 861,
	5, 1120,
	-2, 1836,
	-1, 862,
	5, 1121,
	-2, 1688,
	-1, 863,
	5, 1122,
	-2, 1730,
	-1, 864,
	5, 1123,
	-2, 1732,
	-1, 865,
	5, 1124,
	-2, 1692,
	-1, 866,
	5, 1125,
	444, 1596,
	-2, 1587,
	-1, 867,
	5, 1181,
	444, 1181,
	-2, 1871,
	-1, 872,
	444, 1597,
	-2, 1588,
	-1, 874,
	5, 1129,
	-2, 1869,
	-1, 875,
	5, 1130,
	-2, 1870,
	-1, 876,
	5, 1131,
	-2, 1691,
	-1, 877,
	5, 1132,
	-2, 1882,
	-1, 878,
	5, 1133,
	-2, 1693,
	-1, 879,
	5, 1134,
	-2, 1694,
	-1, 880,
	5, 1135,
	-2, 1695,
	-1, 881,
	5, 1136,
	-2, 1851,
	-1, 882,
	5, 1137,
	-2, 1880,
	-1, 883,
	5, 1138,
	-2, 1672,
	-1, 884,
	5, 1139,
	-2, 1673,
	-1, 885,
	5, 1153,
	-2, 1863,
	-1, 887,
	5, 1128,
	-2, 1859,
	-1, 888,
	5, 1128,
	-2, 1858,
	-1, 889,
	5, 1128,
	-2, 1875,
	-1, 890,
	5, 1145,
	-2, 1853,
	-1, 891,
	5, 1146,
	-2, 1619,
	-1, 892,
	5, 1156,
	-2, 1852,
	-1, 893,
	5, 1158,
	-2, 1891,
	-1, 895,
	5, 1169,
	-2, 1647,
	-1, 896,
	5, 1180,
	-2, 1884,
	-1, 897,
	5, 1172,
	-2, 1885,
	-1, 898,
	5, 1180,
	-2, 1886,
	-1, 899,
	5, 1176,
	-2, 1887,
	-1, 900,
	5, 1096,
	-2, 1701,
	-1, 901,
	5, 1097,
	-2, 1702,
	-1, 902,
	446, 1584,
	-2, 1568,
	-1, 903,
	444, 1911,
	-2, 1585,
	-1, 923,
	5, 1164,
	-2, 1812,
	-1, 940,
	5, 1163,
	-2, 1892,
	-1, 950,
	5, 1165,
	410, 1165,
	-2, 1854,
	-1, 951,
	5, 1166,
	410, 1166,
	-2, 1855,
	-1, 987,
	444, 1596,
	-2, 1587,
	-1, 1016,
	148, 1825,
	377, 1825,
	427, 1825,
	446, 1825,
	-2, 0,
	-1, 1017,
	1, 447,
	447, 447,
	-2, 873,
	-1, 1137,
	298, 1565,
	437, 1565,
	-2, 1564,
	-1, 1160,
	449, 1565,
	-2, 1566,
	-1, 1195,
	289, 660,
	409, 660,
	-2, 228,
	-1, 1215,
	269, 967,
	-2, 777,
	-1, 1224,
	251, 1591,
	-2, 0,
	-1, 1288,
	1, 336,
	443, 336,
	445, 336,
	447, 336,
	-2, 941,
	-1, 1291,
	4, 1890,
	11, 1890,
	12, 1890,
	14, 1890,
	15, 1890,
	16, 1890,
	17, 1890,
	18, 1890,
	19, 1890,
	21, 1890,
	22, 1890,
	23, 1890,
	24, 1890,
	25, 1890,
	27, 1890,
	30, 1890,
	32, 1890,
	34, 1890,
	37, 1890,
	38, 1890,
	39, 1890,
	40, 1890,
	41, 1890,
	42, 1890,
	43, 1890,
	44, 1890,
	45, 1890,
	46, 1890,
	48, 1890,
	49, 1890,
	50, 1890,
	51, 1890,
	52, 1890,
	53, 1890,
	56, 1890,
	57, 1890,
	58, 1890,
	59, 1890,
	61, 1890,
	62, 1890,
	63, 1890,
	66, 1890,
	67, 1890,
	68, 1890,
	69, 1890,
	70, 1890,
	71, 1890,
	72, 1890,
	73, 1890,
	74, 1890,
	75, 1890,
	77, 1890,
	78, 1890,
	79, 1890,
	80, 1890,
	81, 1890,
	83, 1890,
	84, 1890,
	85, 1890,
	93, 1890,
	94, 1890,
	95, 1890,
	96, 1890,
	97, 1890,
	98, 1890,
	99, 1890,
	100, 1890,
	102, 1890,
	104, 1890,
	105, 1890,
	107, 1890,
	110, 1890,
	111, 1890,
	112, 1890,
	114, 1890,
	116, 1890,
	117, 1890,
	119, 1890,
	120, 1890,
	121, 1890,
	122, 1890,
	123, 1890,
	124, 1890,
	125, 1890,
	126, 1890,
	127, 1890,
	128, 1890,
	129, 1890,
	133, 1890,
	134, 1890,
	135, 1890,
	136, 1890,
	137, 1890,
	138, 1890,
	139, 1890,
	140, 1890,
	141, 1890,
	142, 1890,
	143, 1890,
	144, 1890,
	146, 1890,
	149, 1890,
	150, 1890,
	151, 1890,
	153, 1890,
	154, 1890,
	156, 1890,
	157, 1890,
	159, 1890,
	160, 1890,
	161, 1890,
	162, 1890,
	163, 1890,
	164, 1890,
	165, 1890,
	166, 1890,
	167, 1890,
	168, 1890,
	169, 1890,
	170, 1890,
	171, 1890,
	172, 1890,
	173, 1890,
	174, 1890,
	175, 1890,
	177, 1890,
	178, 1890,
	179, 1890,
	181, 1890,
	182, 1890,
	183, 1890,
	184, 1890,
	185, 1890,
	186, 1890,
	187, 1890,
	188, 1890,
	189, 1890,
	191, 1890,
	193, 1890,
	194, 1890,
	195, 1890,
	196, 1890,
	197, 1890,
	198, 1890,
	199, 1890,
	200, 1890,
	201, 1890,
	202, 1890,
	203, 1890,
	204, 1890,
	205, 1890,
	206, 1890,
	207, 1890,
	209, 1890,
	210, 1890,
	212, 1890,
	213, 1890,
	214, 1890,
	215, 1890,
	216, 1890,
	217, 1890,
	219, 1890,
	220, 1890,
	223, 1890,
	224, 1890,
	225, 1890,
	226, 1890,
	227, 1890,
	228, 1890,
	229, 1890,
	230, 1890,
	231, 1890,
	232, 1890,
	233, 1890,
	234, 1890,
	235, 1890,
	236, 1890,
	237, 1890,
	238, 1890,
	241, 1890,
	243, 1890,
	244, 1890,
	245, 1890,
	246, 1890,
	248, 1890,
	249, 1890,
	250, 1890,
	253, 1890,
	254, 1890,
	255, 1890,
	256, 1890,
	258, 1890,
	259, 1890,
	261, 1890,
	263, 1890,
	264, 1890,
	265, 1890,
	266, 1890,
	267, 1890,
	268, 1890,
	269, 1890,
	270, 1890,
	271, 1890,
	273, 1890,
	274, 1890,
	275, 1890,
	276, 1890,
	277, 1890,
	278, 1890,
	280, 1890,
	282, 1890,
	283, 1890,
	284, 1890,
	285, 1890,
	286, 1890,
	287, 1890,
	288, 1890,
	289, 1890,
	290, 1890,
	292, 1890,
	293, 1890,
	294, 1890,
	295, 1890,
	296, 1890,
	297, 1890,
	298, 1890,
	299, 1890,
	300, 1890,
	301, 1890,
	302, 1890,
	303, 1890,
	304, 1890,
	305, 1890,
	307, 1890,
	308, 1890,
	309, 1890,
	310, 1890,
	311, 1890,
	312, 1890,
	313, 1890,
	314, 1890,
	315, 1890,
	316, 1890,
	317, 1890,
	318, 1890,
	319, 1890,
	320, 1890,
	321, 1890,
	322, 1890,
	323, 1890,
	325, 1890,
	326, 1890,
	327, 1890,
	328, 1890,
	329, 1890,
	330, 1890,
	331, 1890,
	332, 1890,
	333, 1890,
	334, 1890,
	336, 1890,
	337, 1890,
	338, 1890,
	339, 1890,
	340, 1890,
	341, 1890,
	342, 1890,
	343, 1890,
	344, 1890,
	346, 1890,
	347, 1890,
	348, 1890,
	349, 1890,
	350, 1890,
	351, 1890,
	352, 1890,
	353, 1890,
	354, 1890,
	355, 1890,
	356, 1890,
	357, 1890,
	359, 1890,
	360, 1890,
	361, 1890,
	363, 1890,
	364, 1890,
	365, 1890,
	366, 1890,
	367, 1890,
	368, 1890,
	369, 1890,
	370, 1890,
	371, 1890,
	373, 1890,
	374, 1890,
	375, 1890,
	376, 1890,
	379, 1890,
	380, 1890,
	381, 1890,
	382, 1890,
	383, 1890,
	385, 1890,
	386, 1890,
	387, 1890,
	389, 1890,
	390, 1890,
	393, 1890,
	394, 1890,
	395, 1890,
	396, 1890,
	397, 1890,
	399, 1890,
	401, 1890,
	402, 1890,
	403, 1890,
	404, 1890,
	405, 1890,
	406, 1890,
	407, 1890,
	409, 1890,
	410, 1890,
	411, 1890,
	416, 1890,
	417, 1890,
	418, 1890,
	419, 1890,
	420, 1890,
	421, 1890,
	422, 1890,
	423, 1890,
	425, 1890,
	426, 1890,
	427, 1890,
	428, 1890,
	429, 1890,
	430, 1890,
	432, 1890,
	433, 1890,
	434, 1890,
	435, 1890,
	436, 1890,
	437, 1890,
	438, 1890,
	439, 1890,
	440, 1890,
	442, 1890,
	445, 1890,
	446, 1890,
	448, 1890,
	449, 1890,
	-2, 0,
	-1, 1294,
	148, 1797,
	377, 1797,
	427, 1797,
	446, 1797,
	-2, 0,
	-1, 1364,
	1, 1843,
	443, 1843,
	445, 1843,
	446, 1843,
	447, 1843,
	-2, 608,
	-1, 1365,
	1, 1795,
	443, 1795,
	445, 1795,
	446, 1795,
	447, 1795,
	-2, 609,
	-1, 1378,
	1, 868,
	447, 868,
	-2, 873,
	-1, 1383,
	132, 981,
	218, 981,
	247, 981,
	-2, 939,
	-1, 1476,
	118, 943,
	132, 943,
	190, 943,
	218, 943,
	247, 943,
	257, 943,
	391, 943,
	-2, 1337,
	-1, 1529,
	445, 1470,
	-2, 0,
	-1, 1564,
	118, 943,
	132, 943,
	190, 943,
	218, 943,
	247, 943,
	257, 943,
	391, 943,
	-2, 1053,
	-1, 1619,
	444, 1168,
	-2, 1156,
	-1, 1658,
	1, 449,
	447, 449,
	-2, 873,
	-1, 1911,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1217,
	-1, 1912,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1218,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1219,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1220,
	-1, 1915,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1221,
	-1, 1916,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1222,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1223,
	-1, 1918,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1224,
	-1, 1930,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1236,
	-1, 1931,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1237,
	-1, 1932,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1238,
	-1, 1935,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1243,
	-1, 1941,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1247,
	-1, 1943,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1255,
	-1, 1944,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1256,
	-1, 1945,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1257,
	-1, 1946,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1258,
	-1, 2039,
	5, 1125,
	148, 1481,
	444, 1596,
	-2, 1587,
	-1, 2040,
	148, 1482,
	-2, 1847,
	-1, 2041,
	148, 1483,
	-2, 1720,
	-1, 2042,
	148, 1484,
	-2, 1648,
	-1, 2043,
	148, 1485,
	-2, 1682,
	-1, 2044,
	148, 1486,
	-2, 1718,
	-1, 2045,
	148, 1487,
	-2, 1788,
	-1, 2113,
	1, 1054,
	83, 1054,
	118, 1054,
	132, 1054,
	145, 1054,
	149, 1054,
	155, 1054,
	158, 1054,
	181, 1054,
	190, 1054,
	199, 1054,
	214, 1054,
	218, 1054,
	234, 1054,
	247, 1054,
	251, 1054,
	257, 1054,
	306, 1054,
	308, 1054,
	391, 1054,
	400, 1054,
	413, 1054,
	414, 1054,
	415, 1054,
	424, 1054,
	443, 1054,
	445, 1054,
	447, 1054,
	448, 1054,
	-2, 1053,
	-1, 2118,
	444, 1570,
	-2, 1582,
	-1, 2140,
	444, 1167,
	-2, 1157,
	-1, 2353,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1245,
	-1, 2354,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1249,
	-1, 2360,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1251,
	-1, 2540,
	196, 873,
	280, 873,
	287, 873,
	424, 873,
	-2, 446,
	-1, 2611,
	445, 1540,
	448, 1540,
	-2, 1556,
	-1, 2625,
	269, 967,
	-2, 777,
	-1, 2702,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1253,
	-1, 2709,
	194, 0,
	195, 0,
	241, 0,
	-2, 1272,
	-1, 2772,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1301,
	-1, 2773,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1302,
	-1, 2774,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1303,
	-1, 2778,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1307,
	-1, 2779,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1308,
	-1, 2780,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1309,
	-1, 2822,
	444, 1571,
	-2, 1583,
	-1, 2903,
	446, 1993,
	-2, 916,
	-1, 2945,
	194, 0,
	195, 0,
	241, 0,
	-2, 1273,
	-1, 2948,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1276,
	-1, 2949,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1278,
	-1, 3090,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1277,
	-1, 3091,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1279,
	-1, 3101,
	194, 0,
	-2, 1310,
	-1, 3191,
	194, 0,
	-2, 1311,
	-1, 3300,
	40, 0,
	169, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1850,
}

const sqlPrivate = 57344

const sqlLast = 69023

var sqlAct = [...]int{

	872, 3299, 3045, 3129, 3382, 3154, 3309, 3132, 3372, 3271,
	3273, 2265, 3257, 3310, 3270, 3311, 3157, 2274, 2070, 3118,
	1824, 2740, 2612, 3195, 3298, 2266, 3059, 988, 3082, 2894,
	2105, 801, 2842, 1898, 2899, 1141, 2889, 3004, 1589, 207,
	2381, 207, 207, 1280, 1958, 207, 207, 207, 207, 207,
	2642, 1391, 207, 792, 2634, 2843, 548, 2262, 2609, 2549,
	569, 1559, 3105, 2306, 2346, 2636, 2379, 2647, 2242, 980,
	1134, 2239, 2101, 2502, 829, 1557, 1042, 2515, 207, 2980,
	1785, 2462, 569, 1349, 2297, 1590, 1782, 2299, 2275, 665,
	2478, 2305, 1474, 1538, 1774, 1576, 1775, 2171, 1711, 32,
	1023, 1702, 2489, 2223, 1971, 800, 138, 2106, 2795, 3196,
	2162, 2169, 2461, 1567, 1502, 1895, 1891, 1989, 1484, 2342,
	2646, 1150, 894, 1153, 1729, 1735, 4, 868, 2240, 1276,
	1378, 1539, 2067, 1690, 1030, 3155, 1688, 2001, 2200, 1955,
	789, 2201, 2520, 199, 2610, 86, 1143, 1289, 1771, 1273,
	1803, 1263, 2268, 2309, 1209, 2108, 1983, 570, 571, 2078,
	1019, 972, 975, 2093, 954, 201, 200, 1548, 516, 1465,
	207, 207, 1392, 145, 1972, 827, 1390, 532, 2035, 1770,
	565, 542, 138, 1287, 1791, 1239, 1497, 791, 146, 641,
	1701, 1163, 610, 828, 519, 952, 500, 1377, 977, 707,
	1396, 524, 1221, 660, 2811, 2377, 1805, 2812, 1825, 58,
	2218, 1805, 1805, 3410, 1558, 527, 2087, 1027, 3401, 3400,
	59, 2087, 2087, 2267, 2697, 574, 577, 2188, 3381, 2654,
	3368, 1742, 2271, 3018, 63, 3366, 3331, 3329, 3018, 2087,
	2087, 1817, 3326, 3323, 1738, 3327, 3324, 574, 577, 661,
	175, 1027, 1404, 1405, 1986, 2538, 3320, 3296, 2653, 1742,
	1742, 2087, 674, 3295, 69, 3292, 1742, 3291, 1817, 3252,
	1817, 1001, 2133, 796, 58, 2798, 663, 3243, 1407, 3242,
	3018, 3236, 3018, 796, 1742, 59, 1184, 3230, 177, 2104,
	3018, 969, 3228, 797, 75, 3018, 2080, 3193, 3179, 63,
	2133, 1742, 3176, 85, 1406, 3018, 3146, 76, 3145, 1742,
	3138, 1742, 777, 1742, 3253, 3137, 3111, 1987, 3018, 1742,
	3092, 3073, 175, 2133, 2666, 955, 955, 776, 1006, 69,
	3042, 176, 3036, 2087, 3017, 2087, 2129, 3018, 3180, 175,
	2947, 169, 1002, 2133, 784, 77, 1817, 2913, 2905, 170,
	2906, 2906, 2817, 958, 959, 2818, 1404, 1405, 2807, 75,
	177, 2808, 2801, 2798, 2733, 2087, 956, 1742, 85, 1742,
	147, 2079, 76, 1178, 960, 2673, 2475, 177, 2674, 2087,
	2473, 3037, 1407, 2087, 1412, 1988, 1985, 2472, 2426, 2409,
	2087, 2087, 2410, 2398, 2396, 2295, 2087, 2146, 1821, 2397,
	2087, 2132, 2126, 176, 2133, 2087, 2120, 1742, 1406, 1742,
	77, 2434, 2435, 169, 1434, 1435, 1436, 2674, 2215, 2086,
	176, 170, 2087, 1820, 2160, 1661, 1821, 2666, 2249, 2345,
	169, 1741, 2158, 1534, 1162, 2131, 1351, 2655, 170, 957,
	783, 1172, 147, 782, 781, 1779, 780, 779, 2434, 2435,
	1183, 1681, 78, 775, 774, 175, 2656, 1806, 773, 147,
	772, 771, 1806, 1806, 2087, 1427, 770, 2327, 2255, 769,
	175, 2449, 871, 2995, 2380, 768, 767, 766, 765, 1990,
	764, 705, 704, 703, 144, 81, 702, 82, 1412, 701,
	700, 699, 799, 177, 698, 697, 696, 695, 694, 693,
	692, 691, 690, 689, 688, 207, 175, 687, 177, 686,
	685, 684, 683, 682, 207, 681, 673, 78, 664, 672,
	632, 115, 631, 590, 589, 588, 580, 579, 2959, 2653,
	578, 555, 554, 553, 552, 207, 176, 1177, 536, 197,
	196, 195, 207, 2440, 177, 194, 169, 193, 192, 144,
	81, 176, 82, 191, 170, 1002, 1428, 190, 207, 1045,
	207, 207, 1146, 207, 1045, 207, 189, 116, 188, 1475,
	187, 175, 186, 207, 207, 2270, 1984, 185, 1029, 148,
	2440, 184, 1034, 664, 183, 182, 115, 176, 58, 181,
	147, 180, 179, 2434, 2435, 2907, 2079, 169, 207, 59,
	2138, 1813, 178, 999, 1475, 170, 1804, 1871, 175, 177,
	2815, 2518, 207, 63, 1146, 1146, 207, 207, 2403, 207,
	2392, 2227, 2121, 2112, 2450, 1686, 147, 1560, 1002, 2026,
	1574, 207, 116, 1491, 1168, 2024, 1036, 2256, 2022, 207,
	2020, 1505, 2018, 69, 148, 1505, 177, 1504, 1827, 1403,
	983, 1504, 176, 207, 207, 207, 207, 207, 1146, 1146,
	1486, 2450, 169, 1146, 990, 207, 1146, 207, 1508, 1166,
	170, 3316, 1503, 75, 1017, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 85, 1171, 3297, 1176, 76, 1182, 3226, 176,
	3186, 662, 3183, 3181, 1156, 175, 3074, 2997, 2979, 169,
	3067, 2978, 1284, 3128, 1137, 2966, 2965, 170, 1160, 2434,
	2435, 2964, 1146, 2963, 1826, 2451, 2957, 2956, 2955, 1038,
	2954, 1131, 1136, 1014, 77, 2440, 2878, 2831, 147, 2677,
	1165, 1164, 207, 177, 2830, 2828, 2821, 2792, 574, 577,
	1226, 2791, 2790, 2717, 2713, 2513, 207, 2469, 2460, 2433,
	2430, 2429, 2451, 2427, 2416, 2415, 2414, 2411, 2408, 1222,
	1222, 207, 2386, 175, 2385, 2378, 1404, 1405, 2296, 138,
	1299, 2113, 1447, 1448, 1449, 1994, 176, 1302, 1277, 1403,
	1408, 1409, 1410, 1411, 1413, 1414, 169, 1486, 968, 1487,
	1292, 1485, 1407, 1747, 170, 1453, 2254, 3408, 1745, 1160,
	1473, 177, 1402, 3380, 3379, 1267, 1270, 3332, 797, 1290,
	989, 2742, 3287, 3285, 175, 147, 3221, 1383, 1406, 1223,
	3218, 3215, 3214, 3210, 3204, 3175, 1426, 3174, 1961, 3124,
	1384, 78, 2445, 2443, 2444, 2436, 2437, 2438, 2439, 2441,
	2442, 2440, 3103, 3079, 176, 3078, 2434, 2435, 1043, 2452,
	2453, 2454, 177, 1154, 169, 1780, 3057, 3054, 3049, 2994,
	2977, 2927, 170, 144, 81, 2943, 82, 2924, 2858, 2445,
	2443, 2444, 2436, 2437, 2438, 2439, 2441, 2442, 1682, 2202,
	2857, 2135, 2846, 147, 2845, 175, 2803, 2341, 1429, 1430,
	1431, 1432, 2708, 3066, 2667, 176, 2628, 664, 1412, 2599,
	115, 2580, 2559, 2558, 2534, 169, 2449, 1376, 1307, 2474,
	2532, 2407, 2406, 170, 2391, 2369, 2236, 1382, 1967, 1404,
	1405, 1509, 1506, 177, 1444, 1454, 1498, 1495, 1434, 1435,
	1436, 2142, 1389, 2141, 147, 2116, 2098, 2085, 1381, 2016,
	1469, 1573, 2434, 2435, 1537, 1407, 116, 844, 1533, 1379,
	1532, 1531, 1530, 1529, 207, 1528, 1527, 1526, 148, 1525,
	1523, 1522, 1521, 1520, 1519, 1518, 176, 1517, 1516, 1515,
	1514, 1406, 1442, 1513, 777, 1512, 169, 1511, 2440, 1427,
	207, 1488, 797, 1536, 170, 1385, 1545, 1470, 1468, 776,
	207, 1045, 207, 207, 207, 1399, 1400, 2559, 1463, 1013,
	1146, 569, 207, 207, 1004, 147, 569, 207, 2434, 2435,
	1828, 996, 207, 1507, 3198, 1583, 3053, 2436, 2437, 2438,
	2439, 2441, 2442, 2996, 2951, 1681, 2827, 2810, 2806, 2455,
	2395, 2099, 1656, 1487, 2530, 805, 1466, 1045, 1681, 1568,
	1569, 2495, 3219, 2583, 2637, 3072, 2434, 2435, 1031, 2452,
	2453, 2454, 1433, 2434, 2435, 1033, 1542, 1543, 3038, 2450,
	1024, 2813, 1684, 1322, 1555, 2942, 2669, 1027, 1655, 2668,
	1428, 1560, 2025, 811, 2440, 1499, 1500, 138, 2023, 1596,
	1505, 2021, 2413, 2019, 1374, 2017, 1504, 2434, 2435, 2412,
	2351, 1404, 1405, 2190, 1681, 1445, 1028, 1586, 1556, 1667,
	2856, 1493, 1653, 1677, 762, 1032, 2449, 1825, 3158, 955,
	3184, 3182, 1351, 1578, 1659, 1776, 1986, 1407, 1518, 1350,
	2683, 1580, 797, 1518, 2614, 986, 2613, 1621, 1018, 2594,
	1706, 1724, 3106, 3383, 2204, 2438, 2439, 2441, 2442, 1565,
	2440, 2267, 763, 1406, 1025, 3127, 2744, 1658, 3317, 1535,
	2451, 1026, 2401, 2002, 2140, 2450, 1524, 1501, 2607, 1767,
	1199, 3328, 1146, 207, 3325, 2649, 574, 577, 2838, 1045,
	1680, 574, 577, 1562, 1696, 3267, 2890, 1443, 2440, 1987,
	1593, 1585, 2303, 1547, 3355, 1446, 1652, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 3356, 1587, 2173, 2053,
	1311, 3235, 2542, 3028, 3318, 1187, 1197, 627, 207, 207,
	2147, 3405, 2544, 1672, 1671, 207, 756, 1681, 1678, 2440,
	3153, 2450, 1673, 1412, 2263, 207, 754, 3149, 3148, 2455,
	967, 752, 758, 3147, 207, 749, 207, 2872, 207, 1472,
	1860, 2012, 207, 1858, 2869, 2164, 2451, 1988, 1985, 1551,
	2868, 2835, 1726, 2164, 207, 1728, 2861, 2834, 1732, 2450,
	2446, 2447, 2448, 1710, 2163, 1348, 1668, 2445, 2443, 2444,
	2436, 2437, 2438, 2439, 2441, 2442, 1198, 1033, 1346, 1763,
	1577, 1554, 2390, 2389, 628, 2176, 2388, 2387, 1027, 2355,
	2136, 2220, 1736, 1691, 1146, 207, 1146, 1692, 2214, 1549,
	2450, 1146, 2211, 2192, 207, 2128, 207, 207, 1024, 1942,
	1675, 795, 2451, 1033, 1552, 1380, 1146, 1146, 1797, 207,
	1165, 1164, 1024, 1788, 795, 207, 1687, 1032, 574, 577,
	569, 207, 1161, 207, 1550, 207, 2582, 207, 790, 207,
	2011, 1990, 1900, 1309, 1829, 2531, 746, 1731, 1414, 207,
	2451, 2491, 1766, 207, 1740, 1232, 3234, 1231, 1230, 2154,
	1229, 1345, 207, 1032, 2443, 2444, 2436, 2437, 2438, 2439,
	2441, 2442, 1251, 1193, 1703, 1839, 2330, 1868, 3087, 1957,
	2119, 207, 1693, 794, 2684, 2191, 1757, 207, 1756, 1869,
	1835, 2451, 1025, 3134, 1695, 2183, 794, 1795, 1957, 1026,
	1622, 994, 1700, 3024, 3289, 2848, 1025, 1045, 1553, 1304,
	2182, 1965, 2686, 1026, 1387, 1283, 1963, 2175, 1808, 1790,
	3015, 1810, 1793, 1323, 1812, 1704, 1705, 1831, 1815, 1676,
	1319, 2444, 2436, 2437, 2438, 2439, 2441, 2442, 1984, 797,
	1290, 1794, 2685, 1875, 1878, 2208, 3012, 983, 1697, 983,
	796, 2002, 1682, 2202, 1341, 1842, 1953, 2333, 1743, 1359,
	2446, 2447, 2448, 796, 993, 1682, 2202, 2445, 2443, 2444,
	2436, 2437, 2438, 2439, 2441, 2442, 1014, 1822, 1951, 1596,
	1596, 1012, 2442, 1830, 2324, 1990, 3355, 3013, 1973, 1974,
	1896, 1897, 1045, 1569, 991, 574, 577, 630, 629, 3375,
	2490, 870, 1305, 1373, 1210, 1342, 1973, 1999, 1755, 622,
	1849, 2436, 2437, 2438, 2439, 2441, 2442, 1410, 1411, 1413,
	1414, 1682, 2202, 2541, 1873, 2125, 1870, 1621, 1621, 1691,
	2174, 1876, 1351, 1692, 1344, 207, 1027, 679, 1698, 3347,
	1208, 3022, 2034, 3314, 2038, 2038, 2051, 1195, 1973, 2332,
	1027, 2071, 2073, 2343, 2344, 2644, 2077, 2859, 1872, 1045,
	207, 1874, 1706, 1867, 1877, 2161, 2329, 2645, 2577, 207,
	777, 2591, 207, 777, 777, 1045, 3211, 1207, 621, 1947,
	1593, 1593, 3395, 1712, 793, 1887, 2727, 1948, 1888, 1889,
	1949, 2009, 2117, 1954, 750, 2586, 2010, 793, 1310, 2114,
	1716, 2014, 2015, 1805, 750, 2127, 1998, 760, 1691, 751,
	759, 2366, 1692, 750, 797, 1723, 1708, 1859, 1693, 2100,
	1857, 2724, 2644, 2110, 2111, 3008, 1210, 797, 3009, 2849,
	1695, 797, 2543, 2364, 1969, 659, 1496, 1698, 2528, 2870,
	1250, 1192, 1713, 2331, 1682, 1679, 512, 2434, 2435, 737,
	2452, 2453, 2454, 1356, 1308, 207, 737, 3023, 2251, 2212,
	1698, 3315, 1996, 2090, 2933, 3011, 2712, 2602, 3135, 3097,
	507, 788, 3362, 1694, 786, 3278, 737, 3014, 788, 982,
	1990, 3223, 3373, 1462, 1697, 1993, 2571, 1045, 2405, 2725,
	955, 2094, 207, 2109, 138, 1706, 1899, 1693, 788, 2075,
	207, 2357, 2083, 2084, 2062, 2046, 747, 2449, 796, 1695,
	207, 1320, 797, 1717, 2928, 2130, 2095, 2096, 2091, 2824,
	1956, 1007, 620, 207, 619, 2935, 1146, 2570, 3312, 1565,
	1964, 3354, 1950, 787, 2361, 3313, 3352, 1357, 207, 1045,
	738, 1952, 207, 207, 1328, 2362, 1939, 738, 2367, 1386,
	3374, 3164, 623, 2137, 581, 2165, 3056, 2880, 3250, 1507,
	3346, 992, 1321, 1697, 2632, 1318, 2258, 738, 207, 1306,
	207, 2573, 1769, 207, 1698, 1544, 1718, 1719, 3010, 2440,
	3084, 2003, 3376, 1990, 2150, 1714, 1727, 1596, 207, 2237,
	2145, 1841, 2575, 2209, 1005, 207, 2152, 207, 2195, 207,
	826, 2187, 680, 2177, 2179, 207, 1000, 1358, 207, 2194,
	207, 2222, 207, 1715, 207, 207, 1011, 207, 1146, 1146,
	1146, 2148, 1146, 2144, 1499, 1500, 207, 207, 2153, 207,
	2455, 2217, 499, 3396, 2781, 1621, 207, 2574, 1395, 1394,
	2224, 2151, 2975, 2934, 1707, 2168, 2229, 207, 2231, 207,
	2315, 2317, 1669, 1698, 1806, 3140, 2203, 2205, 2206, 2207,
	2450, 2185, 2291, 2292, 2118, 2246, 1137, 2221, 207, 207,
	207, 2193, 207, 3390, 2260, 1937, 1940, 2521, 739, 3139,
	3083, 1160, 3122, 1689, 2210, 739, 3248, 2363, 1593, 1698,
	1883, 2269, 3345, 2269, 3201, 207, 2365, 1720, 2837, 1165,
	2225, 2633, 1666, 2555, 2551, 739, 2278, 574, 577, 1694,
	1478, 2234, 2259, 1462, 1483, 3249, 2302, 2241, 508, 1734,
	2238, 2250, 986, 1936, 986, 1393, 138, 1789, 1778, 1777,
	2316, 2504, 2224, 1547, 2224, 2318, 1751, 2319, 2289, 1733,
	2723, 1581, 2322, 2287, 2323, 2328, 2273, 2293, 3027, 582,
	583, 2451, 2280, 3258, 1395, 3026, 1864, 1160, 1160, 2284,
	1721, 2285, 1394, 2286, 2288, 2782, 1664, 1730, 1290, 2294,
	509, 2783, 1662, 2304, 3224, 3085, 2159, 1139, 984, 2976,
	740, 1665, 3060, 2196, 2895, 2358, 1884, 740, 1694, 2235,
	1704, 1705, 1253, 1329, 207, 3123, 2383, 2384, 2335, 1551,
	1551, 2561, 2505, 2560, 2349, 785, 1836, 740, 510, 2492,
	511, 2393, 1160, 2089, 3389, 2338, 2088, 2124, 741, 2123,
	2122, 678, 983, 1224, 2340, 741, 2248, 671, 1238, 1215,
	1218, 1554, 1554, 2337, 794, 585, 584, 1236, 3130, 983,
	1225, 3206, 2503, 3046, 2678, 741, 1938, 1787, 1393, 1549,
	2092, 3359, 514, 3156, 2604, 2981, 3120, 2796, 2007, 3361,
	3330, 2446, 2447, 2448, 1552, 1552, 3261, 3207, 2445, 2443,
	2444, 2436, 2437, 2438, 2439, 2441, 2442, 3220, 3102, 2356,
	1371, 1296, 1045, 1353, 1550, 586, 587, 2974, 2471, 2394,
	2476, 3121, 2874, 3025, 2463, 2483, 2484, 1339, 207, 1337,
	2707, 207, 1335, 2525, 2485, 1333, 2428, 797, 207, 2368,
	2464, 207, 207, 1045, 2522, 3131, 3225, 2197, 2198, 2245,
	2219, 2189, 1045, 1331, 3262, 3208, 1325, 1314, 2143, 207,
	1234, 2499, 1575, 2506, 1572, 1372, 2508, 1300, 2400, 790,
	1856, 2509, 2510, 2326, 207, 2325, 2321, 1866, 1846, 1654,
	1510, 1303, 1214, 2006, 3308, 3255, 3001, 2893, 1553, 1553,
	2854, 2498, 207, 207, 207, 2852, 2836, 2631, 207, 3168,
	2616, 207, 2615, 2264, 2253, 2512, 2252, 2539, 207, 207,
	207, 207, 207, 2232, 2517, 1819, 2516, 748, 1818, 1816,
	2545, 2497, 207, 207, 2480, 2500, 1814, 2466, 2467, 2468,
	207, 1811, 2487, 2488, 1809, 2494, 2493, 1807, 1596, 1798,
	1748, 2477, 207, 1146, 2735, 207, 676, 677, 1237, 2529,
	1746, 1045, 669, 670, 2526, 1737, 1370, 1235, 1045, 1352,
	2557, 2552, 1725, 207, 2535, 2536, 207, 207, 2563, 2537,
	2567, 2568, 513, 1338, 1596, 1336, 207, 2635, 1334, 1146,
	207, 1332, 1146, 1146, 1146, 2556, 1621, 964, 1722, 207,
	1709, 2585, 1699, 2507, 2347, 207, 2523, 2524, 2621, 1330,
	2617, 207, 1324, 207, 2548, 1582, 1233, 1397, 2540, 3356,
	207, 965, 2592, 1855, 3281, 3076, 2578, 3075, 2579, 2562,
	1685, 2565, 1621, 2600, 2546, 1189, 1696, 3170, 2181, 2164,
	2904, 1706, 2164, 1146, 1146, 1843, 2640, 753, 755, 1593,
	2180, 207, 207, 2178, 1862, 207, 2597, 2665, 2598, 2639,
	3213, 1696, 2576, 3188, 2651, 2581, 2982, 2587, 207, 2199,
	1045, 207, 207, 1045, 207, 2348, 2595, 2681, 2590, 2194,
	2184, 2596, 1401, 2588, 2216, 1593, 2601, 2589, 1368, 1369,
	207, 1736, 515, 1404, 1405, 1766, 2186, 1736, 3254, 1398,
	1404, 1405, 3227, 966, 2884, 2879, 2820, 2272, 2076, 1657,
	1588, 2482, 2527, 3371, 3388, 2434, 2435, 1313, 902, 1407,
	556, 1475, 2648, 1312, 1546, 2826, 2638, 1404, 1405, 2156,
	2155, 2648, 2730, 1045, 2156, 2680, 2533, 2157, 2676, 526,
	2657, 138, 2511, 2013, 1045, 1406, 207, 2008, 2710, 2691,
	1981, 2519, 1406, 2952, 2825, 1584, 797, 203, 1355, 502,
	503, 1354, 2664, 520, 502, 520, 530, 535, 2650, 2722,
	551, 1886, 1473, 1471, 3397, 2659, 2660, 2661, 203, 2662,
	2663, 3114, 3070, 3048, 1596, 2923, 2912, 2888, 2745, 2719,
	2720, 2721, 2689, 2688, 2877, 2876, 668, 2875, 2851, 2693,
	203, 2658, 2695, 2692, 2629, 2627, 2282, 2257, 2233, 1968,
	1801, 1800, 1799, 562, 1781, 1759, 982, 1160, 982, 1758,
	1754, 1753, 2715, 1752, 1750, 1749, 1388, 1367, 1366, 2793,
	1347, 1343, 1621, 1596, 1596, 1340, 1326, 986, 1262, 207,
	1261, 1260, 1259, 2746, 1896, 2751, 2726, 2728, 2729, 1596,
	1596, 1258, 1257, 207, 986, 2741, 2734, 2519, 1256, 1045,
	1896, 2761, 1255, 1254, 1252, 1247, 2747, 1246, 1245, 2809,
	2748, 1244, 1243, 803, 2750, 2814, 1966, 1206, 1205, 207,
	1596, 1621, 1621, 2785, 2758, 1593, 1204, 1203, 502, 502,
	2760, 2789, 1202, 983, 564, 1478, 203, 1621, 1621, 1201,
	1200, 983, 983, 1194, 2054, 983, 1188, 1186, 1185, 1010,
	1009, 939, 849, 1660, 761, 2786, 614, 1739, 745, 2224,
	138, 3133, 2797, 207, 1361, 74, 1196, 601, 1621, 983,
	68, 2802, 2799, 2800, 1593, 1593, 2850, 3266, 735, 2862,
	2569, 2794, 2058, 1845, 1327, 1847, 2805, 2496, 2097, 3247,
	1593, 1593, 2960, 2404, 3194, 207, 207, 207, 2871, 1154,
	2816, 3096, 1043, 2005, 2873, 2823, 1492, 2829, 70, 837,
	922, 3002, 1045, 207, 2832, 2839, 2308, 1146, 2307, 2866,
	804, 1593, 1048, 1670, 843, 1683, 558, 2139, 2037, 1592,
	846, 1594, 848, 847, 207, 2840, 1595, 1494, 845, 1591,
	2247, 2276, 1241, 563, 2908, 725, 1674, 207, 207, 1146,
	1146, 1146, 2897, 207, 207, 207, 1962, 2000, 207, 207,
	2399, 1489, 2732, 817, 839, 207, 2867, 2883, 2860, 2194,
	1997, 2900, 2919, 2738, 2901, 1003, 816, 2501, 1045, 2643,
	2932, 2896, 2819, 560, 2891, 3065, 1882, 2339, 1879, 617,
	2431, 1823, 1982, 2886, 995, 2059, 2853, 2052, 2855, 2224,
	2887, 2048, 2885, 1375, 1464, 2277, 1035, 820, 1960, 1480,
	2373, 1837, 1838, 2950, 2514, 2898, 2652, 2134, 2902, 1890,
	557, 1768, 2909, 207, 963, 2910, 962, 2946, 961, 3272,
	3269, 2931, 2915, 1663, 2914, 2149, 1456, 2618, 833, 2926,
	1766, 2937, 2920, 2921, 2925, 2278, 2922, 1159, 2480, 2481,
	2938, 2930, 2679, 1211, 3212, 984, 561, 984, 1455, 757,
	3203, 1022, 1021, 1596, 1020, 2554, 3394, 559, 2847, 174,
	171, 173, 172, 2864, 2603, 90, 37, 36, 35, 17,
	114, 113, 112, 111, 207, 110, 109, 108, 2822, 107,
	106, 105, 104, 103, 1045, 102, 1045, 101, 100, 99,
	98, 97, 96, 95, 94, 93, 92, 91, 34, 547,
	544, 1621, 50, 49, 89, 207, 207, 207, 88, 16,
	2973, 33, 14, 54, 55, 13, 29, 207, 30, 80,
	79, 28, 15, 207, 27, 207, 25, 26, 207, 207,
	207, 207, 207, 11, 8, 7, 10, 12, 24, 207,
	207, 1146, 143, 1045, 142, 1146, 73, 141, 3020, 2984,
	2985, 72, 2987, 997, 1593, 2989, 2990, 140, 2516, 139,
	71, 207, 668, 23, 1045, 2999, 2993, 1146, 9, 2986,
	3000, 2988, 22, 135, 67, 137, 136, 207, 64, 3019,
	3050, 134, 2983, 1008, 3030, 133, 65, 132, 3044, 131,
	551, 3035, 66, 130, 21, 5, 53, 6, 207, 3081,
	2682, 803, 3062, 83, 1045, 803, 203, 3039, 203, 203,
	3040, 1151, 3021, 203, 84, 3043, 2998, 31, 62, 2640,
	3064, 203, 1167, 3031, 3032, 3051, 3063, 3077, 61, 60,
	1045, 3061, 3071, 20, 3029, 983, 3058, 1169, 52, 1173,
	19, 1179, 3034, 165, 3069, 164, 1191, 163, 162, 3047,
	158, 157, 161, 159, 3052, 160, 156, 129, 167, 166,
	1213, 2054, 2054, 154, 203, 203, 1045, 1151, 151, 150,
	153, 3108, 207, 3088, 207, 3068, 1045, 207, 155, 203,
	3086, 152, 149, 1766, 168, 207, 3104, 1249, 2648, 128,
	3093, 57, 127, 3080, 126, 125, 124, 123, 986, 2058,
	2058, 203, 203, 203, 203, 1151, 986, 986, 207, 3117,
	986, 56, 18, 551, 2, 203, 1, 3109, 3110, 3112,
	207, 982, 1596, 0, 1298, 0, 0, 207, 0, 0,
	0, 1301, 1146, 3116, 986, 3115, 0, 207, 982, 0,
	3152, 0, 0, 3160, 3136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3113, 0, 0, 3161, 207, 0,
	3163, 2054, 2054, 2054, 3150, 3173, 0, 3166, 0, 0,
	1621, 0, 0, 1596, 0, 2992, 3171, 207, 3159, 0,
	203, 3177, 3178, 207, 3142, 0, 0, 3172, 3167, 0,
	0, 207, 0, 2900, 203, 0, 3165, 983, 0, 2058,
	2058, 2058, 0, 0, 0, 3209, 0, 2640, 0, 535,
	3200, 2213, 3192, 3197, 0, 0, 0, 1581, 207, 207,
	3187, 1621, 0, 1593, 3199, 2370, 2371, 0, 0, 0,
	0, 0, 3169, 0, 0, 207, 1146, 0, 0, 0,
	0, 207, 0, 0, 0, 1146, 1146, 3222, 1596, 0,
	3143, 3144, 0, 207, 3241, 207, 0, 0, 0, 0,
	0, 1457, 1458, 1459, 1460, 1461, 0, 3233, 0, 3229,
	0, 3232, 0, 0, 1593, 207, 0, 3251, 3217, 3244,
	0, 207, 207, 0, 1045, 3263, 0, 0, 3239, 3240,
	0, 1477, 3238, 1043, 207, 3274, 1621, 1490, 0, 3282,
	3237, 0, 0, 2290, 0, 0, 3284, 3275, 3286, 0,
	3279, 0, 0, 0, 3293, 0, 0, 3268, 0, 3094,
	3294, 3276, 0, 0, 207, 2457, 2458, 2459, 0, 3216,
	3288, 0, 3290, 0, 0, 0, 0, 3319, 0, 0,
	0, 983, 0, 0, 3304, 3305, 3307, 3306, 3245, 1593,
	3246, 0, 0, 0, 0, 3094, 0, 3335, 3333, 3337,
	207, 983, 0, 3321, 0, 1899, 0, 3343, 0, 3342,
	3334, 0, 3344, 0, 0, 0, 3264, 3339, 0, 207,
	0, 0, 3340, 3341, 0, 0, 0, 0, 3336, 0,
	3338, 0, 0, 0, 0, 3353, 3351, 3283, 3350, 0,
	0, 0, 502, 207, 3357, 0, 0, 3274, 3360, 3358,
	0, 3365, 0, 3367, 0, 0, 1540, 1540, 1540, 3370,
	984, 3369, 0, 203, 0, 203, 3364, 0, 203, 0,
	0, 0, 0, 0, 3378, 3377, 0, 984, 1167, 0,
	1151, 203, 3385, 3387, 3384, 0, 3386, 0, 0, 203,
	1167, 520, 3391, 0, 203, 1167, 0, 3398, 0, 3399,
	551, 0, 2054, 2054, 0, 0, 0, 0, 3392, 3393,
	0, 2278, 0, 0, 3402, 3403, 3404, 3406, 3407, 0,
	0, 0, 0, 0, 0, 803, 3411, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3409, 3363, 0,
	2058, 2058, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,
	2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,
	2054, 0, 2054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1899, 0, 0, 0, 0, 0, 0,
	2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058,
	2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 0,
	2058, 0, 0, 0, 0, 0, 0, 0, 0, 2434,
	2435, 203, 2452, 2453, 2454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2703, 2704, 2711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 0, 0, 0, 203, 203, 0, 0,
	982, 982, 0, 203, 982, 0, 0, 0, 0, 2449,
	0, 0, 986, 1786, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 203, 0, 203, 0, 982, 0,
	502, 0, 0, 0, 0, 0, 0, 0, 2593, 0,
	0, 0, 1802, 0, 0, 0, 2762, 2763, 2764, 2765,
	2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775,
	2776, 2777, 2778, 2779, 2780, 0, 2784, 0, 0, 0,
	0, 0, 0, 0, 2622, 0, 0, 2624, 2625, 2626,
	0, 2440, 0, 551, 0, 0, 0, 0, 3015, 0,
	0, 0, 203, 0, 1151, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	0, 0, 0, 203, 3012, 0, 0, 3005, 203, 203,
	0, 203, 0, 203, 0, 203, 0, 203, 2671, 2672,
	3003, 0, 2455, 0, 0, 0, 3007, 1861, 0, 0,
	0, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 3013, 986, 0, 0, 0,
	0, 0, 2450, 0, 0, 0, 0, 0, 0, 535,
	0, 0, 0, 0, 0, 551, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 3006, 0, 0, 1880, 0,
	1885, 0, 0, 0, 0, 0, 1892, 0, 0, 0,
	0, 0, 0, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 0, 1941,
	0, 1943, 1944, 1945, 1946, 0, 0, 0, 208, 0,
	0, 0, 0, 2451, 0, 0, 0, 0, 0, 0,
	0, 1970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	1995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 3008, 0, 0, 3009, 0, 0, 984,
	984, 0, 0, 984, 0, 0, 0, 0, 568, 0,
	0, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 0, 0,
	0, 0, 2050, 502, 2061, 2063, 2068, 984, 0, 0,
	568, 0, 0, 3011, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 3014, 0, 0, 502, 0,
	122, 0, 0, 0, 0, 203, 58, 502, 0, 0,
	203, 0, 0, 2446, 2447, 2448, 0, 59, 117, 0,
	2445, 2443, 2444, 2436, 2437, 2438, 2439, 2441, 2442, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 119, 0, 0,
	1404, 1405, 0, 0, 982, 0, 0, 0, 0, 38,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	2054, 0, 0, 0, 0, 0, 1407, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 75, 0, 520, 120, 0, 3010, 0, 0, 40,
	85, 0, 1406, 0, 76, 43, 0, 0, 2058, 2054,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2172, 44, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 77, 0, 2916, 2917, 2918, 2058, 203, 0,
	0, 0, 0, 0, 0, 0, 2941, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 1430, 1431, 1432, 203, 0, 0, 0,
	203, 2226, 1412, 0, 0, 0, 0, 0, 0, 0,
	2228, 0, 2230, 0, 0, 0, 0, 0, 2054, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 1167, 0,
	0, 203, 1434, 1435, 1436, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 0, 2172, 3101, 502, 2058, 2281, 0, 0,
	0, 0, 0, 203, 0, 0, 203, 0, 203, 78,
	203, 0, 203, 203, 0, 1151, 0, 45, 0, 0,
	0, 0, 0, 1427, 2300, 668, 0, 2172, 0, 0,
	0, 0, 0, 3125, 203, 0, 0, 0, 0, 0,
	48, 144, 81, 0, 82, 1167, 46, 1167, 0, 0,
	121, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 175, 0, 0, 203, 203, 203, 0,
	203, 0, 0, 0, 0, 51, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 1404, 1405, 203, 0, 0, 1433, 0, 0, 0,
	0, 177, 0, 0, 0, 0, 3041, 0, 0, 0,
	0, 0, 0, 984, 1428, 0, 0, 1407, 0, 0,
	982, 0, 3191, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	982, 2353, 2354, 1406, 176, 0, 0, 2360, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 0, 2374, 2375, 0, 0,
	0, 0, 1995, 1404, 1405, 0, 0, 0, 0, 0,
	0, 2382, 0, 147, 0, 0, 3, 0, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 2402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	1147, 2417, 1046, 1412, 0, 1406, 0, 0, 0, 0,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2068,
	2068, 2068, 1147, 1147, 0, 984, 0, 0, 0, 203,
	0, 0, 0, 0, 1540, 0, 0, 203, 203, 0,
	0, 203, 2486, 0, 0, 0, 502, 0, 0, 502,
	0, 0, 0, 0, 1427, 1412, 502, 0, 0, 502,
	502, 0, 0, 0, 0, 203, 1147, 1147, 0, 0,
	0, 1147, 0, 0, 1147, 0, 0, 1167, 0, 0,
	0, 0, 0, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 1167, 58, 0, 0, 0, 0, 0, 0,
	803, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	203, 2172, 2550, 803, 0, 0, 2172, 0, 63, 2550,
	1147, 0, 0, 0, 0, 0, 2172, 2550, 2172, 2550,
	2550, 0, 0, 0, 0, 0, 1427, 0, 2572, 0,
	203, 203, 0, 0, 0, 1428, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	203, 0, 0, 1151, 0, 0, 0, 0, 59, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 2606, 63, 0, 2608, 2611, 0, 85, 0, 984,
	0, 76, 0, 0, 203, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 69, 1151, 0, 903, 0, 0, 0, 2172,
	0, 502, 2641, 0, 0, 0, 0, 1428, 2172, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 204, 76, 0, 0, 0, 203,
	1786, 0, 0, 1786, 0, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 204, 2687, 0, 0, 1151,
	203, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 2694, 204, 203, 0,
	1892, 0, 0, 0, 0, 0, 2698, 2699, 0, 0,
	2702, 0, 0, 0, 2705, 0, 0, 0, 0, 0,
	0, 0, 0, 2709, 0, 0, 0, 0, 0, 0,
	0, 0, 2716, 1404, 1405, 2486, 78, 0, 0, 0,
	0, 0, 0, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 2743, 0, 2736, 0, 0, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 81,
	0, 82, 0, 0, 0, 2752, 2753, 0, 2754, 2755,
	2756, 0, 0, 2757, 0, 1406, 0, 2759, 0, 0,
	175, 0, 0, 1426, 0, 0, 0, 0, 0, 1046,
	78, 0, 664, 0, 0, 115, 0, 0, 1147, 568,
	0, 0, 0, 0, 568, 0, 0, 0, 2787, 2788,
	0, 0, 0, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 144, 81, 0, 82, 0, 0, 0, 2706,
	0, 203, 0, 0, 0, 1046, 2804, 502, 0, 0,
	0, 116, 0, 0, 175, 1429, 1430, 1431, 1432, 0,
	0, 502, 0, 148, 0, 1412, 664, 0, 0, 115,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 1404, 1405, 0, 0, 0, 1167, 0, 170,
	0, 0, 177, 0, 0, 1434, 1435, 1436, 0, 2833,
	0, 0, 0, 0, 0, 0, 0, 0, 1407, 0,
	147, 0, 0, 2841, 2844, 116, 2434, 2435, 0, 2452,
	2453, 2454, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 551, 0, 0, 1406, 176, 2863, 0, 0, 0,
	0, 0, 1426, 0, 0, 169, 1427, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2881, 203, 203, 0, 0, 0, 0,
	1147, 0, 0, 0, 1293, 0, 2449, 1046, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 2701, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1540,
	0, 0, 2172, 203, 1429, 1430, 1431, 1432, 0, 0,
	2911, 0, 0, 0, 1412, 2300, 2300, 0, 0, 1433,
	0, 668, 668, 2172, 0, 0, 1786, 1786, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 1428, 0, 0,
	0, 0, 0, 0, 1434, 1435, 1436, 0, 2440, 0,
	0, 0, 0, 0, 0, 2939, 2940, 0, 0, 0,
	0, 2944, 2945, 0, 0, 0, 2948, 2949, 0, 0,
	0, 0, 0, 2953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2961, 2958, 0, 0, 1427, 0, 0, 0, 2962,
	0, 0, 1147, 0, 1147, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 1147, 0, 0, 0, 2450,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 1167, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 0, 203, 1433, 0,
	0, 0, 0, 204, 1050, 204, 204, 1050, 0, 1050,
	204, 0, 0, 2172, 2550, 2172, 1428, 0, 204, 0,
	0, 0, 0, 0, 0, 1167, 0, 0, 0, 0,
	2844, 2172, 0, 2550, 0, 0, 1167, 1167, 203, 2172,
	2550, 0, 0, 0, 0, 1046, 0, 203, 203, 0,
	2451, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1050, 204, 204, 0, 0, 0, 0, 0, 0, 3055,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 2172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 204, 204,
	204, 204, 0, 1050, 1050, 0, 1167, 0, 1050, 2844,
	0, 1050, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1407, 0, 0, 1404, 1405, 3089, 3090, 3091, 0,
	1046, 0, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 0, 0, 0, 0, 0, 1406, 0, 0,
	1407, 0, 3099, 3100, 0, 1426, 0, 1050, 0, 0,
	2446, 2447, 2448, 0, 0, 0, 3107, 2445, 2443, 2444,
	2436, 2437, 2438, 2439, 2441, 2442, 1406, 204, 0, 0,
	2172, 0, 2550, 0, 1426, 3119, 0, 0, 0, 0,
	0, 204, 0, 203, 0, 0, 0, 1046, 0, 0,
	0, 2700, 0, 2844, 0, 0, 0, 0, 0, 0,
	0, 3141, 0, 1046, 0, 0, 551, 1429, 1430, 1431,
	1432, 0, 0, 803, 0, 0, 0, 1412, 2611, 0,
	2359, 0, 0, 0, 0, 203, 0, 0, 0, 2844,
	869, 0, 2844, 0, 0, 1167, 1429, 1430, 1431, 1432,
	0, 0, 0, 0, 0, 0, 1412, 1434, 1435, 1436,
	0, 0, 0, 2844, 2844, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	1404, 1405, 0, 0, 0, 2743, 1434, 1435, 1436, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 3119,
	575, 0, 0, 0, 0, 0, 1407, 0, 1427, 3202,
	0, 0, 3205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 1046, 2172, 2550, 0, 0,
	0, 0, 1406, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 2550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 0, 1167, 1147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	0, 1433, 0, 3259, 0, 0, 0, 0, 0, 1167,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 203, 0, 803, 0, 0, 0, 0, 0,
	1433, 0, 1412, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1428, 0,
	0, 0, 2743, 3303, 3303, 3303, 1050, 0, 204, 204,
	0, 0, 1434, 1435, 1436, 1050, 204, 0, 0, 0,
	0, 204, 3322, 838, 87, 0, 1147, 1147, 1147, 0,
	1147, 0, 0, 0, 0, 0, 0, 0, 2172, 0,
	2844, 0, 2844, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1050, 0, 0, 3303, 0, 3119, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 0, 205,
	0, 1167, 0, 0, 0, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0, 0,
	87, 1407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 3303, 1406, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 778, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 1050, 204, 0,
	0, 2352, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 1430, 1431,
	1432, 973, 0, 0, 0, 0, 0, 1412, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 204, 0, 0, 0, 815, 0,
	204, 0, 0, 0, 0, 0, 0, 1434, 1435, 1436,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 204,
	0, 204, 0, 204, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 1407, 0, 0, 1453,
	0, 0, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	1046, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 1050,
	0, 1050, 0, 0, 0, 0, 1050, 0, 0, 204,
	0, 1046, 204, 0, 0, 0, 0, 0, 0, 0,
	1046, 1050, 1050, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 204, 204, 0, 204, 0,
	204, 0, 204, 0, 204, 0, 0, 0, 0, 0,
	0, 1433, 1429, 1430, 1431, 1432, 0, 0, 202, 0,
	202, 202, 1412, 0, 0, 202, 0, 204, 0, 1428,
	0, 0, 0, 575, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 1050, 1450, 1451, 0, 202, 202, 0, 1046,
	0, 1421, 1422, 0, 0, 0, 1046, 0, 0, 0,
	0, 202, 0, 0, 0, 873, 1442, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 1147, 0, 0,
	1147, 1147, 1147, 202, 202, 202, 202, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 1050, 0, 0,
	0, 1147, 1147, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 0,
	0, 1046, 202, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1050, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1046, 0, 0, 0, 0, 0, 87, 0, 87,
	0, 87, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 2969, 0, 0, 2968, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 87, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 87, 1050, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 1050, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2434, 2435,
	0, 2452, 2453, 2454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 1563, 0, 985, 204, 0,
	202, 0, 0, 0, 0, 0, 0, 2434, 2435, 0,
	2452, 2453, 2454, 202, 1563, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 0, 0, 575, 0, 0, 0,
	204, 0, 0, 204, 778, 204, 0, 204, 2449, 204,
	204, 0, 0, 1050, 1050, 1050, 0, 1050, 0, 0,
	1046, 0, 1467, 0, 0, 1147, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 2449, 0, 0,
	1476, 0, 0, 0, 1482, 0, 0, 1404, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 1147, 1147, 1147,
	0, 0, 0, 204, 204, 204, 0, 204, 0, 0,
	0, 0, 0, 1407, 0, 0, 0, 0, 0, 0,
	2440, 0, 0, 0, 0, 0, 1046, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 2440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2455, 0, 0, 0, 0, 2456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 0, 0, 0, 0,
	2455, 2450, 0, 0, 0, 0, 0, 0, 0, 1429,
	1430, 1431, 1432, 0, 0, 87, 0, 0, 1561, 1412,
	1564, 0, 0, 0, 1047, 0, 0, 1148, 0, 1047,
	2450, 0, 0, 0, 0, 0, 0, 0, 202, 202,
	0, 0, 1046, 0, 1046, 202, 0, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 202, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1148,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1129, 0, 2451, 0, 0, 0, 0, 0, 1040, 1147,
	1427, 1046, 0, 1147, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 2451, 1046, 1148, 1148, 1147, 0, 0, 1148, 0,
	815, 1148, 0, 0, 202, 0, 1129, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 202, 0, 1050, 0, 0,
	575, 202, 1046, 202, 0, 202, 0, 202, 0, 202,
	0, 1242, 0, 1433, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 0,
	0, 1428, 202, 1266, 1266, 1266, 1158, 204, 0, 0,
	0, 0, 2446, 2447, 2448, 0, 0, 1297, 0, 2445,
	2443, 2444, 2436, 2437, 2438, 2439, 2441, 2442, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 204, 204, 0,
	0, 2446, 2447, 2448, 1046, 204, 0, 0, 2445, 2443,
	2444, 2436, 2437, 2438, 2439, 2441, 2442, 204, 1050, 0,
	0, 0, 0, 0, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 1129, 0,
	0, 0, 1360, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1050, 204, 0, 1050, 1050, 1050,
	1147, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 798, 1050, 1050,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 0, 204, 1050, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 0, 0, 985, 0, 706,
	0, 737, 202, 1147, 1147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 711, 0, 0, 0, 1050,
	778, 0, 1046, 778, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 712, 0,
	0, 0, 0, 714, 0, 1148, 0, 742, 0, 0,
	0, 0, 0, 720, 721, 0, 0, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 715, 0, 0, 0, 0, 1959, 0,
	0, 0, 1047, 0, 0, 0, 1129, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 0, 0, 736,
	1570, 0, 0, 0, 0, 1476, 0, 0, 0, 1476,
	202, 0, 0, 1579, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 202, 1050, 0, 0, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 575, 717, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 973, 0, 724, 0, 0, 202, 0,
	0, 0, 719, 202, 0, 0, 0, 0, 0, 0,
	1564, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1148, 0, 0,
	739, 0, 87, 0, 1047, 202, 0, 0, 202, 0,
	202, 0, 202, 0, 202, 202, 0, 0, 0, 0,
	0, 204, 204, 0, 0, 0, 0, 0, 1129, 651,
	0, 0, 0, 0, 0, 0, 202, 1050, 204, 0,
	0, 0, 1050, 0, 1129, 0, 0, 0, 0, 0,
	722, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 202,
	202, 0, 202, 0, 1050, 1050, 1050, 733, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 728, 0, 0,
	204, 635, 0, 0, 0, 202, 0, 0, 0, 0,
	708, 726, 740, 1050, 0, 0, 636, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 709, 0, 1761, 0,
	0, 0, 656, 0, 0, 1773, 729, 0, 0, 1148,
	727, 1148, 0, 0, 743, 744, 1148, 637, 0, 0,
	741, 0, 0, 0, 1242, 87, 1792, 730, 1792, 0,
	0, 1148, 1148, 0, 638, 0, 1129, 0, 0, 0,
	87, 0, 87, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 639, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 655, 0, 87, 0, 87, 1129, 0,
	0, 0, 0, 0, 1773, 0, 0, 1833, 0, 1050,
	0, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 1844, 0, 0, 0, 0,
	0, 1850, 1047, 1851, 0, 1852, 0, 1853, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 1865, 0, 204, 204, 1050, 0, 1050, 0,
	1050, 985, 0, 0, 0, 0, 0, 0, 0, 985,
	985, 0, 642, 985, 0, 0, 0, 0, 0, 1050,
	0, 0, 1050, 0, 0, 0, 0, 0, 659, 643,
	0, 0, 0, 0, 0, 0, 0, 1563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 1050,
	0, 0, 0, 644, 0, 0, 645, 0, 0, 0,
	0, 0, 653, 0, 1959, 0, 0, 0, 0, 646,
	0, 0, 202, 0, 0, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 654,
	0, 0, 202, 202, 1047, 0, 0, 0, 648, 0,
	1563, 1050, 0, 0, 0, 0, 0, 0, 0, 650,
	1047, 1050, 202, 0, 649, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	202, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 204, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 973, 0, 0, 0, 0, 0,
	0, 0, 973, 973, 0, 0, 973, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 1050, 0, 0, 1047, 0, 0, 0, 0, 0,
	1050, 1050, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 204, 0, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 815, 204,
	87, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1158, 0,
	0, 0, 0, 1148, 1148, 1148, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2244, 0,
	0, 0, 0, 1773, 798, 0, 0, 0, 0, 0,
	1129, 0, 0, 985, 0, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 2283, 0, 0, 1266, 0,
	1266, 0, 1266, 0, 1158, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 2334, 1158,
	2336, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 1407, 0, 0, 1453, 0, 0, 1129,
	0, 0, 1129, 0, 0, 2350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 202, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 202, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 87, 1429,
	1430, 1431, 1432, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	1450, 1451, 0, 0, 0, 0, 0, 1047, 1421, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 0,
	0, 0, 0, 1433, 0, 0, 1047, 0, 0, 0,
	202, 0, 0, 1047, 0, 0, 0, 0, 973, 202,
	202, 1428, 2547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 0, 0, 1148, 1148, 1148,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 1129, 2584, 2244, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 1148,
	0, 0, 0, 0, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 2619, 0, 0, 0,
	2623, 0, 0, 0, 0, 1047, 1440, 1129, 1047, 2630,
	0, 0, 0, 1407, 0, 0, 1453, 0, 1443, 0,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 1406,
	0, 2422, 0, 0, 2423, 0, 0, 1426, 0, 0,
	0, 0, 973, 0, 1423, 202, 0, 0, 0, 0,
	0, 2675, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 2690, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	2696, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	1430, 1431, 1432, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 0, 1129, 0, 1129, 0, 0, 202, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1047, 0, 0, 0, 0, 0,
	1427, 0, 0, 1129, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 1129,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 1129, 0, 1047, 0, 0,
	0, 0, 1148, 0, 1440, 1129, 1445, 0, 0, 0,
	0, 1407, 0, 0, 1453, 0, 1959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1148, 1148, 1148, 1406, 815, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 2882, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2892, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431,
	1432, 1991, 0, 0, 1992, 0, 0, 1412, 0, 0,
	0, 0, 0, 0, 0, 2929, 0, 0, 0, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 1440, 0, 0, 0, 0, 0, 0, 1407, 0,
	0, 1453, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 87, 0, 0, 0, 0, 1421, 1422, 0, 1047,
	0, 1047, 0, 0, 1406, 0, 0, 0, 0, 0,
	0, 1442, 1426, 0, 0, 0, 0, 0, 1427, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, 0, 1452, 0, 0, 0, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 1148, 0, 1047, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 1430, 1431, 1432, 0, 1047,
	0, 0, 1148, 0, 1412, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 1047,
	3033, 0, 0, 0, 0, 0, 0, 0, 0, 2244,
	0, 0, 0, 0, 1445, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1047, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 1433, 0,
	0, 0, 2967, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3126, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3185, 0,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 1148, 0, 1443, 0, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 2714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 3265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3280, 212, 213, 214, 215, 216,
	1051, 217, 1052, 1053, 1054, 1055, 453, 1056, 1057, 1058,
	1059, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 1060, 224, 225, 226, 227, 228, 229, 1061, 1062,
	230, 458, 459, 460, 1063, 231, 461, 1064, 1049, 1065,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1066, 241, 0, 242, 243, 244, 1067, 924, 245, 246,
	1068, 1069, 1071, 1070, 1072, 1073, 1074, 247, 248, 249,
	250, 251, 252, 462, 463, 1075, 253, 1076, 255, 254,
	1077, 256, 1078, 1079, 257, 258, 259, 1080, 260, 1081,
	261, 262, 1082, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 1083, 209, 1084, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 1085,
	279, 1086, 1087, 925, 280, 281, 1088, 282, 468, 1089,
	469, 283, 1090, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 1091, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 1092, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 1093, 475, 1094, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 1095, 312, 311, 1096, 313, 477, 931, 314,
	315, 932, 1097, 316, 317, 1098, 1099, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 1100, 211, 934, 1101, 478, 479, 332,
	333, 1102, 334, 335, 336, 1103, 1104, 338, 339, 340,
	1105, 1106, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 1107, 350, 351, 482,
	352, 483, 353, 1108, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1109, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1110, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1111, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1112,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 1113,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1114, 419, 420, 418, 1115, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 1116, 488, 489, 490,
	491, 1117, 1118, 428, 429, 492, 430, 493, 1119, 431,
	432, 433, 0, 434, 435, 1120, 1121, 436, 437, 438,
	439, 441, 1122, 442, 1123, 440, 443, 444, 445, 494,
	495, 496, 1124, 447, 446, 497, 1125, 1126, 1127, 1128,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 2102, 0, 0, 0,
	0, 0, 0, 0, 2103, 212, 213, 214, 215, 216,
	1051, 217, 1052, 1053, 1054, 1055, 453, 1056, 1057, 1058,
	1059, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 1060, 224, 225, 226, 227, 228, 229, 1061, 1062,
	230, 458, 459, 460, 1063, 231, 461, 1064, 1049, 1065,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1066, 241, 0, 242, 243, 244, 1067, 924, 245, 246,
	1068, 1069, 1071, 1070, 1072, 1073, 1074, 247, 248, 249,
	250, 251, 252, 462, 463, 1075, 253, 1076, 255, 254,
	1077, 256, 1078, 1079, 257, 258, 259, 1080, 260, 1081,
	261, 262, 1082, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 1083, 209, 1084, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 1085,
	279, 1086, 1087, 925, 280, 281, 1088, 282, 468, 1089,
	469, 283, 1090, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 1091, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 1092, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 1093, 475, 1094, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 1095, 312, 311, 1096, 313, 477, 931, 314,
	315, 932, 1097, 316, 317, 1098, 1099, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 1100, 211, 934, 1101, 478, 479, 332,
	333, 1102, 334, 335, 336, 1103, 1104, 338, 339, 340,
	1105, 1106, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 1107, 350, 351, 482,
	352, 483, 353, 1108, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1109, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1110, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1111, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1112,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 1113,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1114, 419, 420, 418, 1115, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 1116, 488, 489, 490,
	491, 1117, 1118, 428, 429, 492, 430, 493, 1119, 431,
	432, 433, 0, 434, 435, 1120, 1121, 436, 437, 438,
	439, 441, 1122, 442, 1123, 440, 443, 444, 445, 494,
	495, 496, 1124, 447, 446, 497, 1125, 1126, 1127, 1128,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2991, 212, 213, 214,
	215, 216, 1051, 217, 1052, 1053, 1054, 1055, 453, 1056,
	1057, 1058, 1059, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 1060, 224, 225, 226, 227, 228, 229,
	1061, 1062, 230, 458, 459, 460, 1063, 231, 461, 1064,
	1049, 1065, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1066, 241, 0, 242, 243, 244, 1067, 924,
	245, 246, 1068, 1069, 1071, 1070, 1072, 1073, 1074, 247,
	248, 249, 250, 251, 252, 462, 463, 1075, 253, 1076,
	255, 254, 1077, 256, 1078, 1079, 257, 258, 259, 1080,
	260, 1081, 261, 262, 1082, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 1083, 209, 1084, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 1085, 279, 1086, 1087, 925, 280, 281, 1088, 282,
	468, 1089, 469, 283, 1090, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 927, 1091, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 1092, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 1093, 475, 1094, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 1095, 312, 311, 1096, 313, 477,
	931, 314, 315, 932, 1097, 316, 317, 1098, 1099, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 1100, 211, 934, 1101, 478,
	479, 332, 333, 1102, 334, 335, 336, 1103, 1104, 338,
	339, 340, 1105, 1106, 341, 480, 935, 342, 936, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 1107, 350,
	351, 482, 352, 483, 353, 1108, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1109, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1110, 376, 937, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1111, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1112, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 1113, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1114, 419, 420, 418, 1115, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 1116, 488,
	489, 490, 491, 1117, 1118, 428, 429, 492, 430, 493,
	1119, 431, 432, 433, 0, 434, 435, 1120, 1121, 436,
	437, 438, 439, 441, 1122, 442, 1123, 440, 443, 444,
	445, 494, 495, 496, 1124, 447, 446, 497, 1125, 1126,
	1127, 1128, 448, 449, 498, 450, 451, 452, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3095, 0, 212, 213, 214, 215, 216,
	1051, 217, 1052, 1053, 1054, 1055, 453, 1056, 1057, 1058,
	1059, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 1060, 224, 225, 226, 227, 228, 229, 1061, 1062,
	230, 458, 459, 460, 1063, 231, 461, 1064, 1049, 1065,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1066, 241, 0, 242, 243, 244, 1067, 924, 245, 246,
	1068, 1069, 1071, 1070, 1072, 1073, 1074, 247, 248, 249,
	250, 251, 252, 462, 463, 1075, 253, 1076, 255, 254,
	1077, 256, 1078, 1079, 257, 258, 259, 1080, 260, 1081,
	261, 262, 1082, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 1083, 209, 1084, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 1085,
	279, 1086, 1087, 925, 280, 281, 1088, 282, 468, 1089,
	469, 283, 1090, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 1091, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 1092, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 1093, 475, 1094, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 1095, 312, 311, 1096, 313, 477, 931, 314,
	315, 932, 1097, 316, 317, 1098, 1099, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 1100, 211, 934, 1101, 478, 479, 332,
	333, 1102, 334, 335, 336, 1103, 1104, 338, 339, 340,
	1105, 1106, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 1107, 350, 351, 482,
	352, 483, 353, 1108, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1109, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1110, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1111, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1112,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 1113,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1114, 419, 420, 418, 1115, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 1116, 488, 489, 490,
	491, 1117, 1118, 428, 429, 492, 430, 493, 1119, 431,
	432, 433, 0, 434, 435, 1120, 1121, 436, 437, 438,
	439, 441, 1122, 442, 1123, 440, 443, 444, 445, 494,
	495, 496, 1124, 447, 446, 497, 1125, 1126, 1127, 1128,
	448, 449, 498, 450, 451, 452, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2739, 0, 212, 213, 214, 215, 216, 1051, 217,
	1052, 1053, 1054, 1055, 453, 1056, 1057, 1058, 1059, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 1060,
	224, 225, 226, 227, 228, 229, 1061, 1062, 230, 458,
	459, 460, 1063, 231, 461, 1064, 1049, 1065, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 1066, 241,
	0, 242, 243, 244, 1067, 924, 245, 246, 1068, 1069,
	1071, 1070, 1072, 1073, 1074, 247, 248, 249, 250, 251,
	252, 462, 463, 1075, 253, 1076, 255, 254, 1077, 256,
	1078, 1079, 257, 258, 259, 1080, 260, 1081, 261, 262,
	1082, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 1083, 209, 1084, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 1085, 279, 1086,
	1087, 925, 280, 281, 1088, 282, 468, 1089, 469, 283,
	1090, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 927, 1091, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 1092, 926, 294, 473, 296, 295, 297, 298,
	299, 474, 1093, 475, 1094, 301, 928, 929, 302, 303,
	304, 930, 305, 306, 0, 0, 307, 308, 309, 310,
	1095, 312, 311, 1096, 313, 477, 931, 314, 315, 932,
	1097, 316, 317, 1098, 1099, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 933, 328, 329, 331,
	330, 1100, 211, 934, 1101, 478, 479, 332, 333, 1102,
	334, 335, 336, 1103, 1104, 338, 339, 340, 1105, 1106,
	341, 480, 935, 342, 936, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 1107, 350, 351, 482, 352, 483,
	353, 1108, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1109, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1110, 376,
	937, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1111, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1112, 403, 383,
	384, 404, 938, 405, 486, 406, 407, 1113, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1114, 419, 420, 418, 1115, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 1116, 488, 489, 490, 491, 1117,
	1118, 428, 429, 492, 430, 493, 1119, 431, 432, 433,
	0, 434, 435, 1120, 1121, 436, 437, 438, 439, 441,
	1122, 442, 1123, 440, 443, 444, 445, 494, 495, 496,
	1124, 447, 446, 497, 1125, 1126, 1127, 1128, 448, 449,
	498, 450, 451, 452, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2731,
	0, 212, 213, 214, 215, 216, 1051, 217, 1052, 1053,
	1054, 1055, 453, 1056, 1057, 1058, 1059, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 1060, 224, 225,
	226, 227, 228, 229, 1061, 1062, 230, 458, 459, 460,
	1063, 231, 461, 1064, 1049, 1065, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 1066, 241, 0, 242,
	243, 244, 1067, 924, 245, 246, 1068, 1069, 1071, 1070,
	1072, 1073, 1074, 247, 248, 249, 250, 251, 252, 462,
	463, 1075, 253, 1076, 255, 254, 1077, 256, 1078, 1079,
	257, 258, 259, 1080, 260, 1081, 261, 262, 1082, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	1083, 209, 1084, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 1085, 279, 1086, 1087, 925,
	280, 281, 1088, 282, 468, 1089, 469, 283, 1090, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 927,
	1091, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	1092, 926, 294, 473, 296, 295, 297, 298, 299, 474,
	1093, 475, 1094, 301, 928, 929, 302, 303, 304, 930,
	305, 306, 0, 0, 307, 308, 309, 310, 1095, 312,
	311, 1096, 313, 477, 931, 314, 315, 932, 1097, 316,
	317, 1098, 1099, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 933, 328, 329, 331, 330, 1100,
	211, 934, 1101, 478, 479, 332, 333, 1102, 334, 335,
	336, 1103, 1104, 338, 339, 340, 1105, 1106, 341, 480,
	935, 342, 936, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 1107, 350, 351, 482, 352, 483, 353, 1108,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1109, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1110, 376, 937, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1111, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1112, 403, 383, 384, 404,
	938, 405, 486, 406, 407, 1113, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1114, 419,
	420, 418, 1115, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 1116, 488, 489, 490, 491, 1117, 1118, 428,
	429, 492, 430, 493, 1119, 431, 432, 433, 0, 434,
	435, 1120, 1121, 436, 437, 438, 439, 441, 1122, 442,
	1123, 440, 443, 444, 445, 494, 495, 496, 1124, 447,
	446, 497, 1125, 1126, 1127, 1128, 448, 449, 498, 450,
	451, 452, 1044, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2605, 0, 212,
	213, 214, 215, 216, 1051, 217, 1052, 1053, 1054, 1055,
	453, 1056, 1057, 1058, 1059, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 1060, 224, 225, 226, 227,
	228, 229, 1061, 1062, 230, 458, 459, 460, 1063, 231,
	461, 1064, 1049, 1065, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 1066, 241, 0, 242, 243, 244,
	1067, 924, 245, 246, 1068, 1069, 1071, 1070, 1072, 1073,
	1074, 247, 248, 249, 250, 251, 252, 462, 463, 1075,
	253, 1076, 255, 254, 1077, 256, 1078, 1079, 257, 258,
	259, 1080, 260, 1081, 261, 262, 1082, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 1083, 209,
	1084, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 1085, 279, 1086, 1087, 925, 280, 281,
	1088, 282, 468, 1089, 469, 283, 1090, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 927, 1091, 476,
	292, 0, 0, 0, 210, 291, 293, 300, 1092, 926,
	294, 473, 296, 295, 297, 298, 299, 474, 1093, 475,
	1094, 301, 928, 929, 302, 303, 304, 930, 305, 306,
	0, 0, 307, 308, 309, 310, 1095, 312, 311, 1096,
	313, 477, 931, 314, 315, 932, 1097, 316, 317, 1098,
	1099, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 933, 328, 329, 331, 330, 1100, 211, 934,
	1101, 478, 479, 332, 333, 1102, 334, 335, 336, 1103,
	1104, 338, 339, 340, 1105, 1106, 341, 480, 935, 342,
	936, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	1107, 350, 351, 482, 352, 483, 353, 1108, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1109,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1110, 376, 937, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1111, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1112, 403, 383, 384, 404, 938, 405,
	486, 406, 407, 1113, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1114, 419, 420, 418,
	1115, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	1116, 488, 489, 490, 491, 1117, 1118, 428, 429, 492,
	430, 493, 1119, 431, 432, 433, 0, 434, 435, 1120,
	1121, 436, 437, 438, 439, 441, 1122, 442, 1123, 440,
	443, 444, 445, 494, 495, 496, 1124, 447, 446, 497,
	1125, 1126, 1127, 1128, 448, 449, 498, 450, 451, 452,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2004, 0, 212, 213, 214,
	215, 216, 1051, 217, 1052, 1053, 1054, 1055, 453, 1056,
	1057, 1058, 1059, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 1060, 224, 225, 226, 227, 228, 229,
	1061, 1062, 230, 458, 459, 460, 1063, 231, 461, 1064,
	1049, 1065, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1066, 241, 0, 242, 243, 244, 1067, 924,
	245, 246, 1068, 1069, 1071, 1070, 1072, 1073, 1074, 247,
	248, 249, 250, 251, 252, 462, 463, 1075, 253, 1076,
	255, 254, 1077, 256, 1078, 1079, 257, 258, 259, 1080,
	260, 1081, 261, 262, 1082, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 1083, 209, 1084, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 1085, 279, 1086, 1087, 925, 280, 281, 1088, 282,
	468, 1089, 469, 283, 1090, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 927, 1091, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 1092, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 1093, 475, 1094, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 1095, 312, 311, 1096, 313, 477,
	931, 314, 315, 932, 1097, 316, 317, 1098, 1099, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 1100, 211, 934, 1101, 478,
	479, 332, 333, 1102, 334, 335, 336, 1103, 1104, 338,
	339, 340, 1105, 1106, 341, 480, 935, 342, 936, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 1107, 350,
	351, 482, 352, 483, 353, 1108, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1109, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1110, 376, 937, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1111, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1112, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 1113, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1114, 419, 420, 418, 1115, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 1116, 488,
	489, 490, 491, 1117, 1118, 428, 429, 492, 430, 493,
	1119, 431, 432, 433, 0, 434, 435, 1120, 1121, 436,
	437, 438, 439, 441, 1122, 442, 1123, 440, 443, 444,
	445, 494, 495, 496, 1124, 447, 446, 497, 1125, 1126,
	1127, 1128, 448, 449, 498, 450, 451, 452, 1152, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1744, 0, 0, 0, 212, 213, 214,
	215, 216, 1051, 217, 1052, 1053, 1054, 1055, 453, 1056,
	1057, 1058, 1059, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 1060, 224, 225, 226, 227, 228, 229,
	1061, 1062, 230, 458, 459, 460, 1063, 231, 461, 1064,
	1049, 1065, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1066, 241, 0, 242, 243, 244, 1067, 924,
	245, 246, 1068, 1069, 1071, 1070, 1072, 1073, 1074, 247,
	248, 249, 250, 251, 252, 462, 463, 1075, 253, 1076,
	255, 254, 1077, 256, 1078, 1079, 257, 258, 259, 1080,
	260, 1081, 261, 262, 1082, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 1083, 209, 1084, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 1085, 279, 1086, 1087, 925, 280, 281, 1088, 282,
	468, 1089, 469, 283, 1090, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 927, 1091, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 1092, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 1093, 475, 1094, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 1095, 312, 311, 1096, 313, 477,
	931, 314, 315, 932, 1097, 316, 317, 1098, 1099, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 1100, 211, 934, 1101, 478,
	479, 332, 333, 1102, 334, 335, 336, 1103, 1104, 338,
	339, 340, 1105, 1106, 341, 480, 935, 342, 936, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 1107, 350,
	351, 482, 352, 483, 353, 1108, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1109, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1110, 376, 937, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1111, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1112, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 1113, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1114, 419, 420, 418, 1115, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 1116, 488,
	489, 490, 491, 1117, 1118, 428, 429, 492, 430, 493,
	1119, 431, 432, 433, 0, 434, 435, 1120, 1121, 436,
	437, 438, 439, 441, 1122, 442, 1123, 440, 443, 444,
	445, 494, 495, 496, 1124, 447, 446, 497, 1125, 1126,
	1127, 1128, 448, 449, 498, 450, 451, 452, 1041, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 1051, 217, 1052, 1053, 1054, 1055, 453, 1056,
	1057, 1058, 1059, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 1060, 224, 225, 226, 227, 228, 229,
	1061, 1062, 230, 458, 459, 460, 1063, 231, 461, 1064,
	1049, 1065, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 1066, 241, 0, 242, 243, 244, 1067, 924,
	245, 246, 1068, 1069, 1071, 1070, 1072, 1073, 1074, 247,
	248, 249, 250, 251, 252, 462, 463, 1075, 253, 1076,
	255, 254, 1077, 256, 1078, 1079, 257, 258, 259, 1080,
	260, 1081, 261, 262, 1082, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 1083, 209, 1084, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 1085, 279, 1086, 1087, 925, 280, 281, 1088, 282,
	468, 1089, 469, 283, 1090, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 927, 1091, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 1092, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 1093, 475, 1094, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 1095, 312, 311, 1096, 313, 477,
	931, 314, 315, 932, 1097, 316, 317, 1098, 1099, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 1100, 211, 934, 1101, 478,
	479, 332, 333, 1102, 334, 335, 336, 1103, 1104, 338,
	339, 340, 1105, 1106, 341, 480, 935, 342, 936, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 1107, 350,
	351, 482, 352, 483, 353, 1108, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1109, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1110, 376, 937, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1111, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1112, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 1113, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1114, 419, 420, 418, 1115, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 1116, 488,
	489, 490, 491, 1117, 1118, 428, 429, 492, 430, 493,
	1119, 431, 432, 433, 0, 434, 435, 1120, 1121, 436,
	437, 438, 439, 441, 1122, 442, 1123, 440, 443, 444,
	445, 494, 495, 496, 1124, 447, 446, 497, 1125, 1126,
	1127, 1128, 448, 449, 498, 450, 451, 452, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	1051, 217, 1052, 1053, 1054, 1055, 453, 1056, 1057, 1058,
	1059, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 1060, 224, 225, 226, 227, 228, 229, 1061, 1062,
	230, 458, 459, 460, 1063, 231, 461, 1064, 1049, 1065,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	1066, 241, 0, 242, 243, 244, 1067, 924, 245, 246,
	1068, 1069, 1071, 1070, 1072, 1073, 1074, 247, 248, 249,
	250, 251, 252, 462, 463, 1075, 253, 1076, 255, 254,
	1077, 256, 1078, 1079, 257, 258, 259, 1080, 260, 1081,
	261, 262, 1082, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 1083, 209, 1084, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 1085,
	279, 1086, 1087, 925, 280, 281, 1088, 282, 468, 1089,
	469, 283, 1090, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 1091, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 1092, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 1093, 475, 1094, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 1095, 312, 311, 1096, 313, 477, 931, 314,
	315, 932, 1097, 316, 317, 1098, 1099, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 1100, 211, 934, 1101, 478, 479, 332,
	333, 1102, 334, 335, 336, 1103, 1104, 338, 339, 340,
	1105, 1106, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 1107, 350, 351, 482,
	352, 483, 353, 1108, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1109, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1110, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1111, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1112,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 1113,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1114, 419, 420, 418, 1115, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 1116, 488, 489, 490,
	491, 1117, 1118, 428, 429, 492, 430, 493, 1119, 431,
	432, 433, 0, 434, 435, 1120, 1121, 436, 437, 438,
	439, 441, 1122, 442, 1123, 440, 443, 444, 445, 494,
	495, 496, 1124, 447, 446, 497, 1125, 1126, 1127, 1128,
	448, 449, 498, 450, 451, 452, 1980, 0, 866, 823,
	824, 825, 821, 822, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	1977, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 1978, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 1976, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 1979, 0, 0, 0, 0, 0, 0, 836, 1975,
	0, 0, 799, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 175, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 177, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 1291, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 169, 448, 449, 498, 450,
	451, 452, 810, 170, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 866, 823, 824,
	825, 821, 822, 835, 1481, 1479, 0, 0, 0, 834,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 175, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 177, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 1291, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 169, 448,
	449, 498, 450, 451, 452, 810, 170, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	866, 823, 824, 825, 821, 822, 835, 1481, 2372, 0,
	0, 0, 834, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 218, 219, 220, 454, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	928, 929, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 934, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	175, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 177, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 1291, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 169, 448, 449, 498, 450, 451, 452, 810, 170,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 806, 807, 866, 823, 824, 825, 821, 822, 835,
	1481, 1479, 0, 0, 0, 834, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 2064, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 2069, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	2065, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 2066, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 802, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 814, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 866, 823, 824, 825, 821, 822, 835, 836,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 3277, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 814,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	810, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 866, 823, 824, 825, 821,
	822, 835, 836, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 218, 219,
	220, 454, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 3151, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 928, 929, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 934, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 814, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 494, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 810, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 806, 807, 866, 823,
	824, 825, 821, 822, 835, 836, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 2903, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 1541, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 2718, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 866, 823, 824,
	825, 821, 822, 835, 836, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 1894,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 1893, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 810, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	866, 823, 824, 825, 821, 822, 835, 836, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 218, 219, 220, 454, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	928, 929, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 934, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 814, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 494, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 810, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 806, 807, 866, 823, 824, 825, 821, 822, 835,
	836, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 1541, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 2069, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 866, 823, 824, 825, 821, 822, 835, 836,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	810, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 0, 0, 0, 0, 0,
	0, 0, 836, 1479, 0, 0, 2074, 834, 866, 823,
	824, 825, 821, 822, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 2072, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 2060, 834,
	866, 823, 824, 825, 821, 822, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 218, 219, 220, 454, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	928, 929, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 934, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 494, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 810, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 806, 807, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 2049, 834, 866, 823, 824, 825,
	821, 822, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 218,
	219, 220, 454, 881, 860, 892, 850, 891, 890, 0,
	224, 852, 851, 227, 228, 229, 842, 914, 230, 950,
	951, 460, 0, 231, 921, 0, 904, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 924, 245, 246, 907, 905,
	906, 911, 909, 908, 910, 247, 248, 249, 250, 895,
	252, 888, 887, 812, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 886, 259, 0, 260, 0, 261, 262,
	0, 818, 263, 264, 266, 269, 265, 270, 271, 272,
	941, 942, 831, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 885, 883, 884, 0, 278, 0, 279, 0,
	0, 925, 280, 281, 0, 282, 948, 0, 841, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 916, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 210, 291,
	293, 300, 0, 926, 294, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 301, 928, 929, 302, 303,
	304, 930, 900, 901, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 949, 931, 314, 315, 932,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 854, 325, 933, 328, 329, 331,
	330, 809, 211, 934, 832, 919, 889, 332, 333, 0,
	863, 335, 864, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 944, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	882, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	937, 377, 378, 379, 380, 819, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 855,
	856, 858, 859, 394, 398, 401, 402, 912, 403, 383,
	384, 404, 938, 405, 877, 857, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 923, 412, 413, 414, 945,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 853, 0, 896, 897, 898, 899, 0,
	0, 428, 429, 946, 430, 947, 830, 431, 432, 433,
	0, 434, 435, 0, 813, 436, 437, 438, 439, 441,
	913, 442, 0, 861, 443, 444, 445, 494, 893, 940,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 810, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 806, 807, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	2047, 834, 2039, 823, 824, 825, 821, 822, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 2042, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 2043,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 2044, 2041, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 2045, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 2040, 452,
	810, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 2036, 834, 2039, 823,
	824, 825, 821, 822, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 2042, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 2043, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 2044, 2041, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 2045, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 2040, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 866, 823, 824, 825, 821, 822, 835, 836, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 218, 219, 220, 454, 881, 860,
	892, 850, 891, 890, 0, 224, 852, 851, 227, 228,
	229, 842, 914, 230, 950, 951, 460, 0, 231, 921,
	0, 904, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	924, 245, 246, 907, 905, 906, 911, 909, 908, 910,
	247, 248, 249, 250, 895, 252, 888, 887, 812, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 886, 259,
	0, 260, 0, 261, 262, 0, 818, 263, 264, 266,
	269, 265, 270, 271, 272, 941, 942, 831, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 885, 883, 884,
	0, 278, 0, 279, 0, 0, 925, 280, 281, 0,
	282, 948, 0, 841, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 916, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 210, 291, 293, 300, 0, 926, 294,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	301, 928, 929, 302, 303, 304, 930, 900, 901, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	949, 931, 314, 315, 932, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 854,
	325, 933, 328, 329, 331, 330, 809, 211, 934, 832,
	919, 889, 332, 333, 0, 863, 335, 864, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 944, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 882, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 937, 377, 378, 379, 380,
	819, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 855, 856, 858, 859, 394, 398,
	401, 402, 912, 403, 383, 384, 404, 938, 405, 877,
	857, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	923, 412, 413, 414, 945, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 853, 0,
	896, 897, 898, 899, 0, 0, 428, 429, 946, 430,
	947, 830, 431, 432, 433, 0, 434, 435, 0, 813,
	436, 437, 438, 439, 441, 913, 442, 0, 861, 443,
	444, 445, 494, 893, 940, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 810,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 806, 807, 0, 0, 0, 0, 0, 1487,
	0, 836, 0, 0, 0, 0, 834, 866, 823, 824,
	825, 821, 822, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 1881,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 810, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 1181, 834, 866, 823, 824, 825, 821, 822, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1180, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 1175, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1174, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 1170, 834, 866, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 218, 219,
	220, 454, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 928, 929, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 934, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 494, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 810, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 806, 807, 866, 823,
	824, 825, 821, 822, 835, 836, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 866, 823, 824, 825, 821, 822, 835, 836, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 218, 219, 220, 454, 881, 860,
	892, 850, 891, 890, 0, 224, 852, 851, 227, 228,
	229, 842, 914, 230, 950, 951, 460, 0, 231, 921,
	0, 904, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	924, 245, 3302, 907, 905, 906, 911, 909, 908, 910,
	247, 248, 249, 250, 895, 252, 888, 887, 812, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 886, 259,
	0, 260, 0, 261, 262, 0, 818, 263, 264, 266,
	269, 265, 270, 271, 272, 941, 942, 831, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 885, 883, 884,
	0, 278, 0, 279, 0, 0, 925, 280, 281, 0,
	282, 948, 0, 841, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 916, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 210, 291, 293, 300, 0, 926, 294,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	301, 928, 929, 302, 303, 304, 930, 900, 901, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	949, 931, 314, 315, 932, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 854,
	325, 933, 328, 329, 331, 330, 809, 211, 934, 832,
	919, 889, 332, 333, 0, 863, 335, 864, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 944, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 882, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 937, 377, 378, 379, 380,
	819, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 855, 856, 858, 859, 394, 398,
	401, 402, 912, 403, 383, 384, 404, 938, 405, 877,
	857, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	923, 412, 413, 414, 945, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 853, 0,
	896, 897, 898, 899, 0, 0, 428, 429, 946, 430,
	947, 830, 431, 432, 433, 0, 3301, 435, 0, 813,
	436, 437, 438, 439, 441, 913, 442, 0, 861, 443,
	444, 445, 494, 893, 940, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 810,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 806, 807, 866, 823, 824, 825, 821, 822,
	835, 836, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	3300, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 3302, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 3301,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 866, 823, 824,
	825, 821, 822, 835, 836, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 0, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 866, 823, 824, 825, 821,
	822, 835, 0, 2057, 0, 0, 0, 0, 2055, 2056,
	0, 0, 212, 213, 214, 215, 216, 836, 217, 0,
	0, 0, 834, 915, 840, 0, 0, 0, 218, 219,
	220, 0, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 3302, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	0, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 0, 0, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 0, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 0, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	3301, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 494, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 799, 0, 987, 0, 806, 807, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	834, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 914, 230, 458, 459, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 928, 929, 302, 303, 304, 930,
	305, 306, 0, 0, 307, 308, 309, 310, 974, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 933, 328, 329, 331, 330, 0,
	211, 934, 0, 919, 479, 332, 333, 0, 334, 335,
	336, 0, 979, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 485, 981, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 175, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 945, 0, 419,
	420, 418, 177, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 946, 430, 947, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 913, 442,
	0, 440, 443, 444, 445, 1291, 495, 496, 0, 447,
	446, 497, 987, 0, 0, 169, 448, 449, 498, 450,
	451, 452, 0, 170, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 0, 971, 0, 1566, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 914, 230, 458, 459, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 928, 929, 302, 303, 304, 930, 305, 306,
	0, 0, 307, 308, 309, 310, 974, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 933, 328, 329, 331, 330, 0, 211, 934,
	0, 919, 479, 332, 333, 0, 334, 335, 336, 0,
	979, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 485, 981, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 175, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 945, 0, 419, 420, 418,
	177, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 946,
	430, 947, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 913, 442, 0, 440,
	443, 444, 445, 1291, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 169, 448, 449, 498, 450, 451, 452,
	0, 170, 0, 0, 2479, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 1566, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 915, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 914, 230, 458,
	459, 460, 0, 231, 921, 0, 904, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 924, 245, 246, 907, 905,
	906, 911, 909, 908, 910, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	941, 942, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 925, 280, 281, 0, 282, 948, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 916, 917,
	920, 927, 0, 918, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 926, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 928, 929, 302, 303,
	304, 930, 305, 306, 0, 0, 307, 308, 309, 310,
	974, 312, 311, 0, 313, 949, 931, 314, 315, 932,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 933, 328, 329, 331,
	330, 0, 211, 934, 0, 919, 479, 332, 333, 0,
	334, 335, 336, 0, 979, 338, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 944, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	937, 377, 378, 379, 380, 485, 981, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 912, 403, 383,
	384, 404, 938, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 945,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 946, 430, 947, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	913, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 970, 0, 987, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 971, 915, 976, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 914, 230,
	458, 459, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 928, 929, 302,
	303, 304, 930, 305, 306, 0, 0, 307, 308, 309,
	310, 974, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 933, 328, 329,
	331, 330, 0, 211, 934, 0, 919, 479, 332, 333,
	0, 334, 335, 336, 0, 979, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 485, 981, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 946, 430, 947, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 913, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 987, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 0, 971, 0, 976, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 914, 230, 458, 459,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 974,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	0, 211, 934, 0, 919, 479, 332, 333, 0, 334,
	335, 336, 0, 979, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 485, 981, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 946, 430, 947, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 913,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 987, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 0, 971, 0, 976, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 914, 230, 458, 459, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 211,
	934, 0, 919, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 981, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	946, 430, 947, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 913, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 799, 0, 1145, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 1468, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 175, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 177, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1291, 495, 496, 0, 447, 446,
	497, 1288, 0, 1145, 169, 448, 449, 498, 450, 451,
	452, 0, 170, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 147, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 175, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 177, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1291, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 169, 448, 449, 498, 450, 451,
	452, 0, 170, 0, 0, 0, 0, 1145, 1144, 0,
	0, 0, 0, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 1049, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 927, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 926, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 928, 929, 302,
	303, 304, 930, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 933, 328, 329,
	331, 330, 0, 0, 934, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 938, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 1145, 1144, 0, 0, 0,
	0, 1142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 2670, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 1049, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	927, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	0, 0, 934, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 987, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 0, 0, 0, 1295, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 914, 230, 458, 459, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 211,
	934, 0, 919, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	946, 430, 947, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 913, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 799, 0, 206, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 175, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 177, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1291, 495, 496, 0, 447, 446,
	497, 206, 0, 0, 169, 448, 449, 498, 450, 451,
	452, 0, 170, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 147, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 206,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 1571, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 206, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 2620, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 206, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 2279, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 675, 0, 567, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 2742, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 573, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 572, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 0, 566, 0, 567, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 576, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 573, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 572, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	567, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 576,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 573, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 1848, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 572, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 567, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 576, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 573, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 572, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 576, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1317, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 1316, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	1315, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1286, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1285, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1282, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1281, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1220, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1219, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1217, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1216, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1138, 0, 1145, 1144,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1140, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1145, 1144, 0, 0,
	0, 0, 1142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 1049, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 924, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 925, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 927, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 926, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 928, 929, 302, 303,
	304, 930, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 931, 314, 315, 932,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 933, 328, 329, 331,
	330, 0, 0, 934, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	937, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 938, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1145, 1144, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 1049, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 927,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 926, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 928, 929, 302, 303, 304, 930,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 933, 328, 329, 331, 330, 0,
	0, 934, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	938, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 1145, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 206, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 2173, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 2170, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 2314,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 2176, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 2311, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 2313, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 2310, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 2175, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	2312, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 206, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 2173, 231, 461, 0, 0, 2167, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 2170, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 2176,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 2166, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 2175, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 2174, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1362, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 1365, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 1363, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 1364, 446, 497, 1133, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1135, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 979, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1130, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1132, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 979, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1037, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1039, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 979, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 529, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 528, 216, 518, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 521, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 522, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 523, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 517, 0, 206, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 518, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 521, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 522, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 523, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	206, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 979, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 2243, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1834, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 206, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 1772, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1765, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1764, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1760, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1762, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1275, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1274, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1272, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1271, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1269, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1268, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1265, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1264, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1240, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1155, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1157, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 211, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 206, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	521, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	522, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 523, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	667, 0, 206, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	666, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	506, 0, 206, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 505, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 504, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 206, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 2107, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 206, 2301, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 2865, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 206, 2301, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 2298, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	206, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 212, 213, 214,
	215, 216, 1840, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1832, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 549, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 1015, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 550,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 546, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 545,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1784, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1783, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 549, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 539, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 550,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 546, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 1294,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 545,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1279, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1278, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1228, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1227, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1212, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1149, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 549, 0,
	206, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 1015, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 550,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 546, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 545,
	489, 490, 491, 0, 0, 428, 1016, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 206, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 212, 213, 214, 215, 216, 998, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 549, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 539, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 537, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	538, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 550, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 540, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 541, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	543, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 533, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 534, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 531, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 525, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 501, 0, 206, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 206, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 2566, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 206, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 2564, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	206, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 2553, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 206, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 2261, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 534, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 206, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 1796, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 0, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 206, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 1248, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 0, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 0, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	206, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 1190, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 206, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 0, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	0, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 953,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 206, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 0, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 0, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 0,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 0, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 1430,
	1431, 1432, 0, 1406, 0, 0, 0, 0, 1412, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 0, 0,
	0, 0, 1442, 1412, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 1433, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	1445, 0, 0, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0,
	0, 1406, 0, 2425, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 1429, 1430, 1431, 1432, 0, 1406, 0, 2424, 0,
	0, 1412, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432,
	0, 0, 0, 0, 0, 1442, 1412, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 1433, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 1445, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 0, 0, 0, 1406, 0, 2421, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432, 0, 1406,
	0, 2420, 0, 0, 1412, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 1429,
	1430, 1431, 1432, 0, 0, 0, 0, 0, 1442, 1412,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 1433, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 1445, 0, 0, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 0, 0, 0, 0, 0, 1406, 0, 2419,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431,
	1432, 0, 1406, 0, 1992, 0, 0, 1412, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 1429, 1430, 1431, 1432, 0, 0, 0, 0,
	0, 1442, 1412, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 1433, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 1445,
	0, 0, 0, 0, 1407, 0, 1443, 1453, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0, 3260,
	1406, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1407,
	0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	1429, 1430, 1431, 1432, 3256, 1406, 0, 0, 0, 0,
	1412, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432, 0,
	0, 0, 0, 0, 1442, 1412, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 1433, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 1445, 0, 0, 0, 0, 1407, 0, 1443,
	1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0,
	0, 0, 3190, 1406, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 1429, 1430, 1431, 1432, 3189, 1406, 0,
	0, 0, 0, 1412, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 0, 1442, 1412, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 1433, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 1445, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 3098, 1406, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432,
	3016, 1406, 0, 0, 0, 0, 1412, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 1429, 1430, 1431, 1432, 0, 0, 0, 0, 0,
	1442, 1412, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	1433, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 1445, 0,
	0, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 0, 0, 2972, 1406,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429,
	1430, 1431, 1432, 2971, 1406, 0, 0, 0, 0, 1412,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 1429, 1430, 1431, 1432, 0, 0,
	0, 0, 0, 1442, 1412, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 1433, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 1445, 0, 0, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0,
	0, 2970, 1406, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 1429, 1430, 1431, 1432, 2936, 1406, 0, 0,
	0, 0, 1412, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431,
	1432, 0, 0, 0, 0, 0, 1442, 1412, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 1433, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 2749, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1407,
	0, 0, 1453, 0, 0, 0, 1443, 0, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 1406, 0, 2376, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 2347, 0, 1407, 0, 0, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 1430, 1431, 1432, 0,
	1406, 0, 0, 0, 0, 1412, 3349, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 2348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	1429, 1430, 1431, 1432, 0, 0, 0, 0, 0, 1442,
	1412, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 3348, 1421,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 1433,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 1445, 0, 0,
	0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 2082, 0, 0, 0, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 2081, 0, 0, 1407, 0, 1443,
	1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430,
	1431, 1432, 0, 1406, 0, 0, 0, 0, 1412, 0,
	2464, 1426, 0, 2463, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 0, 0,
	0, 0, 1442, 1412, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 1433, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	1445, 0, 0, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 1429, 1430, 1431, 1432, 0, 1406, 0, 0, 0,
	0, 1412, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432,
	0, 0, 0, 0, 0, 1442, 1412, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 1441, 796, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 1433, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 1445, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 0, 0, 0, 1406, 2737, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	2465, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432, 0, 1406,
	0, 0, 0, 0, 1412, 0, 0, 1426, 0, 2470,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 1429,
	1430, 1431, 1432, 0, 0, 0, 0, 0, 1442, 1412,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 1433, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 1445, 0, 0, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 0, 0, 0, 0, 0, 1406, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 2418, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431,
	1432, 0, 1406, 0, 0, 0, 0, 1412, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 1429, 1430, 1431, 1432, 0, 0, 0, 0,
	0, 1442, 1412, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 2432, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 1433, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 1445,
	0, 0, 0, 0, 1407, 0, 1443, 1453, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0, 0,
	1406, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1407,
	0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	1429, 1430, 1431, 1432, 0, 1406, 0, 0, 0, 0,
	1412, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432, 0,
	0, 0, 0, 0, 1442, 1412, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 1433, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 1407, 0, 1443,
	1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 1429, 1430, 1431, 1432, 0, 1406, 0,
	0, 0, 0, 1412, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 0, 1442, 1412, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 1433, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1630, 1612, 1619, 1602, 1640, 1639, 0, 0, 1604,
	1603, 0, 0, 0, 0, 0, 0, 1650, 1651, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 0, 0, 1641, 0, 1637,
	1636, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1635, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	1634, 1632, 1633, 0, 0, 0, 0, 1443, 0, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 593,
	612, 0, 1614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 1617, 1625, 1627, 1628, 1629, 1624,
	594, 1622, 0, 595, 0, 0, 0, 0, 0, 0,
	1646, 1647, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 0, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 1638, 0, 0, 0, 1615, 0,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 599, 622, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1631, 0,
	0, 0, 1599, 1597, 1598, 1601, 1600, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1607, 1608, 1610,
	1611, 0, 0, 0, 621, 0, 0, 0, 0, 0,
	602, 0, 1626, 1609, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 1605, 0, 1642, 1643, 1644, 1645, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 1613, 0, 0, 0, 0, 1620, 1648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 620, 0,
	619, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 626, 0, 623, 0,
	0, 0, 613,
}
var sqlPact = [...]int{

	3919, -1000, -1000, -1000, -1000, -1000, -1000, 155, 145, 144,
	142, 138, 137, 134, 130, 125, -1000, -1000, -1000, 123,
	-1000, -1000, 121, -1000, 119, 110, 106, 101, -1000, 100,
	98, -1000, -1000, -1000, -1000, 94, 93, 92, 48094, 1581,
	57490, 49318, 1644, 2050, 42782, 57080, 42372, 56670, 56260, 91,
	-1000, 55850, 87, 86, 85, -1000, -1000, 84, 2378, 34552,
	83, 80, 79, 1752, 78, 77, -1000, 76, -1000, 68624,
	1102, -1000, 75, 73, -1000, 7267, 247, 48908, 2025, 72,
	69, 34141, 2019, -1000, -1000, 1481, -1000, -1000, 68, 66,
	65, 64, 63, 62, 60, 57, 56, -1000, 55, 54,
	53, 52, 51, 50, 49, 48, 47, 44, 43, 42,
	39, 36, 35, 34, -1000, 7007, 1344, 1233, 1229, 1224,
	1214, 1230, 724, 33, 31, 30, 29, 28, 22, -1000,
	-1000, 19, 14, 13, 11, -1000, 7, 6, 146, 0,
	-1, -3, -4, -7, 1672, 1994, 1206, 490, 16165, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61530,
	57894, -8, -94, -73, -1000, 2255, 786, 28803, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 366, -1000,
	-1000, -1000, 218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1399,
	567, -1000, -1000, -1000, 55440, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57894, -1000, 1555, -106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 560, -1000, 1543, 180, 1467, -1000,
	-1000, -1000, -1000, -1000, 57894, -1000, -1000, 2568, 2567, 1479,
	555, 55036, -1000, 1126, -1000, 675, 18776, -1000, 900, -1000,
	18776, 190, -1000, -1000, -1000, -1000, -1000, 41962, 13136, 41552,
	41142, 38284, 54626, 12716, 47690, 955, -1000, -1000, -1000, -1000,
	-1000, -14, 35764, 57894, -1000, 188, -1000, -1000, -1000, -1000,
	-1000, -1000, 24981, 439, 24535, 371, 24089, 284, -1000, -1000,
	-1000, -1000, 2566, 2565, 823, 2564, 2216, 61126, 1279, 2561,
	1247, 890, 751, 2558, 2557, 2550, 2545, 2544, 2536, 2535,
	1215, 54216, 2007, 37864, 37444, 48094, 48094, 1847, 53806, -1000,
	-1000, 994, 991, -1000, -1000, -1000, -1000, 2128, 2035, 2026,
	47280, -1000, -1000, 2530, 2529, 2526, 2525, 2523, 60722, 1278,
	2522, 1785, 2521, 2520, 2516, 2510, 2509, 2500, 2499, 2498,
	2496, -1000, 46870, 46460, 46050, 45640, 53396, 37024, 36604, -1000,
	-1000, -1000, 30439, 4560, 52986, 31281, 48094, -1000, -1000, 25414,
	-74, -1000, -1000, -1000, 1989, -1000, 25414, -74, -1000, 2006,
	1407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1652, 1198,
	2375, 36184, 1428, 1002, 2124, 2494, 1742, 2121, 2103, 2100,
	2097, 2095, 2493, 1171, 2489, 1155, 2488, 1117, 2081, 2416,
	1457, 40732, 2486, 2485, 2276, 2078, 1987, -1000, -1000, -1000,
	-1000, 1082, -1000, -1000, -1000, 43186, -1000, -1000, 864, -1000,
	-1000, 864, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 938,
	59914, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1193, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1645, -1000, 1412, -1000, -1000,
	2484, 1994, 1707, 2251, 2251, 2251, 2294, 357, 334, -1000,
	146, -1000, -1000, 67777, -1000, -1000, 25414, 25414, 25414, 25414,
	25414, 1421, -1000, 554, -1000, -1000, 594, -1000, 544, 496,
	-1000, -1000, -1000, -1000, -1000, -1000, 543, 2428, -1000, 795,
	-1000, -1000, -1000, -1000, 2373, -1000, 15286, -1000, -1000, -1000,
	347, 537, 25414, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 187,
	685, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 483, 1359, 482, 482, 482,
	-1000, -1000, 747, -1000, -1000, -1000, 228, 478, 224, 477,
	-1000, -1000, -1000, -1000, 2005, 533, 531, -1000, 529, 526,
	525, -1000, -1000, -1000, 524, 523, 521, 520, 519, 518,
	517, 516, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 746,
	-1000, 515, 513, 512, 511, 509, 508, 507, 506, 504,
	-1000, -1000, -15, 57894, -1000, 366, -15, -1000, -1000, 500,
	-1000, 19209, 19209, 19209, -1000, -1000, 1524, 25414, -1000, 1850,
	-1000, 561, -235, 648, 29619, -1000, 27968, 648, 603, 32507,
	-1000, 1986, -1000, -1000, 497, 184, -1000, -1000, 1984, 57894,
	13554, 57894, 48094, 48094, -1000, 2168, 25414, -1000, -1000, 38702,
	35360, 57894, 48498, 2336, 68510, 35360, 57894, 2004, -1000, -1000,
	-1000, 57894, -1000, 25414, -1000, 2335, 1112, -23, -1000, -1000,
	-1000, -1000, -1000, -1000, 1756, 1743, 847, 1607, 1209, -1000,
	18776, 2205, -1000, -1000, -1000, 179, 13554, -1000, 1585, 2143,
	1056, -1000, 1599, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1318, 2141, -1000, 1549, 2139, 1317, -1000, -1000, 716,
	2113, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1488, -1000, -1000, 2227, -1000, -1000, 1621, 2106, -205, -1000,
	-1000, 38702, 35764, -17, -1000, -1000, -41, -1000, 12296, 67777,
	-1000, -1000, -1000, 67777, 679, -1000, -1000, 2101, -1000, 67777,
	674, -1000, -1000, 2091, -1000, -1000, -1000, 2483, -1000, 2482,
	1697, 2481, 2479, 2478, -1000, 1358, 1354, 2477, -1000, 2473,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45230, 44820, 750,
	-1000, 1521, -1000, -1000, 44410, 700, 1690, -1000, -1000, 1689,
	-1000, 411, -1000, 2472, 52576, 1871, 700, 1688, -1000, -1000,
	-1000, -1000, -1000, 48094, -1000, 48094, -1000, 48094, -1000, 1105,
	-1000, 60318, -235, -1000, -1000, -1000, -1000, -1000, 2090, 2470,
	2469, 2468, -1000, 57894, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 158, 2088, -1000, -1000, 158, 2085, -1000,
	158, 2082, -1000, 153, 2077, -1000, -1000, 1550, 2070, -1000,
	-102, 2069, -1000, -1000, -102, 2066, -1000, -22, -1000, -1000,
	-1000, 786, -1000, 30029, 52166, 38702, 692, 566, 67777, -1000,
	38702, 67777, -1000, 44410, -1000, 51756, 44006, -1000, -1000, 1028,
	1806, -1000, -1000, -1000, -1000, 38702, 38702, -1000, 51346, -1000,
	-1000, -1000, 1453, 2232, 48094, -1000, -1000, 2003, -1000, 34956,
	48094, -1000, 48094, -1000, 48094, -1000, 48094, -1000, 48094, -1000,
	-1000, -1000, -1000, -1000, 2138, 1241, 1238, -1000, 57894, -1000,
	-1000, 2247, 57894, -1000, -1000, -1000, 1740, -1000, -1000, -1000,
	-1000, 48094, -1000, -1000, -1000, -1000, -1000, -1000, 2002, -1000,
	1201, -1000, 1027, -1000, -1000, 159, -1000, -1000, -23, -1000,
	59914, -1000, -1000, 1994, 1707, -1000, 57894, -1000, -1000, -1000,
	1994, 1591, 1830, 23643, 1751, 25414, 146, -1000, -1000, 146,
	146, 18343, -1000, -1000, 68510, 68510, 13554, 969, 25414, 25414,
	25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414,
	25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414,
	25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414, 25414,
	25414, 25414, 25414, 1706, 25414, 932, 25414, 25414, 25414, 25414,
	1348, -1000, -1000, 1362, 384, 1385, -1000, 2376, 2376, 2376,
	68160, 68160, 474, 2467, 594, -1000, 25414, -1000, -74, 25414,
	13974, -1000, 2402, 1018, -1000, -1000, 334, 8376, 1651, -1000,
	330, 14420, -1000, -1000, -1000, 15286, 496, 23197, 25414, 741,
	67777, 11878, 2015, 1903, -1000, 2399, -1000, -1000, 2373, -1000,
	-1000, -1000, -1000, 2373, 967, 868, 2395, -1000, 2373, 2373,
	495, 640, 638, 636, 633, 627, 25414, 25414, 25414, 25414,
	25414, 25414, 25414, 25414, -1000, 22764, 22318, 21872, 26713, 21426,
	25414, 15719, 20980, 20534, 57894, -15, 2334, 25414, 148, -1000,
	66320, -1000, 148, 148, 493, -26, 67777, 1817, 1814, 29211,
	1851, 1431, 1431, 1431, -1000, 492, 588, 648, 9354, 49722,
	1435, 648, 648, 177, 204, 326, 27560, 1850, 49722, -1000,
	-1000, 48094, 491, 13974, 13554, 1029, -39, 176, 1826, 1825,
	1823, -1000, 1211, -43, 692, 928, -79, -1000, 182, -44,
	-1000, 848, -1000, -1000, -1000, -1000, 156, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 744,
	489, 487, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 483, 1359, 482, 482, 482, -1000,
	-1000, -1000, 228, 478, 224, 477, -1000, -1000, -1000, -1000,
	-1000, -1000, 1980, -41, 48498, 678, -48, 830, -23, -1000,
	864, -1000, 1497, -1000, -1000, -1000, -1000, -1000, -1000, 999,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2427, -1000, 2381,
	-1000, -1000, 2389, -16, -1000, -1000, 13554, -1000, -24, 1188,
	-1000, 40322, 2237, 2234, 2222, 1074, -1000, 1046, 2292, 43186,
	2319, 15, -1000, 1973, -1000, -1000, 672, 1023, 926, 43186,
	1549, -1000, 68510, -1000, 1890, 2281, 1017, 1086, 1017, 1017,
	1030, -1000, 43186, 925, 1390, 38702, -1000, 921, -1000, -30,
	2307, -2, -1000, 1972, 914, -1000, -1000, 48094, 13554, 643,
	-17, 35764, 57894, 175, -1000, 25414, -74, 25414, -74, -1000,
	-1000, 2064, -1000, -1000, -1000, 2466, 1337, 1782, -1000, -1000,
	-1000, 472, 1681, 1549, 1678, -1000, -1000, 43596, 1971, 57894,
	1834, -20, 48094, -1000, -1000, 1389, -1000, 2057, 2055, 352,
	2465, -1000, 1515, 1673, -1000, -1000, -1000, 59510, 859, 2054,
	728, 131, 2333, 131, 33323, -1000, 57894, -1000, 57894, -1000,
	-1000, -1000, 2464, -1000, 48094, -1000, -1000, 48094, -1000, 48094,
	-1000, 48094, -1000, 48094, 48094, -1000, 57894, 38702, 38702, 38702,
	4496, 39514, -50, 323, -1000, 50942, 57894, 782, 39918, -207,
	692, 643, -1000, 643, -1000, 48094, 2001, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57894, -1000, 57894, -1000,
	-1000, -1000, -1000, -1000, -1000, 1151, -1000, 2000, -1000, 1998,
	-1000, 21, -1000, -1000, -1000, -1000, 1281, 48094, 48094, 48094,
	-1000, 43186, -1000, -1000, 1994, -1000, -1000, -1000, -1000, -1000,
	67777, -1000, 443, -1000, -1000, 67777, 1240, 1844, -1000, 1844,
	-19, -1000, 65937, 1800, 48094, -1000, -1000, -1000, -1000, -1000,
	669, 1080, 1080, 908, 908, 908, 908, 2342, 241, 4260,
	5469, 755, 755, 755, 755, 755, 755, 755, 755, 4342,
	345, 345, 4342, 4342, 4342, 4342, 4342, 345, 345, 345,
	755, 755, 755, 68160, 67852, 5694, 25414, 25414, 912, 1343,
	384, 5313, 25414, 6486, 6486, 6486, 6486, -1000, 1503, -1000,
	-1000, -1000, -1000, 1961, 471, 26713, 26713, -1000, -1000, -1000,
	-1000, 14853, 25414, -1000, -1000, -1000, -1000, 20088, -1000, -1000,
	65484, -247, 320, -187, 26, -1000, 25414, 25414, 25414, 319,
	-1000, 317, -1000, -1000, 910, -1000, 909, 906, 905, -1000,
	470, 174, 25414, 57894, -1000, 63186, 587, -49, -1000, -52,
	1039, -1000, 25414, 172, -1000, 1427, 468, 467, 313, -56,
	312, 668, 661, 311, 310, 309, 25414, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 67469, 63111, 62803,
	62728, 7996, 62420, 62345, -57, 308, -1000, 1958, -187, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 306, -1000, 305, -1000,
	67394, -187, 304, 6416, -1000, 26713, 26713, 26713, -1000, 303,
	-1000, 66245, -1000, 67086, 19655, 19655, 19655, 302, 67011, 25414,
	-187, -58, -1000, -65, -1000, -1000, 465, -69, 728, 19209,
	28392, 13554, -1000, 728, 728, 25414, -1000, 25414, 29211, 29211,
	1100, 1810, 29211, -1000, -1000, -1000, -1000, 49722, 596, 648,
	49722, -1000, 2373, 1896, -1000, -1000, -1000, 57894, 366, -1000,
	49722, 49722, 13554, 648, -1000, 300, 31689, 26, 165, -1000,
	-1000, 13554, 1872, 1872, 1872, -1000, -1000, 1955, 57894, 2348,
	-1000, 1365, -1000, 68510, -1000, 592, 902, -1000, 2388, 460,
	-1000, 2373, 2373, 57894, 107, 18776, -1000, 864, -1000, -1000,
	1133, -1000, 1345, -1000, 839, -1000, -1000, -1000, 18776, -1000,
	1506, 48094, 57894, 57894, -1000, -1000, 1665, 59106, 1664, 68510,
	57894, -1000, -1000, 459, 458, 1799, 1797, 57894, 57894, 58702,
	58298, 57894, 1440, 25414, 1552, 1270, -74, -1000, -74, 457,
	936, 48094, 48094, 1297, -1000, -1000, -1000, -1000, -1000, 48094,
	-1000, -1000, 2386, -1000, 1017, -1000, -1000, -1000, 1017, 1549,
	1273, 48094, 38702, 714, 57894, 1392, -74, -1000, -74, 455,
	13554, 1369, -1000, 1889, -1000, -1000, -1000, 11460, 67777, -1000,
	67777, -1000, 57894, -1000, 749, 57894, 39918, 709, 2053, -1000,
	1549, 2051, 366, -1000, -1000, 32915, -41, 692, 38702, 48094,
	-20, 38702, 38702, 38702, 2463, 452, 2462, -1000, 48094, 2048,
	1513, 1662, 2133, 617, 57894, 1451, -1000, 25414, 1316, -1000,
	32099, 760, 57894, 1249, 81, -1000, -1000, -1000, 10, 57894,
	-1000, 2459, -1000, -1000, 158, 158, 158, -1000, 153, 1550,
	-1000, -102, -102, -1000, -1000, 4496, 692, -21, 450, -1000,
	642, 639, 30863, 38702, -70, -1000, -1000, -1000, -1000, -1000,
	48094, 57894, 553, 1868, 57894, -1000, 692, -1000, -1000, 705,
	-1000, 1022, -41, -41, -1000, 1109, 1079, 57894, -1000, 13554,
	57894, 48094, 13554, 48094, -1000, -1000, -1000, -1000, -1000, 1240,
	-1000, 25414, -1000, -1000, -1000, 18343, -1000, -1000, -1000, 48094,
	-225, 25414, 25414, 5284, 4901, 25414, 26713, 26713, -1000, 25414,
	4752, -1000, -1000, -1000, -1000, -1000, 1952, 448, 25414, 68510,
	3528, 1636, -1000, 299, 8831, 4342, -1000, 25414, -1000, 298,
	17910, -1000, 66628, 16, 16, -1000, 2424, 1710, 1460, 1357,
	1162, 2384, 11042, -187, -81, -1000, -1000, 591, -1000, 2099,
	-1000, 25414, 66703, 10624, -1000, 33731, 733, 1451, -1000, -1000,
	2373, 663, -1000, -1000, -1000, 663, -1000, 65409, 68510, 68510,
	25414, 25414, -1000, 25414, 25414, 25414, -1000, -1000, 25414, -1000,
	-1000, 1946, 25414, -1000, 68510, 68510, 26713, 26713, 26713, 26713,
	26713, 26713, 26713, 26713, 26713, 26713, 26713, 26713, 26713, 26713,
	26713, 26713, 26713, 26713, 26713, 1726, 26713, 2364, 2364, 2364,
	-1000, 1965, 1946, 25414, 25414, 68510, 297, 296, 292, -1000,
	25414, -187, -1000, -1000, 4496, -1000, 1902, -1000, -173, -1000,
	1850, -1000, -1000, 1902, 1902, -83, 67777, -1000, 1100, -1000,
	442, 25414, 29211, -1000, 585, -1000, -87, -1000, 49722, -1000,
	584, -244, -1000, 634, -1000, -1000, -1000, 366, -1000, -1000,
	-1000, 164, 49722, -1000, -93, -1000, 2332, 291, 13554, -1000,
	-1000, -1000, -1000, -1000, -1000, -74, -41, 1465, 2409, -1000,
	2377, -1000, 583, 290, 2373, 289, 282, -41, 57894, -1000,
	-23, -1000, -1000, -1000, 25414, -1000, -1000, -1000, 880, 874,
	-1000, 2047, -1000, 1659, -1000, 766, -1000, 1138, 25414, 25414,
	440, 438, 1293, 2456, 2046, 1550, 2041, 1550, -1000, -1000,
	681, -1000, 67777, 436, 424, -1000, -24, 1180, -1000, -1000,
	25414, 25414, 50534, -1000, 2227, -1000, 873, -1000, -1000, -1000,
	1549, 867, -1000, -1000, 1370, -1000, -1000, -1000, -1000, 25414,
	-1000, -30, 860, 692, 1944, -1000, 2455, 2453, 2452, 281,
	-31, -1000, 2331, 1508, 57894, 48094, 48094, 2330, 643, -1000,
	2373, -1000, -1000, -1000, -1000, 700, -1000, -1000, 2445, -1000,
	776, 13554, 48094, 2038, 1774, 617, 39110, -1000, 700, 1830,
	-1000, 67777, -1000, 1249, 17464, 2225, -97, -1000, 149, -1000,
	-1000, -1000, 728, 33323, 29211, 25414, 2444, -98, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 50130, 50130, 38702, 38702,
	38702, 692, 57894, 57894, 39918, 2443, 423, 57894, 57894, 417,
	-1000, -1000, -1000, 1459, 48094, -1000, -1000, 697, -1000, -1000,
	1396, 1598, -1000, 1473, 65101, -1000, 2229, 13554, 2349, 6486,
	25414, 25414, 3979, 1035, 835, 6486, 25414, 25414, 68510, 68235,
	-105, 25414, 25414, -1000, 25414, 581, 67777, 2408, 25414, 275,
	273, 272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	271, -1000, -1000, -1000, -1000, -1000, 67777, 25414, 82, -1000,
	-1000, -1000, 61934, -1000, 25414, 268, 266, -1000, -1000, -1000,
	261, 260, 8684, 5859, 65026, 64718, 64643, 67777, 1965, 67777,
	-1000, -1000, 698, 698, 1042, 1042, 1042, 1042, 2364, 997,
	1076, 931, 400, 400, 400, 437, 582, 582, 400, 400,
	400, 1939, 1734, 416, 6387, -1000, -1000, 67777, 67777, 256,
	-1000, -1000, -1000, -187, 253, 1897, 2278, -1000, 29211, 1897,
	1897, -1000, -1000, 57894, 67777, -1000, -235, -1000, 2373, -1000,
	-1000, 1896, -1000, 9784, -1000, 13554, -1000, -1000, 31689, -1000,
	415, -1000, 27, -1000, -1000, -1000, 580, -1000, -1000, 252,
	-1000, -1000, -41, 67777, 57894, 57894, 57894, 2037, -1000, 3644,
	-1000, 64335, -111, -1000, 65937, 25414, 57894, -1000, 1302, 1854,
	816, -1000, 57894, -1000, 57894, -1000, -1000, 57894, 57894, 48094,
	57894, 57894, -113, 67777, -67, -1000, 631, -1000, 48094, 48094,
	38702, -115, 13554, -1000, 38702, -1000, -1000, -1000, 1864, -74,
	-1000, 2441, 414, 1549, -74, -1000, 573, -1000, -1000, 413,
	57894, 1505, 412, 13554, 1773, 617, 39110, -1000, 859, 1249,
	-1000, -1000, -77, -1000, 449, -74, 57894, 2440, 1451, -1000,
	-85, 67777, -1000, 618, -1000, -124, -1000, -1000, 251, -1000,
	2193, 2191, -1000, -1000, 25414, 401, 399, 57894, 1704, -1000,
	-1000, -1000, -1000, 13554, 1016, -1000, -1000, -1000, 2229, 6486,
	6486, 25414, 25414, 25414, 6486, 68235, -125, -1000, 6486, 6486,
	-187, -1000, -1000, 66628, -1000, -1000, -1000, -1000, 67777, 10206,
	1401, -1000, 64260, -1000, -1000, -1000, -1000, 25414, 25414, -1000,
	-1000, -1000, -1000, -1000, 26713, 1930, 398, 68510, -1000, -1000,
	718, 25414, 25414, 1850, 718, 718, -129, 648, -1000, -1000,
	-1000, 2373, 27, -1000, 2439, 13554, -1000, -1000, -1000, -1000,
	-1000, 57894, -1000, 57894, -1000, 13554, 57894, 1925, 1640, -1000,
	-1000, 1791, 385, 26713, 48094, 701, 1935, 1312, 25414, -1000,
	-130, -135, 1637, -1000, -1000, 1613, 25414, -1000, 68510, 1550,
	1550, -137, -139, -1000, 856, 851, 850, 57894, 17031, -1000,
	-1000, -1000, 843, -1000, -102, 1392, 1883, 693, -1000, 39918,
	709, -1000, -1000, -1000, 25414, -1000, 48094, 25414, 1500, -1000,
	617, 39110, -1000, 2133, -1000, 2060, 57894, 2221, -1000, -1000,
	-1000, 1830, 384, -1000, 692, 383, 381, -143, 25414, 25414,
	-147, -110, -1000, 667, 666, -1000, -1000, 48094, -1000, 6486,
	6486, 6486, -1000, 245, -1000, -1000, 1451, 2275, -1000, 63952,
	63877, 4935, 26713, 68510, -148, -1000, 57894, 67777, -187, -1000,
	-1000, -1000, 49722, 571, -1000, -1000, 1386, -1000, -1000, -1000,
	57894, 1655, -1000, -1000, 25414, 6387, 380, 25414, -1000, -1000,
	1861, 1963, 1864, 379, -1000, -1000, -1000, -1000, 1285, -1000,
	-1000, 67777, 2257, -1000, -1000, 378, 377, 57894, 57894, 376,
	615, 1929, -1000, 372, 709, -1000, 1415, -1000, 1880, 243,
	2328, -153, 776, -158, 48094, 39110, -1000, 1774, 961, -164,
	57894, 1249, -1000, -1000, 38702, 38702, 1312, -166, -168, -1000,
	1704, -1000, 57894, -1000, 57894, -1000, -1000, 1601, 25414, -1000,
	-1000, 4935, -176, -1000, -134, -1000, 2324, -1000, -1000, -1000,
	-1000, 2036, 63569, 1728, 57894, 63494, 1962, -1000, -1000, 1392,
	57894, 48094, 775, 13554, 1396, 1396, -1000, -1000, 25414, 16598,
	1409, 25414, -1000, 48094, -1000, 2190, 1864, -74, 1312, 369,
	1312, 368, -1000, 1773, 1068, -1000, 728, -1000, -1000, -178,
	-180, 1864, 1312, -1000, -1000, -182, -188, 239, 26280, 26280,
	26280, -187, -1000, 57894, 367, 2023, -1000, 1477, 1394, 226,
	793, -1000, -1000, 1935, -189, 366, -1000, 25414, -1000, -202,
	-1000, 759, -203, -1000, 756, -208, -1000, 1912, -1000, -209,
	363, -1000, 1392, 693, 1864, 25414, 1864, 25414, -1000, 33323,
	-1000, 692, 692, 1392, 1864, -1000, -1000, -1000, -1000, -1000,
	27131, 1616, 1226, 65862, -1000, -1000, -1000, -1000, 57894, -1000,
	1485, 1480, 1091, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1728, 67777, -1000, 1396, 1881, -1000, 1396, 1911, -1000,
	1406, -1000, 57894, 709, -1000, 1392, -210, 1392, -215, -190,
	-1000, -1000, -1000, 1392, 2343, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2174, -1000, 789, 1446, 1446, 1477, -1000, 360,
	-1000, 359, -1000, -217, -1000, 720, 1312, 720, 1312, -1000,
	-1000, 25847, -1000, 2352, -1000, -1000, 1772, -1000, 1935, 25414,
	25414, 1529, -1000, 2432, 1864, -1000, 1864, -1000, -1000, -1000,
	-1000, -1000, -226, -227, -1000, -1000, -1000, -1000, 1392, 1392,
	1392, 834, 720, 720, -1000, 353, -1000, -1000, 25414, -232,
	1392, -1000,
}
var sqlPgo = [...]int{

	0, 3046, 3044, 3042, 3041, 3027, 3026, 3025, 3024, 3022,
	3021, 3019, 3014, 3012, 3011, 3008, 3000, 2999, 2998, 2993,
	2989, 2988, 2987, 2986, 2985, 2983, 2982, 2981, 2980, 2978,
	2977, 2975, 2973, 2970, 2968, 2963, 2959, 2958, 2948, 2947,
	2944, 2933, 2930, 2929, 28, 2927, 2926, 2925, 2924, 2923,
	2922, 2919, 2917, 2916, 2915, 2911, 2908, 2906, 2905, 2904,
	2903, 2902, 2898, 2893, 2890, 2889, 2887, 2881, 2877, 2876,
	2874, 2872, 2868, 2867, 126, 2866, 2865, 2864, 2863, 2857,
	2856, 2854, 2852, 2851, 2850, 2849, 2848, 2846, 2845, 99,
	2844, 2843, 2842, 2841, 2839, 2838, 2834, 2833, 2832, 2830,
	181, 2829, 2828, 2827, 2826, 2825, 2824, 2823, 2822, 2821,
	2820, 2819, 2818, 2817, 2815, 2813, 2812, 2811, 2810, 2809,
	2807, 2806, 2805, 2803, 2802, 2801, 2800, 199, 142, 2799,
	2798, 2797, 2796, 2795, 2794, 87, 84, 20, 2793, 89,
	145, 188, 5653, 173, 2792, 2791, 2790, 2789, 2788, 64,
	133, 136, 125, 124, 150, 2786, 2785, 57, 54, 29,
	26, 94, 2784, 2782, 2781, 2378, 80, 2780, 2779, 194,
	177, 2778, 1800, 2774, 121, 72, 86, 111, 67, 2773,
	109, 19, 2772, 155, 59, 2769, 123, 76, 33, 5440,
	6150, 2767, 70, 202, 68, 143, 166, 165, 158, 157,
	127, 947, 2758, 184, 2757, 129, 149, 2756, 2755, 2753,
	58, 144, 2, 5, 135, 9, 2751, 14, 2750, 10,
	2749, 2748, 2746, 2744, 27, 120, 2741, 40, 53, 2739,
	32, 95, 168, 2737, 159, 2736, 90, 2734, 191, 148,
	151, 18, 174, 2730, 2729, 2728, 2727, 2726, 93, 17,
	88, 2725, 2724, 108, 176, 2723, 50, 128, 71, 98,
	200, 83, 163, 102, 167, 178, 2721, 2717, 2715, 132,
	2714, 2712, 117, 156, 2710, 2709, 36, 51, 172, 34,
	2708, 2707, 119, 2706, 152, 2705, 2702, 2699, 197, 130,
	160, 7, 63, 91, 25, 11, 169, 104, 75, 73,
	2697, 2384, 1199, 1035, 2696, 112, 81, 44, 79, 118,
	193, 38, 2695, 2690, 1073, 2684, 2683, 2681, 2680, 137,
	2677, 2676, 2666, 107, 30, 61, 2665, 116, 55, 113,
	198, 77, 162, 161, 185, 2662, 131, 2661, 100, 103,
	2660, 147, 183, 85, 2659, 175, 114, 2658, 186, 2657,
	2656, 2653, 2652, 74, 2651, 2650, 122, 2649, 115, 2648,
	2647, 141, 138, 92, 31, 2645, 56, 289, 2644, 146,
	35, 2643, 1415, 43, 0, 6075, 4645, 3838, 2642, 5709,
	2640, 153, 97, 2638, 2636, 2635, 2631, 37, 12, 6,
	8, 15, 13, 1501, 472, 2630, 2629, 69, 96, 105,
	2628, 195, 164, 2626, 2623, 2621, 62, 2614, 23, 2613,
	21, 2612, 2609, 24, 1, 2608, 2607, 180, 2605, 179,
	2604, 2603, 2352, 2600, 190, 2598, 101, 2597, 134, 110,
	2596, 2590, 2587, 2586, 189, 2585, 192, 2584, 22, 16,
	3, 2581, 2578, 2576, 154, 4, 2187, 2574, 2573, 65,
	140, 66, 2572, 2571, 139,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	424, 424, 17, 27, 18, 28, 12, 426, 426, 426,
	426, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 423, 423, 153, 153, 152, 148,
	148, 427, 427, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 372, 372, 373, 373, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 45, 128, 128, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 432, 432,
	433, 433, 434, 434, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 59,
	59, 226, 226, 204, 204, 49, 49, 419, 419, 239,
	239, 340, 340, 61, 61, 62, 62, 62, 62, 62,
	62, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 70, 70,
	70, 71, 71, 71, 68, 68, 68, 66, 66, 66,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 240,
	240, 72, 72, 72, 72, 72, 72, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 342, 342,
	73, 73, 73, 312, 312, 76, 76, 76, 270, 270,
	77, 77, 77, 77, 77, 78, 78, 78, 78, 88,
	88, 88, 88, 422, 422, 232, 232, 169, 169, 169,
	169, 83, 83, 83, 83, 84, 84, 84, 85, 85,
	133, 133, 94, 94, 94, 94, 94, 93, 93, 93,
	93, 93, 93, 39, 39, 39, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 44, 44, 96,
	96, 428, 428, 98, 95, 95, 95, 97, 97, 97,
	97, 99, 100, 100, 100, 100, 100, 100, 101, 101,
	366, 366, 247, 247, 364, 364, 380, 380, 365, 365,
	208, 208, 208, 208, 208, 209, 209, 209, 371, 371,
	371, 371, 371, 371, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 118, 118, 118, 127, 127, 127, 127, 127, 127,
	127, 120, 120, 120, 111, 111, 103, 103, 103, 103,
	107, 107, 107, 107, 107, 104, 104, 108, 108, 110,
	110, 112, 112, 112, 112, 112, 112, 105, 105, 105,
	105, 114, 114, 114, 114, 113, 113, 123, 123, 123,
	123, 123, 123, 326, 326, 119, 119, 119, 119, 122,
	122, 122, 122, 261, 261, 117, 117, 117, 121, 121,
	124, 124, 124, 124, 106, 106, 106, 437, 437, 437,
	125, 125, 116, 116, 126, 126, 126, 126, 126, 126,
	126, 115, 115, 115, 425, 425, 109, 420, 420, 417,
	417, 417, 417, 417, 417, 417, 418, 418, 421, 421,
	81, 81, 81, 54, 54, 438, 438, 438, 55, 55,
	439, 439, 439, 436, 436, 436, 436, 436, 436, 436,
	436, 210, 210, 211, 211, 293, 293, 293, 293, 293,
	212, 212, 155, 155, 155, 215, 216, 216, 213, 213,
	214, 214, 214, 218, 218, 217, 220, 220, 219, 292,
	385, 385, 386, 386, 386, 386, 386, 386, 386, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 383,
	383, 383, 384, 381, 381, 382, 382, 382, 382, 440,
	440, 440, 440, 440, 440, 441, 441, 291, 291, 224,
	224, 388, 388, 388, 388, 389, 389, 389, 389, 389,
	392, 391, 390, 390, 390, 390, 390, 322, 322, 322,
	58, 58, 58, 258, 258, 257, 257, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	259, 130, 130, 56, 56, 56, 161, 161, 53, 53,
	53, 443, 443, 57, 57, 57, 444, 444, 60, 60,
	60, 60, 60, 60, 52, 52, 52, 52, 52, 445,
	445, 276, 276, 275, 275, 230, 230, 328, 173, 173,
	149, 149, 149, 20, 22, 22, 15, 15, 15, 15,
	15, 15, 30, 30, 31, 31, 26, 26, 429, 429,
	430, 430, 82, 82, 86, 86, 86, 92, 92, 129,
	129, 129, 129, 129, 129, 129, 34, 34, 34, 34,
	46, 46, 46, 46, 90, 447, 447, 447, 91, 91,
	446, 446, 168, 168, 168, 168, 170, 170, 288, 288,
	289, 289, 448, 448, 290, 290, 290, 290, 163, 162,
	164, 164, 51, 51, 51, 157, 157, 158, 158, 159,
	159, 160, 160, 449, 449, 79, 79, 79, 132, 132,
	203, 203, 284, 284, 284, 225, 225, 178, 178, 287,
	287, 285, 285, 285, 285, 256, 256, 256, 131, 131,
	235, 235, 249, 249, 250, 250, 337, 337, 251, 89,
	89, 142, 142, 140, 140, 140, 140, 140, 140, 450,
	450, 141, 141, 141, 143, 143, 143, 143, 143, 143,
	143, 146, 146, 146, 146, 147, 147, 147, 145, 145,
	399, 399, 399, 401, 401, 402, 398, 398, 400, 400,
	442, 442, 260, 260, 260, 222, 223, 221, 221, 451,
	451, 228, 228, 227, 229, 229, 327, 327, 327, 254,
	254, 254, 254, 279, 279, 277, 277, 278, 278, 280,
	280, 281, 281, 281, 282, 282, 283, 283, 253, 253,
	308, 308, 144, 144, 144, 234, 234, 234, 236, 236,
	299, 299, 299, 299, 299, 300, 300, 298, 298, 298,
	298, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	330, 330, 237, 237, 331, 286, 286, 415, 415, 415,
	416, 416, 325, 325, 332, 332, 332, 332, 332, 332,
	323, 323, 324, 324, 338, 339, 339, 264, 264, 264,
	264, 262, 262, 263, 263, 333, 333, 333, 333, 255,
	255, 334, 334, 334, 335, 294, 295, 295, 343, 343,
	343, 343, 358, 233, 233, 233, 452, 452, 344, 344,
	344, 344, 344, 344, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 348, 348, 348, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 357, 357, 357,
	357, 357, 349, 349, 354, 354, 355, 355, 355, 350,
	351, 356, 356, 356, 356, 453, 453, 360, 360, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 346, 346,
	346, 353, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 271, 271, 272, 272, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 303, 303, 303, 303, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 393, 393, 393, 393, 393, 393, 393,
	393, 396, 396, 397, 397, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 403, 403, 404, 404, 406, 406,
	407, 407, 408, 409, 409, 409, 410, 411, 411, 405,
	405, 412, 412, 412, 412, 413, 413, 414, 414, 414,
	414, 414, 314, 314, 315, 315, 321, 321, 321, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 171, 171, 171, 171, 171,
	245, 245, 243, 243, 243, 246, 246, 244, 244, 242,
	242, 241, 241, 311, 311, 309, 309, 313, 313, 265,
	265, 359, 359, 359, 359, 359, 359, 359, 266, 266,
	266, 274, 267, 267, 268, 268, 268, 268, 268, 305,
	306, 269, 269, 269, 307, 307, 316, 320, 320, 319,
	318, 318, 317, 317, 296, 296, 297, 297, 252, 252,
	454, 454, 248, 248, 336, 336, 336, 336, 206, 206,
	238, 238, 205, 205, 198, 198, 199, 199, 199, 199,
	231, 231, 361, 361, 361, 362, 363, 310, 188, 187,
	175, 176, 186, 185, 184, 174, 177, 181, 182, 183,
	179, 180, 194, 193, 192, 190, 191, 341, 200, 200,
	201, 201, 201, 202, 202, 202, 202, 172, 172, 195,
	195, 196, 197, 197, 189, 189, 189, 165, 165, 165,
	166, 166, 167, 167, 370, 370, 368, 368, 368, 369,
	369, 369, 369, 367, 367, 367, 367, 367, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 376, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 379, 379,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 5, 4, 6,
	4, 6, 4, 1, 0, 2, 3, 3, 3, 7,
	5, 3, 3, 2, 0, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 1, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 447, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 278, 307, 317, 301, -97,
	-98, 336, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -431, 82,
	-400, -64, -67, -69, -435, 112, 125, 163, 270, -84,
	-85, 303, 305, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 339, 385, 39, 348, 68,
	115, 311, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -399, -65,
	-66, -68, -70, -71, 302, -143, -141, 444, 397, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 415,
	423, -146, -144, -145, -147, 324, 405, 362, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, -190, -195,
	-196, -197, -189, -165, -376, -379, 4, -374, -377, 131,
	176, 240, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 368, 370, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 177, 172, 178, 182, 185, 184, 186, 187, 188,
	179, 193, 196, 197, 198, 200, 201, 204, 205, 206,
	207, 210, 209, 212, 215, 216, 219, 220, 223, 225,
	226, 228, 229, 227, 230, 233, 231, 232, 235, 236,
	238, 237, 245, 246, 248, 249, 250, 265, 253, 254,
	255, 258, 261, 264, 266, 267, 268, 269, 270, 271,
	273, 274, 276, 278, 280, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 293, 294, 295, 296, 301, 298,
	299, 300, 302, 303, 304, 305, 307, 309, 310, 311,
	312, 314, 316, 337, 338, 350, 317, 318, 319, 320,
	321, 322, 323, 327, 331, 328, 329, 330, 332, 325,
	326, 333, 334, 336, 339, 341, 343, 344, 347, 348,
	349, 351, 354, 355, 356, 352, 353, 346, 361, 359,
	360, 363, 364, 365, 366, 367, 369, 371, 379, 380,
	382, 385, 386, 387, 389, 390, 393, 394, 395, 396,
	401, 397, 399, 402, 403, 404, 410, 409, 416, 417,
	419, 420, 421, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	259, 263, 275, 277, 288, 313, 342, 357, 373, 374,
	375, 376, 381, 383, 405, 406, 407, 411, 418, 251,
	-183, 2, -165, -165, 278, 26, 2, 26, 274, 326,
	364, 366, 2, 192, 2, -422, -232, 2, 26, -169,
	-165, 82, 152, 324, -183, 2, -422, -232, 24, 2,
	-165, 2, -170, 2, 317, -165, 447, 77, 220, 61,
	313, 333, -100, 380, -99, 373, 319, -101, -366, 2,
	233, -165, 447, 447, 447, 447, 2, 362, 268, 409,
	325, 398, 95, 285, 176, -417, 2, 4, -377, -374,
	-199, -198, 362, 95, -197, -189, 437, -196, 447, 447,
	447, 2, 197, 198, 284, 283, 333, 334, 447, 447,
	447, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	256, -432, 226, 265, 282, 319, 332, 361, 371, 382,
	-436, 349, 56, 398, -443, 387, 110, -275, 95, 366,
	364, 220, 151, 394, 309, 155, 392, 105, 182, 396,
	395, 447, 447, 25, 55, 64, 79, 110, 127, 147,
	150, -434, 265, 282, 316, 319, 332, 361, 371, 387,
	382, 2, 409, 325, 362, 176, 95, 398, 309, 281,
	-74, 2, 444, 29, 336, -139, 362, 2, -165, 197,
	198, 2, 447, 447, -417, 2, 197, 198, 2, 56,
	321, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 2, -127, 333, 349,
	160, 38, 61, 26, 66, 96, 153, 176, 177, 205,
	76, 77, 283, 220, 198, -326, 334, 363, 320, 359,
	380, 82, 399, 310, 421, -425, 122, 4, 95, 233,
	335, 373, 70, 367, 368, -442, 2, 362, -446, 2,
	380, 380, 2, -446, 2, -446, 2, -168, 2, 380,
	377, -447, 380, 418, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, -141, -143, -142, 447,
	447, 447, 447, 447, -127, 333, 2, 61, 26, -450,
	145, -227, -228, 391, 190, 118, 257, -140, -142, 2,
	-399, -364, 2, -301, -380, -303, 435, 436, 430, 239,
	422, -314, 101, 392, 251, -379, -304, -316, 119, 313,
	-246, 8, 9, 5, 6, 7, -172, -345, -310, -353,
	384, 130, 242, -202, 449, 10, 444, -396, -142, -315,
	33, 156, 54, -368, -201, -347, -355, -351, -352, -452,
	44, 50, 49, 371, 232, 327, 328, 343, 329, 330,
	42, 401, 172, 248, 250, 184, 4, 191, -200, -189,
	-393, -394, -374, -375, 183, 189, 185, 342, 186, 187,
	188, 41, 288, 141, 142, 140, 111, 100, 99, 244,
	46, 45, 43, 406, -356, 97, 373, 374, 375, 376,
	200, 201, -165, -376, 64, 87, 88, 86, 91, 90,
	92, 89, 335, 398, 55, 32, 166, 167, 171, 243,
	168, 62, -395, 353, 83, 149, 181, 169, 194, 195,
	199, 214, 217, 234, 241, 260, 262, 308, 340, -453,
	407, 128, 129, 263, 275, 357, 381, 383, 154, 213,
	57, 58, -401, 289, -402, -183, -401, 447, 447, 448,
	447, -221, -222, -223, 2, 26, 108, 444, 2, -329,
	2, 442, -333, -142, 208, -332, 444, -330, -190, 252,
	-397, 314, -393, -394, -172, -189, -201, 4, -224, 444,
	446, 95, 362, 65, 2, -270, 444, -165, 26, -139,
	251, 377, 448, -312, 444, 251, 148, 254, -165, 2,
	2, 337, 2, 444, -100, 59, 380, -289, 2, -290,
	-162, -163, -164, -338, 196, 280, 287, 424, 421, -364,
	-428, 148, 427, 377, -364, -247, 446, 2, -333, 166,
	-190, 2, -187, -367, 4, -374, -377, -375, -378, 64,
	-376, 26, 28, 29, 30, 31, 33, 34, 35, 36,
	47, 54, 55, 60, 63, 65, 76, 82, 86, 87,
	89, 88, 90, 91, 92, 101, 103, 106, 108, 109,
	113, 115, 118, 130, 132, 145, 147, 148, 152, 155,
	158, 170, 180, 190, 192, 208, 211, 218, 221, 222,
	239, 242, 247, 251, 252, 256, 257, 272, 279, 291,
	306, 324, 335, 345, 358, 362, 372, 377, 378, 384,
	391, 392, 398, 400, 408, 412, 413, 414, 415, -379,
	2, -333, 166, 2, -192, 166, -333, -195, 2, -372,
	166, -370, 10, -369, 5, 4, -374, -377, -375, 2,
	-174, -165, 2, -186, -367, 2, -205, 166, -190, -191,
	-195, 377, 448, -238, -198, -199, -231, -165, 446, -301,
	2, -89, 2, -301, 166, 2, -89, 166, 2, -301,
	166, 2, -89, 166, 2, 2, 2, 382, 2, 79,
	166, -165, 362, 94, 2, 300, -433, 316, 386, 409,
	2, 2, 2, 2, 2, 2, 2, 362, 325, -444,
	289, -179, 2, -165, 145, -372, 166, 2, -372, 166,
	2, -193, -195, -193, 176, 193, -174, 166, 2, 366,
	364, 366, 364, 148, 2, 192, 2, 192, 2, -334,
	2, -335, -190, 2, 2, 2, 2, 2, 166, -165,
	362, 94, 2, 207, 2, 2, 2, 2, 2, 2,
	2, 2, 2, -240, 166, 2, -190, -240, 166, 2,
	-240, 166, 2, -206, 166, 2, -205, -174, 166, 2,
	-373, 166, 2, -372, -373, 166, 2, -342, 2, -341,
	-369, 405, -74, 444, 333, 444, -372, -190, -301, -89,
	148, -301, -89, 145, 2, 95, 362, -127, 2, 145,
	400, 2, 8, 2, -372, 286, 137, 2, 337, 2,
	283, 334, 61, 421, 148, 2, 2, -420, 2, 251,
	148, 2, 148, 2, 148, 2, 148, 2, 148, 2,
	2, 283, 334, 2, 379, 206, 123, 2, 148, -261,
	2, 415, 148, 2, 5, 2, 196, 280, 350, 2,
	-190, -437, 2, 362, 409, 325, 2, 2, 72, 73,
	148, 2, 148, 421, 2, -255, -333, -288, -289, -288,
	377, -170, -450, -227, -228, -127, 337, 2, 2, -450,
	-254, -277, -278, 218, 132, 247, -260, 26, 108, -260,
	-260, 48, 445, 445, 11, 12, 63, 37, 435, 436,
	437, 438, 143, 439, 440, 433, 434, 432, 425, 426,
	429, 202, 203, 78, 428, 427, 71, 224, 315, 133,
	134, 135, 136, 297, 173, 174, 175, 14, 15, 16,
	30, 256, 217, 422, 169, 340, 430, 17, 18, 19,
	194, 195, 241, 40, 170, -171, -207, -301, -301, -301,
	-301, -301, 262, 444, -252, -296, 442, -142, 444, 444,
	444, 5, 444, 5, -363, 8, -142, -301, -314, 445,
	-244, 444, -142, -314, -309, 444, 313, 442, 444, -317,
	-301, 446, -403, 416, -349, 444, 277, -348, 444, -348,
	-348, 410, -346, 444, 423, 417, 444, -346, 444, 444,
	145, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 410, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 448, -401, -224, 444, -248, -336,
	-301, 437, -248, -248, 251, -241, -301, 83, -264, 199,
	234, 149, 214, 308, 181, -363, -74, -298, 449, -325,
	423, -142, -330, -189, -142, -332, 444, -329, -325, 437,
	-190, 444, 148, 444, 446, 148, -231, -367, -174, -190,
	-200, -201, 107, -241, -372, -417, -231, -169, 34, -311,
	-343, -344, -357, -345, -354, -350, -353, 293, 294, 292,
	296, 295, 44, 50, 49, 371, 232, 327, 328, 343,
	329, 330, 42, 401, 172, 248, 250, 184, 4, 43,
	406, -356, 191, 183, 189, 185, 342, 186, 187, 188,
	41, 288, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 97, 373, 374, 375, 376, 200, 201, 407, 353,
	57, 58, -417, -231, 145, -366, -241, 34, -289, 2,
	-448, 448, 216, -209, 223, 238, 159, 252, 419, 245,
	-371, 5, 4, -310, -322, 101, 220, -353, 9, 436,
	-361, 8, 435, -365, -364, 85, 446, -367, -151, 298,
	-150, 23, 27, 112, 403, 124, -214, 178, 268, 119,
	346, -424, -426, 318, 369, 370, 74, 245, 298, 119,
	-257, -259, 34, 93, 236, 264, 51, 164, 227, 228,
	348, 411, 119, 298, 415, 119, -426, 298, -426, -153,
	346, -424, -426, 318, 298, -152, -214, 119, 449, -372,
	-238, 448, 448, -367, 437, 119, 119, 119, 119, 2,
	2, 239, 2, 2, 2, 150, -436, -434, 2, 2,
	2, -190, 166, -192, 166, 2, -195, 409, -226, 251,
	-419, -239, 362, -190, -161, -398, 415, 239, 239, 34,
	444, 2, -176, 166, 2, -166, -165, 176, -398, 239,
	-334, -203, -190, -203, 336, -183, 34, -298, 119, 2,
	2, 2, -165, -154, 448, 53, 304, 119, -154, 119,
	-154, 119, -154, 448, 119, -154, 119, 448, 119, 119,
	445, 448, -342, -372, -137, 415, 148, 82, 444, -373,
	-419, -174, 2, -190, 2, 362, 200, -372, -372, -366,
	26, 338, 2, 73, -190, -421, 145, -418, 309, -417,
	-190, -190, -190, -190, -190, 145, 2, 379, 2, 379,
	2, -165, 67, -165, 216, -190, 145, 362, 176, 362,
	-154, 448, -170, -450, -254, -366, -450, -278, -277, -280,
	-301, 26, -283, 139, 235, -301, -303, -141, -141, -141,
	-229, -327, -301, 279, 176, -358, -343, -343, -188, -367,
	373, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, 217, 169, 340, 40,
	170, -301, 377, -301, -301, -301, -301, 231, 239, 242,
	384, 130, 393, 108, 245, -454, 358, 36, -307, -142,
	-245, 444, -321, 31, 345, 26, -314, 444, 2, -296,
	-301, -297, -242, -241, -241, 445, 408, 26, 108, 437,
	2, 8, -271, -273, 420, 230, 98, 161, 229, -272,
	323, 445, 448, 34, 445, -301, -242, -313, -309, -241,
	-320, -319, 412, -367, 437, -404, 138, 155, 8, -363,
	-363, 373, 373, 8, -363, -363, 444, 445, 2, 445,
	2, 445, 2, 445, 2, 445, 2, -301, -301, -301,
	-301, -301, -301, -301, -241, -265, 2, -359, -241, 4,
	420, 230, 98, 161, 229, 323, -265, 2, -266, 2,
	-301, -241, -267, -302, -303, 435, 436, 430, -314, -268,
	2, -301, -242, -301, 47, 211, 378, -269, -301, 148,
	-241, -241, 2, -241, 2, -402, 34, -241, -234, 448,
	148, 34, 4, -234, -234, 444, 445, 448, 199, 199,
	-329, -264, 199, -262, 260, -262, -262, -415, 444, 443,
	-325, -175, 442, 450, -367, -324, -323, 34, -183, 258,
	-325, -325, 446, 445, -324, -190, 444, -241, -367, 351,
	445, 446, 194, 194, 194, 314, 445, -137, 377, 415,
	-74, 253, 445, 448, -233, 33, 442, -273, 444, -360,
	410, 444, 444, 148, -232, -428, 445, 380, -290, -208,
	287, 344, 299, 331, 360, 9, 8, 8, 448, -367,
	448, 377, -429, 76, 65, -292, 166, 65, -381, -177,
	76, -382, -165, 60, 392, 279, 147, -429, 76, -429,
	76, 76, 336, 349, 48, -333, 37, -89, 212, 148,
	421, 362, 377, -333, -259, -343, 93, 227, 228, 48,
	-362, -361, 436, -362, 48, -362, -362, -362, 415, -192,
	-333, 377, 269, -372, 377, 448, 37, -89, 212, 148,
	377, -205, -175, -339, -338, -198, -165, 446, -301, -89,
	-301, -89, 119, 2, -444, 207, 444, -224, 239, -258,
	-257, 239, -194, 2, -190, 148, -231, -340, 192, 448,
	-239, 269, 119, 119, 444, 116, 285, 2, 251, 239,
	-176, 166, -157, 365, 119, -295, -294, 413, -284, -89,
	444, 101, 34, -284, -249, -250, -337, -251, -177, 444,
	-183, -165, 2, -190, -240, -240, -240, -205, -206, -174,
	-372, -373, -373, -74, -341, 445, 445, -136, 255, -135,
	-165, 5, -139, 400, -211, -293, -292, -383, -384, -381,
	217, 176, 392, 193, 131, -137, -338, -137, -339, -339,
	-190, 145, -231, -231, 333, 145, 145, 446, -261, 285,
	95, 362, 268, 176, -190, -205, -190, -333, -450, -281,
	-361, 444, -282, 313, 314, 448, -149, 35, 106, 204,
	-190, 421, 117, -301, -301, 377, -454, 358, -307, 117,
	-301, 231, 242, 384, 130, 393, 108, 245, 148, 444,
	-302, -302, 445, -243, -301, -301, 443, 452, 445, -451,
	448, -227, -301, -241, -241, 445, 445, 377, 377, 377,
	377, 444, 446, -241, -231, 443, 443, 448, 445, -318,
	-319, 113, -301, 446, -409, 261, 444, 444, 445, 445,
	448, 445, 421, 421, 445, 445, 445, -301, 34, 448,
	448, 448, 445, 448, 448, 448, 445, 445, 148, 445,
	445, -274, 272, 445, 11, 12, 435, 436, 437, 438,
	143, 439, 440, 433, 434, 432, 425, 426, 427, 71,
	224, 315, 14, 15, 16, 194, 170, -302, -302, -302,
	445, -305, -306, 148, 145, 34, -269, -269, -269, 445,
	148, -241, 445, 445, 444, 445, -295, -336, -236, 2,
	-329, -185, -367, -295, -295, -241, -301, -329, -329, -263,
	400, 251, 199, -329, -323, 445, -416, -363, -325, -324,
	-363, -300, -299, 146, 35, 106, 237, -183, -224, -324,
	-324, -367, -325, 445, -237, -331, -397, -451, 446, -367,
	-128, 5, 242, -128, -128, 148, -231, 24, 273, -343,
	442, 443, 8, 8, 444, -363, -363, -231, 148, -364,
	-289, 390, 69, 287, 373, -364, -150, -190, -177, -184,
	-165, 239, -292, 166, -156, 239, -343, -184, 444, 444,
	204, 204, -177, -184, 166, -177, 166, -184, -184, -423,
	287, 246, -301, 219, 285, 240, -151, 298, -89, -89,
	444, -428, 400, 107, -190, -194, 298, -200, -362, -362,
	-257, 298, -192, -372, 415, -174, -152, -89, -89, 444,
	-175, -153, 298, -134, 165, 437, -165, 409, -165, -210,
	-211, -165, -438, 417, 415, 119, 119, -224, -204, -190,
	442, -137, -372, -190, -372, -372, -372, 2, 444, 2,
	-190, 119, 251, 239, -158, 114, -449, 427, -174, -228,
	-227, -301, -256, -287, 306, 251, -225, -178, -177, 405,
	-183, -256, -235, 448, 148, 427, 446, -225, 2, -154,
	-154, -154, -154, -154, -74, -137, 448, 444, 427, 427,
	444, -372, -372, 445, 448, -190, -176, 176, 176, -182,
	-166, -137, -42, 415, 362, 333, 333, -165, -186, -174,
	-190, -187, -205, -282, -301, -327, -190, 449, -301, -301,
	117, 117, -301, -302, -302, -301, 117, 148, 444, -301,
	-311, 30, 30, 445, 448, -297, -301, 445, 408, -451,
	-451, -451, 5, 230, 161, 229, -272, 229, -272, -272,
	8, 437, -367, 445, -309, 115, -301, 372, -367, 437,
	-410, -180, 444, -165, 413, -227, -363, -346, -346, 445,
	-358, -343, -301, -301, -301, -301, -301, -301, -305, -301,
	-358, -343, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, 108, 239, 245, -302, -306, -305, -301, -301, -343,
	445, 445, 445, -241, -74, -253, 155, -339, 448, -253,
	-253, 445, -263, 444, -301, -329, 443, 445, 448, -324,
	443, 448, 451, 427, -224, 446, -323, 445, 448, -286,
	34, 445, -367, -89, 254, 5, 8, 443, 445, -363,
	445, 445, -231, -301, 377, 377, 119, 239, 402, -385,
	-382, -301, -230, -328, -301, 444, 444, -148, 112, 336,
	-430, 2, 119, -154, 119, -154, 419, 444, 444, 377,
	-429, 76, -241, -301, -138, 101, -366, -426, 377, 377,
	269, -241, 377, -137, 148, 2, 2, 2, 445, 34,
	249, -165, -190, -192, 34, -339, -363, -161, 2, -276,
	400, -175, -190, 119, -159, 210, -449, -370, -398, -279,
	-277, -256, -248, 240, 75, 445, 448, 446, -295, -250,
	-236, -301, 2, 445, -135, -136, -372, -372, -372, -137,
	-139, -139, -293, 2, 444, -176, -166, 444, 255, -190,
	-261, -216, -215, 268, 245, 252, 445, -149, -175, -301,
	-301, 117, 30, 30, -301, -301, -311, 445, -301, -301,
	-241, 443, 5, -301, 445, 445, 445, 445, -301, 446,
	-411, -165, -301, 445, 445, 445, 445, 448, 448, 445,
	445, 445, 445, -306, 148, 108, 245, 444, 445, 445,
	-308, 158, 48, -329, -308, -308, -231, -298, -363, -299,
	-175, 442, -367, -331, 444, 446, 443, 445, -177, -184,
	-292, 119, -386, 76, -387, 63, 131, 82, 239, 242,
	392, 279, 60, 101, 291, 34, 445, 445, 448, -149,
	-230, -231, 239, 355, 101, 239, 101, 94, 387, -177,
	-184, -231, -231, -190, -177, -184, 445, 448, 427, -194,
	-192, -372, 445, -175, -373, -212, 179, -89, 2, 444,
	-224, -258, -89, 443, 444, -165, 251, 444, -175, -160,
	209, -449, -370, -157, -256, -285, 444, 251, -89, -178,
	2, -228, 427, 445, 445, 94, 94, -230, 444, 444,
	-231, -43, -44, 176, 76, 271, -187, 362, -149, -301,
	-301, -301, 445, -451, -367, 437, -405, 268, 445, -301,
	-301, -302, 148, 444, -311, -406, 414, -301, -241, -406,
	-406, 445, -325, -363, 2, -292, -184, -188, -181, -165,
	131, 166, 242, 204, 444, -302, -190, 444, 2, -440,
	103, 180, -291, -441, 81, 356, -328, 445, 445, 242,
	242, -301, -343, -154, -154, 445, 445, 377, 377, 377,
	-366, 80, -364, 377, -213, -214, 170, -439, 415, -210,
	-438, -230, -190, -230, 251, -449, -370, -158, 109, -231,
	76, -279, -307, -137, 444, 444, 445, -230, -230, 445,
	448, 26, 444, 26, 444, -190, 445, -228, 48, 445,
	445, -302, -311, 445, -407, -408, -180, -324, 443, -387,
	-181, 239, -301, -167, 444, -301, 180, 104, 162, -212,
	444, 291, -173, 63, 444, 444, -177, -184, 444, 427,
	148, 444, -438, 266, 94, 236, 445, 34, 445, -276,
	445, -190, -370, -159, 395, 240, 445, -184, -256, -373,
	-373, -291, 445, 445, -44, -231, -231, -412, 285, 314,
	157, -241, 445, 448, 34, 119, 445, -388, 225, -165,
	445, 104, 162, -213, -231, -190, -427, 400, -188, -218,
	-217, -215, -220, -219, -215, -241, -364, 80, 266, -241,
	-190, 94, -212, -89, -291, 444, -291, 444, -160, 336,
	-294, 445, 445, -212, -291, 445, 445, 445, -413, -414,
	40, 389, 85, -301, -413, -413, -408, -410, 131, -389,
	-392, -391, 251, 341, 149, 267, 445, 355, 411, -440,
	445, -224, -301, 445, 448, 405, 445, 448, 405, 445,
	148, 445, 444, -213, -439, -212, -230, -212, -230, -249,
	-137, -137, -213, -212, -414, 276, 144, 313, 276, 144,
	-181, -391, 251, -392, 251, 395, 105, -388, -217, 170,
	-219, 148, 266, -231, -438, -213, 445, -213, 445, -295,
	-213, 30, -390, 236, 304, 53, 336, -390, -389, 444,
	444, 445, -445, 413, -291, -445, -291, -414, 22, 242,
	101, -440, -241, -241, -155, 53, 304, 2, -212, -212,
	445, 445, -213, -213, -213, 377, -445, -445, 444, -241,
	445, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 337, 338,
	340, 341, 342, 344, 345, 347, 349, 351, 353, 354,
	356, 358, 359, 360, 361, 362, 364, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	414, 0, 839, 841, 843, 845, 27, 28, 0, 0,
	169, 171, 173, 0, 198, 200, 202, 203, 205, -2,
	0, 291, 292, 294, 296, -2, -2, 0, 0, 401,
	403, 0, 0, 423, 424, 0, 929, -2, 417, 419,
	421, 484, 486, 488, 490, 492, 494, 496, 497, 499,
	501, 503, 505, 507, 509, 511, 513, 515, 517, 519,
	521, 523, 525, 527, 529, -2, -2, -2, 0, -2,
	-2, -2, 857, 31, 33, 35, 37, 39, 41, 59,
	254, 255, 257, 259, 261, 264, 265, 267, 968, 298,
	300, 302, 304, 306, 0, -2, 982, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 944, 946, 948, 950, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 339, 343, 346,
	348, 350, 352, 355, 357, 363, 365, 367, 730, 1565,
	1579, 1580, 1581, 1584, 1585, 1586, 1587, 1588, 1589, 1912,
	1992, 1993, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675,
	1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
	1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
	1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
	1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
	1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 0,
	379, 377, 1559, 380, 1749, 382, 384, 285, 286, 287,
	288, 289, 290, 0, 152, 0, 394, 388, 393, 395,
	397, 398, 399, 400, 374, 372, 0, 394, 1611, 392,
	837, 838, 832, 833, 1782, 867, 413, -2, -2, -2,
	1881, -2, 445, -2, 452, 1884, 1784, 455, 0, 457,
	-2, 460, 840, 842, 844, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1645, 1536, 1581, 1539, 1534, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 199, 201,
	204, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	786, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	654, 0, 0, 659, 781, 782, 803, 0, 0, 0,
	0, 293, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 232,
	331, 332, 0, 969, 0, 0, 0, 150, 143, 0,
	0, 642, 402, 404, 0, 142, 0, 0, 836, 0,
	0, 418, 420, 422, 485, 487, 489, 491, 493, 495,
	498, 500, 502, 504, 506, 508, 510, 512, 514, 516,
	518, 520, 522, 524, 526, 528, 530, 531, 0, 0,
	0, 0, 0, 535, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 0, 534, 536, 537,
	538, 0, 583, 624, 625, 0, 772, 970, 869, 847,
	860, 869, 849, 850, 851, 852, 853, 858, 859, 862,
	0, 854, 855, 856, 32, 34, 36, 38, 40, 42,
	256, 258, 260, 262, 266, 268, -2, 942, 943, 299,
	301, 303, 305, 307, 405, 0, 407, 0, 535, 933,
	0, -2, 0, 974, 974, 974, 0, 0, 943, 941,
	0, 410, 411, 464, 465, 1199, 0, 0, 0, 0,
	0, 1434, 1283, 0, 466, -2, 1314, 1316, 1860, 1881,
	1433, 1318, 1319, 1320, 1321, 1322, 0, 0, 1325, 0,
	1327, 1328, 1329, 1330, 0, 1332, 0, 1336, 1337, 1338,
	0, 1865, 1513, 1577, -2, 1104, 1105, 1106, 1107, 1108,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1573, 0,
	1405, 1352, -2, 1598, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1654, -2, -2, -2,
	-2, -2, -2, -2, 1160, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1895, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 0, 1849, 1866, 1867, 1872, 1874,
	1868, 1857, 1375, -2, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1161,
	-2, 1861, 1862, 1877, 1878, 1883, 1888, 1889, 1864, 1873,
	-2, -2, 960, 1757, 963, 730, 961, 945, 947, 0,
	949, 0, 0, 0, 954, 977, 975, 0, 1013, 958,
	959, 969, 1030, 1053, 0, 1035, 0, 1053, 1075, 0,
	1040, 1777, 1353, 1354, 0, 1581, 1578, -2, 0, 0,
	0, 0, 0, 0, 195, 375, 0, 381, 383, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 415,
	416, 0, 440, 0, 444, 1856, -2, -2, 448, 870,
	874, 875, 876, 877, 0, 0, 0, 0, 0, 454,
	0, 0, 441, 442, 458, 461, 0, 50, 0, 1866,
	1075, 51, 0, 1549, 1603, 1604, 1605, 1606, 1607, 1895,
	1911, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	53, 0, 1866, 56, 0, 1866, 0, -2, 60, 0,
	1866, 153, 154, 1594, 1595, 1599, 1600, 1601, 1602, 63,
	0, 1555, 65, 0, 1552, 73, 0, 1866, 0, 1533,
	-2, 0, 0, 634, 1530, 1535, 635, 1540, 0, 176,
	177, 178, 179, 180, 1866, 182, 183, 0, 185, 186,
	1866, 188, 189, 0, 191, 207, 208, 0, 210, 0,
	1866, 0, 0, 0, 216, -2, 233, 0, 230, 0,
	220, 221, 223, 224, 225, 226, 227, 0, 0, 0,
	787, 272, 270, 1560, 0, -2, 1866, 775, 778, 1866,
	780, 792, 1563, 0, -2, 0, 967, 1866, 884, 655,
	656, 657, 658, 0, 284, 0, 897, 0, 899, 0,
	919, 1081, 1030, 234, 235, 236, 237, 238, 1866, 0,
	0, 0, 243, 0, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 135, 1866, 310, 329, 135, 1866, 313,
	135, 1866, 316, 135, 1866, 319, 1528, 135, 1866, 322,
	323, 1866, 325, 155, 326, 1866, 328, 0, -2, 368,
	1567, -2, 334, 0, -2, 0, 167, 0, 640, 641,
	0, 834, 835, 0, 425, 0, 0, 532, 533, 0,
	0, 543, 544, 545, 546, 1755, 1669, 549, 0, 552,
	573, 587, 0, 0, 0, 556, 558, 639, 560, 0,
	0, 562, 0, 564, 0, 566, 0, 568, 0, 570,
	572, 574, 588, 576, 0, 0, 0, 586, 0, 591,
	592, 0, 0, 597, 598, 599, 0, 601, 602, 603,
	604, 0, 606, 607, -2, -2, 611, 613, 0, 619,
	0, 623, 0, 539, 540, 135, 1079, 846, -2, 848,
	0, 864, 936, -2, 0, 406, 0, 409, 940, 934,
	939, 991, 992, 0, 0, 0, 0, 972, 973, 0,
	0, 0, 931, 932, 0, 0, 0, 0, 1439, 1440,
	1441, 1442, 1443, 1444, 1447, 1448, 1445, 1446, 1449, 1450,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1453, 1454,
	0, 0, 1456, 0, 1458, 0, 0, 0, 0, 0,
	0, 1262, 1264, 1521, 0, 0, 1455, 1204, 1205, 1206,
	1241, 1242, 0, 0, 1315, 1518, 1517, 1317, 0, 1470,
	0, 1324, 0, 1196, 1331, 1546, -2, 0, 1434, 1465,
	0, 0, 1339, 1340, 1341, 0, 0, 1470, 0, 0,
	1512, 0, 1407, 0, 1140, 0, 1141, 1142, 0, 1143,
	1144, 1157, 1170, 0, 0, 0, 0, 1174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 1493, -2,
	0, 0, 0, 0, 0, 962, 0, 0, 1017, 1522,
	1526, 1527, 1017, 1017, 0, 0, 1471, 0, 0, 0,
	0, 1072, 1072, 1072, 1070, 1047, 0, 1053, 0, 1063,
	0, 1053, 1053, 0, -2, 1035, 0, 0, 1063, 1076,
	1077, 0, 0, 0, 0, 0, 0, 1582, 0, 0,
	0, 1569, 0, 0, 167, 0, 386, 396, 969, 0,
	1473, 1095, 1091, 1098, 1099, 1100, 1101, 1147, 1148, 1149,
	1150, 1151, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, -2,
	1158, 1160, 1181, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1153, 0, 1128, 1128, 1128, 1145,
	1146, 1169, 1180, 1172, 1180, 1176, 1096, 1097, 1163, 1164,
	1165, 1166, 0, 390, 0, 0, 0, 0, -2, 450,
	0, 872, 0, 878, 475, 476, 477, 880, 881, 0,
	453, 478, 479, 480, 481, 482, 483, 0, 747, 0,
	749, 1542, 0, 451, 468, 456, 0, 462, 74, 829,
	103, 0, 829, 829, 0, 0, 122, 0, 0, 0,
	0, 0, 92, 99, 80, 81, 0, 0, 0, 0,
	57, 755, 0, 758, 0, 0, 0, 0, 0, 0,
	0, 770, 0, 0, 0, 0, 91, 0, 86, 76,
	0, 0, 94, 101, 0, 126, 128, 0, 0, 1066,
	633, 0, 0, 1582, 1538, 0, 0, 0, 0, 209,
	211, 0, 213, 214, 215, 0, 786, 0, 222, 219,
	263, 730, 1866, 754, 1866, 752, 1564, 0, 0, 0,
	282, 277, 0, 279, 773, 0, 966, 0, 0, 0,
	0, 793, 0, 1866, 798, 1551, 1590, 1591, 886, 0,
	1087, 0, 900, 0, 0, 1082, 0, 1084, 0, 240,
	241, 242, 0, 308, 0, 133, 134, 0, 311, 0,
	314, 0, 317, 0, 0, 320, 0, 0, 0, 0,
	969, 0, 0, 0, 145, 0, 0, 0, 0, 167,
	167, 1066, 427, 1066, 429, 0, 0, 547, 548, 550,
	551, 553, 554, 620, 555, 559, 0, 627, 1773, 637,
	561, 563, 565, 567, 569, 0, 578, 0, 580, 0,
	582, 594, 593, 595, 600, 605, 0, 0, 0, 0,
	771, 0, 863, 937, 939, 408, 935, 989, 990, 995,
	999, 1000, 1003, 1006, 1007, 997, 1199, 955, 956, 957,
	983, 984, 812, 0, 1992, 1200, 1092, 1201, 1202, 1548,
	0, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, -2, -2, -2, -2, -2, -2, -2, -2, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	-2, -2, -2, 1239, 1240, -2, 1457, 1459, 0, 1521,
	0, -2, 0, -2, -2, -2, -2, 1259, 0, 1261,
	1266, 1268, 1270, 0, 0, 0, 0, 1520, 1280, 1504,
	1505, 0, 0, 1436, 1437, 1438, 1265, 0, 1284, 1519,
	1516, 0, 0, 1469, 980, 1343, 0, 0, 0, 0,
	1350, 0, 1547, 1195, 1182, 1183, 1184, 1185, 1186, 1187,
	1197, 1335, 1467, 0, 1466, 0, 0, 0, 1477, 0,
	1511, 1507, 0, 1570, 1576, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1387, 0, 1480, -2,
	-2, -2, -2, -2, -2, -2, 0, 1389, 0, 1391,
	1471, 1490, 0, 0, 1285, 0, 0, 0, 1434, 0,
	1394, 1471, 1498, 0, 0, 0, 0, 0, 1471, 0,
	1503, 0, 1401, 0, 1403, 964, 0, 0, 1087, 0,
	0, 0, 1525, 1087, 1087, 0, 1012, 0, 0, 0,
	0, 0, 0, 1067, 1071, 1068, 1069, 0, 0, 1053,
	1063, 1027, 0, 0, 1550, 1033, 1062, 0, 730, 1052,
	1063, 1063, 0, -2, 1037, 0, 0, 980, -2, 168,
	729, 0, 0, 0, 0, 376, 378, 0, 0, 0,
	370, 0, 373, 0, 1088, 1090, 0, 1102, 0, 0,
	-2, 0, 0, 0, 0, 0, 443, 0, 871, 879,
	0, 472, 0, 474, 0, 748, 1544, 1543, 0, 463,
	0, 0, 0, 0, 828, 105, 1866, 0, 137, 0,
	0, 714, 1556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 756, 757, 759, 765, 767, 0,
	761, 1545, 0, 762, 0, 764, 766, 768, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 1532, 158, 1065, 1531, 1541, 0, 181, 184,
	187, 190, 0, 217, 0, 0, 662, 645, 0, 750,
	753, 0, 730, 785, 1562, 0, 271, 167, 0, 0,
	278, 0, 0, 0, 0, 0, 0, 791, 0, 0,
	0, 1866, 888, 894, 0, 982, 1086, 0, 917, 902,
	0, 0, 0, 917, 921, 922, 924, 925, 0, 0,
	1083, 0, 244, 330, 135, 135, 135, 1529, 135, 135,
	156, 324, 327, 333, 369, 969, 167, 165, 1736, 163,
	160, 162, 0, 0, 0, 663, 665, 666, 667, 668,
	0, 1591, 0, 1697, 1591, 140, 167, 276, 426, 431,
	541, 0, 638, 636, 577, 0, 0, 0, 590, 0,
	0, 0, 0, 0, 621, 622, 626, 1080, 938, 0,
	1001, 0, 998, 1004, 1005, 0, 986, 810, 811, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1281, 0,
	-2, 1260, 1263, 1267, 1269, 1271, 0, 0, 0, 0,
	0, 0, 1460, 0, 1462, 1282, 1514, 1517, 1432, 0,
	0, 979, 980, 980, 980, 1349, 0, 0, 0, 0,
	0, 0, 0, 1468, 0, 1475, 1476, 0, 1342, 0,
	1508, 0, 0, 0, 1351, 0, 0, 0, 1152, 1126,
	0, 1180, 1178, 1179, 1173, 1180, 1177, 0, 0, 0,
	0, 0, 1370, 0, 0, 0, 1374, 1386, 0, 1388,
	1390, 0, 0, 1392, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 1290,
	1393, 1496, 1497, 0, 0, 0, 0, 0, 0, 1399,
	0, 1502, 1400, 1402, 969, 1014, 1009, 1523, 1066, 1016,
	1018, 1524, 1553, 1009, 1009, 0, 1472, 1055, 0, 1057,
	0, 0, 0, 1059, 0, 1048, 0, 1050, 1063, 1032,
	0, 0, 1025, 0, 1022, 1023, 1024, 730, 1061, 1034,
	1038, 1570, 0, 1078, 0, 1042, 1045, 0, 0, 1583,
	192, 196, 197, 193, 194, 0, 385, 0, 0, 1474,
	0, 1093, 0, 0, 0, 0, 0, 389, 0, 439,
	-2, 470, 471, 473, 0, 469, 104, 816, 0, 0,
	1554, 0, 107, 1866, 116, 0, 691, 0, 0, 0,
	0, 0, 831, 0, 1866, 135, 1866, 135, 118, 121,
	0, 125, 123, 0, 0, 682, 75, 829, 78, 84,
	0, 0, 0, 90, 0, 822, 0, 760, 763, 769,
	58, 0, 824, 814, 0, 813, 127, 79, 85, 0,
	826, 77, 0, 167, 0, 1537, 0, 0, 0, 0,
	661, -2, 0, 0, 0, 0, 0, 0, 1066, 273,
	0, 275, 281, 280, 776, -2, 779, 788, 0, 790,
	802, 0, 0, 0, 890, 894, 0, 893, 967, 994,
	981, 1085, 895, 917, 0, 0, 0, 905, 907, 904,
	901, 898, 1087, 0, 0, 0, 0, 0, 239, 309,
	312, 315, 318, 321, 335, 144, 0, 0, 0, 0,
	0, 167, 0, 0, 0, 0, 0, 1591, 1591, 0,
	1558, 141, 428, 0, 0, 579, 581, 594, 614, 615,
	677, 0, 618, 0, 0, 985, 812, 0, 1203, 1244,
	0, 0, -2, 0, 0, 1248, 0, 0, 0, -2,
	0, 0, 0, 1461, 1463, 0, 1516, 1344, 0, 0,
	0, 0, 1326, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	0, 1333, 1334, 1435, 1478, 1506, 1510, 0, 1571, 1575,
	1413, 1414, 1418, 1561, 0, 0, 0, 1171, 1175, 1355,
	0, 0, 0, 0, 0, 0, 0, 1479, 1489, 1491,
	1286, 1287, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, -2, -2, -2, 1304, 1305, 1306, -2, -2,
	-2, 0, 0, 0, 1492, 1494, 1495, 1499, 1500, 0,
	1396, 1397, 1398, 1501, 0, 1011, 0, 1015, 0, 1011,
	1011, 976, 1056, 0, 1074, 1058, 1030, 1049, 0, 1039,
	1028, 0, 1029, 0, 1060, 0, 1036, 1041, 0, 1044,
	0, 1344, -2, 151, 387, 371, 0, 1094, 1103, 0,
	1155, 1159, 391, 1064, 0, 0, 0, 0, 136, 689,
	713, 0, 0, 805, 812, 0, 0, 109, 0, 0,
	0, 117, 0, 114, 0, 120, 124, 0, 0, 0,
	0, 0, 0, 87, 88, 89, 0, 93, 0, 0,
	0, 0, 0, 138, 0, 212, 784, 218, 671, 0,
	646, 0, 730, 754, 0, 269, 0, 774, 789, 0,
	0, 0, 0, 0, 892, 894, 0, 885, 886, 917,
	993, 896, 915, -2, 914, 0, 0, 0, 982, 923,
	920, 926, 927, 0, 164, 0, 159, 161, 0, 147,
	0, 0, 664, 669, 0, 0, 0, 0, 0, 542,
	589, 616, 676, 0, 0, 996, 1002, 987, 812, 1246,
	1250, 0, 0, 0, 1252, -2, 0, 1274, -2, -2,
	1464, 1515, 1323, 980, 1345, 1347, 1348, 1198, 1509, 0,
	1420, 1417, 0, 1404, 1127, 1365, 1366, 0, 0, 1369,
	1371, 1372, 1373, 1488, 0, 0, 0, 0, 1395, 965,
	1409, 0, 0, 1019, 1409, 1409, 0, 1053, 1051, 1026,
	1020, 0, 1571, 1043, 0, 0, 1089, 1154, 818, 820,
	106, 0, 690, 0, 693, 0, 0, 0, 0, 700,
	701, 0, 0, 0, 0, 0, 719, 728, 0, 807,
	0, 0, 0, 111, 130, 0, 0, 830, 0, 135,
	135, 0, 0, 817, 0, 0, 0, 0, 0, 823,
	825, 815, 0, 827, 157, 679, 0, 650, 647, 662,
	645, 751, 783, 274, 0, 801, 0, 0, 0, 882,
	894, 0, 887, 888, 283, 0, 0, 0, 903, 906,
	908, 994, 0, 166, 167, 0, 0, 0, 0, 0,
	0, 430, 432, 0, 0, 438, 675, 0, 988, 1254,
	-2, -2, 1275, 0, 1572, 1574, 982, 0, 1406, 0,
	0, -2, 0, 0, 0, 951, 0, 1010, 1008, 952,
	953, 1073, 1063, 0, 1046, 108, 0, 694, 695, 1557,
	697, 0, 699, 702, 0, 704, 1593, 0, 708, 715,
	720, 0, 671, 0, 725, 726, 806, 717, 0, 110,
	112, 129, 809, 113, 119, 0, 0, 0, 0, 0,
	0, 1639, 96, 0, 645, 678, 0, 648, 0, 0,
	0, 0, 802, 0, 0, 0, 889, 890, 0, 0,
	0, 917, 928, 146, 0, 0, 728, 0, 0, 712,
	0, 434, 0, 436, 0, 617, 1346, 1424, 0, 1367,
	1368, -2, 0, 1312, 1408, 1410, 0, 1031, 1021, 692,
	696, 0, 0, 734, 0, 0, 0, 723, 724, 679,
	0, 0, 132, 0, 0, 0, 819, 821, 0, 0,
	0, 0, 643, 0, 651, 0, 671, 0, 728, 0,
	728, 0, 891, 892, 0, 910, 911, 913, 918, 0,
	0, 671, 728, 711, 433, 0, 0, 0, 0, 0,
	0, 1419, 1313, 0, 0, 0, 703, 739, 0, 0,
	0, 721, 722, 719, 0, 730, 115, 0, 808, 0,
	683, 0, 0, 686, 0, 0, 97, 1639, 95, 0,
	0, 652, 679, 650, 671, 0, 671, 0, 883, 0,
	912, 167, 167, 679, 671, 435, 437, 1416, 1421, 1425,
	-2, 1830, 1642, 0, 1422, 1423, 1411, 1412, 0, 705,
	735, 736, 0, 731, 732, 733, 1592, 706, 707, 716,
	727, 734, 131, 680, 0, 0, 681, 0, 0, 100,
	0, 102, 0, 645, 649, 679, 0, 679, 0, 1087,
	148, 149, 709, 679, 0, 1427, 1428, 1429, 1430, 1431,
	698, 737, 0, 738, 0, 0, 0, 739, 684, 0,
	687, 0, 98, 0, 644, 799, 728, 799, 728, 909,
	710, 0, 740, 0, 743, 744, 0, 741, 719, 0,
	0, 674, 794, 0, 671, 796, 671, 1426, 742, 745,
	746, 718, 0, 0, 670, 672, 673, 800, 679, 679,
	679, 0, 799, 799, 685, 0, 795, 797, 0, 0,
	679, 688,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 433, 3, 439, 434, 3,
	444, 445, 437, 435, 448, 436, 446, 438, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 452, 3,
	425, 427, 426, 429, 449, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 442, 3, 443, 440, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 450, 432, 451, 430,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 428, 57768, 431, 57769, 441,
	57770, 447, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1036
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1041
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1051
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1057
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1157
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1162
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1228
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1232
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1237
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1248
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1254
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1271
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1279
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1286
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1301
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1314
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1318
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1329
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1337
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1346
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1368
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1372
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1408
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1429
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1453
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1494
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1633
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1663
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1704
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1713
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1719
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1724
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1729
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1733
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1752
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1760
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1830
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1941
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1949
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1954
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1980
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1993
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1995
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1996
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CREATE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2000
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "create cast")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2002
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2005
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2006
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2009
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2012
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "create operator")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplemented(sqllex, "create publication")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2015
		{
			return unimplemented(sqllex, "create rule")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2016
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "create server")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2023
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2024
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2028
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2031
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2032
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplemented(sqllex, "drop server")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2061
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2063
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2065
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2092
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2098
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2120
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2155
		{

			sqlVAL.union.val = nil
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2169
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2204
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "DROP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2208
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2337
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2385
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2389
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2392
		{
			return helpWith(sqllex, "DELETE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2394
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2395
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "INSERT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2436
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2462
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2469
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2499
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "GRANT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2572
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2581
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			return helpWith(sqllex, "RESET")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2611
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2626
		{
			return helpWith(sqllex, "RESET")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2634
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2648
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "USE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2656
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2658
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "USE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2695
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2698
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2716
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2725
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2753
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2805
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2836
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2839
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2843
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2862
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2869
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2875
		{
			return unimplemented(sqllex, "set from current")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2876
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2884
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2889
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2900
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2938
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2952
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2970
		{
			sqlVAL.union.val = tree.Low
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2974
		{
			sqlVAL.union.val = tree.Normal
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = tree.High
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3023
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.str = "client_encoding"
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3065
		{
			sqlVAL.str = "timezone"
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3066
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3080
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3085
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3101
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3125
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3133
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3154
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3170
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3185
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3198
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3214
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3220
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3226
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3238
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3244
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3261
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3275
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3287
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3290
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3297
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3301
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = true
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = false
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3322
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3355
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = true
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.union.val = false
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3380
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3392
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3397
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3402
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3414
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3419
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3424
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3437
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3451
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3455
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3459
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3463
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3470
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3478
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3499
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3507
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3515
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3523
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3652
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3656
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3699
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3704
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3724
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3728
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3749
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3752
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3788
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3801
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3815
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3816
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3817
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3821
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3833
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3846
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3848
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3862
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3863
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3864
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3865
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3866
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3868
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3869
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3874
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3890
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3899
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3903
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3912
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3919
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3924
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3929
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3935
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3942
		{
			sqlVAL.str = ""
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3949
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3955
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3962
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3985
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3995
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3999
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4005
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4016
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4031
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4037
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4041
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4049
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4057
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4061
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4087
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4091
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4103
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4113
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4117
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4121
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 709:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4160
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4177
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4189
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4200
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4210
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4222
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4223
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4224
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4225
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4226
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4227
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4244
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4248
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4286
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4315
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4321
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4351
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4357
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4361
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4386
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4391
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4395
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4402
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4406
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4410
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4411
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4414
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4416
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4418
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4423
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4424
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4426
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4436
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4439
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4454
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4458
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4462
		{
			sqlVAL.union.val = nil
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4479
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4484
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
		}
	case 783:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4493
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4501
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4502
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4505
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4506
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4512
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4514
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4516
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4518
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4520
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4522
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4538
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4552
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4567
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4581
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4595
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4598
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4599
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4603
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = false
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4624
		{
			sqlVAL.union.val = true
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4628
		{
			sqlVAL.union.val = false
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4647
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4658
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.str = ""
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = tree.Descending
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4671
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4688
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4694
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4700
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4706
		{
			table := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4716
		{
			table := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4726
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4728
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4732
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4738
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4746
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4752
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4770
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4785
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4807
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4818
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4824
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4843
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4863
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4866
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4870
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4875
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4876
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4877
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4885
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4895
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4896
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.str = ""
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4904
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.str = ""
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4942
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4955
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4957
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4961
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4966
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4970
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4980
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4986
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4992
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5026
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.str = ""
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.str = ""
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5054
		{
			sqlVAL.str = ""
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.str = ""
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5069
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5070
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5089
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5096
		{
			return helpWith(sqllex, "INSERT")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5114
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5118
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5127
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5172
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5189
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5190
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5192
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5198
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 918:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5235
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5240
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5264
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5336
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5340
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5361
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5362
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5367
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5402
		{
			return helpWith(sqllex, "SELECT")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5403
		{
			return helpWith(sqllex, "VALUES")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5404
		{
			return helpWith(sqllex, "TABLE")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5465
		{
			return helpWith(sqllex, "SELECT")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5487
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5509
		{
			return helpWith(sqllex, "TABLE")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5521
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5525
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5529
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5533
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5551
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5552
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5560
		{
			sqlVAL.union.val = nil
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5565
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5566
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5570
		{
			sqlVAL.union.val = true
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5574
		{
			sqlVAL.union.val = false
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = false
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = true
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5595
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5596
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5599
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5600
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5614
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5634
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5639
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5654
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5674
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5678
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5700
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5716
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5720
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5724
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5730
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5731
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5734
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5735
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5788
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5790
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5805
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5807
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5823
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5827
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5832
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5837
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5849
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5854
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5874
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5910
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5924
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5941
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5951
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5955
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5977
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5981
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5987
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5999
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6001
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = nil
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = true
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6024
		{
			sqlVAL.union.val = false
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6044
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6048
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6052
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6056
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6064
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6118
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6119
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6140
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6146
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6151
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6169
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6175
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6183
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6212
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6226
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6235
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6259
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6279
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6280
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6313
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6317
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6321
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6325
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6329
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6345
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6365
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = nil
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6415
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6419
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6423
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6427
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6431
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6463
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6517
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6538
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6544
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6566
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6579
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6593
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.union.val = true
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.union.val = false
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6616
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6621
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6628
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6629
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6639
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6655
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = true
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = false
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6666
		{
			sqlVAL.union.val = false
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6670
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = tree.Year
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.union.val = tree.Month
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = tree.Day
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6696
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = tree.Month
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = nil
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = tree.Second
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6742
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6777
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6786
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6791
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6819
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6867
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6975
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6987
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7030
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7096
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7118
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7312
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7317
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7326
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7344
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7353
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7392
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7403
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7404
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7428
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7449
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7523
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7547
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7559
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7567
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7582
		{
			return unimplemented(sqllex, "treat")
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7603
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7613
		{
			return unimplemented(sqllex, "within group")
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7614
		{
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7639
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.str = ""
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7740
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7753
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7785
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7827
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = tree.Any
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = tree.Some
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = tree.All
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = tree.Div
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7859
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = tree.LT
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = tree.GT
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = tree.LE
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = tree.GE
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = tree.NE
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = tree.Like
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8187
		{
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8188
		{
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8260
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8334
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8345
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8356
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8366
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8534
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8558
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.str = ""
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
