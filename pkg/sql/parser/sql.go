// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8445

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 898,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 733,
	-2, 0,
	-1, 60,
	102, 898,
	174, 898,
	373, 898,
	374, 898,
	-2, 0,
	-1, 74,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 861,
	-1, 110,
	198, 549,
	360, 549,
	-2, 0,
	-1, 115,
	4, 900,
	20, 900,
	21, 900,
	22, 900,
	23, 900,
	25, 900,
	30, 900,
	35, 900,
	36, 900,
	37, 900,
	38, 900,
	39, 900,
	40, 900,
	41, 900,
	42, 900,
	43, 900,
	44, 900,
	46, 900,
	47, 900,
	48, 900,
	49, 900,
	50, 900,
	51, 900,
	52, 900,
	55, 900,
	56, 900,
	57, 900,
	58, 900,
	60, 900,
	61, 900,
	65, 900,
	66, 900,
	67, 900,
	68, 900,
	69, 900,
	71, 900,
	72, 900,
	73, 900,
	74, 900,
	76, 900,
	78, 900,
	79, 900,
	82, 900,
	83, 900,
	91, 900,
	92, 900,
	93, 900,
	94, 900,
	95, 900,
	96, 900,
	97, 900,
	98, 900,
	100, 900,
	102, 900,
	104, 900,
	107, 900,
	108, 900,
	110, 900,
	111, 900,
	113, 900,
	115, 900,
	116, 900,
	117, 900,
	118, 900,
	119, 900,
	120, 900,
	121, 900,
	122, 900,
	123, 900,
	124, 900,
	132, 900,
	133, 900,
	134, 900,
	135, 900,
	136, 900,
	137, 900,
	139, 900,
	141, 900,
	145, 900,
	147, 900,
	148, 900,
	150, 900,
	152, 900,
	153, 900,
	154, 900,
	155, 900,
	156, 900,
	157, 900,
	158, 900,
	159, 900,
	160, 900,
	163, 900,
	164, 900,
	169, 900,
	170, 900,
	171, 900,
	174, 900,
	175, 900,
	176, 900,
	177, 900,
	178, 900,
	179, 900,
	180, 900,
	181, 900,
	183, 900,
	185, 900,
	188, 900,
	189, 900,
	190, 900,
	192, 900,
	193, 900,
	196, 900,
	197, 900,
	198, 900,
	200, 900,
	201, 900,
	203, 900,
	205, 900,
	206, 900,
	209, 900,
	210, 900,
	213, 900,
	215, 900,
	218, 900,
	219, 900,
	220, 900,
	221, 900,
	222, 900,
	224, 900,
	225, 900,
	226, 900,
	227, 900,
	232, 900,
	233, 900,
	234, 900,
	235, 900,
	236, 900,
	238, 900,
	239, 900,
	241, 900,
	242, 900,
	243, 900,
	246, 900,
	247, 900,
	249, 900,
	251, 900,
	252, 900,
	253, 900,
	254, 900,
	255, 900,
	256, 900,
	257, 900,
	258, 900,
	260, 900,
	261, 900,
	262, 900,
	263, 900,
	264, 900,
	266, 900,
	267, 900,
	268, 900,
	269, 900,
	270, 900,
	271, 900,
	272, 900,
	273, 900,
	274, 900,
	276, 900,
	277, 900,
	278, 900,
	279, 900,
	280, 900,
	282, 900,
	283, 900,
	284, 900,
	285, 900,
	286, 900,
	287, 900,
	288, 900,
	290, 900,
	292, 900,
	293, 900,
	294, 900,
	295, 900,
	296, 900,
	297, 900,
	299, 900,
	300, 900,
	301, 900,
	302, 900,
	303, 900,
	304, 900,
	305, 900,
	307, 900,
	308, 900,
	309, 900,
	310, 900,
	311, 900,
	312, 900,
	313, 900,
	314, 900,
	315, 900,
	317, 900,
	318, 900,
	319, 900,
	320, 900,
	322, 900,
	323, 900,
	324, 900,
	325, 900,
	327, 900,
	328, 900,
	329, 900,
	330, 900,
	331, 900,
	332, 900,
	333, 900,
	334, 900,
	335, 900,
	336, 900,
	337, 900,
	338, 900,
	340, 900,
	341, 900,
	343, 900,
	344, 900,
	345, 900,
	346, 900,
	347, 900,
	348, 900,
	349, 900,
	350, 900,
	351, 900,
	352, 900,
	354, 900,
	355, 900,
	356, 900,
	357, 900,
	360, 900,
	361, 900,
	362, 900,
	363, 900,
	365, 900,
	366, 900,
	368, 900,
	369, 900,
	372, 900,
	373, 900,
	374, 900,
	375, 900,
	377, 900,
	379, 900,
	380, 900,
	381, 900,
	382, 900,
	383, 900,
	384, 900,
	387, 900,
	388, 900,
	393, 900,
	394, 900,
	395, 900,
	396, 900,
	397, 900,
	398, 900,
	-2, 0,
	-1, 136,
	114, 871,
	127, 871,
	182, 871,
	208, 871,
	237, 871,
	245, 871,
	370, 871,
	-2, 864,
	-1, 141,
	1, 794,
	188, 794,
	266, 794,
	271, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 143,
	1, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 144,
	1, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 145,
	1, 798,
	424, 798,
	425, 798,
	-2, 0,
	-1, 171,
	4, 907,
	5, 907,
	6, 907,
	7, 907,
	8, 907,
	9, 907,
	20, 907,
	21, 907,
	22, 907,
	23, 907,
	25, 907,
	30, 907,
	31, 907,
	35, 907,
	36, 907,
	37, 907,
	38, 907,
	39, 907,
	40, 907,
	41, 907,
	42, 907,
	43, 907,
	44, 907,
	46, 907,
	47, 907,
	48, 907,
	49, 907,
	50, 907,
	51, 907,
	52, 907,
	53, 907,
	54, 907,
	55, 907,
	56, 907,
	57, 907,
	58, 907,
	60, 907,
	61, 907,
	63, 907,
	65, 907,
	66, 907,
	67, 907,
	68, 907,
	69, 907,
	71, 907,
	72, 907,
	73, 907,
	74, 907,
	76, 907,
	78, 907,
	79, 907,
	81, 907,
	82, 907,
	83, 907,
	84, 907,
	85, 907,
	86, 907,
	87, 907,
	88, 907,
	89, 907,
	90, 907,
	91, 907,
	92, 907,
	93, 907,
	94, 907,
	95, 907,
	96, 907,
	97, 907,
	98, 907,
	99, 907,
	100, 907,
	102, 907,
	104, 907,
	107, 907,
	108, 907,
	110, 907,
	111, 907,
	113, 907,
	115, 907,
	116, 907,
	117, 907,
	118, 907,
	119, 907,
	120, 907,
	121, 907,
	122, 907,
	123, 907,
	124, 907,
	125, 907,
	126, 907,
	132, 907,
	133, 907,
	134, 907,
	135, 907,
	136, 907,
	137, 907,
	139, 907,
	141, 907,
	144, 907,
	145, 907,
	147, 907,
	148, 907,
	150, 907,
	152, 907,
	153, 907,
	154, 907,
	155, 907,
	156, 907,
	157, 907,
	158, 907,
	159, 907,
	160, 907,
	161, 907,
	163, 907,
	164, 907,
	169, 907,
	170, 907,
	171, 907,
	173, 907,
	174, 907,
	175, 907,
	176, 907,
	177, 907,
	178, 907,
	179, 907,
	180, 907,
	181, 907,
	183, 907,
	185, 907,
	186, 907,
	187, 907,
	188, 907,
	189, 907,
	190, 907,
	191, 907,
	192, 907,
	193, 907,
	196, 907,
	197, 907,
	198, 907,
	200, 907,
	201, 907,
	203, 907,
	204, 907,
	205, 907,
	206, 907,
	207, 907,
	209, 907,
	210, 907,
	213, 907,
	215, 907,
	216, 907,
	217, 907,
	218, 907,
	219, 907,
	220, 907,
	221, 907,
	222, 907,
	223, 907,
	224, 907,
	225, 907,
	226, 907,
	227, 907,
	228, 907,
	230, 907,
	231, 907,
	232, 907,
	233, 907,
	234, 907,
	235, 907,
	236, 907,
	238, 907,
	239, 907,
	242, 907,
	243, 907,
	246, 907,
	247, 907,
	248, 907,
	249, 907,
	250, 907,
	251, 907,
	252, 907,
	253, 907,
	254, 907,
	255, 907,
	256, 907,
	257, 907,
	258, 907,
	260, 907,
	261, 907,
	262, 907,
	263, 907,
	264, 907,
	266, 907,
	267, 907,
	268, 907,
	269, 907,
	270, 907,
	271, 907,
	272, 907,
	273, 907,
	274, 907,
	276, 907,
	277, 907,
	278, 907,
	279, 907,
	280, 907,
	282, 907,
	283, 907,
	284, 907,
	285, 907,
	286, 907,
	287, 907,
	288, 907,
	290, 907,
	291, 907,
	292, 907,
	293, 907,
	294, 907,
	295, 907,
	296, 907,
	297, 907,
	299, 907,
	300, 907,
	301, 907,
	302, 907,
	303, 907,
	304, 907,
	305, 907,
	307, 907,
	308, 907,
	309, 907,
	310, 907,
	311, 907,
	312, 907,
	313, 907,
	314, 907,
	315, 907,
	316, 907,
	317, 907,
	318, 907,
	319, 907,
	320, 907,
	321, 907,
	322, 907,
	323, 907,
	324, 907,
	325, 907,
	327, 907,
	328, 907,
	329, 907,
	330, 907,
	331, 907,
	332, 907,
	333, 907,
	334, 907,
	335, 907,
	336, 907,
	337, 907,
	338, 907,
	340, 907,
	341, 907,
	343, 907,
	344, 907,
	345, 907,
	346, 907,
	347, 907,
	348, 907,
	349, 907,
	350, 907,
	351, 907,
	352, 907,
	354, 907,
	355, 907,
	356, 907,
	357, 907,
	360, 907,
	361, 907,
	362, 907,
	363, 907,
	364, 907,
	365, 907,
	366, 907,
	368, 907,
	369, 907,
	372, 907,
	373, 907,
	374, 907,
	375, 907,
	376, 907,
	377, 907,
	379, 907,
	380, 907,
	381, 907,
	382, 907,
	383, 907,
	384, 907,
	387, 907,
	388, 907,
	393, 907,
	394, 907,
	395, 907,
	396, 907,
	397, 907,
	398, 907,
	399, 907,
	407, 907,
	412, 907,
	413, 907,
	414, 907,
	421, 907,
	427, 907,
	-2, 0,
	-1, 174,
	1, 57,
	425, 57,
	-2, 898,
	-1, 207,
	423, 1485,
	426, 1485,
	-2, 592,
	-1, 208,
	423, 1487,
	426, 1487,
	-2, 593,
	-1, 209,
	423, 1486,
	426, 1486,
	-2, 594,
	-1, 210,
	426, 1427,
	-2, 595,
	-1, 621,
	143, 1602,
	358, 1602,
	404, 1602,
	423, 1602,
	-2, 0,
	-1, 622,
	143, 1525,
	358, 1525,
	404, 1525,
	423, 1525,
	-2, 0,
	-1, 624,
	143, 1676,
	358, 1676,
	404, 1676,
	423, 1676,
	-2, 0,
	-1, 626,
	143, 1705,
	358, 1705,
	404, 1705,
	423, 1705,
	-2, 0,
	-1, 633,
	143, 1607,
	358, 1607,
	404, 1607,
	423, 1607,
	-2, 421,
	-1, 668,
	1, 521,
	420, 521,
	422, 521,
	424, 521,
	425, 521,
	-2, 0,
	-1, 669,
	1, 591,
	140, 591,
	420, 591,
	422, 591,
	424, 591,
	425, 591,
	-2, 0,
	-1, 675,
	1, 535,
	420, 535,
	422, 535,
	424, 535,
	425, 535,
	-2, 0,
	-1, 677,
	1, 539,
	420, 539,
	422, 539,
	424, 539,
	425, 539,
	-2, 0,
	-1, 680,
	1, 550,
	420, 550,
	422, 550,
	424, 550,
	425, 550,
	-2, 0,
	-1, 681,
	1, 556,
	420, 556,
	422, 556,
	424, 556,
	425, 556,
	-2, 0,
	-1, 682,
	1, 559,
	420, 559,
	422, 559,
	424, 559,
	425, 559,
	-2, 0,
	-1, 686,
	1, 573,
	420, 573,
	422, 573,
	424, 573,
	425, 573,
	-2, 0,
	-1, 687,
	1, 575,
	420, 575,
	422, 575,
	424, 575,
	425, 575,
	-2, 0,
	-1, 715,
	127, 911,
	208, 911,
	237, 911,
	-2, 867,
	-1, 723,
	127, 910,
	208, 910,
	237, 910,
	-2, 865,
	-1, 750,
	421, 1780,
	-2, 1199,
	-1, 751,
	421, 1781,
	-2, 1200,
	-1, 780,
	421, 1479,
	-2, 1470,
	-1, 781,
	5, 1049,
	421, 1494,
	-2, 1485,
	-1, 782,
	421, 1495,
	-2, 1486,
	-1, 789,
	5, 1033,
	-2, 1515,
	-1, 790,
	5, 1034,
	-2, 1520,
	-1, 791,
	5, 1035,
	-2, 1519,
	-1, 792,
	5, 1036,
	-2, 1701,
	-1, 793,
	5, 1037,
	-2, 1609,
	-1, 794,
	5, 1038,
	-2, 1669,
	-1, 795,
	5, 1039,
	-2, 1671,
	-1, 796,
	5, 1040,
	-2, 1672,
	-1, 797,
	5, 1041,
	-2, 1673,
	-1, 798,
	5, 1042,
	-2, 1681,
	-1, 799,
	5, 1043,
	-2, 1713,
	-1, 800,
	5, 1044,
	-2, 1579,
	-1, 801,
	5, 1045,
	-2, 1514,
	-1, 802,
	5, 1046,
	-2, 1617,
	-1, 803,
	5, 1047,
	-2, 1618,
	-1, 804,
	5, 1048,
	-2, 1583,
	-1, 805,
	5, 1097,
	421, 1097,
	-2, 1747,
	-1, 825,
	5, 1070,
	-2, 1516,
	-1, 826,
	5, 1088,
	-2, 1544,
	-1, 828,
	5, 1062,
	-2, 1566,
	-1, 829,
	5, 1063,
	-2, 1567,
	-1, 830,
	5, 1054,
	-2, 1582,
	-1, 831,
	5, 1055,
	-2, 1584,
	-1, 832,
	5, 1056,
	-2, 1585,
	-1, 833,
	5, 1057,
	-2, 1586,
	-1, 834,
	5, 1021,
	-2, 1592,
	-1, 835,
	5, 1022,
	-2, 1593,
	-1, 836,
	5, 1085,
	-2, 1691,
	-1, 837,
	5, 1095,
	-2, 1703,
	-1, 838,
	5, 1060,
	-2, 1727,
	-1, 839,
	5, 1087,
	-2, 1728,
	-1, 840,
	5, 1069,
	-2, 1729,
	-1, 841,
	5, 1087,
	-2, 1730,
	-1, 842,
	5, 1087,
	-2, 1731,
	-1, 843,
	5, 1052,
	-2, 1734,
	-1, 844,
	5, 1052,
	-2, 1735,
	-1, 847,
	5, 1077,
	-2, 1739,
	-1, 849,
	5, 1053,
	-2, 1745,
	-1, 850,
	5, 1058,
	-2, 1746,
	-1, 852,
	5, 1052,
	-2, 1751,
	-1, 855,
	5, 1061,
	-2, 1756,
	-1, 856,
	5, 1059,
	-2, 1758,
	-1, 858,
	5, 1089,
	-2, 1760,
	-1, 859,
	5, 1091,
	-2, 1761,
	-1, 860,
	5, 1093,
	-2, 1762,
	-1, 863,
	5, 1084,
	-2, 1766,
	-1, 933,
	421, 1494,
	-2, 1485,
	-1, 948,
	282, 1467,
	414, 1467,
	-2, 1466,
	-1, 1098,
	256, 896,
	-2, 718,
	-1, 1107,
	240, 1489,
	-2, 0,
	-1, 1150,
	1, 288,
	420, 288,
	422, 288,
	424, 288,
	425, 288,
	-2, 870,
	-1, 1153,
	4, 1765,
	10, 1765,
	11, 1765,
	13, 1765,
	14, 1765,
	15, 1765,
	16, 1765,
	17, 1765,
	18, 1765,
	20, 1765,
	21, 1765,
	22, 1765,
	23, 1765,
	25, 1765,
	28, 1765,
	30, 1765,
	32, 1765,
	35, 1765,
	36, 1765,
	37, 1765,
	38, 1765,
	39, 1765,
	40, 1765,
	41, 1765,
	42, 1765,
	43, 1765,
	44, 1765,
	46, 1765,
	47, 1765,
	48, 1765,
	49, 1765,
	50, 1765,
	51, 1765,
	52, 1765,
	55, 1765,
	56, 1765,
	57, 1765,
	58, 1765,
	60, 1765,
	61, 1765,
	62, 1765,
	65, 1765,
	66, 1765,
	67, 1765,
	68, 1765,
	69, 1765,
	70, 1765,
	71, 1765,
	72, 1765,
	73, 1765,
	74, 1765,
	76, 1765,
	77, 1765,
	78, 1765,
	79, 1765,
	81, 1765,
	82, 1765,
	83, 1765,
	91, 1765,
	92, 1765,
	93, 1765,
	94, 1765,
	95, 1765,
	96, 1765,
	97, 1765,
	98, 1765,
	100, 1765,
	102, 1765,
	104, 1765,
	107, 1765,
	108, 1765,
	110, 1765,
	111, 1765,
	113, 1765,
	115, 1765,
	116, 1765,
	117, 1765,
	118, 1765,
	119, 1765,
	120, 1765,
	121, 1765,
	122, 1765,
	123, 1765,
	124, 1765,
	128, 1765,
	129, 1765,
	130, 1765,
	131, 1765,
	132, 1765,
	133, 1765,
	134, 1765,
	135, 1765,
	136, 1765,
	137, 1765,
	138, 1765,
	139, 1765,
	141, 1765,
	144, 1765,
	145, 1765,
	147, 1765,
	148, 1765,
	150, 1765,
	152, 1765,
	153, 1765,
	154, 1765,
	155, 1765,
	156, 1765,
	157, 1765,
	158, 1765,
	159, 1765,
	160, 1765,
	161, 1765,
	162, 1765,
	163, 1765,
	164, 1765,
	165, 1765,
	166, 1765,
	167, 1765,
	169, 1765,
	170, 1765,
	171, 1765,
	173, 1765,
	174, 1765,
	175, 1765,
	176, 1765,
	177, 1765,
	178, 1765,
	179, 1765,
	180, 1765,
	181, 1765,
	183, 1765,
	185, 1765,
	186, 1765,
	187, 1765,
	188, 1765,
	189, 1765,
	190, 1765,
	191, 1765,
	192, 1765,
	193, 1765,
	194, 1765,
	195, 1765,
	196, 1765,
	197, 1765,
	198, 1765,
	200, 1765,
	201, 1765,
	203, 1765,
	204, 1765,
	205, 1765,
	206, 1765,
	207, 1765,
	209, 1765,
	210, 1765,
	213, 1765,
	214, 1765,
	215, 1765,
	218, 1765,
	219, 1765,
	220, 1765,
	221, 1765,
	222, 1765,
	223, 1765,
	224, 1765,
	225, 1765,
	226, 1765,
	227, 1765,
	230, 1765,
	232, 1765,
	233, 1765,
	234, 1765,
	235, 1765,
	236, 1765,
	238, 1765,
	239, 1765,
	242, 1765,
	243, 1765,
	244, 1765,
	246, 1765,
	247, 1765,
	249, 1765,
	251, 1765,
	252, 1765,
	253, 1765,
	254, 1765,
	255, 1765,
	256, 1765,
	257, 1765,
	258, 1765,
	260, 1765,
	261, 1765,
	262, 1765,
	263, 1765,
	264, 1765,
	266, 1765,
	267, 1765,
	268, 1765,
	269, 1765,
	270, 1765,
	271, 1765,
	272, 1765,
	273, 1765,
	274, 1765,
	276, 1765,
	277, 1765,
	278, 1765,
	279, 1765,
	280, 1765,
	281, 1765,
	282, 1765,
	283, 1765,
	284, 1765,
	285, 1765,
	286, 1765,
	287, 1765,
	288, 1765,
	290, 1765,
	291, 1765,
	292, 1765,
	293, 1765,
	294, 1765,
	295, 1765,
	296, 1765,
	297, 1765,
	298, 1765,
	299, 1765,
	300, 1765,
	301, 1765,
	302, 1765,
	303, 1765,
	304, 1765,
	305, 1765,
	307, 1765,
	308, 1765,
	309, 1765,
	310, 1765,
	311, 1765,
	312, 1765,
	313, 1765,
	314, 1765,
	315, 1765,
	317, 1765,
	318, 1765,
	319, 1765,
	320, 1765,
	321, 1765,
	322, 1765,
	323, 1765,
	324, 1765,
	325, 1765,
	327, 1765,
	328, 1765,
	329, 1765,
	330, 1765,
	331, 1765,
	332, 1765,
	333, 1765,
	334, 1765,
	335, 1765,
	336, 1765,
	337, 1765,
	338, 1765,
	340, 1765,
	341, 1765,
	343, 1765,
	344, 1765,
	345, 1765,
	346, 1765,
	347, 1765,
	348, 1765,
	349, 1765,
	350, 1765,
	351, 1765,
	352, 1765,
	354, 1765,
	355, 1765,
	356, 1765,
	357, 1765,
	360, 1765,
	361, 1765,
	362, 1765,
	363, 1765,
	365, 1765,
	366, 1765,
	368, 1765,
	369, 1765,
	372, 1765,
	373, 1765,
	374, 1765,
	375, 1765,
	377, 1765,
	379, 1765,
	380, 1765,
	381, 1765,
	382, 1765,
	383, 1765,
	384, 1765,
	387, 1765,
	388, 1765,
	393, 1765,
	394, 1765,
	395, 1765,
	396, 1765,
	397, 1765,
	398, 1765,
	399, 1765,
	400, 1765,
	402, 1765,
	403, 1765,
	404, 1765,
	405, 1765,
	406, 1765,
	407, 1765,
	409, 1765,
	410, 1765,
	411, 1765,
	412, 1765,
	413, 1765,
	414, 1765,
	415, 1765,
	416, 1765,
	417, 1765,
	419, 1765,
	422, 1765,
	423, 1765,
	426, 1765,
	427, 1765,
	-2, 0,
	-1, 1172,
	143, 1676,
	358, 1676,
	404, 1676,
	423, 1676,
	-2, 0,
	-1, 1201,
	143, 1705,
	358, 1705,
	404, 1705,
	423, 1705,
	-2, 0,
	-1, 1202,
	188, 806,
	266, 806,
	271, 806,
	-2, 408,
	-1, 1281,
	127, 910,
	208, 910,
	237, 910,
	-2, 868,
	-1, 1365,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 1242,
	-1, 1415,
	422, 1362,
	-2, 0,
	-1, 1423,
	188, 806,
	266, 806,
	271, 806,
	-2, 801,
	-1, 1457,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 980,
	-1, 1664,
	188, 806,
	266, 806,
	271, 806,
	-2, 410,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1132,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1133,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1134,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1135,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1136,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1137,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1138,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1139,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1151,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1152,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1153,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1158,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1162,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1170,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1171,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1172,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1173,
	-1, 1890,
	5, 1049,
	143, 1373,
	421, 1494,
	-2, 1485,
	-1, 1891,
	143, 1374,
	-2, 1723,
	-1, 1892,
	143, 1375,
	-2, 1606,
	-1, 1893,
	143, 1376,
	-2, 1545,
	-1, 1894,
	143, 1377,
	-2, 1574,
	-1, 1895,
	143, 1378,
	-2, 1605,
	-1, 1896,
	143, 1379,
	-2, 1668,
	-1, 1970,
	1, 981,
	81, 981,
	114, 981,
	127, 981,
	144, 981,
	149, 981,
	151, 981,
	173, 981,
	182, 981,
	191, 981,
	204, 981,
	208, 981,
	223, 981,
	237, 981,
	240, 981,
	245, 981,
	289, 981,
	291, 981,
	370, 981,
	378, 981,
	390, 981,
	391, 981,
	401, 981,
	420, 981,
	422, 981,
	424, 981,
	425, 981,
	426, 981,
	-2, 980,
	-1, 1975,
	421, 1471,
	-2, 1483,
	-1, 2057,
	422, 1432,
	426, 1432,
	-2, 1459,
	-1, 2184,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1160,
	-1, 2185,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1164,
	-1, 2191,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1166,
	-1, 2422,
	256, 896,
	-2, 718,
	-1, 2489,
	188, 806,
	266, 806,
	271, 806,
	-2, 407,
	-1, 2507,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1168,
	-1, 2514,
	186, 0,
	187, 0,
	230, 0,
	-2, 1187,
	-1, 2575,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1217,
	-1, 2576,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1218,
	-1, 2577,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1219,
	-1, 2581,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1223,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1224,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1225,
	-1, 2625,
	421, 1472,
	-2, 1484,
	-1, 2740,
	186, 0,
	187, 0,
	230, 0,
	-2, 1188,
	-1, 2743,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1191,
	-1, 2744,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1193,
	-1, 2890,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1192,
	-1, 2891,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1194,
	-1, 2901,
	186, 0,
	-2, 1226,
	-1, 2989,
	186, 0,
	-2, 1227,
	-1, 3085,
	38, 0,
	161, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1726,
}

const sqlPrivate = 57344

const sqlLast = 58531

var sqlAct = [...]int{

	782, 3084, 1930, 3093, 2841, 2671, 2929, 3147, 2084, 3061,
	3060, 3048, 3063, 3094, 2880, 3095, 779, 2113, 2918, 2545,
	3083, 2092, 2993, 1082, 2856, 1761, 2796, 2683, 2688, 1056,
	2177, 2811, 1594, 1821, 2221, 1962, 1140, 2429, 2437, 2059,
	724, 209, 2693, 2431, 2462, 1595, 496, 2635, 2460, 952,
	2442, 2081, 2055, 496, 1284, 1104, 2905, 1450, 2286, 2634,
	496, 1370, 2328, 496, 496, 2339, 496, 209, 1136, 496,
	496, 1452, 2219, 1958, 2304, 968, 496, 1528, 2093, 2774,
	589, 1431, 1542, 1543, 496, 1548, 1539, 962, 1489, 1987,
	1551, 2315, 2598, 1963, 2058, 2285, 491, 546, 2994, 1564,
	1861, 758, 2040, 1373, 1833, 2173, 1423, 542, 1752, 1747,
	2441, 1505, 945, 1978, 1460, 1511, 1965, 1540, 732, 130,
	2404, 765, 1468, 73, 1927, 1470, 1432, 1818, 1843, 2015,
	2842, 1204, 2041, 1401, 1855, 1689, 1403, 581, 2056, 918,
	954, 1151, 1123, 1133, 210, 2086, 211, 921, 2062, 1834,
	1441, 1886, 1950, 1935, 771, 631, 1360, 900, 1285, 2014,
	1688, 205, 1283, 1149, 625, 2346, 496, 496, 773, 611,
	136, 1558, 723, 584, 1120, 1060, 539, 137, 1481, 130,
	923, 898, 596, 493, 660, 1422, 1289, 2206, 2614, 492,
	929, 2615, 728, 1566, 1566, 2085, 926, 1566, 496, 496,
	496, 957, 496, 496, 971, 971, 604, 2114, 3174, 778,
	1451, 3168, 1944, 496, 496, 1944, 2042, 3167, 3144, 3141,
	2502, 1944, 2810, 1520, 476, 3119, 728, 1514, 598, 2810,
	479, 2448, 3113, 3112, 3109, 3106, 1944, 1944, 3110, 3107,
	1944, 1578, 3103, 1300, 1301, 3081, 1520, 3080, 3079, 1520,
	476, 1520, 1578, 3078, 3043, 3030, 479, 1578, 2126, 1520,
	3023, 3021, 729, 3019, 2810, 2810, 1143, 2810, 1303, 2991,
	2974, 965, 2042, 2126, 2709, 2964, 738, 2959, 3044, 2810,
	2957, 1520, 901, 901, 2810, 2947, 2946, 2479, 915, 1520,
	1520, 1063, 2977, 130, 2939, 1302, 948, 2601, 1520, 2938,
	2911, 716, 2892, 2810, 1520, 2836, 2126, 2116, 715, 1944,
	2832, 543, 2809, 2742, 1944, 2707, 2810, 2126, 2699, 2700,
	2449, 2620, 2700, 2610, 733, 2621, 2604, 2611, 930, 2523,
	1944, 2518, 1858, 1520, 574, 1944, 545, 938, 942, 947,
	2469, 1520, 2301, 2253, 2409, 40, 1944, 1944, 902, 2417,
	2252, 2246, 2245, 1175, 1944, 2247, 1944, 1062, 2212, 1061,
	44, 2144, 2125, 2112, 2213, 1944, 2126, 1583, 1081, 1937,
	2109, 1308, 2051, 1944, 1944, 1578, 1520, 1943, 1582, 1300,
	1301, 1944, 1583, 928, 1520, 904, 1187, 905, 171, 573,
	1859, 2601, 2258, 2259, 1936, 1667, 476, 2709, 1330, 1331,
	1332, 2030, 479, 1976, 1303, 2409, 2176, 2220, 2155, 1519,
	1427, 1838, 1059, 174, 171, 1171, 2450, 575, 1170, 3100,
	1169, 1176, 1168, 1167, 173, 59, 577, 1166, 1567, 1567,
	60, 1302, 1567, 1300, 1301, 2451, 1333, 1334, 1335, 1343,
	1344, 1345, 1165, 1164, 1163, 1162, 1161, 1323, 1686, 1160,
	173, 1336, 2273, 1159, 1860, 1857, 1158, 1157, 1303, 1156,
	1155, 1349, 780, 906, 63, 172, 903, 950, 722, 721,
	720, 719, 718, 714, 165, 713, 712, 711, 710, 709,
	708, 707, 166, 2258, 2259, 1302, 706, 705, 704, 700,
	699, 172, 698, 1322, 658, 657, 656, 655, 654, 653,
	1319, 652, 651, 138, 650, 496, 496, 1308, 496, 957,
	957, 496, 649, 648, 496, 647, 646, 496, 645, 644,
	2264, 643, 642, 496, 1080, 641, 640, 639, 638, 138,
	637, 1324, 2789, 496, 496, 496, 496, 496, 957, 957,
	636, 1862, 635, 620, 619, 957, 618, 617, 616, 615,
	530, 1325, 1326, 1327, 1328, 529, 502, 501, 500, 482,
	481, 1308, 480, 2258, 2259, 1371, 64, 1574, 1565, 1969,
	1176, 1731, 195, 194, 193, 1144, 192, 496, 191, 496,
	190, 189, 188, 2636, 1340, 1350, 187, 574, 1330, 1331,
	1332, 496, 186, 185, 139, 66, 2274, 67, 40, 184,
	183, 1109, 182, 2448, 1097, 181, 1300, 1301, 180, 1346,
	1347, 2264, 179, 44, 496, 171, 178, 1317, 1318, 177,
	1094, 176, 175, 2747, 1137, 496, 576, 2258, 2259, 110,
	1338, 1303, 1520, 1856, 2701, 2618, 932, 1323, 2342, 2218,
	2208, 2165, 573, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 173, 1936, 1348, 2052, 2045, 1876, 2131, 1302, 1173,
	2122, 1692, 1122, 1591, 1467, 957, 1453, 1337, 729, 1176,
	575, 40, 171, 1874, 1377, 1872, 1127, 1130, 59, 577,
	2275, 1218, 1870, 60, 1868, 1152, 44, 2274, 1296, 2864,
	1084, 2264, 172, 1065, 3082, 3065, 2984, 2960, 2878, 1069,
	2089, 165, 496, 2928, 1329, 2874, 2773, 2772, 173, 166,
	2980, 2766, 2759, 2978, 2758, 2123, 2757, 63, 2753, 2752,
	2751, 1324, 2750, 2721, 2719, 574, 1590, 2624, 2595, 2594,
	544, 1829, 2593, 1202, 1308, 2531, 40, 2408, 2337, 731,
	2297, 2412, 2284, 2124, 1341, 2257, 2254, 2251, 2250, 172,
	1281, 44, 577, 2248, 2226, 2264, 1282, 2225, 165, 1368,
	2207, 1330, 1331, 1332, 2117, 1212, 166, 2274, 1970, 1216,
	1296, 2275, 1374, 1381, 1363, 1098, 1101, 914, 1295, 3172,
	573, 1304, 1305, 1306, 1307, 1309, 1310, 138, 3155, 1199,
	63, 2269, 2267, 2268, 2260, 2261, 2262, 2263, 2265, 2266,
	1525, 3154, 1083, 2473, 2547, 2258, 2259, 1523, 575, 3073,
	1323, 3068, 3025, 3016, 3015, 3011, 59, 577, 3010, 64,
	3005, 60, 1339, 3002, 2976, 1314, 1315, 1321, 1320, 1316,
	1342, 2274, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 1280, 1075, 2975, 2996, 2762, 1219, 139, 66, 2761,
	67, 2275, 1823, 1687, 2016, 63, 1830, 2924, 2903, 2850,
	2846, 2844, 2172, 2831, 2788, 2771, 2710, 2686, 171, 2678,
	2863, 2677, 2675, 2652, 2651, 2641, 2495, 2640, 2606, 576,
	729, 2513, 110, 2267, 2268, 2260, 2261, 2262, 2263, 2265,
	2266, 2475, 64, 2467, 1324, 496, 2393, 2377, 2356, 2355,
	496, 2300, 2235, 716, 173, 2234, 2231, 171, 1364, 2200,
	715, 1404, 1409, 1292, 1293, 2275, 1438, 2258, 2259, 1297,
	139, 66, 2133, 67, 1973, 1429, 496, 1955, 1942, 1866,
	1534, 1226, 1466, 2264, 1430, 1300, 1301, 929, 1421, 929,
	1420, 171, 1415, 173, 1414, 172, 774, 1413, 1411, 1410,
	1300, 1301, 576, 1407, 165, 110, 1406, 64, 1397, 1396,
	1303, 865, 166, 1395, 2268, 2260, 2261, 2262, 2263, 2265,
	2266, 1394, 1393, 1399, 2877, 1303, 1402, 173, 1392, 1448,
	2321, 1405, 1391, 138, 172, 139, 66, 1302, 67, 1412,
	1435, 1436, 1390, 165, 2356, 1461, 1389, 1388, 1074, 1387,
	1386, 166, 1302, 171, 1592, 1385, 171, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 2161, 1378, 901, 576, 172, 1363,
	110, 1198, 2088, 1182, 1177, 1449, 1154, 165, 1148, 2260,
	2261, 2262, 2263, 2265, 2266, 166, 130, 2128, 2745, 173,
	2718, 2613, 173, 171, 2609, 2264, 729, 2211, 1956, 2258,
	2259, 1374, 2471, 1361, 1462, 2432, 138, 2869, 1858, 957,
	496, 2712, 2711, 1488, 1426, 2143, 971, 1215, 2616, 1476,
	1458, 1424, 1193, 2042, 1482, 930, 1875, 930, 1308, 173,
	172, 1428, 1418, 172, 496, 971, 496, 496, 1419, 165,
	1453, 2953, 165, 1873, 209, 1871, 1512, 166, 2650, 1686,
	166, 1455, 1869, 1686, 1867, 1278, 1392, 2981, 496, 496,
	2979, 2142, 1535, 1392, 2397, 496, 1859, 496, 138, 496,
	172, 138, 2927, 496, 1686, 1416, 2392, 2388, 1547, 165,
	928, 1417, 928, 2376, 2292, 896, 2291, 166, 2290, 2289,
	2182, 1660, 1211, 2018, 1507, 1673, 171, 1383, 2114, 1544,
	2481, 1581, 2387, 772, 1501, 957, 1961, 2906, 138, 2085,
	2549, 2216, 1844, 1400, 3111, 3108, 2444, 2630, 1271, 897,
	3101, 3057, 1223, 496, 957, 209, 496, 496, 957, 2684,
	1860, 1857, 173, 2119, 957, 538, 519, 209, 496, 1380,
	509, 496, 496, 1555, 1553, 200, 913, 496, 536, 3029,
	3134, 1662, 2823, 1269, 1062, 1989, 1061, 2145, 1531, 2262,
	2263, 2265, 2266, 890, 1677, 1676, 2472, 1686, 1683, 971,
	1650, 3135, 3102, 172, 2491, 1257, 1256, 1569, 957, 957,
	1571, 496, 165, 1573, 727, 1518, 496, 1576, 3171, 1562,
	166, 209, 496, 476, 496, 892, 496, 1270, 496, 479,
	496, 888, 886, 1587, 1122, 1538, 2840, 1483, 520, 2952,
	496, 138, 496, 2951, 2949, 1652, 883, 1862, 1716, 537,
	496, 496, 496, 535, 508, 2948, 1980, 476, 1654, 2665,
	748, 2660, 1213, 479, 1480, 2659, 2627, 2655, 1992, 1557,
	1560, 2197, 2626, 2230, 2229, 1152, 2228, 2227, 1922, 496,
	1674, 1471, 726, 971, 1472, 2186, 1484, 1485, 1664, 1680,
	1221, 2195, 2115, 2035, 2029, 1921, 2025, 2006, 1584, 2260,
	2261, 2262, 2263, 2265, 2266, 1517, 1723, 1805, 1214, 1425,
	1058, 1920, 1919, 1763, 742, 2082, 1586, 1199, 1980, 702,
	1734, 1685, 1310, 3028, 1189, 1728, 1753, 1760, 1651, 1979,
	1588, 2983, 1661, 2494, 1306, 1307, 1309, 1310, 476, 1856,
	969, 1057, 1086, 2039, 479, 728, 1729, 1835, 1097, 1694,
	476, 1462, 1368, 2670, 2050, 1690, 479, 1835, 971, 1730,
	1678, 1848, 1820, 932, 1725, 932, 1698, 1473, 1255, 1999,
	2931, 610, 3076, 1620, 196, 1998, 1827, 538, 609, 1475,
	1884, 1825, 1707, 1820, 2258, 2259, 2192, 1561, 2819, 1889,
	1889, 1991, 533, 1900, 1902, 610, 1907, 2193, 1835, 1701,
	1681, 2198, 3040, 2541, 476, 2129, 496, 1299, 496, 2643,
	479, 3097, 1197, 1934, 1252, 1190, 1862, 3126, 1268, 2439,
	1585, 1844, 3157, 1733, 1589, 1732, 1192, 534, 1478, 1477,
	3041, 1566, 971, 496, 1751, 2384, 2266, 522, 521, 929,
	716, 2379, 496, 716, 716, 496, 1885, 1743, 971, 1974,
	1744, 1745, 496, 1909, 1231, 2396, 929, 1500, 1841, 1503,
	496, 537, 1253, 2538, 2022, 201, 2148, 729, 496, 1486,
	725, 532, 3134, 729, 1696, 1697, 2440, 1971, 2150, 3007,
	496, 1277, 2492, 957, 1687, 2016, 1478, 1398, 1687, 2016,
	1862, 1981, 1802, 1508, 496, 971, 1831, 1990, 2661, 1727,
	496, 496, 1957, 3125, 1839, 2490, 1967, 1968, 2151, 1687,
	2016, 2073, 2264, 2368, 1478, 496, 2009, 2817, 496, 503,
	2149, 3098, 2174, 2175, 901, 2439, 2026, 2539, 1222, 1533,
	2194, 531, 1837, 483, 2886, 2897, 2955, 1947, 2196, 1897,
	202, 2374, 496, 1358, 496, 1918, 496, 2233, 2367, 496,
	2653, 496, 884, 496, 1951, 496, 496, 2008, 496, 957,
	957, 957, 2036, 729, 957, 1932, 1993, 1995, 2037, 1940,
	1941, 496, 506, 496, 1948, 1931, 948, 930, 1952, 1953,
	201, 894, 1471, 506, 893, 1472, 1966, 1458, 2274, 3099,
	884, 885, 2023, 2370, 930, 2069, 2107, 2108, 1471, 2001,
	1984, 1472, 1687, 1684, 1265, 884, 1715, 2007, 728, 2008,
	513, 528, 1977, 2372, 1862, 1800, 1803, 1665, 2644, 2024,
	1085, 513, 536, 2103, 1504, 2818, 3124, 204, 2932, 2723,
	2713, 1478, 928, 523, 496, 2017, 2019, 2020, 2021, 1208,
	1474, 203, 1816, 1188, 1062, 2105, 2043, 2882, 2134, 928,
	2730, 2118, 1220, 2371, 690, 202, 1288, 3158, 1510, 703,
	2098, 1799, 1814, 3096, 1191, 3133, 1567, 2188, 1473, 3131,
	2110, 2121, 2275, 971, 737, 496, 1509, 2483, 1826, 199,
	1475, 130, 1266, 476, 1473, 496, 2091, 496, 1819, 479,
	2855, 2100, 130, 2101, 2887, 2102, 1475, 535, 1239, 2104,
	2853, 2079, 512, 1506, 1152, 2111, 2077, 1537, 496, 496,
	496, 2120, 496, 512, 197, 2130, 1700, 1209, 1440, 1232,
	484, 485, 1210, 1298, 1437, 1484, 1485, 3150, 1196, 1186,
	1477, 496, 2132, 1174, 924, 499, 1203, 2138, 2584, 2139,
	2881, 2401, 204, 691, 2769, 1516, 1477, 1267, 200, 2027,
	1358, 1405, 2486, 1412, 2405, 3163, 203, 1810, 198, 1739,
	1402, 2941, 2159, 2135, 2160, 1811, 2940, 1233, 1812, 1287,
	1230, 2137, 1817, 690, 2922, 1801, 2999, 2167, 2146, 2629,
	490, 1444, 2352, 2269, 2267, 2268, 2260, 2261, 2262, 2263,
	2265, 2266, 2348, 737, 199, 2822, 2080, 1444, 487, 486,
	2537, 2162, 2821, 1208, 3049, 2164, 2203, 2078, 1556, 509,
	1447, 1546, 130, 1368, 1672, 1478, 130, 2189, 496, 1545,
	509, 538, 1541, 1536, 507, 2106, 1447, 1287, 1442, 197,
	2883, 1478, 1720, 2223, 2224, 507, 533, 1668, 2329, 2485,
	2807, 1445, 1469, 2857, 1949, 488, 489, 505, 2171, 1740,
	1286, 2169, 2689, 2482, 2923, 2358, 2010, 1445, 505, 504,
	1443, 2585, 691, 200, 2357, 2180, 1695, 2804, 2586, 524,
	504, 534, 692, 198, 2770, 1670, 1440, 2317, 2318, 1288,
	1946, 1209, 1945, 1119, 2054, 932, 1210, 3162, 514, 1671,
	2053, 567, 28, 508, 735, 2209, 690, 1117, 2071, 514,
	3148, 1813, 932, 510, 508, 537, 602, 2805, 1286, 1815,
	2187, 726, 2299, 3, 510, 532, 737, 525, 2672, 971,
	2410, 579, 1208, 2330, 2302, 2311, 2484, 729, 1446, 2309,
	2310, 2820, 940, 3138, 929, 496, 1240, 967, 496, 1444,
	1108, 1474, 929, 929, 1446, 496, 929, 1107, 496, 496,
	971, 2215, 736, 526, 2843, 527, 2920, 1474, 496, 496,
	496, 2400, 3149, 2775, 496, 2599, 693, 496, 1447, 2332,
	929, 1865, 595, 2325, 496, 496, 496, 496, 496, 3140,
	2406, 2011, 2012, 2333, 2334, 691, 1442, 496, 2921, 572,
	36, 692, 3151, 2852, 496, 571, 35, 2323, 2902, 1445,
	1209, 2326, 2768, 2349, 694, 1210, 496, 957, 2324, 2669,
	496, 2353, 2287, 2512, 2459, 2316, 971, 1367, 1443, 2249,
	496, 2199, 2336, 570, 32, 2136, 971, 2341, 2320, 2294,
	2295, 2296, 2306, 971, 2034, 1985, 2800, 1275, 2288, 2801,
	2313, 2314, 2378, 2303, 2319, 496, 2005, 496, 1527, 496,
	569, 79, 957, 496, 957, 957, 957, 1465, 496, 882,
	496, 2331, 2163, 1276, 496, 1118, 28, 1183, 2418, 496,
	2158, 496, 930, 2803, 568, 78, 2140, 1262, 496, 1116,
	930, 930, 2343, 2806, 930, 693, 1446, 1476, 936, 2394,
	565, 23, 2851, 600, 601, 496, 496, 2389, 1985, 2435,
	957, 1717, 1097, 578, 2373, 2434, 1714, 1260, 930, 1600,
	2446, 1704, 1476, 1250, 692, 2380, 1248, 496, 2385, 566,
	24, 2383, 1653, 694, 1619, 2096, 2390, 928, 2395, 1384,
	2411, 1093, 2354, 2477, 1864, 928, 928, 2414, 1682, 928,
	2360, 1512, 2364, 2365, 3092, 1246, 496, 1512, 1490, 1097,
	2340, 2433, 2470, 564, 30, 2407, 1985, 2667, 2381, 593,
	594, 496, 2382, 928, 36, 2420, 1494, 563, 21, 1515,
	35, 766, 3046, 2465, 2793, 2476, 561, 20, 1274, 2802,
	2453, 2454, 2455, 2648, 2456, 2457, 1244, 2445, 2452, 971,
	562, 19, 729, 1242, 2478, 1236, 2646, 2628, 32, 971,
	2458, 2428, 1521, 887, 889, 1115, 734, 1491, 693, 2426,
	2083, 130, 477, 2515, 496, 2075, 2074, 494, 1261, 551,
	15, 1529, 2072, 2068, 515, 79, 2430, 1600, 1600, 552,
	16, 541, 2489, 1580, 585, 592, 1579, 541, 477, 1088,
	585, 607, 1619, 1619, 1713, 1106, 694, 614, 1259, 78,
	2550, 2496, 560, 57, 1249, 634, 2498, 1247, 2487, 2488,
	1577, 1575, 130, 1753, 2553, 23, 2500, 1126, 1126, 1126,
	967, 2493, 1495, 2386, 1572, 2533, 2534, 2535, 1570, 1568,
	1526, 2596, 1524, 1513, 1753, 2564, 1245, 559, 56, 2559,
	1502, 2519, 1499, 1487, 24, 1479, 2969, 2525, 550, 55,
	2526, 558, 12, 3135, 2876, 496, 2875, 1691, 910, 2540,
	2542, 2543, 2546, 549, 50, 929, 1597, 496, 2419, 2592,
	2421, 2422, 2423, 971, 2588, 1178, 2552, 1243, 30, 2971,
	911, 2561, 1496, 1497, 1241, 2617, 1235, 541, 541, 1997,
	2612, 1492, 21, 556, 47, 931, 1114, 2563, 1980, 557,
	48, 20, 1290, 929, 2698, 1693, 548, 49, 2178, 1996,
	2658, 1980, 2589, 2838, 2038, 19, 2468, 2033, 1493, 494,
	494, 494, 1994, 963, 494, 2028, 2664, 1068, 2597, 1073,
	932, 1079, 2602, 2603, 477, 1064, 2605, 2600, 932, 932,
	496, 496, 932, 496, 15, 2004, 2141, 2668, 496, 130,
	555, 7, 554, 6, 16, 553, 38, 971, 580, 971,
	2619, 912, 957, 2608, 1658, 1659, 932, 1600, 547, 37,
	2679, 3009, 2812, 1234, 2632, 2986, 2776, 57, 2179, 496,
	2013, 2000, 1619, 1291, 1597, 1597, 2702, 1300, 1301, 1762,
	1294, 2031, 2647, 2002, 2649, 1498, 929, 3045, 957, 496,
	496, 2849, 2008, 930, 2690, 2623, 1533, 2695, 2656, 3146,
	496, 2691, 56, 971, 496, 496, 971, 496, 2654, 2694,
	2662, 2090, 2076, 55, 2663, 496, 12, 603, 2676, 2666,
	2685, 2674, 2687, 971, 2673, 2682, 1180, 2681, 50, 1302,
	2067, 930, 1933, 1185, 1663, 2727, 1593, 2692, 2466, 3161,
	1371, 2696, 2258, 2259, 2704, 1300, 1301, 2703, 928, 1300,
	1301, 2657, 2732, 2717, 1845, 2153, 2152, 2720, 47, 2544,
	1225, 2474, 2807, 2657, 48, 1224, 2741, 2657, 496, 2715,
	2716, 49, 2657, 2637, 1303, 2728, 2153, 2722, 2724, 2154,
	1899, 1854, 2345, 2748, 2306, 1264, 928, 1985, 1263, 2804,
	2536, 2725, 2797, 1381, 1379, 2914, 2733, 2359, 2867, 2362,
	2706, 1302, 1273, 1272, 1258, 2795, 1254, 1251, 1237, 1195,
	2799, 1666, 895, 701, 2930, 7, 3056, 6, 688, 2366,
	38, 1703, 1238, 1705, 930, 2322, 1954, 496, 3039, 2805,
	2754, 2232, 2992, 37, 2896, 1863, 1382, 971, 929, 971,
	2767, 53, 761, 1742, 1975, 824, 2794, 496, 496, 496,
	2631, 2061, 2060, 974, 1675, 783, 2798, 1888, 929, 1828,
	1754, 785, 496, 1598, 1597, 788, 787, 496, 786, 496,
	1367, 1599, 496, 496, 496, 496, 496, 929, 1408, 928,
	496, 496, 957, 784, 1596, 2070, 971, 2781, 2792, 2813,
	957, 2094, 2443, 2782, 678, 1679, 1824, 2783, 496, 496,
	1463, 2443, 2778, 2779, 2780, 1842, 2214, 2787, 1375, 753,
	2784, 957, 929, 1840, 1181, 1914, 494, 1092, 752, 494,
	2815, 496, 494, 929, 2327, 963, 2839, 2438, 1112, 2622,
	496, 496, 957, 957, 494, 2833, 2777, 2862, 1738, 2816,
	2170, 1735, 2645, 511, 494, 494, 494, 494, 963, 2826,
	2827, 2848, 2861, 2858, 2714, 2845, 2885, 2435, 2800, 2837,
	2859, 2801, 2255, 2868, 2860, 1147, 2854, 1915, 971, 1910,
	1908, 2866, 1904, 1279, 2870, 2847, 930, 1097, 1359, 2871,
	2095, 1217, 2338, 2447, 2888, 2127, 1746, 909, 634, 908,
	592, 907, 3062, 2834, 3059, 2803, 930, 2884, 1669, 2908,
	2147, 932, 494, 1352, 757, 2806, 2307, 2413, 1090, 3008,
	971, 1351, 891, 2791, 496, 930, 496, 3001, 971, 496,
	1207, 1206, 1205, 2351, 2904, 1194, 3156, 496, 2642, 170,
	167, 928, 169, 971, 2825, 168, 634, 2399, 2340, 932,
	82, 2830, 2895, 2917, 34, 33, 109, 929, 108, 107,
	930, 928, 106, 2915, 2950, 2909, 2910, 2637, 2935, 932,
	1530, 930, 2934, 105, 2936, 104, 103, 2913, 102, 2156,
	928, 932, 101, 2912, 496, 932, 496, 100, 2933, 957,
	932, 929, 99, 929, 496, 98, 97, 929, 96, 2943,
	95, 1559, 2637, 1559, 94, 93, 92, 91, 90, 89,
	88, 2802, 87, 2637, 86, 928, 85, 971, 84, 630,
	627, 81, 80, 494, 31, 26, 928, 113, 2968, 114,
	25, 2966, 77, 2973, 2956, 76, 2958, 496, 2967, 29,
	2962, 2972, 932, 496, 18, 11, 2982, 17, 22, 135,
	134, 496, 133, 2694, 2944, 2945, 132, 131, 2835, 14,
	13, 2435, 1600, 128, 129, 3004, 2990, 2985, 127, 2998,
	126, 2970, 2954, 2997, 125, 124, 1656, 1619, 2995, 496,
	496, 123, 10, 8, 112, 9, 496, 2879, 2480, 70,
	71, 2916, 27, 43, 3020, 930, 3022, 957, 42, 3006,
	41, 111, 496, 161, 160, 159, 957, 957, 2872, 2873,
	496, 158, 496, 154, 496, 157, 155, 156, 153, 3042,
	1702, 3024, 3035, 1985, 122, 2657, 1708, 3027, 1709, 930,
	1710, 930, 1711, 496, 1712, 930, 496, 2637, 496, 3052,
	971, 3032, 3033, 3034, 163, 162, 3026, 151, 3066, 3067,
	928, 3064, 148, 3014, 1721, 1106, 3069, 3071, 3070, 150,
	3072, 152, 2096, 149, 147, 3058, 164, 3054, 121, 3077,
	120, 2637, 929, 2637, 119, 496, 118, 2637, 117, 116,
	5, 2, 3075, 1, 928, 3017, 928, 3036, 0, 3037,
	928, 0, 3089, 0, 932, 3091, 0, 3090, 0, 496,
	0, 0, 0, 1600, 3115, 0, 3116, 496, 3117, 3104,
	0, 0, 0, 3053, 932, 3074, 614, 3123, 1619, 0,
	929, 541, 0, 496, 0, 2308, 3121, 3122, 3120, 1914,
	1914, 0, 0, 932, 0, 0, 0, 0, 2657, 3132,
	3130, 3129, 1456, 0, 931, 3013, 3136, 494, 3137, 0,
	3064, 3142, 3143, 3139, 0, 0, 2335, 0, 0, 3145,
	0, 0, 0, 3118, 0, 0, 0, 3031, 932, 1597,
	3153, 0, 0, 3152, 0, 0, 3114, 1600, 3160, 932,
	0, 3159, 0, 1910, 1910, 0, 0, 3164, 3165, 0,
	0, 0, 1619, 0, 0, 3166, 0, 0, 0, 0,
	0, 3169, 3170, 0, 0, 3173, 0, 0, 0, 3175,
	930, 0, 0, 0, 1600, 1600, 0, 0, 0, 0,
	0, 0, 1914, 1914, 1914, 0, 0, 0, 0, 1619,
	1619, 0, 2403, 0, 0, 1600, 1600, 0, 0, 2403,
	2790, 0, 1985, 0, 0, 0, 0, 0, 0, 1972,
	1619, 1619, 2637, 0, 0, 0, 0, 0, 930, 0,
	2824, 0, 0, 0, 0, 928, 0, 0, 2829, 0,
	1600, 0, 0, 0, 0, 0, 1910, 1910, 1910, 0,
	0, 477, 0, 0, 0, 1619, 0, 0, 0, 0,
	0, 0, 1985, 0, 0, 0, 0, 0, 967, 0,
	2637, 0, 0, 932, 0, 1064, 0, 494, 1532, 0,
	1597, 0, 0, 928, 2443, 477, 0, 0, 0, 0,
	0, 0, 2201, 2202, 0, 0, 0, 0, 0, 1552,
	1552, 0, 0, 932, 0, 0, 494, 932, 494, 932,
	494, 0, 0, 932, 541, 0, 0, 0, 0, 0,
	2099, 0, 0, 1126, 0, 1126, 0, 1126, 0, 967,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 634, 2522, 477, 1064, 585, 0,
	0, 0, 0, 0, 0, 2529, 0, 1985, 477, 1064,
	0, 0, 963, 494, 0, 2281, 2282, 2283, 634, 0,
	0, 1597, 1597, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1597, 1597, 0, 0, 932, 0, 0, 2032,
	0, 0, 634, 0, 0, 0, 0, 494, 0, 0,
	0, 0, 477, 494, 0, 494, 2047, 494, 2049, 494,
	0, 494, 0, 0, 0, 0, 0, 1597, 0, 2157,
	0, 1718, 0, 1719, 0, 0, 0, 0, 0, 0,
	1600, 494, 494, 494, 0, 0, 0, 0, 1914, 1914,
	2087, 0, 2087, 0, 0, 1619, 0, 0, 0, 0,
	0, 0, 2166, 967, 2168, 0, 0, 0, 932, 0,
	634, 0, 0, 0, 0, 0, 0, 0, 0, 2625,
	0, 0, 0, 0, 0, 2181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1910, 1910, 0, 0, 0, 0, 0, 0,
	0, 0, 3012, 0, 0, 0, 932, 0, 0, 0,
	0, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
	1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
	0, 1914, 0, 0, 0, 0, 0, 0, 1300, 1301,
	0, 0, 0, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 0, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 1910, 1910, 208, 1910, 0, 614, 0, 541,
	1302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 969,
	208, 0, 1057, 0, 541, 0, 0, 0, 0, 0,
	0, 931, 0, 541, 0, 0, 494, 0, 0, 0,
	2096, 2508, 2509, 1988, 0, 0, 0, 1597, 0, 0,
	0, 494, 0, 0, 0, 0, 0, 0, 0, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 494, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 0, 0,
	0, 477, 2044, 0, 0, 0, 0, 0, 1600, 0,
	0, 0, 0, 1330, 1331, 1332, 2057, 0, 0, 1064,
	0, 0, 2344, 1619, 2565, 2566, 2567, 2568, 2569, 2570,
	2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
	2581, 2582, 2583, 1988, 2587, 541, 0, 494, 0, 0,
	494, 1106, 494, 0, 494, 0, 494, 494, 0, 963,
	1600, 0, 1323, 0, 958, 2786, 0, 972, 972, 0,
	0, 0, 592, 0, 1988, 1619, 0, 0, 0, 0,
	0, 0, 0, 0, 2398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2416, 0, 0, 0, 0, 0, 0,
	0, 0, 2425, 1303, 2427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 585, 0, 0, 0, 0,
	1600, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	1302, 0, 0, 0, 0, 1619, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 1064, 0,
	0, 0, 0, 0, 2893, 0, 0, 0, 0, 864,
	0, 2736, 0, 0, 2375, 0, 0, 0, 0, 494,
	494, 494, 0, 494, 0, 1597, 1325, 1326, 1327, 1328,
	0, 0, 1300, 1301, 0, 2501, 1308, 0, 0, 0,
	0, 0, 494, 2391, 0, 0, 2893, 0, 2258, 2259,
	0, 2276, 2277, 2278, 1762, 0, 0, 1303, 0, 0,
	0, 0, 0, 1330, 1331, 1332, 2738, 0, 0, 1762,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 1597, 0, 2415,
	0, 0, 0, 0, 1302, 0, 0, 1439, 2424, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2273, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 2511, 0, 0, 0, 0,
	0, 0, 0, 1057, 0, 0, 0, 0, 0, 1914,
	1325, 1326, 1327, 1328, 0, 0, 0, 1597, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2264, 0, 0, 1329,
	0, 0, 958, 958, 0, 0, 1914, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1910, 0, 0, 0, 0, 0, 0,
	959, 958, 958, 973, 973, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 2279, 0, 0, 0, 740, 931,
	0, 0, 0, 0, 0, 0, 1323, 931, 931, 0,
	1910, 931, 0, 0, 0, 0, 541, 0, 0, 541,
	0, 0, 2274, 0, 0, 0, 541, 0, 0, 541,
	541, 0, 0, 0, 0, 1456, 1762, 0, 0, 494,
	1988, 2347, 2680, 0, 0, 1988, 0, 0, 2347, 0,
	0, 0, 0, 1914, 0, 1988, 2347, 1988, 2347, 2347,
	0, 0, 0, 0, 0, 0, 0, 0, 494, 0,
	0, 0, 0, 1329, 0, 1532, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 494, 0, 0,
	1324, 963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 494, 0, 0, 0, 0, 2275, 1910, 958, 2726,
	0, 967, 2901, 0, 0, 0, 0, 0, 0, 2729,
	0, 0, 0, 0, 0, 0, 1552, 0, 1552, 0,
	494, 0, 0, 0, 494, 0, 0, 0, 0, 494,
	0, 494, 0, 0, 0, 963, 0, 0, 0, 2925,
	1988, 0, 541, 0, 0, 0, 0, 0, 0, 1988,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2258,
	2259, 0, 2276, 2277, 2278, 0, 2463, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	2270, 2271, 2272, 0, 0, 0, 0, 2269, 2267, 2268,
	2260, 2261, 2262, 2263, 2265, 2266, 0, 2497, 0, 2273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2708, 494, 0, 0, 0, 2989, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 1349, 0, 2828, 0,
	0, 0, 0, 0, 1106, 0, 0, 0, 959, 959,
	0, 0, 0, 0, 0, 2548, 0, 2264, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 959, 959, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 0, 1070, 2279, 1076, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 1326, 1327, 1328,
	0, 0, 0, 2274, 0, 0, 1308, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 541, 1300, 1301, 0,
	0, 0, 0, 1343, 1344, 1345, 0, 0, 541, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 2639, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 2926, 1317, 1318, 0, 0, 0, 0, 1456, 1302,
	0, 0, 0, 0, 959, 1338, 0, 1322, 0, 0,
	1456, 1179, 1323, 0, 1456, 0, 0, 2275, 1184, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 1988, 1552, 0, 1552, 0, 0, 0, 2963, 494,
	2965, 2865, 1337, 0, 0, 0, 0, 740, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 0, 0, 1325, 1326, 1327, 1328, 972,
	1988, 931, 0, 0, 0, 1308, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	592, 592, 0, 0, 0, 0, 1324, 208, 1340, 1350,
	0, 1064, 1330, 1331, 1332, 963, 494, 0, 494, 0,
	0, 0, 0, 0, 0, 0, 494, 0, 0, 1341,
	0, 2270, 2271, 2272, 0, 0, 0, 0, 2269, 2267,
	2268, 2260, 2261, 2262, 2263, 2265, 2266, 0, 0, 0,
	3018, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 1353, 1354, 1355, 1356, 1357, 0, 0, 3038, 2755,
	0, 0, 0, 0, 1366, 0, 0, 958, 208, 0,
	0, 958, 1376, 0, 0, 0, 0, 958, 0, 0,
	208, 2961, 3055, 0, 0, 0, 0, 1339, 0, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 1329, 0,
	2241, 0, 972, 931, 2242, 762, 74, 0, 1064, 0,
	0, 958, 958, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 1456, 208, 0, 0, 0, 1988, 2347,
	1988, 0, 0, 0, 0, 1300, 1301, 0, 1341, 0,
	0, 0, 2639, 1064, 0, 0, 0, 0, 1988, 0,
	2347, 0, 0, 1064, 1064, 494, 1988, 2347, 0, 0,
	1303, 494, 494, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2639, 0, 1064,
	2057, 0, 0, 0, 0, 0, 972, 1302, 2639, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1988, 0, 0, 1433, 1433, 1433, 0, 0,
	0, 2463, 2463, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 717, 0, 2506, 0,
	0, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 972, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 919,
	74, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	1330, 1331, 1332, 0, 0, 1988, 0, 2347, 0, 0,
	2919, 0, 0, 0, 973, 0, 0, 0, 494, 0,
	0, 0, 2639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 1323,
	0, 0, 1456, 0, 0, 0, 2639, 0, 2639, 0,
	0, 972, 2639, 0, 0, 494, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 959, 972, 0,
	0, 0, 0, 959, 0, 0, 1329, 0, 2548, 0,
	0, 0, 0, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 2919, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 959, 0,
	1988, 2347, 0, 0, 0, 1456, 0, 494, 0, 0,
	0, 0, 958, 958, 958, 0, 0, 958, 0, 574,
	0, 0, 0, 2347, 0, 0, 0, 0, 0, 0,
	40, 1064, 0, 1064, 0, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 3050, 0, 0, 1064, 0, 494,
	0, 740, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 573, 0, 0, 2639, 0, 0,
	0, 0, 0, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 2548, 0, 0, 0,
	0, 0, 575, 0, 0, 0, 0, 0, 0, 0,
	59, 577, 0, 0, 0, 60, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 2639, 972, 0, 1988, 0,
	0, 0, 0, 0, 1736, 0, 1741, 0, 0, 0,
	0, 74, 1748, 74, 2919, 74, 0, 973, 0, 63,
	0, 0, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 0, 1804, 0,
	1806, 1807, 1808, 1809, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 1300, 1301, 1832,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 1366, 0, 0,
	0, 973, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 973, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 0, 0, 0, 0, 0,
	74, 64, 0, 0, 0, 0, 0, 74, 0, 1302,
	0, 1906, 0, 1917, 0, 0, 0, 1322, 1923, 1928,
	0, 0, 959, 0, 1319, 0, 0, 0, 0, 139,
	66, 0, 67, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 2258,
	2259, 0, 2276, 2277, 2278, 1308, 173, 0, 0, 0,
	0, 0, 0, 0, 1300, 1301, 0, 0, 959, 959,
	959, 0, 0, 959, 0, 0, 1300, 1301, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 1303,
	0, 2046, 972, 2048, 0, 0, 0, 172, 0, 0,
	0, 1303, 0, 1346, 1347, 0, 165, 0, 717, 2273,
	0, 1317, 1318, 0, 166, 0, 1302, 0, 0, 0,
	0, 0, 0, 972, 1338, 0, 0, 0, 1302, 0,
	1362, 1323, 1365, 0, 0, 138, 1322, 0, 0, 1372,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 2264, 0, 1349,
	958, 0, 973, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 1308, 0, 1325, 1326, 1327, 1328, 1329, 972,
	0, 0, 0, 1302, 1308, 0, 972, 0, 0, 0,
	0, 1322, 0, 0, 0, 1324, 0, 0, 1319, 1330,
	1331, 1332, 0, 0, 0, 958, 0, 958, 958, 958,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 1325,
	1326, 1327, 1328, 958, 0, 0, 0, 0, 0, 1308,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 1454, 0, 1457, 0,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 1317, 1318, 2275, 0, 0,
	0, 0, 0, 2760, 0, 0, 0, 1329, 1338, 0,
	0, 0, 1324, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 972, 0, 1324, 0, 0, 2184, 2185, 0,
	0, 0, 972, 2191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2204, 0, 0, 0, 0, 0, 2258, 2259,
	0, 2276, 2277, 2278, 0, 0, 2210, 0, 0, 0,
	0, 0, 2217, 0, 0, 0, 2517, 2222, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 2236, 0, 0, 0, 0, 1324,
	0, 2270, 2271, 2272, 0, 0, 0, 0, 2269, 2267,
	2268, 2260, 2261, 2262, 2263, 2265, 2266, 0, 2273, 973,
	0, 0, 1341, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 0, 0, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 1928, 1928, 1928, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 2312, 0, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 2264, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	1339, 0, 973, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 959, 0, 959, 959, 959, 0, 2369, 0, 0,
	0, 1371, 0, 0, 2279, 0, 0, 0, 0, 0,
	972, 0, 972, 0, 0, 958, 0, 0, 0, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 2274, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 972,
	0, 0, 0, 0, 573, 146, 0, 0, 0, 0,
	39, 0, 0, 2436, 0, 0, 972, 0, 0, 0,
	0, 40, 141, 0, 0, 717, 0, 0, 717, 717,
	0, 0, 575, 0, 0, 0, 44, 0, 0, 0,
	59, 577, 0, 0, 0, 60, 2275, 0, 0, 0,
	0, 46, 143, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 45, 0, 51, 0, 0, 973, 0,
	740, 740, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 740, 0, 52, 1822, 0, 0, 54,
	0, 0, 0, 58, 0, 0, 0, 144, 0, 730,
	2499, 59, 72, 0, 1748, 1365, 60, 61, 0, 0,
	2503, 2504, 0, 0, 2507, 0, 0, 0, 2510, 0,
	0, 0, 0, 0, 0, 0, 0, 2514, 0, 0,
	972, 62, 972, 0, 2520, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 2527, 0, 0, 0, 2312, 0,
	2270, 2271, 2272, 0, 0, 0, 0, 2269, 2267, 2268,
	2260, 2261, 2262, 2263, 2265, 2266, 0, 2554, 2555, 0,
	2556, 2557, 2558, 0, 0, 958, 0, 2560, 919, 972,
	0, 64, 0, 958, 2562, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 139,
	66, 0, 67, 0, 0, 2590, 2591, 74, 0, 0,
	0, 0, 0, 0, 0, 958, 958, 0, 2258, 2259,
	171, 2276, 2277, 2278, 0, 0, 0, 0, 0, 0,
	0, 576, 64, 74, 110, 2607, 2516, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 972, 74, 0, 0, 0, 173, 0, 0, 75,
	139, 66, 0, 67, 0, 68, 973, 0, 973, 145,
	0, 959, 0, 2633, 69, 0, 0, 0, 2273, 0,
	0, 171, 0, 0, 74, 0, 74, 0, 0, 0,
	0, 0, 83, 972, 0, 110, 0, 172, 0, 0,
	0, 972, 0, 0, 142, 0, 165, 959, 74, 0,
	0, 0, 0, 0, 166, 0, 972, 173, 0, 74,
	0, 0, 973, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	115, 0, 973, 0, 0, 0, 2264, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 1433, 172, 0,
	0, 0, 958, 0, 0, 0, 0, 165, 2705, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 2258, 2259, 0, 2276, 2277, 2278, 0, 0,
	972, 0, 0, 0, 2279, 0, 138, 0, 0, 4,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2274, 2734, 2735, 0, 0, 0, 0, 2739,
	2740, 0, 0, 0, 2743, 2744, 0, 0, 0, 74,
	0, 0, 2273, 74, 0, 0, 2746, 0, 0, 0,
	2749, 0, 0, 0, 0, 0, 973, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 2756, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 0, 0, 0, 973, 2275, 0, 0, 959,
	2264, 0, 0, 972, 0, 0, 2258, 2259, 0, 2276,
	2277, 2278, 0, 0, 0, 0, 0, 0, 0, 1822,
	959, 0, 0, 0, 2280, 0, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 1365,
	0, 959, 959, 0, 0, 0, 2814, 1336, 2279, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 2273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2274, 973, 0, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	2270, 2271, 2272, 0, 0, 0, 0, 2269, 2267, 2268,
	2260, 2261, 2262, 2263, 2265, 2266, 0, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 2264, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 2889, 2890, 2891, 1325, 1326, 1327,
	1328, 0, 0, 919, 0, 0, 0, 1308, 0, 0,
	2275, 919, 919, 0, 0, 919, 0, 0, 2899, 2900,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	1340, 1350, 2279, 2907, 1330, 1331, 1332, 0, 959, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	2274, 0, 0, 1317, 1318, 0, 973, 0, 74, 0,
	0, 0, 1302, 0, 0, 0, 1338, 0, 0, 2942,
	1322, 0, 0, 1323, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 2270, 2271, 2272, 0, 0, 0,
	0, 2269, 2267, 2268, 2260, 2261, 2262, 2263, 2265, 2266,
	0, 0, 0, 74, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 74, 0, 2275, 0, 959, 0, 1308, 0,
	1329, 0, 0, 0, 730, 959, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 74, 0,
	0, 0, 3000, 0, 0, 3003, 0, 0, 0, 973,
	1341, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 2270, 2271,
	2272, 0, 0, 0, 0, 2269, 2267, 2268, 2260, 2261,
	2262, 2263, 2265, 2266, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 1329, 0, 0, 0, 2244, 0, 0, 3088, 3088,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 3105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3088, 0, 0, 0, 0, 1339,
	0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1150, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 960,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	0, 0, 0, 0, 0, 919, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 74, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 870, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 0, 0, 877, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 919, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 74, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 1153,
	255, 0, 0, 470, 256, 0, 0, 0, 165, 471,
	472, 257, 473, 474, 475, 0, 166, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1822, 258, 259, 260, 261,
	975, 262, 976, 977, 978, 979, 214, 980, 981, 982,
	983, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 984, 269, 270, 271, 272, 273, 274, 275, 985,
	986, 276, 219, 220, 221, 987, 277, 222, 988, 960,
	989, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 990, 287, 0, 288, 289, 991, 866, 290, 291,
	992, 993, 995, 994, 996, 997, 998, 292, 293, 498,
	294, 295, 296, 223, 224, 999, 297, 1000, 298, 1001,
	299, 1002, 1003, 300, 301, 1004, 302, 303, 1005, 304,
	1006, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 1007, 867, 1008, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 1009, 320, 1010, 1011,
	868, 321, 1012, 322, 229, 1013, 230, 1014, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 870, 1015, 237,
	330, 0, 0, 0, 1016, 329, 331, 338, 1017, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 1018, 236,
	1019, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 1020, 349, 348, 1021, 238,
	874, 350, 351, 875, 1022, 352, 353, 1023, 1024, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 1025, 1026, 877, 1027, 239, 365,
	240, 366, 367, 1028, 368, 369, 1029, 1030, 370, 371,
	1031, 1032, 372, 241, 878, 373, 879, 242, 374, 375,
	376, 377, 378, 379, 380, 1033, 381, 243, 382, 244,
	383, 1034, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 1035, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 1036, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 1037, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 1038, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 1039, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 1040, 444, 445, 1041, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 1042,
	249, 250, 251, 454, 1043, 1044, 455, 456, 252, 253,
	1045, 457, 458, 0, 459, 460, 1046, 1047, 461, 462,
	463, 465, 1048, 466, 1049, 464, 467, 468, 469, 254,
	255, 1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 1959, 0, 0, 0, 0,
	0, 0, 0, 0, 1960, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 275, 985, 986,
	276, 219, 220, 221, 987, 277, 222, 988, 960, 989,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	990, 287, 0, 288, 289, 991, 866, 290, 291, 992,
	993, 995, 994, 996, 997, 998, 292, 293, 498, 294,
	295, 296, 223, 224, 999, 297, 1000, 298, 1001, 299,
	1002, 1003, 300, 301, 1004, 302, 303, 1005, 304, 1006,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 1009, 320, 1010, 1011, 868,
	321, 1012, 322, 229, 1013, 230, 1014, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 1015, 237, 330,
	0, 0, 0, 1016, 329, 331, 338, 1017, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 1018, 236, 1019,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 1020, 349, 348, 1021, 238, 874,
	350, 351, 875, 1022, 352, 353, 1023, 1024, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 1025, 1026, 877, 1027, 239, 365, 240,
	366, 367, 1028, 368, 369, 1029, 1030, 370, 371, 1031,
	1032, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 1033, 381, 243, 382, 244, 383,
	1034, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	1035, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 1036, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 1037, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 1038, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 1039, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 1040, 444, 445, 1041, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 1042, 249,
	250, 251, 454, 1043, 1044, 455, 456, 252, 253, 1045,
	457, 458, 0, 459, 460, 1046, 1047, 461, 462, 463,
	465, 1048, 466, 1049, 464, 467, 468, 469, 254, 255,
	1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2785, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 275, 985, 986,
	276, 219, 220, 221, 987, 277, 222, 988, 960, 989,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	990, 287, 0, 288, 289, 991, 866, 290, 291, 992,
	993, 995, 994, 996, 997, 998, 292, 293, 498, 294,
	295, 296, 223, 224, 999, 297, 1000, 298, 1001, 299,
	1002, 1003, 300, 301, 1004, 302, 303, 1005, 304, 1006,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 1009, 320, 1010, 1011, 868,
	321, 1012, 322, 229, 1013, 230, 1014, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 1015, 237, 330,
	0, 0, 0, 1016, 329, 331, 338, 1017, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 1018, 236, 1019,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 1020, 349, 348, 1021, 238, 874,
	350, 351, 875, 1022, 352, 353, 1023, 1024, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 1025, 1026, 877, 1027, 239, 365, 240,
	366, 367, 1028, 368, 369, 1029, 1030, 370, 371, 1031,
	1032, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 1033, 381, 243, 382, 244, 383,
	1034, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	1035, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 1036, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 1037, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 1038, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 1039, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 1040, 444, 445, 1041, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 1042, 249,
	250, 251, 454, 1043, 1044, 455, 456, 252, 253, 1045,
	457, 458, 0, 459, 460, 1046, 1047, 461, 462, 463,
	465, 1048, 466, 1049, 464, 467, 468, 469, 254, 255,
	1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471, 472,
	257, 473, 474, 475, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2894,
	258, 259, 260, 261, 975, 262, 976, 977, 978, 979,
	214, 980, 981, 982, 983, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 984, 269, 270, 271, 272,
	273, 274, 275, 985, 986, 276, 219, 220, 221, 987,
	277, 222, 988, 960, 989, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 990, 287, 0, 288, 289,
	991, 866, 290, 291, 992, 993, 995, 994, 996, 997,
	998, 292, 293, 498, 294, 295, 296, 223, 224, 999,
	297, 1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004,
	302, 303, 1005, 304, 1006, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 1007, 867, 1008, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	1009, 320, 1010, 1011, 868, 321, 1012, 322, 229, 1013,
	230, 1014, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 870, 1015, 237, 330, 0, 0, 0, 1016, 329,
	331, 338, 1017, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 1018, 236, 1019, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 1020,
	349, 348, 1021, 238, 874, 350, 351, 875, 1022, 352,
	353, 1023, 1024, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 1025, 1026,
	877, 1027, 239, 365, 240, 366, 367, 1028, 368, 369,
	1029, 1030, 370, 371, 1031, 1032, 372, 241, 878, 373,
	879, 242, 374, 375, 376, 377, 378, 379, 380, 1033,
	381, 243, 382, 244, 383, 1034, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 1035, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1036,
	404, 880, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1037, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1038, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 1039, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1040,
	444, 445, 1041, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 1042, 249, 250, 251, 454, 1043, 1044,
	455, 456, 252, 253, 1045, 457, 458, 0, 459, 460,
	1046, 1047, 461, 462, 463, 465, 1048, 466, 1049, 464,
	467, 468, 469, 254, 255, 1050, 1051, 470, 256, 1052,
	1053, 1054, 1055, 471, 472, 257, 473, 474, 475, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2530, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 275, 985, 986,
	276, 219, 220, 221, 987, 277, 222, 988, 960, 989,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	990, 287, 0, 288, 289, 991, 866, 290, 291, 992,
	993, 995, 994, 996, 997, 998, 292, 293, 498, 294,
	295, 296, 223, 224, 999, 297, 1000, 298, 1001, 299,
	1002, 1003, 300, 301, 1004, 302, 303, 1005, 304, 1006,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 1009, 320, 1010, 1011, 868,
	321, 1012, 322, 229, 1013, 230, 1014, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 1015, 237, 330,
	0, 0, 0, 1016, 329, 331, 338, 1017, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 1018, 236, 1019,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 1020, 349, 348, 1021, 238, 874,
	350, 351, 875, 1022, 352, 353, 1023, 1024, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 1025, 1026, 877, 1027, 239, 365, 240,
	366, 367, 1028, 368, 369, 1029, 1030, 370, 371, 1031,
	1032, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 1033, 381, 243, 382, 244, 383,
	1034, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	1035, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 1036, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 1037, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 1038, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 1039, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 1040, 444, 445, 1041, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 1042, 249,
	250, 251, 454, 1043, 1044, 455, 456, 252, 253, 1045,
	457, 458, 0, 459, 460, 1046, 1047, 461, 462, 463,
	465, 1048, 466, 1049, 464, 467, 468, 469, 254, 255,
	1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471, 472,
	257, 473, 474, 475, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2521,
	258, 259, 260, 261, 975, 262, 976, 977, 978, 979,
	214, 980, 981, 982, 983, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 984, 269, 270, 271, 272,
	273, 274, 275, 985, 986, 276, 219, 220, 221, 987,
	277, 222, 988, 960, 989, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 990, 287, 0, 288, 289,
	991, 866, 290, 291, 992, 993, 995, 994, 996, 997,
	998, 292, 293, 498, 294, 295, 296, 223, 224, 999,
	297, 1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004,
	302, 303, 1005, 304, 1006, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 1007, 867, 1008, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	1009, 320, 1010, 1011, 868, 321, 1012, 322, 229, 1013,
	230, 1014, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 870, 1015, 237, 330, 0, 0, 0, 1016, 329,
	331, 338, 1017, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 1018, 236, 1019, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 1020,
	349, 348, 1021, 238, 874, 350, 351, 875, 1022, 352,
	353, 1023, 1024, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 1025, 1026,
	877, 1027, 239, 365, 240, 366, 367, 1028, 368, 369,
	1029, 1030, 370, 371, 1031, 1032, 372, 241, 878, 373,
	879, 242, 374, 375, 376, 377, 378, 379, 380, 1033,
	381, 243, 382, 244, 383, 1034, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 1035, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1036,
	404, 880, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1037, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1038, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 1039, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1040,
	444, 445, 1041, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 1042, 249, 250, 251, 454, 1043, 1044,
	455, 456, 252, 253, 1045, 457, 458, 0, 459, 460,
	1046, 1047, 461, 462, 463, 465, 1048, 466, 1049, 464,
	467, 468, 469, 254, 255, 1050, 1051, 470, 256, 1052,
	1053, 1054, 1055, 471, 472, 257, 473, 474, 475, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2402, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 275, 985, 986,
	276, 219, 220, 221, 987, 277, 222, 988, 960, 989,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	990, 287, 0, 288, 289, 991, 866, 290, 291, 992,
	993, 995, 994, 996, 997, 998, 292, 293, 498, 294,
	295, 296, 223, 224, 999, 297, 1000, 298, 1001, 299,
	1002, 1003, 300, 301, 1004, 302, 303, 1005, 304, 1006,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 1009, 320, 1010, 1011, 868,
	321, 1012, 322, 229, 1013, 230, 1014, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 1015, 237, 330,
	0, 0, 0, 1016, 329, 331, 338, 1017, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 1018, 236, 1019,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 1020, 349, 348, 1021, 238, 874,
	350, 351, 875, 1022, 352, 353, 1023, 1024, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 1025, 1026, 877, 1027, 239, 365, 240,
	366, 367, 1028, 368, 369, 1029, 1030, 370, 371, 1031,
	1032, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 1033, 381, 243, 382, 244, 383,
	1034, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	1035, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 1036, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 1037, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 1038, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 1039, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 1040, 444, 445, 1041, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 1042, 249,
	250, 251, 454, 1043, 1044, 455, 456, 252, 253, 1045,
	457, 458, 0, 459, 460, 1046, 1047, 461, 462, 463,
	465, 1048, 466, 1049, 464, 467, 468, 469, 254, 255,
	1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471, 472,
	257, 473, 474, 475, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1846,
	258, 259, 260, 261, 975, 262, 976, 977, 978, 979,
	214, 980, 981, 982, 983, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 984, 269, 270, 271, 272,
	273, 274, 275, 985, 986, 276, 219, 220, 221, 987,
	277, 222, 988, 960, 989, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 990, 287, 0, 288, 289,
	991, 866, 290, 291, 992, 993, 995, 994, 996, 997,
	998, 292, 293, 498, 294, 295, 296, 223, 224, 999,
	297, 1000, 298, 1001, 299, 1002, 1003, 300, 301, 1004,
	302, 303, 1005, 304, 1006, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 1007, 867, 1008, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	1009, 320, 1010, 1011, 868, 321, 1012, 322, 229, 1013,
	230, 1014, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 870, 1015, 237, 330, 0, 0, 0, 1016, 329,
	331, 338, 1017, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 1018, 236, 1019, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 1020,
	349, 348, 1021, 238, 874, 350, 351, 875, 1022, 352,
	353, 1023, 1024, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 1025, 1026,
	877, 1027, 239, 365, 240, 366, 367, 1028, 368, 369,
	1029, 1030, 370, 371, 1031, 1032, 372, 241, 878, 373,
	879, 242, 374, 375, 376, 377, 378, 379, 380, 1033,
	381, 243, 382, 244, 383, 1034, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 1035, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1036,
	404, 880, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1037, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1038, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 1039, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1040,
	444, 445, 1041, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 1042, 249, 250, 251, 454, 1043, 1044,
	455, 456, 252, 253, 1045, 457, 458, 0, 459, 460,
	1046, 1047, 461, 462, 463, 465, 1048, 466, 1049, 464,
	467, 468, 469, 254, 255, 1050, 1051, 470, 256, 1052,
	1053, 1054, 1055, 471, 472, 257, 473, 474, 475, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 258, 259, 260, 261, 975,
	262, 976, 977, 978, 979, 214, 980, 981, 982, 983,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	984, 269, 270, 271, 272, 273, 274, 275, 985, 986,
	276, 219, 220, 221, 987, 277, 222, 988, 960, 989,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	990, 287, 0, 288, 289, 991, 866, 290, 291, 992,
	993, 995, 994, 996, 997, 998, 292, 293, 498, 294,
	295, 296, 223, 224, 999, 297, 1000, 298, 1001, 299,
	1002, 1003, 300, 301, 1004, 302, 303, 1005, 304, 1006,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	1007, 867, 1008, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 1009, 320, 1010, 1011, 868,
	321, 1012, 322, 229, 1013, 230, 1014, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 1015, 237, 330,
	0, 0, 0, 1016, 329, 331, 338, 1017, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 1018, 236, 1019,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 1020, 349, 348, 1021, 238, 874,
	350, 351, 875, 1022, 352, 353, 1023, 1024, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 1025, 1026, 877, 1027, 239, 365, 240,
	366, 367, 1028, 368, 369, 1029, 1030, 370, 371, 1031,
	1032, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 1033, 381, 243, 382, 244, 383,
	1034, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	1035, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 1036, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 1037, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 1038, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 1039, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 1040, 444, 445, 1041, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 1042, 249,
	250, 251, 454, 1043, 1044, 455, 456, 252, 253, 1045,
	457, 458, 0, 459, 460, 1046, 1047, 461, 462, 463,
	465, 1048, 466, 1049, 464, 467, 468, 469, 254, 255,
	1050, 1051, 470, 256, 1052, 1053, 1054, 1055, 471, 472,
	257, 473, 474, 475, 1853, 0, 781, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 1850, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 1851, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 1849, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 1852, 0, 0, 0,
	0, 0, 0, 756, 1847, 0, 0, 0, 731, 759,
	781, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 1153,
	863, 0, 0, 470, 256, 0, 0, 0, 165, 471,
	472, 257, 473, 474, 475, 747, 166, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 1369, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 1153,
	863, 0, 0, 470, 256, 0, 0, 0, 165, 471,
	472, 257, 473, 474, 475, 747, 166, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 1369, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 1924, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 1929,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 1925, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 1926, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 2697, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	1434, 781, 769, 770, 767, 768, 760, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 763, 0,
	0, 0, 263, 264, 265, 215, 838, 801, 839, 789,
	825, 840, 0, 269, 270, 791, 790, 273, 274, 275,
	764, 816, 276, 841, 842, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	291, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	498, 294, 826, 296, 843, 844, 749, 297, 0, 298,
	0, 299, 0, 0, 827, 301, 0, 302, 303, 0,
	304, 0, 754, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 847, 828, 829, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 870, 0,
	820, 800, 0, 0, 0, 1750, 329, 331, 338, 0,
	869, 332, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 339, 871, 872, 340, 341, 342, 873, 834,
	835, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	851, 874, 350, 351, 875, 0, 352, 353, 0, 0,
	354, 0, 355, 751, 750, 356, 357, 359, 793, 358,
	876, 361, 362, 364, 363, 746, 0, 877, 777, 821,
	365, 852, 366, 367, 0, 802, 803, 0, 0, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 1749, 384, 385, 386, 387, 388, 389, 855,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 755, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 794, 795, 796, 797,
	421, 427, 428, 814, 429, 410, 411, 430, 881, 431,
	856, 798, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 836, 438, 439, 440, 857, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 792, 453,
	0, 858, 859, 860, 837, 0, 0, 455, 456, 861,
	862, 775, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 799, 467, 468, 469,
	254, 863, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 747, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	0, 0, 0, 739, 759, 781, 769, 770, 767, 768,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 498, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 741, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 498, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 2532, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 498, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 741, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 781, 769, 770, 767, 768,
	760, 0, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 763, 0, 0, 0, 263, 264, 265, 215,
	838, 801, 839, 789, 825, 840, 0, 269, 270, 791,
	790, 273, 274, 275, 764, 816, 276, 841, 842, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 498, 294, 826, 296, 843, 844,
	749, 297, 0, 298, 0, 299, 0, 0, 827, 301,
	0, 302, 303, 0, 304, 0, 754, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 776, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 847, 828, 829, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 800, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 849, 804, 830, 831,
	832, 833, 850, 0, 805, 0, 339, 871, 872, 340,
	341, 342, 873, 834, 835, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 751, 750, 356,
	357, 359, 793, 358, 876, 361, 362, 364, 363, 746,
	0, 877, 777, 821, 365, 852, 366, 367, 0, 802,
	803, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 855, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 755, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	794, 795, 796, 797, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 856, 798, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 836, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 792, 453, 0, 858, 859, 860, 837, 0,
	0, 455, 456, 861, 862, 775, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	799, 467, 468, 469, 254, 863, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	747, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 743, 744, 1434, 781, 769, 770, 767,
	768, 760, 756, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 1929, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 1916, 759,
	781, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	0, 0, 1905, 759, 781, 769, 770, 767, 768, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 270, 791, 790,
	273, 274, 275, 764, 816, 276, 841, 842, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 498, 294, 826, 296, 843, 844, 749,
	297, 0, 298, 0, 299, 0, 0, 827, 301, 0,
	302, 303, 0, 304, 0, 754, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 847, 828, 829, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 339, 871, 872, 340, 341,
	342, 873, 834, 835, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 751, 750, 356, 357,
	359, 793, 358, 876, 361, 362, 364, 363, 746, 0,
	877, 777, 821, 365, 852, 366, 367, 0, 802, 803,
	0, 0, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 855, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 755, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 794,
	795, 796, 797, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 856, 798, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 836, 438, 439, 440, 857, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 792, 453, 0, 858, 859, 860, 837, 0, 0,
	455, 456, 861, 862, 775, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 799,
	467, 468, 469, 254, 863, 0, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1903, 759, 781, 769,
	770, 767, 768, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 270, 791, 790, 273, 274, 275, 764, 816, 276,
	841, 842, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 498, 294, 826,
	296, 843, 844, 749, 297, 0, 298, 0, 299, 0,
	0, 827, 301, 0, 302, 303, 0, 304, 0, 754,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 847,
	828, 829, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 818, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 339,
	871, 872, 340, 341, 342, 873, 834, 835, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	751, 750, 356, 357, 359, 793, 358, 876, 361, 362,
	364, 363, 746, 0, 877, 777, 821, 365, 852, 366,
	367, 0, 802, 803, 0, 0, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 855, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	755, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 794, 795, 796, 797, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 856, 798, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 836, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 792, 453, 0, 858, 859,
	860, 837, 0, 0, 455, 456, 861, 862, 775, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 799, 467, 468, 469, 254, 863, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	1901, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 270, 791, 790, 273, 274,
	275, 764, 816, 276, 841, 842, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 498, 294, 826, 296, 843, 844, 749, 297, 0,
	298, 0, 299, 0, 0, 827, 301, 0, 302, 303,
	0, 304, 0, 754, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 847, 828, 829, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 818, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 339, 871, 872, 340, 341, 342, 873,
	834, 835, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 751, 750, 356, 357, 359, 793,
	358, 876, 361, 362, 364, 363, 746, 0, 877, 777,
	821, 365, 852, 366, 367, 0, 802, 803, 0, 0,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	855, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 755, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 794, 795, 796,
	797, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 856, 798, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 836, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 792,
	453, 0, 858, 859, 860, 837, 0, 0, 455, 456,
	861, 862, 775, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 799, 467, 468,
	469, 254, 863, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 747, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 0, 1898, 759, 1890, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 1893, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 1894, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	1895, 1892, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 1896, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 1891,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 0, 0, 0, 0,
	0, 0, 0, 756, 0, 0, 0, 0, 1887, 759,
	1890, 769, 770, 767, 768, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 1893, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	1894, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 1895, 1892, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 1896, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 1891, 475, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	781, 769, 770, 767, 768, 760, 0, 756, 0, 0,
	0, 0, 0, 759, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 817, 763, 0, 0,
	0, 263, 264, 265, 215, 838, 801, 839, 789, 825,
	840, 0, 269, 270, 791, 790, 273, 274, 275, 764,
	816, 276, 841, 842, 221, 0, 277, 823, 0, 806,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	809, 807, 808, 813, 811, 810, 812, 292, 293, 498,
	294, 826, 296, 843, 844, 749, 297, 0, 298, 0,
	299, 0, 0, 827, 301, 0, 302, 303, 0, 304,
	0, 754, 305, 306, 308, 311, 307, 312, 313, 845,
	846, 776, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 847, 828, 829, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 848, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 818, 819, 822, 870, 0, 820,
	800, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 849, 804, 830, 831, 832, 833, 850, 0, 805,
	0, 339, 871, 872, 340, 341, 342, 873, 834, 835,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 851,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 751, 750, 356, 357, 359, 793, 358, 876,
	361, 362, 364, 363, 746, 0, 877, 777, 821, 365,
	852, 366, 367, 0, 802, 803, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 853, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 854, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 855, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 755, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 794, 795, 796, 797, 421,
	427, 428, 814, 429, 410, 411, 430, 881, 431, 856,
	798, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	836, 438, 439, 440, 857, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 792, 453, 0,
	858, 859, 860, 837, 0, 0, 455, 456, 861, 862,
	775, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 815, 466, 0, 799, 467, 468, 469, 254,
	863, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 747, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 743, 744,
	0, 0, 0, 0, 0, 1374, 0, 756, 0, 0,
	0, 0, 0, 759, 781, 769, 770, 767, 768, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1737, 262, 0, 0, 0, 0,
	817, 763, 0, 0, 0, 263, 264, 265, 215, 838,
	801, 839, 789, 825, 840, 0, 269, 270, 791, 790,
	273, 274, 275, 764, 816, 276, 841, 842, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 498, 294, 826, 296, 843, 844, 749,
	297, 0, 298, 0, 299, 0, 0, 827, 301, 0,
	302, 303, 0, 304, 0, 754, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 776, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 847, 828, 829, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 800, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 849, 804, 830, 831, 832,
	833, 850, 0, 805, 0, 339, 871, 872, 340, 341,
	342, 873, 834, 835, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 751, 750, 356, 357,
	359, 793, 358, 876, 361, 362, 364, 363, 746, 0,
	877, 777, 821, 365, 852, 366, 367, 0, 802, 803,
	0, 0, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 855, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 755, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 794,
	795, 796, 797, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 856, 798, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 836, 438, 439, 440, 857, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 792, 453, 0, 858, 859, 860, 837, 0, 0,
	455, 456, 861, 862, 775, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 799,
	467, 468, 469, 254, 863, 0, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 747,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 756, 0, 0, 0, 0, 1078, 759, 781, 769,
	770, 767, 768, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 763, 0, 0, 0, 263,
	264, 265, 215, 838, 801, 839, 789, 825, 840, 0,
	269, 270, 791, 790, 273, 274, 275, 764, 816, 276,
	841, 842, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 498, 294, 826,
	296, 843, 844, 749, 297, 0, 298, 0, 299, 0,
	0, 827, 301, 0, 302, 303, 0, 304, 0, 754,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 776,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 847,
	828, 829, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1077, 819, 822, 870, 0, 820, 800, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 849,
	804, 830, 831, 832, 833, 850, 0, 805, 0, 339,
	871, 872, 340, 341, 342, 873, 834, 835, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	751, 750, 356, 357, 359, 793, 358, 876, 361, 362,
	364, 363, 746, 0, 877, 777, 821, 365, 852, 366,
	367, 0, 802, 803, 0, 0, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 855, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	755, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 794, 795, 796, 797, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 856, 798, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 836, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 792, 453, 0, 858, 859,
	860, 837, 0, 0, 455, 456, 861, 862, 775, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 799, 467, 468, 469, 254, 863, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 747, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 0, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 756, 0, 0, 0, 0,
	1072, 759, 781, 769, 770, 767, 768, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 763,
	0, 0, 0, 263, 264, 265, 215, 838, 801, 839,
	789, 825, 840, 0, 269, 270, 791, 790, 273, 274,
	275, 764, 816, 276, 841, 842, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 498, 294, 826, 296, 843, 844, 749, 297, 0,
	298, 0, 299, 0, 0, 827, 301, 0, 302, 303,
	0, 304, 0, 754, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 776, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 847, 828, 829, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1071, 819, 822, 870,
	0, 820, 800, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 849, 804, 830, 831, 832, 833, 850,
	0, 805, 0, 339, 871, 872, 340, 341, 342, 873,
	834, 835, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 751, 750, 356, 357, 359, 793,
	358, 876, 361, 362, 364, 363, 746, 0, 877, 777,
	821, 365, 852, 366, 367, 0, 802, 803, 0, 0,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	855, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 755, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 794, 795, 796,
	797, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 856, 798, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 836, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 792,
	453, 0, 858, 859, 860, 837, 0, 0, 455, 456,
	861, 862, 775, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 799, 467, 468,
	469, 254, 863, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 747, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 0, 1067, 759, 781, 769, 770, 767,
	768, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 3087, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	3086, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	3085, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 3087, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 749, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 751, 750,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	746, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	3086, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 747, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 743, 744, 781, 769, 770, 767,
	768, 760, 0, 756, 0, 0, 0, 0, 0, 759,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 763, 0, 0, 0, 263, 264, 265,
	215, 838, 801, 839, 789, 825, 840, 0, 269, 270,
	791, 790, 273, 274, 275, 764, 816, 276, 841, 842,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 826, 296, 843,
	844, 0, 297, 0, 298, 0, 299, 0, 0, 827,
	301, 0, 302, 303, 0, 304, 0, 754, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 776, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 847, 828, 829,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 800, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 849, 804, 830,
	831, 832, 833, 850, 0, 805, 0, 339, 871, 872,
	340, 341, 342, 873, 834, 835, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 793, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 777, 821, 365, 852, 366, 367, 0,
	802, 803, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 855, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 755, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 794, 795, 796, 797, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 856, 798, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 836, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 792, 453, 0, 858, 859, 860, 837,
	0, 0, 455, 456, 861, 862, 775, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 799, 467, 468, 469, 254, 863, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 781, 769, 770, 767, 768, 760, 0, 0, 1913,
	0, 0, 0, 0, 1911, 1912, 0, 258, 259, 260,
	261, 0, 262, 756, 0, 0, 0, 817, 763, 759,
	0, 0, 263, 264, 265, 0, 838, 801, 839, 789,
	825, 840, 0, 269, 270, 791, 790, 273, 274, 275,
	764, 816, 276, 841, 842, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	3087, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	498, 294, 826, 296, 843, 844, 749, 297, 0, 298,
	0, 299, 0, 0, 827, 301, 0, 302, 303, 0,
	304, 0, 754, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 776, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 847, 828, 829, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 0, 0,
	820, 800, 0, 0, 0, 0, 329, 331, 338, 0,
	869, 332, 849, 804, 830, 831, 832, 833, 850, 0,
	805, 0, 339, 0, 0, 340, 341, 342, 873, 834,
	835, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	851, 874, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 751, 750, 356, 357, 359, 793, 358,
	876, 361, 362, 364, 363, 746, 0, 0, 777, 821,
	365, 852, 366, 367, 0, 802, 803, 0, 0, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 855,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 755, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 794, 795, 796, 797,
	421, 427, 428, 814, 429, 410, 411, 430, 0, 431,
	856, 798, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 836, 438, 439, 440, 857, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 792, 453,
	0, 858, 859, 860, 837, 0, 0, 455, 456, 861,
	862, 775, 457, 458, 0, 3086, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 799, 467, 468, 469,
	254, 863, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 731, 0, 933, 0, 0, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 756, 0,
	258, 259, 260, 261, 759, 262, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 816, 276, 219, 220, 221, 0,
	277, 823, 0, 806, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 809, 807, 808, 813, 811, 810,
	812, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 845, 846, 0, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 848, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 818, 819,
	822, 870, 0, 820, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 920,
	349, 348, 0, 851, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 0, 0,
	877, 0, 821, 365, 240, 366, 367, 0, 368, 369,
	0, 925, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 853, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 854, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 246, 927, 0, 413,
	414, 415, 416, 417, 418, 419, 171, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 814, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 857, 0,
	444, 445, 173, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 861, 862, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 815, 466, 0, 464,
	467, 468, 469, 1153, 255, 0, 0, 470, 256, 0,
	0, 933, 165, 471, 472, 257, 473, 474, 475, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 817, 0, 917,
	0, 1459, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 816, 276, 219, 220, 221, 0, 277, 823, 0,
	806, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 866, 290,
	291, 809, 807, 808, 813, 811, 810, 812, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	845, 846, 0, 867, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 868, 321, 0, 322, 848, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 818, 819, 822, 870, 0,
	820, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	869, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 871, 872, 340, 341, 342, 873, 343,
	344, 0, 0, 345, 346, 347, 920, 349, 348, 0,
	851, 874, 350, 351, 875, 0, 352, 353, 0, 0,
	354, 0, 355, 935, 934, 356, 357, 359, 360, 358,
	876, 361, 362, 364, 363, 0, 0, 877, 0, 821,
	365, 240, 366, 367, 0, 368, 369, 0, 925, 370,
	371, 0, 0, 372, 241, 878, 373, 879, 853, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 854, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 880, 405,
	406, 407, 408, 246, 927, 0, 413, 414, 415, 416,
	417, 418, 419, 171, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 814, 429, 410, 411, 430, 881, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 857, 0, 444, 445, 173,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 861,
	862, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 815, 466, 0, 464, 467, 468, 469,
	1153, 255, 0, 0, 470, 256, 2305, 0, 933, 165,
	471, 472, 257, 473, 474, 475, 0, 166, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 817, 0, 917, 0, 1459, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 816, 276,
	219, 220, 221, 0, 277, 823, 0, 806, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 866, 290, 291, 809, 807,
	808, 813, 811, 810, 812, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 845, 846, 0,
	867, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 868, 321,
	0, 322, 848, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 818, 819, 822, 870, 0, 820, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 869, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	871, 872, 340, 341, 342, 873, 343, 344, 0, 0,
	345, 346, 347, 920, 349, 348, 0, 851, 874, 350,
	351, 875, 0, 352, 353, 0, 0, 354, 0, 355,
	935, 934, 356, 357, 359, 360, 358, 876, 361, 362,
	364, 363, 0, 0, 877, 0, 821, 365, 240, 366,
	367, 0, 368, 369, 0, 925, 370, 371, 0, 0,
	372, 241, 878, 373, 879, 853, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 854, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 880, 405, 406, 407, 408,
	246, 927, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	814, 429, 410, 411, 430, 881, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 857, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 861, 862, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	815, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 916, 0, 933, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 817, 0, 917, 0, 922, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 816, 276, 219, 220, 221,
	0, 277, 823, 0, 806, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 809, 807, 808, 813, 811,
	810, 812, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 845, 846, 0, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 848,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 818,
	819, 822, 870, 0, 820, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 871, 872, 340,
	341, 342, 873, 343, 344, 0, 0, 345, 346, 347,
	920, 349, 348, 0, 851, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 935, 934, 356,
	357, 359, 360, 358, 876, 361, 362, 364, 363, 0,
	0, 877, 0, 821, 365, 240, 366, 367, 0, 368,
	369, 0, 925, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 853, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 854, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 246, 927, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 814, 429, 410,
	411, 430, 881, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 857,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 861, 862, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 815, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	0, 0, 933, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 817, 0,
	917, 0, 922, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 816, 276, 219, 220, 221, 0, 277, 823,
	0, 806, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 866,
	290, 291, 809, 807, 808, 813, 811, 810, 812, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 845, 846, 0, 867, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 868, 321, 0, 322, 848, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 818, 819, 822, 870,
	0, 820, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 869, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 871, 872, 340, 341, 342, 873,
	343, 344, 0, 0, 345, 346, 347, 920, 349, 348,
	0, 851, 874, 350, 351, 875, 0, 352, 353, 0,
	0, 354, 0, 355, 935, 934, 356, 357, 359, 360,
	358, 876, 361, 362, 364, 363, 0, 0, 877, 0,
	821, 365, 240, 366, 367, 0, 368, 369, 0, 925,
	370, 371, 0, 0, 372, 241, 878, 373, 879, 853,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 854,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 880,
	405, 406, 407, 408, 246, 927, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 814, 429, 410, 411, 430, 881,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 857, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	861, 862, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 815, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 0, 0, 933,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 817, 0, 917, 0, 922,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 816,
	276, 219, 220, 221, 0, 277, 823, 0, 806, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 866, 290, 291, 809,
	807, 808, 813, 811, 810, 812, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 845, 846,
	0, 867, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 868,
	321, 0, 322, 848, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 818, 819, 822, 870, 0, 820, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 851, 874,
	350, 351, 875, 0, 352, 353, 0, 0, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 0, 0, 877, 0, 821, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 878, 373, 879, 853, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 854, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 814, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 857, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 861, 862, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 815, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 0, 0, 933, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 817, 0, 0, 0, 2638, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 816, 276, 219, 220,
	221, 0, 277, 823, 0, 806, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 809, 807, 808, 813,
	811, 810, 812, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 845, 846, 0, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	848, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	818, 819, 822, 870, 0, 820, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 871, 872,
	340, 341, 342, 873, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 851, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 360, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 0, 821, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 853, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 854, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 246, 927,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 814, 429,
	410, 411, 430, 881, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	857, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 861, 862, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 815, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 0, 0, 933, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 817,
	0, 0, 0, 1363, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 816, 276, 219, 220, 221, 0, 277,
	823, 0, 806, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	866, 290, 291, 809, 807, 808, 813, 811, 810, 812,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 845, 846, 0, 867, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 868, 321, 0, 322, 848, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 818, 819, 822,
	870, 0, 820, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 851, 874, 350, 351, 875, 0, 352, 353,
	0, 0, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 0, 0, 877,
	0, 821, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 878, 373, 879,
	853, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	854, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 814, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 857, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 861, 862, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 815, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 731, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 1153,
	255, 0, 0, 470, 256, 0, 0, 0, 165, 471,
	472, 257, 473, 474, 475, 0, 166, 781, 769, 770,
	767, 768, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 138, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 838, 801, 839, 789, 825, 840, 0, 269,
	270, 791, 790, 273, 274, 275, 0, 0, 276, 841,
	842, 221, 0, 277, 222, 0, 960, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 866, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 826, 296,
	843, 844, 0, 297, 0, 298, 0, 299, 0, 0,
	827, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 776, 867,
	0, 0, 0, 0, 0, 314, 315, 316, 847, 828,
	829, 0, 319, 0, 320, 0, 0, 868, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 870, 0, 237, 800, 0, 0,
	0, 0, 329, 331, 338, 0, 869, 332, 849, 804,
	830, 831, 832, 833, 850, 0, 805, 0, 339, 871,
	872, 340, 341, 342, 873, 834, 835, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 874, 350, 351,
	875, 0, 352, 353, 0, 0, 354, 0, 355, 935,
	934, 356, 357, 359, 793, 358, 876, 361, 362, 364,
	363, 0, 0, 877, 777, 239, 365, 852, 366, 367,
	0, 802, 803, 0, 0, 370, 371, 0, 0, 372,
	241, 878, 373, 879, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 855, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 880, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 794, 795, 796, 797, 421, 427, 428, 0,
	429, 410, 411, 430, 881, 431, 856, 798, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 836, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 792, 453, 0, 858, 859, 860,
	837, 0, 0, 455, 456, 252, 253, 775, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 799, 467, 468, 469, 254, 863, 495, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 0, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 2097, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	0, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 2547, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 1229, 0, 956,
	955, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 1464,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 960, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 866, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 867, 0, 0, 0, 0, 0, 1228, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 868,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 870, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 869, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 871, 872, 340, 341, 342, 873, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 874,
	350, 351, 875, 0, 352, 353, 0, 0, 354, 0,
	355, 935, 934, 356, 357, 359, 360, 358, 876, 361,
	362, 364, 363, 0, 0, 877, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 878, 373, 879, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 1227, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 880, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 881, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 1146, 0, 956, 955, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 960, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	1145, 232, 233, 870, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 871, 872,
	340, 341, 342, 873, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 360, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 881, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 1142, 0, 956, 955, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 960, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	866, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 867, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 868, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 1141, 232, 233,
	870, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 869, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 871, 872, 340, 341, 342,
	873, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 874, 350, 351, 875, 0, 352, 353,
	0, 0, 354, 0, 355, 935, 934, 356, 357, 359,
	360, 358, 876, 361, 362, 364, 363, 0, 0, 877,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 878, 373, 879,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	880, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	881, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 1103, 0,
	956, 955, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 960,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 866, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 867, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	868, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 1102, 232, 233, 870, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 869,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 871, 872, 340, 341, 342, 873, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	874, 350, 351, 875, 0, 352, 353, 0, 0, 354,
	0, 355, 935, 934, 356, 357, 359, 360, 358, 876,
	361, 362, 364, 363, 0, 0, 877, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 878, 373, 879, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 880, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 881, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 1100, 0, 956, 955, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 960, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 866, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 867,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 868, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1099, 232, 233, 870, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 869, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 871,
	872, 340, 341, 342, 873, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 874, 350, 351,
	875, 0, 352, 353, 0, 0, 354, 0, 355, 935,
	934, 356, 357, 359, 360, 358, 876, 361, 362, 364,
	363, 0, 0, 877, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 878, 373, 879, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 880, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 881, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 949, 0, 956, 955, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 960, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 866, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 867, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 868, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 951, 232,
	233, 870, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 869, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 871, 872, 340, 341,
	342, 873, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 874, 350, 351, 875, 0, 352,
	353, 0, 0, 354, 0, 355, 935, 934, 356, 357,
	359, 360, 358, 876, 361, 362, 364, 363, 0, 0,
	877, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 878, 373,
	879, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 880, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 881, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 956, 955, 470, 256, 0,
	953, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 960, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 866, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 867, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 868, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 870, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 869, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 871, 872, 340,
	341, 342, 873, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 874, 350, 351, 875, 0,
	352, 353, 0, 0, 354, 0, 355, 935, 934, 356,
	357, 359, 360, 358, 876, 361, 362, 364, 363, 0,
	0, 877, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 878,
	373, 879, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 880, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 881, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 956, 955, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 960, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 866, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 867, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 868, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 870, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 869, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 871, 872,
	340, 341, 342, 873, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 874, 350, 351, 875,
	0, 352, 353, 0, 0, 354, 0, 355, 935, 934,
	356, 357, 359, 360, 358, 876, 361, 362, 364, 363,
	0, 0, 877, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	878, 373, 879, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 880, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 881, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 956, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 960, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 866, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 867,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 868, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 870, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 869, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 871,
	872, 340, 341, 342, 873, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 874, 350, 351,
	875, 0, 352, 353, 0, 0, 354, 0, 355, 935,
	934, 356, 357, 359, 360, 358, 876, 361, 362, 364,
	363, 0, 0, 877, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 878, 373, 879, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 880, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 881, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 599, 0, 207, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 213, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 212, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 206,
	0, 207, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 478, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	213, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 212,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 207, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 478, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 213, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	1706, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	212, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 207, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 478, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 213, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 212, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 478, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 478, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	1989, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 1986, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 2066, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 1992, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 2064,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 2063, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 1991, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 2065, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 1989, 277, 222, 0, 0, 1983, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 1986, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 1992, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	1982, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 1991, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 1990, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 606, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 605, 583, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 586,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 587, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 588, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 582, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	583, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 586, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 587, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 588, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 586, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 587, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 588, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1121, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 925, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 944, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 946,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 925, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	941, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 943, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 925,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 937, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 939, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 925, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 591, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 590, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 518, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 517, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 516, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 1964, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 2464, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 2464, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 2461, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 925, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1726, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 1724,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1722, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 1699,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 1657, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 1655, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 632, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 1200, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 633, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 629, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	628, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 1550, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1549, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 632, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 1200, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 633, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 629, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 628, 250, 251, 454, 0, 0,
	455, 1201, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 632,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 622, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 633,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 629, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 1172, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 628, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1139, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1138, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1135, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1134,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	1132, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1131, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 1129, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1128, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 1125, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	1124, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 1113, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 1111, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 1110, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 1105,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 0, 0, 470, 256, 1096, 0, 495, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1095, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1091, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 0, 0, 470, 256,
	1087, 0, 495, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1089, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 964, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 966, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	0, 0, 470, 256, 961, 0, 495, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 632, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 622,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 621,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 633, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 623, 409, 0, 413, 414,
	629, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 624, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 628, 250, 251, 454, 0, 0, 455,
	626, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 0, 0, 470, 256, 612, 0,
	495, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 613, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 608, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	429, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 0, 0,
	470, 256, 597, 0, 495, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 540,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	498, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	238, 0, 350, 351, 0, 0, 352, 353, 0, 0,
	354, 0, 355, 0, 0, 356, 357, 359, 360, 358,
	0, 361, 362, 364, 363, 0, 0, 0, 0, 239,
	365, 240, 366, 367, 0, 368, 369, 0, 0, 370,
	371, 0, 0, 372, 241, 0, 373, 0, 242, 374,
	375, 376, 377, 378, 379, 380, 0, 381, 243, 382,
	244, 383, 0, 384, 385, 386, 387, 388, 389, 245,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 246, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 420, 422, 423, 424,
	421, 427, 428, 0, 429, 410, 411, 430, 0, 431,
	247, 432, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 442, 438, 439, 440, 248, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 309, 451, 310, 452, 453,
	0, 249, 250, 251, 454, 0, 0, 455, 456, 252,
	253, 0, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 0, 466, 0, 464, 467, 468, 469,
	254, 255, 495, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 498, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 304, 0, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 0, 320,
	0, 0, 0, 321, 0, 322, 229, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 0,
	0, 237, 330, 0, 0, 0, 0, 329, 331, 338,
	0, 0, 332, 234, 334, 333, 335, 336, 337, 235,
	0, 236, 0, 339, 0, 0, 340, 341, 342, 0,
	343, 344, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 238, 0, 350, 351, 0, 0, 352, 353, 0,
	0, 354, 0, 355, 0, 0, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 0, 381, 243,
	382, 244, 383, 0, 384, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 309, 451, 310, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 495, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 498, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 2363, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 238, 0, 350, 351, 0, 0, 352, 353,
	0, 0, 354, 0, 355, 0, 0, 356, 357, 359,
	360, 358, 0, 361, 362, 364, 363, 0, 0, 0,
	0, 239, 365, 240, 366, 367, 0, 368, 369, 0,
	0, 370, 371, 0, 0, 372, 241, 0, 373, 0,
	242, 374, 375, 376, 377, 378, 379, 380, 0, 381,
	243, 382, 244, 383, 0, 384, 385, 386, 387, 388,
	389, 245, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 246, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 420, 422,
	423, 424, 421, 427, 428, 0, 429, 410, 411, 430,
	0, 431, 247, 432, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 442, 438, 439, 440, 248, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 309, 451, 310,
	452, 453, 0, 249, 250, 251, 454, 0, 0, 455,
	456, 252, 253, 0, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 0, 466, 0, 464, 467,
	468, 469, 254, 255, 495, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 498, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 304, 0, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	0, 320, 0, 0, 0, 321, 0, 322, 229, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 2361, 232,
	233, 0, 0, 237, 330, 0, 0, 0, 0, 329,
	331, 338, 0, 0, 332, 234, 334, 333, 335, 336,
	337, 235, 0, 236, 0, 339, 0, 0, 340, 341,
	342, 0, 343, 344, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 238, 0, 350, 351, 0, 0, 352,
	353, 0, 0, 354, 0, 355, 0, 0, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 0,
	381, 243, 382, 244, 383, 0, 384, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 309, 451,
	310, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 498, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 2350,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 238, 0, 350, 351, 0, 0,
	352, 353, 0, 0, 354, 0, 355, 0, 0, 356,
	357, 359, 360, 358, 0, 361, 362, 364, 363, 0,
	0, 0, 0, 239, 365, 240, 366, 367, 0, 368,
	369, 0, 0, 370, 371, 0, 0, 372, 241, 0,
	373, 0, 242, 374, 375, 376, 377, 378, 379, 380,
	0, 381, 243, 382, 244, 383, 0, 384, 385, 386,
	387, 388, 389, 245, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 0, 429, 410,
	411, 430, 0, 431, 247, 432, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 309,
	451, 310, 452, 453, 0, 249, 250, 251, 454, 0,
	0, 455, 456, 252, 253, 0, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 0, 466, 0,
	464, 467, 468, 469, 254, 255, 495, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 498, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 304, 0, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 0, 320, 0, 0, 0, 321, 0, 322,
	229, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 0, 0, 237, 330, 0, 0, 0,
	0, 329, 331, 338, 0, 0, 332, 234, 334, 333,
	335, 336, 337, 235, 0, 236, 0, 339, 0, 0,
	340, 341, 342, 0, 343, 344, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 238, 0, 350, 351, 0,
	0, 352, 353, 0, 0, 354, 0, 355, 0, 0,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 0, 381, 243, 382, 244, 383, 0, 384, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 613, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	309, 451, 310, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 1563, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 498, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 238, 0, 350, 351,
	0, 0, 352, 353, 0, 0, 354, 0, 355, 0,
	0, 356, 357, 359, 360, 358, 0, 361, 362, 364,
	363, 0, 0, 0, 0, 239, 365, 240, 366, 367,
	0, 368, 369, 0, 0, 370, 371, 0, 0, 372,
	241, 0, 373, 0, 242, 374, 375, 376, 377, 378,
	379, 380, 0, 381, 243, 382, 244, 383, 0, 384,
	385, 386, 387, 388, 389, 245, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 246,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 420, 422, 423, 424, 421, 427, 428, 0,
	0, 410, 411, 430, 0, 431, 247, 432, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 442, 438, 439,
	440, 248, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 309, 451, 310, 452, 453, 0, 249, 250, 251,
	454, 0, 0, 455, 456, 252, 253, 0, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 0,
	466, 0, 464, 467, 468, 469, 254, 255, 495, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 498, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 304, 0, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 0, 320, 0, 0, 0, 321,
	0, 322, 229, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 1554, 232, 233, 0, 0, 237, 330, 0,
	0, 0, 0, 329, 331, 338, 0, 0, 332, 234,
	334, 333, 335, 336, 337, 235, 0, 236, 0, 339,
	0, 0, 340, 341, 342, 0, 343, 344, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 238, 0, 350,
	351, 0, 0, 352, 353, 0, 0, 354, 0, 355,
	0, 0, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 0, 381, 243, 382, 244, 383, 0,
	384, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 309, 451, 310, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 498, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 238, 0,
	350, 351, 0, 0, 352, 353, 0, 0, 354, 0,
	355, 0, 0, 356, 357, 359, 360, 358, 0, 361,
	362, 364, 363, 0, 0, 0, 0, 239, 365, 240,
	366, 367, 0, 368, 369, 0, 0, 370, 371, 0,
	0, 372, 241, 0, 373, 0, 242, 374, 375, 376,
	377, 378, 379, 380, 0, 381, 243, 382, 244, 383,
	0, 384, 385, 386, 387, 388, 389, 245, 899, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 246, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 420, 422, 423, 424, 421, 427,
	428, 0, 429, 410, 411, 430, 0, 431, 247, 432,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 442,
	438, 439, 440, 248, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 309, 451, 310, 452, 453, 0, 249,
	250, 251, 454, 0, 0, 455, 456, 252, 253, 0,
	457, 458, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 0, 466, 0, 464, 467, 468, 469, 254, 255,
	495, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 498,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 304,
	0, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 0, 320, 0, 0,
	0, 321, 0, 322, 229, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 0, 0, 237,
	330, 0, 0, 0, 0, 329, 331, 338, 0, 0,
	332, 234, 334, 333, 335, 336, 337, 235, 0, 236,
	0, 339, 0, 0, 340, 341, 342, 0, 343, 344,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 238,
	0, 350, 351, 0, 0, 352, 353, 0, 0, 354,
	0, 355, 0, 0, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 0, 378, 379, 380, 0, 381, 243, 382, 244,
	383, 0, 384, 385, 386, 0, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 0, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 309, 451, 310, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 0, 1322, 0, 0, 0, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1329, 0, 0, 0,
	0, 2243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 0, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 1302, 0, 0,
	0, 2240, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 2239, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 0, 1322, 0, 0, 0, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1329, 0, 0, 0,
	0, 2238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 3051, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1302, 0, 0, 0, 3047, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 1302, 0, 0, 0, 0, 0, 1308,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 1325,
	1326, 1327, 1328, 1302, 0, 0, 0, 0, 1338, 1308,
	0, 1322, 0, 0, 0, 1323, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 1325,
	1326, 1327, 1328, 0, 0, 0, 0, 0, 1338, 1308,
	0, 0, 1329, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 1329, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 1329, 2988, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 2987, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1302,
	0, 0, 0, 2937, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 1302,
	0, 0, 0, 0, 0, 1308, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 1325, 1326, 1327, 1328, 1302,
	0, 0, 0, 0, 1338, 1308, 0, 1322, 0, 0,
	0, 1323, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 1338, 1308, 0, 0, 1329, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 1348, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 1329, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 0, 0, 1329, 2898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0, 2808,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 1339, 0, 0, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 1302, 0, 0, 0, 2765,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 1328, 1302, 0, 0, 0, 0,
	0, 1308, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 1340, 1350, 0, 0, 1330, 1331,
	1332, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 1325, 1326, 1327, 1328, 1302, 0, 0, 0, 0,
	1338, 1308, 0, 1322, 0, 0, 0, 1323, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	1338, 1308, 0, 0, 1329, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 1329, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 1329, 2764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 2763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 1302, 0, 0, 0, 2731, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 1326, 1327,
	1328, 1302, 0, 0, 0, 0, 0, 1308, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	1340, 1350, 0, 0, 1330, 1331, 1332, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 1325, 1326, 1327,
	1328, 1302, 0, 0, 0, 0, 1338, 1308, 0, 1322,
	0, 0, 0, 1323, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 1325, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 1338, 1308, 0, 0,
	1329, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	1329, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	1329, 2551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 2524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 1302, 0, 0,
	0, 1836, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 3128, 1322, 0, 0, 0, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 2288, 1329, 0, 2287, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 3127, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 2205, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 0, 2178, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 1939,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 1938, 2179, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 0, 1322, 0, 0, 0, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	728, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 0, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 2293, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 0, 1322, 0, 0, 2298, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 2528, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 0, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 2237, 0, 0,
	1303, 0, 0, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 0, 1308, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 1336, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 1349, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1338, 1308, 0, 1322, 0, 0, 0, 1323,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 2256, 0, 0, 0, 0, 1317,
	1318, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 1338, 1308, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 1329, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1348, 0, 0, 0, 0,
	1300, 1301, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 1339, 1303, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 1302, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 0, 0, 0,
	1303, 1300, 1301, 1349, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 2505, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1303, 1302, 1325, 1326,
	1327, 1328, 0, 0, 0, 1322, 0, 0, 1308, 0,
	0, 0, 1319, 0, 0, 0, 0, 1300, 1301, 0,
	0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 1303, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 0, 0, 1302,
	0, 0, 0, 1308, 2190, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 0, 0, 1340, 1350, 0, 1308,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2183, 1346, 1347, 0, 0, 0, 1330, 1331, 1332, 1317,
	1318, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 0, 1338, 0, 0, 1308, 0, 0, 0, 1323,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 0, 1324, 0,
	0, 0, 1330, 1331, 1332, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 1323, 0, 0, 0, 1617, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 1324,
	1628, 1613, 1618, 1601, 1638, 1637, 0, 0, 0, 1603,
	1602, 0, 0, 0, 0, 0, 0, 1647, 1646, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 0, 1635, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 1633, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 1632, 1630, 1631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 0, 0, 1612, 0, 0, 0, 0,
	0, 1617, 0, 0, 0, 0, 1621, 1616, 1622, 1623,
	1624, 1625, 1626, 0, 1620, 0, 0, 0, 0, 0,
	0, 0, 0, 1644, 1645, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 1628, 1613, 1618, 1601,
	1638, 1637, 0, 0, 0, 1603, 1602, 0, 0, 0,
	0, 0, 1605, 1647, 1646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1636, 0, 0, 0, 1614,
	1615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1639, 0, 1635, 1634, 0, 0, 0, 0,
	0, 0, 0, 1629, 1633, 0, 0, 1757, 1755, 1756,
	1759, 1758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1632, 1630, 1631, 659, 0, 690, 0, 0,
	1606, 1607, 1608, 1609, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1627, 1610, 0, 666, 0, 0,
	0, 1612, 0, 0, 0, 1649, 0, 0, 0, 664,
	0, 0, 1621, 1616, 1622, 1623, 1624, 1625, 1626, 0,
	1620, 0, 1604, 0, 0, 1640, 1641, 1642, 1643, 1644,
	1645, 0, 0, 665, 0, 0, 0, 0, 667, 0,
	0, 0, 695, 0, 0, 0, 0, 0, 673, 674,
	1611, 0, 0, 685, 0, 1648, 0, 0, 1605, 0,
	0, 0, 0, 0, 0, 0, 691, 668, 0, 0,
	0, 1636, 0, 0, 0, 1614, 1615, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1629,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 671, 0, 0, 0, 1606, 1607, 1608, 1609,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 1610, 0, 677, 0, 0, 0, 0, 0, 0,
	672, 1649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 676, 0, 0, 0, 0, 1604, 0,
	0, 1640, 1641, 1642, 1643, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1611, 0, 0, 0,
	0, 1648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 661, 680, 693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 681, 0, 0, 0,
	696, 697, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	686,
}
var sqlPact = [...]int{

	6045, -1000, -12, -1000, -1000, -1000, 198, -1000, -1000, -1000,
	-1000, 197, 195, 192, -1000, 188, 184, 181, 178, 176,
	175, 169, 168, 162, 158, 157, 156, -1000, -1000, 154,
	-1000, -1000, -1000, -1000, 152, 150, 149, -1000, 148, 1392,
	31387, 138, 136, 135, 1551, 49498, 1515, 134, 133, -1000,
	132, 1537, 36769, 1084, 1629, -1000, 131, 126, 1549, 49117,
	309, 1939, 34066, 36382, 1990, 48730, 31000, 1924, 33679, 48343,
	-1000, -1000, 1095, -1000, -1000, 47956, 125, 124, 123, 122,
	120, -1000, 119, 47569, 118, 116, 106, 104, 103, 102,
	101, 98, -1000, 97, 95, 94, 92, 91, 89, 88,
	80, 78, 77, 75, 74, 73, 72, 71, 70, -1000,
	58153, 68, 66, 65, -1000, 1337, 64, 63, 62, 57,
	56, -1000, -1000, 55, 54, 53, 52, 51, 49, -1000,
	108, 48, 47, 46, 45, 44, -1000, 1120, 737, 1912,
	13711, 1264, 1250, 1249, 1211, 1243, 774, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52165, 49498, 42, -39, 39,
	-1000, 2326, 775, 23601, 6045, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35995, 35608, 35221,
	29470, 47182, 46795, 10825, 10825, 972, -1000, -1000, -1000, -1000,
	-1000, -14, 32530, 49498, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, 20002, 697, 19578, 840, 19154, 366,
	381, -1000, -1000, -1000, 267, -1000, -1000, -1000, -1000, 1298,
	-1000, -1000, -1000, -1000, 46408, 46021, 2011, 45634, 29073, 28676,
	45247, 1799, 1792, 44860, -1000, -1000, 44473, -1000, -1000, 2223,
	1915, 1901, 34834, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 44092, 43705, 43318, 42931, 42544, 28279, 27882, 607,
	-1000, -1000, -1000, -1000, 7156, 605, -1000, -1000, -1000, -1000,
	-1000, 36, -1000, 35, 33, -1000, 32, 29, 25, 22,
	21, 20, 19, 18, -1000, 3, -1, -1000, -2, -4,
	-1000, -6, -9, 1548, 1507, 1105, 42157, 1071, 49498, -1000,
	1513, -5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 603,
	49498, -1000, -1000, 20412, 82, -1000, 602, -1000, 1944, -1000,
	20412, 82, -1000, 1509, 243, 1421, -1000, -1000, -1000, 1342,
	1048, -1000, -1000, 49498, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2587, 1430, 600, 41770, -1000, 1754, -1000, 744, 14531,
	-1000, 924, -1000, 14531, 258, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1670, 1170, 2538, 27485, 1472, 2383, 2213, 2586, 1716,
	2211, 2204, 2163, 2134, 2131, 2585, 1167, 2584, 1028, 865,
	2582, 2125, 2095, 2563, 1436, 861, 2581, 2580, 2055, 1940,
	-1000, -1000, -1000, -1000, 1103, -1000, -1000, -1000, -1000, -1000,
	-1000, 38293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1662, 2348, 2348, 2348, 2413, 356,
	348, -1000, 108, -1000, 1789, -1000, 1425, -1000, -1000, -1000,
	57275, -1000, -1000, 20412, 20412, 20412, 20412, 20412, 1313, -1000,
	-1000, -1000, 634, -1000, 598, 487, 12056, -1000, -1000, 2513,
	-1000, -1000, -1000, 353, 20412, -1000, 251, -1000, -1000, -1000,
	-1000, 594, 2569, -1000, 768, -1000, -1000, -1000, 754, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2009, 584, 579, -1000,
	578, 576, 575, -1000, -1000, -1000, 571, 561, 557, 551,
	550, 542, 538, 537, -1000, -1000, -1000, 1244, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 776,
	-1000, 776, 776, 490, 490, 535, 532, 491, 528, -1000,
	-1000, 527, 490, 526, 523, -1000, -1000, 521, 731, -1000,
	688, 519, 517, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1471, -1000, -1000, 1471, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 971, 51022, -1000, -1000, -1000, -16, 49498,
	-1000, 381, -16, -1000, -1000, 513, -1000, 14941, 14941, 14941,
	-1000, -1000, 1504, 20412, -1000, 1815, -1000, 5984, -217, 690,
	24762, -1000, 22827, 690, 640, 27088, -1000, 1934, -1000, -1000,
	511, 241, -1000, -1000, -1000, -1000, -1000, -1000, 1580, 2200,
	957, -1000, 1207, 2198, -1000, 2136, 2197, 1195, -1000, -1000,
	762, 2195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1362, -1000, -1000, 1396, 2188, -200, 2072, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1530, -1000, 29851, 32530,
	-17, -1000, -1000, -42, -1000, 10430, 57275, -1000, -1000, -1000,
	57275, 692, -1000, -1000, 2187, -1000, 57275, 685, -1000, -1000,
	2185, -1000, 1925, 49498, 10825, 49498, 49498, -1000, 509, 1615,
	1487, -1000, -1000, 32149, 2136, 1614, -1000, -1000, 757, 1611,
	-1000, -1000, 1603, -1000, 381, -1000, -1000, 41383, 51784, 757,
	1600, -1000, -1000, -1000, 38293, -1000, 49498, -1000, 49498, -1000,
	1090, -1000, 51403, 142, 2184, -1000, -1000, 142, 2183, -1000,
	142, 2179, -1000, 141, 2166, -1000, -1000, 1399, 2165, -1000,
	-51, 2141, -1000, -1000, -51, 2138, -1000, -1000, 20412, -44,
	-1000, -1000, -1000, 775, 30613, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40996, 29851, 32149, 49498, 34447, 29851, 583, 57275,
	-1000, 2484, 58017, 29851, 57275, -1000, 32149, 49498, 2002, -1000,
	40609, 40222, 2363, 743, -1000, -1000, 49498, -1000, 20412, -1000,
	2482, 1635, -31, -1000, -1000, -1000, -1000, -1000, 1651, 1682,
	904, 1210, -1000, 14531, 14531, 2244, -1000, 238, 10825, -1000,
	-1000, 1027, 1694, -1000, -1000, -1000, -1000, 29851, 29851, -1000,
	39835, -1000, -1000, -1000, 1417, 49498, -1000, -1000, 1991, -1000,
	31768, 49498, -1000, 49498, -1000, 49498, -1000, 49498, -1000, 49498,
	-1000, -1000, -1000, -1000, -1000, 2124, 1266, 1981, -1000, 49498,
	-1000, 49498, -1000, -1000, -1000, 1646, -1000, -1000, -1000, 39454,
	39067, 38680, -1000, -1000, 1177, -1000, 1024, -1000, -1000, 145,
	-1000, -1000, 1662, -1000, 1439, 1720, 18730, 1645, 20412, 108,
	-1000, -1000, 108, 108, 13287, -1000, -1000, -1000, 49498, -1000,
	57851, 58017, 10825, 979, 20412, 20412, 20412, 20412, 20412, 20412,
	20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412,
	20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412,
	20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, 1474,
	20412, 969, 20412, 20412, 20412, 20412, 1557, -1000, -1000, 1369,
	431, 1372, -1000, 2515, 2515, 2515, 6740, 6740, 435, 634,
	-1000, 20412, -1000, 82, 20412, 348, 55489, 1520, -15, 11646,
	-1000, -1000, -1000, -1000, 18306, 773, 57275, 10035, 11222, -1000,
	2554, 962, 2021, 1842, 508, 682, 680, 673, 671, 654,
	20412, 20412, 20412, 20412, 20412, 20412, 20412, 20412, -1000, -1000,
	-1000, -1000, -1000, -1000, 2513, -1000, 17896, 17472, -1000, 2553,
	17048, 16624, -1000, 16200, 21642, 15776, 978, 977, 961, 944,
	20412, 12466, -1000, -31, -1000, 51022, -1000, 49498, -16, 2480,
	20412, 226, -1000, 56345, -1000, 226, 226, 507, -45, 57275,
	1711, 1709, 23988, 1673, 1326, 1326, 1326, -1000, 506, 628,
	690, 7646, 37150, 1360, 690, 690, 146, 266, 346, 22440,
	1815, 37150, -1000, -1000, 49498, 503, 11222, 10825, -23, 1274,
	-1000, 33292, 2317, 2304, 2284, 1078, -1000, 1059, 2404, 38293,
	2428, 82, 2342, 1923, -1000, -1000, 959, 38293, 2136, -1000,
	58017, -1000, 1785, 2403, 1117, 1096, 1117, 1117, 1092, 38293,
	958, 1290, 29851, 2322, 956, -25, 2426, 82, 2314, 1911,
	955, -1000, -1000, 49498, 10825, 2311, 1021, 672, -17, 32530,
	49498, 232, -1000, 20412, 82, 20412, 82, 1042, -50, 231,
	1724, 1718, 146, -1000, 32911, 2478, 2128, 49498, 1734, -1000,
	2136, 2127, -1000, 1275, -1000, 2121, 2120, 2460, 1486, 1599,
	-1000, -1000, -1000, 1481, 1588, 990, 2115, 769, 601, 2459,
	601, 26314, -1000, 49498, -1000, 49498, -1000, -1000, 49498, -1000,
	49498, -1000, 49498, -1000, 49498, 49498, -1000, 49498, 29851, 29851,
	29851, -52, 5134, 30613, -59, 756, 954, -85, -1000, 342,
	49498, 805, 32911, 635, -60, -1000, 1006, -1000, -1000, -1000,
	236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 776, 501,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 491, 1244, 490, 490, 490, -1000, -1000, -1000,
	731, -1000, 688, -1000, -1000, -1000, 776, 776, -1000, -1000,
	-185, 1902, -42, 34447, 672, -1000, 672, -1000, 1956, -1000,
	2344, 707, -61, 846, -31, -1000, 1471, -1000, 1215, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2568, -1000, 2528, -1000, -1000, 2552, -18, -1000,
	-18, -1000, 10825, -1000, 49498, 1950, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 49498, -1000, 49498, -1000, -1000, -1000,
	-1000, -1000, -1000, 700, -1000, 1942, -1000, 5134, 218, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49498, 49498, 49498,
	-1000, 38293, -1000, -1000, -1000, -1000, 57275, -1000, 441, -1000,
	-1000, 57275, 1246, 1749, -1000, 1749, -20, -1000, 56275, 1689,
	49498, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 742, 940, 940, 925, 925, 925, 925,
	2519, 596, 3558, 233, 4507, 4507, 4507, 4507, 4507, 4507,
	4507, 4507, 5474, 369, 369, 5474, 5474, 5474, 5474, 5474,
	369, 369, 369, 4507, 4507, 4507, 6740, 57565, 57637, 20412,
	20412, 947, 1348, 431, 57591, 20412, 5486, 5486, 5486, 5486,
	-1000, 1186, -1000, -1000, -1000, -1000, 1898, 488, 21642, 21642,
	-1000, -1000, -1000, 12056, 20412, -1000, -1000, -1000, -1000, 487,
	20412, -1000, 55845, -243, 338, -186, 217, 49498, 20412, 627,
	-62, -1000, 1052, -1000, 20412, 216, -1000, -1000, -19, 20412,
	20412, 20412, 335, -1000, 332, -1000, 939, -1000, 938, 936,
	935, -1000, 485, 1318, 484, 481, 20412, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 57205, 53365, 53075,
	53005, 4368, 52935, 6599, -70, -71, 331, -1000, 1896, -186,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 326, -1000, 325,
	-72, -1000, -79, -1000, 324, -1000, 57135, -186, 323, 6442,
	-1000, 21642, 21642, 21642, -1000, 320, -1000, 55985, -1000, 741,
	740, 738, 736, 56845, 15352, 15352, 15352, 318, 56775, 20412,
	-186, -1000, -1000, 480, -80, 769, 14941, 23214, 10825, -1000,
	769, 769, 20412, -1000, 20412, 23988, 23988, 1657, 1707, 23988,
	-1000, -1000, -1000, -1000, 37150, 558, 690, 37150, -1000, 2513,
	1717, -1000, -1000, -1000, 49498, 381, -1000, 37150, 37150, 10825,
	690, -1000, 316, 25149, -19, 215, 1596, 49498, 49498, 49498,
	-1000, -1000, 1584, 50641, 1574, 58017, 49498, -1000, -1000, 478,
	477, 1688, 1679, 49498, 49498, 50260, 49879, 49498, 1297, 20412,
	1404, 1279, 82, -1000, 735, 476, 49498, 1179, -1000, -1000,
	-1000, -1000, -1000, 49498, -1000, -1000, 2549, -1000, 1117, -1000,
	-1000, -1000, 1117, 2136, 1173, 49498, 29851, 760, 729, 49498,
	1251, 82, -1000, 728, 475, 10825, 1193, -1000, 716, 49498,
	1824, -1000, 1526, -1000, -1000, 9640, 57275, -1000, 57275, -1000,
	-1000, -1000, 10825, 1769, 1769, 315, -21, -1000, -1000, -1000,
	-1000, -1000, -1000, 1772, 49498, 573, 49498, 82, 49498, 206,
	756, 29851, 49498, 29851, 29851, 29851, 82, 49498, 2114, 49498,
	2106, 2135, 651, 49498, 1383, 20412, 1256, -1000, 25536, 783,
	49498, 1150, 177, -1000, -1000, -1000, 12, 49498, -1000, -1000,
	142, 142, 142, -1000, 141, 1399, -1000, -51, -51, -1000,
	-1000, -1000, 5134, 1891, 37912, 49498, 2495, -1000, 472, 29851,
	-82, -1000, 819, 898, 893, -1000, 58017, -1000, 633, 796,
	-1000, 2534, 470, 2513, -1000, 756, 49498, 144, -1000, 758,
	1604, -1000, 14531, 14531, -1000, 1471, -1000, -1000, 1156, -1000,
	1231, -1000, -1000, -1000, -1000, 14531, -1000, -1000, 1011, -42,
	-42, -1000, -1000, 562, -1000, 49498, -1000, -1000, -1000, -1000,
	1246, -1000, 20412, -1000, -1000, -1000, 13287, -1000, -1000, -1000,
	49498, -207, 20412, 20412, 57500, 4815, 20412, 21642, 21642, -1000,
	20412, 3922, -1000, -1000, -1000, -1000, -1000, 1890, 460, 20412,
	58017, 6278, 5808, -91, 5474, -1000, 20412, -1000, 9245, -93,
	55419, -1000, -1000, 632, 2208, -1000, 20412, 56705, 8850, 313,
	14121, -1000, 56415, -53, -53, -1000, 2565, 1601, 1329, 1205,
	1131, 2532, -1000, 26701, 770, 1383, 55349, 57851, 58017, 20412,
	20412, -1000, 20412, 20412, 20412, -1000, -1000, 2513, -1000, 20412,
	-1000, -1000, -1000, -1000, -1000, 1889, 20412, -1000, 57851, 58017,
	21642, 21642, 21642, 21642, 21642, 21642, 21642, 21642, 21642, 21642,
	21642, 21642, 21642, 21642, 21642, 21642, 21642, 21642, 21642, 1653,
	21642, 2512, 2512, 2512, -1000, 1918, 1889, 20412, 20412, -1000,
	-1000, -1000, -1000, 58017, 310, 307, 306, -1000, 20412, -186,
	635, -1000, 1836, -1000, -129, -1000, 1815, -1000, -1000, 1836,
	1836, -96, 57275, -1000, 1657, -1000, 457, 20412, 23988, -1000,
	624, -1000, -99, -1000, 37150, -1000, 621, -238, -1000, 664,
	-1000, 381, -1000, -1000, -1000, 212, 37150, -1000, -101, -1000,
	2443, 305, 10825, -1000, -1000, 934, 928, -1000, 2102, -1000,
	1571, -1000, 787, -1000, 1146, 20412, 24375, 456, 454, 1321,
	-1000, 2101, 1399, 2088, 1399, -1000, -1000, 702, -1000, 57275,
	453, 452, -1000, -23, 1212, -1000, 25933, 20412, -1000, 927,
	-1000, -1000, -1000, 2136, 923, -1000, -1000, 1262, 25933, -1000,
	-1000, -1000, 25933, 20412, -1000, -25, 921, 25933, 2060, 756,
	1886, 1032, -1000, -1000, -1000, -1000, -1000, -1000, 1767, 32911,
	49498, 451, 49498, 450, -1000, -1000, 448, 49498, -1000, -1000,
	2136, -1000, 757, -1000, -1000, 801, 10825, 446, 10825, 1671,
	651, 30232, -1000, 757, 1720, -1000, 57275, -1000, 1150, 12876,
	2300, -104, -1000, 211, -1000, -1000, -1000, 769, 26314, 23988,
	20412, 2578, -107, -1000, -1000, -1000, -1000, -1000, -1000, 82,
	-29, 445, -1000, 658, 657, -42, 1408, 29851, 49498, 49498,
	-1000, 2526, -1000, 620, 302, 2513, 301, -1000, -42, 49498,
	-1000, 1406, 10825, 49498, 49498, 10825, 49498, -1000, -1000, -31,
	-1000, -1000, -1000, -1000, 49498, -1000, -1000, -1000, 1429, 54993,
	-1000, 2345, 10825, 2447, 5486, 20412, 20412, 3798, 4289, 3938,
	5486, 20412, 20412, 58017, 5561, -109, 20412, 20412, -1000, 618,
	57275, -1000, -1000, -1000, -1000, -1000, -1000, 57275, 20412, 200,
	-1000, 2558, 20412, 300, 298, 297, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 296, -1000, -1000, 52546, -1000, 20412,
	294, -1000, 292, 290, 5337, 423, 54923, 54853, 54497, 289,
	57275, 1918, 57275, -1000, -1000, 795, 795, 1039, 1039, 1039,
	1039, 2512, 553, 617, 473, 382, 382, 382, 1394, 907,
	907, 382, 382, 382, 1879, 1659, 444, 6576, -1000, -1000,
	57275, 57275, 285, -1000, -1000, -1000, -186, 284, 1832, 2399,
	-1000, 23988, 1832, 1832, -1000, -1000, 49498, 57275, -1000, -217,
	-1000, 2513, -1000, -1000, 1717, -1000, 8055, -1000, 10825, -1000,
	-1000, 25149, -1000, 443, -1000, 109, 49498, 49498, 49498, 2079,
	-1000, 2510, -1000, 54427, -110, -1000, 2380, 2380, 20412, 146,
	24375, 49498, -1000, 1309, 1723, 836, 49498, -1000, 49498, -1000,
	-1000, 49498, 49498, 49498, 49498, 49498, -1000, 442, -112, 49498,
	49498, 29851, -1000, -1000, -117, 10825, -1000, 2310, -1000, 29851,
	902, 1251, 1812, -1000, 440, 24375, 439, 49498, 32911, 2439,
	-1000, -1000, -1000, 438, 1967, 1480, 24375, 1470, 1663, 651,
	30232, -1000, 990, 1150, -1000, -1000, -32, -1000, 449, 82,
	49498, 2576, 1383, -1000, -35, 57275, -1000, 653, -1000, 37531,
	37531, 29851, 29851, -1000, 283, 2234, 2232, 554, -1000, -1000,
	276, -1000, -42, 1592, -1000, -1000, 1299, 1479, -1000, -1000,
	-1000, -1000, -1000, 2345, 5486, 5486, 20412, 20412, 20412, 5486,
	5561, -120, -1000, 5486, 5486, -1000, 57275, 8455, -1000, 56415,
	-1000, -1000, -1000, -1000, 1300, -1000, 54357, -1000, -1000, -1000,
	20412, 20412, -1000, -1000, -1000, -1000, -1000, -1000, 21642, 1875,
	437, 58017, -1000, -1000, 766, 20412, 20412, 1815, 766, 766,
	-122, 690, -1000, -1000, -1000, 2513, 109, -1000, 2573, 10825,
	-1000, -1000, -1000, 49498, -1000, 49498, -1000, 10825, 49498, 1850,
	1563, -1000, -1000, 1678, 436, 21642, 49498, 701, -1000, 1311,
	24375, 2345, 10825, 2345, 54001, -123, -128, 1555, -1000, -1000,
	1550, 20412, -1000, 58017, 1399, 1399, -136, -137, -1000, 917,
	906, 20412, 905, -1000, -1000, -1000, 901, -1000, 693, -51,
	25933, -1000, -1000, 1303, 24375, -142, 24375, -145, 275, 82,
	24375, -1000, -1000, 49498, -147, 49498, -1000, 651, 30232, -1000,
	2135, -1000, 2210, 49498, 2274, -1000, -1000, -1000, 1720, 431,
	-1000, -152, -1000, -1000, -1000, 422, 403, -1000, -1000, -134,
	-1000, 689, 686, -1000, -1000, -1000, 10825, 1009, -1000, 5486,
	5486, 5486, -1000, -1000, -1000, 274, 1383, 2398, -1000, 53931,
	53861, 5459, 21642, 58017, -153, -1000, 49498, 57275, -186, -1000,
	-1000, -1000, 37150, 424, -1000, -1000, 1828, -1000, -1000, -1000,
	49498, 1568, -1000, -1000, 20412, 6576, 402, 20412, -1000, 1767,
	399, -1000, -1000, -1000, -1000, -1000, -1000, 2380, -1000, 1224,
	-1000, -1000, 57275, 2379, -1000, -1000, 397, 394, 49498, 49498,
	-53, 393, 392, 25933, -1000, 49498, -159, 1311, -161, -1000,
	1767, -1000, -162, 801, -1000, 391, 30232, -1000, 1671, 970,
	-167, 49498, 1150, -1000, -1000, 29851, 29851, 1592, -1000, 49498,
	-1000, 49498, -1000, 49498, -1000, 1153, 20412, -1000, -1000, 5459,
	-168, -1000, -148, -1000, 2435, -1000, -1000, -1000, -1000, 2077,
	53505, 1609, 49498, 53435, 1251, 49498, 2345, 49498, 793, 10825,
	1299, 1299, -1000, -1000, 273, 20412, 20412, -1000, 390, -1000,
	1767, 1311, 1251, 1311, 388, 24375, -1000, 1663, 1075, -1000,
	769, -1000, -1000, -169, -174, -1000, -175, -177, -1000, 272,
	21232, 21232, -186, -1000, 49498, 383, 2038, -1000, 1443, 1287,
	-3, 834, -1000, -180, -1000, 381, -1000, 20412, -1000, -187,
	-1000, 782, -188, -1000, 781, 2558, -189, -190, 49498, 1251,
	1767, -1000, 1767, 24375, -197, -1000, 26314, -1000, 756, 756,
	-1000, -1000, -1000, -1000, -1000, 22037, 1384, 1141, 55915, -1000,
	-1000, -1000, 49498, -1000, 1449, 1445, 1119, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1609, 57275, -1000, 1299, 1791, -1000,
	1299, 1856, -1000, -1000, -203, -1000, 1251, 1251, -204, -1000,
	-195, -1000, -1000, 2451, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2221, -1000, 827, 1695, 1695, 1443, -1000, 380, -1000,
	367, 1390, -1000, -1000, 1311, -1000, 20822, -1000, 2498, -1000,
	-1000, 1676, -1000, -1000, 20412, 20412, -1000, -1000, -1000, 1767,
	-1000, -1000, -1000, -1000, -205, -211, 1251, 1251, 880, -1000,
	-1000, 358, 20412, -214, 1251, -1000,
}
var sqlPgo = [...]int{

	0, 3053, 3051, 1933, 3050, 2438, 3049, 3048, 3046, 3044,
	3040, 2425, 3038, 3036, 3034, 3033, 3031, 3029, 3022, 3017,
	3015, 3014, 2994, 2988, 2987, 2986, 2985, 2983, 2981, 2975,
	2974, 2973, 2422, 2971, 2420, 2970, 2968, 2963, 2962, 2960,
	2959, 2958, 2957, 14, 2955, 2954, 2953, 2952, 2376, 2951,
	2945, 2369, 2944, 2940, 2363, 2938, 2934, 2933, 2333, 2321,
	2930, 2929, 2318, 2927, 2926, 2307, 2922, 2272, 2920, 2919,
	2249, 2918, 97, 107, 2917, 2239, 2915, 2914, 2210, 2196,
	2187, 2909, 2173, 2905, 2902, 2139, 2110, 2900, 1911, 2899,
	2897, 2895, 2894, 2094, 2070, 2892, 2891, 2890, 164, 2889,
	2043, 2888, 2886, 2884, 2882, 2880, 2879, 2878, 2877, 2876,
	2875, 2874, 2870, 2868, 2866, 2865, 2862, 2857, 2852, 2848,
	2846, 2845, 2843, 2832, 2829, 2828, 2826, 184, 120, 2825,
	2824, 2015, 2009, 2820, 2817, 44, 48, 17, 80, 123,
	177, 4795, 170, 2815, 2812, 2810, 2809, 2808, 30, 125,
	122, 115, 111, 99, 2806, 2803, 51, 37, 28, 24,
	82, 2802, 2801, 2800, 2191, 90, 2797, 2792, 173, 169,
	2791, 154, 2789, 31, 87, 73, 85, 583, 50, 2788,
	98, 18, 2787, 116, 165, 2786, 75, 29, 25, 1754,
	112, 55, 96, 189, 183, 146, 144, 121, 462, 2784,
	171, 68, 143, 2783, 2780, 2778, 52, 138, 5, 4,
	130, 9, 2777, 10, 2774, 12, 2772, 2771, 2769, 2767,
	23, 110, 34, 40, 2766, 59, 77, 137, 2765, 153,
	2763, 74, 2762, 175, 142, 2, 149, 2761, 81, 21,
	78, 2760, 2758, 92, 162, 2753, 38, 117, 86, 88,
	186, 152, 91, 150, 151, 2752, 2750, 2747, 124, 2745,
	134, 100, 2742, 2723, 113, 27, 2722, 54, 158, 42,
	2721, 2720, 105, 2718, 145, 2717, 2709, 2707, 185, 106,
	131, 6, 39, 94, 8, 156, 104, 57, 62, 2704,
	3987, 1473, 1334, 101, 2698, 95, 58, 33, 79, 103,
	168, 32, 2694, 2693, 1280, 2689, 2688, 2686, 128, 2685,
	2676, 2675, 93, 35, 71, 2674, 109, 47, 114, 180,
	65, 147, 139, 174, 126, 2671, 132, 102, 2665, 141,
	163, 45, 2664, 1153, 2663, 136, 2658, 2651, 2648, 2646,
	946, 2645, 2643, 2641, 961, 2640, 108, 2637, 133, 129,
	159, 61, 135, 160, 155, 1156, 2635, 140, 49, 2634,
	266, 36, 0, 3909, 3573, 2633, 148, 89, 2632, 2631,
	2630, 2626, 26, 11, 3, 7, 15, 13, 209, 16,
	2625, 2622, 196, 83, 118, 2621, 181, 157, 2616, 2615,
	2614, 56, 2612, 22, 2611, 19, 2610, 2608, 20, 1,
	2606, 2605, 161, 2603, 2602, 2601, 2428, 2599, 178, 2598,
	2596, 2594, 2593, 2079, 2592, 2591, 43, 72, 127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 408, 408, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	407, 407, 152, 152, 151, 147, 147, 410, 410, 153,
	153, 153, 155, 155, 32, 32, 86, 86, 86, 138,
	79, 79, 79, 79, 79, 74, 74, 360, 360, 361,
	361, 134, 134, 135, 135, 135, 135, 136, 136, 137,
	137, 137, 46, 34, 34, 34, 34, 34, 34, 34,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 44, 44, 128, 128,
	47, 47, 47, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 58, 58, 56, 328, 328, 59, 59, 60,
	60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	61, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 68, 68, 68, 69, 69, 69, 66, 66, 66,
	64, 64, 64, 63, 63, 63, 67, 67, 67, 65,
	65, 65, 234, 234, 70, 70, 70, 70, 70, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 73, 73, 73, 73, 73,
	73, 73, 73, 330, 330, 71, 71, 302, 302, 75,
	75, 259, 259, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 87, 87, 87, 87, 406, 406, 227, 227,
	168, 168, 168, 168, 82, 82, 82, 82, 83, 83,
	83, 84, 84, 133, 133, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	43, 94, 94, 94, 96, 93, 93, 93, 95, 95,
	95, 95, 97, 97, 98, 98, 98, 98, 98, 98,
	99, 99, 354, 354, 237, 237, 352, 352, 353, 353,
	204, 204, 204, 204, 204, 205, 205, 205, 359, 359,
	359, 359, 359, 359, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 118, 118, 118, 127, 127,
	127, 127, 127, 127, 127, 120, 120, 120, 111, 111,
	101, 101, 101, 101, 107, 107, 107, 107, 107, 102,
	102, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 103, 103, 103, 103, 114, 114, 114, 114, 113,
	113, 123, 123, 123, 123, 123, 123, 123, 315, 315,
	119, 119, 119, 119, 122, 122, 122, 122, 117, 117,
	117, 121, 121, 124, 124, 124, 124, 104, 104, 105,
	105, 106, 106, 125, 125, 116, 116, 126, 126, 126,
	126, 126, 126, 126, 115, 115, 115, 409, 409, 109,
	404, 404, 402, 402, 402, 402, 402, 402, 402, 403,
	403, 405, 405, 80, 80, 80, 52, 52, 53, 53,
	206, 206, 207, 207, 283, 283, 283, 283, 208, 208,
	154, 154, 154, 211, 212, 212, 209, 209, 210, 210,
	210, 214, 214, 213, 216, 216, 215, 282, 370, 370,
	371, 371, 371, 371, 371, 371, 371, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 368, 368, 368,
	369, 366, 366, 367, 367, 367, 367, 411, 411, 281,
	281, 220, 220, 373, 373, 373, 373, 374, 374, 374,
	374, 374, 377, 376, 375, 375, 375, 375, 375, 311,
	311, 311, 57, 57, 57, 248, 248, 247, 247, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 130, 130, 54, 54, 54, 160, 160, 51,
	51, 51, 55, 55, 50, 50, 50, 50, 50, 265,
	265, 265, 263, 263, 225, 225, 317, 317, 317, 172,
	172, 173, 173, 148, 148, 148, 20, 22, 22, 16,
	16, 16, 16, 16, 16, 29, 29, 30, 30, 26,
	26, 264, 264, 266, 266, 81, 81, 85, 85, 85,
	91, 91, 129, 129, 129, 129, 129, 129, 129, 33,
	33, 33, 33, 45, 45, 45, 45, 89, 414, 414,
	414, 90, 90, 413, 413, 167, 167, 167, 167, 169,
	169, 278, 278, 279, 279, 415, 415, 280, 280, 280,
	162, 161, 163, 163, 49, 49, 49, 156, 156, 157,
	157, 158, 158, 159, 159, 416, 416, 78, 78, 78,
	132, 132, 200, 200, 274, 274, 274, 221, 221, 178,
	178, 277, 277, 275, 275, 275, 246, 246, 246, 131,
	131, 230, 230, 239, 239, 240, 240, 325, 325, 241,
	88, 88, 141, 141, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 142, 142, 142, 142, 142, 142, 142,
	145, 145, 145, 145, 146, 146, 146, 144, 144, 384,
	384, 384, 386, 386, 387, 383, 383, 385, 385, 412,
	412, 250, 250, 250, 218, 219, 217, 217, 417, 417,
	223, 223, 222, 224, 224, 316, 316, 316, 244, 244,
	244, 244, 269, 269, 267, 267, 268, 268, 270, 270,
	271, 271, 271, 272, 272, 273, 273, 243, 243, 298,
	298, 143, 143, 143, 229, 229, 229, 231, 231, 288,
	288, 288, 289, 289, 287, 287, 287, 287, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 319, 319, 232,
	232, 320, 276, 276, 400, 400, 400, 401, 401, 314,
	314, 321, 321, 321, 321, 321, 321, 312, 312, 313,
	313, 326, 327, 327, 253, 253, 253, 253, 251, 251,
	252, 252, 322, 322, 322, 322, 245, 245, 323, 323,
	323, 284, 284, 331, 331, 331, 346, 346, 228, 228,
	228, 341, 341, 332, 332, 332, 332, 332, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	335, 335, 335, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 345, 345, 345, 345, 345, 336, 336, 342, 343,
	337, 338, 344, 344, 344, 344, 348, 348, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 340, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 261, 261, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	292, 292, 292, 292, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 378, 378, 378,
	378, 378, 378, 378, 378, 381, 381, 382, 382, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 388, 388,
	389, 389, 391, 391, 392, 392, 393, 394, 394, 394,
	395, 396, 396, 390, 390, 397, 397, 397, 398, 398,
	399, 399, 399, 399, 399, 304, 304, 310, 310, 310,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 170, 170, 170, 170,
	170, 236, 236, 235, 235, 301, 301, 299, 299, 303,
	303, 254, 254, 347, 347, 347, 347, 347, 347, 347,
	255, 255, 255, 262, 256, 256, 257, 257, 257, 257,
	257, 295, 296, 258, 258, 258, 297, 297, 305, 309,
	309, 308, 307, 307, 306, 306, 285, 285, 286, 286,
	242, 242, 418, 418, 238, 238, 324, 324, 324, 324,
	202, 202, 233, 233, 201, 201, 195, 195, 196, 196,
	196, 196, 226, 226, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 349, 349, 349, 350, 351,
	300, 188, 187, 175, 176, 186, 185, 184, 174, 177,
	181, 182, 183, 179, 180, 191, 190, 189, 329, 197,
	197, 198, 198, 198, 199, 199, 199, 199, 171, 171,
	192, 192, 193, 194, 194, 164, 164, 164, 165, 165,
	166, 166, 358, 358, 356, 356, 356, 357, 357, 357,
	357, 355, 355, 355, 355, 355, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	5, 8, 12, 12, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 5, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 1, 7, 3, 6, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 6, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 3, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 5, 6, 5, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 13, 16, 9, 12, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 1,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 2, 2, 1, 5, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 51, 78, 66, -54, -51, -48,
	-58, 80, 100, -385, 104, -62, -65, -67, 108, 116,
	121, 122, 146, 155, 257, 264, 286, 288, 290, 299,
	-40, -39, 117, -139, -141, 284, -83, -84, -93, -94,
	-95, -96, -133, 317, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	320, -33, -45, -90, -89, 365, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-384, -63, -64, -66, -68, -69, -142, -140, 421, 285,
	375, 37, 329, 67, 112, 294, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 392, 400, -145, -143, -144,
	-146, 306, 383, 342, 425, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, 342, 386, 307,
	376, 93, 168, 269, 255, -402, 2, 4, -364, -362,
	-196, -195, 342, 93, 30, 38, 39, 41, 44, 56,
	57, 58, 61, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 232,
	234, 247, 251, 261, 263, 272, 296, 323, 338, 354,
	355, 356, 362, 363, 383, 384, 388, 395, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 52, 55, 60, 65, 66,
	67, 68, 69, 74, 71, 72, 73, 76, 78, 79,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 113, 116, 117, 120, 118, 348,
	350, 119, 121, 122, 132, 133, 134, 136, 137, 139,
	141, 145, 147, 152, 153, 154, 155, 156, 157, 169,
	164, 170, 174, 177, 176, 178, 179, 180, 171, 185,
	188, 189, 190, 192, 193, 196, 197, 198, 201, 200,
	205, 206, 209, 210, 213, 215, 218, 219, 222, 220,
	221, 224, 225, 227, 226, 233, 235, 236, 238, 239,
	242, 243, 246, 249, 252, 253, 254, 255, 256, 257,
	258, 260, 262, 264, 266, 267, 268, 269, 270, 271,
	273, 274, 276, 277, 278, 279, 280, 284, 282, 283,
	285, 286, 287, 288, 290, 292, 293, 294, 295, 297,
	318, 319, 331, 299, 300, 301, 302, 303, 304, 305,
	309, 313, 310, 311, 312, 307, 308, 314, 315, 317,
	320, 322, 324, 325, 328, 329, 330, 332, 335, 336,
	337, 333, 334, 327, 340, 341, 343, 344, 345, 346,
	347, 349, 351, 352, 357, 360, 361, 365, 366, 368,
	369, 372, 373, 374, 379, 375, 377, 380, 381, 382,
	387, 393, 394, 396, 397, 398, -194, -164, 414, -193,
	424, 424, 424, 2, 189, 190, 268, 267, 314, 315,
	-189, -192, -193, -194, -164, 4, -362, -364, 93, 240,
	424, 424, 424, 2, 342, 330, 55, 307, 376, 292,
	386, -263, 185, 93, 371, -164, 264, 24, 2, 102,
	174, 374, 373, 24, 260, 308, 344, 346, 2, 424,
	424, 2, 386, 307, 342, 168, 93, 376, 292, -183,
	2, -164, -73, 2, 421, 27, -72, -5, -48, -58,
	-62, -75, -70, -11, -32, -34, -54, -51, -59, -65,
	-67, -79, -78, -80, -82, -86, -85, -88, -93, -94,
	-100, -131, -132, 80, 25, 108, 317, 117, 184, 2,
	-406, -227, 2, 24, -168, -164, 80, 146, 306, -138,
	342, 2, -164, 189, 190, 2, -183, 2, -402, 2,
	189, 190, 2, -406, -227, 23, 2, -164, 2, 303,
	320, -169, 2, 299, -164, 424, 424, 424, 424, 424,
	424, 210, 60, 296, 314, -98, 361, -97, 354, 301,
	-99, -354, 2, 222, -164, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 2,
	-127, 314, 330, 153, 36, 60, 24, 65, 94, 147,
	168, 169, 197, 75, 76, 267, 210, 190, -315, 119,
	315, 343, 302, 340, 361, 80, 377, 293, -409, 118,
	4, 93, 222, 316, 354, 69, 347, 348, 424, 424,
	424, -412, 2, 342, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, -140, -142, -141, 424, 424,
	424, 424, 424, -222, -223, 370, 182, 114, 245, -139,
	-141, 2, -384, -127, 314, 2, 60, 24, -352, 2,
	-290, 240, -292, 412, 413, 407, 228, 399, -304, 99,
	217, 216, -294, -305, 115, 296, 421, -199, -293, 427,
	9, -381, -141, 31, 53, -197, -164, 7, 8, 5,
	6, -171, -333, -300, -340, 364, 125, 231, -378, -379,
	-198, 4, -362, -356, -334, -343, -338, -339, -341, 42,
	49, 48, 351, 221, 309, 310, 311, 312, 324, 379,
	164, 40, 238, 239, 176, 183, 63, 85, 86, 84,
	89, 88, 90, 87, 316, 376, 54, 30, 158, 159,
	163, 232, 160, 61, -380, 43, 95, 107, 136, 137,
	177, 178, 179, 180, 192, 193, 334, 357, 39, 41,
	44, 56, 57, 97, 98, 123, 124, 135, 148, 175,
	181, 203, 234, 251, 261, 272, 323, 338, 354, 355,
	356, 362, 363, 384, -363, -344, 81, 126, 144, 173,
	161, 186, 187, 191, 204, 207, 223, 230, 248, 250,
	291, 321, -413, 2, 361, 361, 2, -413, 2, -413,
	2, -167, 2, 361, 358, -414, 361, 395, -386, 273,
	-387, -183, -386, 424, 424, 426, 424, -217, -218, -219,
	2, 24, 105, 421, 2, -318, 2, 419, -322, -141,
	199, -321, 421, -319, -189, 241, -382, 297, -378, -379,
	-171, -164, -198, 4, 217, 216, -3, 2, -322, 158,
	-189, 2, -322, 158, 2, -190, 158, -322, -192, 2,
	-360, 158, -358, 9, -357, 5, 4, -362, -364, -363,
	63, 2, -174, -164, 2, -201, 158, -189, -186, -355,
	4, -362, -364, -363, -365, 24, 26, 27, 28, 29,
	31, 32, 33, 34, 45, 53, 54, 59, 62, 64,
	75, 80, 84, 85, 87, 86, 88, 89, 90, 99,
	101, 103, 105, 106, 109, 112, 114, 125, 127, 140,
	142, 143, 146, 149, 151, 162, 168, 172, 182, 184,
	199, 202, 208, 211, 212, 228, 229, 231, 237, 240,
	241, 244, 245, 259, 265, 275, 289, 306, 316, 326,
	339, 342, 353, 358, 359, 364, 370, 371, 376, 378,
	385, 386, 389, 390, 391, 392, -187, -355, 358, 426,
	-233, -195, -196, -226, -164, 423, -290, 2, -88, 2,
	-290, 158, 2, -88, 158, 2, -290, 158, 2, -88,
	158, 2, -220, 421, 423, 342, 64, 2, -189, 158,
	-179, 2, -164, 140, -190, 158, 2, -192, -360, 158,
	2, -360, 158, 2, -191, 2, -189, 168, 168, -174,
	158, 2, -164, 24, 143, 2, 184, 2, 184, 2,
	-323, 2, -322, -234, 158, 2, -189, -234, 158, 2,
	-234, 158, 2, -202, 158, 2, -201, -174, 158, 2,
	-361, 158, 2, -360, -361, 158, 2, -259, 421, -330,
	2, -329, -357, 383, 421, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 314, -138, 240, 358, 426, 421, -189, -290,
	-88, -302, 421, 143, -290, -88, 240, 143, 242, 2,
	93, 342, 398, 24, -164, 2, 318, 2, 421, -98,
	58, 361, -279, 2, -280, -161, -162, -163, 188, 266,
	271, 398, -352, 358, 404, 143, -352, -237, 423, -127,
	2, 140, 378, 2, 7, 2, -360, 270, 132, 2,
	318, 2, 267, 315, 60, 143, 2, 2, -404, 2,
	240, 143, 2, 143, 2, 143, 2, 143, 2, 143,
	2, 2, 267, 315, 2, 360, 198, 360, 2, 143,
	2, 143, 2, 5, 2, 188, 266, 331, 2, 342,
	386, 307, 2, 2, 143, 2, 143, 398, 2, -245,
	-322, -222, -223, -244, -267, -268, 208, 127, 237, -250,
	24, 105, -250, -250, 47, 422, 422, -127, 318, 2,
	10, 11, 62, 35, 412, 413, 414, 415, 138, 416,
	417, 410, 411, 409, 402, 403, 406, 194, 195, 77,
	405, 404, 70, 214, 298, 128, 129, 130, 131, 281,
	165, 166, 167, 13, 14, 15, 28, 244, 207, 399,
	161, 321, 407, 16, 17, 18, 186, 187, 230, 38,
	162, -170, -203, -290, -290, -290, -290, -290, 250, -242,
	-285, 419, -141, 421, 421, -141, -290, -304, -235, 421,
	-351, 7, -141, -299, 419, -306, -290, 423, 421, 5,
	421, 5, -388, 393, 140, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 421, 263, -348,
	387, -348, -348, -335, 421, -335, 421, 421, -336, 421,
	421, 421, -335, 421, 421, 421, 394, 400, 394, 400,
	421, 421, -278, -279, -278, 358, -169, 426, -386, -220,
	421, -238, -324, -290, 414, -238, -238, 240, -235, -290,
	81, -253, 191, 223, 144, 204, 291, 173, -351, -73,
	-287, 427, -314, 400, -141, -319, -164, -141, -321, 421,
	-318, -314, 414, -189, 421, 143, 421, 423, -150, 282,
	-149, 22, 25, 108, 381, 120, -210, 170, 255, 115,
	327, -408, 117, 300, 349, 350, 282, 115, -247, -249,
	32, 91, 225, 252, 50, 156, 216, 217, 329, 115,
	282, 392, 115, 117, 282, -152, 327, -408, 117, 300,
	282, -151, -210, 115, 427, 117, 235, -360, -233, 426,
	426, -355, 414, 115, 115, 115, 115, 143, -226, -355,
	-189, -197, -164, -198, 421, -220, 228, 240, -402, -248,
	-247, 228, -160, -383, 392, 228, 228, -220, -176, 158,
	2, -165, -164, -176, 158, -383, 228, -323, -200, -189,
	-200, 317, -183, 32, -153, 426, 52, 287, 115, -153,
	115, -153, 115, -153, 426, 115, -153, 115, 426, 115,
	115, -235, 422, 426, -330, -360, -402, -226, -168, -360,
	143, 80, 421, 32, -301, -331, -332, -333, -342, -337,
	-340, 42, 49, 48, 351, 221, 309, 310, 311, 312,
	324, 379, 164, 40, 238, 239, 176, 4, 41, -344,
	183, 175, 177, 178, 179, 180, 181, 323, 39, 272,
	136, 137, 135, 107, 98, 97, 234, 44, 43, 95,
	354, 355, 356, 357, 192, 193, 57, 56, 384, 334,
	-361, -402, -226, 140, -174, 2, -189, 2, 71, 72,
	398, -354, -235, 32, -279, 2, -415, 426, 206, -205,
	213, 227, 152, 241, 396, -359, 5, 4, -300, -311,
	99, 210, -340, 8, 413, -349, 7, 412, -353, -352,
	-353, 83, 423, -355, 342, 192, -360, -360, -354, 24,
	319, 2, -189, -405, 140, -403, 292, -402, -189, -189,
	-189, -189, -189, 140, 2, 360, 2, 140, -164, -164,
	206, -189, 2, -191, 2, -190, 2, 342, 168, 342,
	-153, 426, -244, -268, -267, -270, -290, 24, -273, 134,
	224, -290, -292, -140, -140, -140, -224, -316, -290, 265,
	168, -354, -346, -331, -345, 277, 278, 276, 280, 279,
	-331, -188, -355, 354, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, 207,
	161, 321, 38, 162, -290, 358, -290, -290, -290, -290,
	220, 228, 231, 364, 125, 372, 105, 235, -418, 339,
	34, -297, -141, 421, -310, 29, 326, 24, -304, 296,
	421, -285, -290, -286, -236, -235, 422, 32, 426, -236,
	-303, -299, -309, -308, 389, -355, 414, 422, -235, 385,
	24, 105, 414, 2, 7, -260, 397, 219, 96, 154,
	218, -261, 305, -389, 133, 149, 421, 422, 2, 422,
	2, 422, 2, 422, 2, 422, 2, -290, -290, -290,
	-290, -290, -290, -290, -235, -351, -254, 2, -347, -235,
	4, 397, 219, 96, 154, 218, 305, -254, 2, 7,
	-235, 2, -235, 2, -255, 2, -290, -235, -256, -291,
	-292, 412, 413, 407, -304, -257, 2, -290, -236, 354,
	354, 354, 354, -290, 45, 202, 359, -258, -290, 143,
	-235, -169, -387, 32, -235, -229, 426, 143, 32, 4,
	-229, -229, 421, 422, 426, 191, 191, -318, -253, 191,
	-251, 248, -251, -251, -400, 421, 420, -314, -175, 419,
	428, -355, -313, -312, 32, -183, 246, -314, -314, 423,
	422, -313, -189, 421, -235, -355, 426, 358, -264, 75,
	64, -282, 158, 64, -366, -177, 75, -367, -164, 59,
	371, 265, 142, -264, 75, -264, 75, 75, 317, 330,
	47, -322, 35, -88, 73, 143, 358, -322, -249, -331,
	91, 216, 217, 47, -350, -349, 413, -350, 47, -350,
	-350, -350, 392, -190, -322, 358, 256, -360, 73, 358,
	426, 35, -88, 73, 143, 358, -201, -175, 73, 342,
	-327, -326, 401, -195, -164, 423, -290, -88, -290, -88,
	332, 422, 423, 186, 186, -206, -207, -164, -283, -282,
	-368, -369, -366, 185, 168, 371, 126, 32, 115, -226,
	-328, 184, 115, 256, 115, 115, 32, 240, 228, 240,
	228, -156, 345, 115, -284, 390, -274, -88, 421, 99,
	32, -274, -239, -240, -325, -241, -177, 421, -183, -189,
	-234, -234, -234, -201, -202, -174, -360, -361, -361, 422,
	-73, -329, 422, -137, 392, 358, 392, 422, -138, 378,
	-207, -72, 25, 80, 108, 422, 426, -228, 31, 419,
	-260, 421, -348, 421, -137, -326, 143, -227, -327, -327,
	140, 72, 404, 358, 422, 361, -280, -204, 271, 325,
	283, 313, 8, 7, 7, 426, -355, -189, 140, -226,
	-226, 314, -73, 140, -73, 423, -189, -201, -189, -322,
	-271, -349, 421, -272, 296, 297, 426, -148, 33, 103,
	196, -189, 398, 113, -290, -290, 358, -418, 339, -297,
	113, -290, 220, 231, 364, 125, 372, 105, 235, 143,
	421, -291, -291, -235, -290, 420, 430, 422, 423, -226,
	-290, 420, 420, 426, -307, -308, 109, -290, 423, -417,
	426, -222, -290, -235, -235, 422, 422, 358, 358, 358,
	358, 421, -394, 249, 421, 421, -290, 32, 426, 426,
	426, 422, 426, 426, 426, 422, 422, 426, 422, 143,
	422, 422, 422, 422, 422, -262, 259, 422, 10, 11,
	412, 413, 414, 415, 138, 416, 417, 410, 411, 409,
	402, 403, 404, 70, 214, 298, 13, 14, 15, 186,
	162, -291, -291, -291, 422, -295, -296, 143, 140, 398,
	398, 398, 398, 32, -258, -258, -258, 422, 143, -235,
	421, 422, -284, -324, -231, 2, -318, -185, -355, -284,
	-284, -235, -290, -318, -318, -252, 378, 240, 191, -318,
	-312, 422, -401, -351, -314, -313, -351, -289, -288, 141,
	226, -183, -220, -313, -313, -355, -314, 422, -232, -320,
	-382, -417, 423, -149, -189, -177, -184, -164, 228, -282,
	158, -155, 228, -331, -184, 421, 421, 196, 196, -177,
	-184, 158, -177, 158, -184, -184, -407, 271, 236, -290,
	209, 269, 229, -150, 282, -88, 398, 421, -191, 282,
	-197, -350, -350, -247, 282, -190, -360, 392, 398, -174,
	-151, -88, 398, 421, -175, -152, 282, 398, -189, -134,
	157, 235, 414, -355, -128, 5, 231, -128, 422, 426,
	168, -176, 168, -182, -165, -88, -189, 143, -137, -360,
	-190, -360, -360, -360, -88, -189, 115, -189, 115, -157,
	111, -416, 404, -174, -223, -222, -290, -246, -277, 289,
	240, -221, -178, -177, 383, -183, -246, -230, 426, 143,
	404, 423, -221, -153, -153, -153, -153, -153, -73, 143,
	-136, 243, -135, -164, 5, -226, 23, 421, -360, 422,
	-331, 419, 420, 7, 7, 421, -351, -137, -226, 143,
	-41, 392, 269, 93, 342, 255, 168, -352, -352, -279,
	369, 68, 271, -352, 342, 314, -73, -164, -272, -290,
	-316, -189, 427, -290, -290, 113, 113, -290, -291, -291,
	-290, 113, 143, 421, -290, -301, 28, 28, 422, -286,
	-290, 414, -355, 422, 422, -299, 112, -290, 353, -355,
	414, 422, 385, -417, -417, -417, 5, 219, 154, 218,
	-261, 218, -261, -261, 7, -395, -180, 421, -164, 390,
	-222, 422, -346, -331, -290, -290, -290, -290, -290, -351,
	-290, -295, -290, -346, -331, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, 105, 228, 235, -291, -296, -295,
	-290, -290, -331, 422, 422, 422, -235, -72, -243, 149,
	-327, 426, -243, -243, 422, -252, 421, -290, -318, 420,
	422, 426, -313, 420, 426, 429, 404, -220, 423, -312,
	422, 426, -276, 32, 422, -355, 358, 358, 115, 228,
	380, -370, -367, -290, -225, -317, -177, -382, 421, -164,
	421, 421, -147, 108, 317, -266, 115, -153, 115, -153,
	396, 421, 421, 358, -264, 75, -293, -171, -235, 358,
	358, 256, -293, -293, -235, 358, -293, 117, -137, 143,
	341, -208, 171, -283, -165, 421, -176, 421, 421, -220,
	-189, -248, -160, -265, 378, -175, 421, -175, -158, 201,
	-416, -358, -383, -269, -267, -246, -238, 229, 74, 422,
	426, 423, -284, -240, -231, -290, 2, 422, -88, 426,
	421, 404, 404, 242, -360, -138, -138, 7, 420, 422,
	-351, 422, -226, 243, -186, -174, -189, -187, -201, -189,
	241, 422, -148, -175, -290, -290, 113, 28, 28, -290,
	-290, -301, 422, -290, -290, 420, -290, 423, 5, -290,
	422, 422, 422, 422, -396, -164, -290, 422, 422, 422,
	426, 426, 422, 422, 422, 422, 422, -296, 143, 105,
	235, 421, 422, 422, -298, 151, 47, -318, -298, -298,
	-226, -287, -351, -288, -175, 419, -355, -320, 421, 423,
	-177, -184, -282, 115, -371, 75, -372, 62, 126, 80,
	228, 231, 371, 265, 59, 99, 275, 32, 422, 422,
	426, -173, 62, -173, -290, -225, -226, 228, 336, 99,
	228, 99, 92, 366, -177, -184, -226, -226, -189, -177,
	-184, 421, 422, -191, -190, -360, 422, -175, 73, -361,
	354, -209, -210, 162, 421, -225, 421, -226, -206, 32,
	421, 145, 46, 240, -225, 240, -159, 200, -416, -358,
	-156, -246, -275, 421, 240, -88, -178, 2, -223, 404,
	-135, -136, -360, -360, 422, 92, 92, 420, 422, -42,
	-43, 168, 75, 258, -212, -211, 255, 235, -148, -290,
	-290, -290, 422, -355, 414, -417, -390, 255, 422, -290,
	-290, -291, 143, 421, -301, -391, 391, -290, -235, -391,
	-391, 422, -314, -351, 2, -282, -184, -188, -181, -164,
	126, 158, 231, 196, 421, -291, -189, 421, 2, -281,
	-411, 79, 337, -317, -148, -188, -148, 422, 422, 422,
	231, 231, -290, -331, -153, -153, 422, 422, 358, 358,
	-235, 358, 358, 398, -293, 253, -225, 422, -225, 422,
	422, -88, -225, -189, 422, -189, -416, -358, -157, 106,
	-226, 75, -269, -297, 422, 421, 421, 426, 24, 421,
	24, 421, -187, 342, 422, -223, 47, 422, 422, -291,
	-301, 422, -392, -393, -180, -313, 420, -372, -181, 228,
	-290, -166, 421, -290, -208, 421, -173, 275, -172, 62,
	421, 421, -177, -184, -417, 421, 421, -293, -189, 422,
	-281, 422, -208, 422, -265, 421, -358, -158, 373, 229,
	422, -184, -246, -361, -361, -43, -226, -226, -189, -397,
	269, 297, -235, 422, 426, 32, 115, 422, -373, 215,
	-164, 422, -209, -226, -148, -189, -410, 378, -188, -214,
	-213, -211, -216, -215, -211, 422, -235, -235, 421, -208,
	-281, -209, -281, 421, -225, -159, 317, -284, 422, 422,
	422, 422, 422, -398, -399, 38, 368, 83, -290, -398,
	-393, -395, 126, -374, -377, -376, 240, 144, 254, 322,
	422, 336, 388, 422, -220, -290, 422, 426, 383, 422,
	426, 383, 422, 422, -226, -209, -208, -208, -225, 422,
	-239, -137, -137, -399, 262, 139, 296, 262, 139, -181,
	-376, 240, -377, 240, 373, 102, -373, -213, 162, -215,
	143, 422, -209, -209, 422, -284, 28, -375, 225, 287,
	52, 317, -375, -374, 421, 421, -154, 52, 287, -281,
	-399, 21, 231, 99, -235, -235, -208, 422, 422, -209,
	-209, 358, 421, -235, 422, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 183, 185, 187, 0, 0, 0, 210, 212, 214,
	215, -2, 0, 0, 0, 245, 246, 248, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 0, 860, -2, 0, 364, 366, 375, 377,
	379, 381, 382, 0, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 461, 463, 465, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	-2, 772, 774, 776, 778, -2, 62, 64, 66, 68,
	70, 72, 87, 218, 220, 222, 224, 227, 229, 231,
	897, 251, 253, 255, 257, 259, -2, 911, 0, 0,
	0, -2, 0, -2, -2, -2, 790, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 873, 875, 877,
	879, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1542, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618,
	1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658,
	1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
	1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1428, 1482, 1431, 1426,
	184, 186, 188, 189, 0, 0, 0, 0, 0, 0,
	672, 1467, 1480, 1481, 1482, 1485, 1486, 1487, 1542, 0,
	211, 213, 216, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 343, 1632, 345, 347, 0,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 247,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 342,
	340, 1462, 284, 285, 0, 0, 325, 326, 327, 328,
	329, 330, 332, 289, 291, 293, 294, 296, 298, 300,
	302, 304, 306, 308, 310, 311, 313, 315, 316, 318,
	320, 321, 323, 733, 0, 0, 0, 0, 0, 166,
	0, 357, 351, 356, 358, 360, 361, 362, 363, 0,
	0, 164, 159, 0, 0, 605, 338, 336, 0, 158,
	0, 0, 769, 0, 357, 1509, 355, 770, 771, 0,
	0, 765, 766, 1662, 800, 365, 367, 376, 378, 380,
	383, -2, -2, 1757, -2, 406, -2, 414, 1760, 1664,
	417, 0, 419, -2, 422, 445, 447, 449, 451, 453,
	455, 457, 459, 462, 464, 466, 468, 470, 472, 474,
	476, 478, 480, 482, 484, 486, 488, 490, 492, 494,
	495, 0, 0, 0, 0, 0, 499, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	498, 500, 501, 502, 0, 548, 587, 588, 773, 775,
	777, 0, 713, 899, 63, 65, 67, 69, 71, 219,
	221, 223, 225, 228, 230, -2, 871, 872, 252, 254,
	256, 258, 260, -2, 0, 903, 903, 903, 0, 0,
	872, 870, 0, 368, 0, 370, 0, 499, 373, 374,
	426, 427, 1114, 0, 0, 0, 0, 0, 1245, 1198,
	-2, -2, 1230, 1232, 1736, 1757, 0, 1234, 1235, 0,
	1237, 1241, 1242, 0, 1405, 1474, 1469, 1434, 1435, 1436,
	1437, 0, 0, 1440, 0, 1442, 1443, 1444, 1309, 1256,
	-2, -2, -2, 1478, 1028, 1029, 1030, 1031, 1032, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1769, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 0, 1725, 1742, 1743,
	1748, 1750, 1744, 1733, 1279, -2, -2, 1549, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1737, 1738, -2, 1740, -2,
	-2, 1749, -2, 1753, 1754, -2, -2, 1759, -2, -2,
	-2, 1763, 1764, -2, 1496, 1081, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1782, 1783, 1784, 1785,
	1786, 1787, 802, 780, 793, 802, 782, 783, 784, 785,
	786, 791, 792, 795, 0, 787, 788, 789, 889, 1639,
	892, 672, 890, 874, 876, 0, 878, 0, 0, 0,
	883, 906, 904, 0, 942, 887, 888, 898, 957, 980,
	0, 962, 0, 980, 1002, 0, 967, 1658, 1257, 1258,
	0, 1482, 1479, -2, 1780, 1781, 2, 79, 0, 1742,
	1002, 81, 0, 1742, 84, 0, 1742, 0, -2, 88,
	0, 1742, 167, 168, 1492, 1493, 1497, 1498, 1499, 1500,
	1769, 91, 0, 1458, 99, 0, 1742, 1425, 0, 1455,
	1501, 1502, 1503, 1504, 1505, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 0, 1452, 0, 0,
	597, 1422, 1427, 598, 1432, 0, 190, 191, 192, 193,
	194, 1742, 196, 197, 0, 199, 200, 1742, 202, 203,
	0, 205, 0, 0, 0, 0, 0, 226, 672, 1742,
	0, 233, 1463, 0, 696, 1742, 694, 1466, -2, 1742,
	716, 719, 1742, 721, 672, 723, 1465, -2, 1489, 896,
	1742, 816, 344, 346, 0, 238, 0, 829, 0, 831,
	0, 850, 1008, 151, 1742, 263, 282, 151, 1742, 266,
	151, 1742, 269, 151, 1742, 272, 1420, 151, 1742, 275,
	276, 1742, 278, 169, 279, 1742, 281, 339, 0, 0,
	-2, 333, 1468, -2, 0, 331, 290, 292, 295, 297,
	299, 301, 303, 305, 307, 309, 312, 314, 317, 319,
	322, 324, -2, 0, 0, 0, 0, 0, 0, 603,
	604, 0, 0, 0, 767, 768, 0, 0, 0, 387,
	0, 0, 0, 0, 799, 384, 0, 403, 0, 405,
	1732, -2, -2, 409, 803, 807, 808, 809, 0, 0,
	0, 0, 416, 0, 0, 0, 420, 423, 0, 496,
	497, 0, 0, 507, 508, 509, 510, 1637, 1563, 513,
	0, 516, 537, 552, 0, 0, 520, 522, 602, 524,
	0, 0, 526, 0, 528, 0, 530, 0, 532, 0,
	534, 536, 538, 553, 540, 0, 0, 0, 551, 0,
	557, 0, 560, 561, 562, 0, 564, 565, 566, 0,
	0, 0, 574, 576, 0, 586, 0, 503, 504, 151,
	1006, -2, 0, 866, 920, 921, 0, 0, 0, 0,
	901, 902, 0, 0, 0, 862, 863, 369, 0, 372,
	0, 0, 0, 0, 1340, 1341, 1342, 1343, 1344, 1345,
	1348, 1349, 1346, 1347, 1350, 1351, 0, 0, 0, 0,
	0, 1352, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 1354, 1355, 0, 0, 1357, 0,
	1359, 0, 0, 0, 0, 0, 0, 1177, 1179, 1413,
	0, 0, 1356, 1119, 1120, 1121, 1156, 1157, 0, 1231,
	1410, 1409, 1233, 0, 1362, -2, 1363, 1245, 0, 0,
	1236, 1449, 1243, 1244, 1362, 0, 1404, 0, 0, 1439,
	0, 1111, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1065, 1079,
	1086, 1083, 1082, 1067, 0, 1066, 0, 0, 1064, 0,
	0, 0, 1068, 0, 1385, -2, 0, 0, 0, 0,
	0, 0, 779, -2, 781, 0, 797, 0, 891, 0,
	0, 946, 1414, 1418, 1419, 946, 946, 0, 0, 1363,
	0, 0, 0, 0, 999, 999, 999, 997, 974, 0,
	980, 0, 990, 0, 980, 980, 0, -2, 962, 0,
	0, 990, 1003, 1004, 0, 0, 0, 0, 100, 762,
	119, 0, 762, 762, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 115, 107, 108, 0, 0, 85, 697,
	0, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 117,
	0, 142, 144, 0, 0, 0, 0, 993, 596, 0,
	0, 1483, 1430, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 1469, 1470, 611, 0, 0, 0, 236, 692,
	695, 0, 714, 0, 895, 0, 0, 0, 0, 1742,
	728, 1454, 1488, 0, 1742, 818, 0, 1012, 0, 832,
	0, 0, 1009, 0, 261, 0, 149, 150, 0, 264,
	0, 267, 0, 270, 0, 0, 273, 0, 0, 0,
	0, 0, 898, 0, 0, 181, 0, 349, 359, 0,
	0, 0, 0, 898, 0, 1365, 1020, 1023, 1024, 1025,
	1111, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1087, 1081,
	1097, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1077, 0, 1052, 1052, 1052, 1069, 1070, 1088,
	1089, 1091, 1093, 1095, 1021, 1022, 1087, 1087, 1084, 1085,
	181, 0, 353, 0, 993, 389, 993, 391, 0, 582,
	0, 0, 0, 0, -2, 411, 0, 805, 0, 810,
	435, 436, 437, 812, 813, 415, 438, 439, 440, 441,
	442, 443, 0, 689, 0, 691, 1445, 0, 412, 428,
	413, 418, 0, 424, 0, 0, 511, 512, 514, 515,
	517, 518, 519, 523, 0, 590, 1654, 600, 525, 527,
	529, 531, 533, 898, 542, 0, 544, 898, 555, 558,
	563, 567, 568, 569, 570, 571, 572, 0, 0, 0,
	712, 0, 869, 918, 919, 924, 928, 929, 932, 935,
	936, 926, 1114, 884, 885, 886, 912, 913, 745, 0,
	0, 371, 1115, 1016, 1017, 1071, 1072, 1073, 1074, 1075,
	1116, 1117, 1451, 0, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, -2, -2, -2, -2, -2, -2,
	-2, -2, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, -2, -2, -2, 1154, 1155, -2, 1358,
	1360, 0, 1413, 0, -2, 0, -2, -2, -2, -2,
	1174, 0, 1176, 1181, 1183, 1185, 0, 0, 0, 0,
	1412, 1195, 1396, 0, 0, 1337, 1338, 1339, 1180, 0,
	0, 1411, 1408, 0, 0, 1361, 1240, 0, 0, 0,
	0, 1369, 1403, 1399, 0, 1471, 1477, 1247, 909, 0,
	0, 0, 0, 1254, 0, 1450, 1098, 1099, 1100, 1101,
	1102, 1103, 1112, 1319, 0, 0, 0, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 1372,
	-2, -2, -2, -2, -2, -2, -2, 0, 1293, 0,
	0, 1305, 0, 1307, 0, 1295, 1363, 1382, 0, 0,
	1201, 0, 0, 0, 1245, 0, 1298, 1363, 1390, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1363, 0,
	1395, 796, 893, 0, 0, 1012, 0, 0, 0, 1417,
	1012, 1012, 0, 941, 0, 0, 0, 0, 0, 0,
	994, 998, 995, 996, 0, 0, 980, 990, 954, 0,
	0, 1453, 960, 989, 0, 672, 979, 990, 990, 0,
	-2, 964, 0, 0, 909, -2, 0, 0, 0, 0,
	761, 121, 1742, 0, 153, 0, 0, 662, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 698, 699,
	701, 707, 709, 0, 703, 1448, 0, 704, 0, 706,
	708, 710, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 1424, 0, 0,
	172, 992, 0, 1423, 1433, 0, 195, 198, 201, 204,
	182, 671, 0, 0, 0, 0, 610, -2, 612, 614,
	615, 616, 617, 1588, 1489, 0, 1489, 0, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 826, 0, 911, 0, 848, 834, 0, 0,
	0, 848, 852, 853, 855, 856, 0, 0, 1010, 283,
	151, 151, 151, 1421, 151, 151, 170, 277, 280, 341,
	286, 334, 898, 0, 0, 0, 0, 160, 0, 0,
	0, 335, 0, 0, 0, 337, 0, 1013, 1015, 0,
	1026, 0, 1079, 0, 156, 181, 0, 0, 388, 393,
	0, 583, 0, 0, 404, 0, 804, 811, 0, 432,
	0, 434, 690, 1447, 1446, 0, 425, 505, 0, 601,
	599, 541, 545, 898, 547, 0, 584, 585, 589, 1007,
	0, 930, 0, 927, 933, 934, 0, 915, 743, 744,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1196,
	0, -2, 1175, 1178, 1182, 1184, 1186, 0, 0, 0,
	0, 0, 0, 0, 1197, 1406, 1409, 1335, 0, 0,
	1364, 1367, 1368, 0, 0, 1400, 0, 0, 0, 0,
	0, 908, 909, 909, 909, 1253, 0, 0, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 1278, 1050, 0, 1290, 0,
	1292, 1076, 1304, 1306, 1294, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1204, 1205, 1206, 1297, 1388, 1389, 0, 0, 1090,
	1092, 1094, 1096, 0, 0, 0, 0, 1303, 0, 1394,
	898, 943, 938, 1415, 993, 945, 947, 1416, 1456, 938,
	938, 0, 1364, 982, 0, 984, 0, 0, 0, 986,
	0, 975, 0, 977, 990, 959, 0, 0, 952, 0,
	951, 672, 988, 961, 965, 1471, 0, 1005, 0, 969,
	972, 0, 0, 120, 749, 0, 0, 1457, 0, 123,
	1742, 132, 0, 639, 0, 0, 0, 0, 0, 764,
	133, 1742, 151, 1742, 151, 134, 137, 0, 141, 139,
	0, 0, 630, 101, 762, 104, 0, 0, 755, 0,
	702, 705, 711, 86, 0, 757, 747, 0, 0, 746,
	143, 105, 0, 0, 759, 103, 0, 0, 0, 181,
	0, 0, 1429, 1484, 206, 208, 209, 207, 619, 0,
	1489, 0, 1489, 0, 1461, 608, 672, 0, 234, 235,
	696, 717, -2, 720, 722, 731, 0, 0, 0, 822,
	826, 0, 825, 896, 923, 910, 1011, 827, 848, 0,
	0, 0, 837, 839, 836, 833, 830, 1012, 0, 0,
	0, 0, 0, 262, 265, 268, 271, 274, 287, 0,
	179, 1620, 177, 174, 176, 348, 0, 0, 0, 0,
	1366, 0, 1018, 0, 0, 0, 0, 157, 352, 0,
	390, 0, 0, 0, 0, 0, 0, 401, 402, -2,
	430, 431, 433, 429, 0, 543, 546, 554, 0, 0,
	914, 745, 0, 1118, 1159, 0, 0, -2, 0, 0,
	1163, 0, 0, 0, -2, 0, 0, 0, 1397, 0,
	1408, 1238, 1239, 1246, 1336, 1370, 1398, 1402, 0, 1472,
	1476, 1248, 0, 0, 0, 0, 1441, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 0, 1317, 1318, 1322, 1464, 0,
	0, 1259, 0, 0, 0, 0, 0, 0, 0, 0,
	1371, 1381, 1383, 1202, 1203, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, -2, -2, -2, 1220, 1221,
	1222, -2, -2, -2, 0, 0, 0, 1384, 1386, 1387,
	1391, 1392, 0, 1300, 1301, 1302, 1393, 0, 940, 0,
	944, 0, 940, 940, 905, 983, 0, 1001, 985, 957,
	976, 0, 966, 955, 0, 956, 0, 987, 0, 963,
	968, 0, 971, 0, 1248, -2, 0, 0, 0, 0,
	152, 637, 661, 0, 0, 734, 742, 742, 0, 1459,
	0, 0, 125, 0, 0, 0, 0, 130, 0, 136,
	140, 0, 0, 0, 0, 0, 112, 0, 0, 0,
	0, 0, 111, 114, 0, 0, 110, 0, 154, 0,
	0, 627, 0, 613, 0, 0, 0, 0, 611, 0,
	232, 693, 715, 0, 0, 0, 0, 0, 824, 826,
	0, 817, 818, 848, 922, 828, 846, 847, 845, 0,
	0, 0, 911, 854, 851, 857, 858, 0, 165, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 1019, 1027,
	0, 1080, 354, 0, 577, 578, 625, 0, 581, 506,
	925, 931, 916, 745, 1161, 1165, 0, 0, 0, 1167,
	-2, 0, 1189, -2, -2, 1407, 1401, 0, 1438, 909,
	1249, 1251, 1252, 1113, 1324, 1321, 0, 1308, 1269, 1270,
	0, 0, 1273, 1275, 1276, 1277, 1051, 1380, 0, 0,
	0, 0, 1299, 894, 1313, 0, 0, 948, 1313, 1313,
	0, 980, 978, 953, 949, 0, 1472, 970, 0, 0,
	751, 753, 122, 0, 638, 0, 641, 0, 0, 0,
	0, 648, 649, 0, 0, 0, 0, 0, 663, 670,
	0, 745, 0, 745, 0, 0, 0, 0, 127, 146,
	0, 0, 763, 0, 151, 151, 0, 0, 750, 0,
	0, 0, 0, 756, 758, 748, 0, 760, 0, 171,
	0, 606, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 814, 826, 0, 819,
	820, 237, 0, 0, 0, 835, 838, 840, 923, 0,
	178, 0, 173, 175, 161, 0, 0, 1014, 1078, 392,
	394, 0, 0, 400, 579, 624, 0, 0, 917, 1169,
	-2, -2, 1190, 1473, 1475, 0, 911, 0, 1310, 0,
	0, -2, 0, 0, 0, 880, 0, 939, 937, 881,
	882, 1000, 990, 0, 973, 124, 0, 642, 643, 1460,
	645, 0, 647, 650, 0, 652, 1491, 0, 656, 619,
	0, 667, 668, 735, 736, 741, 737, 742, 665, 0,
	126, 128, 145, 740, 129, 135, 0, 0, 0, 0,
	909, 0, 0, 0, 991, 0, 0, 670, 0, 660,
	619, 609, 0, 731, 726, 0, 0, 821, 822, 0,
	0, 0, 848, 859, 180, 0, 0, 0, 396, 0,
	398, 0, 623, 0, 1250, 1327, 0, 1271, 1272, -2,
	0, 1228, 1312, 1314, 0, 958, 950, 640, 644, 0,
	0, 676, 0, 0, 627, 0, 745, 0, 148, 0,
	0, 0, 752, 754, 0, 0, 0, 113, 0, 659,
	619, 670, 627, 670, 0, 0, 823, 824, 0, 842,
	1012, 844, 849, 0, 0, 395, 0, 0, 580, 0,
	0, 0, 1323, 1229, 0, 0, 0, 651, 681, 0,
	0, 0, 664, 0, 738, 672, 131, 0, 739, 0,
	631, 0, 0, 634, 0, 0, 0, 0, 0, 627,
	619, 607, 619, 0, 0, 815, 0, 843, 181, 181,
	397, 399, 1320, 1325, 1328, -2, 1708, 1539, 0, 1326,
	1315, 1316, 0, 653, 677, 678, 0, 673, 674, 675,
	1490, 654, 655, 669, 676, 147, 628, 0, 0, 629,
	0, 0, 116, 118, 0, 657, 627, 627, 0, 727,
	1012, 162, 163, 0, 1330, 1331, 1332, 1333, 1334, 646,
	679, 0, 680, 0, 0, 0, 681, 632, 0, 635,
	0, 622, 658, 724, 670, 841, 0, 682, 0, 685,
	686, 0, 683, 666, 0, 0, 618, 620, 621, 619,
	1329, 684, 687, 688, 0, 0, 627, 627, 0, 725,
	633, 0, 0, 0, 627, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1028
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1034
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1168
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1172
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1176
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1199
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1228
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1248
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1254
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1260
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1271
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1278
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1288
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1298
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1308
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1321
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1343
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1374
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1384
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1398
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1401
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1443
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1453
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1471
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1476
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1491
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1527
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1538
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1542
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1552
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1578
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1581
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1604
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1611
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1615
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1650
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1654
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1658
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1661
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1681
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1685
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1689
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1695
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1743
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1747
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1750
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1754
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1766
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1767
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1768
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1769
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1787
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1789
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1819
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1821
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1828
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1855
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1857
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1868
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1873
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1879
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1880
		{
			sqlVAL.str = ""
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1892
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1897
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1898
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1925
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1935
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = nil
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "DELETE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return helpWith(sqllex, "DROP")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1991
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1992
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1993
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1994
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2006
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2021
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2024
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2032
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2036
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2039
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2055
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2062
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2078
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2085
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2097
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2100
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2108
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2115
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2119
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2149
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2166
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "DELETE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2169
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2170
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2171
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "INSERT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2175
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2193
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2194
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2212
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2223
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2227
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2243
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2253
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2271
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2275
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2278
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2309
		{
			return helpWith(sqllex, "GRANT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2333
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2340
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2349
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2360
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2378
		{
			return helpWith(sqllex, "RESET")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2379
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2394
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "USE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2423
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2424
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2426
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2427
		{
			return helpWith(sqllex, "USE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2428
		{
			return unimplemented(sqllex, "set local")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2444
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2462
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2480
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2488
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2492
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2496
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2543
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2546
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2568
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2572
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2594
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2597
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2602
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2606
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2616
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2632
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2639
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2645
		{
			return unimplemented(sqllex, "set from current")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2646
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2659
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2666
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2687
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2693
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2697
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2715
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = tree.Low
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = tree.Normal
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.High
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2748
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2752
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2757
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2761
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2785
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.str = "client_encoding"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.str = "timezone"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2841
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2844
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2855
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2871
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2891
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2905
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2908
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2910
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2921
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2924
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2935
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2948
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2956
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2967
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2969
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2972
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2974
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2977
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2990
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2993
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3006
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3023
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3038
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3051
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3058
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3085
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3094
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3113
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3117
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3120
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3127
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3139
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3144
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3161
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3164
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3172
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3182
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3185
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3193
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3204
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3216
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3221
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3228
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3248
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3264
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3267
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3275
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3282
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3287
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3407
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3411
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3415
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3454
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3458
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3463
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3467
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3476
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3483
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3487
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3511
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3559
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3598
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3604
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3620
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3626
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3641
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3646
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3651
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3657
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3664
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3684
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3691
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3717
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3727
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3738
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3759
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3763
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3771
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3801
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3817
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3821
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3837
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3848
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3870
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3897
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3909
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3920
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3930
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3958
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3964
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3973
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3974
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3975
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3976
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3983
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3995
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3999
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4011
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4019
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4023
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4045
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4067
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4075
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4083
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4090
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4095
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4097
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4098
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4104
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4108
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4109
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4111
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4112
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4114
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4126
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4134
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4138
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4141
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4145
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4159
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4163
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4166
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4174
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4181
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4199
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4212
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4235
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4244
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4253
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4267
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4289
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4290
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4293
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.str = ""
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4297
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4298
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.Descending
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4323
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4333
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4345
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4349
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4351
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4355
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4359
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4375
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4389
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4394
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4395
		{
			sqlVAL.union.val = false
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4406
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4416
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4425
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4428
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4436
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4439
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4443
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4445
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4461
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4464
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4479
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4482
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4496
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4497
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4498
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4506
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4513
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4516
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4517
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4521
		{
			sqlVAL.str = ""
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4525
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4529
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4533
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4539
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4563
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4576
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4578
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4582
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4586
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4590
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4596
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4602
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4642
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4646
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4650
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4656
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4666
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4680
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4685
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4686
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4698
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4712
		{
			return helpWith(sqllex, "INSERT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4723
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4730
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4734
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4742
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4748
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4752
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4756
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4762
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4786
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4790
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4800
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4804
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4806
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4812
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 849:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4838
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4849
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4853
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4854
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4875
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4878
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4882
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4925
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4931
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4950
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4954
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4958
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4970
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4977
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5012
		{
			return helpWith(sqllex, "SELECT")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5013
		{
			return helpWith(sqllex, "VALUES")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			return helpWith(sqllex, "TABLE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5049
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5063
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5075
		{
			return helpWith(sqllex, "SELECT")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5079
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5097
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5112
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5119
		{
			return helpWith(sqllex, "TABLE")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5134
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5135
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5139
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5149
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5157
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5158
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5162
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5165
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5168
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5169
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5173
		{
			sqlVAL.union.val = true
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5181
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5187
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5193
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5198
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5199
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5202
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5203
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5207
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5211
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5223
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5233
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5241
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5250
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5259
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5270
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5274
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5289
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5296
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5303
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5312
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5316
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5320
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5326
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5327
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5330
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5331
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5358
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5362
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5381
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5384
		{
			return helpWith(sqllex, "VALUES")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5386
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5398
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5401
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5403
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5409
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5423
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5435
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5440
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5471
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5502
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5516
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5520
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5523
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5533
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5538
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5560
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5564
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5582
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5584
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5587
		{
			sqlVAL.union.val = nil
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5588
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.union.val = true
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5607
		{
			sqlVAL.union.val = false
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5627
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5631
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5677
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5683
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5687
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5695
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5701
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5702
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5713
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5723
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5750
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5760
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5764
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5776
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5790
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5799
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5810
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5814
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5821
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5823
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5832
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5836
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5849
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5867
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5875
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5879
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5887
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5891
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5895
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5899
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5903
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5923
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5927
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5931
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = nil
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5978
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5982
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5990
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5994
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6010
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6024
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6033
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6042
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6051
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6084
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6094
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6105
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6111
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6147
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6160
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6164
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6168
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6172
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6176
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6189
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6195
		{
			sqlVAL.union.val = tree.Year
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.Month
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6203
		{
			sqlVAL.union.val = tree.Day
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6207
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6211
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6215
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6221
		{
			sqlVAL.union.val = tree.Month
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = nil
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6255
		{
			sqlVAL.union.val = tree.Second
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6258
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6293
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6545
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6611
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6773
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6781
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6817
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6822
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6831
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6849
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6857
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6861
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6866
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6888
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6889
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6902
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6913
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6934
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7022
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7027
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7032
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7037
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7042
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7047
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7052
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7057
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7067
		{
			return unimplemented(sqllex, "treat")
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7088
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7093
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7098
		{
			return unimplemented(sqllex, "within group")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7099
		{
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7107
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7118
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7134
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.str = ""
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7183
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7198
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7235
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7248
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7321
		{
			sqlVAL.union.val = tree.Any
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7325
		{
			sqlVAL.union.val = tree.Some
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = tree.All
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7337
		{
			sqlVAL.union.val = tree.Div
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = tree.LT
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.GT
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7347
		{
			sqlVAL.union.val = tree.LE
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7348
		{
			sqlVAL.union.val = tree.GE
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.NE
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Like
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7440
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7454
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7482
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7494
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7498
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7504
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7516
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7552
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7568
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7612
		{
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7616
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7626
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7661
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7671
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7678
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7731
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7735
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7739
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7743
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7746
		{
			return unimplemented(sqllex, "func const")
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7752
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7755
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7761
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7765
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7785
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7796
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7806
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7998
		{
			sqlVAL.str = ""
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8004
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8008
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
