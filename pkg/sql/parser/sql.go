// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:554
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MYSQLDUMP = lex.MYSQLDUMP
const MYSQLOUTFILE = lex.MYSQLOUTFILE
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PGCOPY = lex.PGCOPY
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MYSQLDUMP",
	"MYSQLOUTFILE",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PGCOPY",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8270

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 896,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	167, 733,
	-2, 0,
	-1, 60,
	101, 896,
	173, 896,
	374, 896,
	375, 896,
	-2, 0,
	-1, 74,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 859,
	-1, 110,
	197, 550,
	361, 550,
	-2, 0,
	-1, 115,
	4, 898,
	20, 898,
	21, 898,
	22, 898,
	23, 898,
	25, 898,
	30, 898,
	35, 898,
	36, 898,
	37, 898,
	38, 898,
	39, 898,
	40, 898,
	41, 898,
	42, 898,
	43, 898,
	44, 898,
	46, 898,
	47, 898,
	48, 898,
	49, 898,
	50, 898,
	51, 898,
	54, 898,
	55, 898,
	56, 898,
	58, 898,
	59, 898,
	63, 898,
	64, 898,
	65, 898,
	66, 898,
	67, 898,
	69, 898,
	70, 898,
	71, 898,
	72, 898,
	74, 898,
	76, 898,
	77, 898,
	80, 898,
	81, 898,
	82, 898,
	90, 898,
	91, 898,
	92, 898,
	93, 898,
	94, 898,
	95, 898,
	96, 898,
	97, 898,
	99, 898,
	101, 898,
	103, 898,
	106, 898,
	107, 898,
	109, 898,
	110, 898,
	114, 898,
	115, 898,
	116, 898,
	117, 898,
	118, 898,
	119, 898,
	120, 898,
	121, 898,
	122, 898,
	123, 898,
	124, 898,
	132, 898,
	133, 898,
	134, 898,
	135, 898,
	136, 898,
	138, 898,
	140, 898,
	144, 898,
	146, 898,
	147, 898,
	149, 898,
	151, 898,
	152, 898,
	153, 898,
	154, 898,
	155, 898,
	156, 898,
	157, 898,
	158, 898,
	159, 898,
	162, 898,
	163, 898,
	168, 898,
	169, 898,
	170, 898,
	173, 898,
	174, 898,
	175, 898,
	176, 898,
	177, 898,
	178, 898,
	179, 898,
	180, 898,
	182, 898,
	184, 898,
	187, 898,
	188, 898,
	189, 898,
	191, 898,
	192, 898,
	195, 898,
	196, 898,
	197, 898,
	199, 898,
	200, 898,
	202, 898,
	204, 898,
	205, 898,
	208, 898,
	209, 898,
	212, 898,
	214, 898,
	217, 898,
	218, 898,
	219, 898,
	220, 898,
	221, 898,
	222, 898,
	223, 898,
	225, 898,
	226, 898,
	227, 898,
	228, 898,
	233, 898,
	234, 898,
	235, 898,
	236, 898,
	237, 898,
	239, 898,
	240, 898,
	242, 898,
	243, 898,
	244, 898,
	247, 898,
	248, 898,
	250, 898,
	252, 898,
	253, 898,
	254, 898,
	255, 898,
	256, 898,
	257, 898,
	258, 898,
	259, 898,
	260, 898,
	262, 898,
	263, 898,
	264, 898,
	265, 898,
	266, 898,
	268, 898,
	269, 898,
	270, 898,
	271, 898,
	272, 898,
	273, 898,
	274, 898,
	275, 898,
	277, 898,
	278, 898,
	279, 898,
	280, 898,
	281, 898,
	283, 898,
	284, 898,
	285, 898,
	286, 898,
	287, 898,
	288, 898,
	289, 898,
	291, 898,
	293, 898,
	294, 898,
	295, 898,
	296, 898,
	297, 898,
	298, 898,
	300, 898,
	301, 898,
	302, 898,
	303, 898,
	304, 898,
	305, 898,
	306, 898,
	308, 898,
	309, 898,
	310, 898,
	311, 898,
	312, 898,
	313, 898,
	314, 898,
	315, 898,
	316, 898,
	318, 898,
	319, 898,
	320, 898,
	321, 898,
	323, 898,
	324, 898,
	325, 898,
	326, 898,
	328, 898,
	329, 898,
	330, 898,
	331, 898,
	332, 898,
	333, 898,
	334, 898,
	335, 898,
	336, 898,
	337, 898,
	338, 898,
	339, 898,
	341, 898,
	342, 898,
	344, 898,
	345, 898,
	346, 898,
	347, 898,
	348, 898,
	349, 898,
	350, 898,
	351, 898,
	352, 898,
	353, 898,
	355, 898,
	356, 898,
	357, 898,
	358, 898,
	361, 898,
	362, 898,
	363, 898,
	364, 898,
	366, 898,
	367, 898,
	369, 898,
	370, 898,
	373, 898,
	374, 898,
	375, 898,
	376, 898,
	378, 898,
	380, 898,
	381, 898,
	382, 898,
	383, 898,
	384, 898,
	385, 898,
	388, 898,
	389, 898,
	394, 898,
	395, 898,
	396, 898,
	397, 898,
	398, 898,
	399, 898,
	-2, 0,
	-1, 136,
	113, 869,
	127, 869,
	181, 869,
	207, 869,
	238, 869,
	246, 869,
	371, 869,
	-2, 862,
	-1, 141,
	1, 792,
	187, 792,
	268, 792,
	272, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 143,
	1, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 144,
	1, 792,
	425, 792,
	426, 792,
	-2, 0,
	-1, 145,
	1, 796,
	425, 796,
	426, 796,
	-2, 0,
	-1, 171,
	4, 905,
	5, 905,
	6, 905,
	7, 905,
	8, 905,
	9, 905,
	20, 905,
	21, 905,
	22, 905,
	23, 905,
	25, 905,
	30, 905,
	31, 905,
	35, 905,
	36, 905,
	37, 905,
	38, 905,
	39, 905,
	40, 905,
	41, 905,
	42, 905,
	43, 905,
	44, 905,
	46, 905,
	47, 905,
	48, 905,
	49, 905,
	50, 905,
	51, 905,
	52, 905,
	53, 905,
	54, 905,
	55, 905,
	56, 905,
	58, 905,
	59, 905,
	61, 905,
	63, 905,
	64, 905,
	65, 905,
	66, 905,
	67, 905,
	69, 905,
	70, 905,
	71, 905,
	72, 905,
	74, 905,
	76, 905,
	77, 905,
	79, 905,
	80, 905,
	81, 905,
	82, 905,
	83, 905,
	84, 905,
	85, 905,
	86, 905,
	87, 905,
	88, 905,
	89, 905,
	90, 905,
	91, 905,
	92, 905,
	93, 905,
	94, 905,
	95, 905,
	96, 905,
	97, 905,
	98, 905,
	99, 905,
	101, 905,
	103, 905,
	106, 905,
	107, 905,
	109, 905,
	110, 905,
	114, 905,
	115, 905,
	116, 905,
	117, 905,
	118, 905,
	119, 905,
	120, 905,
	121, 905,
	122, 905,
	123, 905,
	124, 905,
	125, 905,
	126, 905,
	132, 905,
	133, 905,
	134, 905,
	135, 905,
	136, 905,
	138, 905,
	140, 905,
	143, 905,
	144, 905,
	146, 905,
	147, 905,
	149, 905,
	151, 905,
	152, 905,
	153, 905,
	154, 905,
	155, 905,
	156, 905,
	157, 905,
	158, 905,
	159, 905,
	160, 905,
	162, 905,
	163, 905,
	168, 905,
	169, 905,
	170, 905,
	172, 905,
	173, 905,
	174, 905,
	175, 905,
	176, 905,
	177, 905,
	178, 905,
	179, 905,
	180, 905,
	182, 905,
	184, 905,
	185, 905,
	186, 905,
	187, 905,
	188, 905,
	189, 905,
	190, 905,
	191, 905,
	192, 905,
	195, 905,
	196, 905,
	197, 905,
	199, 905,
	200, 905,
	202, 905,
	203, 905,
	204, 905,
	205, 905,
	206, 905,
	208, 905,
	209, 905,
	212, 905,
	214, 905,
	215, 905,
	216, 905,
	217, 905,
	218, 905,
	219, 905,
	220, 905,
	221, 905,
	222, 905,
	223, 905,
	224, 905,
	225, 905,
	226, 905,
	227, 905,
	228, 905,
	229, 905,
	231, 905,
	232, 905,
	233, 905,
	234, 905,
	235, 905,
	236, 905,
	237, 905,
	239, 905,
	240, 905,
	243, 905,
	244, 905,
	247, 905,
	248, 905,
	249, 905,
	250, 905,
	251, 905,
	252, 905,
	253, 905,
	254, 905,
	255, 905,
	256, 905,
	257, 905,
	258, 905,
	259, 905,
	260, 905,
	262, 905,
	263, 905,
	264, 905,
	265, 905,
	266, 905,
	268, 905,
	269, 905,
	270, 905,
	271, 905,
	272, 905,
	273, 905,
	274, 905,
	275, 905,
	277, 905,
	278, 905,
	279, 905,
	280, 905,
	281, 905,
	283, 905,
	284, 905,
	285, 905,
	286, 905,
	287, 905,
	288, 905,
	289, 905,
	291, 905,
	292, 905,
	293, 905,
	294, 905,
	295, 905,
	296, 905,
	297, 905,
	298, 905,
	300, 905,
	301, 905,
	302, 905,
	303, 905,
	304, 905,
	305, 905,
	306, 905,
	308, 905,
	309, 905,
	310, 905,
	311, 905,
	312, 905,
	313, 905,
	314, 905,
	315, 905,
	316, 905,
	317, 905,
	318, 905,
	319, 905,
	320, 905,
	321, 905,
	322, 905,
	323, 905,
	324, 905,
	325, 905,
	326, 905,
	328, 905,
	329, 905,
	330, 905,
	331, 905,
	332, 905,
	333, 905,
	334, 905,
	335, 905,
	336, 905,
	337, 905,
	338, 905,
	339, 905,
	341, 905,
	342, 905,
	344, 905,
	345, 905,
	346, 905,
	347, 905,
	348, 905,
	349, 905,
	350, 905,
	351, 905,
	352, 905,
	353, 905,
	355, 905,
	356, 905,
	357, 905,
	358, 905,
	361, 905,
	362, 905,
	363, 905,
	364, 905,
	365, 905,
	366, 905,
	367, 905,
	369, 905,
	370, 905,
	373, 905,
	374, 905,
	375, 905,
	376, 905,
	377, 905,
	378, 905,
	380, 905,
	381, 905,
	382, 905,
	383, 905,
	384, 905,
	385, 905,
	388, 905,
	389, 905,
	394, 905,
	395, 905,
	396, 905,
	397, 905,
	398, 905,
	399, 905,
	400, 905,
	408, 905,
	413, 905,
	414, 905,
	415, 905,
	422, 905,
	428, 905,
	-2, 0,
	-1, 174,
	1, 57,
	426, 57,
	-2, 896,
	-1, 207,
	424, 1474,
	427, 1474,
	-2, 593,
	-1, 208,
	424, 1476,
	427, 1476,
	-2, 594,
	-1, 209,
	424, 1475,
	427, 1475,
	-2, 595,
	-1, 210,
	427, 1416,
	-2, 596,
	-1, 619,
	142, 1589,
	359, 1589,
	405, 1589,
	424, 1589,
	-2, 0,
	-1, 620,
	142, 1512,
	359, 1512,
	405, 1512,
	424, 1512,
	-2, 0,
	-1, 622,
	142, 1665,
	359, 1665,
	405, 1665,
	424, 1665,
	-2, 0,
	-1, 624,
	142, 1694,
	359, 1694,
	405, 1694,
	424, 1694,
	-2, 0,
	-1, 631,
	142, 1596,
	359, 1596,
	405, 1596,
	424, 1596,
	-2, 424,
	-1, 666,
	1, 522,
	421, 522,
	423, 522,
	425, 522,
	426, 522,
	-2, 0,
	-1, 667,
	1, 592,
	139, 592,
	421, 592,
	423, 592,
	425, 592,
	426, 592,
	-2, 0,
	-1, 673,
	1, 536,
	421, 536,
	423, 536,
	425, 536,
	426, 536,
	-2, 0,
	-1, 675,
	1, 540,
	421, 540,
	423, 540,
	425, 540,
	426, 540,
	-2, 0,
	-1, 678,
	1, 551,
	421, 551,
	423, 551,
	425, 551,
	426, 551,
	-2, 0,
	-1, 679,
	1, 557,
	421, 557,
	423, 557,
	425, 557,
	426, 557,
	-2, 0,
	-1, 680,
	1, 560,
	421, 560,
	423, 560,
	425, 560,
	426, 560,
	-2, 0,
	-1, 684,
	1, 574,
	421, 574,
	423, 574,
	425, 574,
	426, 574,
	-2, 0,
	-1, 685,
	1, 576,
	421, 576,
	423, 576,
	425, 576,
	426, 576,
	-2, 0,
	-1, 713,
	127, 909,
	207, 909,
	238, 909,
	-2, 865,
	-1, 721,
	127, 908,
	207, 908,
	238, 908,
	-2, 863,
	-1, 748,
	422, 1769,
	-2, 1188,
	-1, 749,
	422, 1770,
	-2, 1189,
	-1, 778,
	422, 1468,
	-2, 1459,
	-1, 779,
	5, 1044,
	422, 1483,
	-2, 1474,
	-1, 780,
	422, 1484,
	-2, 1475,
	-1, 787,
	5, 1028,
	-2, 1504,
	-1, 788,
	5, 1029,
	-2, 1508,
	-1, 789,
	5, 1030,
	-2, 1507,
	-1, 790,
	5, 1031,
	-2, 1690,
	-1, 791,
	5, 1032,
	-2, 1598,
	-1, 792,
	5, 1033,
	-2, 1658,
	-1, 793,
	5, 1034,
	-2, 1660,
	-1, 794,
	5, 1035,
	-2, 1661,
	-1, 795,
	5, 1036,
	-2, 1662,
	-1, 796,
	5, 1037,
	-2, 1670,
	-1, 797,
	5, 1038,
	-2, 1702,
	-1, 798,
	5, 1039,
	-2, 1566,
	-1, 799,
	5, 1040,
	-2, 1503,
	-1, 800,
	5, 1041,
	-2, 1606,
	-1, 801,
	5, 1042,
	-2, 1607,
	-1, 802,
	5, 1043,
	-2, 1570,
	-1, 803,
	5, 1092,
	422, 1092,
	-2, 1736,
	-1, 823,
	5, 1065,
	-2, 1505,
	-1, 824,
	5, 1083,
	-2, 1532,
	-1, 826,
	5, 1057,
	-2, 1553,
	-1, 827,
	5, 1058,
	-2, 1554,
	-1, 828,
	5, 1049,
	-2, 1569,
	-1, 829,
	5, 1050,
	-2, 1571,
	-1, 830,
	5, 1051,
	-2, 1572,
	-1, 831,
	5, 1052,
	-2, 1573,
	-1, 832,
	5, 1016,
	-2, 1579,
	-1, 833,
	5, 1017,
	-2, 1580,
	-1, 834,
	5, 1080,
	-2, 1680,
	-1, 835,
	5, 1090,
	-2, 1692,
	-1, 836,
	5, 1055,
	-2, 1716,
	-1, 837,
	5, 1082,
	-2, 1717,
	-1, 838,
	5, 1064,
	-2, 1718,
	-1, 839,
	5, 1082,
	-2, 1719,
	-1, 840,
	5, 1082,
	-2, 1720,
	-1, 841,
	5, 1047,
	-2, 1723,
	-1, 842,
	5, 1047,
	-2, 1724,
	-1, 845,
	5, 1072,
	-2, 1728,
	-1, 847,
	5, 1048,
	-2, 1734,
	-1, 848,
	5, 1053,
	-2, 1735,
	-1, 850,
	5, 1047,
	-2, 1740,
	-1, 853,
	5, 1056,
	-2, 1745,
	-1, 854,
	5, 1054,
	-2, 1747,
	-1, 856,
	5, 1084,
	-2, 1749,
	-1, 857,
	5, 1086,
	-2, 1750,
	-1, 858,
	5, 1088,
	-2, 1751,
	-1, 861,
	5, 1079,
	-2, 1755,
	-1, 931,
	422, 1483,
	-2, 1474,
	-1, 948,
	283, 1456,
	415, 1456,
	-2, 1455,
	-1, 1097,
	257, 894,
	-2, 719,
	-1, 1106,
	241, 1478,
	-2, 0,
	-1, 1149,
	1, 291,
	421, 291,
	423, 291,
	425, 291,
	426, 291,
	-2, 868,
	-1, 1152,
	4, 1754,
	10, 1754,
	11, 1754,
	13, 1754,
	14, 1754,
	15, 1754,
	16, 1754,
	17, 1754,
	18, 1754,
	20, 1754,
	21, 1754,
	22, 1754,
	23, 1754,
	25, 1754,
	28, 1754,
	30, 1754,
	32, 1754,
	35, 1754,
	36, 1754,
	37, 1754,
	38, 1754,
	39, 1754,
	40, 1754,
	41, 1754,
	42, 1754,
	43, 1754,
	44, 1754,
	46, 1754,
	47, 1754,
	48, 1754,
	49, 1754,
	50, 1754,
	51, 1754,
	54, 1754,
	55, 1754,
	56, 1754,
	58, 1754,
	59, 1754,
	60, 1754,
	63, 1754,
	64, 1754,
	65, 1754,
	66, 1754,
	67, 1754,
	68, 1754,
	69, 1754,
	70, 1754,
	71, 1754,
	72, 1754,
	74, 1754,
	75, 1754,
	76, 1754,
	77, 1754,
	79, 1754,
	80, 1754,
	81, 1754,
	82, 1754,
	90, 1754,
	91, 1754,
	92, 1754,
	93, 1754,
	94, 1754,
	95, 1754,
	96, 1754,
	97, 1754,
	99, 1754,
	101, 1754,
	103, 1754,
	106, 1754,
	107, 1754,
	109, 1754,
	110, 1754,
	114, 1754,
	115, 1754,
	116, 1754,
	117, 1754,
	118, 1754,
	119, 1754,
	120, 1754,
	121, 1754,
	122, 1754,
	123, 1754,
	124, 1754,
	128, 1754,
	129, 1754,
	130, 1754,
	131, 1754,
	132, 1754,
	133, 1754,
	134, 1754,
	135, 1754,
	136, 1754,
	137, 1754,
	138, 1754,
	140, 1754,
	143, 1754,
	144, 1754,
	146, 1754,
	147, 1754,
	149, 1754,
	151, 1754,
	152, 1754,
	153, 1754,
	154, 1754,
	155, 1754,
	156, 1754,
	157, 1754,
	158, 1754,
	159, 1754,
	160, 1754,
	161, 1754,
	162, 1754,
	163, 1754,
	164, 1754,
	165, 1754,
	166, 1754,
	168, 1754,
	169, 1754,
	170, 1754,
	172, 1754,
	173, 1754,
	174, 1754,
	175, 1754,
	176, 1754,
	177, 1754,
	178, 1754,
	179, 1754,
	180, 1754,
	182, 1754,
	184, 1754,
	185, 1754,
	186, 1754,
	187, 1754,
	188, 1754,
	189, 1754,
	190, 1754,
	191, 1754,
	192, 1754,
	193, 1754,
	194, 1754,
	195, 1754,
	196, 1754,
	197, 1754,
	199, 1754,
	200, 1754,
	202, 1754,
	203, 1754,
	204, 1754,
	205, 1754,
	206, 1754,
	208, 1754,
	209, 1754,
	212, 1754,
	213, 1754,
	214, 1754,
	217, 1754,
	218, 1754,
	219, 1754,
	220, 1754,
	221, 1754,
	222, 1754,
	223, 1754,
	224, 1754,
	225, 1754,
	226, 1754,
	227, 1754,
	228, 1754,
	231, 1754,
	233, 1754,
	234, 1754,
	235, 1754,
	236, 1754,
	237, 1754,
	239, 1754,
	240, 1754,
	243, 1754,
	244, 1754,
	245, 1754,
	247, 1754,
	248, 1754,
	250, 1754,
	252, 1754,
	253, 1754,
	254, 1754,
	255, 1754,
	256, 1754,
	257, 1754,
	258, 1754,
	259, 1754,
	260, 1754,
	262, 1754,
	263, 1754,
	264, 1754,
	265, 1754,
	266, 1754,
	268, 1754,
	269, 1754,
	270, 1754,
	271, 1754,
	272, 1754,
	273, 1754,
	274, 1754,
	275, 1754,
	277, 1754,
	278, 1754,
	279, 1754,
	280, 1754,
	281, 1754,
	282, 1754,
	283, 1754,
	284, 1754,
	285, 1754,
	286, 1754,
	287, 1754,
	288, 1754,
	289, 1754,
	291, 1754,
	292, 1754,
	293, 1754,
	294, 1754,
	295, 1754,
	296, 1754,
	297, 1754,
	298, 1754,
	299, 1754,
	300, 1754,
	301, 1754,
	302, 1754,
	303, 1754,
	304, 1754,
	305, 1754,
	306, 1754,
	308, 1754,
	309, 1754,
	310, 1754,
	311, 1754,
	312, 1754,
	313, 1754,
	314, 1754,
	315, 1754,
	316, 1754,
	318, 1754,
	319, 1754,
	320, 1754,
	321, 1754,
	322, 1754,
	323, 1754,
	324, 1754,
	325, 1754,
	326, 1754,
	328, 1754,
	329, 1754,
	330, 1754,
	331, 1754,
	332, 1754,
	333, 1754,
	334, 1754,
	335, 1754,
	336, 1754,
	337, 1754,
	338, 1754,
	339, 1754,
	341, 1754,
	342, 1754,
	344, 1754,
	345, 1754,
	346, 1754,
	347, 1754,
	348, 1754,
	349, 1754,
	350, 1754,
	351, 1754,
	352, 1754,
	353, 1754,
	355, 1754,
	356, 1754,
	357, 1754,
	358, 1754,
	361, 1754,
	362, 1754,
	363, 1754,
	364, 1754,
	366, 1754,
	367, 1754,
	369, 1754,
	370, 1754,
	373, 1754,
	374, 1754,
	375, 1754,
	376, 1754,
	378, 1754,
	380, 1754,
	381, 1754,
	382, 1754,
	383, 1754,
	384, 1754,
	385, 1754,
	388, 1754,
	389, 1754,
	394, 1754,
	395, 1754,
	396, 1754,
	397, 1754,
	398, 1754,
	399, 1754,
	400, 1754,
	401, 1754,
	403, 1754,
	404, 1754,
	405, 1754,
	406, 1754,
	407, 1754,
	408, 1754,
	410, 1754,
	411, 1754,
	412, 1754,
	413, 1754,
	414, 1754,
	415, 1754,
	416, 1754,
	417, 1754,
	418, 1754,
	420, 1754,
	423, 1754,
	424, 1754,
	427, 1754,
	428, 1754,
	-2, 0,
	-1, 1171,
	142, 1665,
	359, 1665,
	405, 1665,
	424, 1665,
	-2, 0,
	-1, 1203,
	142, 1694,
	359, 1694,
	405, 1694,
	424, 1694,
	-2, 0,
	-1, 1204,
	187, 804,
	268, 804,
	272, 804,
	-2, 411,
	-1, 1281,
	127, 908,
	207, 908,
	238, 908,
	-2, 866,
	-1, 1365,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 1231,
	-1, 1415,
	423, 1351,
	-2, 0,
	-1, 1423,
	187, 804,
	268, 804,
	272, 804,
	-2, 799,
	-1, 1452,
	423, 1351,
	-2, 0,
	-1, 1460,
	113, 870,
	127, 870,
	181, 870,
	207, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 975,
	-1, 1662,
	187, 804,
	268, 804,
	272, 804,
	-2, 413,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1127,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1128,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1129,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1130,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1131,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1132,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1133,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1134,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1146,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1147,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	193, 0,
	194, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1148,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1153,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1155,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1159,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1160,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1161,
	-1, 1805,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1162,
	-1, 1886,
	5, 1044,
	142, 1362,
	422, 1483,
	-2, 1474,
	-1, 1887,
	142, 1363,
	-2, 1712,
	-1, 1888,
	142, 1364,
	-2, 1593,
	-1, 1889,
	142, 1365,
	-2, 1533,
	-1, 1890,
	142, 1366,
	-2, 1561,
	-1, 1891,
	142, 1367,
	-2, 1592,
	-1, 1892,
	142, 1368,
	-2, 1657,
	-1, 1960,
	423, 1351,
	-2, 0,
	-1, 1970,
	1, 976,
	79, 976,
	113, 976,
	127, 976,
	143, 976,
	148, 976,
	150, 976,
	172, 976,
	181, 976,
	190, 976,
	203, 976,
	207, 976,
	224, 976,
	238, 976,
	241, 976,
	246, 976,
	290, 976,
	292, 976,
	371, 976,
	379, 976,
	391, 976,
	392, 976,
	402, 976,
	421, 976,
	423, 976,
	425, 976,
	426, 976,
	427, 976,
	-2, 975,
	-1, 1972,
	422, 1460,
	-2, 1472,
	-1, 2054,
	423, 1421,
	427, 1421,
	-2, 1448,
	-1, 2177,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1154,
	-1, 2178,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1156,
	-1, 2183,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1157,
	-1, 2412,
	257, 894,
	-2, 719,
	-1, 2478,
	187, 804,
	268, 804,
	272, 804,
	-2, 410,
	-1, 2493,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1158,
	-1, 2498,
	185, 0,
	186, 0,
	231, 0,
	-2, 1176,
	-1, 2559,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1206,
	-1, 2560,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1207,
	-1, 2561,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1208,
	-1, 2565,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1212,
	-1, 2566,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1213,
	-1, 2567,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1214,
	-1, 2606,
	422, 1461,
	-2, 1473,
	-1, 2720,
	185, 0,
	186, 0,
	231, 0,
	-2, 1177,
	-1, 2723,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1180,
	-1, 2724,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1182,
	-1, 2869,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1181,
	-1, 2870,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	160, 0,
	161, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1183,
	-1, 2880,
	185, 0,
	-2, 1215,
	-1, 2969,
	185, 0,
	-2, 1216,
	-1, 3067,
	38, 0,
	160, 0,
	206, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1715,
}

const sqlPrivate = 57344

const sqlLast = 59647

var sqlAct = [...]int{

	780, 3066, 2822, 1831, 3075, 2655, 2908, 3129, 2080, 3042,
	3043, 3045, 3077, 3029, 3076, 2529, 2897, 2973, 777, 2837,
	2088, 1139, 3065, 2860, 2673, 1592, 1757, 2668, 2791, 1081,
	2776, 2427, 1528, 1817, 2109, 2213, 2452, 1055, 2616, 722,
	2419, 209, 2884, 952, 2077, 2678, 496, 2171, 2450, 2432,
	2056, 2052, 1284, 496, 1450, 1103, 1593, 1370, 2421, 967,
	496, 2278, 2211, 496, 2754, 2320, 496, 209, 2037, 496,
	496, 1135, 1431, 1543, 2296, 1539, 496, 1542, 1551, 756,
	2089, 1172, 1964, 1548, 496, 1975, 1984, 2307, 1954, 1965,
	961, 1829, 2055, 2582, 730, 130, 2277, 2337, 546, 1857,
	2974, 567, 28, 1373, 1743, 1748, 1489, 2167, 1423, 1687,
	2431, 1511, 1459, 2395, 1505, 1967, 1540, 763, 2011, 772,
	1432, 1470, 776, 1468, 491, 542, 1923, 945, 1814, 73,
	1839, 2038, 2012, 916, 2823, 1830, 1206, 581, 1851, 1403,
	2053, 1122, 1132, 1401, 2082, 1150, 210, 2059, 1882, 921,
	493, 1946, 954, 1360, 211, 130, 492, 1931, 898, 1564,
	1441, 609, 629, 136, 1285, 1283, 496, 496, 1686, 771,
	584, 623, 1558, 721, 1119, 539, 137, 1148, 1481, 1059,
	896, 594, 1422, 658, 1289, 2598, 205, 2198, 2599, 1566,
	1566, 476, 1566, 2081, 726, 2617, 726, 479, 496, 496,
	496, 957, 496, 496, 970, 970, 602, 2110, 3156, 1451,
	2491, 3150, 1940, 496, 496, 1940, 2039, 476, 3149, 1514,
	3126, 3123, 1940, 479, 2790, 1520, 3101, 3095, 3094, 2438,
	2790, 1940, 1940, 3091, 2468, 3088, 3085, 3092, 2615, 3089,
	1520, 1578, 2439, 3063, 3062, 3061, 1062, 1520, 1520, 1578,
	736, 3060, 3024, 596, 3011, 1578, 2120, 3004, 1520, 3002,
	3000, 2790, 2971, 2790, 2790, 2408, 2120, 2954, 727, 130,
	1933, 2694, 2204, 2944, 964, 2939, 28, 2790, 2205, 1520,
	2937, 899, 899, 1940, 2790, 2112, 2927, 1957, 2926, 822,
	1520, 2919, 1520, 2918, 714, 1520, 2890, 2790, 2871, 2817,
	1520, 2813, 2120, 1940, 2789, 1940, 2722, 713, 2790, 2692,
	2120, 2684, 2594, 2685, 2588, 2685, 2595, 2039, 1940, 1520,
	1189, 2507, 2502, 731, 948, 1520, 1940, 3025, 2957, 1178,
	2458, 938, 942, 947, 2400, 2293, 2245, 2244, 1578, 1940,
	1940, 1940, 2585, 1520, 2238, 2237, 2138, 900, 2239, 1940,
	1940, 2119, 2108, 2105, 2048, 2120, 1583, 1940, 1520, 1061,
	1939, 1582, 2585, 476, 1940, 1583, 1932, 1060, 543, 479,
	902, 1665, 903, 2694, 171, 1940, 2027, 2212, 1973, 146,
	2400, 2170, 1463, 2149, 39, 1519, 1427, 1834, 1058, 174,
	1170, 574, 2440, 545, 1169, 40, 141, 1179, 1080, 2250,
	2251, 1168, 40, 574, 1684, 1167, 1166, 1854, 1165, 44,
	173, 2441, 2769, 171, 40, 1164, 44, 1163, 1162, 1161,
	1160, 1300, 1301, 46, 143, 1159, 1567, 1567, 44, 1567,
	1158, 1074, 1157, 1156, 1155, 45, 1154, 51, 1142, 904,
	901, 720, 719, 718, 573, 717, 1303, 778, 716, 173,
	712, 172, 711, 710, 709, 708, 573, 707, 52, 706,
	165, 705, 54, 919, 704, 1855, 58, 703, 166, 702,
	144, 1302, 698, 575, 697, 59, 72, 696, 656, 655,
	60, 61, 59, 577, 654, 575, 653, 60, 652, 138,
	172, 968, 1056, 651, 59, 577, 650, 649, 648, 60,
	647, 646, 645, 644, 62, 496, 496, 643, 496, 957,
	957, 496, 642, 63, 496, 641, 640, 496, 639, 1179,
	63, 638, 637, 496, 636, 1963, 2256, 2438, 138, 1856,
	1853, 2727, 63, 496, 496, 496, 496, 496, 957, 957,
	635, 1068, 634, 633, 618, 957, 617, 616, 1308, 615,
	1520, 1300, 1301, 1079, 614, 1932, 913, 613, 530, 529,
	1143, 502, 501, 2907, 2686, 1574, 1565, 500, 1727, 482,
	481, 480, 195, 194, 193, 192, 1303, 496, 191, 190,
	189, 188, 187, 769, 186, 185, 1073, 1067, 184, 1072,
	496, 1078, 2250, 2251, 183, 182, 181, 180, 179, 178,
	177, 1302, 2266, 2603, 1108, 1179, 176, 175, 1371, 1322,
	2333, 2085, 496, 1371, 2210, 2200, 2159, 64, 1858, 2250,
	2251, 925, 2049, 496, 64, 65, 574, 1136, 2042, 1690,
	1872, 1467, 1096, 1377, 1220, 1093, 64, 40, 1458, 950,
	1870, 1083, 2250, 2251, 75, 139, 66, 1868, 67, 1866,
	68, 44, 139, 66, 145, 67, 1121, 1064, 1864, 69,
	1296, 3082, 3064, 957, 139, 66, 171, 67, 3047, 1325,
	1326, 1327, 1328, 171, 727, 1126, 1129, 83, 1308, 573,
	110, 3036, 2964, 2960, 576, 171, 2940, 110, 2267, 142,
	2858, 2958, 2845, 2484, 1182, 2753, 576, 1151, 2752, 110,
	496, 1187, 173, 171, 2746, 1330, 1331, 1332, 575, 173,
	1852, 2739, 2738, 2737, 729, 2733, 2732, 59, 577, 2256,
	2731, 173, 60, 1300, 1301, 115, 2730, 2705, 2703, 2602,
	2579, 2578, 2577, 1204, 2125, 140, 171, 1214, 2515, 173,
	2399, 1218, 2332, 172, 2323, 2289, 2256, 2276, 1303, 1281,
	172, 2403, 165, 1282, 1323, 63, 2249, 917, 1368, 165,
	166, 2246, 172, 2243, 2242, 2240, 2218, 166, 2217, 2256,
	2199, 165, 173, 1302, 1970, 1296, 1825, 1589, 912, 166,
	172, 138, 1525, 1523, 4, 1381, 1295, 3154, 544, 165,
	1374, 3137, 1363, 3136, 1201, 2266, 1082, 166, 2531, 3055,
	138, 2260, 2252, 2253, 2254, 2255, 2257, 2258, 3050, 3006,
	1685, 2013, 2997, 172, 2996, 2992, 2991, 2985, 138, 2166,
	171, 2982, 165, 1329, 1304, 1305, 1306, 1307, 1309, 1310,
	166, 2956, 2955, 1280, 1819, 2903, 2882, 2832, 2827, 2825,
	1324, 2812, 574, 1221, 2795, 2751, 171, 2695, 2671, 2662,
	1308, 138, 2661, 40, 2659, 2636, 173, 2635, 2625, 64,
	2624, 1300, 1301, 2590, 2497, 2464, 2462, 44, 2384, 2368,
	2347, 2346, 2292, 2844, 2227, 2226, 2223, 1330, 1331, 1332,
	1364, 2267, 173, 2192, 727, 1404, 1303, 139, 66, 1409,
	67, 2127, 1960, 496, 714, 573, 1951, 172, 496, 1938,
	1862, 1826, 1534, 1389, 1388, 1387, 165, 713, 171, 1292,
	1293, 1302, 1386, 1385, 166, 1438, 1297, 2250, 2251, 576,
	1452, 1430, 110, 172, 575, 496, 1323, 1421, 1420, 1429,
	1415, 1414, 165, 59, 577, 2084, 1413, 1411, 60, 1410,
	166, 1300, 1301, 1407, 173, 1406, 1397, 1097, 1100, 1396,
	1395, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	1394, 138, 1393, 1482, 1392, 1391, 1303, 1390, 1378, 1363,
	1200, 63, 1184, 1448, 1153, 2265, 1147, 2976, 2857, 1435,
	1436, 1399, 1405, 2906, 1402, 172, 2725, 2702, 1308, 2597,
	1412, 1302, 2593, 2203, 165, 2252, 2253, 2254, 2255, 2257,
	2258, 2122, 166, 1464, 1952, 1374, 2347, 2460, 2250, 2251,
	130, 1361, 1324, 899, 2137, 1330, 1331, 1332, 1217, 171,
	2422, 2850, 2697, 138, 2254, 2255, 2257, 2258, 2696, 2313,
	1684, 2600, 1457, 2039, 1854, 1458, 1418, 1416, 1300, 1301,
	1671, 1449, 1419, 1417, 2256, 2252, 2253, 2254, 2255, 2257,
	2258, 1871, 727, 863, 1426, 173, 1195, 1278, 957, 496,
	2136, 1869, 1488, 1303, 1323, 970, 1424, 2634, 1867, 1684,
	1865, 2933, 1461, 1476, 2388, 64, 1684, 2383, 1428, 1863,
	2379, 2961, 2367, 496, 970, 496, 496, 2284, 1302, 2959,
	1392, 1392, 1855, 209, 2283, 2282, 172, 2281, 1383, 1512,
	2176, 1228, 1658, 139, 66, 165, 67, 496, 496, 1213,
	894, 2110, 1544, 166, 496, 2015, 496, 1535, 496, 2470,
	2266, 1590, 496, 2378, 171, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 2155, 1547, 138, 576, 1675, 1674, 110, 1684,
	1681, 2081, 1501, 1507, 895, 2885, 2533, 1483, 2208, 1840,
	1324, 1581, 1400, 1271, 957, 3093, 1856, 1853, 3090, 2434,
	173, 200, 3083, 2611, 1225, 1308, 3039, 2669, 2113, 3117,
	538, 509, 496, 957, 1480, 3116, 2804, 890, 209, 496,
	496, 2139, 1555, 3010, 888, 1257, 957, 2480, 1269, 209,
	496, 1553, 1986, 496, 496, 1672, 1484, 1485, 911, 496,
	886, 172, 1380, 1531, 1660, 1061, 2267, 1648, 1454, 476,
	165, 1587, 919, 1060, 3084, 479, 1256, 884, 166, 3153,
	2932, 970, 1650, 725, 2931, 2929, 2928, 2649, 2644, 881,
	1678, 496, 1270, 770, 201, 1215, 496, 1562, 1518, 138,
	1712, 209, 496, 476, 496, 1858, 496, 1121, 496, 479,
	496, 2643, 1977, 2608, 537, 508, 2607, 519, 2222, 2221,
	496, 1464, 496, 2639, 1304, 1305, 1306, 1307, 1309, 1310,
	496, 496, 496, 2220, 2219, 2179, 1989, 2111, 2067, 1538,
	2461, 1216, 2032, 1652, 2026, 2022, 1569, 2003, 1557, 1571,
	1560, 724, 1573, 1801, 1471, 1425, 1576, 1472, 2821, 496,
	1057, 1223, 1918, 970, 1598, 1917, 1151, 1916, 2078, 202,
	1915, 1759, 1662, 2654, 1618, 1085, 1191, 2261, 2259, 2260,
	2252, 2253, 2254, 2255, 2257, 2258, 1719, 3009, 476, 520,
	2963, 1584, 531, 1680, 479, 1724, 2483, 1852, 1730, 476,
	1977, 1679, 2036, 1201, 1725, 479, 1683, 1692, 2047, 1310,
	1588, 1976, 1521, 1996, 608, 1816, 726, 1749, 1756, 3058,
	607, 1659, 1300, 1301, 1586, 700, 925, 1995, 590, 1816,
	925, 1529, 1561, 1368, 2910, 1649, 1858, 608, 970, 1473,
	1255, 3108, 1844, 1676, 2429, 1688, 1252, 1303, 3139, 1823,
	2123, 476, 1475, 1694, 1821, 2522, 1096, 479, 204, 1721,
	2481, 1880, 1988, 2525, 536, 1905, 1192, 2375, 1566, 2800,
	1885, 1885, 1302, 203, 1896, 1898, 2258, 1903, 1398, 2370,
	1598, 1598, 536, 2142, 1697, 1926, 496, 1703, 496, 1299,
	1840, 1194, 1199, 1253, 1930, 2144, 1685, 2013, 2627, 1726,
	1500, 1477, 3116, 1306, 1307, 1309, 1310, 3021, 1728, 1729,
	199, 2645, 970, 714, 1277, 2019, 714, 714, 496, 2523,
	496, 1747, 1881, 2168, 2169, 2145, 1739, 496, 970, 1740,
	1741, 1486, 496, 1268, 3022, 1685, 2013, 2143, 1837, 535,
	496, 723, 1685, 2013, 1503, 197, 2988, 2430, 496, 1308,
	2361, 2479, 1858, 727, 2069, 1478, 1517, 535, 2023, 727,
	496, 2866, 1453, 957, 2876, 2935, 917, 1987, 1691, 1358,
	1835, 1723, 2363, 1827, 496, 970, 1330, 1331, 1332, 200,
	496, 496, 1978, 2225, 3079, 1947, 1231, 1478, 1478, 198,
	522, 521, 2472, 1533, 892, 496, 2429, 891, 496, 528,
	2798, 1224, 1969, 899, 882, 1685, 1682, 2006, 1858, 2637,
	1222, 1914, 688, 2362, 2387, 2365, 1893, 1968, 1990, 1992,
	882, 523, 496, 1953, 496, 1323, 496, 1961, 1962, 496,
	2066, 496, 735, 496, 726, 496, 496, 883, 496, 957,
	957, 957, 2707, 2000, 957, 2033, 1928, 1927, 1958, 882,
	1758, 496, 727, 1936, 1937, 2005, 1084, 1948, 1949, 1711,
	2714, 2103, 2104, 2034, 1944, 538, 513, 2475, 2359, 2029,
	1598, 1585, 1461, 1998, 2014, 2016, 2017, 2018, 764, 1981,
	533, 2004, 1798, 538, 948, 3140, 2044, 2020, 2046, 506,
	503, 2698, 740, 2021, 1663, 2911, 3080, 1974, 533, 1190,
	689, 1205, 1239, 2358, 196, 1567, 2099, 2005, 2799, 2628,
	1504, 1324, 496, 1833, 1474, 534, 3078, 1193, 1265, 477,
	2083, 2181, 2083, 1508, 494, 1841, 1061, 1982, 2101, 3115,
	476, 515, 3113, 534, 2040, 1815, 479, 130, 541, 2094,
	2836, 585, 2862, 2128, 541, 477, 130, 585, 605, 537,
	2115, 970, 1822, 496, 612, 2834, 2474, 1471, 512, 532,
	1472, 496, 632, 496, 3081, 2087, 701, 537, 2106, 589,
	2096, 2471, 2097, 1471, 2098, 1173, 1472, 532, 2100, 2075,
	513, 2132, 2073, 2133, 496, 496, 496, 3107, 496, 2107,
	1982, 2114, 919, 2153, 201, 2154, 1151, 2124, 1537, 1266,
	1437, 1188, 1696, 506, 1796, 1799, 1298, 496, 1177, 1198,
	1444, 499, 919, 1288, 2867, 1972, 1210, 2092, 2392, 1516,
	2126, 2749, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 690, 1405, 2921, 1412, 2396, 2861, 2568, 3145, 1447,
	2129, 2920, 1473, 2473, 541, 541, 1982, 2901, 1402, 2131,
	1795, 3132, 932, 1232, 1440, 1475, 2161, 1945, 1473, 524,
	2979, 2140, 1478, 1267, 130, 1287, 2189, 509, 130, 202,
	1445, 1475, 512, 1716, 2610, 2343, 494, 494, 494, 1210,
	962, 494, 507, 2195, 2339, 1943, 1210, 2187, 2076, 1510,
	1368, 477, 1063, 2182, 496, 2156, 1735, 1211, 2521, 2158,
	1233, 1212, 2803, 1230, 1477, 505, 525, 1509, 2074, 2802,
	2215, 2216, 1556, 3106, 1175, 1174, 1670, 504, 1444, 1546,
	1477, 2163, 1545, 1541, 2007, 691, 2201, 2165, 2863, 688,
	1536, 1666, 1358, 2321, 1506, 3030, 1287, 2674, 2838, 2902,
	2349, 1240, 526, 2348, 527, 1286, 514, 1447, 2174, 735,
	925, 508, 733, 2750, 688, 1176, 1484, 1485, 204, 1446,
	1211, 510, 2569, 692, 1212, 1442, 1797, 1211, 1693, 2570,
	925, 1212, 3144, 203, 735, 1490, 1288, 1668, 1445, 600,
	2310, 509, 1942, 2184, 1926, 1926, 1926, 2180, 1736, 2291,
	2051, 1478, 1494, 1669, 2185, 970, 507, 1941, 2190, 1443,
	2294, 2024, 2303, 2050, 1118, 2301, 2302, 1478, 734, 727,
	199, 496, 724, 2656, 496, 2401, 1286, 689, 1469, 505,
	2322, 1107, 496, 496, 970, 1116, 3130, 496, 579, 2207,
	593, 504, 1106, 1491, 3120, 496, 496, 496, 2150, 2824,
	2801, 496, 689, 2899, 496, 197, 483, 2391, 2755, 2008,
	2009, 496, 496, 496, 496, 496, 2583, 2330, 1861, 2833,
	514, 3122, 2397, 1275, 496, 508, 3, 1446, 2881, 2315,
	2748, 496, 2653, 2318, 2900, 510, 2279, 2102, 2496, 200,
	2449, 1262, 2241, 496, 957, 2280, 917, 496, 3131, 198,
	2191, 2340, 1710, 970, 572, 36, 2317, 496, 1495, 2344,
	2312, 571, 35, 970, 2326, 2327, 917, 2286, 2287, 2288,
	970, 1260, 1250, 2295, 570, 32, 2130, 1474, 3133, 2369,
	2031, 2002, 496, 1527, 496, 2316, 496, 2186, 957, 496,
	957, 957, 957, 1474, 496, 2188, 496, 1248, 1276, 1246,
	496, 2345, 2329, 2331, 1244, 496, 1185, 496, 690, 2351,
	2157, 2355, 2356, 1242, 496, 2334, 2324, 2152, 1496, 1497,
	2134, 2366, 1598, 1236, 1114, 598, 599, 1860, 1476, 1492,
	1713, 496, 496, 690, 957, 1700, 2425, 2380, 1651, 2436,
	2424, 2385, 2364, 494, 1091, 1117, 494, 1384, 2371, 494,
	2382, 496, 962, 1476, 2372, 1111, 1493, 2374, 2373, 2381,
	880, 494, 2405, 1274, 2455, 2402, 1115, 1096, 2386, 578,
	2376, 494, 494, 494, 494, 962, 591, 592, 569, 79,
	496, 1261, 1512, 2467, 2466, 2398, 2406, 3074, 1512, 1709,
	2423, 2336, 484, 485, 2414, 496, 1982, 2459, 568, 78,
	2651, 936, 691, 565, 23, 2465, 2350, 1515, 2353, 566,
	24, 1259, 1249, 1096, 3027, 632, 2410, 2773, 2632, 564,
	30, 970, 2435, 130, 2442, 732, 2630, 691, 494, 36,
	2609, 970, 2418, 1498, 727, 2510, 35, 1247, 2499, 1245,
	692, 2416, 2300, 919, 1243, 2079, 496, 2071, 2070, 32,
	1196, 919, 919, 1241, 2448, 919, 563, 21, 1617, 2068,
	1598, 632, 2065, 1235, 1113, 692, 2476, 2477, 2478, 561,
	20, 2328, 130, 487, 486, 1580, 2443, 2444, 2445, 2482,
	2446, 2447, 1579, 2534, 1577, 562, 19, 551, 15, 552,
	16, 1575, 2487, 560, 57, 2489, 1572, 2517, 2518, 2519,
	2433, 559, 56, 2485, 885, 887, 1749, 2537, 1570, 2433,
	2503, 550, 55, 1568, 2580, 1526, 1524, 2543, 1812, 488,
	489, 1513, 1502, 1499, 1487, 1440, 1479, 1749, 2548, 2509,
	558, 12, 1598, 2420, 549, 50, 2298, 496, 494, 1810,
	2524, 2526, 2527, 1092, 2305, 2306, 2530, 2949, 2311, 908,
	2394, 2172, 496, 79, 970, 2536, 3117, 2394, 2856, 2572,
	2855, 1689, 2576, 2951, 2545, 556, 47, 1290, 2787, 1598,
	1598, 909, 1977, 78, 1617, 1617, 2547, 1994, 23, 2604,
	2683, 557, 48, 1993, 24, 2584, 2622, 548, 49, 1444,
	1598, 1598, 2642, 2784, 30, 2573, 2819, 2035, 555, 7,
	2030, 925, 554, 6, 2025, 553, 38, 130, 2648, 925,
	925, 2581, 1977, 925, 2589, 2586, 2587, 2001, 1447, 2596,
	2173, 496, 496, 1991, 496, 1598, 547, 37, 2135, 496,
	2990, 21, 1656, 1657, 2785, 1806, 1442, 970, 1595, 970,
	2792, 2605, 957, 1807, 20, 2652, 1808, 1291, 1234, 1445,
	1813, 910, 2613, 2966, 580, 2756, 2601, 2663, 2010, 496,
	19, 1997, 15, 1294, 16, 2028, 2687, 2640, 57, 1999,
	1443, 2638, 3026, 2830, 1300, 1301, 56, 2086, 1533, 2646,
	2680, 2072, 2377, 2647, 2064, 2676, 55, 2309, 2650, 496,
	2621, 1929, 970, 496, 496, 970, 496, 2679, 2665, 2675,
	2658, 2005, 1661, 1591, 496, 12, 2666, 2660, 2506, 50,
	2667, 3128, 970, 2657, 2456, 3143, 2728, 2677, 2513, 1300,
	1301, 2706, 2681, 601, 1302, 2670, 2409, 2672, 2411, 2412,
	2413, 612, 2711, 2631, 2689, 2633, 541, 917, 1446, 2688,
	47, 1371, 2704, 2721, 1303, 917, 917, 2250, 2251, 917,
	2701, 2708, 496, 2528, 1595, 1595, 48, 1456, 2716, 2699,
	2700, 932, 49, 494, 1617, 2780, 2463, 2712, 2781, 1302,
	2147, 2693, 2457, 7, 1300, 1301, 2148, 6, 1895, 1809,
	38, 2147, 2146, 2709, 1227, 1850, 2520, 1811, 1264, 1226,
	1381, 1263, 1379, 2848, 2691, 1273, 1272, 1258, 1254, 1251,
	2717, 37, 1237, 2783, 1197, 1664, 893, 699, 2909, 3038,
	2989, 496, 2786, 686, 2357, 1699, 1982, 1238, 1701, 2314,
	919, 970, 496, 1950, 970, 2308, 3020, 2747, 496, 496,
	496, 2734, 2224, 2972, 2875, 1859, 1382, 1598, 53, 2618,
	759, 2606, 2774, 2760, 2612, 2058, 496, 2057, 973, 1673,
	781, 496, 1884, 496, 2092, 1750, 496, 496, 496, 496,
	496, 783, 1596, 2622, 496, 496, 957, 2793, 2761, 786,
	970, 2758, 2759, 2762, 957, 785, 784, 1597, 2797, 1408,
	2772, 782, 496, 496, 2763, 1594, 2090, 676, 2807, 2808,
	1677, 1820, 1838, 2206, 1375, 2820, 957, 477, 2622, 751,
	1836, 1183, 750, 2319, 2766, 2428, 496, 2843, 2782, 2764,
	2622, 1734, 2164, 2592, 2828, 496, 496, 957, 957, 2814,
	2831, 1063, 1731, 494, 1532, 2629, 2771, 511, 2247, 1146,
	2842, 477, 1911, 1904, 2829, 2767, 1900, 1279, 1359, 2840,
	2091, 2865, 2841, 2425, 1595, 1552, 1552, 2849, 970, 919,
	2806, 2851, 494, 2839, 494, 2847, 494, 2811, 2818, 1219,
	541, 2437, 2121, 1742, 2852, 907, 906, 2621, 905, 3044,
	746, 3041, 2864, 1667, 2141, 1352, 755, 2299, 925, 968,
	2887, 2404, 1056, 1089, 1351, 2868, 889, 2981, 496, 1096,
	970, 1209, 2815, 1208, 496, 1207, 496, 2883, 970, 496,
	2342, 3138, 2621, 2626, 170, 167, 2846, 496, 169, 168,
	632, 2390, 2874, 970, 2621, 925, 477, 1063, 585, 2917,
	82, 2888, 2889, 2770, 2896, 1982, 34, 477, 1063, 2622,
	33, 962, 494, 109, 108, 925, 2930, 632, 107, 2914,
	106, 105, 2298, 2892, 2894, 104, 2805, 925, 103, 2912,
	102, 925, 101, 100, 2810, 496, 925, 496, 99, 2913,
	957, 2915, 98, 97, 2622, 496, 2622, 96, 95, 632,
	2893, 2622, 94, 93, 494, 92, 91, 90, 1982, 477,
	494, 2923, 494, 2796, 494, 89, 494, 970, 494, 88,
	87, 1598, 86, 2895, 2891, 919, 85, 2950, 1714, 84,
	1715, 2433, 2948, 2947, 2953, 628, 496, 925, 494, 494,
	494, 2768, 496, 625, 917, 2952, 81, 2946, 2826, 80,
	496, 2934, 2679, 31, 2962, 26, 113, 923, 2970, 114,
	2835, 2425, 25, 2621, 2984, 2965, 2978, 632, 77, 76,
	29, 1738, 18, 11, 1598, 17, 2977, 22, 135, 496,
	496, 2623, 2941, 134, 133, 132, 496, 131, 14, 13,
	128, 129, 127, 126, 3001, 2986, 3003, 957, 2621, 125,
	2621, 2641, 496, 490, 124, 2621, 957, 957, 123, 10,
	496, 8, 496, 2641, 496, 2924, 2925, 2641, 2757, 1982,
	3023, 3005, 2641, 3008, 2975, 112, 9, 3014, 3015, 2859,
	2987, 3016, 2469, 496, 3013, 70, 496, 3033, 71, 496,
	3007, 970, 3017, 2995, 3018, 27, 43, 42, 41, 111,
	3048, 3049, 1598, 3046, 161, 160, 3053, 3051, 159, 3052,
	158, 3054, 154, 2998, 157, 2872, 155, 3040, 3034, 156,
	3059, 153, 122, 917, 163, 2622, 496, 2994, 3057, 162,
	151, 148, 150, 925, 3035, 152, 1617, 149, 147, 164,
	121, 120, 3073, 3072, 612, 3071, 541, 1906, 119, 3012,
	118, 496, 117, 116, 3097, 5, 2, 2872, 3098, 496,
	3099, 932, 1, 0, 2936, 1758, 2938, 3086, 0, 3105,
	0, 2942, 925, 0, 2622, 496, 541, 0, 541, 3102,
	1758, 932, 0, 3096, 2816, 494, 0, 0, 0, 3112,
	1985, 3111, 3114, 0, 0, 3103, 3104, 0, 494, 3119,
	3118, 3124, 3125, 3046, 3121, 940, 494, 925, 0, 0,
	966, 3127, 0, 0, 0, 0, 0, 0, 494, 925,
	2787, 0, 0, 3135, 2993, 3134, 0, 0, 0, 2621,
	3142, 0, 494, 3141, 0, 2853, 2854, 0, 477, 2041,
	3146, 3147, 0, 0, 0, 2784, 0, 3148, 2777, 0,
	0, 3151, 3152, 2054, 1056, 0, 1063, 0, 3155, 3157,
	0, 2775, 0, 0, 0, 0, 2779, 0, 0, 917,
	0, 0, 0, 0, 1617, 0, 0, 0, 2621, 0,
	1985, 0, 541, 0, 494, 0, 2785, 494, 0, 494,
	0, 494, 0, 494, 494, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2623, 1985,
	0, 0, 0, 0, 2778, 0, 1595, 0, 0, 0,
	2193, 2194, 0, 0, 0, 0, 0, 0, 0, 2250,
	2251, 0, 0, 0, 0, 0, 0, 0, 925, 0,
	0, 0, 0, 2623, 0, 3056, 1617, 0, 0, 0,
	0, 0, 0, 0, 2092, 2623, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 925,
	585, 0, 0, 925, 0, 925, 0, 0, 1758, 0,
	925, 0, 0, 1617, 1617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1617, 1617, 0, 0, 0, 0,
	0, 494, 0, 2273, 2274, 2275, 0, 2780, 0, 1063,
	2781, 1063, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2250, 2251, 0, 2268, 2269, 2270, 0, 1617,
	0, 0, 494, 494, 494, 0, 494, 0, 0, 0,
	2719, 2250, 2251, 0, 1595, 2783, 2256, 0, 0, 0,
	0, 0, 0, 0, 2786, 494, 0, 1300, 1301, 0,
	0, 0, 497, 0, 2623, 0, 0, 0, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 1439,
	2265, 0, 1303, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2641, 0, 0, 0, 2623,
	0, 2623, 1087, 208, 0, 0, 2623, 1302, 1105, 0,
	0, 0, 0, 0, 574, 0, 1595, 0, 0, 0,
	0, 0, 2266, 0, 0, 40, 0, 0, 0, 208,
	1125, 1125, 1125, 966, 0, 0, 0, 1906, 1906, 44,
	0, 0, 1063, 0, 925, 0, 0, 0, 0, 2256,
	2782, 0, 0, 1595, 1595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 573, 2256, 0,
	0, 0, 0, 0, 1595, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 0, 0, 1180, 0, 0,
	0, 0, 0, 925, 0, 1367, 575, 2271, 0, 0,
	0, 0, 0, 0, 0, 59, 577, 2641, 2267, 1595,
	60, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 2266, 0, 0, 0, 0,
	1906, 1906, 1906, 0, 0, 0, 0, 0, 0, 0,
	0, 1617, 932, 63, 2266, 0, 0, 0, 0, 0,
	932, 932, 0, 0, 932, 0, 0, 0, 0, 541,
	1323, 0, 541, 958, 0, 0, 971, 971, 0, 0,
	541, 541, 0, 0, 0, 541, 2494, 2495, 0, 0,
	2623, 0, 0, 494, 1985, 2338, 0, 0, 0, 1985,
	0, 0, 2338, 0, 0, 0, 0, 0, 0, 1985,
	2338, 1985, 2338, 2338, 0, 0, 0, 0, 0, 0,
	0, 2267, 494, 0, 0, 0, 0, 0, 0, 1532,
	2259, 2260, 2252, 2253, 2254, 2255, 2257, 2258, 0, 2623,
	2267, 494, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 494, 1324, 64, 2549, 2550,
	2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
	2561, 2562, 2563, 2564, 2565, 2566, 2567, 0, 2571, 0,
	1552, 0, 1552, 0, 494, 139, 66, 494, 67, 0,
	0, 0, 494, 0, 494, 0, 0, 0, 962, 0,
	0, 0, 0, 1985, 0, 541, 171, 0, 0, 0,
	0, 0, 1985, 0, 0, 0, 0, 576, 0, 0,
	110, 0, 0, 0, 0, 2262, 2263, 2264, 0, 2453,
	1063, 1595, 2261, 2259, 2260, 2252, 2253, 2254, 2255, 2257,
	2258, 0, 173, 0, 0, 0, 0, 0, 0, 1063,
	0, 2261, 2259, 2260, 2252, 2253, 2254, 2255, 2257, 2258,
	0, 0, 0, 862, 0, 0, 0, 0, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 2486, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 494, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 1617, 0, 0, 0, 0,
	0, 0, 0, 1906, 1906, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1617, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 1069, 0, 1075, 0,
	0, 958, 958, 0, 0, 1906, 1906, 1906, 1906, 1906,
	1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906,
	1906, 1906, 1906, 1906, 0, 1906, 0, 0, 0, 0,
	958, 958, 0, 0, 0, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 1301, 0, 932,
	0, 0, 1343, 1344, 1345, 541, 1617, 0, 0, 0,
	0, 0, 2250, 2251, 0, 2268, 2269, 2270, 0, 0,
	541, 1303, 0, 0, 1349, 0, 0, 0, 2250, 2251,
	2718, 2268, 2269, 2270, 959, 0, 2620, 972, 972, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 1181, 0, 0, 1322, 1595, 1456, 0, 1186, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 1456, 0,
	2265, 0, 1456, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 2265, 738, 0, 1985,
	1552, 738, 1552, 1559, 0, 1559, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 1595, 0,
	0, 0, 0, 0, 1325, 1326, 1327, 1328, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 1985, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2256,
	0, 0, 0, 0, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 2256, 0, 1063, 0, 0,
	0, 962, 494, 0, 494, 0, 0, 0, 0, 0,
	0, 1654, 494, 0, 0, 0, 0, 0, 0, 1824,
	0, 0, 0, 0, 0, 0, 1595, 2271, 0, 0,
	1367, 0, 1338, 0, 0, 0, 0, 0, 0, 1323,
	0, 1353, 1354, 1355, 1356, 1357, 0, 0, 0, 0,
	0, 0, 0, 1698, 1366, 2266, 0, 0, 0, 1704,
	2735, 1705, 1376, 1706, 2880, 1707, 0, 1708, 0, 0,
	0, 2266, 0, 0, 0, 1910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1717, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2904, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	541, 0, 0, 0, 0, 0, 1985, 2338, 1985, 0,
	0, 2267, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 2620, 1063, 0, 0, 2267, 0, 1985,
	0, 2338, 0, 0, 1063, 1063, 494, 1985, 2338, 0,
	0, 0, 494, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 959, 0, 0, 0, 0, 2620, 0,
	1063, 2054, 0, 0, 0, 0, 0, 2969, 0, 0,
	2620, 0, 0, 0, 0, 1433, 1433, 1433, 0, 0,
	0, 959, 959, 0, 1985, 0, 0, 0, 959, 0,
	0, 0, 0, 2453, 2453, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 2262, 2263, 2264, 0, 0,
	0, 0, 2261, 2259, 2260, 2252, 2253, 2254, 2255, 2257,
	2258, 2262, 2263, 2264, 0, 0, 0, 0, 2261, 2259,
	2260, 2252, 2253, 2254, 2255, 2257, 2258, 0, 0, 0,
	0, 0, 0, 0, 1971, 0, 0, 0, 0, 0,
	0, 1906, 0, 0, 0, 0, 541, 0, 0, 0,
	0, 0, 1985, 0, 2338, 0, 0, 2898, 0, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 0, 2620,
	0, 0, 0, 0, 0, 0, 0, 0, 1906, 0,
	0, 966, 0, 0, 0, 0, 959, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	1456, 0, 0, 0, 2620, 0, 2620, 0, 0, 0,
	0, 2620, 0, 494, 0, 494, 971, 0, 0, 0,
	0, 0, 0, 1063, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 2095, 0, 0, 1125, 0, 1125, 0,
	1125, 0, 966, 966, 0, 0, 0, 0, 760, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 0, 0, 0, 0, 0,
	541, 0, 0, 0, 1906, 0, 0, 0, 2898, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 1985, 2338, 74,
	208, 0, 1456, 0, 494, 0, 0, 0, 958, 0,
	0, 208, 0, 0, 0, 1910, 1910, 0, 0, 0,
	2338, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	1063, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	2151, 3031, 0, 0, 1063, 738, 738, 494, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 2620, 0, 728, 0, 0,
	0, 2160, 966, 2162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2175, 0, 0, 0, 1910, 1910,
	1910, 0, 920, 74, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 2620, 971, 1732, 1985, 1737, 0,
	0, 0, 0, 0, 1744, 0, 0, 0, 0, 0,
	0, 0, 0, 2898, 1760, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 0,
	1800, 0, 1802, 1803, 1804, 1805, 0, 0, 0, 0,
	0, 0, 0, 2250, 2251, 0, 2268, 2269, 2270, 0,
	971, 1828, 0, 0, 0, 0, 0, 0, 0, 1366,
	0, 2501, 0, 0, 2250, 2251, 2116, 2268, 2269, 2270,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 0, 0, 0,
	0, 44, 0, 0, 2250, 2251, 0, 2268, 2269, 2270,
	0, 2265, 0, 1902, 0, 1913, 0, 0, 0, 0,
	1919, 1924, 2500, 0, 0, 0, 0, 0, 0, 2117,
	0, 959, 2265, 0, 971, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 972, 2118, 0,
	0, 0, 2265, 0, 0, 0, 0, 0, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2256, 0, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 2335, 0, 0, 0, 0, 971, 0, 0,
	0, 2256, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 2043, 0, 2045, 0, 959, 2271, 0,
	0, 2256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1910, 1910, 0, 0, 0, 959, 0, 0, 2271,
	0, 0, 0, 0, 2389, 0, 2266, 0, 0, 959,
	0, 958, 958, 958, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2266, 0, 2271,
	0, 0, 0, 2407, 74, 0, 74, 0, 74, 0,
	0, 2415, 0, 2417, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2266, 0, 64,
	0, 0, 0, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 0, 1910, 0, 0, 0, 139, 66, 0,
	67, 0, 2267, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 2267, 0, 0, 0, 0, 0, 576,
	0, 0, 110, 971, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 2490, 2267, 173, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2250, 2251, 0,
	2268, 2269, 2270, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 2262, 2263, 2264, 0,
	0, 972, 166, 2261, 2259, 2260, 2252, 2253, 2254, 2255,
	2257, 2258, 0, 0, 0, 0, 0, 2262, 2263, 2264,
	0, 0, 0, 138, 2261, 2259, 2260, 2252, 2253, 2254,
	2255, 2257, 2258, 0, 0, 2265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2177, 2178, 2262, 2263, 2264,
	0, 2183, 0, 0, 2261, 2259, 2260, 2252, 2253, 2254,
	2255, 2257, 2258, 0, 0, 0, 0, 0, 0, 0,
	2196, 0, 0, 0, 0, 972, 0, 0, 0, 715,
	0, 0, 0, 0, 2202, 0, 0, 0, 0, 0,
	2209, 972, 0, 0, 0, 2214, 0, 0, 0, 0,
	0, 1362, 0, 1365, 2256, 0, 0, 0, 0, 0,
	1372, 0, 2228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 959, 0, 2272, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 2271, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 971, 0, 1349,
	1924, 1924, 1924, 0, 0, 0, 2664, 0, 0, 0,
	2266, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	2304, 1302, 0, 0, 0, 0, 971, 0, 0, 1322,
	0, 0, 959, 959, 959, 0, 1319, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2710, 0, 966, 0, 0, 2360, 0, 0, 0,
	0, 2713, 0, 0, 0, 0, 958, 0, 0, 1325,
	1326, 1327, 1328, 0, 74, 971, 2267, 1455, 1308, 0,
	0, 1460, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	958, 0, 958, 958, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 2426, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1323, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1910,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	2262, 2263, 2264, 0, 0, 0, 1337, 2261, 2259, 2260,
	2252, 2253, 2254, 2255, 2257, 2258, 738, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 1910, 0, 0, 738,
	0, 0, 0, 0, 0, 2809, 0, 0, 0, 0,
	0, 1105, 0, 1329, 0, 0, 2488, 0, 0, 0,
	1744, 0, 0, 0, 0, 0, 2492, 0, 0, 2493,
	1324, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 2498, 0, 971, 0, 0, 0, 0, 2504, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 2511, 0,
	0, 0, 2304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2538, 2539, 0, 2540, 2541, 2542, 0, 0, 0,
	0, 2544, 1910, 0, 0, 0, 0, 0, 2546, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2574,
	2575, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 2197, 0, 2905, 0, 0, 0, 972, 2591,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 2614, 0, 0, 0,
	0, 0, 2943, 0, 2945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 715, 0,
	0, 715, 715, 0, 0, 0, 0, 959, 0, 971,
	0, 971, 0, 0, 958, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2690, 959, 0, 959, 959, 959, 0, 0, 0, 1818,
	0, 0, 0, 2999, 971, 0, 0, 971, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 3019, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 2720, 0, 0, 0,
	2723, 2724, 0, 0, 0, 0, 3037, 0, 0, 0,
	0, 0, 2726, 0, 0, 0, 2729, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2736, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 1460, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 972, 1349, 0, 0, 0, 0,
	74, 0, 0, 971, 972, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 74, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 2794,
	0, 0, 0, 74, 0, 74, 0, 0, 958, 0,
	0, 0, 971, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 958, 74,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 1308, 0, 0, 0, 0, 958,
	958, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 972, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 2869, 2870,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	2878, 2879, 0, 1338, 0, 0, 0, 0, 0, 0,
	1323, 0, 971, 0, 0, 2886, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 972, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 2922, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 958, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 972, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1818, 0,
	0, 0, 0, 2980, 0, 0, 2983, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 1339, 958, 958,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0,
	2742, 1615, 0, 0, 2741, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 972, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1626, 1611, 1616, 1599,
	1636, 1635, 0, 0, 1601, 1600, 0, 0, 0, 0,
	0, 1645, 1644, 0, 0, 0, 0, 0, 0, 959,
	0, 3070, 3070, 972, 0, 0, 0, 959, 0, 0,
	0, 0, 920, 0, 0, 0, 0, 0, 0, 3087,
	920, 920, 0, 0, 920, 0, 0, 0, 0, 959,
	0, 1637, 0, 1633, 1632, 0, 0, 0, 0, 0,
	0, 0, 0, 1631, 0, 0, 0, 3070, 0, 0,
	959, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1630, 1628, 1629, 0, 0, 0, 0, 74, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 0, 74, 3070, 0,
	0, 1619, 1614, 1620, 1621, 1622, 1623, 1624, 0, 1618,
	0, 0, 0, 972, 0, 0, 0, 0, 1642, 1643,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 972, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 1603,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 1634, 0, 0, 0, 1612, 1613, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 1753, 1751, 1752, 1755, 1754, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 1605, 1606,
	1607, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1625, 1608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1602,
	0, 0, 1638, 1639, 1640, 1641, 0, 0, 0, 0,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	959, 0, 0, 0, 0, 0, 0, 1609, 0, 0,
	0, 0, 1646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1849,
	0, 779, 767, 768, 765, 766, 758, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 1846, 262, 0, 0, 0, 0, 815, 761, 920,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 1847, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 920, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 74, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 920, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 1845, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 74, 0, 743, 0, 0, 0, 0,
	741, 742, 1848, 0, 0, 0, 0, 0, 0, 754,
	1843, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1818,
	258, 259, 260, 261, 974, 262, 975, 976, 977, 978,
	214, 979, 980, 981, 982, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 983, 269, 270, 271, 272,
	273, 274, 984, 985, 219, 220, 221, 986, 275, 222,
	987, 933, 988, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 989, 285, 0, 286, 287, 990, 864,
	288, 289, 290, 991, 992, 994, 993, 995, 996, 997,
	291, 292, 498, 293, 294, 295, 223, 224, 998, 296,
	999, 297, 1000, 298, 1001, 1002, 299, 300, 1003, 301,
	302, 1004, 0, 1005, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1006, 865, 1007, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1008,
	318, 1009, 1010, 866, 319, 1011, 320, 229, 1012, 230,
	1013, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	868, 1014, 237, 328, 0, 0, 0, 1015, 327, 329,
	336, 1016, 867, 330, 234, 332, 331, 333, 334, 335,
	235, 1017, 236, 1018, 337, 869, 870, 338, 339, 340,
	871, 341, 342, 0, 0, 343, 344, 345, 1019, 347,
	346, 1020, 238, 872, 348, 349, 873, 1021, 350, 351,
	1022, 1023, 352, 0, 353, 935, 934, 354, 355, 356,
	357, 359, 360, 358, 874, 361, 362, 364, 363, 1024,
	1025, 875, 1026, 239, 365, 240, 366, 367, 1027, 368,
	369, 1028, 1029, 370, 371, 1030, 1031, 372, 241, 876,
	373, 877, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 1032, 382, 243, 383, 244, 384, 1033, 385, 386,
	387, 388, 389, 245, 390, 391, 1034, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	1035, 404, 878, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 1036, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 1037, 429, 410,
	411, 430, 879, 431, 247, 432, 433, 1038, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	1039, 444, 445, 1040, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 1041, 249, 250, 251, 454, 1042,
	1043, 455, 456, 252, 253, 1044, 457, 458, 0, 459,
	460, 1045, 1046, 461, 462, 463, 465, 1047, 466, 1048,
	464, 467, 468, 469, 254, 255, 1049, 1050, 470, 256,
	1051, 1052, 1053, 1054, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	1955, 0, 0, 0, 0, 0, 0, 0, 0, 1956,
	258, 259, 260, 261, 974, 262, 975, 976, 977, 978,
	214, 979, 980, 981, 982, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 983, 269, 270, 271, 272,
	273, 274, 984, 985, 219, 220, 221, 986, 275, 222,
	987, 933, 988, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 989, 285, 0, 286, 287, 990, 864,
	288, 289, 290, 991, 992, 994, 993, 995, 996, 997,
	291, 292, 498, 293, 294, 295, 223, 224, 998, 296,
	999, 297, 1000, 298, 1001, 1002, 299, 300, 1003, 301,
	302, 1004, 0, 1005, 225, 306, 303, 304, 307, 310,
	305, 311, 312, 226, 227, 1006, 865, 1007, 0, 0,
	0, 0, 313, 314, 228, 315, 316, 0, 317, 1008,
	318, 1009, 1010, 866, 319, 1011, 320, 229, 1012, 230,
	1013, 321, 322, 323, 324, 325, 326, 231, 232, 233,
	868, 1014, 237, 328, 0, 0, 0, 1015, 327, 329,
	336, 1016, 867, 330, 234, 332, 331, 333, 334, 335,
	235, 1017, 236, 1018, 337, 869, 870, 338, 339, 340,
	871, 341, 342, 0, 0, 343, 344, 345, 1019, 347,
	346, 1020, 238, 872, 348, 349, 873, 1021, 350, 351,
	1022, 1023, 352, 0, 353, 935, 934, 354, 355, 356,
	357, 359, 360, 358, 874, 361, 362, 364, 363, 1024,
	1025, 875, 1026, 239, 365, 240, 366, 367, 1027, 368,
	369, 1028, 1029, 370, 371, 1030, 1031, 372, 241, 876,
	373, 877, 242, 374, 375, 376, 377, 378, 379, 380,
	381, 1032, 382, 243, 383, 244, 384, 1033, 385, 386,
	387, 388, 389, 245, 390, 391, 1034, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	1035, 404, 878, 405, 406, 407, 408, 246, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 1036, 425, 426,
	420, 422, 423, 424, 421, 427, 428, 1037, 429, 410,
	411, 430, 879, 431, 247, 432, 433, 1038, 443, 434,
	435, 436, 412, 437, 441, 442, 438, 439, 440, 248,
	1039, 444, 445, 1040, 446, 447, 448, 449, 450, 308,
	451, 309, 452, 453, 1041, 249, 250, 251, 454, 1042,
	1043, 455, 456, 252, 253, 1044, 457, 458, 0, 459,
	460, 1045, 1046, 461, 462, 463, 465, 1047, 466, 1048,
	464, 467, 468, 469, 254, 255, 1049, 1050, 470, 256,
	1051, 1052, 1053, 1054, 471, 472, 257, 473, 474, 475,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2765, 258, 259, 260, 261, 974, 262, 975, 976, 977,
	978, 214, 979, 980, 981, 982, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 983, 269, 270, 271,
	272, 273, 274, 984, 985, 219, 220, 221, 986, 275,
	222, 987, 933, 988, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 989, 285, 0, 286, 287, 990,
	864, 288, 289, 290, 991, 992, 994, 993, 995, 996,
	997, 291, 292, 498, 293, 294, 295, 223, 224, 998,
	296, 999, 297, 1000, 298, 1001, 1002, 299, 300, 1003,
	301, 302, 1004, 0, 1005, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1006, 865, 1007, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1008, 318, 1009, 1010, 866, 319, 1011, 320, 229, 1012,
	230, 1013, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 868, 1014, 237, 328, 0, 0, 0, 1015, 327,
	329, 336, 1016, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 1017, 236, 1018, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 1019,
	347, 346, 1020, 238, 872, 348, 349, 873, 1021, 350,
	351, 1022, 1023, 352, 0, 353, 935, 934, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	1024, 1025, 875, 1026, 239, 365, 240, 366, 367, 1027,
	368, 369, 1028, 1029, 370, 371, 1030, 1031, 372, 241,
	876, 373, 877, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 1032, 382, 243, 383, 244, 384, 1033, 385,
	386, 387, 388, 389, 245, 390, 391, 1034, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 1035, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 1036, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 1037, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 1038, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 1039, 444, 445, 1040, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 1041, 249, 250, 251, 454,
	1042, 1043, 455, 456, 252, 253, 1044, 457, 458, 0,
	459, 460, 1045, 1046, 461, 462, 463, 465, 1047, 466,
	1048, 464, 467, 468, 469, 254, 255, 1049, 1050, 470,
	256, 1051, 1052, 1053, 1054, 471, 472, 257, 473, 474,
	475, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2873, 258, 259, 260,
	261, 974, 262, 975, 976, 977, 978, 214, 979, 980,
	981, 982, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 983, 269, 270, 271, 272, 273, 274, 984,
	985, 219, 220, 221, 986, 275, 222, 987, 933, 988,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	989, 285, 0, 286, 287, 990, 864, 288, 289, 290,
	991, 992, 994, 993, 995, 996, 997, 291, 292, 498,
	293, 294, 295, 223, 224, 998, 296, 999, 297, 1000,
	298, 1001, 1002, 299, 300, 1003, 301, 302, 1004, 0,
	1005, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1006, 865, 1007, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1008, 318, 1009, 1010,
	866, 319, 1011, 320, 229, 1012, 230, 1013, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 1014, 237,
	328, 0, 0, 0, 1015, 327, 329, 336, 1016, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 1017, 236,
	1018, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 1019, 347, 346, 1020, 238,
	872, 348, 349, 873, 1021, 350, 351, 1022, 1023, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 1024, 1025, 875, 1026,
	239, 365, 240, 366, 367, 1027, 368, 369, 1028, 1029,
	370, 371, 1030, 1031, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 1032, 382,
	243, 383, 244, 384, 1033, 385, 386, 387, 388, 389,
	245, 390, 391, 1034, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 1035, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 1036, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 1037, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 1038, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 1039, 444, 445,
	1040, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 1041, 249, 250, 251, 454, 1042, 1043, 455, 456,
	252, 253, 1044, 457, 458, 0, 459, 460, 1045, 1046,
	461, 462, 463, 465, 1047, 466, 1048, 464, 467, 468,
	469, 254, 255, 1049, 1050, 470, 256, 1051, 1052, 1053,
	1054, 471, 472, 257, 473, 474, 475, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2514, 258, 259, 260, 261, 974, 262, 975,
	976, 977, 978, 214, 979, 980, 981, 982, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 983, 269,
	270, 271, 272, 273, 274, 984, 985, 219, 220, 221,
	986, 275, 222, 987, 933, 988, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 989, 285, 0, 286,
	287, 990, 864, 288, 289, 290, 991, 992, 994, 993,
	995, 996, 997, 291, 292, 498, 293, 294, 295, 223,
	224, 998, 296, 999, 297, 1000, 298, 1001, 1002, 299,
	300, 1003, 301, 302, 1004, 0, 1005, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 1006, 865,
	1007, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 1008, 318, 1009, 1010, 866, 319, 1011, 320,
	229, 1012, 230, 1013, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 1014, 237, 328, 0, 0, 0,
	1015, 327, 329, 336, 1016, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 1017, 236, 1018, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 1019, 347, 346, 1020, 238, 872, 348, 349, 873,
	1021, 350, 351, 1022, 1023, 352, 0, 353, 935, 934,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 1024, 1025, 875, 1026, 239, 365, 240, 366,
	367, 1027, 368, 369, 1028, 1029, 370, 371, 1030, 1031,
	372, 241, 876, 373, 877, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 1032, 382, 243, 383, 244, 384,
	1033, 385, 386, 387, 388, 389, 245, 390, 391, 1034,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 1035, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	1036, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	1037, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	1038, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 1039, 444, 445, 1040, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 1041, 249, 250,
	251, 454, 1042, 1043, 455, 456, 252, 253, 1044, 457,
	458, 0, 459, 460, 1045, 1046, 461, 462, 463, 465,
	1047, 466, 1048, 464, 467, 468, 469, 254, 255, 1049,
	1050, 470, 256, 1051, 1052, 1053, 1054, 471, 472, 257,
	473, 474, 475, 969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2505, 258,
	259, 260, 261, 974, 262, 975, 976, 977, 978, 214,
	979, 980, 981, 982, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 983, 269, 270, 271, 272, 273,
	274, 984, 985, 219, 220, 221, 986, 275, 222, 987,
	933, 988, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 989, 285, 0, 286, 287, 990, 864, 288,
	289, 290, 991, 992, 994, 993, 995, 996, 997, 291,
	292, 498, 293, 294, 295, 223, 224, 998, 296, 999,
	297, 1000, 298, 1001, 1002, 299, 300, 1003, 301, 302,
	1004, 0, 1005, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 1006, 865, 1007, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 1008, 318,
	1009, 1010, 866, 319, 1011, 320, 229, 1012, 230, 1013,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 868,
	1014, 237, 328, 0, 0, 0, 1015, 327, 329, 336,
	1016, 867, 330, 234, 332, 331, 333, 334, 335, 235,
	1017, 236, 1018, 337, 869, 870, 338, 339, 340, 871,
	341, 342, 0, 0, 343, 344, 345, 1019, 347, 346,
	1020, 238, 872, 348, 349, 873, 1021, 350, 351, 1022,
	1023, 352, 0, 353, 935, 934, 354, 355, 356, 357,
	359, 360, 358, 874, 361, 362, 364, 363, 1024, 1025,
	875, 1026, 239, 365, 240, 366, 367, 1027, 368, 369,
	1028, 1029, 370, 371, 1030, 1031, 372, 241, 876, 373,
	877, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	1032, 382, 243, 383, 244, 384, 1033, 385, 386, 387,
	388, 389, 245, 390, 391, 1034, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 1035,
	404, 878, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 1036, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 1037, 429, 410, 411,
	430, 879, 431, 247, 432, 433, 1038, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 1039,
	444, 445, 1040, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 1041, 249, 250, 251, 454, 1042, 1043,
	455, 456, 252, 253, 1044, 457, 458, 0, 459, 460,
	1045, 1046, 461, 462, 463, 465, 1047, 466, 1048, 464,
	467, 468, 469, 254, 255, 1049, 1050, 470, 256, 1051,
	1052, 1053, 1054, 471, 472, 257, 473, 474, 475, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2393, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 984, 985, 219,
	220, 221, 986, 275, 222, 987, 933, 988, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 989, 285,
	0, 286, 287, 990, 864, 288, 289, 290, 991, 992,
	994, 993, 995, 996, 997, 291, 292, 498, 293, 294,
	295, 223, 224, 998, 296, 999, 297, 1000, 298, 1001,
	1002, 299, 300, 1003, 301, 302, 1004, 0, 1005, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	1006, 865, 1007, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 1008, 318, 1009, 1010, 866, 319,
	1011, 320, 229, 1012, 230, 1013, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 868, 1014, 237, 328, 0,
	0, 0, 1015, 327, 329, 336, 1016, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 1017, 236, 1018, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 1019, 347, 346, 1020, 238, 872, 348,
	349, 873, 1021, 350, 351, 1022, 1023, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 1024, 1025, 875, 1026, 239, 365,
	240, 366, 367, 1027, 368, 369, 1028, 1029, 370, 371,
	1030, 1031, 372, 241, 876, 373, 877, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 1032, 382, 243, 383,
	244, 384, 1033, 385, 386, 387, 388, 389, 245, 390,
	391, 1034, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 1035, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 1036, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 1037, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 1038, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 1039, 444, 445, 1040, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 1041,
	249, 250, 251, 454, 1042, 1043, 455, 456, 252, 253,
	1044, 457, 458, 0, 459, 460, 1045, 1046, 461, 462,
	463, 465, 1047, 466, 1048, 464, 467, 468, 469, 254,
	255, 1049, 1050, 470, 256, 1051, 1052, 1053, 1054, 471,
	472, 257, 473, 474, 475, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1842, 258, 259, 260, 261, 974, 262, 975, 976, 977,
	978, 214, 979, 980, 981, 982, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 983, 269, 270, 271,
	272, 273, 274, 984, 985, 219, 220, 221, 986, 275,
	222, 987, 933, 988, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 989, 285, 0, 286, 287, 990,
	864, 288, 289, 290, 991, 992, 994, 993, 995, 996,
	997, 291, 292, 498, 293, 294, 295, 223, 224, 998,
	296, 999, 297, 1000, 298, 1001, 1002, 299, 300, 1003,
	301, 302, 1004, 0, 1005, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 1006, 865, 1007, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	1008, 318, 1009, 1010, 866, 319, 1011, 320, 229, 1012,
	230, 1013, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 868, 1014, 237, 328, 0, 0, 0, 1015, 327,
	329, 336, 1016, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 1017, 236, 1018, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 1019,
	347, 346, 1020, 238, 872, 348, 349, 873, 1021, 350,
	351, 1022, 1023, 352, 0, 353, 935, 934, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	1024, 1025, 875, 1026, 239, 365, 240, 366, 367, 1027,
	368, 369, 1028, 1029, 370, 371, 1030, 1031, 372, 241,
	876, 373, 877, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 1032, 382, 243, 383, 244, 384, 1033, 385,
	386, 387, 388, 389, 245, 390, 391, 1034, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 1035, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 1036, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 1037, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 1038, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 1039, 444, 445, 1040, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 1041, 249, 250, 251, 454,
	1042, 1043, 455, 456, 252, 253, 1044, 457, 458, 0,
	459, 460, 1045, 1046, 461, 462, 463, 465, 1047, 466,
	1048, 464, 467, 468, 469, 254, 255, 1049, 1050, 470,
	256, 1051, 1052, 1053, 1054, 471, 472, 257, 473, 474,
	475, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1522, 258, 259, 260,
	261, 974, 262, 975, 976, 977, 978, 214, 979, 980,
	981, 982, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 983, 269, 270, 271, 272, 273, 274, 984,
	985, 219, 220, 221, 986, 275, 222, 987, 933, 988,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	989, 285, 0, 286, 287, 990, 864, 288, 289, 290,
	991, 992, 994, 993, 995, 996, 997, 291, 292, 498,
	293, 294, 295, 223, 224, 998, 296, 999, 297, 1000,
	298, 1001, 1002, 299, 300, 1003, 301, 302, 1004, 0,
	1005, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 1006, 865, 1007, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 1008, 318, 1009, 1010,
	866, 319, 1011, 320, 229, 1012, 230, 1013, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 1014, 237,
	328, 0, 0, 0, 1015, 327, 329, 336, 1016, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 1017, 236,
	1018, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 1019, 347, 346, 1020, 238,
	872, 348, 349, 873, 1021, 350, 351, 1022, 1023, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 1024, 1025, 875, 1026,
	239, 365, 240, 366, 367, 1027, 368, 369, 1028, 1029,
	370, 371, 1030, 1031, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 1032, 382,
	243, 383, 244, 384, 1033, 385, 386, 387, 388, 389,
	245, 390, 391, 1034, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 1035, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 1036, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 1037, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 1038, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 1039, 444, 445,
	1040, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 1041, 249, 250, 251, 454, 1042, 1043, 455, 456,
	252, 253, 1044, 457, 458, 0, 459, 460, 1045, 1046,
	461, 462, 463, 465, 1047, 466, 1048, 464, 467, 468,
	469, 254, 255, 1049, 1050, 470, 256, 1051, 1052, 1053,
	1054, 471, 472, 257, 473, 474, 475, 729, 0, 779,
	767, 768, 765, 766, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 1152,
	861, 0, 0, 470, 256, 0, 0, 0, 165, 471,
	472, 257, 473, 474, 475, 745, 166, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	779, 767, 768, 765, 766, 758, 0, 1369, 0, 0,
	0, 0, 0, 757, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 171, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 173,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	1152, 861, 0, 0, 470, 256, 0, 0, 0, 165,
	471, 472, 257, 473, 474, 475, 745, 166, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 779, 767, 768, 765, 766, 758, 0, 1369, 0,
	0, 0, 0, 0, 757, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 1920, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 1925,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 1921, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 1922, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 779, 767, 768, 765, 766, 758, 0, 754,
	0, 0, 0, 0, 0, 757, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 815, 761,
	0, 0, 0, 263, 264, 265, 215, 836, 799, 837,
	787, 823, 838, 0, 269, 789, 788, 272, 273, 274,
	762, 814, 839, 840, 221, 0, 275, 821, 0, 804,
	0, 276, 277, 278, 279, 280, 0, 282, 283, 284,
	281, 0, 285, 0, 286, 287, 0, 864, 288, 289,
	290, 807, 805, 806, 811, 809, 808, 810, 291, 292,
	498, 293, 824, 295, 841, 842, 747, 296, 0, 297,
	0, 298, 0, 0, 825, 300, 0, 301, 302, 0,
	0, 0, 752, 306, 303, 304, 307, 310, 305, 311,
	312, 843, 844, 774, 865, 0, 0, 0, 0, 0,
	313, 314, 845, 826, 827, 0, 317, 0, 318, 0,
	0, 866, 319, 0, 320, 846, 0, 230, 0, 321,
	322, 323, 324, 325, 326, 816, 817, 820, 868, 0,
	818, 798, 0, 0, 0, 0, 327, 329, 336, 0,
	867, 330, 847, 802, 828, 829, 830, 831, 848, 0,
	803, 0, 337, 869, 870, 338, 339, 340, 871, 832,
	833, 0, 0, 343, 344, 345, 0, 347, 346, 0,
	849, 872, 348, 349, 873, 0, 350, 351, 0, 0,
	352, 0, 353, 749, 748, 354, 355, 356, 357, 359,
	791, 358, 874, 361, 362, 364, 363, 744, 2682, 875,
	775, 819, 365, 850, 366, 367, 0, 800, 801, 0,
	0, 370, 371, 0, 0, 372, 241, 876, 373, 877,
	851, 374, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 852, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 853, 390, 391, 0, 392, 393, 394, 395, 396,
	0, 398, 399, 397, 400, 401, 402, 403, 0, 404,
	878, 405, 406, 407, 408, 753, 409, 0, 413, 414,
	415, 416, 417, 418, 419, 0, 425, 426, 792, 793,
	794, 795, 421, 427, 428, 812, 429, 410, 411, 430,
	879, 431, 854, 796, 433, 0, 443, 434, 435, 436,
	412, 437, 441, 834, 438, 439, 440, 855, 0, 444,
	445, 0, 446, 447, 448, 449, 450, 308, 451, 309,
	790, 453, 0, 856, 857, 858, 835, 0, 0, 455,
	456, 859, 860, 773, 457, 458, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 813, 466, 0, 797, 467,
	468, 469, 254, 861, 0, 0, 470, 256, 0, 0,
	0, 0, 471, 472, 257, 473, 474, 475, 745, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 741, 742, 1434, 779, 767, 768, 765, 766, 758,
	754, 0, 0, 0, 0, 0, 757, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 761, 0, 0, 0, 263, 264, 265, 215, 836,
	799, 837, 787, 823, 838, 0, 269, 789, 788, 272,
	273, 274, 762, 814, 839, 840, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 824, 295, 841, 842, 747, 296,
	0, 297, 0, 298, 0, 0, 825, 300, 0, 301,
	302, 0, 0, 0, 752, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 774, 865, 0, 0, 0,
	0, 0, 313, 314, 845, 826, 827, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 798, 0, 0, 0, 1746, 327, 329,
	336, 0, 867, 330, 847, 802, 828, 829, 830, 831,
	848, 0, 803, 0, 337, 869, 870, 338, 339, 340,
	871, 832, 833, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 749, 748, 354, 355, 356,
	357, 359, 791, 358, 874, 361, 362, 364, 363, 744,
	0, 875, 775, 819, 365, 850, 366, 367, 0, 800,
	801, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 1745, 385, 386,
	387, 388, 389, 853, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 753, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	792, 793, 794, 795, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 854, 796, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 834, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 790, 453, 0, 856, 857, 858, 835, 0,
	0, 455, 456, 859, 860, 773, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	797, 467, 468, 469, 254, 861, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	745, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 742, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 737, 757, 779,
	767, 768, 765, 766, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 739, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	779, 767, 768, 765, 766, 758, 0, 754, 0, 0,
	0, 0, 0, 757, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 2516, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 779, 767, 768, 765, 766, 758, 0, 754, 0,
	0, 0, 0, 0, 757, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 815, 761, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 762,
	814, 839, 840, 221, 0, 275, 821, 0, 804, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	807, 805, 806, 811, 809, 808, 810, 291, 292, 498,
	293, 824, 295, 841, 842, 747, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 752, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 816, 817, 820, 868, 0, 818,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 749, 748, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 744, 0, 875, 775,
	819, 365, 850, 366, 367, 0, 800, 801, 739, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 753, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 812, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	859, 860, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 813, 466, 0, 797, 467, 468,
	469, 254, 861, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 745, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 2325, 757, 779, 767, 768, 765,
	766, 758, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 761, 0, 0, 0, 263, 264, 265,
	215, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 869, 870, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 875, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 745, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 779, 767, 768,
	765, 766, 758, 0, 754, 0, 0, 0, 0, 0,
	757, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 815, 761, 0, 0, 0, 263, 264,
	265, 215, 836, 799, 837, 787, 823, 838, 0, 269,
	789, 788, 272, 273, 274, 762, 814, 839, 840, 221,
	0, 275, 821, 0, 804, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 807, 805, 806, 811,
	809, 808, 810, 291, 292, 498, 293, 824, 295, 841,
	842, 747, 296, 0, 297, 0, 298, 0, 0, 825,
	300, 0, 301, 302, 0, 0, 0, 752, 306, 303,
	304, 307, 310, 305, 311, 312, 843, 844, 774, 865,
	0, 0, 0, 0, 0, 313, 314, 845, 826, 827,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	846, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	816, 817, 820, 868, 0, 818, 798, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 847, 802, 828,
	829, 830, 831, 848, 0, 803, 0, 337, 869, 870,
	338, 339, 340, 871, 832, 833, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 849, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 749, 748,
	354, 355, 356, 357, 359, 791, 358, 874, 361, 362,
	364, 363, 744, 0, 875, 775, 819, 365, 850, 366,
	367, 0, 800, 801, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 851, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 852, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 853, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	753, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 792, 793, 794, 795, 421, 427, 428,
	812, 429, 410, 411, 430, 879, 431, 854, 796, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 834, 438,
	439, 440, 855, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 790, 453, 0, 856, 857,
	858, 835, 0, 0, 455, 456, 859, 860, 773, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	813, 466, 0, 797, 467, 468, 469, 254, 861, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 745, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 1434, 779,
	767, 768, 765, 766, 758, 754, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 1925, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 1959, 757, 779, 767, 768, 765, 766, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 761, 0, 0, 0, 263, 264, 265, 215, 836,
	799, 837, 787, 823, 838, 0, 269, 789, 788, 272,
	273, 274, 762, 814, 839, 840, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 824, 295, 841, 842, 747, 296,
	0, 297, 0, 298, 0, 0, 825, 300, 0, 301,
	302, 0, 0, 0, 752, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 774, 865, 0, 0, 0,
	0, 0, 313, 314, 845, 826, 827, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 798, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 847, 802, 828, 829, 830, 831,
	848, 0, 803, 0, 337, 869, 870, 338, 339, 340,
	871, 832, 833, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 749, 748, 354, 355, 356,
	357, 359, 791, 358, 874, 361, 362, 364, 363, 744,
	0, 875, 775, 819, 365, 850, 366, 367, 0, 800,
	801, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 853, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 753, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	792, 793, 794, 795, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 854, 796, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 834, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 790, 453, 0, 856, 857, 858, 835, 0,
	0, 455, 456, 859, 860, 773, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	797, 467, 468, 469, 254, 861, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	745, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 742, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 1912, 757, 779,
	767, 768, 765, 766, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 1901, 757, 779, 767, 768, 765, 766, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 761, 0, 0, 0, 263, 264, 265, 215, 836,
	799, 837, 787, 823, 838, 0, 269, 789, 788, 272,
	273, 274, 762, 814, 839, 840, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 824, 295, 841, 842, 747, 296,
	0, 297, 0, 298, 0, 0, 825, 300, 0, 301,
	302, 0, 0, 0, 752, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 774, 865, 0, 0, 0,
	0, 0, 313, 314, 845, 826, 827, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 798, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 847, 802, 828, 829, 830, 831,
	848, 0, 803, 0, 337, 869, 870, 338, 339, 340,
	871, 832, 833, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 749, 748, 354, 355, 356,
	357, 359, 791, 358, 874, 361, 362, 364, 363, 744,
	0, 875, 775, 819, 365, 850, 366, 367, 0, 800,
	801, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 853, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 753, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	792, 793, 794, 795, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 854, 796, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 834, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 790, 453, 0, 856, 857, 858, 835, 0,
	0, 455, 456, 859, 860, 773, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	797, 467, 468, 469, 254, 861, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	745, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 742, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 1899, 757, 779,
	767, 768, 765, 766, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 1897, 757, 779, 767, 768, 765, 766, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 761, 0, 0, 0, 263, 264, 265, 215, 836,
	799, 837, 787, 823, 838, 0, 269, 789, 788, 272,
	273, 274, 762, 814, 839, 840, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 824, 295, 841, 842, 747, 296,
	0, 297, 0, 298, 0, 0, 825, 300, 0, 301,
	302, 0, 0, 0, 752, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 774, 865, 0, 0, 0,
	0, 0, 313, 314, 845, 826, 827, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 323, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 798, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 847, 802, 828, 829, 830, 831,
	848, 0, 803, 0, 337, 869, 870, 338, 339, 340,
	871, 832, 833, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 749, 748, 354, 355, 356,
	357, 359, 791, 358, 874, 361, 362, 364, 363, 744,
	0, 875, 775, 819, 365, 850, 366, 367, 0, 800,
	801, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 853, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 753, 409, 0,
	413, 414, 415, 416, 417, 418, 419, 0, 425, 426,
	792, 793, 794, 795, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 854, 796, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 834, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 790, 453, 0, 856, 857, 858, 835, 0,
	0, 455, 456, 859, 860, 773, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	797, 467, 468, 469, 254, 861, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 474, 475,
	745, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 742, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 1894, 757, 1886,
	767, 768, 765, 766, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	1889, 841, 842, 747, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 1890, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	749, 748, 1891, 1888, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 744, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 1892, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 1887, 475, 745, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 1883, 757, 1886, 767, 768, 765, 766, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	815, 761, 0, 0, 0, 263, 264, 265, 215, 836,
	799, 837, 787, 823, 838, 0, 269, 789, 788, 272,
	273, 274, 762, 814, 839, 840, 221, 0, 275, 821,
	0, 804, 0, 276, 277, 278, 279, 280, 0, 282,
	283, 284, 281, 0, 285, 0, 286, 287, 0, 864,
	288, 289, 290, 807, 805, 806, 811, 809, 808, 810,
	291, 292, 498, 293, 824, 1889, 841, 842, 747, 296,
	0, 297, 0, 298, 0, 0, 825, 300, 0, 301,
	302, 0, 0, 0, 752, 306, 303, 304, 307, 310,
	305, 311, 312, 843, 844, 774, 865, 0, 0, 0,
	0, 0, 313, 314, 845, 826, 827, 0, 317, 0,
	318, 0, 0, 866, 319, 0, 320, 846, 0, 230,
	0, 321, 322, 1890, 324, 325, 326, 816, 817, 820,
	868, 0, 818, 798, 0, 0, 0, 0, 327, 329,
	336, 0, 867, 330, 847, 802, 828, 829, 830, 831,
	848, 0, 803, 0, 337, 869, 870, 338, 339, 340,
	871, 832, 833, 0, 0, 343, 344, 345, 0, 347,
	346, 0, 849, 872, 348, 349, 873, 0, 350, 351,
	0, 0, 352, 0, 353, 749, 748, 1891, 1888, 356,
	357, 359, 791, 358, 874, 361, 362, 364, 363, 744,
	0, 875, 775, 819, 365, 850, 366, 367, 0, 800,
	801, 0, 0, 370, 371, 0, 0, 372, 241, 876,
	373, 877, 851, 374, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 852, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 853, 390, 391, 0, 392, 393, 394,
	395, 396, 0, 398, 399, 397, 400, 401, 402, 403,
	0, 404, 878, 405, 406, 407, 408, 753, 409, 0,
	413, 414, 415, 416, 417, 418, 1892, 0, 425, 426,
	792, 793, 794, 795, 421, 427, 428, 812, 429, 410,
	411, 430, 879, 431, 854, 796, 433, 0, 443, 434,
	435, 436, 412, 437, 441, 834, 438, 439, 440, 855,
	0, 444, 445, 0, 446, 447, 448, 449, 450, 308,
	451, 309, 790, 453, 0, 856, 857, 858, 835, 0,
	0, 455, 456, 859, 860, 773, 457, 458, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 813, 466, 0,
	797, 467, 468, 469, 254, 861, 0, 0, 470, 256,
	0, 0, 0, 0, 471, 472, 257, 473, 1887, 475,
	745, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 742, 779, 767, 768, 765, 766,
	758, 0, 754, 0, 0, 0, 0, 0, 757, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 1374, 0, 754, 0, 0, 0, 0, 0, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	1733, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 816, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 1077, 757, 779, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1076, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 1071, 757,
	779, 767, 768, 765, 766, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 815, 761, 0, 0,
	0, 263, 264, 265, 215, 836, 799, 837, 787, 823,
	838, 0, 269, 789, 788, 272, 273, 274, 762, 814,
	839, 840, 221, 0, 275, 821, 0, 804, 0, 276,
	277, 278, 279, 280, 0, 282, 283, 284, 281, 0,
	285, 0, 286, 287, 0, 864, 288, 289, 290, 807,
	805, 806, 811, 809, 808, 810, 291, 292, 498, 293,
	824, 295, 841, 842, 747, 296, 0, 297, 0, 298,
	0, 0, 825, 300, 0, 301, 302, 0, 0, 0,
	752, 306, 303, 304, 307, 310, 305, 311, 312, 843,
	844, 774, 865, 0, 0, 0, 0, 0, 313, 314,
	845, 826, 827, 0, 317, 0, 318, 0, 0, 866,
	319, 0, 320, 846, 0, 230, 0, 321, 322, 323,
	324, 325, 326, 1070, 817, 820, 868, 0, 818, 798,
	0, 0, 0, 0, 327, 329, 336, 0, 867, 330,
	847, 802, 828, 829, 830, 831, 848, 0, 803, 0,
	337, 869, 870, 338, 339, 340, 871, 832, 833, 0,
	0, 343, 344, 345, 0, 347, 346, 0, 849, 872,
	348, 349, 873, 0, 350, 351, 0, 0, 352, 0,
	353, 749, 748, 354, 355, 356, 357, 359, 791, 358,
	874, 361, 362, 364, 363, 744, 0, 875, 775, 819,
	365, 850, 366, 367, 0, 800, 801, 0, 0, 370,
	371, 0, 0, 372, 241, 876, 373, 877, 851, 374,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 852,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 853,
	390, 391, 0, 392, 393, 394, 395, 396, 0, 398,
	399, 397, 400, 401, 402, 403, 0, 404, 878, 405,
	406, 407, 408, 753, 409, 0, 413, 414, 415, 416,
	417, 418, 419, 0, 425, 426, 792, 793, 794, 795,
	421, 427, 428, 812, 429, 410, 411, 430, 879, 431,
	854, 796, 433, 0, 443, 434, 435, 436, 412, 437,
	441, 834, 438, 439, 440, 855, 0, 444, 445, 0,
	446, 447, 448, 449, 450, 308, 451, 309, 790, 453,
	0, 856, 857, 858, 835, 0, 0, 455, 456, 859,
	860, 773, 457, 458, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 813, 466, 0, 797, 467, 468, 469,
	254, 861, 0, 0, 470, 256, 0, 0, 0, 0,
	471, 472, 257, 473, 474, 475, 745, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 741,
	742, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 1066, 757, 779, 767, 768, 765, 766,
	758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 761, 0, 0, 0, 263, 264, 265, 215,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 869, 870, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 875, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 745, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 779, 767, 768, 765,
	766, 758, 0, 754, 0, 0, 0, 0, 0, 757,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 815, 761, 0, 0, 0, 263, 264, 265,
	215, 836, 799, 837, 787, 823, 838, 0, 269, 789,
	788, 272, 273, 274, 762, 814, 839, 840, 221, 0,
	275, 821, 0, 804, 0, 276, 277, 278, 279, 280,
	0, 282, 283, 284, 281, 0, 285, 0, 286, 287,
	0, 864, 288, 289, 290, 807, 805, 806, 811, 809,
	808, 810, 291, 292, 498, 293, 824, 295, 841, 842,
	747, 296, 0, 297, 0, 298, 0, 0, 825, 300,
	0, 301, 302, 0, 0, 0, 752, 306, 303, 304,
	307, 310, 305, 311, 312, 843, 844, 774, 865, 0,
	0, 0, 0, 0, 313, 314, 845, 826, 827, 0,
	317, 0, 318, 0, 0, 866, 319, 0, 320, 846,
	0, 230, 0, 321, 322, 323, 324, 325, 326, 816,
	817, 820, 868, 0, 818, 798, 0, 0, 0, 0,
	327, 329, 336, 0, 867, 330, 847, 802, 828, 829,
	830, 831, 848, 0, 803, 0, 337, 869, 870, 338,
	339, 340, 871, 832, 833, 0, 0, 343, 344, 345,
	0, 347, 346, 0, 849, 872, 348, 349, 873, 0,
	350, 351, 0, 0, 352, 0, 353, 749, 748, 354,
	355, 356, 357, 359, 791, 358, 874, 361, 362, 364,
	363, 744, 0, 875, 775, 819, 365, 850, 366, 367,
	0, 800, 801, 0, 0, 370, 371, 0, 0, 372,
	241, 876, 373, 877, 851, 374, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 852, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 853, 390, 391, 0, 392,
	393, 394, 395, 396, 0, 398, 399, 397, 400, 401,
	402, 403, 0, 404, 878, 405, 406, 407, 408, 753,
	409, 0, 413, 414, 415, 416, 417, 418, 419, 0,
	425, 426, 792, 793, 794, 795, 421, 427, 428, 812,
	429, 410, 411, 430, 879, 431, 854, 796, 433, 0,
	443, 434, 435, 436, 412, 437, 441, 834, 438, 439,
	440, 855, 0, 444, 445, 0, 446, 447, 448, 449,
	450, 308, 451, 309, 790, 453, 0, 856, 857, 858,
	835, 0, 0, 455, 456, 859, 860, 773, 457, 458,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 813,
	466, 0, 797, 467, 468, 469, 254, 861, 0, 0,
	470, 256, 0, 0, 0, 0, 471, 472, 257, 473,
	474, 475, 745, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 779, 767, 768,
	765, 766, 758, 0, 754, 0, 0, 0, 0, 0,
	757, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 815, 761, 0, 0, 0, 263, 264,
	265, 215, 836, 799, 837, 787, 823, 838, 0, 269,
	789, 788, 272, 273, 274, 762, 814, 839, 840, 221,
	0, 275, 821, 0, 804, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 3069, 807, 805, 806, 811,
	809, 808, 810, 291, 292, 498, 293, 824, 295, 841,
	842, 747, 296, 0, 297, 0, 298, 0, 0, 825,
	300, 0, 301, 302, 0, 0, 0, 752, 306, 303,
	304, 307, 310, 305, 311, 312, 843, 844, 774, 865,
	0, 0, 0, 0, 0, 313, 314, 845, 826, 827,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	846, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	816, 817, 820, 868, 0, 818, 798, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 847, 802, 828,
	829, 830, 831, 848, 0, 803, 0, 337, 869, 870,
	338, 339, 340, 871, 832, 833, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 849, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 749, 748,
	354, 355, 356, 357, 359, 791, 358, 874, 361, 362,
	364, 363, 744, 0, 875, 775, 819, 365, 850, 366,
	367, 0, 800, 801, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 851, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 852, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 853, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	753, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 792, 793, 794, 795, 421, 427, 428,
	812, 429, 410, 411, 430, 879, 431, 854, 796, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 834, 438,
	439, 440, 855, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 790, 453, 0, 856, 857,
	858, 835, 0, 0, 455, 456, 859, 860, 773, 457,
	458, 0, 3068, 460, 0, 0, 461, 462, 463, 465,
	813, 466, 0, 797, 467, 468, 469, 254, 861, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 745, 0, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 779, 767,
	768, 765, 766, 758, 0, 754, 0, 0, 0, 0,
	0, 757, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 815, 761, 0, 0, 0, 263,
	264, 265, 3067, 836, 799, 837, 787, 823, 838, 0,
	269, 789, 788, 272, 273, 274, 762, 814, 839, 840,
	221, 0, 275, 821, 0, 804, 0, 276, 277, 278,
	279, 280, 0, 282, 283, 284, 281, 0, 285, 0,
	286, 287, 0, 864, 288, 289, 3069, 807, 805, 806,
	811, 809, 808, 810, 291, 292, 498, 293, 824, 295,
	841, 842, 747, 296, 0, 297, 0, 298, 0, 0,
	825, 300, 0, 301, 302, 0, 0, 0, 752, 306,
	303, 304, 307, 310, 305, 311, 312, 843, 844, 774,
	865, 0, 0, 0, 0, 0, 313, 314, 845, 826,
	827, 0, 317, 0, 318, 0, 0, 866, 319, 0,
	320, 846, 0, 230, 0, 321, 322, 323, 324, 325,
	326, 816, 817, 820, 868, 0, 818, 798, 0, 0,
	0, 0, 327, 329, 336, 0, 867, 330, 847, 802,
	828, 829, 830, 831, 848, 0, 803, 0, 337, 869,
	870, 338, 339, 340, 871, 832, 833, 0, 0, 343,
	344, 345, 0, 347, 346, 0, 849, 872, 348, 349,
	873, 0, 350, 351, 0, 0, 352, 0, 353, 749,
	748, 354, 355, 356, 357, 359, 791, 358, 874, 361,
	362, 364, 363, 744, 0, 875, 775, 819, 365, 850,
	366, 367, 0, 800, 801, 0, 0, 370, 371, 0,
	0, 372, 241, 876, 373, 877, 851, 374, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 852, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 853, 390, 391,
	0, 392, 393, 394, 395, 396, 0, 398, 399, 397,
	400, 401, 402, 403, 0, 404, 878, 405, 406, 407,
	408, 753, 409, 0, 413, 414, 415, 416, 417, 418,
	419, 0, 425, 426, 792, 793, 794, 795, 421, 427,
	428, 812, 429, 410, 411, 430, 879, 431, 854, 796,
	433, 0, 443, 434, 435, 436, 412, 437, 441, 834,
	438, 439, 440, 855, 0, 444, 445, 0, 446, 447,
	448, 449, 450, 308, 451, 309, 790, 453, 0, 856,
	857, 858, 835, 0, 0, 455, 456, 859, 860, 773,
	457, 458, 0, 3068, 460, 0, 0, 461, 462, 463,
	465, 813, 466, 0, 797, 467, 468, 469, 254, 861,
	0, 0, 470, 256, 0, 0, 0, 0, 471, 472,
	257, 473, 474, 475, 745, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 741, 742, 779,
	767, 768, 765, 766, 758, 0, 754, 0, 0, 0,
	0, 0, 757, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 815, 761, 0, 0, 0,
	263, 264, 265, 215, 836, 799, 837, 787, 823, 838,
	0, 269, 789, 788, 272, 273, 274, 762, 814, 839,
	840, 221, 0, 275, 821, 0, 804, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 807, 805,
	806, 811, 809, 808, 810, 291, 292, 498, 293, 824,
	295, 841, 842, 0, 296, 0, 297, 0, 298, 0,
	0, 825, 300, 0, 301, 302, 0, 0, 0, 752,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	774, 865, 0, 0, 0, 0, 0, 313, 314, 845,
	826, 827, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 816, 817, 820, 868, 0, 818, 798, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 847,
	802, 828, 829, 830, 831, 848, 0, 803, 0, 337,
	869, 870, 338, 339, 340, 871, 832, 833, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 791, 358, 874,
	361, 362, 364, 363, 0, 0, 875, 775, 819, 365,
	850, 366, 367, 0, 800, 801, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 853, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 753, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 792, 793, 794, 795, 421,
	427, 428, 812, 429, 410, 411, 430, 879, 431, 854,
	796, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	834, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 790, 453, 0,
	856, 857, 858, 835, 0, 0, 455, 456, 859, 860,
	773, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 813, 466, 0, 797, 467, 468, 469, 254,
	861, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 779, 767, 768, 765, 766,
	758, 0, 0, 1909, 0, 0, 0, 0, 1907, 1908,
	0, 258, 259, 260, 261, 0, 262, 754, 0, 0,
	0, 815, 761, 757, 0, 0, 263, 264, 265, 0,
	836, 799, 837, 787, 823, 838, 0, 269, 789, 788,
	272, 273, 274, 762, 814, 839, 840, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 3069, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 824, 295, 841, 842, 747,
	296, 0, 297, 0, 298, 0, 0, 825, 300, 0,
	301, 302, 0, 0, 0, 752, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 774, 865, 0, 0,
	0, 0, 0, 313, 314, 845, 826, 827, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 0, 0, 818, 798, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 847, 802, 828, 829, 830,
	831, 848, 0, 803, 0, 337, 0, 0, 338, 339,
	340, 871, 832, 833, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 749, 748, 354, 355,
	356, 357, 359, 791, 358, 874, 361, 362, 364, 363,
	744, 0, 0, 775, 819, 365, 850, 366, 367, 0,
	800, 801, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 853, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 753, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 792, 793, 794, 795, 421, 427, 428, 812, 429,
	410, 411, 430, 0, 431, 854, 796, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 834, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 790, 453, 0, 856, 857, 858, 835,
	0, 0, 455, 456, 859, 860, 773, 457, 458, 0,
	3068, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 797, 467, 468, 469, 254, 861, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 729, 0, 931,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 258, 259, 260, 261, 757,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 933, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 0, 926,
	927, 0, 929, 928, 930, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	0, 865, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 868, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 918, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 0, 0, 875, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 924, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 171, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 855, 0, 444, 445, 173, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 859, 860,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 1152,
	255, 0, 0, 470, 256, 0, 0, 931, 165, 471,
	472, 257, 473, 474, 475, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 915, 0, 1462, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 933, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 0, 926, 927, 0,
	929, 928, 930, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 843, 844, 0, 865,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	846, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 918, 347, 346, 0, 849, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 935, 934,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 0, 0, 875, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 924, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 851, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 852, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	171, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 855, 0, 444, 445, 173, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 859, 860, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 1152, 255, 0,
	0, 470, 256, 0, 0, 931, 165, 471, 472, 257,
	473, 474, 475, 0, 166, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 815, 0, 915, 0, 1462, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 814, 219, 220, 221, 0, 275,
	821, 0, 804, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 807, 805, 806, 811, 809, 808,
	810, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 843, 844, 0, 865, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 846, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 816, 817,
	820, 868, 0, 818, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 849, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 935, 934, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	0, 0, 875, 0, 819, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 851, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 852, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 812, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	855, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 859, 860, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 813, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 2297, 0, 931, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 2619, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	933, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 864, 288,
	289, 290, 0, 926, 927, 0, 929, 928, 930, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 843, 844, 0, 865, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 866, 319, 0, 320, 846, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 868,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 867, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 869, 870, 338, 339, 340, 871,
	341, 342, 0, 0, 343, 344, 345, 918, 347, 346,
	0, 849, 872, 348, 349, 873, 0, 350, 351, 0,
	0, 352, 0, 353, 935, 934, 354, 355, 356, 357,
	359, 360, 358, 874, 361, 362, 364, 363, 0, 0,
	875, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 924, 370, 371, 0, 0, 372, 241, 876, 373,
	877, 851, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 852, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 878, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 879, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 855, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 859, 860, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 914,
	0, 931, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 915,
	0, 922, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 933, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	0, 926, 927, 0, 929, 928, 930, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	843, 844, 0, 865, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 846, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 918, 347, 346, 0, 849,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 0, 0, 875, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 924,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 851,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	852, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 855, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	859, 860, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 0, 0, 931,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 915, 0, 922,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 933, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 0, 926,
	927, 0, 929, 928, 930, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 843, 844,
	0, 865, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 846, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 868, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 918, 347, 346, 0, 849, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 0, 0, 875, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 924, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 851, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 852, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 855, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 859, 860,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 0, 0, 931, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 915, 0, 922, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 933, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 0, 926, 927, 0,
	929, 928, 930, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 843, 844, 0, 865,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	846, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 849, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 935, 934,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 0, 0, 875, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 851, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 852, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 855, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 859, 860, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1149, 0, 956, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 1363, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 933, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 865, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 868, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 935, 934, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	0, 0, 875, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 171, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 173, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 1152, 255, 0, 0, 470,
	256, 729, 0, 495, 165, 471, 472, 257, 473, 474,
	475, 0, 166, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 138, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 171, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 173, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 1152, 255, 0, 0, 470, 256, 0,
	0, 0, 165, 471, 472, 257, 473, 474, 475, 0,
	166, 779, 767, 768, 765, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 138, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 836, 799, 837, 787,
	823, 838, 0, 269, 789, 788, 272, 273, 274, 0,
	0, 839, 840, 221, 0, 275, 222, 0, 933, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 824, 295, 841, 842, 0, 296, 0, 297, 0,
	298, 0, 0, 825, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 774, 865, 0, 0, 0, 0, 0, 313,
	314, 845, 826, 827, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 0, 237,
	798, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 847, 802, 828, 829, 830, 831, 848, 0, 803,
	0, 337, 869, 870, 338, 339, 340, 871, 832, 833,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 791,
	358, 874, 361, 362, 364, 363, 0, 0, 875, 775,
	239, 365, 850, 366, 367, 0, 800, 801, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	853, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 792, 793, 794,
	795, 421, 427, 428, 0, 429, 410, 411, 430, 879,
	431, 854, 796, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 834, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 790,
	453, 0, 856, 857, 858, 835, 0, 0, 455, 456,
	252, 253, 773, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 797, 467, 468,
	469, 254, 861, 495, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 0,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 2093, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 0, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 2531,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 1229, 0, 956, 955, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 1466, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 933, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 865,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 868, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 935, 934,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 0, 0, 875, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 1145, 0, 956, 955, 0, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 933, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	864, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 865, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 866, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1144, 232,
	233, 868, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 867, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 869, 870, 338, 339,
	340, 871, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 872, 348, 349, 873, 0, 350,
	351, 0, 0, 352, 0, 353, 935, 934, 354, 355,
	356, 357, 359, 360, 358, 874, 361, 362, 364, 363,
	0, 0, 875, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	876, 373, 877, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 878, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 879, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 1141, 0, 956, 955, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	933, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 864, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 865, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 866, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1140, 232, 233, 868,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 867, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 869, 870, 338, 339, 340, 871,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 872, 348, 349, 873, 0, 350, 351, 0,
	0, 352, 0, 353, 935, 934, 354, 355, 356, 357,
	359, 360, 358, 874, 361, 362, 364, 363, 0, 0,
	875, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 876, 373,
	877, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 878, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 879, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 1102,
	0, 956, 955, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 933, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 865, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1101, 232, 233, 868, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 0, 0, 875, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 1099, 0, 956,
	955, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 933, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 865, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1098, 232, 233, 868, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 0, 0, 875, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 949, 0, 956, 955, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 933, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 864, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 865,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 866, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	951, 232, 233, 868, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 867, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 869, 870,
	338, 339, 340, 871, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 872, 348, 349, 873,
	0, 350, 351, 0, 0, 352, 0, 353, 935, 934,
	354, 355, 356, 357, 359, 360, 358, 874, 361, 362,
	364, 363, 0, 0, 875, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 876, 373, 877, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 878, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 879, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 956,
	955, 470, 256, 0, 953, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 933, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 864, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 865, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 866, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 868, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 867, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	869, 870, 338, 339, 340, 871, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 872, 348,
	349, 873, 0, 350, 351, 0, 0, 352, 0, 353,
	935, 934, 354, 355, 356, 357, 359, 360, 358, 874,
	361, 362, 364, 363, 0, 0, 875, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 876, 373, 877, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 878, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 879, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 956, 955, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 933, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 864, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 865, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	866, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 868, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 867,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 869, 870, 338, 339, 340, 871, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	872, 348, 349, 873, 0, 350, 351, 0, 0, 352,
	0, 353, 935, 934, 354, 355, 356, 357, 359, 360,
	358, 874, 361, 362, 364, 363, 0, 0, 875, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 876, 373, 877, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 878,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 879,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 956, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	933, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 864, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 865, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 866, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 868,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 867, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 869, 870, 338, 339, 340, 871,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 872, 348, 349, 873, 0, 350, 351, 0,
	0, 352, 0, 353, 935, 934, 354, 355, 356, 357,
	359, 360, 358, 874, 361, 362, 364, 363, 0, 0,
	875, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 876, 373,
	877, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 878, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 879, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 597,
	0, 207, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 213,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	212, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 206, 0, 207,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 478, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 213, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 212, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 207, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	478, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 213,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	1702, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	212, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 207, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 478, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 213, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 212, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 478, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 478, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	1986, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 1983, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 2063,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 1989, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	2061, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 2060, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	1988, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 2062, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 1986, 275, 222, 0, 0, 1980, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 1983, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 1989, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1979, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 1988, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 1987, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 604, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 603, 583, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 586, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 587, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	588, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 582, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 583, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 586,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 587, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 588, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 586, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 587, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	588, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1120, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 924, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 944, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 946, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 924, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 941,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 943, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 924,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 937, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 939, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 924, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 518, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 517, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 516,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 1966, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 2454, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 495, 2454, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 2451, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 924, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 1722, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 1720,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 1718, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 1695, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 1655, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 1653, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 630, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 1202, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 631, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 627, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 626, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 1550, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1549, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 630,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 1202, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	631, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 627,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 626, 250, 251, 454, 0, 0, 455, 1203,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 630, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 620, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 631, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 627, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	1171, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	626, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 1138, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	1137, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1134, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1133, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 1131, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 1130, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 1128,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1127, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 1124, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1123, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 1112, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 1110, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 1109, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 1104, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 1095, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 1094, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 1090, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 1086,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1088, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 963, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 965, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 960, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 0,
	0, 470, 256, 630, 0, 495, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 620,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	619, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 631, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 621, 409,
	0, 413, 414, 627, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 622, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 626, 250, 251, 454,
	0, 0, 455, 624, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 610, 0, 495, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 611,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 0, 0, 470, 256, 606,
	0, 495, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 231, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 0, 0, 470, 256, 595, 0, 495,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 0, 0, 470, 256, 540, 0, 495, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 413, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 429, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 2354, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 495, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 2352, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 390, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 2341, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 409,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 495, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 0, 0, 219, 220, 221,
	0, 275, 222, 0, 0, 0, 276, 277, 278, 279,
	280, 0, 282, 283, 284, 281, 0, 285, 0, 286,
	287, 0, 0, 288, 289, 290, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 498, 293, 294, 295, 223,
	224, 0, 296, 0, 297, 0, 298, 0, 0, 299,
	300, 0, 301, 302, 0, 0, 0, 225, 306, 303,
	304, 307, 310, 305, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 228, 315, 316,
	0, 317, 0, 318, 0, 0, 0, 319, 0, 320,
	229, 0, 230, 0, 321, 322, 323, 324, 325, 326,
	231, 232, 233, 0, 0, 237, 328, 0, 0, 0,
	0, 327, 329, 336, 0, 0, 330, 234, 332, 331,
	333, 334, 335, 235, 0, 236, 0, 337, 0, 0,
	338, 339, 340, 0, 341, 342, 0, 0, 343, 344,
	345, 0, 347, 346, 0, 238, 0, 348, 349, 0,
	0, 350, 351, 0, 0, 352, 0, 353, 0, 0,
	354, 355, 356, 357, 359, 360, 358, 0, 361, 362,
	364, 363, 0, 0, 0, 0, 239, 365, 240, 366,
	367, 0, 368, 369, 0, 0, 370, 371, 0, 0,
	372, 241, 0, 373, 0, 242, 374, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 243, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 245, 390, 391, 0,
	392, 393, 394, 395, 396, 0, 398, 399, 397, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	246, 409, 0, 611, 414, 415, 416, 417, 418, 419,
	0, 425, 426, 420, 422, 423, 424, 421, 427, 428,
	0, 429, 410, 411, 430, 0, 431, 247, 432, 433,
	0, 443, 434, 435, 436, 412, 437, 441, 442, 438,
	439, 440, 248, 0, 444, 445, 0, 446, 447, 448,
	449, 450, 308, 451, 309, 452, 453, 0, 249, 250,
	251, 454, 0, 0, 455, 456, 252, 253, 0, 457,
	458, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	0, 466, 0, 464, 467, 468, 469, 254, 255, 495,
	0, 470, 256, 0, 0, 0, 0, 471, 472, 257,
	473, 474, 475, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 1563, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 0, 0, 219,
	220, 221, 0, 275, 222, 0, 0, 0, 276, 277,
	278, 279, 280, 0, 282, 283, 284, 281, 0, 285,
	0, 286, 287, 0, 0, 288, 289, 290, 0, 0,
	0, 0, 0, 0, 0, 291, 292, 498, 293, 294,
	295, 223, 224, 0, 296, 0, 297, 0, 298, 0,
	0, 299, 300, 0, 301, 302, 0, 0, 0, 225,
	306, 303, 304, 307, 310, 305, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 228,
	315, 316, 0, 317, 0, 318, 0, 0, 0, 319,
	0, 320, 229, 0, 230, 0, 321, 322, 323, 324,
	325, 326, 231, 232, 233, 0, 0, 237, 328, 0,
	0, 0, 0, 327, 329, 336, 0, 0, 330, 234,
	332, 331, 333, 334, 335, 235, 0, 236, 0, 337,
	0, 0, 338, 339, 340, 0, 341, 342, 0, 0,
	343, 344, 345, 0, 347, 346, 0, 238, 0, 348,
	349, 0, 0, 350, 351, 0, 0, 352, 0, 353,
	0, 0, 354, 355, 356, 357, 359, 360, 358, 0,
	361, 362, 364, 363, 0, 0, 0, 0, 239, 365,
	240, 366, 367, 0, 368, 369, 0, 0, 370, 371,
	0, 0, 372, 241, 0, 373, 0, 242, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 243, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 245, 390,
	391, 0, 392, 393, 394, 395, 396, 0, 398, 399,
	397, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 246, 409, 0, 413, 414, 415, 416, 417,
	418, 419, 0, 425, 426, 420, 422, 423, 424, 421,
	427, 428, 0, 0, 410, 411, 430, 0, 431, 247,
	432, 433, 0, 443, 434, 435, 436, 412, 437, 441,
	442, 438, 439, 440, 248, 0, 444, 445, 0, 446,
	447, 448, 449, 450, 308, 451, 309, 452, 453, 0,
	249, 250, 251, 454, 0, 0, 455, 456, 252, 253,
	0, 457, 458, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 0, 466, 0, 464, 467, 468, 469, 254,
	255, 495, 0, 470, 256, 0, 0, 0, 0, 471,
	472, 257, 473, 474, 475, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 0,
	0, 219, 220, 221, 0, 275, 222, 0, 0, 0,
	276, 277, 278, 279, 280, 0, 282, 283, 284, 281,
	0, 285, 0, 286, 287, 0, 0, 288, 289, 290,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 498,
	293, 294, 295, 223, 224, 0, 296, 0, 297, 0,
	298, 0, 0, 299, 300, 0, 301, 302, 0, 0,
	0, 225, 306, 303, 304, 307, 310, 305, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 228, 315, 316, 0, 317, 0, 318, 0, 0,
	0, 319, 0, 320, 229, 0, 230, 0, 321, 322,
	323, 324, 325, 326, 1554, 232, 233, 0, 0, 237,
	328, 0, 0, 0, 0, 327, 329, 336, 0, 0,
	330, 234, 332, 331, 333, 334, 335, 235, 0, 236,
	0, 337, 0, 0, 338, 339, 340, 0, 341, 342,
	0, 0, 343, 344, 345, 0, 347, 346, 0, 238,
	0, 348, 349, 0, 0, 350, 351, 0, 0, 352,
	0, 353, 0, 0, 354, 355, 356, 357, 359, 360,
	358, 0, 361, 362, 364, 363, 0, 0, 0, 0,
	239, 365, 240, 366, 367, 0, 368, 369, 0, 0,
	370, 371, 0, 0, 372, 241, 0, 373, 0, 242,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	243, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	245, 390, 391, 0, 392, 393, 394, 395, 396, 0,
	398, 399, 397, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 246, 409, 0, 413, 414, 415,
	416, 417, 418, 419, 0, 425, 426, 420, 422, 423,
	424, 421, 427, 428, 0, 429, 410, 411, 430, 0,
	431, 247, 432, 433, 0, 443, 434, 435, 436, 412,
	437, 441, 442, 438, 439, 440, 248, 0, 444, 445,
	0, 446, 447, 448, 449, 450, 308, 451, 309, 452,
	453, 0, 249, 250, 251, 454, 0, 0, 455, 456,
	252, 253, 0, 457, 458, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 0, 466, 0, 464, 467, 468,
	469, 254, 255, 495, 0, 470, 256, 0, 0, 0,
	0, 471, 472, 257, 473, 474, 475, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 0, 0, 219, 220, 221, 0, 275, 222, 0,
	0, 0, 276, 277, 278, 279, 280, 0, 282, 283,
	284, 281, 0, 285, 0, 286, 287, 0, 0, 288,
	289, 290, 0, 0, 0, 0, 0, 0, 0, 291,
	292, 498, 293, 294, 295, 223, 224, 0, 296, 0,
	297, 0, 298, 0, 0, 299, 300, 0, 301, 302,
	0, 0, 0, 225, 306, 303, 304, 307, 310, 305,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 228, 315, 316, 0, 317, 0, 318,
	0, 0, 0, 319, 0, 320, 229, 0, 230, 0,
	321, 322, 323, 324, 325, 326, 231, 232, 233, 0,
	0, 237, 328, 0, 0, 0, 0, 327, 329, 336,
	0, 0, 330, 234, 332, 331, 333, 334, 335, 235,
	0, 236, 0, 337, 0, 0, 338, 339, 340, 0,
	341, 342, 0, 0, 343, 344, 345, 0, 347, 346,
	0, 238, 0, 348, 349, 0, 0, 350, 351, 0,
	0, 352, 0, 353, 0, 0, 354, 355, 356, 357,
	359, 360, 358, 0, 361, 362, 364, 363, 0, 0,
	0, 0, 239, 365, 240, 366, 367, 0, 368, 369,
	0, 0, 370, 371, 0, 0, 372, 241, 0, 373,
	0, 242, 374, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 243, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 245, 897, 391, 0, 392, 393, 394, 395,
	396, 0, 398, 399, 397, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 246, 409, 0, 413,
	414, 415, 416, 417, 418, 419, 0, 425, 426, 420,
	422, 423, 424, 421, 427, 428, 0, 429, 410, 411,
	430, 0, 431, 247, 432, 433, 0, 443, 434, 435,
	436, 412, 437, 441, 442, 438, 439, 440, 248, 0,
	444, 445, 0, 446, 447, 448, 449, 450, 308, 451,
	309, 452, 453, 0, 249, 250, 251, 454, 0, 0,
	455, 456, 252, 253, 0, 457, 458, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 0, 466, 0, 464,
	467, 468, 469, 254, 255, 495, 0, 470, 256, 0,
	0, 0, 0, 471, 472, 257, 473, 474, 475, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 0, 0, 219, 220, 221, 0, 275,
	222, 0, 0, 0, 276, 277, 278, 279, 280, 0,
	282, 283, 284, 281, 0, 285, 0, 286, 287, 0,
	0, 288, 289, 290, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 498, 293, 294, 295, 223, 224, 0,
	296, 0, 297, 0, 298, 0, 0, 299, 300, 0,
	301, 302, 0, 0, 0, 225, 306, 303, 304, 307,
	310, 305, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 228, 315, 316, 0, 317,
	0, 318, 0, 0, 0, 319, 0, 320, 229, 0,
	230, 0, 321, 322, 323, 324, 325, 326, 231, 232,
	233, 0, 0, 237, 328, 0, 0, 0, 0, 327,
	329, 336, 0, 0, 330, 234, 332, 331, 333, 334,
	335, 235, 0, 236, 0, 337, 0, 0, 338, 339,
	340, 0, 341, 342, 0, 0, 343, 344, 345, 0,
	347, 346, 0, 238, 0, 348, 349, 0, 0, 350,
	351, 0, 0, 352, 0, 353, 0, 0, 354, 355,
	356, 357, 359, 360, 358, 0, 361, 362, 364, 363,
	0, 0, 0, 0, 239, 365, 240, 366, 367, 0,
	368, 369, 0, 0, 370, 371, 0, 0, 372, 241,
	0, 373, 0, 242, 374, 375, 376, 0, 378, 379,
	380, 381, 0, 382, 243, 383, 244, 384, 0, 385,
	386, 387, 0, 389, 245, 390, 391, 0, 392, 393,
	394, 395, 396, 0, 398, 399, 397, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 246, 0,
	0, 413, 414, 415, 416, 417, 418, 419, 0, 425,
	426, 420, 422, 423, 424, 421, 427, 428, 0, 429,
	410, 411, 430, 0, 431, 247, 432, 433, 0, 443,
	434, 435, 436, 412, 437, 441, 442, 438, 439, 440,
	248, 0, 444, 445, 0, 446, 447, 448, 449, 450,
	308, 451, 309, 452, 453, 0, 249, 250, 251, 454,
	0, 0, 455, 456, 252, 253, 0, 457, 458, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 0, 466,
	0, 464, 467, 468, 469, 254, 255, 0, 0, 470,
	256, 0, 0, 0, 0, 471, 472, 257, 473, 474,
	475, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 1302, 0, 0, 0, 0, 1308, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 1338, 0, 0,
	1308, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 1329, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 1341, 0, 0, 0, 0,
	1303, 1339, 0, 1349, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 2233, 1302, 0, 0, 2234, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 0, 1325, 1326, 1327, 1328, 1302, 0, 0,
	2740, 0, 1308, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 1338, 0, 0, 1308, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 1329, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 1341,
	0, 0, 0, 1303, 0, 1339, 1349, 0, 1314, 1315,
	1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 0, 1302, 0,
	0, 0, 2236, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1303, 0, 1339, 1349, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328,
	1302, 0, 0, 0, 2235, 1308, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 0, 1338, 0, 0, 1308, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	1329, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 1341, 0, 0, 0, 1303, 0, 1339, 1349,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 1302, 0, 0, 0, 2232, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	1339, 1349, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1325,
	1326, 1327, 1328, 1302, 0, 0, 0, 2231, 1308, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 1338, 0, 0,
	1308, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 1329, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 1341, 0, 0, 0, 1303,
	0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 1302, 0, 0, 0, 2230, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 1325, 1326, 1327, 1328, 3032, 1302, 0, 0,
	0, 1308, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	1338, 0, 0, 0, 1308, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1329, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 1341,
	0, 0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 3028, 1302, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 1339, 0, 1349,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328,
	2968, 1302, 0, 0, 0, 1308, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 1338, 0, 0, 0, 1308, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 1341, 0, 0, 0, 1303, 1339, 0,
	1349, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 2967, 1302, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1303, 1339, 0, 1349, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	1325, 1326, 1327, 1328, 2916, 1302, 0, 0, 0, 1308,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 0, 1338, 0,
	0, 0, 1308, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 0, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 1329, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 1300, 1301, 0, 1333,
	1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 1341, 0, 0,
	0, 1303, 1339, 0, 1349, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 2877, 1302, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 1339, 0, 1349, 1314, 1315,
	1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328, 2788, 1302,
	0, 0, 0, 1308, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 1338, 0, 0, 0, 1308, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 1329, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 1341, 0, 0, 0, 1303, 1339, 0, 1349, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0, 2745,
	1302, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 1339,
	0, 1349, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326,
	1327, 1328, 2744, 1302, 0, 0, 0, 1308, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 1338, 0, 0, 0,
	1308, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 0, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 1329, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 1341, 0, 0, 0, 1303,
	1339, 0, 1349, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 2743, 1302, 0, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 1325, 1326, 1327, 1328, 2715, 1302, 0, 0,
	0, 1308, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	1338, 0, 0, 0, 1308, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 0, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1329, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 1341,
	0, 0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 2535, 1302, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 1339, 0, 1349,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328,
	2508, 1302, 0, 0, 0, 1308, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 1338, 0, 0, 0, 1308, 3110,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 1341, 0, 0, 0, 1303, 1339, 0,
	1349, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 1832, 1302, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 2172, 0, 1303,
	0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	1325, 1326, 1327, 1328, 1302, 0, 0, 0, 0, 1308,
	0, 2280, 1322, 0, 2279, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 2173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 1325, 1326, 1327, 1328, 0, 0, 1338, 0,
	0, 1308, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 1329, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1935,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 1934, 0, 0,
	1303, 0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 1302, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 1339, 1349, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1308, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 1338, 0, 0, 1308, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 1329, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 726, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 1341,
	0, 0, 0, 1303, 0, 1339, 1349, 0, 1314, 1315,
	1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 1339, 0, 1349,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328,
	0, 1302, 0, 0, 0, 1308, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 1338, 0, 0, 0, 1308, 0,
	0, 1323, 0, 2290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2512, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 1341, 2285, 0, 0, 1303, 1339, 0,
	1349, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 0, 1302, 0, 0, 0, 0, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 1303,
	0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	1325, 1326, 1327, 1328, 1302, 0, 0, 0, 0, 1308,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 1325, 1326, 1327, 1328, 0, 0, 1338, 0,
	0, 1308, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 1329, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 1341, 2229, 0, 0,
	1303, 0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 1302, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 1339, 1349, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1325, 1326, 1327, 1328, 1302, 0, 0,
	0, 0, 1308, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 1338, 0, 0, 1308, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 1329, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 1341,
	0, 0, 0, 1303, 0, 1339, 1349, 0, 1314, 1315,
	1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 1339, 1349, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 1325, 1326, 1327, 1328,
	1302, 0, 0, 0, 0, 1308, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 0, 1338, 0, 0, 1308, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 1303, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	1329, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 1324, 1322, 0,
	0, 1348, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 1308, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1350, 1341, 0, 1330, 1331, 1332, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 0, 0, 1615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1626, 1611, 1616, 1599, 1636, 1635, 0, 0, 1601, 1600,
	0, 0, 0, 0, 0, 1645, 1644, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1637, 0, 1633, 1632, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1630, 1628, 1629, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 0, 1610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1619, 1614, 1620, 1621, 1622,
	1623, 1624, 0, 1618, 0, 0, 0, 0, 0, 0,
	0, 0, 1642, 1643, 0, 0, 0, 0, 0, 0,
	657, 0, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 1603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 662, 0, 1634, 0, 0, 0,
	1612, 1613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 663, 0, 0, 0,
	0, 665, 0, 0, 0, 693, 0, 0, 0, 0,
	0, 671, 672, 0, 1627, 0, 683, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	689, 666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1604, 1605, 1606, 1607, 0, 687, 677, 0, 0,
	0, 0, 0, 0, 0, 1625, 1608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1647, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 0,
	661, 0, 0, 1602, 0, 0, 1638, 1639, 1640, 1641,
	0, 0, 0, 0, 0, 668, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1609, 0, 0, 0, 0, 1646, 675, 0, 0,
	0, 0, 0, 0, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 659, 678, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 679, 0, 0, 0, 694, 695, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 684,
}
var sqlPact = [...]int{

	359, -1000, -37, -1000, -1000, -1000, 182, -1000, -1000, -1000,
	-1000, 181, 175, 174, -1000, 173, 172, 171, 170, 169,
	163, 160, 159, 157, 156, 155, 154, -1000, -1000, 153,
	-1000, -1000, -1000, -1000, 150, 149, 148, -1000, 147, 1642,
	31545, 146, 145, 144, 1984, 49315, 1510, 142, 137, -1000,
	136, 1628, 36553, 1156, 1537, -1000, 134, 133, 1330, 48933,
	366, 1966, 34231, 1366, 1968, 48545, 31157, 1917, 33843, 48157,
	-1000, -1000, 1056, -1000, -1000, 47769, 132, 129, 124, 122,
	121, -1000, 119, 47381, 118, 117, 115, 99, 97, 96,
	93, 91, -1000, 90, 87, 82, 78, 77, 76, 75,
	73, 72, 71, 68, 63, 61, 59, 54, 53, -1000,
	59268, 52, 49, 47, -1000, 1363, 44, 42, 39, 36,
	34, -1000, -1000, 32, 30, 29, 28, 27, 25, -1000,
	106, 23, 20, 18, 17, 16, -1000, 1110, 712, 1890,
	12975, 1227, 1215, 1198, 1182, 1175, 748, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51989, 49315, 15, -55, 14,
	-1000, 2327, 776, 24127, 359, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36165, 35777, 35389,
	29623, 46993, 46605, 10507, 10507, 941, -1000, -1000, -1000, -1000,
	-1000, -39, 32691, 49315, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 233, -1000, -1000,
	-1000, -1000, -1000, -1000, 20131, 539, 19706, 429, 19281, 396,
	374, -1000, -1000, -1000, 217, -1000, -1000, -1000, -1000, 1253,
	-1000, -1000, -1000, -1000, 46217, 45829, 2214, 45441, 29225, 28827,
	45053, 1805, 1794, 44665, -1000, -1000, 44277, -1000, -1000, 2102,
	1963, 1942, 35001, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43895, 43507, 43119, 42731, 42343, 28429, 28031, 554,
	-1000, -1000, -1000, -1000, 25291, 552, -1000, -1000, -1000, -1000,
	-1000, 11, -1000, 9, 8, -1000, 7, 5, 0, -5,
	-6, -7, -8, -10, -1000, -17, -19, -1000, -20, -24,
	-1000, -31, -35, 1514, 1142, 1312, 41955, 1033, 1635, -1000,
	1507, -30, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49315,
	-1000, 20542, 67, -1000, 550, -1000, 1944, -1000, 20542, 67,
	-1000, 1500, 178, 1396, -1000, -1000, -1000, 1314, 1032, -1000,
	-1000, 49315, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2582,
	1430, 548, 41567, -1000, 1639, -1000, 710, 13797, -1000, 876,
	-1000, 13797, 210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1548,
	1162, 2562, 27633, 1524, 2370, 2101, 2580, 1640, 2091, 2082,
	2077, 2075, 2050, 2577, 1117, 2576, 1019, 824, 2575, 2049,
	2019, 2566, 1471, 845, 2574, 2573, 2001, 1936, -1000, -1000,
	-1000, -1000, 1055, -1000, -1000, -1000, -1000, -1000, -1000, 38081,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1110, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1678, 2323, 2323, 2323, 2397, 363, 352, -1000,
	106, -1000, 1865, -1000, 1427, -1000, -1000, -1000, 58287, -1000,
	-1000, 20542, 20542, 20542, 20542, 20542, 1258, -1000, -1000, -1000,
	591, -1000, 547, 458, 11316, -1000, -1000, 2514, -1000, -1000,
	-1000, 370, 20542, -1000, 209, -1000, -1000, -1000, -1000, 546,
	2567, -1000, 780, -1000, -1000, -1000, 704, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1988, 491, 490, -1000, 483, 482,
	481, -1000, -1000, -1000, 545, 543, 542, 540, 538, 528,
	527, 524, -1000, -1000, -1000, 1153, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 764, -1000, 764,
	764, 463, 463, 523, 521, 467, 517, -1000, -1000, 515,
	463, 514, 509, -1000, -1000, 508, 642, -1000, 641, 506,
	505, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1569, -1000, -1000, 1569, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 936, 50843, -1000, -1000, -1000, -41, 49315, -1000, 374,
	-41, -1000, -1000, 499, -1000, 14633, 14633, 14633, -1000, -1000,
	1499, 20542, -1000, 1715, -1000, 601, -219, 498, 24903, 634,
	634, -1000, 22963, 588, 27235, -1000, 491, 490, 483, 482,
	481, -1000, 207, -1000, -1000, -1000, -1000, -1000, 1675, 2192,
	846, -1000, 1188, 2190, -1000, 1883, 2189, 1157, -1000, -1000,
	749, 2188, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1367, -1000, -1000, 1546, 2187, -209, 2070, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1523, -1000, 30005, 32691, -42,
	-1000, -1000, -84, -1000, 10111, 58287, -1000, -1000, -1000, 58287,
	669, -1000, -1000, 2182, -1000, 58287, 668, -1000, -1000, 2181,
	-1000, 1921, 49315, 10507, 49315, 49315, -1000, 480, 1641, 1497,
	-1000, -1000, 32309, 1883, 1634, -1000, -1000, 719, 1633, -1000,
	-1000, 1630, -1000, 374, -1000, -1000, 41179, 51607, 719, 1623,
	-1000, -1000, -1000, 38081, -1000, 49315, -1000, 49315, -1000, 1054,
	-1000, 51225, 139, 2179, -1000, -1000, 139, 2174, -1000, 139,
	2162, -1000, 138, 2157, -1000, -1000, 1357, 2150, -1000, -89,
	2148, -1000, -1000, -89, 2141, -1000, -1000, 20542, -62, -1000,
	-1000, -1000, 776, 30769, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 40791, 30005, -1000, -1000, -1000, -1000, 32309, 49315, 34613,
	699, 58287, -1000, 2451, 59071, 30005, 58287, -1000, 32309, 49315,
	1979, -1000, 40403, 40015, 2343, 703, -1000, -1000, 49315, -1000,
	20542, -1000, 2450, 1632, -56, -1000, -1000, -1000, -1000, -1000,
	1666, 1705, 798, 1132, -1000, 13797, 13797, 2259, -1000, 205,
	10507, -1000, -1000, 1004, 1717, -1000, -1000, -1000, -1000, -1000,
	39627, -1000, -1000, -1000, 1422, 49315, -1000, -1000, 1976, -1000,
	31927, 49315, -1000, 49315, -1000, 49315, -1000, 49315, -1000, 49315,
	-1000, -1000, -1000, -1000, -1000, 2030, 1238, 1971, -1000, 49315,
	-1000, 49315, -1000, -1000, -1000, 1608, -1000, -1000, -1000, 39245,
	38857, 38469, -1000, -1000, 1168, -1000, 1001, -1000, -1000, 141,
	-1000, -1000, 1678, -1000, 1515, 1749, 18856, 1703, 20542, 106,
	-1000, -1000, 106, 106, 12550, -1000, -1000, -1000, 49315, -1000,
	6347, 59071, 10507, 956, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 1584,
	20542, 934, 20542, 20542, 20542, 20542, 2194, -1000, -1000, 1335,
	412, 1365, -1000, 2544, 2544, 2544, 58650, 58650, 479, 591,
	-1000, 20542, -1000, 67, 20542, 352, 56398, 1621, -40, 10905,
	-1000, -1000, -1000, -1000, 18431, 759, 58287, 9715, 6767, -1000,
	2558, 939, 1975, 1850, 478, 656, 647, 645, 638, 628,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, -1000, -1000,
	-1000, -1000, -1000, -1000, 2514, -1000, 18020, 17595, -1000, 2551,
	17170, 16745, -1000, 16320, 21775, 15895, 955, 952, 950, 947,
	20542, 11727, -1000, -56, -1000, 50843, -1000, 49315, -41, 2439,
	20542, 128, -1000, 57125, -1000, 128, 128, 477, -63, 58287,
	1747, 1732, 24515, 1607, 1276, 1276, 1276, -1000, 474, 583,
	634, 7320, 15470, 470, 634, 634, 101, 36935, 1310, 36935,
	237, 351, 22575, 1715, -1000, -1000, 49315, 10507, -49, 1278,
	-1000, 33455, 2330, 2290, 2284, 1049, -1000, 1022, 2395, 38081,
	2414, 67, 2326, 1919, -1000, -1000, 928, 38081, 1883, -1000,
	59071, -1000, 1774, 2392, 1023, 1069, 1023, 1023, 1062, 38081,
	926, 1241, 30005, 2313, 925, -51, 2410, 67, 2309, 1918,
	923, -1000, -1000, 49315, 10507, 2306, 999, 631, -42, 32691,
	49315, 204, -1000, 20542, 67, 20542, 67, 1015, -69, 198,
	1758, 1745, 101, -1000, 33073, 2432, 2128, 49315, 919, -1000,
	1883, 2125, -1000, 1237, -1000, 2114, 2113, 2429, 1481, 1619,
	-1000, -1000, -1000, 1478, 1599, 962, 2111, 750, 513, 2425,
	513, 26459, -1000, 49315, -1000, 49315, -1000, -1000, 49315, -1000,
	49315, -1000, 49315, -1000, 49315, 49315, -1000, 49315, 30005, 30005,
	30005, -70, 3399, 30769, -71, 718, 918, -108, -1000, 789,
	33073, 4741, -72, -1000, 970, -1000, -1000, -1000, 312, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 764, 469, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	467, 1153, 463, 463, 463, -1000, -1000, -1000, 642, -1000,
	641, -1000, -1000, -1000, 764, 764, -1000, -1000, -186, 1914,
	-84, 34613, 631, -1000, 631, -1000, 1961, -1000, 2338, 655,
	-77, 819, -56, -1000, 1569, -1000, 1151, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2565, -1000, 2554, -1000, -1000, 2549, -44, -1000, -44, -1000,
	10507, -1000, 49315, 1958, -1000, -1000, -1000, -1000, -1000, -1000,
	49315, -1000, 49315, -1000, -1000, -1000, -1000, -1000, -1000, 817,
	-1000, 1951, -1000, 3399, 192, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49315, 49315, 49315, -1000, 38081, -1000, -1000,
	-1000, -1000, 58287, -1000, 397, -1000, -1000, 58287, 1166, 1771,
	-1000, 1771, -46, -1000, 56834, 1693, 49315, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 701,
	1028, 1028, 931, 931, 931, 931, 2489, 713, 851, 3357,
	3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 1352, 411,
	411, 1352, 1352, 1352, 1352, 1352, 411, 411, 411, 3916,
	3916, 3916, 58650, 58578, 541, 20542, 20542, 916, 1321, 412,
	541, 20542, 541, 541, 541, 541, -1000, 1702, -1000, -1000,
	-1000, -1000, 1888, 461, 21775, 21775, -1000, -1000, -1000, 11316,
	20542, -1000, -1000, -1000, -1000, 458, 20542, -1000, 5271, -244,
	347, -144, 191, 49315, 20542, 572, -149, -1000, 1040, -1000,
	20542, 190, -1000, -1000, -50, 20542, 20542, 20542, 345, -1000,
	343, -1000, 915, -1000, 914, 900, 899, -1000, 454, 1273,
	453, 452, 20542, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 58215, 53851, 53560, 53488, 52761, 53197, 53125,
	-78, -79, 342, -1000, 1880, -144, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 341, -1000, 340, -86, -1000, -87, -1000,
	338, -1000, 57924, -144, 333, 5107, -1000, 21775, 21775, 21775,
	-1000, 324, -1000, 56762, -1000, 698, 696, 695, 688, 57852,
	15045, 15045, 15045, 322, 57561, 20542, -144, -1000, -1000, 450,
	-88, 750, 14633, 23739, 10507, -1000, 750, 750, 20542, -1000,
	20542, 24515, 24515, 2226, 1730, 24515, -1000, -1000, -1000, -1000,
	36935, 606, 634, 36935, -1000, 2514, 1733, -1000, 321, -1000,
	14222, 36935, 36935, 10507, -1000, -1000, 49315, 374, -1000, -1000,
	634, 319, 186, 1691, 49315, 49315, 49315, -1000, -1000, 1595,
	50461, 1586, 59071, 49315, -1000, -1000, 449, 448, 1688, 1685,
	49315, 49315, 50079, 49697, 49315, 1371, 20542, 1282, 1272, 67,
	-1000, 683, 447, 49315, 1136, -1000, -1000, -1000, -1000, -1000,
	49315, -1000, -1000, 2543, -1000, 1023, -1000, -1000, -1000, 1023,
	1883, 1124, 49315, 30005, 730, 681, 49315, 1239, 67, -1000,
	678, 446, 10507, 1271, -1000, 675, 49315, 1831, -1000, 1522,
	-1000, -1000, 9319, 58287, -1000, 58287, -1000, -1000, -1000, 10507,
	1770, 1770, 317, -47, -1000, -1000, -1000, -1000, -1000, -1000,
	1788, 49315, 584, 49315, 67, 49315, 123, 30005, 49315, 30005,
	30005, 30005, 67, 49315, 2107, 49315, 2098, 2203, 615, 49315,
	1328, 20542, 1246, -1000, 25679, 775, 49315, 1094, 100, -1000,
	-1000, -1000, -13, 49315, -1000, -1000, 139, 139, 139, -1000,
	138, 1357, -1000, -89, -89, -1000, -1000, -1000, 3399, 1878,
	37699, 49315, 2471, 30005, -93, -1000, 784, 878, 877, -1000,
	59071, -1000, 587, 859, -1000, 2539, 443, 2514, -1000, 718,
	49315, 92, -1000, 726, 1440, -1000, 13797, 13797, -1000, 1569,
	-1000, -1000, 1121, -1000, 1128, -1000, -1000, -1000, -1000, 13797,
	-1000, -1000, 993, -84, -84, -1000, -1000, 378, -1000, 49315,
	-1000, -1000, -1000, -1000, 1166, -1000, 20542, -1000, -1000, -1000,
	12550, -1000, -1000, -1000, 49315, -218, 20542, 541, 541, 20542,
	21775, 21775, -1000, 541, -1000, -1000, -1000, -1000, -1000, 1876,
	442, 20542, 59071, 4784, 4733, -101, 1352, -1000, 20542, -1000,
	8923, -102, 56107, -1000, -1000, 585, 2104, -1000, 20542, 57488,
	8527, 315, 13386, -1000, 57197, -52, -52, -1000, 2561, 1620,
	1242, 1186, 1070, 2526, -1000, 26847, 755, 1328, 56034, 6347,
	59071, 20542, 20542, -1000, 20542, 20542, 20542, -1000, -1000, 2514,
	-1000, 20542, -1000, -1000, -1000, -1000, -1000, 1874, 20542, -1000,
	6347, 59071, 21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775,
	21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775, 21775,
	21775, 1673, 21775, 2517, 2517, 2517, -1000, 1886, 1874, 20542,
	20542, -1000, -1000, -1000, -1000, 59071, 309, 308, 307, -1000,
	20542, -144, 4741, -1000, 1848, -1000, -85, -1000, 1715, -1000,
	-1000, 1848, 1848, -109, 58287, -1000, 2226, -1000, 441, 20542,
	24515, -1000, 571, -1000, -111, -1000, 36935, -1000, 568, -242,
	-1000, 626, -1000, 634, 306, -1000, -1000, -1000, 179, 374,
	-1000, 36935, -1000, 10507, -1000, -1000, 897, 894, -1000, 2096,
	-1000, 1585, -1000, 782, -1000, 1135, 20542, 23351, 438, 436,
	1331, -1000, 2092, 1357, 2084, 1357, -1000, -1000, 670, -1000,
	58287, 435, 433, -1000, -49, 1190, -1000, 26077, 20542, -1000,
	892, -1000, -1000, -1000, 1883, 869, -1000, -1000, 1194, 26077,
	-1000, -1000, -1000, 26077, 20542, -1000, -51, 868, 26077, 2063,
	718, 1870, 971, -1000, -1000, -1000, -1000, -1000, -1000, 1783,
	33073, 49315, 432, 49315, 430, -1000, -1000, 427, 49315, 631,
	1883, -1000, 719, -1000, -1000, 788, 10507, 426, 10507, 1677,
	615, 30387, -1000, 719, 1749, -1000, 58287, -1000, 1094, 12138,
	2288, -112, -1000, 140, -1000, -1000, -1000, 750, 26459, 24515,
	20542, 2572, -114, -1000, -1000, -1000, -1000, -1000, -1000, 67,
	-54, 425, -1000, 623, 617, -84, 1388, 1635, 1635, -1000,
	2523, -1000, 566, 305, 2514, 304, -1000, -84, 49315, -1000,
	1338, 10507, 49315, 49315, 10507, 49315, -1000, -1000, -56, -1000,
	-1000, -1000, -1000, 49315, -1000, -1000, -1000, 1358, 55743, -1000,
	2298, 10507, 2444, 541, 3932, 3322, 20542, 59071, 58810, -117,
	20542, 20542, -1000, 565, 58287, -1000, -1000, -1000, -1000, -1000,
	-1000, 58287, 20542, 107, -1000, 2491, 20542, 303, 297, 293,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 292, -1000,
	-1000, 52371, -1000, 20542, 290, -1000, 289, 288, 52833, 5927,
	55670, 55379, 55306, 281, 58287, 1886, 58287, -1000, -1000, 609,
	609, 998, 998, 998, 998, 2517, 389, 582, 3219, 907,
	907, 907, 3341, 632, 632, 907, 907, 907, 1868, 1657,
	423, 4754, -1000, -1000, 58287, 58287, 275, -1000, -1000, -1000,
	-144, 272, 1838, 2389, -1000, 24515, 1838, 1838, -1000, -1000,
	49315, 58287, -1000, -219, -1000, 2514, -1000, -1000, 1733, -1000,
	7730, 36935, 634, 10507, -1000, -1000, -12, 49315, 49315, 49315,
	2083, -1000, 3088, -1000, 55015, -119, -1000, 2360, 2360, 20542,
	101, -1000, -1000, 422, 23351, 49315, -1000, 1311, 1751, 809,
	49315, -1000, 49315, -1000, -1000, 49315, 49315, 49315, 49315, 49315,
	-1000, 419, -122, 49315, 49315, 30005, -1000, -1000, -124, 10507,
	-1000, 2305, -1000, 30005, 943, 1239, 1818, -1000, 417, 23351,
	416, 49315, 33073, 2421, -1000, 718, -1000, -1000, 415, 1855,
	1454, 23351, 1439, 1679, 615, 30387, -1000, 962, 1094, -1000,
	-1000, -61, -1000, 451, 67, 49315, 2571, 1328, -1000, -65,
	58287, -1000, 616, -1000, 37317, 37317, 30005, 30005, -1000, 2249,
	2247, 557, -1000, -1000, 267, -1000, -84, 1609, -1000, -1000,
	1245, 1518, -1000, -1000, -1000, -1000, -1000, 2298, 20542, 20542,
	58810, -125, -1000, 541, 541, -1000, 58287, 8131, -1000, 57197,
	-1000, -1000, -1000, -1000, 1248, -1000, 54942, -1000, -1000, -1000,
	20542, 20542, -1000, -1000, -1000, -1000, -1000, -1000, 21775, 1866,
	414, 59071, -1000, -1000, 753, 20542, 20542, 1715, 753, 753,
	-127, 634, -1000, -1000, -1000, 2514, -1000, 36935, -12, 10507,
	-1000, -1000, -1000, 49315, -1000, 49315, -1000, 10507, 49315, 1857,
	1555, -1000, -1000, 1684, 413, 21775, 49315, 561, -1000, 1297,
	23351, 2298, 10507, 2298, 54651, 6767, -130, -132, 1549, -1000,
	-1000, 1541, 20542, -1000, 59071, 1357, 1357, -135, -137, -1000,
	867, 866, 20542, 865, -1000, -1000, -1000, 861, -1000, 672,
	-89, 26077, -1000, -1000, 1251, 23351, -143, 23351, -148, 263,
	67, -1000, 23351, -1000, 49315, -150, 49315, -1000, 615, 30387,
	-1000, 2203, -1000, 2222, 49315, 2270, -1000, -1000, -1000, 1749,
	412, -1000, -156, -1000, -1000, 410, 409, -1000, -1000, -99,
	-1000, 667, 659, -1000, -1000, -1000, 10507, 987, -1000, 541,
	541, -1000, -1000, -1000, 259, 1328, 2387, -1000, 54578, 54287,
	3948, 21775, 59071, -161, -1000, 49315, 58287, -144, -1000, -1000,
	-1000, 36935, 556, -1000, -1000, 2316, -1000, -1000, -1000, 49315,
	1571, -1000, -1000, 20542, 4754, 399, 20542, -1000, 1783, 395,
	-1000, -1000, -1000, -1000, -1000, -1000, 2360, -50, -1000, 1210,
	-1000, -1000, 58287, 2350, -1000, -1000, 394, 393, 49315, 49315,
	-52, 392, 390, 26077, -1000, 49315, -163, 1297, -164, -1000,
	1783, -1000, -166, 788, -1000, 387, 30387, -1000, 1677, 953,
	-169, 49315, 1094, -1000, -1000, 30005, 30005, 1609, -1000, 49315,
	-1000, 49315, -1000, 49315, -1000, 1176, 20542, -1000, -1000, 3948,
	-171, -1000, -100, -1000, 2420, -1000, -1000, -1000, -1000, 2080,
	54214, 1661, 49315, 53923, 1239, 49315, 2298, 258, 49315, 787,
	10507, 1245, 1245, -1000, -1000, 245, 20542, 20542, -1000, 386,
	-1000, 1783, 1297, 1239, 1297, 377, 23351, -1000, 1679, 1041,
	-1000, 750, -1000, -1000, -172, -178, -1000, -179, -180, -1000,
	239, 21364, 21364, -144, -1000, 49315, 376, 2041, -1000, 1415,
	1381, 238, 825, -1000, -187, -1000, -1000, 374, -1000, 20542,
	-1000, -188, -1000, 774, -190, -1000, 771, 2491, -195, -196,
	49315, 1239, 1783, -1000, 1783, 23351, -197, -1000, 26459, -1000,
	718, 718, -1000, -1000, -1000, -1000, -1000, 22171, 1589, 1084,
	56471, -1000, -1000, -1000, 49315, -1000, 1431, 1428, 1068, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1661, 58287, -1000, 1245,
	1813, -1000, 1245, 1859, -1000, -1000, -202, -1000, 1239, 1239,
	-203, -1000, -198, -1000, -1000, 2463, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2235, -1000, 801, 1740, 1740, 1415, -1000,
	371, -1000, 369, 1337, -1000, -1000, 1297, -1000, 20953, -1000,
	2474, -1000, -1000, 1680, -1000, -1000, 20542, 20542, -1000, -1000,
	-1000, 1783, -1000, -1000, -1000, -1000, -205, -212, 1239, 1239,
	860, -1000, -1000, 365, 20542, -215, 1239, -1000,
}
var sqlPgo = [...]int{

	0, 3062, 3056, 2006, 3055, 2406, 3053, 3052, 3050, 3048,
	3041, 2385, 3040, 3039, 3038, 3037, 3035, 3032, 3031, 3030,
	3029, 3024, 3022, 3021, 3019, 3016, 3014, 3012, 3010, 3008,
	3005, 3004, 2382, 2999, 2378, 2998, 2997, 2996, 2995, 2988,
	2985, 2982, 2979, 23, 2976, 2975, 2961, 2959, 2367, 2958,
	2954, 2361, 2949, 2943, 2345, 2942, 2941, 2940, 2314, 2310,
	2939, 2938, 2291, 2937, 2935, 2281, 2934, 2273, 2933, 2928,
	2269, 2927, 98, 125, 2925, 2267, 2923, 2922, 2265, 2249,
	2236, 2920, 2199, 2919, 2918, 2189, 2183, 2912, 101, 2909,
	2906, 2905, 2903, 2178, 2158, 2899, 2896, 2893, 171, 2885,
	2054, 2879, 2876, 2872, 2870, 2869, 2865, 2857, 2856, 2855,
	2853, 2852, 2848, 2847, 2843, 2842, 2838, 2833, 2832, 2830,
	2828, 2825, 2821, 2820, 2818, 2814, 2813, 183, 113, 2810,
	2806, 2041, 2034, 2800, 2791, 36, 48, 34, 81, 129,
	176, 4488, 163, 2789, 2788, 2785, 2784, 2783, 47, 121,
	123, 111, 114, 2783, 159, 2781, 2780, 44, 40, 24,
	19, 77, 2775, 2773, 2771, 1618, 78, 2767, 2766, 170,
	161, 2764, 583, 28, 90, 88, 83, 195, 49, 2763,
	100, 16, 2761, 115, 97, 2757, 59, 37, 26, 2907,
	127, 55, 124, 156, 150, 154, 146, 117, 447, 2756,
	172, 71, 142, 2755, 2754, 2753, 51, 140, 5, 2,
	134, 10, 2752, 9, 2751, 11, 2749, 2748, 2746, 2745,
	29, 110, 35, 39, 2743, 238, 32, 137, 2742, 157,
	2741, 74, 179, 141, 3, 135, 2739, 72, 20, 80,
	2720, 2718, 93, 165, 2717, 31, 116, 75, 106, 184,
	151, 87, 160, 148, 2716, 2713, 2712, 126, 2709, 138,
	99, 2708, 2707, 85, 27, 2705, 52, 164, 45, 2702,
	2692, 107, 2691, 144, 2687, 2685, 182, 108, 136, 6,
	50, 92, 8, 153, 91, 54, 65, 2683, 3389, 1405,
	1632, 79, 2682, 96, 61, 33, 64, 103, 169, 25,
	2681, 2680, 2750, 2679, 2674, 2673, 130, 2672, 2671, 2670,
	89, 82, 112, 2667, 104, 38, 382, 149, 133, 174,
	120, 2666, 131, 68, 145, 177, 56, 2665, 1233, 2661,
	139, 2659, 2657, 2656, 2655, 119, 2649, 2642, 2641, 1053,
	2635, 105, 2632, 143, 132, 118, 57, 109, 168, 162,
	287, 2630, 152, 43, 2629, 438, 21, 0, 3763, 3372,
	2628, 147, 86, 2627, 2625, 2624, 2622, 30, 13, 4,
	7, 12, 14, 122, 18, 289, 2620, 2619, 73, 94,
	2618, 180, 158, 2616, 2615, 2614, 42, 2613, 17, 2612,
	15, 2611, 2606, 22, 1, 2603, 2599, 186, 2598, 2597,
	2595, 2434, 2594, 178, 2593, 2590, 2589, 2588, 2587, 2140,
	2586, 2585, 58, 62, 128,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 403, 403, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	402, 402, 152, 152, 151, 147, 147, 405, 405, 406,
	406, 154, 154, 154, 156, 156, 153, 153, 32, 32,
	86, 86, 86, 138, 138, 138, 138, 79, 79, 79,
	74, 74, 355, 355, 356, 356, 134, 134, 135, 135,
	135, 135, 136, 136, 137, 137, 137, 46, 34, 34,
	34, 34, 34, 34, 34, 35, 35, 35, 35, 36,
	36, 36, 36, 36, 36, 37, 37, 37, 37, 37,
	37, 44, 44, 128, 128, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 58, 58, 56,
	59, 59, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 68, 68, 68, 69, 69, 69,
	66, 66, 66, 64, 64, 64, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 233, 233, 70, 70, 70,
	70, 70, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 73, 73,
	73, 73, 73, 73, 73, 73, 325, 325, 71, 71,
	300, 300, 75, 75, 258, 258, 76, 76, 76, 76,
	76, 77, 77, 77, 77, 87, 87, 87, 87, 401,
	401, 227, 227, 169, 169, 169, 169, 82, 82, 82,
	82, 83, 83, 83, 84, 84, 133, 133, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 38, 38,
	38, 39, 39, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 43, 94, 94, 94, 96, 93, 93,
	93, 95, 95, 95, 95, 97, 97, 98, 98, 98,
	98, 98, 98, 99, 99, 349, 349, 236, 236, 347,
	347, 348, 348, 204, 204, 204, 204, 204, 205, 205,
	205, 354, 354, 354, 354, 354, 354, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 118, 118,
	118, 127, 127, 127, 127, 127, 127, 127, 120, 120,
	120, 111, 111, 101, 101, 107, 107, 107, 107, 107,
	102, 102, 108, 108, 110, 110, 112, 112, 112, 112,
	112, 112, 103, 103, 103, 103, 114, 114, 114, 114,
	113, 113, 123, 123, 123, 123, 123, 123, 123, 313,
	313, 119, 119, 119, 119, 122, 122, 122, 122, 117,
	117, 117, 121, 121, 124, 124, 124, 124, 104, 104,
	105, 105, 106, 106, 125, 125, 116, 116, 126, 126,
	126, 126, 126, 126, 126, 115, 115, 115, 404, 404,
	109, 399, 399, 397, 397, 397, 397, 397, 397, 397,
	398, 398, 400, 400, 80, 80, 80, 52, 52, 53,
	53, 206, 206, 207, 207, 281, 281, 281, 281, 208,
	208, 155, 155, 155, 211, 212, 212, 209, 209, 210,
	210, 210, 214, 214, 213, 216, 216, 215, 280, 365,
	365, 366, 366, 366, 366, 366, 366, 366, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 363, 363,
	363, 364, 361, 361, 362, 362, 362, 362, 407, 407,
	279, 279, 220, 220, 368, 368, 368, 368, 369, 369,
	369, 369, 369, 372, 371, 370, 370, 370, 370, 370,
	309, 309, 309, 57, 57, 57, 247, 247, 246, 246,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 130, 130, 54, 54, 54, 161, 161,
	51, 51, 51, 55, 55, 50, 50, 50, 50, 50,
	264, 264, 262, 262, 225, 225, 315, 315, 315, 173,
	173, 148, 148, 148, 20, 22, 22, 16, 16, 16,
	16, 16, 16, 29, 29, 30, 30, 26, 26, 263,
	263, 265, 265, 81, 81, 85, 85, 85, 91, 91,
	129, 129, 129, 129, 129, 129, 129, 33, 33, 33,
	33, 45, 45, 45, 45, 89, 410, 410, 410, 90,
	90, 409, 409, 168, 168, 168, 168, 170, 170, 276,
	276, 277, 277, 411, 411, 278, 278, 278, 163, 162,
	164, 164, 49, 49, 49, 157, 157, 158, 158, 159,
	159, 160, 160, 412, 412, 78, 78, 78, 132, 132,
	200, 200, 273, 273, 273, 221, 221, 178, 178, 275,
	275, 274, 274, 274, 245, 245, 245, 131, 131, 230,
	230, 238, 238, 239, 239, 321, 321, 240, 88, 88,
	141, 141, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 142, 142, 142, 142, 142, 142, 142, 145, 145,
	145, 145, 146, 146, 146, 144, 144, 379, 379, 379,
	381, 381, 382, 378, 378, 380, 380, 408, 408, 249,
	249, 249, 218, 219, 217, 217, 413, 413, 223, 223,
	222, 224, 224, 314, 314, 314, 243, 243, 243, 243,
	268, 268, 266, 266, 267, 267, 269, 269, 270, 270,
	270, 271, 271, 272, 272, 242, 242, 296, 296, 143,
	143, 143, 229, 229, 229, 231, 231, 286, 286, 286,
	287, 287, 285, 285, 285, 285, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 395,
	395, 395, 396, 396, 312, 312, 317, 317, 317, 317,
	317, 317, 310, 310, 311, 311, 322, 323, 323, 252,
	252, 252, 252, 250, 250, 251, 251, 318, 318, 318,
	318, 244, 244, 319, 319, 319, 282, 282, 326, 326,
	326, 341, 341, 228, 228, 228, 336, 336, 327, 327,
	327, 327, 327, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 330, 330, 330, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 340, 340, 340, 340,
	340, 331, 331, 337, 338, 332, 333, 339, 339, 339,
	339, 343, 343, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 335, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 260, 260, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 290,
	290, 290, 290, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 373, 373, 373, 373,
	373, 373, 373, 373, 376, 376, 377, 377, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 383, 383, 384,
	384, 386, 386, 387, 387, 388, 389, 389, 389, 390,
	391, 391, 385, 385, 392, 392, 392, 393, 393, 394,
	394, 394, 394, 394, 302, 302, 308, 308, 308, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 171, 171, 171, 171, 171,
	235, 235, 234, 234, 299, 299, 297, 297, 301, 301,
	253, 253, 342, 342, 342, 342, 342, 342, 342, 254,
	254, 254, 261, 255, 255, 256, 256, 256, 256, 256,
	293, 294, 257, 257, 257, 295, 295, 303, 307, 307,
	306, 305, 305, 304, 304, 283, 283, 284, 284, 241,
	241, 414, 414, 237, 237, 320, 320, 320, 320, 202,
	202, 232, 232, 201, 201, 195, 195, 196, 196, 196,
	196, 226, 226, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 344, 344, 344, 345, 346, 298,
	188, 187, 175, 176, 186, 185, 184, 174, 177, 181,
	182, 183, 179, 180, 191, 190, 189, 324, 197, 197,
	198, 198, 198, 199, 199, 199, 199, 172, 172, 192,
	192, 193, 194, 194, 165, 165, 165, 166, 166, 167,
	167, 353, 353, 351, 351, 351, 352, 352, 352, 352,
	350, 350, 350, 350, 350, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 2,
	0, 1, 1, 0, 2, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 1, 1, 1, 12, 12, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 7, 3, 8,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	6, 3, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 3, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 3, 1, 1,
	3, 5, 4, 6, 4, 3, 0, 1, 3, 2,
	4, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 2,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 5, 4, 6, 4, 5, 6, 5, 1,
	0, 2, 3, 3, 3, 6, 4, 2, 3, 4,
	2, 3, 3, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 4, 4, 2, 3, 2, 3, 7, 7,
	8, 10, 7, 4, 5, 5, 5, 3, 1, 1,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 8, 11, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 4, 7, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 7, 3, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 6, 3, 13, 16, 9, 12, 4,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 0, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 7,
	3, 4, 3, 4, 3, 4, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 2, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 2, 2, 1, 5, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -380, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 258, 266, 287, 289, 291, 300,
	-40, -39, 117, -139, -141, 285, -83, -84, -93, -94,
	-95, -96, -133, 318, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	321, -33, -45, -90, -89, 366, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-379, -63, -64, -66, -68, -69, -142, -140, 422, 286,
	376, 37, 330, 65, 111, 295, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 393, 401, -145, -143, -144,
	-146, 307, 384, 343, 426, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 2, 343, 387, 308,
	377, 92, 167, 271, 256, -397, 2, 4, -359, -357,
	-196, -195, 343, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 159, 174, 180, 182, 162, 202, 233,
	235, 248, 252, 263, 265, 273, 297, 324, 339, 355,
	356, 357, 363, 364, 384, 385, 389, 396, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 58, 63, 64, 65, 66,
	67, 72, 69, 70, 71, 74, 76, 77, 80, 81,
	82, 90, 91, 93, 94, 95, 99, 101, 103, 106,
	107, 109, 110, 116, 117, 120, 115, 118, 349, 351,
	119, 121, 122, 132, 133, 135, 136, 138, 140, 144,
	146, 151, 152, 153, 154, 155, 156, 168, 163, 169,
	173, 176, 175, 177, 178, 179, 170, 184, 187, 188,
	189, 191, 192, 195, 196, 197, 200, 199, 204, 205,
	208, 209, 212, 214, 217, 218, 219, 220, 223, 221,
	222, 225, 226, 228, 227, 234, 236, 237, 239, 240,
	243, 244, 247, 250, 253, 254, 255, 256, 257, 258,
	259, 260, 262, 264, 266, 268, 269, 270, 271, 272,
	274, 275, 277, 278, 279, 280, 281, 285, 283, 284,
	286, 287, 288, 289, 291, 293, 294, 295, 296, 298,
	319, 320, 332, 300, 301, 302, 303, 304, 305, 306,
	310, 314, 311, 312, 313, 308, 309, 315, 316, 318,
	321, 323, 325, 326, 329, 330, 331, 333, 336, 337,
	338, 334, 335, 328, 341, 342, 344, 345, 346, 347,
	348, 350, 352, 353, 358, 361, 362, 366, 367, 369,
	370, 373, 374, 375, 380, 376, 378, 381, 382, 383,
	388, 394, 395, 397, 398, 399, -194, -165, 415, -193,
	425, 425, 425, 2, 188, 189, 270, 269, 315, 316,
	-189, -192, -193, -194, -165, 4, -357, -359, 92, 241,
	425, 425, 425, 2, 343, 331, 115, 308, 377, 293,
	387, -262, 184, 92, 372, -165, 266, 24, 2, 101,
	173, 375, 374, 24, 262, 309, 345, 347, 2, 425,
	425, 2, 387, 308, 343, 167, 92, 377, 293, -183,
	2, -165, -73, 2, 422, 27, -72, -5, -48, -58,
	-62, -75, -70, -11, -32, -34, -54, -51, -59, -65,
	-67, -79, -78, -80, -82, -86, -85, -88, -93, -94,
	-100, -131, -132, 78, 25, 107, 318, 117, 183, 2,
	-401, -227, 2, 24, -169, -165, 78, 145, 307, 343,
	2, 188, 189, 2, -183, 2, -397, 2, 188, 189,
	2, -401, -227, 23, 2, -165, 2, 304, 321, -170,
	2, 300, -165, 425, 425, 425, 425, 425, 425, 209,
	58, 297, 315, -98, 362, -97, 355, 302, -99, -349,
	2, 223, -165, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 2, -127, 315,
	331, 152, 36, 58, 24, 63, 93, 146, 167, 168,
	196, 73, 74, 269, 209, 189, -313, 119, 316, 344,
	303, 341, 362, 78, 378, 294, -404, 118, 4, 92,
	223, 317, 355, 67, 348, 349, 425, 425, 425, -408,
	2, 343, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, -140, -142, -141, 425, 425, 425, 425,
	425, -222, -223, 371, 181, 113, 246, -139, -141, 2,
	-379, -127, 315, 2, 58, 24, -347, 2, -288, 241,
	-290, 413, 414, 408, 229, 400, -302, 98, 216, 215,
	-292, -303, 114, 297, 422, -199, -291, 428, 9, -376,
	-141, 31, 52, -197, -165, 7, 8, 5, 6, -172,
	-328, -298, -335, 365, 125, 232, -373, -374, -198, 4,
	-357, -351, -329, -338, -333, -334, -336, 42, 48, 47,
	352, 222, 310, 311, 312, 313, 325, 380, 163, 40,
	239, 240, 175, 182, 61, 84, 85, 83, 88, 87,
	89, 86, 317, 377, 53, 30, 157, 158, 162, 233,
	159, 59, -375, 43, 94, 106, 135, 136, 176, 177,
	178, 179, 191, 192, 335, 358, 39, 41, 44, 54,
	55, 96, 97, 123, 124, 134, 147, 174, 180, 202,
	235, 252, 263, 273, 324, 339, 355, 356, 357, 363,
	364, 385, -358, -339, 79, 126, 143, 172, 160, 185,
	186, 190, 203, 206, 224, 231, 249, 251, 292, 322,
	-409, 2, 362, 362, 2, -409, 2, -409, 2, -168,
	2, 362, 359, -410, 362, 396, -381, 274, -382, -183,
	-381, 425, 425, 427, 425, -217, -218, -219, 2, 24,
	104, 422, 2, -316, 2, 420, -318, -172, 198, -375,
	-141, -317, 422, -189, 242, -198, 84, 85, 88, 87,
	89, 4, -165, 61, 216, 215, -3, 2, -318, 157,
	-189, 2, -318, 157, 2, -190, 157, -318, -192, 2,
	-355, 157, -353, 9, -352, 5, 4, -357, -359, -358,
	2, -174, -165, 2, -201, 157, -189, -186, -350, 4,
	-357, -359, -358, -360, 24, 26, 27, 28, 29, 31,
	32, 33, 34, 45, 52, 53, 57, 60, 62, 73,
	78, 83, 84, 86, 85, 87, 88, 89, 98, 100,
	102, 104, 105, 108, 111, 113, 125, 127, 139, 141,
	142, 145, 148, 150, 161, 167, 171, 181, 183, 198,
	201, 207, 210, 211, 229, 230, 232, 238, 241, 242,
	245, 246, 261, 267, 276, 290, 307, 317, 327, 340,
	343, 354, 359, 360, 365, 371, 372, 377, 379, 386,
	387, 390, 391, 392, 393, -187, -350, 359, 427, -232,
	-195, -196, -226, -165, 424, -288, 2, -88, 2, -288,
	157, 2, -88, 157, 2, -288, 157, 2, -88, 157,
	2, -220, 422, 424, 343, 62, 2, -189, 157, -179,
	2, -165, 109, -190, 157, 2, -192, -355, 157, 2,
	-355, 157, 2, -191, 2, -189, 167, 167, -174, 157,
	2, -165, 24, 142, 2, 183, 2, 183, 2, -319,
	2, -318, -233, 157, 2, -189, -233, 157, 2, -233,
	157, 2, -202, 157, 2, -201, -174, 157, 2, -356,
	157, 2, -355, -356, 157, 2, -258, 422, -325, 2,
	-324, -352, 384, 422, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 315, -138, 80, 220, 219, 260, 241, 359, 427,
	-189, -288, -88, -300, 422, 142, -288, -88, 241, 142,
	243, 2, 92, 343, 399, 24, -165, 2, 319, 2,
	422, -98, 56, 362, -277, 2, -278, -162, -163, -164,
	187, 268, 272, 399, -347, 359, 405, 142, -347, -236,
	424, -127, 2, 139, 379, 2, 7, 2, -355, 2,
	319, 2, 269, 316, 58, 142, 2, 2, -399, 2,
	241, 142, 2, 142, 2, 142, 2, 142, 2, 142,
	2, 2, 269, 316, 2, 361, 197, 361, 2, 142,
	2, 142, 2, 5, 2, 187, 268, 332, 2, 343,
	387, 308, 2, 2, 142, 2, 142, 399, 2, -244,
	-318, -222, -223, -243, -266, -267, 207, 127, 238, -249,
	24, 104, -249, -249, 46, 423, 423, -127, 319, 2,
	10, 11, 60, 35, 413, 414, 415, 416, 137, 417,
	418, 411, 412, 410, 403, 404, 407, 193, 194, 75,
	406, 405, 68, 213, 299, 128, 129, 130, 131, 282,
	164, 165, 166, 13, 14, 15, 28, 245, 206, 400,
	160, 322, 408, 16, 17, 18, 185, 186, 231, 38,
	161, -171, -203, -288, -288, -288, -288, -288, 251, -241,
	-283, 420, -141, 422, 422, -141, -288, -302, -234, 422,
	-346, 7, -141, -297, 420, -304, -288, 424, 422, 5,
	422, 5, -383, 394, 139, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 265, -343,
	388, -343, -343, -330, 422, -330, 422, 422, -331, 422,
	422, 422, -330, 422, 422, 422, 395, 401, 395, 401,
	422, 422, -276, -277, -276, 359, -170, 427, -381, -220,
	422, -237, -320, -288, 415, -237, -237, 241, -234, -288,
	79, -252, 190, 224, 143, 203, 292, 172, -346, -73,
	-285, 428, 422, -172, -375, -141, -165, -312, 401, -312,
	-141, -317, 422, -316, 415, -189, 422, 424, -150, 283,
	-149, 22, 25, 107, 382, 120, -210, 169, 256, 114,
	328, -403, 117, 301, 350, 351, 283, 114, -246, -248,
	32, 90, 226, 253, 49, 155, 215, 216, 330, 114,
	283, 393, 114, 117, 283, -152, 328, -403, 117, 301,
	283, -151, -210, 114, 428, 117, 236, -355, -232, 427,
	427, -350, 415, 114, 114, 114, 114, 142, -226, -350,
	-189, -197, -165, -198, 422, -220, 229, 241, -397, -247,
	-246, 229, -161, -378, 393, 229, 229, -220, -176, 157,
	2, -166, -165, -176, 157, -378, 229, -319, -200, -189,
	-200, 318, -183, 32, -154, 427, 51, 288, 114, -154,
	114, -154, 114, -154, 427, 114, -154, 114, 427, 114,
	114, -234, 423, 427, -325, -355, -397, -226, -169, 78,
	422, 32, -299, -326, -327, -328, -337, -332, -335, 42,
	48, 47, 352, 222, 310, 311, 312, 313, 325, 380,
	163, 40, 239, 240, 175, 4, 41, -339, 182, 174,
	176, 177, 178, 179, 180, 324, 39, 273, 135, 136,
	134, 106, 97, 96, 235, 44, 43, 94, 355, 356,
	357, 358, 191, 192, 55, 54, 385, 335, -356, -397,
	-226, 139, -174, 2, -189, 2, 69, 70, 399, -349,
	-234, 32, -277, 2, -411, 427, 205, -205, 212, 228,
	151, 242, 397, -354, 5, 4, -298, -309, 98, 209,
	-335, 8, 414, -344, 7, 413, -348, -347, -348, 82,
	424, -350, 343, 191, -349, 24, 320, 2, -189, -400,
	139, -398, 293, -397, -189, -189, -189, -189, -189, 139,
	2, 361, 2, 139, -165, -165, 205, -189, 2, -191,
	2, -190, 2, 343, 167, 343, -154, 427, -243, -267,
	-266, -269, -288, 24, -272, 133, 225, -288, -290, -140,
	-140, -140, -224, -314, -288, 267, 167, -349, -341, -326,
	-340, 278, 279, 277, 281, 280, -326, -188, -350, 355,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, 206, 160, 322, 38, 161,
	-288, 359, -288, -288, -288, -288, 221, 229, 232, 365,
	125, 373, 104, 236, -414, 340, 34, -295, -141, 422,
	-308, 29, 327, 24, -302, 297, 422, -283, -288, -284,
	-235, -234, 423, 32, 427, -235, -301, -297, -307, -306,
	390, -350, 415, 423, -234, 386, 24, 104, 415, 2,
	7, -259, 398, 218, 95, 153, 217, -260, 306, -384,
	132, 148, 422, 423, 2, 423, 2, 423, 2, 423,
	2, 423, 2, -288, -288, -288, -288, -288, -288, -288,
	-234, -346, -253, 2, -342, -234, 4, 398, 218, 95,
	153, 217, 306, -253, 2, 7, -234, 2, -234, 2,
	-254, 2, -288, -234, -255, -289, -290, 413, 414, 408,
	-302, -256, 2, -288, -235, 355, 355, 355, 355, -288,
	45, 201, 360, -257, -288, 142, -234, -170, -382, 32,
	-234, -229, 427, 142, 32, 4, -229, -229, 422, 423,
	427, 190, 190, -316, -252, 190, -250, 249, -250, -250,
	-395, 422, 421, -312, -175, 420, 429, -350, -235, 2,
	422, -312, -312, 424, -311, -310, 32, -183, 247, -311,
	423, -189, -350, 427, 359, -263, 73, 62, -280, 157,
	62, -361, -177, 73, -362, -165, 57, 372, 267, 141,
	-263, 73, -263, 73, 73, 318, 331, 46, -318, 35,
	-88, 71, 142, 359, -318, -248, -326, 90, 215, 216,
	46, -345, -344, 414, -345, 46, -345, -345, -345, 393,
	-190, -318, 359, 257, -355, 71, 359, 427, 35, -88,
	71, 142, 359, -201, -175, 71, 343, -323, -322, 402,
	-195, -165, 424, -288, -88, -288, -88, 333, 423, 424,
	185, 185, -206, -207, -165, -281, -280, -363, -364, -361,
	184, 167, 372, 126, 32, 114, -226, 359, 114, 257,
	114, 114, 32, 241, 229, 241, 229, -157, 346, 114,
	-282, 391, -273, -88, 422, 98, 32, -273, -238, -239,
	-321, -240, -177, 422, -183, -189, -233, -233, -233, -201,
	-202, -174, -355, -356, -356, 423, -73, -324, 423, -137,
	393, 359, 393, 379, -207, -72, 25, 78, 107, 423,
	427, -228, 31, 420, -259, 422, -343, 422, -137, -322,
	142, -227, -323, -323, 139, 70, 405, 359, 423, 362,
	-278, -204, 272, 326, 284, 314, 8, 7, 7, 427,
	-350, -189, 139, -226, -226, 315, -73, 139, -73, 424,
	-189, -201, -189, -318, -270, -344, 422, -271, 297, 298,
	427, -148, 33, 102, 195, -189, 399, -288, -288, 359,
	-414, 340, -295, -288, 221, 232, 365, 125, 373, 104,
	236, 142, 422, -289, -289, -234, -288, 421, 431, 423,
	424, -226, -288, 421, 421, 427, -305, -306, 108, -288,
	424, -413, 427, -222, -288, -234, -234, 423, 423, 359,
	359, 359, 359, 422, -389, 250, 422, 422, -288, 32,
	427, 427, 427, 423, 427, 427, 427, 423, 423, 427,
	423, 142, 423, 423, 423, 423, 423, -261, 261, 423,
	10, 11, 413, 414, 415, 416, 137, 417, 418, 411,
	412, 410, 403, 404, 405, 68, 213, 299, 13, 14,
	15, 185, 161, -289, -289, -289, 423, -293, -294, 142,
	139, 399, 399, 399, 399, 32, -257, -257, -257, 423,
	142, -234, 422, 423, -282, -320, -231, 2, -316, -185,
	-350, -282, -282, -234, -288, -316, -316, -251, 379, 241,
	190, -316, -310, 423, -396, -346, -312, -311, -346, -287,
	-286, 140, 227, 423, -235, 2, -311, -311, -350, -183,
	-220, -312, 423, 424, -149, -189, -177, -184, -165, 229,
	-280, 157, -156, 229, -326, -184, 422, 422, 195, 195,
	-177, -184, 157, -177, 157, -184, -184, -402, 272, 237,
	-288, 208, 271, 230, -150, 283, -88, 399, 422, -191,
	283, -197, -345, -345, -246, 283, -190, -355, 393, 399,
	-174, -151, -88, 399, 422, -175, -152, 283, 399, -189,
	-134, 156, 236, 415, -350, -128, 5, 232, -128, 423,
	427, 167, -176, 167, -182, -166, -88, -189, 142, -355,
	-190, -355, -355, -355, -88, -189, 114, -189, 114, -158,
	110, -412, 405, -174, -223, -222, -288, -245, -275, 290,
	241, -221, -178, -177, 384, -183, -245, -230, 427, 142,
	405, 424, -221, -154, -154, -154, -154, -154, -73, 142,
	-136, 244, -135, -165, 5, -226, 23, -355, 423, -326,
	420, 421, 7, 7, 422, -346, -137, -226, 142, -41,
	393, 271, 92, 343, 256, 167, -347, -347, -277, 370,
	66, 272, -347, 343, 315, -73, -165, -271, -288, -314,
	-189, 428, -288, -288, -289, -289, 142, 422, -288, -299,
	28, 28, 423, -284, -288, 415, -350, 423, 423, -297,
	111, -288, 354, -350, 415, 423, 386, -413, -413, -413,
	5, 218, 153, 217, -260, 217, -260, -260, 7, -390,
	-180, 422, -165, 391, -222, 423, -341, -326, -288, -288,
	-288, -288, -288, -346, -288, -293, -288, -341, -326, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, 104, 229,
	236, -289, -294, -293, -288, -288, -326, 423, 423, 423,
	-234, -72, -242, 148, -323, 427, -242, -242, 423, -251,
	422, -288, -316, 421, 423, 427, -311, 421, 427, 430,
	405, -312, 423, 424, -220, -310, -350, 359, 359, 114,
	229, 381, -365, -362, -288, -225, -315, -177, -377, 422,
	-165, -373, -374, -172, 422, 422, -147, 107, 318, -265,
	114, -154, 114, -154, 397, 422, 422, 359, -263, 73,
	-291, -172, -234, 359, 359, 257, -291, -291, -234, 359,
	-291, 117, -137, 142, 342, -208, 170, -281, -166, 422,
	-176, 422, 422, -220, -189, -323, -247, -161, -264, 379,
	-175, 422, -175, -159, 200, -412, -353, -378, -268, -266,
	-245, -237, 230, 72, 423, 427, 424, -282, -239, -231,
	-288, 2, 423, -88, 427, 422, 405, 405, 243, -138,
	-138, 7, 421, 423, -346, 423, -226, 244, -186, -174,
	-189, -187, -201, -189, 242, 423, -148, -175, 28, 28,
	-288, -299, 423, -288, -288, 421, -288, 424, 5, -288,
	423, 423, 423, 423, -391, -165, -288, 423, 423, 423,
	427, 427, 423, 423, 423, 423, 423, -294, 142, 104,
	236, 422, 423, 423, -296, 150, 46, -316, -296, -296,
	-226, -285, -346, -286, -175, 420, -311, -312, -350, 424,
	-177, -184, -280, 114, -366, 73, -367, 60, 126, 78,
	229, 232, 372, 267, 57, 98, 276, 32, 423, 423,
	427, -173, 60, -173, -288, 422, -225, -226, 229, 337,
	98, 229, 98, 91, 367, -177, -184, -226, -226, -189,
	-177, -184, 422, 423, -191, -190, -355, 423, -175, 71,
	-356, 355, -209, -210, 161, 422, -225, 422, -226, -206,
	32, -137, 422, 144, 241, -225, 241, -160, 199, -412,
	-353, -157, -245, -274, 422, 241, -88, -178, 2, -223,
	405, -135, -136, -355, -355, 91, 91, 421, 423, -42,
	-43, 167, 73, 259, -212, -211, 256, 236, -148, -288,
	-288, 423, -350, 415, -413, -385, 256, 423, -288, -288,
	-289, 142, 422, -299, -386, 392, -288, -234, -386, -386,
	423, -312, -346, -311, -280, -184, -188, -181, -165, 126,
	157, 232, 195, 422, -289, -189, 422, 2, -279, -407,
	77, 338, -315, -148, -188, -148, 423, -234, 423, 423,
	232, 232, -288, -326, -154, -154, 423, 423, 359, 359,
	-234, 359, 359, 399, -291, 254, -225, 423, -225, 423,
	423, -88, -225, -189, 423, -189, -412, -353, -158, 105,
	-226, 73, -268, -295, 423, 422, 422, 427, 24, 422,
	24, 422, -187, 343, 423, -223, 46, 423, 423, -289,
	-299, 423, -387, -388, -180, -311, 421, -367, -181, 229,
	-288, -167, 422, -288, -208, 422, -173, -413, 276, -405,
	60, 422, 422, -177, -184, -413, 422, 422, -291, -189,
	423, -279, 423, -208, 423, -264, 422, -353, -159, 374,
	230, 423, -184, -245, -356, -356, -43, -226, -226, -189,
	-392, 271, 298, -234, 423, 427, 32, 114, 423, -368,
	214, -165, 423, -209, -226, -148, 423, -189, -406, 379,
	-188, -214, -213, -211, -216, -215, -211, 423, -234, -234,
	422, -208, -279, -209, -279, 422, -225, -160, 318, -282,
	423, 423, 423, 423, 423, -393, -394, 38, 369, 82,
	-288, -393, -388, -390, 126, -369, -372, -371, 241, 143,
	255, 323, 423, 337, 389, 423, -220, -288, 423, 427,
	384, 423, 427, 384, 423, 423, -226, -209, -208, -208,
	-225, 423, -238, -137, -137, -394, 264, 138, 297, 264,
	138, -181, -371, 241, -372, 241, 374, 101, -368, -213,
	161, -215, 142, 423, -209, -209, 423, -282, 28, -370,
	226, 288, 51, 318, -370, -369, 422, 422, -155, 51,
	288, -279, -394, 21, 232, 98, -234, -234, -208, 423,
	423, -209, -209, 359, 422, -234, 423, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 188, 190, 192, 0, 0, 0, 215, 217, 219,
	220, -2, 0, 0, 0, 248, 249, 251, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 0, 858, -2, 0, 367, 369, 378, 380,
	382, 384, 385, 0, 447, 449, 451, 453, 455, 457,
	459, 461, 463, 464, 466, 468, 470, 472, 474, 476,
	478, 480, 482, 484, 486, 488, 490, 492, 494, 496,
	-2, 770, 772, 774, 776, -2, 62, 64, 66, 68,
	70, 72, 87, 223, 225, 227, 229, 232, 234, 236,
	895, 254, 256, 258, 260, 262, -2, 909, 0, 0,
	0, -2, 0, -2, -2, -2, 788, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 871, 873, 875,
	877, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1530, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1417, 1471, 1420, 1415,
	189, 191, 193, 194, 0, 0, 0, 0, 0, 0,
	673, 1456, 1469, 1470, 1471, 1474, 1475, 1476, 1530, 0,
	216, 218, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 346, 1622, 348, 350, 0,
	0, 0, 0, 242, 243, 244, 245, 246, 247, 250,
	252, 253, 0, 0, 0, 0, 0, 0, 0, 345,
	343, 1451, 287, 288, 0, 0, 328, 329, 330, 331,
	332, 333, 335, 292, 294, 296, 297, 299, 301, 303,
	305, 307, 309, 311, 313, 314, 316, 318, 319, 321,
	323, 324, 326, 733, 0, 0, 0, 0, 0, 171,
	0, 360, 354, 359, 361, 363, 364, 365, 366, 0,
	169, 0, 0, 606, 341, 339, 0, 162, 0, 0,
	767, 0, 360, 1498, 358, 768, 769, 0, 0, 763,
	764, 1651, 798, 368, 370, 379, 381, 383, 386, -2,
	-2, 1746, -2, 409, -2, 417, 1749, 1653, 420, 0,
	422, -2, 425, 448, 450, 452, 454, 456, 458, 460,
	462, 465, 467, 469, 471, 473, 475, 477, 479, 481,
	483, 485, 487, 489, 491, 493, 495, 497, 498, 0,
	0, 0, 0, 0, 502, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 501, 503,
	504, 505, 0, 549, 588, 589, 771, 773, 775, 0,
	714, 897, 63, 65, 67, 69, 71, 224, 226, 228,
	230, 233, 235, -2, 869, 870, 255, 257, 259, 261,
	263, -2, 0, 901, 901, 901, 0, 0, 870, 868,
	0, 371, 0, 373, 0, 502, 376, 377, 429, 430,
	1109, 0, 0, 0, 0, 0, 1234, 1187, -2, -2,
	1219, 1221, 1725, 1746, 0, 1223, 1224, 0, 1226, 1230,
	1231, 0, 1394, 1463, 1458, 1423, 1424, 1425, 1426, 0,
	0, 1429, 0, 1431, 1432, 1433, 1298, 1245, -2, -2,
	-2, 1467, 1023, 1024, 1025, 1026, 1027, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1758, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 0, 1714, 1731, 1732, 1737, 1739,
	1733, 1722, 1268, -2, -2, 1537, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1726, 1727, -2, 1729, -2, -2, 1738,
	-2, 1742, 1743, -2, -2, 1748, -2, -2, -2, 1752,
	1753, -2, 1485, 1076, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1771, 1772, 1773, 1774, 1775, 1776,
	800, 778, 791, 800, 780, 781, 782, 783, 784, 789,
	790, 793, 0, 785, 786, 787, 887, 1628, 890, 673,
	888, 872, 874, 0, 876, 0, 0, 0, 881, 904,
	902, 0, 940, 885, 886, 896, 955, 0, 0, 975,
	975, 966, 0, 997, 0, 1468, 0, 0, 0, 0,
	0, -2, 1471, 1758, 1769, 1770, 2, 79, 0, 1731,
	997, 81, 0, 1731, 84, 0, 1731, 0, -2, 88,
	0, 1731, 172, 173, 1481, 1482, 1486, 1487, 1488, 1489,
	91, 0, 1447, 99, 0, 1731, 1414, 0, 1444, 1490,
	1491, 1492, 1493, 1494, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 0, 1441, 0, 0, 598,
	1411, 1416, 599, 1421, 0, 195, 196, 197, 198, 199,
	1731, 201, 202, 0, 204, 205, 1731, 207, 208, 0,
	210, 0, 0, 0, 0, 0, 231, 673, 1731, 0,
	238, 1452, 0, 697, 1731, 695, 1455, -2, 1731, 717,
	720, 1731, 722, 673, 724, 1454, -2, 1478, 894, 1731,
	814, 347, 349, 0, 241, 0, 827, 0, 829, 0,
	848, 1003, 153, 1731, 266, 285, 153, 1731, 269, 153,
	1731, 272, 153, 1731, 275, 1409, 153, 1731, 278, 279,
	1731, 281, 174, 282, 1731, 284, 342, 0, 0, -2,
	336, 1457, -2, 0, 334, 293, 295, 298, 300, 302,
	304, 306, 308, 310, 312, 315, 317, 320, 322, 325,
	327, -2, 0, 163, 164, 165, 166, 0, 0, 0,
	0, 604, 605, 0, 0, 0, 765, 766, 0, 0,
	0, 390, 0, 0, 0, 0, 797, 387, 0, 406,
	0, 408, 1721, -2, -2, 412, 801, 805, 806, 807,
	0, 0, 0, 0, 419, 0, 0, 0, 423, 426,
	0, 499, 500, 0, 0, 510, 511, 512, 513, 514,
	0, 517, 538, 553, 0, 0, 521, 523, 603, 525,
	0, 0, 527, 0, 529, 0, 531, 0, 533, 0,
	535, 537, 539, 554, 541, 0, 0, 0, 552, 0,
	558, 0, 561, 562, 563, 0, 565, 566, 567, 0,
	0, 0, 575, 577, 0, 587, 0, 506, 507, 153,
	1001, -2, 0, 864, 918, 919, 0, 0, 0, 0,
	899, 900, 0, 0, 0, 860, 861, 372, 0, 375,
	0, 0, 0, 0, 1329, 1330, 1331, 1332, 1333, 1334,
	1337, 1338, 1335, 1336, 1339, 1340, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 1343, 1344, 0, 0, 1346, 0,
	1348, 0, 0, 0, 0, 0, 0, 1166, 1168, 1402,
	0, 0, 1345, 1114, 1115, 1116, 1151, 1152, 0, 1220,
	1399, 1398, 1222, 0, 1351, -2, 1352, 1234, 0, 0,
	1225, 1438, 1232, 1233, 1351, 0, 1393, 0, 0, 1428,
	0, 1106, 1300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 1074,
	1081, 1078, 1077, 1062, 0, 1061, 0, 0, 1059, 0,
	0, 0, 1063, 0, 1374, -2, 0, 0, 0, 0,
	0, 0, 777, -2, 779, 0, 795, 0, 889, 0,
	0, 944, 1403, 1407, 1408, 944, 944, 0, 0, 1352,
	0, 0, 0, 0, 994, 994, 994, 992, 969, 0,
	975, 0, -2, 0, 975, 975, 0, 985, 0, 985,
	-2, 966, 0, 0, 998, 999, 0, 0, 100, 760,
	119, 0, 760, 760, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 115, 107, 108, 0, 0, 85, 698,
	0, 701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 117,
	0, 142, 144, 0, 0, 0, 0, 988, 597, 0,
	0, 1472, 1419, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 1458, 1459, 612, 0, 0, 0, 0, 693,
	696, 0, 715, 0, 893, 0, 0, 0, 0, 1731,
	729, 1443, 1477, 0, 1731, 816, 0, 1007, 0, 830,
	0, 0, 1004, 0, 264, 0, 151, 152, 0, 267,
	0, 270, 0, 273, 0, 0, 276, 0, 0, 0,
	0, 0, 896, 0, 0, 186, 0, 352, 362, 0,
	0, 896, 0, 1354, 1015, 1018, 1019, 1020, 1106, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1082, 1076, 1092, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1072, 0, 1047, 1047, 1047, 1064, 1065, 1083, 1084, 1086,
	1088, 1090, 1016, 1017, 1082, 1082, 1079, 1080, 186, 0,
	356, 0, 988, 392, 988, 394, 0, 583, 0, 0,
	0, 0, -2, 414, 0, 803, 0, 808, 438, 439,
	440, 810, 811, 418, 441, 442, 443, 444, 445, 446,
	0, 690, 0, 692, 1434, 0, 415, 431, 416, 421,
	0, 427, 0, 0, 515, 516, 518, 519, 520, 524,
	0, 591, 1643, 601, 526, 528, 530, 532, 534, 896,
	543, 0, 545, 896, 556, 559, 564, 568, 569, 570,
	571, 572, 573, 0, 0, 0, 713, 0, 867, 916,
	917, 922, 926, 927, 930, 933, 934, 924, 1109, 882,
	883, 884, 910, 911, 743, 0, 0, 374, 1110, 1011,
	1012, 1066, 1067, 1068, 1069, 1070, 1111, 1112, 1440, 0,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	-2, -2, -2, -2, -2, -2, -2, -2, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, -2,
	-2, -2, 1149, 1150, -2, 1347, 1349, 0, 1402, 0,
	-2, 0, -2, -2, -2, -2, 1163, 0, 1165, 1170,
	1172, 1174, 0, 0, 0, 0, 1401, 1184, 1385, 0,
	0, 1326, 1327, 1328, 1169, 0, 0, 1400, 1397, 0,
	0, 1350, 1229, 0, 0, 0, 0, 1358, 1392, 1388,
	0, 1460, 1466, 1236, 907, 0, 0, 0, 0, 1243,
	0, 1439, 1093, 1094, 1095, 1096, 1097, 1098, 1107, 1308,
	0, 0, 0, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1280, 0, 1361, -2, -2, -2, -2,
	-2, -2, -2, 0, 1282, 0, 0, 1294, 0, 1296,
	0, 1284, 1352, 1371, 0, 0, 1190, 0, 0, 0,
	1234, 0, 1287, 1352, 1379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1352, 0, 1384, 794, 891, 0,
	0, 1007, 0, 0, 0, 1406, 1007, 1007, 0, 939,
	0, 0, 0, 0, 0, 0, 989, 993, 990, 991,
	0, 0, 975, 985, 952, 0, 0, 1442, 0, 960,
	-2, 985, 985, 0, 962, 984, 0, 673, 974, 964,
	-2, 0, -2, 0, 0, 0, 0, 759, 121, 1731,
	0, 155, 0, 0, 663, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 699, 700, 702, 708, 710,
	0, 704, 1437, 0, 705, 0, 707, 709, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 1413, 0, 0, 177, 987, 0,
	1412, 1422, 0, 200, 203, 206, 209, 187, 672, 0,
	0, 0, 0, 611, -2, 613, 615, 616, 617, 618,
	1575, 1478, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 824, 0,
	909, 0, 846, 832, 0, 0, 0, 846, 850, 851,
	853, 854, 0, 0, 1005, 286, 153, 153, 153, 1410,
	153, 153, 175, 280, 283, 344, 289, 337, 896, 0,
	0, 0, 0, 0, 0, 338, 0, 0, 0, 340,
	0, 1008, 1010, 0, 1021, 0, 1074, 0, 160, 186,
	0, 0, 391, 396, 0, 584, 0, 0, 407, 0,
	802, 809, 0, 435, 0, 437, 691, 1436, 1435, 0,
	428, 508, 0, 602, 600, 542, 546, 896, 548, 0,
	585, 586, 590, 1002, 0, 928, 0, 925, 931, 932,
	0, 913, 741, 742, 0, 0, 0, -2, -2, 0,
	0, 0, 1185, -2, 1164, 1167, 1171, 1173, 1175, 0,
	0, 0, 0, 0, 0, 0, 1186, 1395, 1398, 1324,
	0, 0, 1353, 1356, 1357, 0, 0, 1389, 0, 0,
	0, 0, 0, 906, 907, 907, 907, 1242, 0, 0,
	0, 0, 0, 0, 1244, 0, 0, 0, 0, 0,
	0, 0, 0, 1263, 0, 0, 0, 1267, 1045, 0,
	1279, 0, 1281, 1071, 1293, 1295, 1283, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1193, 1194, 1195, 1286, 1377, 1378, 0,
	0, 1085, 1087, 1089, 1091, 0, 0, 0, 0, 1292,
	0, 1383, 896, 941, 936, 1404, 988, 943, 945, 1405,
	1445, 936, 936, 0, 1353, 977, 0, 979, 0, 0,
	0, 981, 0, 970, 0, 972, 985, 957, 0, 0,
	950, 0, 949, 975, 0, 961, 963, 965, 1460, 673,
	983, 0, 1000, 0, 120, 747, 0, 0, 1446, 0,
	123, 1731, 132, 0, 640, 0, 0, 0, 0, 0,
	762, 133, 1731, 153, 1731, 153, 134, 137, 0, 141,
	139, 0, 0, 631, 101, 760, 104, 0, 0, 753,
	0, 703, 706, 712, 86, 0, 755, 745, 0, 0,
	744, 143, 105, 0, 0, 757, 103, 0, 0, 0,
	186, 0, 0, 1418, 1473, 211, 213, 214, 212, 620,
	0, 1478, 0, 1478, 0, 1450, 609, 673, 0, 988,
	697, 718, -2, 721, 723, 731, 0, 0, 0, 820,
	824, 0, 823, 894, 921, 908, 1006, 825, 846, 0,
	0, 0, 835, 837, 834, 831, 828, 1007, 0, 0,
	0, 0, 0, 265, 268, 271, 274, 277, 290, 0,
	184, 1609, 182, 179, 181, 351, 0, 0, 0, 1355,
	0, 1013, 0, 0, 0, 0, 161, 355, 0, 393,
	0, 0, 0, 0, 0, 0, 404, 405, -2, 433,
	434, 436, 432, 0, 544, 547, 555, 0, 0, 912,
	743, 0, 1113, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1386, 0, 1397, 1227, 1228, 1235, 1325, 1359,
	1387, 1391, 0, 1461, 1465, 1237, 0, 0, 0, 0,
	1430, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 0, 1306,
	1307, 1311, 1453, 0, 0, 1248, 0, 0, 0, 0,
	0, 0, 0, 0, 1360, 1370, 1372, 1191, 1192, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, -2,
	-2, -2, 1209, 1210, 1211, -2, -2, -2, 0, 0,
	0, 1373, 1375, 1376, 1380, 1381, 0, 1289, 1290, 1291,
	1382, 0, 938, 0, 942, 0, 938, 938, 903, 978,
	0, 996, 980, 955, 971, 0, 968, 953, 0, 954,
	0, 985, 975, 0, 982, 967, -2, 0, 0, 0,
	0, 154, 638, 662, 0, 0, 734, 740, 740, 0,
	1448, 1246, 1247, 0, 0, 0, 125, 0, 0, 0,
	0, 130, 0, 136, 140, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 0, 0, 111, 114, 0, 0,
	110, 0, 158, 0, 0, 628, 0, 614, 0, 0,
	0, 0, 612, 0, 237, 186, 694, 716, 0, 0,
	0, 0, 0, 822, 824, 0, 815, 816, 846, 920,
	826, 844, 845, 843, 0, 0, 0, 909, 852, 849,
	855, 856, 0, 170, 0, 0, 0, 0, 353, 0,
	0, 0, 1014, 1022, 0, 1075, 357, 0, 578, 579,
	626, 0, 582, 509, 923, 929, 914, 743, 0, 0,
	-2, 0, 1178, -2, -2, 1396, 1390, 0, 1427, 907,
	1238, 1240, 1241, 1108, 1313, 1310, 0, 1297, 1258, 1259,
	0, 0, 1262, 1264, 1265, 1266, 1046, 1369, 0, 0,
	0, 0, 1288, 892, 1302, 0, 0, 946, 1302, 1302,
	0, 975, 973, 951, 947, 0, 958, 985, 1461, 0,
	749, 751, 122, 0, 639, 0, 642, 0, 0, 0,
	0, 649, 650, 0, 0, 0, 0, 0, 664, 671,
	0, 743, 0, 743, 0, 0, 0, 0, 0, 127,
	146, 0, 0, 761, 0, 153, 153, 0, 0, 748,
	0, 0, 0, 0, 754, 756, 746, 0, 758, 0,
	176, 0, 607, 627, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 730, 0, 0, 0, 812, 824, 0,
	817, 818, 240, 0, 0, 0, 833, 836, 838, 921,
	0, 183, 0, 178, 180, 0, 0, 1009, 1073, 395,
	397, 0, 0, 403, 580, 625, 0, 0, 915, -2,
	-2, 1179, 1462, 1464, 0, 909, 0, 1299, 0, 0,
	-2, 0, 0, 0, 878, 0, 937, 935, 879, 880,
	995, 985, 0, 959, 124, 0, 643, 644, 1449, 646,
	0, 648, 651, 0, 653, 1480, 0, 657, 620, 0,
	668, 669, 735, 736, 739, 737, 740, 907, 666, 0,
	126, 128, 145, 148, 129, 135, 0, 0, 0, 0,
	907, 0, 0, 0, 986, 0, 0, 671, 0, 661,
	620, 610, 0, 731, 727, 0, 0, 819, 820, 0,
	0, 0, 846, 857, 185, 0, 0, 0, 399, 0,
	401, 0, 624, 0, 1239, 1316, 0, 1260, 1261, -2,
	0, 1217, 1301, 1303, 0, 956, 948, 641, 645, 0,
	0, 677, 0, 0, 628, 0, 743, 0, 0, 150,
	0, 0, 0, 750, 752, 0, 0, 0, 113, 0,
	660, 620, 671, 628, 671, 0, 0, 821, 822, 0,
	840, 1007, 842, 847, 0, 0, 398, 0, 0, 581,
	0, 0, 0, 1312, 1218, 0, 0, 0, 652, 682,
	0, 0, 0, 665, 0, 738, 1237, 673, 131, 0,
	147, 0, 632, 0, 0, 635, 0, 0, 0, 0,
	0, 628, 620, 608, 620, 0, 0, 813, 0, 841,
	186, 186, 400, 402, 1309, 1314, 1317, -2, 1697, 1527,
	0, 1315, 1304, 1305, 0, 654, 678, 679, 0, 674,
	675, 676, 1479, 655, 656, 670, 677, 149, 629, 0,
	0, 630, 0, 0, 116, 118, 0, 658, 628, 628,
	0, 728, 1007, 167, 168, 0, 1319, 1320, 1321, 1322,
	1323, 647, 680, 0, 681, 0, 0, 0, 682, 633,
	0, 636, 0, 623, 659, 725, 671, 839, 0, 683,
	0, 686, 687, 0, 684, 667, 0, 0, 619, 621,
	622, 620, 1318, 685, 688, 689, 0, 0, 628, 628,
	0, 726, 634, 0, 0, 0, 628, 637,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1012
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1024
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1033
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1058
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1156
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1160
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1212
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1222
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1226
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1244
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1255
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1262
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1272
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1292
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1305
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1327
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1331
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1337
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1348
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1382
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1408
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1427
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1437
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1508
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.str = ""
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1512
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1513
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1522
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1526
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1532
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1536
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1541
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1542
		{
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1569
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1599
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.str = "CSV"
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1607
		{
			sqlVAL.str = "MYSQLOUTFILE"
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1611
		{
			sqlVAL.str = "MYSQLDUMP"
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1615
		{
			sqlVAL.str = "PGCOPY"
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1650
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1653
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1673
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1677
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1681
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1687
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1725
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1742
		{
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1758
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1759
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1760
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1761
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1771
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1784
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1794
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1811
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1817
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1820
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1830
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1839
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1847
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1853
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1856
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1860
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1865
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1872
		{
			sqlVAL.str = ""
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1881
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1889
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1890
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1906
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1917
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[6].union.expr(),
				AsOf:    sqlDollar[7].union.asOfClause(),
				Options: sqlDollar[8].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1949
		{
			return helpWith(sqllex, "DELETE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1980
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1989
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1996
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2008
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2019
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2026
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2042
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2049
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2057
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2065
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2072
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2102
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2106
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2134
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "DELETE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "INSERT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2163
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2165
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2169
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2171
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2181
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2185
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2214
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2230
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2240
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2258
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2262
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2265
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2293
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2296
		{
			return helpWith(sqllex, "GRANT")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2324
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2327
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2332
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2336
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2365
		{
			return helpWith(sqllex, "RESET")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2366
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2378
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2381
		{
			return helpWith(sqllex, "RESET")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "USE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2411
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2412
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2413
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2414
		{
			return helpWith(sqllex, "USE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2415
		{
			return unimplemented(sqllex, "set local")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2431
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2446
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2449
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2475
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2479
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2483
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2499
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2515
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2533
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2539
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2559
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2584
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2589
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2603
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2619
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2626
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2632
		{
			return unimplemented(sqllex, "set from current")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2633
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2641
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2646
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2657
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2663
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2674
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2698
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2702
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2706
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2712
		{
			sqlVAL.union.val = tree.Low
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = tree.Normal
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2720
		{
			sqlVAL.union.val = tree.High
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2739
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2748
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2781
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SHOW")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2794
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2806
		{
			sqlVAL.str = "client_encoding"
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.str = "timezone"
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2842
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2850
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2858
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2861
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2871
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2880
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2894
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2902
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2905
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2939
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2990
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2993
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3008
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3011
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3017
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3021
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3027
		{
			sqlVAL.union.val = true
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3028
		{
			sqlVAL.union.val = false
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3073
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3087
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3097
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3109
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3119
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3123
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3131
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3142
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3152
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3155
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3166
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3181
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3186
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3198
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3218
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3230
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3234
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3245
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3252
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3257
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3377
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3381
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3385
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3424
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3428
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3433
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3437
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3446
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3453
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3457
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3478
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3481
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3543
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3568
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3574
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3584
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3590
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3596
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3604
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3611
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3616
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3621
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3627
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.str = ""
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3641
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3654
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3661
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3667
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3677
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3708
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3729
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3733
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3737
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3741
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3745
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3749
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3771
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3803
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3807
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3811
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3828
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3850
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3862
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3867
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3890
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3924
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3928
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3934
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3943
		{
			return unimplemented(sqllex, "match full")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3944
		{
			return unimplemented(sqllex, "match partial")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3945
		{
			return unimplemented(sqllex, "match simple")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3946
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3953
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3957
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3961
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3965
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3969
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3975
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3981
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3997
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4001
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4011
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4019
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4037
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4045
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4053
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4060
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4064
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4067
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4068
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4069
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4072
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4074
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4076
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4079
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4082
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4084
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4093
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4096
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4104
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4108
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4111
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4115
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = nil
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4133
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4136
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4151
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4196
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4205
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4214
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4219
		{
			sqlVAL.union.val = true
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4223
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4229
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4233
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4243
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4252
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4255
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4256
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4259
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4260
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = tree.Descending
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4272
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 744:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4303
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4307
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4311
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4313
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4317
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4321
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4356
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4368
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4390
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4398
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4401
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4406
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4407
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4423
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4428
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4431
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4444
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4453
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4458
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4459
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4460
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4468
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4478
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4479
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4483
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4487
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.str = ""
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4501
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4505
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4511
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4515
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4521
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4525
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4538
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4540
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4548
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4552
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4558
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4564
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4570
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4574
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4594
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4604
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4608
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.str = ""
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4618
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4628
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4638
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4647
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4648
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4667
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4674
		{
			return helpWith(sqllex, "INSERT")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4685
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4692
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4696
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4704
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4714
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4718
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4748
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4752
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4756
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4762
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4766
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4774
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 847:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4800
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4811
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4815
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4816
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4820
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4837
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4840
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4844
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4893
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4897
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4920
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4928
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4939
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4974
		{
			return helpWith(sqllex, "SELECT")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4975
		{
			return helpWith(sqllex, "VALUES")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4976
		{
			return helpWith(sqllex, "TABLE")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4998
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5011
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5025
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5037
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5041
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5050
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5059
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5081
		{
			return helpWith(sqllex, "TABLE")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5093
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5096
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5097
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5101
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5111
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5119
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5120
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5124
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5127
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5130
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5131
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5135
		{
			sqlVAL.union.val = true
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5139
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5149
		{
			sqlVAL.union.val = true
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5160
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5161
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5165
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5173
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5179
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5185
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5199
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5203
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5212
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5221
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5232
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5236
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5245
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5251
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5258
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5274
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5288
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5289
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5292
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5293
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5310
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5324
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5343
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5346
		{
			return helpWith(sqllex, "VALUES")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5348
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5363
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5365
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5371
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5381
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5385
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5391
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5397
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5402
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5425
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5433
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5437
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5464
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5478
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5482
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5485
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5486
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5487
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5492
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5494
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5497
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5499
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5528
		{
			sqlVAL.union.val = nil
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5530
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5534
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5544
		{
			sqlVAL.union.val = true
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5548
		{
			sqlVAL.union.val = false
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5568
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5588
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5605
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5611
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5618
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5642
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5643
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5654
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5663
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5665
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5687
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5717
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5731
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5740
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5755
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5764
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5773
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5781
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5790
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5820
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5824
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5828
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5832
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5836
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5844
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5848
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5856
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5868
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5892
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5896
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5900
		{
			sqlVAL.union.val = nil
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5923
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5927
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5931
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5935
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5939
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5943
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5947
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5951
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6015
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6019
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6035
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6064
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6087
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6088
		{
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6093
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6097
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6101
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6105
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6109
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6117
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6121
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.Year
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6140
		{
			sqlVAL.union.val = tree.Month
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6144
		{
			sqlVAL.union.val = tree.Day
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = tree.Month
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = nil
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.Second
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6199
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6234
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6243
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6299
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6303
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6323
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6355
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6359
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6383
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6387
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6439
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6462
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6528
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6648
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6652
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6656
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6660
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6672
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6676
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6734
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6739
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6774
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6778
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6783
		{
			t := sqlDollar[2].union.tuple()
			t.Labels = sqlDollar[4].union.nameList()
			sqlVAL.union.val = &t
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6801
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6802
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6804
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6815
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6826
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6842
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6843
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6847
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6849
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6853
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6867
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6871
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6893
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6897
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6935
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6940
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6945
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6955
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6960
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6965
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6970
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6979
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6980
		{
			return unimplemented(sqllex, "treat")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7006
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7011
		{
			return unimplemented(sqllex, "within group")
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7012
		{
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7047
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7055
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.str = ""
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7109
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7110
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7111
		{
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7114
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7115
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7121
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7122
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7123
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7124
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7125
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7140
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = tree.Any
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = tree.Some
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.All
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7160
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7161
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = tree.Div
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7165
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7169
		{
			sqlVAL.union.val = tree.LT
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.GT
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7171
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = tree.LE
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7173
		{
			sqlVAL.union.val = tree.GE
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = tree.NE
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Like
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7179
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7180
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7193
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7229
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7233
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7279
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7307
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7329
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7421
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7436
		{
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7437
		{
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7441
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7445
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7476
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7503
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7545
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7568
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7571
		{
			return unimplemented(sqllex, "func const")
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7580
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7582
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7590
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7597
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7610
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7621
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7631
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7795
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7805
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7823
		{
			sqlVAL.str = ""
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7829
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7833
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
