// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8827

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 956,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 793,
	193, 793,
	207, 228,
	279, 228,
	287, 649,
	314, 228,
	323, 649,
	360, 649,
	384, 228,
	407, 649,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 956,
	182, 956,
	393, 956,
	394, 956,
	-2, 0,
	-1, 88,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 917,
	-1, 116,
	123, 575,
	206, 575,
	377, 575,
	-2, 0,
	-1, 117,
	4, 958,
	21, 958,
	22, 958,
	23, 958,
	24, 958,
	25, 958,
	27, 958,
	32, 958,
	37, 958,
	38, 958,
	39, 958,
	40, 958,
	41, 958,
	42, 958,
	43, 958,
	44, 958,
	45, 958,
	46, 958,
	48, 958,
	49, 958,
	50, 958,
	51, 958,
	52, 958,
	53, 958,
	56, 958,
	57, 958,
	58, 958,
	59, 958,
	61, 958,
	62, 958,
	66, 958,
	67, 958,
	68, 958,
	69, 958,
	70, 958,
	72, 958,
	73, 958,
	74, 958,
	75, 958,
	77, 958,
	79, 958,
	80, 958,
	81, 958,
	84, 958,
	85, 958,
	93, 958,
	94, 958,
	95, 958,
	96, 958,
	97, 958,
	98, 958,
	99, 958,
	100, 958,
	102, 958,
	104, 958,
	105, 958,
	107, 958,
	110, 958,
	111, 958,
	112, 958,
	114, 958,
	116, 958,
	117, 958,
	119, 958,
	120, 958,
	121, 958,
	122, 958,
	123, 958,
	124, 958,
	125, 958,
	126, 958,
	127, 958,
	128, 958,
	129, 958,
	131, 958,
	137, 958,
	138, 958,
	139, 958,
	140, 958,
	141, 958,
	142, 958,
	144, 958,
	146, 958,
	150, 958,
	151, 958,
	153, 958,
	154, 958,
	156, 958,
	157, 958,
	159, 958,
	160, 958,
	161, 958,
	162, 958,
	163, 958,
	164, 958,
	165, 958,
	166, 958,
	167, 958,
	168, 958,
	171, 958,
	172, 958,
	176, 958,
	177, 958,
	178, 958,
	179, 958,
	182, 958,
	183, 958,
	184, 958,
	185, 958,
	186, 958,
	187, 958,
	188, 958,
	189, 958,
	191, 958,
	193, 958,
	196, 958,
	197, 958,
	198, 958,
	200, 958,
	201, 958,
	204, 958,
	205, 958,
	206, 958,
	207, 958,
	209, 958,
	210, 958,
	212, 958,
	213, 958,
	215, 958,
	216, 958,
	219, 958,
	220, 958,
	223, 958,
	225, 958,
	226, 958,
	227, 958,
	228, 958,
	229, 958,
	230, 958,
	231, 958,
	232, 958,
	233, 958,
	235, 958,
	236, 958,
	237, 958,
	238, 958,
	240, 958,
	243, 958,
	244, 958,
	245, 958,
	246, 958,
	248, 958,
	249, 958,
	250, 958,
	252, 958,
	253, 958,
	254, 958,
	257, 958,
	258, 958,
	260, 958,
	262, 958,
	263, 958,
	264, 958,
	265, 958,
	266, 958,
	267, 958,
	268, 958,
	269, 958,
	270, 958,
	272, 958,
	273, 958,
	274, 958,
	275, 958,
	276, 958,
	278, 958,
	280, 958,
	281, 958,
	282, 958,
	283, 958,
	284, 958,
	285, 958,
	286, 958,
	287, 958,
	288, 958,
	290, 958,
	291, 958,
	292, 958,
	293, 958,
	294, 958,
	296, 958,
	297, 958,
	298, 958,
	299, 958,
	300, 958,
	301, 958,
	302, 958,
	303, 958,
	305, 958,
	307, 958,
	308, 958,
	309, 958,
	310, 958,
	311, 958,
	312, 958,
	314, 958,
	315, 958,
	316, 958,
	317, 958,
	318, 958,
	319, 958,
	320, 958,
	321, 958,
	323, 958,
	324, 958,
	325, 958,
	326, 958,
	327, 958,
	328, 958,
	329, 958,
	330, 958,
	331, 958,
	332, 958,
	334, 958,
	335, 958,
	336, 958,
	337, 958,
	339, 958,
	340, 958,
	341, 958,
	342, 958,
	344, 958,
	345, 958,
	346, 958,
	347, 958,
	348, 958,
	349, 958,
	350, 958,
	351, 958,
	352, 958,
	353, 958,
	354, 958,
	355, 958,
	357, 958,
	358, 958,
	359, 958,
	361, 958,
	362, 958,
	363, 958,
	364, 958,
	365, 958,
	366, 958,
	367, 958,
	368, 958,
	369, 958,
	371, 958,
	372, 958,
	373, 958,
	374, 958,
	377, 958,
	378, 958,
	379, 958,
	380, 958,
	381, 958,
	383, 958,
	384, 958,
	385, 958,
	387, 958,
	388, 958,
	391, 958,
	392, 958,
	393, 958,
	394, 958,
	395, 958,
	397, 958,
	399, 958,
	400, 958,
	401, 958,
	402, 958,
	403, 958,
	404, 958,
	405, 958,
	407, 958,
	408, 958,
	409, 958,
	414, 958,
	415, 958,
	416, 958,
	417, 958,
	418, 958,
	419, 958,
	-2, 0,
	-1, 118,
	1, 850,
	196, 850,
	278, 850,
	285, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 120,
	1, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 121,
	1, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 122,
	1, 854,
	445, 854,
	446, 854,
	-2, 0,
	-1, 146,
	118, 929,
	132, 929,
	190, 929,
	218, 929,
	247, 929,
	256, 929,
	389, 929,
	-2, 926,
	-1, 176,
	4, 965,
	5, 965,
	6, 965,
	7, 965,
	8, 965,
	9, 965,
	10, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	32, 965,
	33, 965,
	37, 965,
	38, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	46, 965,
	48, 965,
	49, 965,
	50, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	56, 965,
	57, 965,
	58, 965,
	59, 965,
	61, 965,
	62, 965,
	64, 965,
	66, 965,
	67, 965,
	68, 965,
	69, 965,
	70, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	77, 965,
	79, 965,
	80, 965,
	81, 965,
	83, 965,
	84, 965,
	85, 965,
	86, 965,
	87, 965,
	88, 965,
	89, 965,
	90, 965,
	91, 965,
	92, 965,
	93, 965,
	94, 965,
	95, 965,
	96, 965,
	97, 965,
	98, 965,
	99, 965,
	100, 965,
	101, 965,
	102, 965,
	104, 965,
	105, 965,
	107, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	116, 965,
	117, 965,
	119, 965,
	120, 965,
	121, 965,
	122, 965,
	123, 965,
	124, 965,
	125, 965,
	126, 965,
	127, 965,
	128, 965,
	129, 965,
	130, 965,
	131, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	144, 965,
	146, 965,
	149, 965,
	150, 965,
	151, 965,
	153, 965,
	154, 965,
	156, 965,
	157, 965,
	159, 965,
	160, 965,
	161, 965,
	162, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	169, 965,
	171, 965,
	172, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	185, 965,
	186, 965,
	187, 965,
	188, 965,
	189, 965,
	191, 965,
	193, 965,
	194, 965,
	195, 965,
	196, 965,
	197, 965,
	198, 965,
	199, 965,
	200, 965,
	201, 965,
	204, 965,
	205, 965,
	206, 965,
	207, 965,
	209, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	215, 965,
	216, 965,
	217, 965,
	219, 965,
	220, 965,
	223, 965,
	225, 965,
	226, 965,
	227, 965,
	228, 965,
	229, 965,
	230, 965,
	231, 965,
	232, 965,
	233, 965,
	234, 965,
	235, 965,
	236, 965,
	237, 965,
	238, 965,
	239, 965,
	240, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	245, 965,
	246, 965,
	248, 965,
	249, 965,
	250, 965,
	253, 965,
	254, 965,
	257, 965,
	258, 965,
	259, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	265, 965,
	266, 965,
	267, 965,
	268, 965,
	269, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	278, 965,
	280, 965,
	281, 965,
	282, 965,
	283, 965,
	284, 965,
	285, 965,
	286, 965,
	287, 965,
	288, 965,
	290, 965,
	291, 965,
	292, 965,
	293, 965,
	294, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	314, 965,
	315, 965,
	316, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	327, 965,
	328, 965,
	329, 965,
	330, 965,
	331, 965,
	332, 965,
	333, 965,
	334, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	345, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	352, 965,
	353, 965,
	354, 965,
	355, 965,
	357, 965,
	358, 965,
	359, 965,
	361, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	368, 965,
	369, 965,
	371, 965,
	372, 965,
	373, 965,
	374, 965,
	377, 965,
	378, 965,
	379, 965,
	380, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	387, 965,
	388, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	394, 965,
	395, 965,
	396, 965,
	397, 965,
	399, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	407, 965,
	408, 965,
	409, 965,
	414, 965,
	415, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	428, 965,
	433, 965,
	434, 965,
	435, 965,
	442, 965,
	448, 965,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 956,
	-1, 536,
	148, 1619,
	375, 1619,
	425, 1619,
	444, 1619,
	-2, 0,
	-1, 537,
	148, 1695,
	375, 1695,
	425, 1695,
	444, 1695,
	-2, 0,
	-1, 538,
	148, 1609,
	375, 1609,
	425, 1609,
	444, 1609,
	-2, 0,
	-1, 540,
	148, 1775,
	375, 1775,
	425, 1775,
	444, 1775,
	-2, 0,
	-1, 542,
	148, 1804,
	375, 1804,
	425, 1804,
	444, 1804,
	-2, 0,
	-1, 549,
	148, 1701,
	375, 1701,
	425, 1701,
	444, 1701,
	-2, 450,
	-1, 566,
	444, 1569,
	447, 1569,
	-2, 618,
	-1, 567,
	444, 1571,
	447, 1571,
	-2, 619,
	-1, 568,
	444, 1570,
	447, 1570,
	-2, 620,
	-1, 569,
	447, 1518,
	-2, 621,
	-1, 713,
	1, 548,
	441, 548,
	443, 548,
	445, 548,
	446, 548,
	-2, 0,
	-1, 714,
	1, 617,
	145, 617,
	441, 617,
	443, 617,
	445, 617,
	446, 617,
	-2, 0,
	-1, 720,
	1, 562,
	441, 562,
	443, 562,
	445, 562,
	446, 562,
	-2, 0,
	-1, 722,
	1, 566,
	441, 566,
	443, 566,
	445, 566,
	446, 566,
	-2, 0,
	-1, 724,
	1, 576,
	441, 576,
	443, 576,
	445, 576,
	446, 576,
	-2, 0,
	-1, 725,
	1, 582,
	441, 582,
	443, 582,
	445, 582,
	446, 582,
	-2, 0,
	-1, 726,
	1, 585,
	441, 585,
	443, 585,
	445, 585,
	446, 585,
	-2, 0,
	-1, 730,
	1, 599,
	441, 599,
	443, 599,
	445, 599,
	446, 599,
	-2, 0,
	-1, 731,
	1, 601,
	441, 601,
	443, 601,
	445, 601,
	446, 601,
	-2, 0,
	-1, 774,
	132, 969,
	218, 969,
	247, 969,
	-2, 926,
	-1, 789,
	132, 968,
	218, 968,
	247, 968,
	-2, 926,
	-1, 811,
	442, 1891,
	444, 1891,
	-2, 1265,
	-1, 812,
	442, 1892,
	444, 1892,
	-2, 1266,
	-1, 815,
	444, 1568,
	-2, 458,
	-1, 844,
	442, 1560,
	-2, 1551,
	-1, 850,
	5, 1093,
	-2, 1600,
	-1, 851,
	5, 1094,
	-2, 1604,
	-1, 852,
	5, 1095,
	-2, 1603,
	-1, 853,
	5, 1096,
	-2, 1801,
	-1, 854,
	5, 1097,
	-2, 1703,
	-1, 855,
	5, 1098,
	-2, 1767,
	-1, 856,
	5, 1099,
	-2, 1769,
	-1, 857,
	5, 1100,
	-2, 1780,
	-1, 858,
	5, 1101,
	-2, 1770,
	-1, 859,
	5, 1102,
	-2, 1771,
	-1, 860,
	5, 1103,
	-2, 1599,
	-1, 861,
	5, 1104,
	-2, 1815,
	-1, 862,
	5, 1105,
	-2, 1670,
	-1, 863,
	5, 1106,
	-2, 1710,
	-1, 864,
	5, 1107,
	-2, 1712,
	-1, 865,
	5, 1108,
	-2, 1674,
	-1, 866,
	5, 1109,
	442, 1578,
	-2, 1569,
	-1, 867,
	5, 1162,
	442, 1162,
	-2, 1850,
	-1, 872,
	442, 1579,
	-2, 1570,
	-1, 874,
	5, 1113,
	-2, 1848,
	-1, 875,
	5, 1114,
	-2, 1849,
	-1, 876,
	5, 1115,
	-2, 1673,
	-1, 877,
	5, 1116,
	-2, 1861,
	-1, 878,
	5, 1117,
	-2, 1675,
	-1, 879,
	5, 1118,
	-2, 1676,
	-1, 880,
	5, 1119,
	-2, 1677,
	-1, 881,
	5, 1120,
	-2, 1830,
	-1, 882,
	5, 1121,
	-2, 1859,
	-1, 883,
	5, 1122,
	-2, 1654,
	-1, 884,
	5, 1123,
	-2, 1655,
	-1, 885,
	5, 1137,
	-2, 1842,
	-1, 887,
	5, 1112,
	-2, 1838,
	-1, 888,
	5, 1112,
	-2, 1837,
	-1, 889,
	5, 1112,
	-2, 1854,
	-1, 890,
	5, 1129,
	-2, 1832,
	-1, 891,
	5, 1130,
	-2, 1601,
	-1, 892,
	5, 1140,
	-2, 1831,
	-1, 893,
	5, 1142,
	-2, 1869,
	-1, 895,
	5, 1153,
	-2, 1629,
	-1, 896,
	5, 1154,
	-2, 1863,
	-1, 897,
	5, 1156,
	-2, 1864,
	-1, 898,
	5, 1158,
	-2, 1865,
	-1, 899,
	5, 1160,
	-2, 1802,
	-1, 900,
	5, 1080,
	-2, 1683,
	-1, 901,
	5, 1081,
	-2, 1684,
	-1, 902,
	444, 1566,
	-2, 1550,
	-1, 903,
	442, 1889,
	-2, 1567,
	-1, 923,
	5, 1148,
	-2, 1790,
	-1, 940,
	5, 1147,
	-2, 1870,
	-1, 950,
	5, 1149,
	408, 1149,
	-2, 1833,
	-1, 951,
	5, 1150,
	408, 1150,
	-2, 1834,
	-1, 987,
	442, 1578,
	-2, 1569,
	-1, 1016,
	148, 1804,
	375, 1804,
	425, 1804,
	444, 1804,
	-2, 0,
	-1, 1017,
	196, 862,
	278, 862,
	285, 862,
	-2, 438,
	-1, 1135,
	296, 1548,
	435, 1548,
	-2, 1547,
	-1, 1191,
	287, 649,
	407, 649,
	-2, 227,
	-1, 1211,
	268, 954,
	-2, 766,
	-1, 1220,
	251, 1573,
	-2, 0,
	-1, 1284,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 928,
	-1, 1287,
	4, 1868,
	11, 1868,
	12, 1868,
	14, 1868,
	15, 1868,
	16, 1868,
	17, 1868,
	18, 1868,
	19, 1868,
	21, 1868,
	22, 1868,
	23, 1868,
	24, 1868,
	25, 1868,
	27, 1868,
	30, 1868,
	32, 1868,
	34, 1868,
	37, 1868,
	38, 1868,
	39, 1868,
	40, 1868,
	41, 1868,
	42, 1868,
	43, 1868,
	44, 1868,
	45, 1868,
	46, 1868,
	48, 1868,
	49, 1868,
	50, 1868,
	51, 1868,
	52, 1868,
	53, 1868,
	56, 1868,
	57, 1868,
	58, 1868,
	59, 1868,
	61, 1868,
	62, 1868,
	63, 1868,
	66, 1868,
	67, 1868,
	68, 1868,
	69, 1868,
	70, 1868,
	71, 1868,
	72, 1868,
	73, 1868,
	74, 1868,
	75, 1868,
	77, 1868,
	78, 1868,
	79, 1868,
	80, 1868,
	81, 1868,
	83, 1868,
	84, 1868,
	85, 1868,
	93, 1868,
	94, 1868,
	95, 1868,
	96, 1868,
	97, 1868,
	98, 1868,
	99, 1868,
	100, 1868,
	102, 1868,
	104, 1868,
	105, 1868,
	107, 1868,
	110, 1868,
	111, 1868,
	112, 1868,
	114, 1868,
	116, 1868,
	117, 1868,
	119, 1868,
	120, 1868,
	121, 1868,
	122, 1868,
	123, 1868,
	124, 1868,
	125, 1868,
	126, 1868,
	127, 1868,
	128, 1868,
	129, 1868,
	133, 1868,
	134, 1868,
	135, 1868,
	136, 1868,
	137, 1868,
	138, 1868,
	139, 1868,
	140, 1868,
	141, 1868,
	142, 1868,
	143, 1868,
	144, 1868,
	146, 1868,
	149, 1868,
	150, 1868,
	151, 1868,
	153, 1868,
	154, 1868,
	156, 1868,
	157, 1868,
	159, 1868,
	160, 1868,
	161, 1868,
	162, 1868,
	163, 1868,
	164, 1868,
	165, 1868,
	166, 1868,
	167, 1868,
	168, 1868,
	169, 1868,
	170, 1868,
	171, 1868,
	172, 1868,
	173, 1868,
	174, 1868,
	175, 1868,
	177, 1868,
	178, 1868,
	179, 1868,
	181, 1868,
	182, 1868,
	183, 1868,
	184, 1868,
	185, 1868,
	186, 1868,
	187, 1868,
	188, 1868,
	189, 1868,
	191, 1868,
	193, 1868,
	194, 1868,
	195, 1868,
	196, 1868,
	197, 1868,
	198, 1868,
	199, 1868,
	200, 1868,
	201, 1868,
	202, 1868,
	203, 1868,
	204, 1868,
	205, 1868,
	206, 1868,
	207, 1868,
	209, 1868,
	210, 1868,
	212, 1868,
	213, 1868,
	214, 1868,
	215, 1868,
	216, 1868,
	217, 1868,
	219, 1868,
	220, 1868,
	223, 1868,
	224, 1868,
	225, 1868,
	226, 1868,
	229, 1868,
	230, 1868,
	231, 1868,
	232, 1868,
	233, 1868,
	234, 1868,
	235, 1868,
	236, 1868,
	237, 1868,
	238, 1868,
	241, 1868,
	243, 1868,
	244, 1868,
	245, 1868,
	246, 1868,
	248, 1868,
	249, 1868,
	250, 1868,
	253, 1868,
	254, 1868,
	255, 1868,
	257, 1868,
	258, 1868,
	260, 1868,
	262, 1868,
	263, 1868,
	264, 1868,
	265, 1868,
	266, 1868,
	267, 1868,
	268, 1868,
	269, 1868,
	270, 1868,
	272, 1868,
	273, 1868,
	274, 1868,
	275, 1868,
	276, 1868,
	278, 1868,
	280, 1868,
	281, 1868,
	282, 1868,
	283, 1868,
	284, 1868,
	285, 1868,
	286, 1868,
	287, 1868,
	288, 1868,
	290, 1868,
	291, 1868,
	292, 1868,
	293, 1868,
	294, 1868,
	295, 1868,
	296, 1868,
	297, 1868,
	298, 1868,
	299, 1868,
	300, 1868,
	301, 1868,
	302, 1868,
	303, 1868,
	305, 1868,
	306, 1868,
	307, 1868,
	308, 1868,
	309, 1868,
	310, 1868,
	311, 1868,
	312, 1868,
	313, 1868,
	314, 1868,
	315, 1868,
	316, 1868,
	317, 1868,
	318, 1868,
	319, 1868,
	320, 1868,
	321, 1868,
	323, 1868,
	324, 1868,
	325, 1868,
	326, 1868,
	327, 1868,
	328, 1868,
	329, 1868,
	330, 1868,
	331, 1868,
	332, 1868,
	334, 1868,
	335, 1868,
	336, 1868,
	337, 1868,
	338, 1868,
	339, 1868,
	340, 1868,
	341, 1868,
	342, 1868,
	344, 1868,
	345, 1868,
	346, 1868,
	347, 1868,
	348, 1868,
	349, 1868,
	350, 1868,
	351, 1868,
	352, 1868,
	353, 1868,
	354, 1868,
	355, 1868,
	357, 1868,
	358, 1868,
	359, 1868,
	361, 1868,
	362, 1868,
	363, 1868,
	364, 1868,
	365, 1868,
	366, 1868,
	367, 1868,
	368, 1868,
	369, 1868,
	371, 1868,
	372, 1868,
	373, 1868,
	374, 1868,
	377, 1868,
	378, 1868,
	379, 1868,
	380, 1868,
	381, 1868,
	383, 1868,
	384, 1868,
	385, 1868,
	387, 1868,
	388, 1868,
	391, 1868,
	392, 1868,
	393, 1868,
	394, 1868,
	395, 1868,
	397, 1868,
	399, 1868,
	400, 1868,
	401, 1868,
	402, 1868,
	403, 1868,
	404, 1868,
	405, 1868,
	407, 1868,
	408, 1868,
	409, 1868,
	414, 1868,
	415, 1868,
	416, 1868,
	417, 1868,
	418, 1868,
	419, 1868,
	420, 1868,
	421, 1868,
	423, 1868,
	424, 1868,
	425, 1868,
	426, 1868,
	427, 1868,
	428, 1868,
	430, 1868,
	431, 1868,
	432, 1868,
	433, 1868,
	434, 1868,
	435, 1868,
	436, 1868,
	437, 1868,
	438, 1868,
	440, 1868,
	443, 1868,
	444, 1868,
	447, 1868,
	448, 1868,
	-2, 0,
	-1, 1290,
	148, 1775,
	375, 1775,
	425, 1775,
	444, 1775,
	-2, 0,
	-1, 1357,
	1, 1822,
	441, 1822,
	443, 1822,
	444, 1822,
	445, 1822,
	446, 1822,
	-2, 597,
	-1, 1358,
	1, 1773,
	441, 1773,
	443, 1773,
	444, 1773,
	445, 1773,
	446, 1773,
	-2, 598,
	-1, 1371,
	196, 862,
	278, 862,
	285, 862,
	-2, 857,
	-1, 1376,
	132, 968,
	218, 968,
	247, 968,
	-2, 926,
	-1, 1469,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 1320,
	-1, 1518,
	443, 1453,
	-2, 0,
	-1, 1553,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 1038,
	-1, 1606,
	442, 1152,
	-2, 1140,
	-1, 1645,
	196, 862,
	278, 862,
	285, 862,
	-2, 440,
	-1, 1894,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1198,
	-1, 1895,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1199,
	-1, 1896,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1200,
	-1, 1897,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1201,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1202,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1203,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1204,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1205,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1915,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1918,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1224,
	-1, 1924,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1228,
	-1, 1926,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1237,
	-1, 1928,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 1929,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1239,
	-1, 2020,
	5, 1109,
	148, 1464,
	442, 1578,
	-2, 1569,
	-1, 2021,
	148, 1465,
	-2, 1826,
	-1, 2022,
	148, 1466,
	-2, 1700,
	-1, 2023,
	148, 1467,
	-2, 1630,
	-1, 2024,
	148, 1468,
	-2, 1664,
	-1, 2025,
	148, 1469,
	-2, 1699,
	-1, 2026,
	148, 1470,
	-2, 1766,
	-1, 2094,
	1, 1039,
	83, 1039,
	118, 1039,
	132, 1039,
	145, 1039,
	149, 1039,
	155, 1039,
	158, 1039,
	181, 1039,
	190, 1039,
	199, 1039,
	214, 1039,
	218, 1039,
	234, 1039,
	247, 1039,
	251, 1039,
	256, 1039,
	304, 1039,
	306, 1039,
	389, 1039,
	398, 1039,
	411, 1039,
	412, 1039,
	413, 1039,
	422, 1039,
	441, 1039,
	443, 1039,
	445, 1039,
	446, 1039,
	447, 1039,
	-2, 1038,
	-1, 2099,
	442, 1552,
	-2, 1564,
	-1, 2118,
	442, 1151,
	-2, 1141,
	-1, 2327,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1226,
	-1, 2328,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1230,
	-1, 2334,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 2508,
	196, 862,
	278, 862,
	285, 862,
	-2, 437,
	-1, 2579,
	443, 1523,
	447, 1523,
	-2, 1539,
	-1, 2591,
	268, 954,
	-2, 766,
	-1, 2668,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 2675,
	194, 0,
	195, 0,
	241, 0,
	-2, 1253,
	-1, 2736,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1284,
	-1, 2737,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1285,
	-1, 2738,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1286,
	-1, 2742,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2743,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1291,
	-1, 2744,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1292,
	-1, 2786,
	442, 1553,
	-2, 1565,
	-1, 2865,
	444, 1973,
	-2, 903,
	-1, 2906,
	194, 0,
	195, 0,
	241, 0,
	-2, 1254,
	-1, 2909,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1257,
	-1, 2910,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1259,
	-1, 3051,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1258,
	-1, 3052,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1260,
	-1, 3062,
	194, 0,
	-2, 1293,
	-1, 3152,
	194, 0,
	-2, 1294,
	-1, 3258,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1829,
}

const sqlPrivate = 57344

const sqlLast = 66969

var sqlAct = [...]int{

	872, 3090, 3257, 3267, 2580, 3115, 3007, 3328, 3338, 3230,
	3231, 3233, 2242, 3217, 2051, 3268, 3093, 3269, 2804, 989,
	3079, 1809, 2250, 3118, 2706, 3256, 3156, 3020, 2856, 799,
	2965, 1881, 2851, 2086, 1276, 3043, 2608, 2600, 2355, 1576,
	208, 2805, 208, 208, 1384, 1941, 208, 208, 208, 208,
	208, 2861, 1139, 208, 790, 547, 2602, 2577, 2613, 2320,
	2217, 568, 200, 980, 2082, 2146, 2485, 1467, 3066, 1040,
	829, 2239, 2474, 1548, 1546, 2220, 1132, 2434, 2273, 208,
	664, 2450, 2281, 568, 2251, 1767, 2353, 2282, 1770, 1527,
	2941, 2275, 1760, 2148, 1759, 2461, 1688, 2087, 2200, 1697,
	3157, 2759, 2516, 1477, 1556, 798, 139, 2139, 2433, 1878,
	1874, 1954, 2316, 1151, 2612, 1674, 1721, 1715, 1148, 87,
	1272, 1972, 868, 1528, 2218, 1676, 1984, 1577, 5, 1371,
	2490, 1938, 1028, 787, 2178, 1565, 2201, 1141, 2578, 1285,
	1756, 1269, 1259, 2177, 2244, 2089, 1205, 1788, 2048, 202,
	2285, 201, 3116, 1019, 844, 1966, 2074, 569, 975, 570,
	1537, 954, 2059, 1955, 2016, 1458, 1385, 515, 33, 1383,
	531, 208, 208, 146, 564, 972, 541, 1235, 147, 1776,
	640, 1283, 1159, 139, 609, 828, 789, 499, 1687, 518,
	1490, 977, 523, 952, 1389, 705, 1370, 2775, 1217, 2351,
	2776, 1790, 1790, 2243, 1810, 3366, 659, 1790, 1547, 2068,
	573, 2663, 576, 2202, 3357, 526, 3356, 3337, 2068, 2620,
	2068, 1728, 838, 88, 1397, 1398, 3324, 3322, 2202, 3288,
	2979, 2979, 573, 2068, 576, 1724, 3287, 3284, 1802, 2619,
	2068, 3285, 3281, 3278, 3254, 3253, 3282, 1728, 1728, 1728,
	1400, 3250, 3249, 2762, 3212, 1802, 1802, 673, 2111, 2068,
	206, 3203, 3202, 1397, 1398, 2979, 2979, 3196, 795, 3190,
	794, 1728, 2586, 2979, 2406, 2407, 1399, 3188, 3154, 2506,
	794, 2979, 2111, 969, 1419, 139, 3140, 3137, 3107, 1400,
	1728, 2979, 1728, 3106, 3099, 3098, 3213, 1728, 1728, 2979,
	88, 660, 3072, 3053, 3034, 1180, 1728, 2111, 2632, 3141,
	3003, 2108, 1802, 775, 2068, 1399, 955, 955, 774, 2997,
	2978, 2908, 2762, 2068, 2979, 2111, 59, 2875, 662, 2061,
	2902, 2868, 2867, 986, 2781, 894, 2868, 60, 2782, 2771,
	2765, 782, 1006, 2772, 2068, 1728, 1422, 1423, 1424, 1425,
	2699, 64, 2370, 2639, 1728, 2447, 1405, 2640, 2371, 2068,
	1174, 1168, 776, 2445, 2444, 956, 2398, 2068, 2068, 2383,
	2068, 796, 2372, 2384, 2271, 1001, 2068, 2060, 1806, 2195,
	2124, 70, 2998, 958, 2068, 959, 1427, 1428, 1429, 1969,
	2110, 176, 2105, 2101, 2111, 1405, 2068, 1728, 1728, 2067,
	1805, 973, 88, 2068, 1806, 2640, 2412, 2192, 1397, 1398,
	815, 76, 2137, 1648, 2632, 2226, 2319, 1727, 2135, 1523,
	86, 1158, 179, 2621, 77, 1427, 1428, 1429, 176, 178,
	1667, 960, 957, 781, 1400, 780, 779, 1420, 778, 777,
	773, 772, 2622, 2232, 771, 3274, 770, 1002, 769, 768,
	1791, 1791, 1970, 767, 2406, 2407, 1791, 2424, 2425, 2426,
	1399, 2068, 78, 766, 765, 764, 178, 763, 762, 1179,
	703, 2354, 177, 2904, 702, 701, 1420, 700, 699, 698,
	697, 696, 170, 695, 694, 693, 692, 2422, 691, 176,
	171, 2406, 2407, 690, 2424, 2425, 2426, 689, 688, 687,
	686, 685, 684, 683, 208, 682, 681, 680, 1426, 177,
	2903, 148, 679, 208, 2421, 672, 1468, 671, 2619, 631,
	1971, 1968, 630, 589, 1173, 588, 1421, 178, 587, 797,
	579, 578, 577, 554, 208, 553, 2406, 2407, 552, 551,
	1405, 208, 535, 198, 197, 2247, 196, 195, 148, 194,
	193, 2421, 192, 191, 190, 189, 188, 208, 1043, 208,
	208, 1144, 208, 1043, 208, 1421, 187, 186, 79, 2956,
	177, 1728, 208, 208, 185, 1027, 2423, 184, 1002, 1032,
	170, 183, 182, 181, 180, 2920, 2412, 2869, 171, 2779,
	2488, 2377, 3144, 999, 2366, 1798, 1789, 208, 1549, 145,
	82, 1854, 83, 2302, 2205, 2102, 2093, 2406, 2407, 148,
	2233, 208, 1973, 1144, 1144, 208, 208, 1672, 208, 2007,
	1396, 176, 1135, 2412, 2005, 176, 1563, 2003, 2060, 1484,
	208, 2001, 1999, 663, 1479, 1164, 116, 2427, 208, 1812,
	1034, 1002, 991, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 208, 208, 208, 208, 208, 1144, 1144, 178,
	2165, 3255, 1144, 178, 208, 1144, 208, 2422, 2412, 3186,
	3147, 3142, 1017, 3089, 2427, 3035, 2958, 1218, 1218, 3028,
	176, 176, 117, 2940, 1154, 1401, 1402, 1403, 1404, 1406,
	1407, 2939, 1280, 2927, 149, 2416, 2408, 2409, 2410, 2411,
	2413, 2414, 177, 2926, 2422, 1811, 177, 2925, 1162, 1967,
	1144, 2924, 170, 2918, 2406, 2407, 170, 1014, 178, 178,
	171, 573, 2917, 576, 171, 2916, 2915, 2841, 2794, 1161,
	208, 1160, 1036, 2116, 1129, 1134, 1222, 2793, 2791, 2412,
	2785, 661, 968, 2756, 208, 148, 1733, 2755, 2754, 2683,
	2679, 1167, 2643, 1172, 2483, 1178, 2423, 2441, 2432, 208,
	2405, 177, 177, 1480, 2402, 1478, 176, 2401, 139, 2231,
	176, 170, 170, 2399, 1273, 2382, 2360, 2359, 2352, 171,
	171, 795, 2272, 2094, 1977, 1396, 1731, 1764, 1395, 1479,
	3364, 1288, 3336, 2423, 1466, 1263, 1266, 3335, 3289, 1286,
	148, 148, 1397, 1398, 178, 88, 815, 88, 178, 88,
	815, 990, 2708, 1376, 1219, 3245, 3243, 3181, 1127, 3179,
	2422, 3176, 3175, 1127, 3171, 3165, 3136, 3135, 1400, 1377,
	1401, 1402, 1403, 1404, 1406, 1407, 1397, 1398, 1295, 2500,
	1944, 3085, 3064, 3040, 3039, 1298, 2412, 177, 3018, 176,
	3015, 177, 3011, 2955, 1399, 1668, 2179, 170, 2938, 2889,
	2886, 170, 1400, 2820, 2315, 171, 2418, 2419, 2420, 171,
	3027, 2819, 2808, 2417, 2415, 2416, 2408, 2409, 2410, 2411,
	2413, 2414, 2807, 2767, 796, 88, 2246, 178, 1399, 2674,
	148, 2633, 88, 2594, 2566, 2547, 2526, 2525, 2502, 88,
	2446, 2381, 1302, 2418, 2419, 2420, 2380, 2365, 1375, 2423,
	2417, 2415, 2416, 2408, 2409, 2410, 2411, 2413, 2414, 1369,
	1950, 2343, 3159, 1382, 2214, 1491, 1397, 1398, 1488, 1374,
	177, 2120, 2119, 2097, 1405, 2079, 2066, 1997, 2406, 2407,
	170, 2424, 2425, 2426, 1462, 1562, 1372, 1526, 171, 1522,
	2957, 2467, 1400, 1521, 208, 1520, 795, 2678, 2408, 2409,
	2410, 2411, 2413, 2414, 1427, 1428, 1429, 2912, 1405, 148,
	1519, 1518, 775, 1517, 1516, 1525, 1515, 774, 1399, 1378,
	208, 1514, 1534, 1512, 1511, 1510, 1509, 1392, 1393, 1508,
	1507, 208, 1043, 208, 208, 1506, 1505, 1504, 2421, 1813,
	1144, 568, 208, 208, 1503, 1502, 568, 208, 3145, 1501,
	1500, 1570, 208, 1481, 1463, 1420, 1461, 1456, 2526, 1013,
	1004, 776, 1397, 1398, 996, 2790, 2774, 2770, 1643, 2408,
	2409, 2410, 2411, 2413, 2414, 1043, 2406, 2407, 2369, 1544,
	2080, 1460, 1480, 2113, 2498, 2406, 2407, 1459, 1400, 1558,
	1029, 1557, 1531, 1532, 1667, 2202, 1031, 1667, 1670, 1469,
	2006, 3180, 2603, 1475, 3033, 2004, 2999, 1642, 2002, 1507,
	2412, 2777, 2000, 1998, 1399, 1583, 1667, 139, 2635, 1492,
	1493, 2634, 1549, 1367, 1658, 1657, 2550, 3143, 1667, 1664,
	1654, 809, 1497, 1317, 2181, 1495, 795, 1663, 1498, 955,
	1545, 1496, 2388, 2387, 1421, 1692, 1030, 2386, 2385, 1507,
	2325, 2167, 803, 3088, 1026, 2818, 1568, 2582, 1810, 2581,
	1486, 2427, 760, 3119, 1761, 2649, 2561, 1710, 3067, 986,
	3339, 986, 2243, 1969, 2710, 1554, 2375, 1573, 2410, 2411,
	2413, 2414, 1640, 1985, 2118, 3275, 1645, 1524, 1569, 1513,
	573, 2422, 576, 1494, 1405, 573, 2575, 576, 1144, 208,
	761, 1666, 1753, 1195, 3286, 1043, 1551, 3283, 2412, 2615,
	2800, 3227, 2852, 2279, 1306, 1572, 626, 3312, 2510, 2150,
	1639, 1661, 967, 3195, 1427, 1428, 1429, 1677, 2989, 1682,
	1183, 1678, 1574, 2125, 88, 1765, 1970, 1550, 1193, 1553,
	3313, 3276, 756, 3361, 208, 208, 754, 3113, 2141, 3110,
	3109, 208, 1659, 2406, 2407, 1844, 3108, 2834, 2831, 2823,
	752, 208, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407,
	208, 1465, 208, 750, 208, 1420, 2141, 747, 208, 1842,
	2423, 2830, 2797, 2796, 2364, 1712, 2363, 2140, 1714, 2422,
	208, 1718, 1127, 627, 2362, 1655, 2361, 1696, 2329, 3006,
	1403, 1404, 1406, 1407, 1971, 1968, 2153, 1752, 1194, 2197,
	2191, 1609, 2499, 2421, 2188, 2169, 1679, 1031, 2107, 1741,
	621, 1749, 1925, 1373, 1341, 1157, 3048, 1996, 1681, 815,
	1144, 208, 1144, 1995, 1994, 1127, 1993, 1144, 2240, 1883,
	1662, 208, 208, 1228, 1226, 1227, 1225, 1722, 573, 1299,
	576, 1144, 1144, 1782, 208, 1773, 1161, 1304, 1160, 994,
	208, 1851, 1247, 2650, 1421, 568, 208, 1030, 208, 744,
	208, 1814, 208, 827, 208, 1677, 3194, 2168, 2423, 1678,
	1608, 1726, 1683, 1717, 208, 2412, 208, 1689, 1852, 620,
	2418, 2419, 2420, 1407, 1031, 208, 1973, 2417, 2415, 2416,
	2408, 2409, 2410, 2411, 2413, 2414, 1819, 1340, 2100, 1823,
	2837, 2160, 1940, 1743, 208, 1686, 1742, 2549, 3095, 3247,
	208, 1826, 993, 1780, 1189, 2159, 1779, 1336, 1536, 2652,
	2085, 1940, 2651, 1698, 871, 2299, 2152, 1380, 1690, 1691,
	1043, 1948, 1300, 1352, 1030, 2985, 1946, 1775, 1012, 795,
	1702, 1793, 1973, 1778, 1795, 678, 3304, 1797, 2610, 1815,
	1191, 1800, 3351, 1314, 1679, 1127, 2422, 1286, 3271, 2558,
	1861, 1684, 2810, 1985, 2611, 1858, 1681, 1692, 1337, 3172,
	2693, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407,
	2114, 1318, 1699, 1967, 1540, 2417, 2415, 2416, 2408, 2409,
	2410, 2411, 2413, 2414, 629, 628, 1558, 1014, 1583, 1583,
	1279, 1807, 2414, 3210, 573, 2553, 576, 1956, 1957, 1668,
	2179, 2185, 1668, 2179, 1709, 1043, 1543, 2610, 3312, 3331,
	1683, 619, 1694, 618, 1790, 1956, 1982, 2509, 735, 1833,
	1366, 1668, 2179, 1677, 1538, 1850, 1206, 1678, 793, 2151,
	1856, 1684, 796, 1668, 1665, 2423, 1853, 1859, 2821, 1541,
	786, 622, 1489, 1703, 208, 1879, 1880, 2015, 2511, 2019,
	2019, 2032, 1973, 1956, 658, 788, 2052, 2054, 1339, 1539,
	2569, 2058, 2832, 2983, 1855, 3272, 2138, 1857, 1043, 208,
	2034, 1860, 1303, 2228, 735, 1684, 2463, 2189, 208, 1992,
	3303, 208, 2894, 775, 1043, 1680, 775, 775, 1870, 793,
	1305, 1871, 1872, 983, 1206, 758, 786, 2098, 757, 1684,
	792, 795, 748, 2340, 1981, 1936, 1704, 1705, 1246, 736,
	1843, 2095, 1679, 2106, 795, 1700, 748, 1349, 795, 3208,
	1397, 1398, 3058, 511, 1681, 2338, 3183, 1934, 2544, 749,
	1204, 1542, 776, 748, 1841, 776, 776, 2128, 3273, 1976,
	2081, 2690, 1701, 1952, 2091, 2092, 1400, 506, 3209, 2130,
	2317, 2318, 2417, 2415, 2416, 2408, 2409, 2410, 2411, 2413,
	2414, 792, 208, 2071, 1979, 736, 794, 1203, 3045, 1455,
	1188, 3096, 1399, 2379, 2811, 1023, 2075, 2984, 1683, 1713,
	1127, 2131, 2540, 794, 784, 2090, 735, 1301, 2890, 955,
	1942, 3352, 3329, 1043, 2129, 795, 2788, 992, 208, 1350,
	2027, 139, 2043, 2542, 796, 2056, 208, 745, 786, 2691,
	3302, 870, 2331, 986, 2064, 2065, 208, 1469, 2076, 2077,
	2072, 1469, 1315, 2462, 2109, 1706, 2335, 794, 1930, 208,
	986, 1939, 1144, 1680, 1554, 1825, 1931, 2336, 1947, 1932,
	2341, 1646, 1937, 785, 208, 1043, 2541, 737, 208, 208,
	1379, 1007, 1405, 1608, 1608, 1018, 2896, 1024, 3330, 2115,
	1323, 1011, 3270, 1791, 1025, 1127, 3311, 1684, 3044, 1351,
	3309, 2976, 3125, 1316, 208, 208, 1313, 736, 208, 3017,
	2598, 973, 1427, 1428, 1429, 2142, 2235, 2215, 1707, 1583,
	3332, 1135, 1754, 208, 1692, 2123, 1675, 2973, 1553, 791,
	208, 1973, 208, 737, 208, 2186, 2154, 2156, 1533, 2199,
	208, 580, 826, 208, 1005, 208, 2171, 208, 88, 208,
	208, 2126, 208, 1144, 1144, 1144, 1000, 1144, 1127, 2122,
	2304, 208, 208, 1420, 208, 1492, 1493, 498, 2974, 2843,
	208, 2538, 2895, 1387, 1127, 1388, 2172, 738, 2145, 2572,
	3101, 208, 1922, 208, 3100, 1693, 2291, 3346, 2267, 2268,
	791, 3083, 3046, 2745, 2198, 2254, 1455, 2180, 2182, 2183,
	2184, 208, 208, 208, 2491, 208, 2164, 2337, 2237, 1933,
	2537, 2162, 2988, 3162, 2799, 739, 2339, 2599, 1935, 2987,
	982, 2170, 2522, 507, 2518, 2936, 2236, 573, 208, 576,
	2219, 1680, 2216, 738, 2187, 1161, 2194, 2203, 1774, 2212,
	2223, 2307, 2278, 1763, 1762, 737, 1737, 3184, 2227, 1540,
	2689, 2207, 1421, 2209, 1536, 3218, 2173, 2857, 1847, 1386,
	88, 139, 1649, 3021, 2293, 1023, 2294, 2475, 1866, 2263,
	2265, 739, 3084, 2249, 1653, 508, 2528, 2256, 1471, 1023,
	2213, 1543, 1476, 1127, 2269, 2260, 1249, 2261, 1388, 2262,
	88, 2264, 1820, 1387, 1286, 2245, 2270, 2245, 1041, 2073,
	2527, 2292, 2280, 1152, 677, 88, 2969, 88, 2323, 2970,
	2464, 1920, 1923, 509, 1541, 510, 2297, 1684, 2298, 2332,
	1540, 984, 2309, 2070, 2746, 2357, 2358, 208, 3345, 2069,
	2747, 2104, 2306, 1234, 2103, 1127, 581, 582, 1651, 1324,
	2367, 2312, 2225, 783, 2972, 738, 1720, 1024, 2303, 88,
	2314, 88, 1543, 1652, 1025, 670, 2975, 2986, 2476, 1919,
	792, 1024, 2937, 1232, 1867, 1220, 1719, 513, 1025, 3091,
	1538, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 88, 1386,
	2311, 1137, 1221, 739, 1608, 1541, 3167, 3008, 3, 3185,
	2174, 2175, 2644, 1772, 1716, 3316, 3117, 2571, 3221, 2942,
	3081, 2760, 1990, 3168, 2330, 1539, 1542, 3318, 1364, 3063,
	2935, 2836, 1346, 1043, 795, 2443, 1344, 1690, 1691, 2435,
	584, 583, 2448, 1334, 2673, 2305, 2494, 2455, 2456, 208,
	2400, 2457, 208, 1211, 1214, 3082, 2342, 1332, 2196, 208,
	2166, 2492, 208, 208, 1043, 1330, 3092, 1989, 1328, 2121,
	2436, 1564, 1326, 1043, 1561, 1365, 3222, 2971, 208, 2478,
	2374, 3169, 2368, 1320, 1296, 2471, 788, 2301, 1230, 2300,
	585, 586, 208, 1840, 2296, 2479, 2480, 1542, 1849, 1830,
	1921, 1641, 1499, 1210, 2601, 1292, 3266, 3215, 2962, 208,
	208, 208, 2855, 2816, 2814, 208, 1942, 2469, 208, 675,
	676, 2472, 2798, 2507, 2470, 208, 208, 208, 208, 208,
	2597, 2486, 2584, 2583, 2241, 2512, 2452, 1469, 2482, 208,
	208, 2230, 2229, 1233, 2459, 2460, 2466, 208, 2465, 3129,
	1309, 2210, 1583, 2701, 2449, 2487, 1804, 2503, 2504, 208,
	1144, 1803, 208, 1801, 2438, 2439, 2440, 1799, 1043, 1796,
	668, 669, 1794, 1231, 1363, 2515, 1043, 512, 1345, 1792,
	1783, 208, 1343, 1734, 208, 208, 986, 1583, 988, 1333,
	2529, 746, 2532, 1732, 986, 986, 1144, 208, 986, 1144,
	1144, 1144, 2519, 1331, 2477, 2493, 208, 1723, 1711, 2497,
	2585, 1329, 208, 2495, 1327, 2552, 2587, 208, 1325, 208,
	2524, 1752, 986, 1708, 1695, 2508, 208, 2505, 2530, 1319,
	2534, 2535, 2567, 2513, 1229, 2559, 1839, 1685, 1390, 2321,
	3313, 3239, 3037, 3036, 2523, 1671, 1185, 3131, 2543, 1144,
	1144, 2606, 2158, 2866, 973, 1692, 2617, 208, 208, 1827,
	1682, 208, 973, 973, 2631, 964, 973, 2605, 3174, 2554,
	2548, 3149, 2141, 208, 1043, 208, 208, 1043, 208, 2563,
	2562, 2557, 2614, 2157, 2647, 1682, 2568, 2141, 2171, 965,
	2943, 2614, 2176, 1127, 208, 2555, 1361, 1362, 2155, 2556,
	2161, 1569, 2545, 1394, 2546, 1397, 1398, 514, 1580, 2193,
	2322, 2163, 751, 753, 3214, 1722, 1397, 1398, 3187, 2847,
	1391, 1722, 2842, 2784, 1127, 2248, 2057, 1644, 3327, 1575,
	2604, 1400, 2564, 1127, 2565, 2496, 795, 1043, 3344, 983,
	2623, 983, 1468, 2642, 2406, 2407, 2657, 139, 1043, 2646,
	208, 2789, 1566, 2676, 815, 525, 88, 1399, 88, 902,
	1397, 1398, 2133, 2132, 2616, 1535, 815, 1308, 1399, 2696,
	2630, 966, 2133, 1307, 2501, 2134, 1991, 1964, 2625, 2626,
	2627, 2913, 2628, 2629, 1583, 2688, 88, 2654, 88, 1348,
	2711, 1466, 1347, 2655, 1464, 1673, 2659, 3353, 2658, 204,
	2661, 501, 502, 3075, 555, 519, 501, 519, 529, 534,
	3031, 3010, 550, 2685, 2686, 2687, 2885, 1608, 2874, 2850,
	204, 2840, 2712, 2839, 2838, 2813, 2624, 2757, 1127, 2595,
	2593, 1583, 1583, 2681, 2258, 2234, 1127, 2211, 667, 796,
	1571, 208, 204, 1951, 1786, 2700, 1785, 1583, 1583, 1784,
	2707, 1766, 1608, 208, 2692, 2694, 2695, 1745, 1744, 1043,
	1740, 1739, 1738, 1736, 88, 1735, 1381, 2778, 1360, 1359,
	2714, 1869, 1342, 1338, 2773, 1335, 1321, 208, 1583, 1258,
	1257, 2749, 2722, 1256, 1255, 1254, 2724, 1253, 1879, 2715,
	1252, 1251, 1250, 1248, 1243, 1242, 1241, 561, 1240, 1239,
	1202, 1201, 1200, 1199, 1879, 2725, 1198, 1197, 1196, 1190,
	1184, 1182, 1181, 2750, 1010, 801, 1009, 1949, 939, 2761,
	208, 849, 139, 1647, 759, 1729, 2766, 2763, 2764, 613,
	501, 501, 2824, 743, 1127, 2753, 1471, 1127, 204, 2769,
	2792, 3094, 1354, 75, 1192, 2758, 600, 69, 2812, 3226,
	2780, 2833, 733, 208, 208, 208, 2536, 208, 1829, 1322,
	1755, 1831, 2835, 2468, 2078, 3207, 2921, 2378, 1043, 208,
	3155, 3057, 1988, 1144, 1485, 2828, 71, 837, 563, 2039,
	922, 2963, 2801, 2284, 2283, 802, 1046, 1656, 2802, 986,
	208, 843, 1669, 2117, 2018, 1579, 846, 1127, 1725, 1581,
	2035, 2870, 848, 208, 208, 1144, 1144, 1144, 1127, 208,
	208, 208, 2795, 847, 208, 208, 2863, 1752, 2829, 1582,
	2862, 208, 2822, 1487, 845, 2859, 1578, 2171, 2858, 2881,
	2224, 2846, 2853, 2787, 1043, 2252, 982, 2893, 982, 88,
	1237, 723, 1660, 1945, 1983, 2373, 1482, 817, 839, 1608,
	2815, 1980, 2817, 1003, 816, 2254, 2849, 973, 2473, 2609,
	2783, 3026, 1865, 2313, 1862, 2911, 616, 2860, 2403, 557,
	2864, 1965, 2872, 995, 2871, 2040, 2033, 2029, 1368, 208,
	1457, 2253, 2877, 1033, 2907, 562, 820, 88, 1943, 2882,
	2883, 1473, 2898, 2884, 2876, 2452, 1608, 1608, 2899, 2887,
	2347, 1580, 1580, 2888, 2484, 2618, 2112, 1873, 963, 962,
	961, 3232, 1608, 1608, 3229, 1583, 2892, 1650, 2127, 1127,
	1449, 833, 2453, 2645, 1207, 559, 3173, 1448, 755, 3164,
	1022, 1021, 1808, 1020, 2521, 3350, 2809, 984, 208, 984,
	175, 172, 174, 1608, 173, 986, 2826, 2570, 1043, 91,
	1043, 1821, 1822, 38, 37, 36, 18, 115, 114, 113,
	1882, 112, 556, 111, 110, 109, 108, 208, 208, 208,
	2934, 107, 106, 105, 104, 103, 102, 101, 100, 208,
	99, 98, 97, 96, 95, 208, 94, 208, 93, 92,
	208, 208, 208, 208, 208, 35, 2981, 546, 560, 543,
	51, 208, 208, 1144, 50, 1043, 90, 1144, 89, 558,
	2949, 17, 2951, 973, 34, 2948, 2486, 15, 2950, 2954,
	55, 56, 14, 208, 2945, 2946, 1043, 30, 1127, 1144,
	31, 81, 2959, 80, 29, 3012, 2980, 2944, 16, 208,
	28, 3005, 26, 27, 12, 1986, 9, 8, 11, 13,
	2990, 25, 144, 143, 74, 142, 2961, 73, 2995, 141,
	208, 140, 72, 997, 1752, 1043, 24, 10, 3025, 3004,
	2960, 23, 667, 2947, 136, 3038, 3000, 3013, 3001, 2606,
	68, 3023, 138, 137, 3022, 65, 135, 986, 134, 2991,
	3019, 1043, 66, 1008, 1127, 3032, 2996, 3030, 133, 132,
	550, 67, 3024, 983, 2614, 131, 22, 986, 6, 54,
	7, 801, 3042, 2648, 2982, 801, 204, 84, 204, 204,
	983, 1149, 85, 204, 2099, 2992, 2993, 1043, 3069, 3049,
	32, 204, 1163, 208, 3047, 208, 63, 1043, 208, 62,
	61, 21, 53, 20, 166, 165, 208, 1165, 3065, 1169,
	164, 1175, 2406, 2407, 163, 973, 1187, 159, 158, 162,
	160, 161, 157, 130, 168, 167, 155, 152, 3078, 208,
	1209, 3054, 151, 154, 204, 204, 156, 1149, 153, 1583,
	1608, 3009, 208, 150, 3070, 3071, 3014, 3121, 208, 204,
	3074, 3097, 3073, 1144, 169, 3041, 129, 1245, 208, 3112,
	2039, 2039, 1580, 58, 3122, 128, 3029, 3124, 1127, 127,
	1127, 204, 204, 204, 204, 1149, 126, 125, 124, 208,
	3076, 2035, 2035, 550, 3111, 204, 57, 3134, 3138, 3139,
	1583, 19, 3128, 2136, 1294, 88, 2, 3077, 208, 3120,
	88, 1297, 1, 0, 208, 3127, 0, 2862, 3126, 3133,
	0, 0, 208, 0, 3132, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 1127, 2606, 0, 0, 0,
	3170, 0, 3161, 0, 3153, 0, 0, 3158, 3160, 208,
	208, 0, 3148, 0, 2412, 0, 1127, 3103, 0, 204,
	3182, 0, 0, 0, 0, 0, 208, 1144, 2039, 2039,
	2039, 0, 208, 204, 0, 1583, 1144, 1144, 3104, 3105,
	0, 0, 0, 0, 208, 0, 208, 0, 534, 2035,
	2035, 2035, 0, 0, 3201, 1127, 3189, 3193, 0, 0,
	0, 0, 0, 3130, 3211, 0, 208, 0, 0, 3198,
	3199, 3200, 208, 208, 3177, 1043, 3223, 3204, 0, 3192,
	0, 1127, 2190, 0, 208, 0, 0, 3234, 0, 0,
	0, 0, 0, 3240, 3235, 2422, 3237, 0, 0, 0,
	1450, 1451, 1452, 1453, 1454, 3242, 3228, 3244, 3251, 3248,
	3236, 0, 3178, 0, 208, 0, 0, 1127, 0, 3252,
	0, 3246, 0, 0, 0, 3277, 0, 1127, 0, 0,
	982, 0, 1470, 0, 3197, 3262, 3263, 0, 1483, 3265,
	3264, 0, 0, 0, 0, 3279, 3290, 982, 208, 3292,
	0, 3294, 0, 0, 0, 0, 1942, 3299, 0, 3300,
	815, 3301, 3293, 0, 3295, 3291, 0, 208, 0, 0,
	3296, 3297, 3298, 2266, 1608, 0, 0, 0, 0, 3205,
	0, 3206, 0, 0, 2423, 3310, 3308, 3307, 0, 0,
	208, 0, 3315, 3314, 0, 3320, 3234, 3317, 3321, 0,
	3323, 0, 0, 0, 0, 0, 3326, 3224, 0, 3325,
	0, 0, 0, 2254, 0, 0, 0, 0, 3334, 0,
	0, 3333, 0, 0, 0, 1608, 0, 0, 0, 0,
	3343, 984, 3341, 0, 0, 0, 3347, 0, 0, 3340,
	0, 3342, 0, 501, 0, 0, 0, 3354, 984, 3355,
	3348, 3349, 0, 0, 0, 0, 3241, 1529, 1529, 1529,
	3358, 3359, 3360, 0, 204, 0, 204, 3362, 3363, 204,
	0, 0, 3367, 0, 0, 0, 0, 0, 0, 3365,
	1163, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	204, 1163, 519, 0, 0, 204, 1163, 0, 0, 0,
	1608, 550, 2415, 2416, 2408, 2409, 2410, 2411, 2413, 2414,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2039, 2039, 801, 3319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 815, 0, 2035, 2035, 1580, 0, 0, 0, 0,
	0, 0, 0, 2454, 0, 0, 983, 0, 0, 0,
	0, 0, 0, 0, 983, 983, 0, 0, 983, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1580, 0, 0, 0, 2481, 0, 0, 0, 0, 2344,
	2345, 0, 983, 2489, 0, 0, 0, 0, 0, 0,
	2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039,
	2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039, 0,
	2039, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
	2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
	0, 2035, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2429, 2430, 2431,
	0, 0, 0, 204, 204, 0, 2489, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1771, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 204, 0, 204, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2976, 0, 1787,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2560, 0, 0, 2973, 0, 0, 2966, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1580, 0, 2964,
	550, 0, 0, 0, 0, 2968, 0, 0, 0, 0,
	1149, 204, 0, 0, 1152, 0, 2588, 1041, 0, 2590,
	2591, 2592, 0, 550, 2974, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 204, 204, 0, 204, 0, 204,
	0, 204, 0, 204, 1580, 1580, 0, 0, 0, 0,
	0, 0, 0, 1845, 2967, 1846, 0, 0, 0, 0,
	1580, 1580, 0, 0, 204, 0, 0, 0, 0, 2637,
	2638, 0, 0, 982, 0, 0, 0, 2698, 0, 0,
	0, 982, 982, 534, 0, 982, 0, 0, 2704, 550,
	0, 1580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1863, 0, 1868, 0, 0, 0, 0, 982,
	1875, 0, 0, 0, 0, 0, 0, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 0, 1924, 0, 1926, 1927, 1928, 1929, 0,
	0, 0, 2969, 0, 0, 2970, 0, 0, 0, 0,
	0, 0, 0, 0, 984, 1953, 0, 0, 0, 983,
	0, 0, 984, 984, 0, 0, 984, 0, 0, 0,
	1470, 0, 0, 0, 1978, 0, 0, 0, 0, 2786,
	2972, 2669, 2670, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 2975, 0, 0, 0, 0, 0, 0, 0,
	0, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 0, 0,
	0, 0, 2031, 501, 2042, 2044, 2049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 501, 0,
	0, 0, 0, 0, 0, 204, 0, 501, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 2726,
	2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736,
	2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 0, 2748,
	0, 0, 0, 0, 1468, 0, 59, 0, 0, 0,
	0, 0, 0, 2971, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 1580, 0,
	0, 64, 0, 0, 60, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2039, 64, 0,
	0, 519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 2035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 2039, 2149, 0, 0,
	0, 76, 0, 0, 0, 204, 0, 0, 0, 0,
	86, 0, 0, 0, 77, 204, 0, 2035, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 204, 0,
	0, 77, 0, 0, 0, 2878, 2879, 2880, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 204, 2204, 0,
	0, 0, 78, 0, 0, 0, 0, 2206, 0, 2208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 204, 1163, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 2039, 982, 983, 0, 0,
	0, 0, 1771, 0, 0, 0, 0, 0, 0, 2149,
	2953, 501, 0, 2257, 0, 0, 2035, 983, 0, 204,
	0, 0, 204, 0, 204, 0, 204, 0, 204, 204,
	0, 1149, 0, 59, 0, 0, 0, 0, 0, 0,
	2276, 667, 0, 2149, 60, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	1163, 0, 1163, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 204, 204, 0, 204, 79, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 145,
	82, 0, 83, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 1580, 0, 0, 0, 145, 82, 76, 83,
	0, 176, 0, 1397, 1398, 1041, 0, 86, 0, 0,
	0, 77, 0, 663, 0, 0, 116, 0, 176, 0,
	0, 0, 0, 3002, 0, 0, 0, 0, 0, 1400,
	663, 3055, 982, 116, 0, 2327, 2328, 0, 0, 178,
	0, 2334, 0, 1580, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 1399, 178, 0, 0, 0,
	2348, 2349, 117, 1419, 0, 0, 1978, 3055, 0, 0,
	0, 0, 0, 0, 149, 2356, 0, 1882, 0, 117,
	0, 0, 177, 0, 0, 0, 1163, 0, 0, 0,
	0, 149, 170, 0, 0, 0, 0, 0, 0, 177,
	171, 2376, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 2389, 0, 0, 0, 171, 1580, 0,
	0, 148, 0, 0, 0, 1422, 1423, 1424, 1425, 0,
	0, 0, 0, 984, 0, 1405, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 2049, 2049, 2049, 0, 1427, 1428, 1429, 0, 0,
	0, 204, 0, 0, 982, 0, 1529, 0, 0, 204,
	204, 0, 0, 204, 2458, 0, 145, 82, 501, 83,
	0, 501, 0, 0, 982, 0, 0, 0, 501, 0,
	0, 501, 501, 0, 0, 0, 3062, 204, 176, 0,
	0, 0, 0, 0, 0, 0, 1420, 1163, 0, 0,
	663, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 0, 0, 0, 3086, 178, 0, 204, 2149,
	2517, 801, 0, 0, 2149, 0, 0, 2517, 0, 0,
	0, 0, 0, 0, 2149, 2517, 2149, 2517, 2517, 117,
	0, 0, 0, 0, 0, 984, 2539, 0, 204, 204,
	0, 149, 0, 0, 0, 1882, 0, 1426, 0, 177,
	0, 0, 0, 0, 0, 984, 0, 0, 204, 170,
	0, 1149, 0, 0, 0, 1421, 903, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2574, 0, 0, 2576, 2579, 0, 0, 0, 1289, 0,
	0, 0, 0, 0, 3152, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 205, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 2149, 0, 501, 2607,
	0, 0, 0, 0, 0, 2149, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 204, 1771, 0, 0,
	1771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2653, 0, 1149, 204, 0, 204, 0, 0,
	0, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406,
	1407, 2660, 0, 204, 0, 1875, 0, 0, 0, 0,
	0, 2664, 2665, 0, 0, 2668, 0, 0, 0, 2671,
	0, 0, 0, 0, 0, 0, 0, 0, 2675, 0,
	0, 0, 0, 0, 0, 0, 0, 2682, 0, 0,
	2458, 0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 2709,
	0, 2702, 0, 1433, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 1446, 0, 0, 0, 0, 2716, 2717,
	0, 2718, 2719, 2720, 0, 0, 2721, 0, 0, 0,
	2723, 0, 0, 0, 0, 0, 1399, 869, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2751, 2752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 2768,
	501, 0, 0, 0, 0, 0, 0, 0, 574, 0,
	0, 0, 501, 0, 0, 0, 1422, 1423, 1424, 1425,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	574, 0, 0, 0, 0, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	0, 2803, 2806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 550,
	0, 0, 0, 0, 2825, 1414, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 2844, 204, 204, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 985, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 0, 2149,
	204, 0, 0, 0, 0, 0, 0, 2873, 0, 0,
	0, 0, 2276, 2276, 0, 0, 0, 0, 667, 667,
	2149, 0, 0, 1771, 1771, 0, 0, 0, 1426, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 1421, 0, 0, 0,
	0, 0, 2900, 2901, 0, 0, 0, 0, 2905, 2906,
	0, 0, 0, 2909, 2910, 0, 0, 0, 0, 0,
	2914, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2922, 2919,
	0, 0, 0, 0, 0, 0, 2923, 0, 0, 0,
	0, 0, 0, 0, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 567, 0, 0, 0,
	0, 0, 0, 205, 1048, 205, 205, 1048, 0, 1048,
	205, 0, 204, 0, 0, 0, 0, 1163, 205, 0,
	0, 0, 0, 1436, 0, 0, 1411, 1412, 1418, 1417,
	1413, 1439, 204, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 2149, 2517, 2149, 0,
	2928, 0, 0, 0, 0, 0, 0, 0, 1163, 1048,
	1048, 205, 205, 2806, 2149, 0, 2517, 0, 0, 1163,
	1163, 204, 2149, 2517, 0, 0, 205, 0, 0, 0,
	204, 204, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 205, 205,
	205, 205, 3016, 1048, 1048, 60, 118, 0, 1048, 0,
	0, 1048, 205, 0, 0, 0, 0, 0, 2149, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 120, 0, 0, 0, 1163,
	0, 0, 2806, 0, 0, 0, 0, 39, 0, 70,
	0, 0, 0, 0, 0, 0, 1048, 0, 3050, 3051,
	3052, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 0, 43, 0, 205, 0, 0, 76,
	0, 0, 121, 0, 3060, 3061, 0, 41, 86, 0,
	205, 0, 77, 44, 0, 0, 0, 0, 3068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2149, 0, 2517, 0, 0, 3080, 0, 45,
	0, 0, 0, 0, 203, 204, 203, 203, 0, 0,
	78, 203, 0, 0, 0, 2806, 0, 0, 0, 574,
	0, 0, 0, 3102, 0, 0, 0, 0, 550, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 2579, 3114, 0, 0, 0, 0, 204, 0, 0,
	0, 2806, 0, 0, 2806, 0, 0, 1163, 0, 0,
	0, 0, 203, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2806, 2806, 203, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2709, 0, 203,
	203, 203, 203, 501, 0, 0, 0, 0, 0, 0,
	0, 3080, 0, 203, 0, 0, 79, 0, 0, 0,
	0, 3163, 0, 46, 3166, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2149, 2517,
	0, 0, 0, 0, 0, 0, 49, 145, 82, 0,
	83, 0, 47, 0, 0, 204, 122, 0, 0, 0,
	0, 2517, 48, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 1163, 0, 1163, 0, 203, 0, 0,
	0, 52, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 203, 0, 119, 0, 3219, 0, 0, 0, 0,
	0, 1163, 204, 0, 0, 0, 205, 178, 0, 0,
	0, 0, 0, 204, 0, 0, 801, 0, 1048, 205,
	205, 0, 0, 0, 0, 0, 1048, 205, 0, 0,
	117, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 2709, 3261, 3261, 3261, 0, 0, 0,
	177, 1044, 0, 0, 1145, 0, 1044, 0, 0, 0,
	170, 1048, 0, 3280, 0, 0, 0, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 2149, 0, 2806,
	0, 2806, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 4, 0, 3261, 0, 3080, 0, 0, 0,
	2406, 2407, 0, 2424, 2425, 2426, 1145, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1163,
	1397, 1398, 0, 0, 0, 0, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1400, 0, 0, 1446,
	1145, 1145, 0, 0, 0, 1145, 0, 0, 1145, 0,
	2421, 0, 0, 3261, 0, 0, 0, 0, 0, 0,
	0, 0, 1399, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1048, 205, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 0, 0, 0, 1397, 1398, 0,
	1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1552, 0, 985, 0, 1433, 203, 0, 0,
	205, 205, 2412, 1400, 0, 0, 1446, 205, 0, 0,
	203, 1552, 1422, 1423, 1424, 1425, 0, 0, 574, 0,
	0, 0, 1405, 574, 0, 0, 205, 0, 205, 1399,
	205, 2406, 2407, 0, 2424, 2425, 2426, 1419, 0, 0,
	0, 0, 0, 0, 1416, 0, 0, 0, 1437, 1447,
	2677, 0, 1427, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 2406, 2407, 0, 2424, 2425, 2426,
	0, 0, 0, 2422, 0, 0, 1048, 0, 1048, 0,
	0, 2421, 0, 1048, 0, 0, 1435, 0, 205, 1422,
	1423, 1424, 1425, 1420, 0, 0, 0, 1048, 1048, 1405,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 205, 205, 0, 205, 0, 205, 0, 205, 0,
	205, 0, 0, 0, 2421, 1437, 1447, 0, 0, 1427,
	1428, 1429, 0, 0, 0, 2406, 2407, 0, 2424, 2425,
	2426, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 2412, 0, 0, 0, 0, 1414, 1415,
	0, 0, 2423, 0, 1426, 0, 574, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	1420, 0, 1421, 0, 0, 0, 1048, 0, 0, 0,
	1397, 1398, 0, 0, 0, 2421, 2412, 1445, 0, 0,
	0, 0, 0, 0, 2427, 0, 0, 1438, 0, 0,
	0, 203, 203, 0, 0, 978, 1400, 0, 203, 0,
	0, 0, 0, 2428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2422, 0, 0, 203, 0, 203,
	0, 203, 1399, 0, 0, 1044, 0, 2427, 0, 0,
	1419, 1426, 0, 1145, 567, 199, 0, 0, 0, 567,
	0, 0, 0, 0, 0, 0, 0, 2412, 0, 1421,
	0, 1048, 2418, 2419, 2420, 0, 0, 2422, 0, 2417,
	2415, 2416, 2408, 2409, 2410, 2411, 2413, 2414, 1044, 1436,
	0, 0, 0, 0, 1438, 0, 2672, 1439, 0, 1410,
	1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0, 203,
	0, 0, 1422, 1423, 1424, 1425, 0, 0, 2427, 0,
	0, 0, 1405, 2423, 0, 0, 0, 203, 0, 0,
	0, 0, 574, 203, 1048, 203, 0, 203, 0, 203,
	0, 203, 0, 0, 0, 0, 0, 205, 2422, 0,
	1048, 0, 1427, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 2423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1411,
	1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401,
	1402, 1403, 1404, 1406, 1407, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 1145, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2418, 2419, 2420, 0, 2423, 0, 0,
	2417, 2415, 2416, 2408, 2409, 2410, 2411, 2413, 2414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 1426, 0, 2418, 2419, 2420, 0,
	0, 0, 205, 2417, 2415, 2416, 2408, 2409, 2410, 2411,
	2413, 2414, 1421, 0, 0, 205, 0, 0, 1048, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 1048, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 1145, 205, 1145, 985, 2418, 2419, 2420,
	1145, 0, 0, 0, 2417, 2415, 2416, 2408, 2409, 2410,
	2411, 2413, 2414, 985, 1145, 1145, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 567, 205,
	0, 205, 0, 205, 0, 205, 205, 0, 0, 1048,
	1048, 1048, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 1410,
	1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0, 0,
	0, 1045, 0, 0, 1146, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 205,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 1146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	1146, 1146, 0, 0, 0, 1146, 0, 0, 1146, 0,
	0, 203, 0, 0, 0, 574, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 1038, 1146, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	203, 1044, 203, 0, 203, 0, 203, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 1397, 1398, 0, 1430, 1431,
	1432, 1440, 1441, 1442, 0, 1238, 0, 0, 0, 1048,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 203,
	203, 1400, 203, 0, 1446, 0, 0, 1262, 1262, 1262,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1048, 1293, 0, 0, 0, 203, 0, 1399, 0, 1048,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 1044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 1422, 1423, 1424,
	1425, 0, 0, 205, 0, 1145, 0, 1405, 0, 0,
	0, 0, 0, 0, 0, 205, 1048, 0, 1044, 1397,
	1398, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 1048, 1437, 1447, 0, 0, 1427, 1428, 1429,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 0,
	0, 0, 1048, 205, 0, 1048, 1048, 1048, 0, 0,
	0, 0, 205, 0, 0, 0, 1414, 1415, 0, 0,
	0, 1399, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 1435, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 1045, 1145, 1145, 1145, 0,
	1145, 0, 0, 1146, 0, 1048, 1048, 0, 0, 985,
	0, 0, 0, 205, 0, 0, 0, 985, 985, 0,
	0, 985, 0, 0, 0, 2667, 0, 0, 0, 0,
	1048, 0, 205, 1048, 205, 0, 0, 0, 1045, 0,
	0, 1422, 1423, 1424, 1425, 1552, 0, 0, 0, 0,
	205, 1405, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 1427, 1428, 1429, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 1048, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 203, 1397, 1398,
	0, 0, 0, 0, 1552, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1559, 203, 0, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 0, 1567, 0,
	0, 0, 0, 0, 1397, 1398, 0, 0, 0, 0,
	0, 1146, 0, 0, 0, 0, 0, 0, 1045, 0,
	1399, 0, 0, 0, 203, 0, 0, 0, 1419, 0,
	1400, 0, 0, 203, 1436, 0, 0, 1411, 1412, 1418,
	1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403,
	1404, 1406, 1407, 1426, 0, 0, 1399, 0, 0, 0,
	0, 0, 0, 0, 1419, 1048, 0, 0, 0, 0,
	0, 1421, 0, 0, 2666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	1422, 1423, 1424, 1425, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 203, 0, 203, 1044, 0, 0, 0,
	2333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 1422, 1423, 1424, 1425,
	1427, 1428, 1429, 0, 0, 0, 1405, 1044, 0, 0,
	0, 0, 0, 1146, 0, 1146, 1044, 0, 0, 0,
	1146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 205, 0, 205, 1146, 1146, 1427, 1428, 1429, 0,
	0, 0, 0, 0, 1048, 205, 0, 0, 0, 1048,
	0, 1420, 0, 0, 0, 0, 0, 0, 1410, 1408,
	1409, 1401, 1402, 1403, 1404, 1406, 1407, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1747,
	0, 1048, 1048, 1048, 0, 0, 1758, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 1145, 0, 1238, 0, 1777, 0, 1777,
	1048, 1044, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 1426, 1045, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 1145,
	1421, 0, 1145, 1145, 1145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1817, 0, 0,
	0, 0, 0, 0, 1397, 1398, 0, 0, 0, 0,
	0, 0, 1145, 1145, 0, 1828, 0, 0, 0, 0,
	0, 1834, 0, 1835, 0, 1836, 0, 1837, 1045, 1838,
	1400, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	1044, 0, 0, 0, 1048, 0, 1048, 0, 0, 0,
	1848, 0, 0, 0, 0, 0, 1399, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 203, 203, 0, 203, 0, 0, 1410, 1408, 1409,
	1401, 1402, 1403, 1404, 1406, 1407, 203, 0, 205, 0,
	0, 1045, 0, 0, 0, 0, 0, 205, 205, 1048,
	1044, 1048, 0, 1048, 0, 0, 0, 1045, 985, 0,
	2326, 1044, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 1048, 0, 0, 1048, 1422, 1423, 1424, 1425,
	0, 0, 0, 0, 0, 0, 1405, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1048, 0, 0, 0, 0, 1427, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 1420, 0, 0,
	0, 0, 1044, 1048, 0, 0, 0, 632, 0, 0,
	0, 0, 0, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 1146, 2096, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 1045, 0,
	1552, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 205, 0, 0, 0, 1426, 1048,
	0, 0, 0, 0, 0, 0, 0, 655, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 203,
	0, 0, 636, 0, 0, 205, 0, 0, 203, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 637,
	0, 1044, 0, 0, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 1146, 1146, 638,
	1146, 0, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1145, 1145,
	1145, 0, 0, 0, 0, 0, 0, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 1048, 0, 0, 0, 1044, 0, 0,
	0, 0, 1048, 1048, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 1048, 0, 0, 0, 0, 0, 0, 0, 2222,
	205, 0, 0, 1758, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 641, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 658, 642, 0, 0, 2259, 0, 0, 1262, 0,
	1262, 0, 1262, 0, 1156, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 657,
	0, 1044, 0, 1044, 0, 2295, 643, 0, 0, 644,
	0, 0, 0, 0, 0, 652, 0, 0, 0, 0,
	0, 0, 645, 0, 1397, 1398, 203, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 0, 0, 2308, 1156, 2310, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1400, 646, 653, 1446, 0, 0, 1145, 0, 1044, 0,
	1145, 647, 0, 2324, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 0, 0, 0, 1399, 648, 0, 1044,
	0, 0, 1145, 0, 1419, 0, 0, 0, 656, 0,
	0, 1416, 0, 0, 0, 0, 1045, 0, 0, 651,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	0, 0, 0, 0, 0, 0, 1045, 0, 0, 0,
	0, 0, 0, 0, 1044, 0, 1422, 1423, 1424, 1425,
	203, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1414, 1415, 0, 0, 0,
	0, 0, 0, 1146, 0, 0, 0, 0, 0, 0,
	1435, 1045, 0, 0, 0, 0, 0, 1420, 0, 1045,
	0, 0, 0, 0, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 1146,
	0, 0, 1146, 1146, 1146, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 1146, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2514, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1045, 0, 0,
	1045, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 1438, 0, 0, 2551, 2222, 0, 0, 0, 1145,
	1145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	1045, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1045, 2589, 0, 0, 0, 0, 0, 0, 0,
	0, 2596, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 1411, 1412, 1418, 1417,
	1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 2930, 0, 0, 0,
	2929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2641, 0, 0, 0, 0, 0, 0, 0,
	0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442,
	0, 2656, 0, 1156, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1400, 0, 2662,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1045, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1399, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 1397, 1398, 0,
	1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1400, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 1423, 1424, 1425, 0, 0, 1399,
	0, 0, 0, 1405, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 1416, 0, 0, 0, 0, 0,
	0, 1045, 0, 0, 0, 0, 1146, 0, 0, 1437,
	1447, 0, 0, 1427, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 0, 1146, 1146,
	1146, 0, 1414, 1415, 0, 0, 0, 0, 0, 1422,
	1423, 1424, 1425, 0, 0, 0, 0, 1435, 0, 1405,
	0, 0, 0, 0, 1420, 0, 0, 1045, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1437, 1447, 0, 0, 1427,
	1428, 1429, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 1426, 0, 0, 0, 2845,
	1420, 0, 2848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 2854, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 1045, 0, 1045, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2891, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 0, 0, 0, 1146, 0, 1045, 0,
	1146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 1045,
	1436, 0, 1146, 1411, 1412, 1418, 1417, 1413, 1439, 1605,
	1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0,
	0, 0, 0, 2394, 0, 0, 0, 2395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 1617, 1599, 1606, 1589,
	1627, 1626, 0, 0, 1591, 1590, 0, 0, 0, 0,
	0, 0, 1637, 1638, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1411,
	1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401,
	1402, 1403, 1404, 1406, 1407, 0, 0, 0, 0, 1974,
	1045, 0, 1628, 1975, 1624, 1623, 0, 0, 0, 0,
	1045, 0, 0, 0, 0, 0, 1622, 2994, 0, 0,
	0, 0, 0, 0, 0, 0, 2222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1621, 1619, 1620, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1146, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1601, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1610, 1604,
	1612, 1614, 1615, 1616, 1611, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 1634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1625,
	0, 0, 0, 1602, 0, 1603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1146, 3087, 0, 0, 0, 0, 0, 0, 0, 1146,
	1146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1618, 0, 0, 0, 1586, 1584, 1585, 1588, 1587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3123, 0, 0, 0, 0, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1594, 1595, 1597, 1598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3146, 1613, 1596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1636, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1592, 0, 1629, 1630, 1631, 1632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1600, 0, 0, 0, 0, 1607,
	1635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1042, 0, 0, 0, 0, 3225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3238,
	215, 216, 217, 218, 219, 1049, 220, 1050, 1051, 1052,
	1053, 453, 1054, 1055, 1056, 1057, 221, 222, 223, 454,
	455, 224, 456, 225, 226, 457, 1058, 227, 228, 229,
	230, 231, 232, 1059, 1060, 233, 458, 459, 460, 1061,
	234, 461, 1062, 1047, 1063, 235, 236, 237, 238, 239,
	0, 241, 242, 243, 240, 1064, 244, 0, 245, 246,
	247, 1065, 924, 248, 249, 1066, 1067, 1069, 1068, 1070,
	1071, 1072, 250, 251, 252, 253, 254, 255, 462, 463,
	1073, 256, 1074, 258, 257, 1075, 259, 1076, 1077, 260,
	261, 262, 1078, 263, 1079, 264, 265, 1080, 464, 266,
	267, 269, 272, 268, 273, 274, 275, 465, 466, 1081,
	210, 1082, 0, 0, 0, 0, 276, 277, 278, 467,
	279, 280, 0, 281, 1083, 282, 1084, 1085, 925, 283,
	284, 1086, 285, 468, 1087, 469, 286, 1088, 287, 288,
	289, 290, 291, 292, 293, 470, 471, 472, 927, 1089,
	476, 295, 0, 0, 0, 213, 294, 296, 303, 1090,
	926, 297, 473, 299, 298, 300, 301, 302, 474, 1091,
	475, 1092, 304, 928, 929, 305, 306, 307, 930, 308,
	309, 0, 0, 310, 311, 312, 313, 1093, 315, 314,
	1094, 316, 477, 931, 317, 318, 932, 1095, 319, 320,
	1096, 1097, 321, 0, 322, 323, 212, 211, 324, 325,
	327, 328, 326, 933, 329, 330, 332, 331, 1098, 214,
	934, 1099, 478, 479, 333, 334, 1100, 335, 336, 337,
	1101, 1102, 339, 340, 1103, 1104, 341, 480, 935, 342,
	936, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	1105, 350, 482, 351, 483, 352, 1106, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 1107, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 1108, 375, 937, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 1109, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 1110, 402, 382, 383, 403, 938, 404, 486,
	405, 406, 1111, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 1112, 418, 419, 417, 1113,
	420, 421, 422, 423, 424, 270, 425, 271, 426, 1114,
	488, 489, 490, 427, 1115, 1116, 428, 429, 491, 430,
	492, 1117, 431, 432, 433, 0, 434, 435, 1118, 1119,
	436, 437, 438, 439, 441, 1120, 442, 1121, 440, 443,
	444, 445, 493, 494, 495, 1122, 447, 446, 496, 1123,
	1124, 1125, 1126, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 2083,
	0, 0, 0, 0, 0, 0, 0, 0, 2084, 215,
	216, 217, 218, 219, 1049, 220, 1050, 1051, 1052, 1053,
	453, 1054, 1055, 1056, 1057, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 1058, 227, 228, 229, 230,
	231, 232, 1059, 1060, 233, 458, 459, 460, 1061, 234,
	461, 1062, 1047, 1063, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 1064, 244, 0, 245, 246, 247,
	1065, 924, 248, 249, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 250, 251, 252, 253, 254, 255, 462, 463, 1073,
	256, 1074, 258, 257, 1075, 259, 1076, 1077, 260, 261,
	262, 1078, 263, 1079, 264, 265, 1080, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 1081, 210,
	1082, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 1083, 282, 1084, 1085, 925, 283, 284,
	1086, 285, 468, 1087, 469, 286, 1088, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 927, 1089, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 1090, 926,
	297, 473, 299, 298, 300, 301, 302, 474, 1091, 475,
	1092, 304, 928, 929, 305, 306, 307, 930, 308, 309,
	0, 0, 310, 311, 312, 313, 1093, 315, 314, 1094,
	316, 477, 931, 317, 318, 932, 1095, 319, 320, 1096,
	1097, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 933, 329, 330, 332, 331, 1098, 214, 934,
	1099, 478, 479, 333, 334, 1100, 335, 336, 337, 1101,
	1102, 339, 340, 1103, 1104, 341, 480, 935, 342, 936,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 1105,
	350, 482, 351, 483, 352, 1106, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 1107, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 1108, 375, 937, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	1109, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 1110, 402, 382, 383, 403, 938, 404, 486, 405,
	406, 1111, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 1112, 418, 419, 417, 1113, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 1114, 488,
	489, 490, 427, 1115, 1116, 428, 429, 491, 430, 492,
	1117, 431, 432, 433, 0, 434, 435, 1118, 1119, 436,
	437, 438, 439, 441, 1120, 442, 1121, 440, 443, 444,
	445, 493, 494, 495, 1122, 447, 446, 496, 1123, 1124,
	1125, 1126, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2952, 215,
	216, 217, 218, 219, 1049, 220, 1050, 1051, 1052, 1053,
	453, 1054, 1055, 1056, 1057, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 1058, 227, 228, 229, 230,
	231, 232, 1059, 1060, 233, 458, 459, 460, 1061, 234,
	461, 1062, 1047, 1063, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 1064, 244, 0, 245, 246, 247,
	1065, 924, 248, 249, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 250, 251, 252, 253, 254, 255, 462, 463, 1073,
	256, 1074, 258, 257, 1075, 259, 1076, 1077, 260, 261,
	262, 1078, 263, 1079, 264, 265, 1080, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 1081, 210,
	1082, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 1083, 282, 1084, 1085, 925, 283, 284,
	1086, 285, 468, 1087, 469, 286, 1088, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 927, 1089, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 1090, 926,
	297, 473, 299, 298, 300, 301, 302, 474, 1091, 475,
	1092, 304, 928, 929, 305, 306, 307, 930, 308, 309,
	0, 0, 310, 311, 312, 313, 1093, 315, 314, 1094,
	316, 477, 931, 317, 318, 932, 1095, 319, 320, 1096,
	1097, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 933, 329, 330, 332, 331, 1098, 214, 934,
	1099, 478, 479, 333, 334, 1100, 335, 336, 337, 1101,
	1102, 339, 340, 1103, 1104, 341, 480, 935, 342, 936,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 1105,
	350, 482, 351, 483, 352, 1106, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 1107, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 1108, 375, 937, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	1109, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 1110, 402, 382, 383, 403, 938, 404, 486, 405,
	406, 1111, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 1112, 418, 419, 417, 1113, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 1114, 488,
	489, 490, 427, 1115, 1116, 428, 429, 491, 430, 492,
	1117, 431, 432, 433, 0, 434, 435, 1118, 1119, 436,
	437, 438, 439, 441, 1120, 442, 1121, 440, 443, 444,
	445, 493, 494, 495, 1122, 447, 446, 496, 1123, 1124,
	1125, 1126, 448, 449, 497, 450, 451, 452, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3056, 0, 215, 216, 217, 218, 219,
	1049, 220, 1050, 1051, 1052, 1053, 453, 1054, 1055, 1056,
	1057, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 1058, 227, 228, 229, 230, 231, 232, 1059, 1060,
	233, 458, 459, 460, 1061, 234, 461, 1062, 1047, 1063,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	1064, 244, 0, 245, 246, 247, 1065, 924, 248, 249,
	1066, 1067, 1069, 1068, 1070, 1071, 1072, 250, 251, 252,
	253, 254, 255, 462, 463, 1073, 256, 1074, 258, 257,
	1075, 259, 1076, 1077, 260, 261, 262, 1078, 263, 1079,
	264, 265, 1080, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 1081, 210, 1082, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 1083,
	282, 1084, 1085, 925, 283, 284, 1086, 285, 468, 1087,
	469, 286, 1088, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 927, 1089, 476, 295, 0, 0, 0,
	213, 294, 296, 303, 1090, 926, 297, 473, 299, 298,
	300, 301, 302, 474, 1091, 475, 1092, 304, 928, 929,
	305, 306, 307, 930, 308, 309, 0, 0, 310, 311,
	312, 313, 1093, 315, 314, 1094, 316, 477, 931, 317,
	318, 932, 1095, 319, 320, 1096, 1097, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 933, 329,
	330, 332, 331, 1098, 214, 934, 1099, 478, 479, 333,
	334, 1100, 335, 336, 337, 1101, 1102, 339, 340, 1103,
	1104, 341, 480, 935, 342, 936, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 1105, 350, 482, 351, 483,
	352, 1106, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 1107, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 1108, 375,
	937, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 1109, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 1110, 402, 382,
	383, 403, 938, 404, 486, 405, 406, 1111, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	1112, 418, 419, 417, 1113, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 1114, 488, 489, 490, 427, 1115,
	1116, 428, 429, 491, 430, 492, 1117, 431, 432, 433,
	0, 434, 435, 1118, 1119, 436, 437, 438, 439, 441,
	1120, 442, 1121, 440, 443, 444, 445, 493, 494, 495,
	1122, 447, 446, 496, 1123, 1124, 1125, 1126, 448, 449,
	497, 450, 451, 452, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2705,
	0, 215, 216, 217, 218, 219, 1049, 220, 1050, 1051,
	1052, 1053, 453, 1054, 1055, 1056, 1057, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 1058, 227, 228,
	229, 230, 231, 232, 1059, 1060, 233, 458, 459, 460,
	1061, 234, 461, 1062, 1047, 1063, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 1064, 244, 0, 245,
	246, 247, 1065, 924, 248, 249, 1066, 1067, 1069, 1068,
	1070, 1071, 1072, 250, 251, 252, 253, 254, 255, 462,
	463, 1073, 256, 1074, 258, 257, 1075, 259, 1076, 1077,
	260, 261, 262, 1078, 263, 1079, 264, 265, 1080, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	1081, 210, 1082, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 1083, 282, 1084, 1085, 925,
	283, 284, 1086, 285, 468, 1087, 469, 286, 1088, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 927,
	1089, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	1090, 926, 297, 473, 299, 298, 300, 301, 302, 474,
	1091, 475, 1092, 304, 928, 929, 305, 306, 307, 930,
	308, 309, 0, 0, 310, 311, 312, 313, 1093, 315,
	314, 1094, 316, 477, 931, 317, 318, 932, 1095, 319,
	320, 1096, 1097, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 933, 329, 330, 332, 331, 1098,
	214, 934, 1099, 478, 479, 333, 334, 1100, 335, 336,
	337, 1101, 1102, 339, 340, 1103, 1104, 341, 480, 935,
	342, 936, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 1105, 350, 482, 351, 483, 352, 1106, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 1107,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 1108, 375, 937, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 1109, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 1110, 402, 382, 383, 403, 938, 404,
	486, 405, 406, 1111, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 1112, 418, 419, 417,
	1113, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	1114, 488, 489, 490, 427, 1115, 1116, 428, 429, 491,
	430, 492, 1117, 431, 432, 433, 0, 434, 435, 1118,
	1119, 436, 437, 438, 439, 441, 1120, 442, 1121, 440,
	443, 444, 445, 493, 494, 495, 1122, 447, 446, 496,
	1123, 1124, 1125, 1126, 448, 449, 497, 450, 451, 452,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2697, 0, 215, 216, 217,
	218, 219, 1049, 220, 1050, 1051, 1052, 1053, 453, 1054,
	1055, 1056, 1057, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 1058, 227, 228, 229, 230, 231, 232,
	1059, 1060, 233, 458, 459, 460, 1061, 234, 461, 1062,
	1047, 1063, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 1064, 244, 0, 245, 246, 247, 1065, 924,
	248, 249, 1066, 1067, 1069, 1068, 1070, 1071, 1072, 250,
	251, 252, 253, 254, 255, 462, 463, 1073, 256, 1074,
	258, 257, 1075, 259, 1076, 1077, 260, 261, 262, 1078,
	263, 1079, 264, 265, 1080, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 1081, 210, 1082, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 1083, 282, 1084, 1085, 925, 283, 284, 1086, 285,
	468, 1087, 469, 286, 1088, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 927, 1089, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 1090, 926, 297, 473,
	299, 298, 300, 301, 302, 474, 1091, 475, 1092, 304,
	928, 929, 305, 306, 307, 930, 308, 309, 0, 0,
	310, 311, 312, 313, 1093, 315, 314, 1094, 316, 477,
	931, 317, 318, 932, 1095, 319, 320, 1096, 1097, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	933, 329, 330, 332, 331, 1098, 214, 934, 1099, 478,
	479, 333, 334, 1100, 335, 336, 337, 1101, 1102, 339,
	340, 1103, 1104, 341, 480, 935, 342, 936, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 1105, 350, 482,
	351, 483, 352, 1106, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 1107, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	1108, 375, 937, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 1109, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 1110,
	402, 382, 383, 403, 938, 404, 486, 405, 406, 1111,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 1112, 418, 419, 417, 1113, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 1114, 488, 489, 490,
	427, 1115, 1116, 428, 429, 491, 430, 492, 1117, 431,
	432, 433, 0, 434, 435, 1118, 1119, 436, 437, 438,
	439, 441, 1120, 442, 1121, 440, 443, 444, 445, 493,
	494, 495, 1122, 447, 446, 496, 1123, 1124, 1125, 1126,
	448, 449, 497, 450, 451, 452, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2573, 0, 215, 216, 217, 218, 219, 1049, 220,
	1050, 1051, 1052, 1053, 453, 1054, 1055, 1056, 1057, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 1058,
	227, 228, 229, 230, 231, 232, 1059, 1060, 233, 458,
	459, 460, 1061, 234, 461, 1062, 1047, 1063, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 1064, 244,
	0, 245, 246, 247, 1065, 924, 248, 249, 1066, 1067,
	1069, 1068, 1070, 1071, 1072, 250, 251, 252, 253, 254,
	255, 462, 463, 1073, 256, 1074, 258, 257, 1075, 259,
	1076, 1077, 260, 261, 262, 1078, 263, 1079, 264, 265,
	1080, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 1081, 210, 1082, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 1083, 282, 1084,
	1085, 925, 283, 284, 1086, 285, 468, 1087, 469, 286,
	1088, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 927, 1089, 476, 295, 0, 0, 0, 213, 294,
	296, 303, 1090, 926, 297, 473, 299, 298, 300, 301,
	302, 474, 1091, 475, 1092, 304, 928, 929, 305, 306,
	307, 930, 308, 309, 0, 0, 310, 311, 312, 313,
	1093, 315, 314, 1094, 316, 477, 931, 317, 318, 932,
	1095, 319, 320, 1096, 1097, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 933, 329, 330, 332,
	331, 1098, 214, 934, 1099, 478, 479, 333, 334, 1100,
	335, 336, 337, 1101, 1102, 339, 340, 1103, 1104, 341,
	480, 935, 342, 936, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 1105, 350, 482, 351, 483, 352, 1106,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 1107, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 1108, 375, 937, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 1109, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 1110, 402, 382, 383, 403,
	938, 404, 486, 405, 406, 1111, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 1112, 418,
	419, 417, 1113, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 1114, 488, 489, 490, 427, 1115, 1116, 428,
	429, 491, 430, 492, 1117, 431, 432, 433, 0, 434,
	435, 1118, 1119, 436, 437, 438, 439, 441, 1120, 442,
	1121, 440, 443, 444, 445, 493, 494, 495, 1122, 447,
	446, 496, 1123, 1124, 1125, 1126, 448, 449, 497, 450,
	451, 452, 1042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 0, 215,
	216, 217, 218, 219, 1049, 220, 1050, 1051, 1052, 1053,
	453, 1054, 1055, 1056, 1057, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 1058, 227, 228, 229, 230,
	231, 232, 1059, 1060, 233, 458, 459, 460, 1061, 234,
	461, 1062, 1047, 1063, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 1064, 244, 0, 245, 246, 247,
	1065, 924, 248, 249, 1066, 1067, 1069, 1068, 1070, 1071,
	1072, 250, 251, 252, 253, 254, 255, 462, 463, 1073,
	256, 1074, 258, 257, 1075, 259, 1076, 1077, 260, 261,
	262, 1078, 263, 1079, 264, 265, 1080, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 1081, 210,
	1082, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 1083, 282, 1084, 1085, 925, 283, 284,
	1086, 285, 468, 1087, 469, 286, 1088, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 927, 1089, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 1090, 926,
	297, 473, 299, 298, 300, 301, 302, 474, 1091, 475,
	1092, 304, 928, 929, 305, 306, 307, 930, 308, 309,
	0, 0, 310, 311, 312, 313, 1093, 315, 314, 1094,
	316, 477, 931, 317, 318, 932, 1095, 319, 320, 1096,
	1097, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 933, 329, 330, 332, 331, 1098, 214, 934,
	1099, 478, 479, 333, 334, 1100, 335, 336, 337, 1101,
	1102, 339, 340, 1103, 1104, 341, 480, 935, 342, 936,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 1105,
	350, 482, 351, 483, 352, 1106, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 1107, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 1108, 375, 937, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	1109, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 1110, 402, 382, 383, 403, 938, 404, 486, 405,
	406, 1111, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 1112, 418, 419, 417, 1113, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 1114, 488,
	489, 490, 427, 1115, 1116, 428, 429, 491, 430, 492,
	1117, 431, 432, 433, 0, 434, 435, 1118, 1119, 436,
	437, 438, 439, 441, 1120, 442, 1121, 440, 443, 444,
	445, 493, 494, 495, 1122, 447, 446, 496, 1123, 1124,
	1125, 1126, 448, 449, 497, 450, 451, 452, 1150, 0,
	1042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1730, 0, 0, 0, 215, 216, 217,
	218, 219, 1049, 220, 1050, 1051, 1052, 1053, 453, 1054,
	1055, 1056, 1057, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 1058, 227, 228, 229, 230, 231, 232,
	1059, 1060, 233, 458, 459, 460, 1061, 234, 461, 1062,
	1047, 1063, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 1064, 244, 0, 245, 246, 247, 1065, 924,
	248, 249, 1066, 1067, 1069, 1068, 1070, 1071, 1072, 250,
	251, 252, 253, 254, 255, 462, 463, 1073, 256, 1074,
	258, 257, 1075, 259, 1076, 1077, 260, 261, 262, 1078,
	263, 1079, 264, 265, 1080, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 1081, 210, 1082, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 1083, 282, 1084, 1085, 925, 283, 284, 1086, 285,
	468, 1087, 469, 286, 1088, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 927, 1089, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 1090, 926, 297, 473,
	299, 298, 300, 301, 302, 474, 1091, 475, 1092, 304,
	928, 929, 305, 306, 307, 930, 308, 309, 0, 0,
	310, 311, 312, 313, 1093, 315, 314, 1094, 316, 477,
	931, 317, 318, 932, 1095, 319, 320, 1096, 1097, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	933, 329, 330, 332, 331, 1098, 214, 934, 1099, 478,
	479, 333, 334, 1100, 335, 336, 337, 1101, 1102, 339,
	340, 1103, 1104, 341, 480, 935, 342, 936, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 1105, 350, 482,
	351, 483, 352, 1106, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 1107, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	1108, 375, 937, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 1109, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 1110,
	402, 382, 383, 403, 938, 404, 486, 405, 406, 1111,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 1112, 418, 419, 417, 1113, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 1114, 488, 489, 490,
	427, 1115, 1116, 428, 429, 491, 430, 492, 1117, 431,
	432, 433, 0, 434, 435, 1118, 1119, 436, 437, 438,
	439, 441, 1120, 442, 1121, 440, 443, 444, 445, 493,
	494, 495, 1122, 447, 446, 496, 1123, 1124, 1125, 1126,
	448, 449, 497, 450, 451, 452, 1039, 0, 1042, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	1049, 220, 1050, 1051, 1052, 1053, 453, 1054, 1055, 1056,
	1057, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 1058, 227, 228, 229, 230, 231, 232, 1059, 1060,
	233, 458, 459, 460, 1061, 234, 461, 1062, 1047, 1063,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	1064, 244, 0, 245, 246, 247, 1065, 924, 248, 249,
	1066, 1067, 1069, 1068, 1070, 1071, 1072, 250, 251, 252,
	253, 254, 255, 462, 463, 1073, 256, 1074, 258, 257,
	1075, 259, 1076, 1077, 260, 261, 262, 1078, 263, 1079,
	264, 265, 1080, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 1081, 210, 1082, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 1083,
	282, 1084, 1085, 925, 283, 284, 1086, 285, 468, 1087,
	469, 286, 1088, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 927, 1089, 476, 295, 0, 0, 0,
	213, 294, 296, 303, 1090, 926, 297, 473, 299, 298,
	300, 301, 302, 474, 1091, 475, 1092, 304, 928, 929,
	305, 306, 307, 930, 308, 309, 0, 0, 310, 311,
	312, 313, 1093, 315, 314, 1094, 316, 477, 931, 317,
	318, 932, 1095, 319, 320, 1096, 1097, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 933, 329,
	330, 332, 331, 1098, 214, 934, 1099, 478, 479, 333,
	334, 1100, 335, 336, 337, 1101, 1102, 339, 340, 1103,
	1104, 341, 480, 935, 342, 936, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 1105, 350, 482, 351, 483,
	352, 1106, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 1107, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 1108, 375,
	937, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 1109, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 1110, 402, 382,
	383, 403, 938, 404, 486, 405, 406, 1111, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	1112, 418, 419, 417, 1113, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 1114, 488, 489, 490, 427, 1115,
	1116, 428, 429, 491, 430, 492, 1117, 431, 432, 433,
	0, 434, 435, 1118, 1119, 436, 437, 438, 439, 441,
	1120, 442, 1121, 440, 443, 444, 445, 493, 494, 495,
	1122, 447, 446, 496, 1123, 1124, 1125, 1126, 448, 449,
	497, 450, 451, 452, 1042, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1049, 220, 1050, 1051,
	1052, 1053, 453, 1054, 1055, 1056, 1057, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 1058, 227, 228,
	229, 230, 231, 232, 1059, 1060, 233, 458, 459, 460,
	1061, 234, 461, 1062, 1047, 1063, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 1064, 244, 0, 245,
	246, 247, 1065, 924, 248, 249, 1066, 1067, 1069, 1068,
	1070, 1071, 1072, 250, 251, 252, 253, 254, 255, 462,
	463, 1073, 256, 1074, 258, 257, 1075, 259, 1076, 1077,
	260, 261, 262, 1078, 263, 1079, 264, 265, 1080, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	1081, 210, 1082, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 1083, 282, 1084, 1085, 925,
	283, 284, 1086, 285, 468, 1087, 469, 286, 1088, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 927,
	1089, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	1090, 926, 297, 473, 299, 298, 300, 301, 302, 474,
	1091, 475, 1092, 304, 928, 929, 305, 306, 307, 930,
	308, 309, 0, 0, 310, 311, 312, 313, 1093, 315,
	314, 1094, 316, 477, 931, 317, 318, 932, 1095, 319,
	320, 1096, 1097, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 933, 329, 330, 332, 331, 1098,
	214, 934, 1099, 478, 479, 333, 334, 1100, 335, 336,
	337, 1101, 1102, 339, 340, 1103, 1104, 341, 480, 935,
	342, 936, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 1105, 350, 482, 351, 483, 352, 1106, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 1107,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 1108, 375, 937, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 1109, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 1110, 402, 382, 383, 403, 938, 404,
	486, 405, 406, 1111, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 1112, 418, 419, 417,
	1113, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	1114, 488, 489, 490, 427, 1115, 1116, 428, 429, 491,
	430, 492, 1117, 431, 432, 433, 0, 434, 435, 1118,
	1119, 436, 437, 438, 439, 441, 1120, 442, 1121, 440,
	443, 444, 445, 493, 494, 495, 1122, 447, 446, 496,
	1123, 1124, 1125, 1126, 448, 449, 497, 450, 451, 452,
	1963, 0, 866, 823, 824, 825, 821, 822, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 1960, 220, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 221, 222, 223, 454, 881,
	860, 892, 850, 891, 890, 0, 227, 852, 851, 230,
	231, 232, 842, 914, 233, 950, 951, 460, 0, 234,
	921, 0, 904, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 924, 248, 249, 907, 905, 906, 911, 909, 908,
	910, 250, 251, 252, 253, 895, 255, 888, 887, 810,
	256, 0, 258, 257, 0, 259, 1961, 0, 260, 886,
	262, 0, 263, 0, 264, 265, 0, 818, 266, 267,
	269, 272, 268, 273, 274, 275, 941, 942, 831, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 885, 883,
	884, 0, 281, 0, 282, 0, 0, 925, 283, 284,
	0, 285, 948, 0, 841, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 213, 294, 296, 303, 0, 926,
	297, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 304, 928, 929, 305, 306, 307, 930, 900, 901,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 949, 931, 317, 318, 932, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 812, 811, 324, 325, 327,
	854, 326, 933, 329, 330, 332, 331, 807, 214, 934,
	832, 919, 889, 333, 334, 0, 863, 336, 864, 0,
	0, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 944, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 882, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 937, 376, 377, 378, 379, 819,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 855, 856, 858, 859, 393, 397, 400,
	401, 912, 402, 382, 383, 403, 938, 404, 877, 857,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 923,
	411, 412, 413, 945, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 493, 893, 940, 1959, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 1962, 0, 0, 0, 0, 0, 0,
	836, 1958, 0, 0, 0, 797, 834, 866, 823, 824,
	825, 821, 822, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	221, 222, 223, 454, 881, 860, 892, 850, 891, 890,
	0, 227, 852, 851, 230, 231, 232, 842, 914, 233,
	950, 951, 460, 0, 234, 921, 0, 904, 0, 235,
	236, 237, 238, 239, 0, 241, 242, 243, 240, 0,
	244, 0, 245, 246, 247, 0, 924, 248, 249, 907,
	905, 906, 911, 909, 908, 910, 250, 251, 252, 253,
	895, 255, 888, 887, 810, 256, 0, 258, 257, 0,
	259, 0, 0, 260, 886, 262, 0, 263, 0, 264,
	265, 0, 818, 266, 267, 269, 272, 268, 273, 274,
	275, 941, 942, 831, 210, 0, 0, 0, 0, 0,
	276, 277, 278, 885, 883, 884, 0, 281, 0, 282,
	0, 0, 925, 283, 284, 0, 285, 948, 0, 841,
	286, 0, 287, 288, 289, 290, 291, 292, 293, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 213,
	294, 296, 303, 0, 926, 297, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 304, 928, 929, 305,
	306, 307, 930, 900, 901, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 949, 931, 317, 318,
	932, 0, 319, 320, 0, 0, 321, 0, 322, 323,
	812, 811, 324, 325, 327, 854, 326, 933, 329, 330,
	332, 331, 807, 214, 934, 832, 919, 889, 333, 334,
	0, 863, 336, 864, 0, 0, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 944, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 882,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 937,
	376, 377, 378, 379, 819, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 176, 398, 399, 855, 856,
	858, 859, 393, 397, 400, 401, 912, 402, 382, 383,
	403, 938, 404, 877, 857, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 923, 411, 412, 413, 945, 0,
	418, 419, 417, 178, 420, 421, 422, 423, 424, 270,
	425, 271, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 1287, 893, 940, 0,
	447, 446, 496, 0, 0, 0, 170, 448, 449, 497,
	450, 451, 452, 808, 171, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 866, 823,
	824, 825, 821, 822, 835, 1474, 1472, 0, 0, 0,
	0, 834, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 221, 222, 223, 454, 881, 860, 892, 850, 891,
	890, 0, 227, 852, 851, 230, 231, 232, 842, 914,
	233, 950, 951, 460, 0, 234, 921, 0, 904, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 924, 248, 249,
	907, 905, 906, 911, 909, 908, 910, 250, 251, 252,
	253, 895, 255, 888, 887, 810, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 886, 262, 0, 263, 0,
	264, 265, 0, 818, 266, 267, 269, 272, 268, 273,
	274, 275, 941, 942, 831, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 885, 883, 884, 0, 281, 0,
	282, 0, 0, 925, 283, 284, 0, 285, 948, 0,
	841, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	213, 294, 296, 303, 0, 926, 297, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 304, 928, 929,
	305, 306, 307, 930, 900, 901, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 949, 931, 317,
	318, 932, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 812, 811, 324, 325, 327, 854, 326, 933, 329,
	330, 332, 331, 807, 214, 934, 832, 919, 889, 333,
	334, 0, 863, 336, 864, 0, 0, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 944, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	882, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	937, 376, 377, 378, 379, 819, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 176, 398, 399, 855,
	856, 858, 859, 393, 397, 400, 401, 912, 402, 382,
	383, 403, 938, 404, 877, 857, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 923, 411, 412, 413, 945,
	0, 418, 419, 417, 178, 420, 421, 422, 423, 424,
	270, 425, 271, 853, 0, 896, 897, 898, 899, 0,
	0, 428, 429, 946, 430, 947, 830, 431, 432, 433,
	0, 434, 435, 0, 813, 436, 437, 438, 439, 441,
	913, 442, 0, 861, 443, 444, 445, 1287, 893, 940,
	0, 447, 446, 496, 0, 0, 0, 170, 448, 449,
	497, 450, 451, 452, 808, 171, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 866,
	823, 824, 825, 821, 822, 835, 1474, 2346, 0, 0,
	0, 0, 834, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 221, 222, 223, 454, 881, 860, 892, 850,
	891, 890, 0, 227, 852, 851, 230, 231, 232, 842,
	914, 233, 950, 951, 460, 0, 234, 921, 0, 904,
	0, 235, 236, 237, 238, 239, 0, 241, 242, 243,
	240, 0, 244, 0, 245, 246, 247, 0, 924, 248,
	249, 907, 905, 906, 911, 909, 908, 910, 250, 251,
	252, 253, 895, 255, 888, 887, 810, 256, 0, 258,
	257, 0, 259, 0, 0, 260, 886, 262, 0, 263,
	0, 264, 265, 0, 818, 266, 267, 269, 272, 268,
	273, 274, 275, 941, 942, 831, 210, 0, 0, 0,
	0, 0, 276, 277, 278, 885, 883, 884, 0, 281,
	0, 282, 0, 0, 925, 283, 284, 0, 285, 948,
	0, 841, 286, 0, 287, 288, 289, 290, 291, 292,
	293, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 213, 294, 296, 303, 0, 926, 297, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 304, 928,
	929, 305, 306, 307, 930, 900, 901, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 949, 931,
	317, 318, 932, 0, 319, 320, 0, 0, 321, 0,
	322, 323, 812, 811, 324, 325, 327, 854, 326, 933,
	329, 330, 332, 331, 807, 214, 934, 832, 919, 889,
	333, 334, 0, 863, 336, 864, 0, 0, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 944, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 882, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 937, 376, 377, 378, 379, 819, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 176, 398, 399,
	855, 856, 858, 859, 393, 397, 400, 401, 912, 402,
	382, 383, 403, 938, 404, 877, 857, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 923, 411, 412, 413,
	945, 0, 418, 419, 417, 178, 420, 421, 422, 423,
	424, 270, 425, 271, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 1287, 893,
	940, 0, 447, 446, 496, 0, 0, 0, 170, 448,
	449, 497, 450, 451, 452, 808, 171, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	866, 823, 824, 825, 821, 822, 835, 1474, 1472, 0,
	0, 0, 0, 834, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 221, 222, 223, 454, 881, 860, 892,
	850, 891, 890, 2045, 227, 852, 851, 230, 231, 232,
	842, 914, 233, 950, 951, 460, 0, 234, 921, 0,
	904, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 907, 905, 906, 911, 909, 908, 910, 250,
	251, 252, 253, 895, 255, 888, 887, 810, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 886, 262, 0,
	263, 0, 264, 265, 0, 818, 266, 267, 269, 272,
	268, 273, 274, 275, 941, 942, 831, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 885, 883, 884, 0,
	281, 0, 282, 0, 2050, 925, 283, 284, 0, 285,
	948, 0, 841, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 213, 294, 296, 303, 0, 926, 297, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 304,
	928, 929, 305, 306, 307, 930, 900, 901, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 2046, 316, 949,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 812, 811, 324, 325, 327, 854, 326,
	933, 329, 330, 332, 331, 807, 214, 934, 832, 919,
	889, 333, 334, 0, 863, 336, 864, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 944,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 882, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 819, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 855, 856, 858, 859, 393, 397, 400, 401, 912,
	402, 382, 383, 403, 938, 404, 877, 857, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 923, 411, 412,
	413, 945, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 853, 0, 896, 897, 898,
	899, 0, 2047, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 493,
	893, 940, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 800, 834, 866, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 221, 222,
	223, 454, 881, 860, 892, 850, 891, 890, 0, 227,
	852, 851, 230, 231, 232, 842, 914, 233, 950, 951,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 895, 255,
	888, 887, 810, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 886, 262, 0, 263, 0, 264, 265, 0,
	818, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 831, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 885, 883, 884, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 841, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 304, 928, 929, 305, 306, 307,
	930, 900, 901, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 812, 811,
	324, 325, 327, 854, 326, 933, 329, 330, 332, 331,
	807, 214, 934, 832, 919, 889, 333, 334, 0, 863,
	336, 864, 814, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 882, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 819, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 855, 856, 858, 859,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 877, 857, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 923, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 493, 893, 940, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 866, 823, 824, 825,
	821, 822, 835, 836, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 221,
	222, 223, 454, 881, 860, 892, 850, 891, 890, 0,
	227, 852, 851, 230, 231, 232, 842, 914, 233, 950,
	951, 460, 0, 234, 921, 0, 904, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 907, 905,
	906, 911, 909, 908, 910, 250, 251, 252, 253, 895,
	255, 888, 887, 810, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 886, 262, 0, 263, 0, 264, 265,
	0, 818, 266, 267, 269, 272, 268, 273, 274, 275,
	941, 942, 831, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 885, 883, 884, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 948, 0, 841, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 916, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 213, 294,
	296, 303, 0, 926, 297, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 304, 928, 929, 305, 306,
	307, 930, 900, 901, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 949, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 812,
	811, 324, 325, 327, 854, 326, 933, 329, 330, 332,
	331, 807, 214, 934, 832, 919, 889, 333, 334, 0,
	863, 336, 864, 814, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 944, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 882, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 819, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 855, 856, 858,
	859, 393, 397, 400, 401, 912, 402, 382, 383, 403,
	938, 404, 877, 857, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 923, 411, 412, 413, 945, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 493, 893, 940, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 866, 823, 824,
	825, 821, 822, 835, 836, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	221, 222, 223, 454, 881, 860, 892, 850, 891, 890,
	0, 227, 852, 851, 230, 231, 232, 842, 914, 233,
	950, 951, 460, 0, 234, 921, 0, 904, 0, 235,
	236, 237, 238, 239, 0, 241, 242, 243, 240, 0,
	244, 0, 245, 246, 247, 0, 924, 248, 249, 907,
	905, 906, 911, 909, 908, 910, 250, 251, 252, 253,
	895, 255, 888, 887, 810, 256, 0, 258, 257, 0,
	259, 0, 0, 260, 886, 262, 0, 263, 0, 264,
	265, 0, 818, 266, 267, 269, 272, 268, 273, 274,
	275, 941, 942, 831, 210, 0, 0, 0, 0, 0,
	276, 277, 278, 885, 883, 884, 0, 281, 0, 282,
	0, 0, 925, 283, 284, 0, 285, 948, 0, 841,
	286, 0, 287, 288, 289, 290, 291, 292, 293, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 213,
	294, 296, 303, 0, 926, 297, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 304, 928, 929, 305,
	306, 307, 930, 900, 901, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 949, 931, 317, 318,
	932, 0, 319, 320, 0, 0, 321, 0, 322, 323,
	812, 811, 324, 325, 327, 854, 326, 933, 329, 330,
	332, 331, 807, 2865, 934, 832, 919, 889, 333, 334,
	0, 863, 336, 864, 0, 0, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 944, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 882,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 937,
	376, 377, 378, 379, 819, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 855, 856,
	858, 859, 393, 397, 400, 401, 912, 402, 382, 383,
	403, 938, 404, 877, 857, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 923, 411, 412, 413, 945, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 270,
	425, 271, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 493, 893, 940, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 1530, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 834, 866, 823, 824, 825, 821, 822, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 221, 222, 223, 454, 881,
	860, 892, 850, 891, 890, 0, 227, 852, 851, 230,
	231, 232, 842, 914, 233, 950, 951, 460, 0, 234,
	921, 0, 904, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 924, 248, 249, 907, 905, 906, 911, 909, 908,
	910, 250, 251, 252, 253, 895, 255, 888, 887, 810,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 886,
	262, 0, 263, 0, 264, 265, 0, 818, 266, 267,
	269, 272, 268, 273, 274, 275, 941, 942, 831, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 885, 883,
	884, 0, 281, 0, 282, 0, 0, 925, 283, 284,
	0, 285, 948, 0, 841, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 213, 294, 296, 303, 0, 926,
	297, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 304, 928, 929, 305, 306, 307, 930, 900, 901,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 949, 931, 317, 318, 932, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 812, 811, 324, 325, 327,
	854, 326, 933, 329, 330, 332, 331, 807, 214, 934,
	832, 919, 889, 333, 334, 0, 863, 336, 864, 0,
	0, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 944, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 882, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 937, 376, 377, 378, 379, 819,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 855, 856, 858, 859, 393, 397, 400,
	401, 912, 402, 382, 383, 403, 938, 404, 877, 857,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 923,
	411, 412, 413, 945, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 493, 893, 940, 2684, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 866, 823, 824, 825, 821, 822, 835,
	836, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 221, 222, 223, 454,
	881, 860, 892, 850, 891, 890, 0, 227, 852, 851,
	230, 231, 232, 842, 914, 233, 950, 951, 460, 0,
	234, 921, 0, 904, 0, 235, 236, 237, 238, 239,
	0, 241, 242, 243, 240, 0, 244, 0, 245, 246,
	247, 0, 924, 248, 249, 907, 905, 906, 911, 909,
	908, 910, 250, 251, 252, 253, 895, 255, 888, 887,
	810, 256, 0, 258, 257, 0, 259, 0, 0, 260,
	886, 262, 0, 263, 0, 264, 265, 0, 818, 266,
	267, 269, 272, 268, 273, 274, 275, 941, 942, 831,
	210, 0, 0, 0, 0, 0, 276, 277, 278, 885,
	883, 884, 0, 281, 0, 282, 0, 0, 925, 283,
	284, 0, 285, 948, 0, 841, 286, 0, 287, 288,
	289, 290, 291, 292, 293, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 1877, 294, 296, 303, 0,
	926, 297, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 304, 928, 929, 305, 306, 307, 930, 900,
	901, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 949, 931, 317, 318, 932, 0, 319, 320,
	0, 0, 321, 0, 322, 323, 812, 811, 324, 325,
	327, 854, 326, 933, 329, 330, 332, 331, 807, 214,
	934, 832, 919, 889, 333, 334, 0, 863, 336, 864,
	0, 0, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 944, 351, 483, 352, 1876, 353, 0, 354,
	355, 356, 357, 358, 359, 882, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 937, 376, 377, 378, 379,
	819, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 855, 856, 858, 859, 393, 397,
	400, 401, 912, 402, 382, 383, 403, 938, 404, 877,
	857, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	923, 411, 412, 413, 945, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 270, 425, 271, 853, 0,
	896, 897, 898, 899, 0, 0, 428, 429, 946, 430,
	947, 830, 431, 432, 433, 0, 434, 435, 0, 813,
	436, 437, 438, 439, 441, 913, 442, 0, 861, 443,
	444, 445, 493, 893, 940, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 866, 823, 824, 825, 821, 822,
	835, 836, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 221, 222, 223,
	454, 881, 860, 892, 850, 891, 890, 0, 227, 852,
	851, 230, 231, 232, 842, 914, 233, 950, 951, 460,
	0, 234, 921, 0, 904, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 924, 248, 249, 907, 905, 906, 911,
	909, 908, 910, 250, 251, 252, 253, 895, 255, 888,
	887, 810, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 886, 262, 0, 263, 0, 264, 265, 0, 818,
	266, 267, 269, 272, 268, 273, 274, 275, 941, 942,
	831, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	885, 883, 884, 0, 281, 0, 282, 0, 0, 925,
	283, 284, 0, 285, 948, 0, 841, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 213, 294, 296, 303,
	0, 926, 297, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 304, 928, 929, 305, 306, 307, 930,
	900, 901, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 949, 931, 317, 318, 932, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 812, 811, 324,
	325, 327, 854, 326, 933, 329, 330, 332, 331, 807,
	214, 934, 832, 919, 889, 333, 334, 0, 863, 336,
	864, 0, 0, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 944, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 882, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 937, 376, 377, 378,
	379, 819, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 855, 856, 858, 859, 393,
	397, 400, 401, 912, 402, 382, 383, 403, 938, 404,
	877, 857, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 923, 411, 412, 413, 945, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 493, 893, 940, 0, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	808, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 1530, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 221, 222, 223, 454, 881, 860, 892, 850,
	891, 890, 0, 227, 852, 851, 230, 231, 232, 842,
	914, 233, 950, 951, 460, 0, 234, 921, 0, 904,
	0, 235, 236, 237, 238, 239, 0, 241, 242, 243,
	240, 0, 244, 0, 245, 246, 247, 0, 924, 248,
	249, 907, 905, 906, 911, 909, 908, 910, 250, 251,
	252, 253, 895, 255, 888, 887, 810, 256, 0, 258,
	257, 0, 259, 0, 0, 260, 886, 262, 0, 263,
	0, 264, 265, 0, 818, 266, 267, 269, 272, 268,
	273, 274, 275, 941, 942, 831, 210, 0, 0, 0,
	0, 0, 276, 277, 278, 885, 883, 884, 0, 281,
	0, 282, 0, 2050, 925, 283, 284, 0, 285, 948,
	0, 841, 286, 0, 287, 288, 289, 290, 291, 292,
	293, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 213, 294, 296, 303, 0, 926, 297, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 304, 928,
	929, 305, 306, 307, 930, 900, 901, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 949, 931,
	317, 318, 932, 0, 319, 320, 0, 0, 321, 0,
	322, 323, 812, 811, 324, 325, 327, 854, 326, 933,
	329, 330, 332, 331, 807, 214, 934, 832, 919, 889,
	333, 334, 0, 863, 336, 864, 0, 0, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 944, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 882, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 937, 376, 377, 378, 379, 819, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	855, 856, 858, 859, 393, 397, 400, 401, 912, 402,
	382, 383, 403, 938, 404, 877, 857, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 923, 411, 412, 413,
	945, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 270, 425, 271, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 493, 893,
	940, 0, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	866, 823, 824, 825, 821, 822, 835, 836, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 221, 222, 223, 454, 881, 860, 892,
	850, 891, 890, 0, 227, 852, 851, 230, 231, 232,
	842, 914, 233, 950, 951, 460, 0, 234, 921, 0,
	904, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 907, 905, 906, 911, 909, 908, 910, 250,
	251, 252, 253, 895, 255, 888, 887, 810, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 886, 262, 0,
	263, 0, 264, 265, 0, 818, 266, 267, 269, 272,
	268, 273, 274, 275, 941, 942, 831, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 885, 883, 884, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	948, 0, 841, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 213, 294, 296, 303, 0, 926, 297, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 304,
	928, 929, 305, 306, 307, 930, 900, 901, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 949,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 812, 811, 324, 325, 327, 854, 326,
	933, 329, 330, 332, 331, 807, 214, 934, 832, 919,
	889, 333, 334, 0, 863, 336, 864, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 944,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 882, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 819, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 855, 856, 858, 859, 393, 397, 400, 401, 912,
	402, 382, 383, 403, 938, 404, 877, 857, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 923, 411, 412,
	413, 945, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 493,
	893, 940, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 0, 0, 0, 0, 0, 0, 0, 836, 1472,
	0, 0, 0, 2055, 834, 866, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 221, 222,
	223, 454, 881, 860, 892, 850, 891, 890, 0, 227,
	852, 851, 230, 231, 232, 842, 914, 233, 950, 951,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 895, 255,
	888, 887, 810, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 886, 262, 0, 263, 0, 264, 265, 0,
	818, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 831, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 885, 883, 884, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 841, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 304, 928, 929, 305, 306, 307,
	930, 900, 901, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 812, 811,
	324, 325, 327, 854, 326, 933, 329, 330, 332, 331,
	807, 214, 934, 832, 919, 889, 333, 334, 0, 863,
	336, 864, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 882, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 819, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 855, 856, 858, 859,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 877, 857, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 923, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 493, 893, 940, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 2053, 834,
	866, 823, 824, 825, 821, 822, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 221, 222, 223, 454, 881, 860, 892,
	850, 891, 890, 0, 227, 852, 851, 230, 231, 232,
	842, 914, 233, 950, 951, 460, 0, 234, 921, 0,
	904, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 907, 905, 906, 911, 909, 908, 910, 250,
	251, 252, 253, 895, 255, 888, 887, 810, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 886, 262, 0,
	263, 0, 264, 265, 0, 818, 266, 267, 269, 272,
	268, 273, 274, 275, 941, 942, 831, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 885, 883, 884, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	948, 0, 841, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 213, 294, 296, 303, 0, 926, 297, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 304,
	928, 929, 305, 306, 307, 930, 900, 901, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 949,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 812, 811, 324, 325, 327, 854, 326,
	933, 329, 330, 332, 331, 807, 214, 934, 832, 919,
	889, 333, 334, 0, 863, 336, 864, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 944,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 882, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 819, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 855, 856, 858, 859, 393, 397, 400, 401, 912,
	402, 382, 383, 403, 938, 404, 877, 857, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 923, 411, 412,
	413, 945, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 493,
	893, 940, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 2041, 834, 866, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 221, 222,
	223, 454, 881, 860, 892, 850, 891, 890, 0, 227,
	852, 851, 230, 231, 232, 842, 914, 233, 950, 951,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 895, 255,
	888, 887, 810, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 886, 262, 0, 263, 0, 264, 265, 0,
	818, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 831, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 885, 883, 884, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 841, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 304, 928, 929, 305, 306, 307,
	930, 900, 901, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 812, 811,
	324, 325, 327, 854, 326, 933, 329, 330, 332, 331,
	807, 214, 934, 832, 919, 889, 333, 334, 0, 863,
	336, 864, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 882, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 819, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 855, 856, 858, 859,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 877, 857, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 923, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 493, 893, 940, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 2030, 834,
	866, 823, 824, 825, 821, 822, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 221, 222, 223, 454, 881, 860, 892,
	850, 891, 890, 0, 227, 852, 851, 230, 231, 232,
	842, 914, 233, 950, 951, 460, 0, 234, 921, 0,
	904, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 907, 905, 906, 911, 909, 908, 910, 250,
	251, 252, 253, 895, 255, 888, 887, 810, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 886, 262, 0,
	263, 0, 264, 265, 0, 818, 266, 267, 269, 272,
	268, 273, 274, 275, 941, 942, 831, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 885, 883, 884, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	948, 0, 841, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 213, 294, 296, 303, 0, 926, 297, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 304,
	928, 929, 305, 306, 307, 930, 900, 901, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 949,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 812, 811, 324, 325, 327, 854, 326,
	933, 329, 330, 332, 331, 807, 214, 934, 832, 919,
	889, 333, 334, 0, 863, 336, 864, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 944,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 882, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 819, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 855, 856, 858, 859, 393, 397, 400, 401, 912,
	402, 382, 383, 403, 938, 404, 877, 857, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 923, 411, 412,
	413, 945, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 493,
	893, 940, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 2028, 834, 2020, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 221, 222,
	223, 454, 881, 860, 892, 850, 891, 890, 0, 227,
	852, 851, 230, 231, 232, 842, 914, 233, 950, 951,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 895, 2023,
	888, 887, 810, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 886, 262, 0, 263, 0, 264, 265, 0,
	818, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 831, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 885, 883, 884, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 841, 286, 0,
	287, 288, 2024, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 304, 928, 929, 305, 306, 307,
	930, 900, 901, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 812, 811,
	2025, 2022, 327, 854, 326, 933, 329, 330, 332, 331,
	807, 214, 934, 832, 919, 889, 333, 334, 0, 863,
	336, 864, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 882, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 819, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 2026, 0, 398, 399, 855, 856, 858, 859,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 877, 857, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 923, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 493, 893, 940, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 2021,
	452, 808, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 2017, 834,
	2020, 823, 824, 825, 821, 822, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 221, 222, 223, 454, 881, 860, 892,
	850, 891, 890, 0, 227, 852, 851, 230, 231, 232,
	842, 914, 233, 950, 951, 460, 0, 234, 921, 0,
	904, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 907, 905, 906, 911, 909, 908, 910, 250,
	251, 252, 253, 895, 2023, 888, 887, 810, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 886, 262, 0,
	263, 0, 264, 265, 0, 818, 266, 267, 269, 272,
	268, 273, 274, 275, 941, 942, 831, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 885, 883, 884, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	948, 0, 841, 286, 0, 287, 288, 2024, 290, 291,
	292, 293, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 213, 294, 296, 303, 0, 926, 297, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 304,
	928, 929, 305, 306, 307, 930, 900, 901, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 949,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 812, 811, 2025, 2022, 327, 854, 326,
	933, 329, 330, 332, 331, 807, 214, 934, 832, 919,
	889, 333, 334, 0, 863, 336, 864, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 944,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 882, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 819, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 2026, 0, 398,
	399, 855, 856, 858, 859, 393, 397, 400, 401, 912,
	402, 382, 383, 403, 938, 404, 877, 857, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 923, 411, 412,
	413, 945, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 493,
	893, 940, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 2021, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 866, 823, 824, 825, 821, 822, 835, 836, 0,
	0, 0, 0, 0, 834, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 221, 222, 223, 454, 881, 860,
	892, 850, 891, 890, 0, 227, 852, 851, 230, 231,
	232, 842, 914, 233, 950, 951, 460, 0, 234, 921,
	0, 904, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	924, 248, 249, 907, 905, 906, 911, 909, 908, 910,
	250, 251, 252, 253, 895, 255, 888, 887, 810, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 886, 262,
	0, 263, 0, 264, 265, 0, 818, 266, 267, 269,
	272, 268, 273, 274, 275, 941, 942, 831, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 885, 883, 884,
	0, 281, 0, 282, 0, 0, 925, 283, 284, 0,
	285, 948, 0, 841, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 916, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 213, 294, 296, 303, 0, 926, 297,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	304, 928, 929, 305, 306, 307, 930, 900, 901, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	949, 931, 317, 318, 932, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 812, 811, 324, 325, 327, 854,
	326, 933, 329, 330, 332, 331, 807, 214, 934, 832,
	919, 889, 333, 334, 0, 863, 336, 864, 0, 0,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	944, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 882, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 937, 376, 377, 378, 379, 819, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 855, 856, 858, 859, 393, 397, 400, 401,
	912, 402, 382, 383, 403, 938, 404, 877, 857, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 923, 411,
	412, 413, 945, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	493, 893, 940, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 0, 0, 0, 0, 0, 1480, 0, 836,
	0, 0, 0, 0, 0, 834, 866, 823, 824, 825,
	821, 822, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 1864, 220,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 221,
	222, 223, 454, 881, 860, 892, 850, 891, 890, 0,
	227, 852, 851, 230, 231, 232, 842, 914, 233, 950,
	951, 460, 0, 234, 921, 0, 904, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 907, 905,
	906, 911, 909, 908, 910, 250, 251, 252, 253, 895,
	255, 888, 887, 810, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 886, 262, 0, 263, 0, 264, 265,
	0, 818, 266, 267, 269, 272, 268, 273, 274, 275,
	941, 942, 831, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 885, 883, 884, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 948, 0, 841, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 916, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 213, 294,
	296, 303, 0, 926, 297, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 304, 928, 929, 305, 306,
	307, 930, 900, 901, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 949, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 812,
	811, 324, 325, 327, 854, 326, 933, 329, 330, 332,
	331, 807, 214, 934, 832, 919, 889, 333, 334, 0,
	863, 336, 864, 0, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 944, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 882, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 819, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 855, 856, 858,
	859, 393, 397, 400, 401, 912, 402, 382, 383, 403,
	938, 404, 877, 857, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 923, 411, 412, 413, 945, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 493, 893, 940, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 1177,
	834, 866, 823, 824, 825, 821, 822, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 221, 222, 223, 454, 881, 860,
	892, 850, 891, 890, 0, 227, 852, 851, 230, 231,
	232, 842, 914, 233, 950, 951, 460, 0, 234, 921,
	0, 904, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	924, 248, 249, 907, 905, 906, 911, 909, 908, 910,
	250, 251, 252, 253, 895, 255, 888, 887, 810, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 886, 262,
	0, 263, 0, 264, 265, 0, 818, 266, 267, 269,
	272, 268, 273, 274, 275, 941, 942, 831, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 885, 883, 884,
	0, 281, 0, 282, 0, 0, 925, 283, 284, 0,
	285, 948, 0, 841, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 1176, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 213, 294, 296, 303, 0, 926, 297,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	304, 928, 929, 305, 306, 307, 930, 900, 901, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	949, 931, 317, 318, 932, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 812, 811, 324, 325, 327, 854,
	326, 933, 329, 330, 332, 331, 807, 214, 934, 832,
	919, 889, 333, 334, 0, 863, 336, 864, 0, 0,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	944, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 882, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 937, 376, 377, 378, 379, 819, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 855, 856, 858, 859, 393, 397, 400, 401,
	912, 402, 382, 383, 403, 938, 404, 877, 857, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 923, 411,
	412, 413, 945, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	493, 893, 940, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 1171, 834, 866, 823, 824, 825,
	821, 822, 835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 221,
	222, 223, 454, 881, 860, 892, 850, 891, 890, 0,
	227, 852, 851, 230, 231, 232, 842, 914, 233, 950,
	951, 460, 0, 234, 921, 0, 904, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 907, 905,
	906, 911, 909, 908, 910, 250, 251, 252, 253, 895,
	255, 888, 887, 810, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 886, 262, 0, 263, 0, 264, 265,
	0, 818, 266, 267, 269, 272, 268, 273, 274, 275,
	941, 942, 831, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 885, 883, 884, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 948, 0, 841, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 1170, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 213, 294,
	296, 303, 0, 926, 297, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 304, 928, 929, 305, 306,
	307, 930, 900, 901, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 949, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 812,
	811, 324, 325, 327, 854, 326, 933, 329, 330, 332,
	331, 807, 214, 934, 832, 919, 889, 333, 334, 0,
	863, 336, 864, 0, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 944, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 882, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 819, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 855, 856, 858,
	859, 393, 397, 400, 401, 912, 402, 382, 383, 403,
	938, 404, 877, 857, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 923, 411, 412, 413, 945, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 493, 893, 940, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 1166,
	834, 866, 823, 824, 825, 821, 822, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 221, 222, 223, 454, 881, 860,
	892, 850, 891, 890, 0, 227, 852, 851, 230, 231,
	232, 842, 914, 233, 950, 951, 460, 0, 234, 921,
	0, 904, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	924, 248, 249, 907, 905, 906, 911, 909, 908, 910,
	250, 251, 252, 253, 895, 255, 888, 887, 810, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 886, 262,
	0, 263, 0, 264, 265, 0, 818, 266, 267, 269,
	272, 268, 273, 274, 275, 941, 942, 831, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 885, 883, 884,
	0, 281, 0, 282, 0, 0, 925, 283, 284, 0,
	285, 948, 0, 841, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 916, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 213, 294, 296, 303, 0, 926, 297,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	304, 928, 929, 305, 306, 307, 930, 900, 901, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	949, 931, 317, 318, 932, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 812, 811, 324, 325, 327, 854,
	326, 933, 329, 330, 332, 331, 807, 214, 934, 832,
	919, 889, 333, 334, 0, 863, 336, 864, 0, 0,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	944, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 882, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 937, 376, 377, 378, 379, 819, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 855, 856, 858, 859, 393, 397, 400, 401,
	912, 402, 382, 383, 403, 938, 404, 877, 857, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 923, 411,
	412, 413, 945, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	493, 893, 940, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 866, 823, 824, 825, 821, 822, 835, 836,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 221, 222, 223, 454, 881,
	860, 892, 850, 891, 890, 0, 227, 852, 851, 230,
	231, 232, 842, 914, 233, 950, 951, 460, 0, 234,
	921, 0, 904, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 924, 248, 249, 907, 905, 906, 911, 909, 908,
	910, 250, 251, 252, 253, 895, 255, 888, 887, 810,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 886,
	262, 0, 263, 0, 264, 265, 0, 818, 266, 267,
	269, 272, 268, 273, 274, 275, 941, 942, 831, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 885, 883,
	884, 0, 281, 0, 282, 0, 0, 925, 283, 284,
	0, 285, 948, 0, 841, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 213, 294, 296, 303, 0, 926,
	297, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 304, 928, 929, 305, 306, 307, 930, 900, 901,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 949, 931, 317, 318, 932, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 812, 811, 324, 325, 327,
	854, 326, 933, 329, 330, 332, 331, 807, 214, 934,
	832, 919, 889, 333, 334, 0, 863, 336, 864, 0,
	0, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 944, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 882, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 937, 376, 377, 378, 379, 819,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 855, 856, 858, 859, 393, 397, 400,
	401, 912, 402, 382, 383, 403, 938, 404, 877, 857,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 923,
	411, 412, 413, 945, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 493, 893, 940, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 866, 823, 824, 825, 821, 822, 835,
	836, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 221, 222, 223, 454,
	881, 860, 892, 850, 891, 890, 0, 227, 852, 851,
	230, 231, 232, 842, 914, 233, 950, 951, 460, 0,
	234, 921, 0, 904, 0, 235, 236, 237, 238, 239,
	0, 241, 242, 243, 240, 0, 244, 0, 245, 246,
	247, 0, 924, 248, 3260, 907, 905, 906, 911, 909,
	908, 910, 250, 251, 252, 253, 895, 255, 888, 887,
	810, 256, 0, 258, 257, 0, 259, 0, 0, 260,
	886, 262, 0, 263, 0, 264, 265, 0, 818, 266,
	267, 269, 272, 268, 273, 274, 275, 941, 942, 831,
	210, 0, 0, 0, 0, 0, 276, 277, 278, 885,
	883, 884, 0, 281, 0, 282, 0, 0, 925, 283,
	284, 0, 285, 948, 0, 841, 286, 0, 287, 288,
	289, 290, 291, 292, 293, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 213, 294, 296, 303, 0,
	926, 297, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 304, 928, 929, 305, 306, 307, 930, 900,
	901, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 949, 931, 317, 318, 932, 0, 319, 320,
	0, 0, 321, 0, 322, 323, 812, 811, 324, 325,
	327, 854, 326, 933, 329, 330, 332, 331, 807, 214,
	934, 832, 919, 889, 333, 334, 0, 863, 336, 864,
	0, 0, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 944, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 882, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 937, 376, 377, 378, 379,
	819, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 855, 856, 858, 859, 393, 397,
	400, 401, 912, 402, 382, 383, 403, 938, 404, 877,
	857, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	923, 411, 412, 413, 945, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 270, 425, 271, 853, 0,
	896, 897, 898, 899, 0, 0, 428, 429, 946, 430,
	947, 830, 431, 432, 433, 0, 3259, 435, 0, 813,
	436, 437, 438, 439, 441, 913, 442, 0, 861, 443,
	444, 445, 493, 893, 940, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 866, 823, 824, 825, 821, 822,
	835, 836, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 221, 222, 223,
	3258, 881, 860, 892, 850, 891, 890, 0, 227, 852,
	851, 230, 231, 232, 842, 914, 233, 950, 951, 460,
	0, 234, 921, 0, 904, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 924, 248, 3260, 907, 905, 906, 911,
	909, 908, 910, 250, 251, 252, 253, 895, 255, 888,
	887, 810, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 886, 262, 0, 263, 0, 264, 265, 0, 818,
	266, 267, 269, 272, 268, 273, 274, 275, 941, 942,
	831, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	885, 883, 884, 0, 281, 0, 282, 0, 0, 925,
	283, 284, 0, 285, 948, 0, 841, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 213, 294, 296, 303,
	0, 926, 297, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 304, 928, 929, 305, 306, 307, 930,
	900, 901, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 949, 931, 317, 318, 932, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 812, 811, 324,
	325, 327, 854, 326, 933, 329, 330, 332, 331, 807,
	214, 934, 832, 919, 889, 333, 334, 0, 863, 336,
	864, 0, 0, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 944, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 882, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 937, 376, 377, 378,
	379, 819, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 855, 856, 858, 859, 393,
	397, 400, 401, 912, 402, 382, 383, 403, 938, 404,
	877, 857, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 923, 411, 412, 413, 945, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 3259, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 493, 893, 940, 0, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	808, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 866, 823, 824, 825, 821,
	822, 835, 836, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 221, 222,
	223, 454, 881, 860, 892, 850, 891, 890, 0, 227,
	852, 851, 230, 231, 232, 842, 914, 233, 950, 951,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 895, 255,
	888, 887, 0, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 886, 262, 0, 263, 0, 264, 265, 0,
	818, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 831, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 885, 883, 884, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 841, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 304, 928, 929, 305, 306, 307,
	930, 900, 901, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 212, 211,
	324, 325, 327, 854, 326, 933, 329, 330, 332, 331,
	0, 214, 934, 832, 919, 889, 333, 334, 0, 863,
	336, 864, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 882, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 819, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 855, 856, 858, 859,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 877, 857, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 923, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 493, 893, 940, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 2038,
	0, 0, 0, 0, 2036, 2037, 866, 823, 824, 825,
	821, 822, 835, 836, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 221,
	222, 223, 0, 881, 860, 892, 850, 891, 890, 0,
	227, 852, 851, 230, 231, 232, 842, 914, 233, 950,
	951, 460, 0, 234, 921, 0, 904, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 3260, 907, 905,
	906, 911, 909, 908, 910, 250, 251, 252, 253, 895,
	255, 888, 887, 810, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 886, 262, 0, 263, 0, 264, 265,
	0, 818, 266, 267, 269, 272, 268, 273, 274, 275,
	941, 942, 831, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 885, 883, 884, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 948, 0, 841, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 916, 917,
	920, 0, 0, 918, 862, 0, 0, 0, 213, 294,
	296, 303, 0, 926, 297, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 304, 0, 0, 305, 306,
	307, 930, 900, 901, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 949, 931, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 812,
	811, 324, 325, 327, 854, 326, 933, 329, 330, 332,
	331, 807, 214, 0, 832, 919, 889, 333, 334, 0,
	863, 336, 864, 0, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 944, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 882, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 819, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 855, 856, 858,
	859, 393, 397, 400, 401, 912, 402, 382, 383, 403,
	0, 404, 877, 857, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 923, 411, 412, 413, 945, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 3259,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 493, 893, 940, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 797, 0, 987, 0,
	0, 0, 0, 0, 0, 804, 805, 0, 0, 0,
	0, 0, 0, 0, 836, 215, 216, 217, 218, 219,
	834, 220, 0, 0, 0, 0, 915, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 914,
	233, 458, 459, 460, 0, 234, 921, 0, 904, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 924, 248, 249,
	907, 905, 906, 911, 909, 908, 910, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 941, 942, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 925, 283, 284, 0, 285, 948, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	916, 917, 920, 927, 0, 918, 295, 0, 0, 0,
	213, 294, 296, 303, 0, 926, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 928, 929,
	305, 306, 307, 930, 308, 309, 0, 0, 310, 311,
	312, 313, 974, 315, 314, 0, 316, 949, 931, 317,
	318, 932, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 933, 329,
	330, 332, 331, 0, 214, 934, 0, 919, 479, 333,
	334, 0, 335, 336, 337, 0, 979, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 944, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	937, 376, 377, 378, 379, 485, 981, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 176, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 912, 402, 382,
	383, 403, 938, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 945,
	0, 418, 419, 417, 178, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 946, 430, 947, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	913, 442, 0, 440, 443, 444, 445, 1287, 494, 495,
	0, 447, 446, 496, 987, 0, 0, 170, 448, 449,
	497, 450, 451, 452, 0, 171, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 915, 0, 971, 0, 1555, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 914, 233, 458, 459, 460,
	0, 234, 921, 0, 904, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 924, 248, 249, 907, 905, 906, 911,
	909, 908, 910, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 941, 942,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 925,
	283, 284, 0, 285, 948, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 916, 917, 920, 927,
	0, 918, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 926, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 928, 929, 305, 306, 307, 930,
	308, 309, 0, 0, 310, 311, 312, 313, 974, 315,
	314, 0, 316, 949, 931, 317, 318, 932, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 933, 329, 330, 332, 331, 0,
	214, 934, 0, 919, 479, 333, 334, 0, 335, 336,
	337, 0, 979, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 944, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 937, 376, 377, 378,
	379, 485, 981, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 176, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 912, 402, 382, 383, 403, 938, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 945, 0, 418, 419, 417,
	178, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 946,
	430, 947, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 913, 442, 0, 440,
	443, 444, 445, 1287, 494, 495, 0, 447, 446, 496,
	0, 0, 0, 170, 448, 449, 497, 450, 451, 452,
	0, 171, 0, 0, 2451, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 1555, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 915, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 914, 233, 458,
	459, 460, 0, 234, 921, 0, 904, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 907, 905,
	906, 911, 909, 908, 910, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	941, 942, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 948, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 916, 917,
	920, 927, 0, 918, 295, 0, 0, 0, 213, 294,
	296, 303, 0, 926, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 928, 929, 305, 306,
	307, 930, 308, 309, 0, 0, 310, 311, 312, 313,
	974, 315, 314, 0, 316, 949, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 933, 329, 330, 332,
	331, 0, 214, 934, 0, 919, 479, 333, 334, 0,
	335, 336, 337, 0, 979, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 944, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 485, 981, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 912, 402, 382, 383, 403,
	938, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 945, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 946, 430, 947, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 913, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 0, 970, 0, 987, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 971, 915, 976, 0, 0, 0, 221, 222,
	223, 454, 455, 224, 456, 225, 226, 457, 0, 227,
	228, 229, 230, 231, 232, 0, 914, 233, 458, 459,
	460, 0, 234, 921, 0, 904, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 907, 905, 906,
	911, 909, 908, 910, 250, 251, 252, 253, 254, 255,
	462, 463, 0, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 261, 262, 0, 263, 0, 264, 265, 0,
	464, 266, 267, 269, 272, 268, 273, 274, 275, 941,
	942, 0, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 467, 279, 280, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 948, 0, 469, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 916, 917, 920,
	927, 0, 918, 295, 0, 0, 0, 213, 294, 296,
	303, 0, 926, 297, 473, 299, 298, 300, 301, 302,
	474, 0, 475, 0, 304, 928, 929, 305, 306, 307,
	930, 308, 309, 0, 0, 310, 311, 312, 313, 974,
	315, 314, 0, 316, 949, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 212, 211,
	324, 325, 327, 328, 326, 933, 329, 330, 332, 331,
	0, 214, 934, 0, 919, 479, 333, 334, 0, 335,
	336, 337, 0, 979, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 944, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 485, 981, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 912, 402, 382, 383, 403, 938,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 945, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	946, 430, 947, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 913, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 987, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 915,
	0, 971, 0, 976, 221, 222, 223, 454, 455, 224,
	456, 225, 226, 457, 0, 227, 228, 229, 230, 231,
	232, 0, 914, 233, 458, 459, 460, 0, 234, 921,
	0, 904, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	924, 248, 249, 907, 905, 906, 911, 909, 908, 910,
	250, 251, 252, 253, 254, 255, 462, 463, 0, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 261, 262,
	0, 263, 0, 264, 265, 0, 464, 266, 267, 269,
	272, 268, 273, 274, 275, 941, 942, 0, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 467, 279, 280,
	0, 281, 0, 282, 0, 0, 925, 283, 284, 0,
	285, 948, 0, 469, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 916, 917, 920, 927, 0, 918, 295,
	0, 0, 0, 213, 294, 296, 303, 0, 926, 297,
	473, 299, 298, 300, 301, 302, 474, 0, 475, 0,
	304, 928, 929, 305, 306, 307, 930, 308, 309, 0,
	0, 310, 311, 312, 313, 974, 315, 314, 0, 316,
	949, 931, 317, 318, 932, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 212, 211, 324, 325, 327, 328,
	326, 933, 329, 330, 332, 331, 0, 214, 934, 0,
	919, 479, 333, 334, 0, 335, 336, 337, 0, 979,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	944, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 937, 376, 377, 378, 379, 485, 981,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	912, 402, 382, 383, 403, 938, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 945, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 946, 430, 947, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 913, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 987, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 915, 0, 971, 0, 976,
	221, 222, 223, 454, 455, 224, 456, 225, 226, 457,
	0, 227, 228, 229, 230, 231, 232, 0, 914, 233,
	458, 459, 460, 0, 234, 921, 0, 904, 0, 235,
	236, 237, 238, 239, 0, 241, 242, 243, 240, 0,
	244, 0, 245, 246, 247, 0, 924, 248, 249, 907,
	905, 906, 911, 909, 908, 910, 250, 251, 252, 253,
	254, 255, 462, 463, 0, 256, 0, 258, 257, 0,
	259, 0, 0, 260, 261, 262, 0, 263, 0, 264,
	265, 0, 464, 266, 267, 269, 272, 268, 273, 274,
	275, 941, 942, 0, 210, 0, 0, 0, 0, 0,
	276, 277, 278, 467, 279, 280, 0, 281, 0, 282,
	0, 0, 925, 283, 284, 0, 285, 948, 0, 469,
	286, 0, 287, 288, 289, 290, 291, 292, 293, 916,
	917, 920, 927, 0, 918, 295, 0, 0, 0, 213,
	294, 296, 303, 0, 926, 297, 473, 299, 298, 300,
	301, 302, 474, 0, 475, 0, 304, 928, 929, 305,
	306, 307, 930, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 949, 931, 317, 318,
	932, 0, 319, 320, 0, 0, 321, 0, 322, 323,
	212, 211, 324, 325, 327, 328, 326, 933, 329, 330,
	332, 331, 0, 214, 934, 0, 919, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 944, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 937,
	376, 377, 378, 379, 485, 981, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 912, 402, 382, 383,
	403, 938, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 945, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 270,
	425, 271, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 946, 430, 947, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 913,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 797, 0, 1143, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 453, 0, 1461, 0, 0, 221, 222,
	223, 454, 455, 224, 456, 225, 226, 457, 0, 227,
	228, 229, 230, 231, 232, 0, 0, 233, 458, 459,
	460, 0, 234, 461, 0, 1047, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	462, 463, 0, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 261, 262, 0, 263, 0, 264, 265, 0,
	464, 266, 267, 269, 272, 268, 273, 274, 275, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 467, 279, 280, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 468, 0, 469, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 470, 471, 472,
	927, 0, 476, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 926, 297, 473, 299, 298, 300, 301, 302,
	474, 0, 475, 0, 304, 928, 929, 305, 306, 307,
	930, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 477, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 212, 211,
	324, 325, 327, 328, 326, 933, 329, 330, 332, 331,
	0, 0, 934, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 176, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 938,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 178, 420, 421, 422, 423, 424, 270, 425, 271,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1287, 494, 495, 0, 447, 446,
	496, 1284, 0, 1143, 170, 448, 449, 497, 450, 451,
	452, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 453, 0, 148, 0, 0, 221, 222, 223, 454,
	455, 224, 456, 225, 226, 457, 0, 227, 228, 229,
	230, 231, 232, 0, 0, 233, 458, 459, 460, 0,
	234, 461, 0, 1047, 0, 235, 236, 237, 238, 239,
	0, 241, 242, 243, 240, 0, 244, 0, 245, 246,
	247, 0, 924, 248, 249, 0, 0, 0, 0, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 462, 463,
	0, 256, 0, 258, 257, 0, 259, 0, 0, 260,
	261, 262, 0, 263, 0, 264, 265, 0, 464, 266,
	267, 269, 272, 268, 273, 274, 275, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 276, 277, 278, 467,
	279, 280, 0, 281, 0, 282, 0, 0, 925, 283,
	284, 0, 285, 468, 0, 469, 286, 0, 287, 288,
	289, 290, 291, 292, 293, 470, 471, 472, 927, 0,
	476, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	926, 297, 473, 299, 298, 300, 301, 302, 474, 0,
	475, 0, 304, 928, 929, 305, 306, 307, 930, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 477, 931, 317, 318, 932, 0, 319, 320,
	0, 0, 321, 0, 322, 323, 212, 211, 324, 325,
	327, 328, 326, 933, 329, 330, 332, 331, 0, 0,
	934, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 937, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 176, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 938, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 178,
	420, 421, 422, 423, 424, 270, 425, 271, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 1287, 494, 495, 0, 447, 446, 496, 0,
	0, 0, 170, 448, 449, 497, 450, 451, 452, 0,
	171, 0, 0, 0, 0, 1143, 1142, 0, 0, 0,
	0, 1140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 221, 222,
	223, 454, 455, 224, 456, 225, 226, 457, 0, 227,
	228, 229, 230, 231, 232, 0, 0, 233, 458, 459,
	460, 0, 234, 461, 0, 1047, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 924, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	462, 463, 0, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 261, 262, 0, 263, 0, 264, 265, 0,
	464, 266, 267, 269, 272, 268, 273, 274, 275, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 276, 277,
	278, 467, 279, 280, 0, 281, 0, 282, 0, 0,
	925, 283, 284, 0, 285, 468, 0, 469, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 470, 471, 472,
	927, 0, 476, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 926, 297, 473, 299, 298, 300, 301, 302,
	474, 0, 475, 0, 304, 928, 929, 305, 306, 307,
	930, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 477, 931, 317, 318, 932, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 212, 211,
	324, 325, 327, 328, 326, 933, 329, 330, 332, 331,
	0, 0, 934, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 937, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 938,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 270, 425, 271,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 1143, 1142, 0, 0, 0, 0, 1140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 2636, 220, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 221, 222, 223, 454, 455, 224,
	456, 225, 226, 457, 0, 227, 228, 229, 230, 231,
	232, 0, 0, 233, 458, 459, 460, 0, 234, 461,
	0, 1047, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	924, 248, 249, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 462, 463, 0, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 261, 262,
	0, 263, 0, 264, 265, 0, 464, 266, 267, 269,
	272, 268, 273, 274, 275, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 467, 279, 280,
	0, 281, 0, 282, 0, 0, 925, 283, 284, 0,
	285, 468, 0, 469, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 470, 471, 472, 927, 0, 476, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 926, 297,
	473, 299, 298, 300, 301, 302, 474, 0, 475, 0,
	304, 928, 929, 305, 306, 307, 930, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	477, 931, 317, 318, 932, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 212, 211, 324, 325, 327, 328,
	326, 933, 329, 330, 332, 331, 0, 0, 934, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 937, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 938, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 987, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 915, 0, 0, 0, 1291,
	221, 222, 223, 454, 455, 224, 456, 225, 226, 457,
	0, 227, 228, 229, 230, 231, 232, 0, 914, 233,
	458, 459, 460, 0, 234, 921, 0, 904, 0, 235,
	236, 237, 238, 239, 0, 241, 242, 243, 240, 0,
	244, 0, 245, 246, 247, 0, 924, 248, 249, 907,
	905, 906, 911, 909, 908, 910, 250, 251, 252, 253,
	254, 255, 462, 463, 0, 256, 0, 258, 257, 0,
	259, 0, 0, 260, 261, 262, 0, 263, 0, 264,
	265, 0, 464, 266, 267, 269, 272, 268, 273, 274,
	275, 941, 942, 0, 210, 0, 0, 0, 0, 0,
	276, 277, 278, 467, 279, 280, 0, 281, 0, 282,
	0, 0, 925, 283, 284, 0, 285, 948, 0, 469,
	286, 0, 287, 288, 289, 290, 291, 292, 293, 916,
	917, 920, 927, 0, 918, 295, 0, 0, 0, 213,
	294, 296, 303, 0, 926, 297, 473, 299, 298, 300,
	301, 302, 474, 0, 475, 0, 304, 928, 929, 305,
	306, 307, 930, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 949, 931, 317, 318,
	932, 0, 319, 320, 0, 0, 321, 0, 322, 323,
	212, 211, 324, 325, 327, 328, 326, 933, 329, 330,
	332, 331, 0, 214, 934, 0, 919, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 944, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 937,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 912, 402, 382, 383,
	403, 938, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 945, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 270,
	425, 271, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 946, 430, 947, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 913,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 797, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 221, 222,
	223, 454, 455, 224, 456, 225, 226, 457, 0, 227,
	228, 229, 230, 231, 232, 0, 0, 233, 458, 459,
	460, 0, 234, 461, 0, 0, 0, 235, 236, 237,
	238, 239, 0, 241, 242, 243, 240, 0, 244, 0,
	245, 246, 247, 0, 0, 248, 249, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	462, 463, 0, 256, 0, 258, 257, 0, 259, 0,
	0, 260, 261, 262, 0, 263, 0, 264, 265, 0,
	464, 266, 267, 269, 272, 268, 273, 274, 275, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 276, 277,
	278, 467, 279, 280, 0, 281, 0, 282, 0, 0,
	0, 283, 284, 0, 285, 468, 0, 469, 286, 0,
	287, 288, 289, 290, 291, 292, 293, 470, 471, 472,
	0, 0, 476, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 473, 299, 298, 300, 301, 302,
	474, 0, 475, 0, 304, 0, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 477, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 0, 322, 323, 0, 0,
	324, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 176, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 178, 420, 421, 422, 423, 424, 270, 425, 271,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1287, 494, 495, 0, 447, 446,
	496, 207, 0, 0, 170, 448, 449, 497, 450, 451,
	452, 0, 171, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 453,
	0, 0, 0, 148, 221, 222, 223, 454, 455, 224,
	456, 225, 226, 457, 0, 227, 228, 229, 230, 231,
	232, 0, 0, 233, 458, 459, 460, 0, 234, 461,
	0, 0, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	0, 248, 249, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 462, 463, 0, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 261, 262,
	0, 263, 0, 264, 265, 0, 464, 266, 267, 269,
	272, 268, 273, 274, 275, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 467, 279, 280,
	0, 281, 0, 282, 0, 0, 0, 283, 284, 0,
	285, 468, 0, 469, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 470, 471, 472, 0, 0, 476, 295,
	0, 0, 0, 213, 294, 296, 303, 0, 0, 297,
	473, 299, 298, 300, 301, 302, 474, 0, 475, 0,
	304, 0, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	477, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 212, 211, 324, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 214, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 270, 425, 271, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 207, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 453, 0, 0, 0, 1560,
	221, 222, 223, 454, 455, 224, 456, 225, 226, 457,
	0, 227, 228, 229, 230, 231, 232, 0, 0, 233,
	458, 459, 460, 0, 234, 461, 0, 0, 0, 235,
	236, 237, 238, 239, 0, 241, 242, 243, 240, 0,
	244, 0, 245, 246, 247, 0, 0, 248, 249, 0,
	0, 0, 0, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 462, 463, 0, 256, 0, 258, 257, 0,
	259, 0, 0, 260, 261, 262, 0, 263, 0, 264,
	265, 0, 464, 266, 267, 269, 272, 268, 273, 274,
	275, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	276, 277, 278, 467, 279, 280, 0, 281, 0, 282,
	0, 0, 0, 283, 284, 0, 285, 468, 0, 469,
	286, 0, 287, 288, 289, 290, 291, 292, 293, 470,
	471, 472, 0, 0, 476, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 473, 299, 298, 300,
	301, 302, 474, 0, 475, 0, 304, 0, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 477, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 0, 322, 323,
	0, 0, 324, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 270,
	425, 271, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 207, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 453, 0, 0, 0, 2255, 221, 222, 223, 454,
	455, 224, 456, 225, 226, 457, 0, 227, 228, 229,
	230, 231, 232, 0, 0, 233, 458, 459, 460, 0,
	234, 461, 0, 0, 0, 235, 236, 237, 238, 239,
	0, 241, 242, 243, 240, 0, 244, 0, 245, 246,
	247, 0, 0, 248, 249, 0, 0, 0, 0, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 462, 463,
	0, 256, 0, 258, 257, 0, 259, 0, 0, 260,
	261, 262, 0, 263, 0, 264, 265, 0, 464, 266,
	267, 269, 272, 268, 273, 274, 275, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 276, 277, 278, 467,
	279, 280, 0, 281, 0, 282, 0, 0, 0, 283,
	284, 0, 285, 468, 0, 469, 286, 0, 287, 288,
	289, 290, 291, 292, 293, 470, 471, 472, 0, 0,
	476, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 473, 299, 298, 300, 301, 302, 474, 0,
	475, 0, 304, 0, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 477, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 0, 322, 323, 0, 0, 324, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 270, 425, 271, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 674,
	0, 566, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 453,
	0, 2708, 0, 0, 221, 222, 223, 454, 455, 224,
	456, 225, 226, 457, 0, 227, 228, 229, 230, 231,
	232, 0, 0, 233, 458, 459, 460, 0, 234, 461,
	0, 0, 0, 235, 236, 237, 238, 239, 0, 241,
	242, 243, 240, 0, 244, 0, 245, 246, 247, 0,
	0, 248, 249, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 572, 253, 254, 255, 462, 463, 0, 256,
	0, 258, 257, 0, 259, 0, 0, 260, 261, 262,
	0, 263, 0, 264, 265, 0, 464, 266, 267, 269,
	272, 268, 273, 274, 275, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 276, 277, 278, 467, 279, 280,
	0, 281, 0, 282, 0, 0, 0, 283, 284, 0,
	285, 468, 0, 469, 286, 0, 287, 288, 289, 290,
	291, 292, 293, 470, 471, 472, 0, 0, 476, 295,
	0, 0, 0, 213, 294, 296, 303, 0, 0, 297,
	473, 299, 298, 300, 301, 302, 474, 0, 475, 0,
	304, 0, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	477, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 0, 322, 323, 212, 211, 324, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 214, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 571, 420, 421,
	422, 423, 424, 270, 425, 271, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 0, 565, 0,
	566, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 575, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 572, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 214, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 571, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 566, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 575, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 572, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 1832, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 571, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 566, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 575, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 572, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	214, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	571, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 207, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 575, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 213, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 214, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 1312, 0, 1143, 1142, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 1047, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 924, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 1311, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 925,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 927,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 926, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 928, 929, 305, 306, 307, 930,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 931, 317, 318, 932, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 933, 329, 330, 332, 331, 0,
	0, 934, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 1310, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 937, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 938, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	1282, 0, 1143, 1142, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 1047, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 924, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 925, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1281, 471, 472, 927, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 926,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 928, 929, 305, 306, 307, 930, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 931, 317, 318, 932, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 933, 329, 330, 332, 331, 0, 0, 934,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 937, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 938, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 1278, 0,
	1143, 1142, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	1047, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 1277, 471, 472, 927, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 926, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	928, 929, 305, 306, 307, 930, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	933, 329, 330, 332, 331, 0, 0, 934, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 938, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 1216, 0, 1143, 1142,
	0, 0, 0, 0, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 1047, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 924, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 925, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	1215, 471, 472, 927, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 926, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 928, 929,
	305, 306, 307, 930, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 931, 317,
	318, 932, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 933, 329,
	330, 332, 331, 0, 0, 934, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	937, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 938, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 1213, 0, 1143, 1142, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 1047, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 1212, 471,
	472, 927, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 926, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 928, 929, 305, 306,
	307, 930, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 933, 329, 330, 332,
	331, 0, 0, 934, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	938, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 1136, 0, 1143, 1142, 0, 0, 0, 0,
	1140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 1047, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 924, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 925,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 1138, 471, 472, 927,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 926, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 928, 929, 305, 306, 307, 930,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 931, 317, 318, 932, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 933, 329, 330, 332, 331, 0,
	0, 934, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 937, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 938, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	1143, 1142, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	1047, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 924,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 925, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 927, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 926, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	928, 929, 305, 306, 307, 930, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	931, 317, 318, 932, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	933, 329, 330, 332, 331, 0, 0, 934, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 937, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 938, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 1143, 1142, 0, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 1047, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 924, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 925, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 927, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 926, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 928, 929, 305, 306,
	307, 930, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 931, 317, 318, 932,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 933, 329, 330, 332,
	331, 0, 0, 934, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 937, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	938, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 1143, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 1047, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 924, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 925, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 927, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 926, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 928, 929,
	305, 306, 307, 930, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 931, 317,
	318, 932, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 933, 329,
	330, 332, 331, 0, 0, 934, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	937, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 938, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	207, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 2150, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 2147, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 2290, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 2153, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 2287, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 2289,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 2286, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 2152, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 2288, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 1355, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	213, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 214, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 1358, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 1356, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 1357, 446, 496, 1131, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 1133, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 213, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 214, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 979, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 1128, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 1130, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	214, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 979, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	1035, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1037, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	979, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	214, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 979, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	2221, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	2150, 234, 461, 0, 0, 2144, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 2147, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 2153, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 2143, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 2152, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	2151, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	1818, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	214, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	1757, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	1751, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1750, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 1746, 0,
	207, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 1748, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 214, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 1271, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	1270, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	213, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 214, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 1268, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 210, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 1267, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 213, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 212,
	211, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 214, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 1265, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 210, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 1264, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 213, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 212, 211, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	214, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	1261, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1260, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 213, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 212, 211, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 214, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 1236, 0,
	207, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 214, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 1153, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	1155, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	213, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 212, 211, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 214, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	207, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 213, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 212, 211, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 214, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 528, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 527, 219,
	517, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 520, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 521, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 522, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 516, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 517, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 520, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 521, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 522, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 207, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 520, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 521, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 522, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 666, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 665, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 505, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 504, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 503, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 207, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 2088, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 207, 2277, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 2827, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	207, 2277, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	2274, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 207, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 215,
	216, 217, 218, 219, 1824, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 1816, 0,
	207, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 548, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 1015, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 549, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 545, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 544, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 1769, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 1768, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 548, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 538, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 549, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 545, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 1290, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 544, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	1275, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1274, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 1224, 0,
	207, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 1223, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 1208, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 1147, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 548, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 1015,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 549, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 545, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 544, 489, 490, 427, 0, 0, 428, 1016, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 207, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 215, 216, 217, 218, 219, 998, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 0, 447,
	446, 496, 548, 0, 207, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 538, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 536, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 470, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	537, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 549, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 539, 380, 0, 381, 385, 386, 545, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 540, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 544, 489, 490, 427, 0, 0, 428, 542, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	532, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 470, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 533, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 530, 0,
	207, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 524, 0, 207, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 500, 0, 207, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 207, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	207, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 2533, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 207, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 2531, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 2520, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 207, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 2238, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 207, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 286, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 533,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	207, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 453, 0,
	1781, 0, 0, 221, 222, 223, 454, 455, 224, 456,
	225, 226, 457, 0, 227, 228, 229, 230, 231, 232,
	0, 0, 233, 458, 459, 460, 0, 234, 461, 0,
	0, 0, 235, 236, 237, 238, 239, 0, 241, 242,
	243, 240, 0, 244, 0, 245, 246, 247, 0, 0,
	248, 249, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 462, 463, 0, 256, 0,
	258, 257, 0, 259, 0, 0, 260, 261, 262, 0,
	263, 0, 264, 265, 0, 464, 266, 267, 269, 272,
	268, 273, 274, 275, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 276, 277, 278, 467, 279, 280, 0,
	281, 0, 282, 0, 0, 0, 283, 284, 0, 285,
	468, 0, 469, 286, 0, 287, 288, 289, 290, 291,
	292, 293, 470, 471, 472, 0, 0, 476, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 473,
	299, 298, 300, 301, 302, 474, 0, 475, 0, 304,
	0, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 477,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	0, 322, 323, 0, 0, 324, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	0, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 270, 425, 271, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 207, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 221, 222, 223, 454, 455,
	224, 456, 225, 226, 457, 0, 227, 228, 229, 230,
	231, 232, 0, 0, 233, 458, 459, 460, 0, 234,
	461, 0, 0, 0, 235, 236, 237, 238, 239, 0,
	241, 242, 243, 240, 0, 244, 0, 245, 246, 247,
	0, 0, 248, 249, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 462, 463, 0,
	256, 0, 258, 257, 0, 259, 0, 0, 260, 261,
	262, 0, 263, 0, 264, 265, 0, 464, 266, 267,
	269, 272, 268, 273, 274, 275, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 276, 277, 278, 467, 279,
	280, 0, 281, 0, 282, 0, 0, 0, 283, 284,
	0, 285, 468, 0, 469, 286, 0, 287, 288, 289,
	290, 291, 292, 293, 1244, 471, 472, 0, 0, 476,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 473, 299, 298, 300, 301, 302, 474, 0, 475,
	0, 304, 0, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 477, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 0, 322, 323, 0, 0, 324, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 270, 425, 271, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 207, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 221, 222, 223,
	454, 455, 224, 456, 225, 226, 457, 0, 227, 228,
	229, 230, 231, 232, 0, 0, 233, 458, 459, 460,
	0, 234, 461, 0, 0, 0, 235, 236, 237, 238,
	239, 0, 241, 242, 243, 240, 0, 244, 0, 245,
	246, 247, 0, 0, 248, 249, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 462,
	463, 0, 256, 0, 258, 257, 0, 259, 0, 0,
	260, 261, 262, 0, 263, 0, 264, 265, 0, 464,
	266, 267, 269, 272, 268, 273, 274, 275, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 276, 277, 278,
	467, 279, 280, 0, 281, 0, 282, 0, 0, 0,
	283, 284, 0, 285, 468, 0, 469, 286, 0, 287,
	288, 289, 290, 291, 292, 293, 1186, 471, 472, 0,
	0, 476, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 473, 299, 298, 300, 301, 302, 474,
	0, 475, 0, 304, 0, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 477, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 0, 322, 323, 0, 0, 324,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 270, 425, 271, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 207, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 221,
	222, 223, 454, 455, 224, 456, 225, 226, 457, 0,
	227, 228, 229, 230, 231, 232, 0, 0, 233, 458,
	459, 460, 0, 234, 461, 0, 0, 0, 235, 236,
	237, 238, 239, 0, 241, 242, 243, 240, 0, 244,
	0, 245, 246, 247, 0, 0, 248, 249, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 462, 463, 0, 256, 0, 258, 257, 0, 259,
	0, 0, 260, 261, 262, 0, 263, 0, 264, 265,
	0, 464, 266, 267, 269, 272, 268, 273, 274, 275,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 276,
	277, 278, 467, 279, 280, 0, 281, 0, 282, 0,
	0, 0, 283, 284, 0, 285, 468, 0, 469, 286,
	0, 287, 288, 289, 290, 291, 292, 293, 470, 471,
	472, 0, 0, 476, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 473, 299, 298, 300, 301,
	302, 474, 0, 475, 0, 304, 0, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 477, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 0, 322, 323, 0,
	0, 324, 325, 327, 328, 326, 0, 329, 330, 332,
	331, 0, 0, 0, 0, 478, 479, 333, 334, 0,
	335, 336, 337, 0, 0, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 482, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 484, 953,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 0, 376,
	377, 378, 379, 485, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 392, 394, 395,
	396, 393, 397, 400, 401, 0, 402, 382, 383, 403,
	0, 404, 486, 405, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 415, 411, 412, 413, 487, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 270, 425,
	271, 426, 0, 488, 489, 490, 427, 0, 0, 428,
	429, 491, 430, 492, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 493, 494, 495, 207, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 221, 222, 223, 454, 455, 224, 456, 225, 226,
	457, 0, 227, 228, 229, 230, 231, 232, 0, 0,
	233, 458, 459, 460, 0, 234, 461, 0, 0, 0,
	235, 236, 237, 238, 239, 0, 241, 242, 243, 240,
	0, 244, 0, 245, 246, 247, 0, 0, 248, 249,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 462, 463, 0, 256, 0, 258, 257,
	0, 259, 0, 0, 260, 261, 262, 0, 263, 0,
	264, 265, 0, 464, 266, 267, 269, 272, 268, 273,
	274, 275, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 276, 277, 278, 467, 279, 280, 0, 281, 0,
	282, 0, 0, 0, 283, 284, 0, 285, 468, 0,
	469, 0, 0, 287, 288, 289, 290, 291, 292, 293,
	470, 471, 472, 0, 0, 476, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 473, 299, 298,
	300, 301, 302, 474, 0, 475, 0, 304, 0, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 477, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 0, 322,
	323, 0, 0, 324, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 0, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 0, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 0, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 0, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	270, 425, 271, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 1397, 1398, 0, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1399, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 1397,
	1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 1423, 1424, 1425,
	0, 1399, 0, 0, 0, 0, 1405, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1414, 1415, 0, 0, 0,
	0, 1422, 1423, 1424, 1425, 0, 0, 0, 0, 0,
	1435, 1405, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 1437, 1447, 0,
	0, 1427, 1428, 1429, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 1426, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 1397, 1398, 0, 1430, 1431,
	1432, 1440, 1441, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 1438, 0, 0, 0,
	0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418, 1417,
	1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 0, 1399, 0, 0,
	2680, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 1400, 0, 1436, 1446,
	0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408,
	1409, 1401, 1402, 1403, 1404, 1406, 1407, 1422, 1423, 1424,
	1425, 0, 1399, 0, 0, 2397, 0, 1405, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 0,
	0, 0, 1422, 1423, 1424, 1425, 0, 0, 0, 0,
	0, 1435, 1405, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 1437, 1447,
	0, 0, 1427, 1428, 1429, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 0, 0, 0, 0,
	0, 1414, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 1426,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 1397, 1398, 0, 1430,
	1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 1438, 0, 0,
	0, 0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418,
	1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403,
	1404, 1406, 1407, 0, 0, 0, 0, 0, 1399, 0,
	0, 2396, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 0, 0, 0,
	0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1400, 0, 1436,
	1446, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410,
	1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 1422, 1423,
	1424, 1425, 0, 1399, 0, 0, 2393, 0, 1405, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 1447, 0, 0, 1427, 1428,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 1422, 1423, 1424, 1425, 0, 0, 0,
	0, 0, 1435, 1405, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 1437,
	1447, 0, 0, 1427, 1428, 1429, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 0, 0, 0,
	0, 0, 1414, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	1426, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 1397, 1398, 0,
	1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 1438, 0,
	0, 0, 0, 1400, 0, 1436, 1446, 0, 1411, 1412,
	1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402,
	1403, 1404, 1406, 1407, 0, 0, 0, 0, 0, 1399,
	0, 0, 2392, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 1416, 0, 0, 0, 0, 0,
	0, 0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1400, 0,
	1436, 1446, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0,
	1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 1422,
	1423, 1424, 1425, 0, 1399, 0, 0, 2391, 0, 1405,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 1447, 0, 0, 1427,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 1422, 1423, 1424, 1425, 0, 0,
	0, 0, 0, 1435, 1405, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	1437, 1447, 0, 0, 1427, 1428, 1429, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 0, 0,
	0, 0, 0, 1414, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 1426, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 1397, 1398,
	0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 1438,
	0, 0, 0, 0, 1400, 0, 1436, 1446, 0, 1411,
	1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401,
	1402, 1403, 1404, 1406, 1407, 0, 0, 0, 0, 0,
	1399, 0, 0, 1975, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 0,
	0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432, 1440,
	1441, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 1400,
	0, 1436, 1446, 0, 1411, 1412, 1418, 1417, 1413, 1439,
	0, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407,
	1422, 1423, 1424, 1425, 3220, 1399, 0, 0, 0, 0,
	1405, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 1447, 0, 0,
	1427, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 0, 0, 0, 0, 0, 1414,
	1415, 0, 0, 0, 0, 1422, 1423, 1424, 1425, 0,
	0, 0, 0, 0, 1435, 1405, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 1426, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 1397,
	1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	1438, 0, 0, 0, 0, 1400, 0, 1436, 1446, 0,
	1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409,
	1401, 1402, 1403, 1404, 1406, 1407, 0, 0, 0, 0,
	3216, 1399, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1400, 0, 1436, 1446, 0, 1411, 1412, 1418, 1417, 1413,
	1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406,
	1407, 1422, 1423, 1424, 1425, 3151, 1399, 0, 0, 0,
	0, 1405, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 1447, 0,
	0, 1427, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 0, 0, 0, 1422, 1423, 1424, 1425,
	0, 0, 0, 0, 0, 1435, 1405, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1414, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 1426, 0, 0, 0, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 1438, 0, 0, 0, 0, 1400, 0, 1436, 1446,
	0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408,
	1409, 1401, 1402, 1403, 1404, 1406, 1407, 0, 0, 0,
	0, 3150, 1399, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 1397, 1398, 0, 1430, 1431,
	1432, 1440, 1441, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418, 1417,
	1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 1422, 1423, 1424, 1425, 3059, 1399, 0, 0,
	0, 0, 1405, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 1447,
	0, 0, 1427, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 0, 0, 0, 0,
	0, 1414, 1415, 0, 0, 0, 0, 1422, 1423, 1424,
	1425, 0, 0, 0, 0, 0, 1435, 1405, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1426, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 1438, 0, 0, 0, 0, 1400, 0, 1436,
	1446, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410,
	1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0, 0,
	0, 0, 2977, 1399, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 1397, 1398, 0, 1430,
	1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418,
	1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403,
	1404, 1406, 1407, 1422, 1423, 1424, 1425, 2933, 1399, 0,
	0, 0, 0, 1405, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	1447, 0, 0, 1427, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 0, 0, 0,
	0, 0, 1414, 1415, 0, 0, 0, 0, 1422, 1423,
	1424, 1425, 0, 0, 0, 0, 0, 1435, 1405, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 1437, 1447, 0, 0, 1427, 1428,
	1429, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 1426, 0, 0, 0, 1420,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 1438, 0, 0, 0, 0, 1400, 0,
	1436, 1446, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0,
	1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0,
	0, 0, 0, 2932, 1399, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 0, 0, 0, 1397, 1398, 0,
	1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1400, 0, 1436, 1446, 0, 1411, 1412,
	1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402,
	1403, 1404, 1406, 1407, 1422, 1423, 1424, 1425, 2931, 1399,
	0, 0, 0, 0, 1405, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 1447, 0, 0, 1427, 1428, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 0, 0,
	0, 0, 0, 1414, 1415, 0, 0, 0, 0, 1422,
	1423, 1424, 1425, 0, 0, 0, 0, 0, 1435, 1405,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 1437, 1447, 0, 0, 1427,
	1428, 1429, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 0, 0, 0, 0, 0, 1414, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 1426, 0, 0, 0,
	1420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432, 1440,
	1441, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 1438, 0, 0, 0, 0, 1400,
	0, 1436, 1446, 0, 1411, 1412, 1418, 1417, 1413, 1439,
	0, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407,
	0, 0, 0, 0, 2897, 1399, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	1416, 0, 0, 0, 0, 0, 0, 0, 1397, 1398,
	0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 1400, 0, 1436, 1446, 0, 1411,
	1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401,
	1402, 1403, 1404, 1406, 1407, 1422, 1423, 1424, 1425, 2713,
	1399, 0, 0, 0, 0, 1405, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 0, 0, 0,
	1422, 1423, 1424, 1425, 0, 0, 0, 0, 0, 1435,
	1405, 3306, 0, 0, 0, 0, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 1437, 1447, 0, 0,
	1427, 1428, 1429, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 0, 0, 0, 0, 0, 1414,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 1426, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 1438, 0, 0, 2321, 0,
	1400, 0, 1436, 1446, 0, 1411, 1412, 1418, 1417, 1413,
	1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406,
	1407, 0, 0, 2350, 0, 0, 1399, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 1397,
	1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 2322,
	0, 0, 0, 0, 0, 1400, 0, 1436, 1446, 0,
	1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409,
	1401, 1402, 1403, 1404, 1406, 1407, 1422, 1423, 1424, 1425,
	0, 1399, 0, 0, 0, 0, 1405, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	0, 0, 0, 0, 0, 1414, 1415, 0, 0, 0,
	0, 1422, 1423, 1424, 1425, 0, 0, 0, 0, 0,
	1435, 1405, 0, 2436, 0, 0, 2435, 1420, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 1437, 1447, 0,
	0, 1427, 1428, 1429, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 1426, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2063, 0,
	0, 1421, 0, 0, 0, 1397, 1398, 0, 1430, 1431,
	1432, 1440, 1441, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 1438, 0, 2062, 0,
	0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418, 1417,
	1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 1400, 0, 1436, 1446,
	0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408,
	1409, 1401, 1402, 1403, 1404, 1406, 1407, 1422, 1423, 1424,
	1425, 0, 1399, 0, 0, 0, 0, 1405, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 0,
	0, 0, 1422, 1423, 1424, 1425, 0, 0, 0, 0,
	0, 1435, 1405, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 1437, 1447,
	0, 0, 1427, 1428, 1429, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 0, 0, 0, 0,
	0, 1414, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 1426,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 794, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 1397, 1398, 0, 1430,
	1431, 1432, 1440, 1441, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 1438, 0, 0,
	0, 0, 1400, 0, 1436, 1446, 0, 1411, 1412, 1418,
	1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403,
	1404, 1406, 1407, 0, 0, 0, 0, 0, 1399, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0, 1410,
	1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 1422, 1423,
	1424, 1425, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1397, 1398, 0, 1430, 1431, 1432,
	1440, 1441, 1442, 0, 1437, 1447, 0, 0, 1427, 1428,
	1429, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 1446, 0, 0, 0, 0, 0, 1443,
	1444, 0, 0, 0, 0, 0, 0, 1414, 1415, 0,
	0, 0, 0, 0, 0, 0, 1399, 0, 0, 0,
	0, 0, 1435, 0, 1419, 0, 0, 0, 0, 1420,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1422, 1423, 1424, 1425,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 0,
	1426, 2442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 0,
	0, 0, 1437, 1447, 0, 0, 1427, 1428, 1429, 0,
	0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441, 1442,
	0, 0, 0, 1438, 0, 0, 0, 1443, 1444, 0,
	1433, 0, 0, 0, 2437, 1414, 1415, 1400, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 2703, 0, 1420, 0, 0,
	0, 0, 0, 1399, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1445, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1411, 1412,
	1418, 1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402,
	1403, 1404, 1406, 1407, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 1422, 1423, 1424, 1425, 0, 0, 0,
	0, 0, 0, 1405, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 1398,
	0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0, 1437,
	1447, 1438, 0, 1427, 1428, 1429, 0, 1433, 0, 0,
	0, 0, 0, 0, 1400, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 0, 0, 0,
	0, 0, 1414, 1415, 0, 0, 0, 0, 0, 0,
	1399, 0, 0, 0, 0, 0, 0, 1435, 1419, 0,
	0, 0, 0, 0, 1420, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 1434, 1411, 1412, 1418, 1417,
	1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403, 1404,
	1406, 1407, 0, 0, 0, 0, 0, 0, 0, 0,
	1422, 1423, 1424, 1425, 0, 0, 0, 0, 0, 0,
	1405, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 0, 0, 1437, 1447, 0, 0,
	1427, 1428, 1429, 0, 0, 1397, 1398, 0, 1430, 1431,
	1432, 1440, 1441, 1442, 0, 0, 0, 0, 1438, 0,
	0, 1443, 1444, 0, 1433, 0, 0, 0, 2390, 1414,
	1415, 1400, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 1445, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2404, 0,
	1436, 0, 0, 1411, 1412, 1418, 1417, 1413, 1439, 0,
	1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407, 0,
	0, 0, 1426, 0, 0, 0, 0, 1422, 1423, 1424,
	1425, 0, 0, 0, 0, 0, 0, 1405, 0, 0,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1397, 1398, 0, 1430, 1431, 1432, 1440, 1441,
	1442, 0, 0, 1437, 1447, 1438, 0, 1427, 1428, 1429,
	0, 1433, 0, 0, 0, 0, 0, 0, 1400, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 0,
	0, 0, 0, 0, 1399, 0, 0, 0, 0, 0,
	0, 1435, 1419, 0, 0, 0, 0, 0, 1420, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 1434,
	1411, 1412, 1418, 1417, 1413, 1439, 0, 1410, 1408, 1409,
	1401, 1402, 1403, 1404, 1406, 1407, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 1423, 1424, 1425, 0, 0,
	0, 0, 0, 0, 1405, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 0, 0,
	1437, 1447, 0, 0, 1427, 1428, 1429, 0, 0, 1397,
	1398, 0, 1430, 1431, 1432, 1440, 1441, 1442, 0, 0,
	0, 0, 1438, 0, 0, 1443, 1444, 0, 0, 0,
	0, 0, 0, 1414, 1415, 1400, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 0,
	0, 1399, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1445, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1411, 1412, 1418,
	1417, 1413, 1439, 0, 1410, 1408, 1409, 1401, 1402, 1403,
	1404, 1406, 1407, 0, 0, 0, 1426, 0, 0, 0,
	0, 1422, 1423, 1424, 1425, 0, 0, 0, 0, 0,
	0, 1405, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 1447, 1438,
	0, 1427, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 1420, 0, 704, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 0,
	0, 1436, 0, 0, 1411, 1412, 1418, 1417, 1413, 1439,
	709, 1410, 1408, 1409, 1401, 1402, 1403, 1404, 1406, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 0, 0, 712, 0,
	0, 0, 740, 1426, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 736, 713, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 708, 0, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 715, 716,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	722, 1411, 1412, 1418, 1417, 1413, 1439, 717, 1410, 1408,
	1409, 1401, 1402, 1403, 1404, 1406, 1407, 592, 611, 0,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 593, 0,
	0, 594, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 597,
	731, 0, 598, 621, 0, 0, 0, 624, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 724, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 707,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 725, 0, 0, 0, 741, 742, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 0,
	728, 0, 620, 0, 0, 0, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 599, 0, 0,
	0, 732, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 619, 0, 618, 0, 0, 0,
	0, 607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 0, 0, 0, 0, 614, 0, 0,
	0, 0, 625, 0, 622, 0, 0, 0, 612,
}
var sqlPact = [...]int{

	5207, -1000, -24, -1000, -1000, -1000, -1000, -1000, 139, 138,
	137, 136, 132, 129, 122, 121, 111, -1000, -1000, -1000,
	110, -1000, -1000, 109, -1000, -1000, 108, 107, 105, -1000,
	104, 102, -1000, -1000, -1000, -1000, 101, 99, 98, 45676,
	1566, 55842, 47710, 1601, 2015, 46492, 55434, 46084, 55026, 54618,
	97, -1000, 54210, 94, 93, 90, -1000, -1000, 88, 2432,
	33016, 87, 86, 85, 1789, 83, 80, -1000, 78, -1000,
	66572, 1071, -1000, 77, 74, -1000, 7522, 299, 47302, 2003,
	72, 70, 32607, 1952, -1000, -1000, 1096, -1000, -1000, 67,
	62, 61, 60, 58, 57, 56, 55, 54, -1000, 53,
	52, 48, 43, 41, 40, 39, 38, 36, 35, 34,
	33, 32, 30, 29, 25, -1000, 66412, 1327, 1235, 1231,
	1218, 1204, 1200, 744, 23, 22, 20, 19, 18, 8,
	-1000, -1000, 4, 3, 1, -1, -1000, -4, -5, 106,
	-6, -7, -9, -10, -12, 1662, 1971, 1451, 527, 15961,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59862, 56244, -13, -62, -14, -1000, 2293, 740, 27701, 5207,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 369,
	-1000, -1000, -1000, 198, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1317, 582,
	-1000, -1000, -1000, 53802, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 56244, -1000, 1555, 0, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 578, -1000, 1543, 194, 1478, -1000, -1000,
	-1000, -1000, -1000, 56244, -1000, -1000, 2544, 2542, 1406, 577,
	53400, -1000, 1733, -1000, 695, 16392, -1000, 902, -1000, 16392,
	196, -1000, -1000, -1000, -1000, -1000, 39988, 12944, 39580, 39172,
	36730, 52992, 12526, 45274, 910, -1000, -1000, -1000, -1000, -1000,
	-26, 34222, 56244, -1000, 191, -1000, -1000, -1000, -1000, -1000,
	-1000, 23887, 359, 23442, 358, 22997, 303, -1000, -1000, -1000,
	-1000, 2540, 2539, 810, 2538, 2197, 59460, 1290, 2537, 1122,
	884, 756, 2536, 2535, 2534, 2531, 2530, 2529, 2528, 1287,
	52584, 1988, 36312, 35894, 45676, 45676, 1839, 52176, -1000, -1000,
	942, 941, -1000, -1000, -1000, -1000, 2116, 2011, 1981, 44866,
	-1000, -1000, 2527, 2526, 2524, 2523, 2522, 59058, 1228, 2521,
	1729, 2520, 2519, 2518, 2515, 2513, 2512, 2511, 2508, 2507,
	-1000, 44458, 44050, 43642, 43234, 51768, 35476, 35058, -1000, -1000,
	-1000, 29329, 4166, 51360, 30167, 45676, -1000, -1000, 24318, 69,
	-1000, -1000, -1000, 1966, -1000, 24318, 69, -1000, 1307, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1550, 1172, 2395, 34640,
	1421, 1032, 2111, 2504, 1738, 2100, 2096, 2093, 2085, 2071,
	2503, 1106, 2501, 1161, 2500, 2064, 2060, 2417, 1401, 38764,
	2497, 2496, 2254, 2056, 1957, -1000, -1000, -1000, -1000, 1081,
	-1000, -1000, -1000, 40390, -1000, -1000, 1459, -1000, -1000, 1459,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 908, 58254, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1390, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1494, -1000, 1395, -1000, -1000, 2494, 1971,
	1691, 2242, 2242, 2242, 2285, 345, 342, -1000, 106, -1000,
	-1000, 66021, -1000, -1000, 24318, 24318, 24318, 24318, 24318, 1388,
	-1000, -1000, -1000, 575, -1000, -1000, 607, -1000, 574, 502,
	-1000, -1000, -1000, -1000, -1000, -1000, 572, 2419, -1000, 789,
	-1000, -1000, -1000, -1000, 2364, -1000, 15085, -1000, -1000, -1000,
	323, 571, 24318, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 185,
	706, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 486, 1247, 483, 483, 483,
	-1000, -1000, 745, -1000, -1000, -1000, 680, -1000, 677, -1000,
	-1000, -1000, -1000, -1000, 1987, 568, 567, -1000, 563, 562,
	555, -1000, -1000, -1000, 554, 553, 548, 547, 544, 543,
	542, 541, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 741,
	-1000, 539, 534, 532, 531, 529, 528, 513, 511, 507,
	-1000, -1000, -28, 56244, -1000, 369, -28, -1000, -1000, 505,
	-1000, 18130, 18130, 18130, -1000, -1000, 1537, 24318, -1000, 1821,
	-1000, 3976, -240, 661, 28513, -1000, 26870, 661, 614, 31387,
	-1000, 1956, -1000, -1000, 503, 182, -1000, -1000, -1000, 1953,
	56244, 13360, 45676, 45676, -1000, -1000, 24318, -1000, -1000, 37146,
	33820, 56244, 46894, 2325, 8725, 33820, 56244, 1986, -1000, -1000,
	-1000, 56244, -1000, 24318, -1000, 2323, 1719, -34, -1000, -1000,
	-1000, -1000, -1000, 1696, 1765, 838, 1080, -1000, 16392, 2190,
	-1000, -1000, -1000, 173, 13360, -1000, 1480, 2148, 1031, -1000,
	1590, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1196,
	2135, -1000, 1359, 2134, 1188, -1000, -1000, 714, 2119, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1363, -1000,
	-1000, 2211, -1000, -1000, 1700, 2118, -213, 37146, 34222, -30,
	-1000, -1000, -49, -1000, 12108, 66021, -1000, -1000, -1000, 66021,
	667, -1000, -1000, 2104, -1000, 66021, 627, -1000, -1000, 2094,
	-1000, -1000, -1000, 2493, -1000, 2491, 1657, 2490, 2489, 2488,
	-1000, 1129, 1255, 2486, -1000, 2485, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42826, 42418, 755, -1000, 1521, -1000, -1000,
	42010, 711, 1655, -1000, -1000, 1654, -1000, 753, -1000, 2479,
	50952, 1867, 711, 1649, -1000, -1000, -1000, -1000, -1000, 45676,
	-1000, 45676, -1000, 45676, -1000, 1052, -1000, 58656, -240, -1000,
	-1000, -1000, -1000, -1000, 2091, 2477, 2474, 2472, -1000, 56244,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 149,
	2090, -1000, -1000, 149, 2083, -1000, 149, 2080, -1000, 148,
	2078, -1000, -1000, 1441, 2074, -1000, -135, 2072, -1000, -1000,
	-135, 2067, -1000, -43, -1000, -1000, -1000, 740, -1000, 28921,
	50544, 37146, 705, 557, 66021, -1000, 37146, 66021, -1000, -1000,
	50136, 41608, -1000, -1000, 1006, 1742, -1000, -1000, -1000, -1000,
	37146, 37146, -1000, 49728, -1000, -1000, -1000, 1379, 2216, 45676,
	-1000, -1000, 1984, -1000, 33418, 45676, -1000, 45676, -1000, 45676,
	-1000, 45676, -1000, 45676, -1000, -1000, -1000, -1000, -1000, 2121,
	1237, 1213, -1000, 56244, -1000, 56244, -1000, -1000, -1000, 1692,
	-1000, -1000, -1000, -1000, 45676, -1000, -1000, -1000, -1000, -1000,
	-1000, 1983, -1000, 1145, -1000, 988, -1000, -1000, 154, -1000,
	-1000, -34, -1000, 58254, -1000, -1000, 1971, 1691, -1000, 56244,
	-1000, -1000, -1000, 1971, 1578, 1811, 22552, 1779, 24318, 106,
	-1000, -1000, 106, 106, 17699, -1000, -1000, 8725, 8725, 13360,
	928, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318,
	24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318,
	24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318, 24318,
	24318, 24318, 24318, 24318, 24318, 24318, 1792, 24318, 907, 24318,
	24318, 24318, 24318, 1477, -1000, -1000, 1355, 398, 1375, -1000,
	2379, 2379, 2379, 66188, 66188, 478, 2471, 607, -1000, 24318,
	-1000, 69, 24318, 13778, -1000, 2399, 1035, -1000, -1000, 342,
	8376, 1585, -1000, 341, 14223, -1000, -1000, -1000, 15085, 502,
	22107, 24318, 733, 66021, 11692, 1959, 1897, -1000, 2398, -1000,
	-1000, 2364, -1000, -1000, -1000, 925, 923, 922, 916, 495,
	630, 629, 625, 622, 617, 24318, 24318, 24318, 24318, 24318,
	24318, 24318, 24318, -1000, 21676, 21231, 20786, 25611, 20341, 24318,
	15516, 19896, 19451, 56244, -28, 2322, 24318, 181, -1000, 64864,
	-1000, 181, 181, 494, -44, 66021, 1780, 1774, 28107, 1750,
	1397, 1397, 1397, -1000, 493, 599, 661, 9179, 48112, 1408,
	661, 661, 162, 177, 340, 26464, 1821, 48112, -1000, -1000,
	45676, 491, 13778, 13360, 1019, -50, 161, 1790, 1787, -1000,
	-51, 705, 903, -102, -1000, 3959, -53, -1000, 1010, -1000,
	-1000, -1000, -1000, 291, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 736, 490, 489, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 486, 1247, 483, 483, 483, -1000, -1000, -1000, 680,
	-1000, 677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1951,
	-49, 46894, 681, -63, 815, -34, -1000, 1459, -1000, 1332,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2416, -1000, 2384, -1000, -1000, 2397, -29,
	-1000, -1000, 13360, -1000, -35, 1171, -1000, 41200, 2252, 2237,
	2206, 1051, -1000, 1024, 2282, 40390, 2304, 448, -1000, 1942,
	-1000, -1000, 692, 977, 900, 40390, 1359, -1000, 8725, -1000,
	1813, 2274, 1049, 1046, 1049, 1049, 1068, -1000, 40390, 899,
	1289, 37146, -1000, 895, -1000, -40, 2302, 167, -1000, 1940,
	894, -1000, -1000, 45676, 13360, 633, -30, 34222, 56244, 160,
	-1000, 24318, 69, 24318, 69, -1000, -1000, 2062, -1000, -1000,
	-1000, 2465, 1219, 1723, -1000, -1000, -1000, 482, 1643, 1359,
	1641, -1000, -1000, 40798, 56244, 1800, -32, 45676, -1000, -1000,
	1285, -1000, 2053, 2052, 327, 2463, -1000, 1515, 1637, -1000,
	-1000, -1000, 57852, 935, 2045, 721, 444, 2321, 444, 31793,
	-1000, 56244, -1000, 56244, -1000, -1000, -1000, 2462, -1000, 45676,
	-1000, -1000, 45676, -1000, 45676, -1000, 45676, -1000, 45676, 45676,
	-1000, 56244, 37146, 37146, 37146, 3959, 37954, -69, 339, -1000,
	49326, 56244, 775, 38356, -209, 633, -1000, 633, -1000, 45676,
	1979, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	56244, -1000, 56244, -1000, -1000, -1000, -1000, -1000, -1000, 1064,
	-1000, 1974, -1000, 1972, -1000, 159, -1000, -1000, -1000, 1715,
	45676, 45676, 45676, -1000, 40390, -1000, -1000, 1971, -1000, -1000,
	-1000, -1000, -1000, 66021, -1000, 422, -1000, -1000, 66021, 1319,
	1820, -1000, 1820, -31, -1000, 64483, 1754, 45676, -1000, -1000,
	-1000, -1000, -1000, 691, 825, 825, 915, 915, 915, 915,
	2324, 1589, 252, 791, 5669, 5669, 5669, 5669, 5669, 5669,
	5669, 5669, 1011, 397, 397, 1011, 1011, 1011, 1011, 1011,
	397, 397, 397, 5669, 5669, 5669, 66188, 5756, 7313, 24318,
	24318, 883, 1336, 398, 7003, 24318, 4272, 4272, 4272, 4272,
	-1000, 1475, -1000, -1000, -1000, -1000, 1938, 479, 25611, 25611,
	-1000, -1000, -1000, -1000, 14654, 24318, -1000, -1000, -1000, -1000,
	19006, -1000, -1000, 64102, -252, 335, -188, 24, -1000, 24318,
	24318, 24318, 334, -1000, 333, -1000, -1000, 881, -1000, 879,
	871, 869, -1000, 465, 150, 24318, 56244, -1000, 61816, 597,
	-89, -1000, -71, 1023, -1000, 24318, 147, -1000, 1393, 464,
	459, 332, -74, 689, 688, 684, 683, 24318, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 65874, 61510,
	61435, 61129, 8300, 61054, 60748, -77, 330, -1000, 1932, -188,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 324, -1000, 321,
	-1000, 65707, -188, 317, 5853, -1000, 25611, 25611, 25611, -1000,
	315, -1000, 64558, -1000, 65560, 18575, 18575, 18575, 314, 65393,
	24318, -188, -79, -1000, -80, -1000, -1000, 458, -88, 721,
	18130, 27292, 13360, -1000, 721, 721, 24318, -1000, 24318, 28107,
	28107, 1305, 1761, 28107, -1000, -1000, -1000, -1000, 48112, 508,
	661, 48112, -1000, 2364, 1771, -1000, -1000, -1000, 56244, 369,
	-1000, 48112, 48112, 13360, 661, -1000, 311, 30573, 24, 146,
	-1000, -1000, 13360, 1849, 1849, -1000, 1928, 56244, 2341, -1000,
	-1000, 8725, -1000, 604, 831, -1000, 2396, 456, -1000, 2364,
	2364, 56244, 131, 16392, -1000, 1459, -1000, -1000, 1109, -1000,
	1243, -1000, -1000, -1000, -1000, 16392, -1000, 1164, 45676, 56244,
	56244, -1000, -1000, 1635, 57450, 1633, 8725, 56244, -1000, -1000,
	455, 454, 1746, 1722, 56244, 56244, 57048, 56646, 56244, 1575,
	24318, 1443, 1312, 69, -1000, 69, 453, 979, 45676, 45676,
	1179, -1000, -1000, -1000, -1000, -1000, 45676, -1000, -1000, 2394,
	-1000, 1049, -1000, -1000, -1000, 1049, 1359, 1133, 45676, 37146,
	713, 56244, 1288, 69, -1000, 69, 452, 13360, 1244, -1000,
	1882, -1000, 1584, -1000, -1000, 11276, 66021, -1000, 66021, -1000,
	56244, -1000, 749, 56244, 38356, 704, 2044, -1000, 1359, 2043,
	369, -1000, -1000, 124, 705, 37146, 45676, -32, 37146, 37146,
	37146, 2458, 451, 2457, -1000, 45676, 2041, 1509, 1628, 2020,
	637, 56244, 1407, 24318, 1183, -1000, 30981, 766, 56244, 1114,
	71, -1000, -1000, -1000, -2, 56244, -1000, 2454, -1000, -1000,
	149, 149, 149, -1000, 148, 1441, -1000, -135, -135, -1000,
	-1000, 3959, 705, -33, 449, -1000, 656, 653, 29751, 37146,
	-90, -1000, -1000, -1000, -1000, -1000, 45676, 56244, 576, 1866,
	56244, -1000, 705, -1000, 712, -1000, 963, -49, -49, -1000,
	1061, 1058, 56244, 13360, 56244, 45676, 13360, 45676, -1000, -1000,
	-1000, -1000, -1000, 1319, -1000, 24318, -1000, -1000, -1000, 17699,
	-1000, -1000, -1000, 45676, -237, 24318, 24318, 6967, 6768, 24318,
	25611, 25611, -1000, 24318, 5979, -1000, -1000, -1000, -1000, -1000,
	1926, 447, 24318, 8725, 5810, 927, -1000, 307, 60673, 1011,
	-1000, 24318, -1000, 306, 17268, -1000, 64939, 14, 14, -1000,
	2410, 1670, 1460, 1211, 1091, 2391, 10860, -188, -93, -1000,
	-1000, 602, -1000, 2068, -1000, 24318, 65245, 10444, -1000, 32199,
	723, 1407, -1000, -1000, 2364, -1000, -1000, -1000, -1000, 63796,
	8725, 8725, 24318, 24318, -1000, 24318, 24318, 24318, -1000, -1000,
	24318, -1000, -1000, 1921, 24318, -1000, 8725, 8725, 25611, 25611,
	25611, 25611, 25611, 25611, 25611, 25611, 25611, 25611, 25611, 25611,
	25611, 25611, 25611, 25611, 25611, 25611, 25611, 1735, 25611, 2363,
	2363, 2363, -1000, 1955, 1921, 24318, 24318, 8725, 305, 304,
	300, -1000, 24318, -188, -1000, -1000, 3959, -1000, 1896, -1000,
	-194, -1000, 1821, -1000, -1000, 1896, 1896, -103, 66021, -1000,
	1305, -1000, 441, 24318, 28107, -1000, 586, -1000, -104, -1000,
	48112, -1000, 585, -250, -1000, 646, -1000, 369, -1000, -1000,
	-1000, 145, 48112, -1000, -109, -1000, 2319, 297, 13360, -1000,
	-1000, -1000, -1000, -1000, 69, -49, 1423, -1000, 2373, -1000,
	584, 295, 2364, 294, 285, -49, 56244, -1000, -34, -1000,
	-1000, -1000, -1000, -1000, -1000, 868, 867, -1000, 2033, -1000,
	1625, -1000, 770, -1000, 1119, 24318, 24318, 440, 430, 1320,
	2453, 2025, 1441, 2024, 1441, -1000, -1000, 698, -1000, 66021,
	429, 421, -1000, -35, 1143, -1000, -1000, 24318, 24318, 48920,
	-1000, 2211, -1000, 866, -1000, -1000, -1000, 1359, 843, -1000,
	-1000, 1274, -1000, -1000, -1000, -1000, 24318, -1000, -40, 842,
	705, 1913, 1012, -1000, 2452, 2451, 2449, 284, -42, -1000,
	2318, 1570, 56244, 45676, 45676, 2315, 45676, -1000, -1000, -1000,
	-1000, 711, -1000, -1000, 2447, -1000, 774, 13360, 45676, 2023,
	1697, 637, 37552, -1000, 711, 1811, -1000, 66021, -1000, 1114,
	16823, 2208, -111, -1000, 143, -1000, -1000, -1000, 721, 31793,
	28107, 24318, 2446, -116, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48518, 48518, 37146, 37146, 37146, 705, 56244, 56244,
	38356, 2444, 418, 56244, 56244, 417, -1000, -1000, -1000, 1414,
	45676, -1000, -1000, -1000, -1000, -1000, 1295, 1577, -1000, 1484,
	63721, -1000, 2234, 13360, 2335, 4272, 24318, 24318, 213, 480,
	443, 4272, 24318, 24318, 8725, 6624, -122, 24318, 24318, -1000,
	24318, 526, 66021, 2406, 24318, 283, 282, 279, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 270, -1000, -1000, -1000,
	-1000, -1000, 66021, 24318, 141, -1000, -1000, -1000, 60264, -1000,
	24318, 268, 264, -1000, 260, 250, 4743, 7843, 63415, 63340,
	63034, 66021, 1955, 66021, -1000, -1000, 703, 703, 1034, 1034,
	1034, 1034, 2363, 263, 596, 2971, 1202, 1202, 1202, 1025,
	525, 525, 1202, 1202, 1202, 1912, 1767, 416, 5924, -1000,
	-1000, 66021, 66021, 248, -1000, -1000, -1000, -188, 240, 1891,
	2272, -1000, 28107, 1891, 1891, -1000, -1000, 56244, 66021, -1000,
	-240, -1000, 2364, -1000, -1000, 1771, -1000, 9608, -1000, 13360,
	-1000, -1000, 30573, -1000, 411, -1000, 125, -1000, -1000, 509,
	-1000, -1000, 233, -1000, -1000, -49, 56244, 56244, 56244, 2019,
	-1000, 3603, -1000, 62959, -123, -1000, 64483, 24318, 56244, -1000,
	1304, 1768, 803, -1000, 56244, -1000, 56244, -1000, -1000, 56244,
	56244, 45676, 56244, 56244, -124, 66021, -65, -1000, 641, -1000,
	45676, 45676, 37146, -133, 13360, -1000, 37146, 888, -1000, -1000,
	-1000, 1858, 69, -1000, 2439, 410, 1359, 69, -1000, -1000,
	-1000, 408, 56244, 1508, 406, 13360, 1704, 637, 37552, -1000,
	935, 1114, -1000, -1000, -70, -1000, 428, 69, 56244, 2438,
	1407, -1000, -125, 66021, -1000, 639, -1000, -139, -1000, -1000,
	232, -1000, 2179, 2178, -1000, -1000, 24318, 402, 401, 56244,
	1572, -1000, -1000, -1000, 13360, 926, -1000, -1000, -1000, 2234,
	4272, 4272, 24318, 24318, 24318, 4272, 6624, -140, -1000, 4272,
	4272, -188, -1000, -1000, 64939, -1000, -1000, -1000, -1000, 66021,
	10028, 1335, -1000, 62653, -1000, -1000, -1000, -1000, 24318, 24318,
	-1000, -1000, -1000, -1000, -1000, 25611, 1911, 400, 8725, -1000,
	-1000, 716, 24318, 24318, 1821, 716, 716, -141, 661, -1000,
	-1000, -1000, 2364, 125, -1000, 2431, 13360, -1000, -1000, -1000,
	-1000, -1000, 56244, -1000, 56244, -1000, 13360, 56244, 1919, 1599,
	-1000, -1000, 1718, 399, 25611, 45676, 671, 1916, 1297, 24318,
	-1000, -148, -149, 1592, -1000, -1000, 1588, 24318, -1000, 8725,
	1441, 1441, -150, -155, -1000, 841, 835, 834, 56244, 16392,
	-1000, -1000, -1000, 832, -1000, -135, 24318, 1288, 1876, 710,
	-1000, 38356, 704, -1000, -1000, 24318, -1000, 45676, 24318, 1501,
	-1000, 637, 37552, -1000, 2020, -1000, 2070, 56244, 2201, -1000,
	-1000, -1000, 1811, 398, -1000, 705, 385, 384, -156, 24318,
	24318, -157, -138, -1000, 645, 566, -1000, -1000, 45676, -1000,
	4272, 4272, 4272, -1000, 227, -1000, -1000, 1407, 2253, -1000,
	62578, 62272, 5649, 25611, 8725, -165, -1000, 56244, 66021, -188,
	-1000, -1000, -1000, 48112, 481, -1000, -1000, 1717, -1000, -1000,
	-1000, 56244, 1624, -1000, -1000, 24318, 5924, 383, 24318, -1000,
	-1000, 1856, 1949, 1858, 382, -1000, -1000, -1000, -1000, 1150,
	-1000, -1000, 66021, 2235, -1000, -1000, 380, 379, 56244, 56244,
	377, 636, -1000, 375, 66021, 704, -1000, 1341, -1000, 1803,
	226, 2314, -166, 774, -174, 45676, 37552, -1000, 1697, 943,
	-176, 56244, 1114, -1000, -1000, 37146, 37146, 1297, -181, -182,
	-1000, 1572, -1000, 56244, -1000, 56244, -1000, -1000, 1316, 24318,
	-1000, -1000, 5649, -189, -1000, -151, -1000, 2310, -1000, -1000,
	-1000, -1000, 2018, 62197, 1680, 56244, 61891, 1944, -1000, -1000,
	1288, 56244, 45676, 773, 13360, 1295, 1295, -1000, -1000, 24318,
	16392, 24318, -1000, 45676, -1000, 2177, 1858, 69, 1297, 374,
	1297, 373, -1000, 1704, 1045, -1000, 721, -1000, -1000, -191,
	-192, 1858, 1297, -1000, -1000, -198, -199, 218, 25180, 25180,
	25180, -188, -1000, 56244, 370, 2005, -1000, 1491, 1279, 2,
	792, -1000, -1000, 1916, -200, 369, -1000, 24318, -1000, -201,
	-1000, 764, -206, -1000, 761, -207, -1000, -214, 356, -1000,
	1288, 710, 1858, 24318, 1858, 24318, -1000, 31793, -1000, 705,
	705, 1288, 1858, -1000, -1000, -1000, -1000, -1000, 26042, 1416,
	1105, 64177, -1000, -1000, -1000, -1000, 56244, -1000, 1499, 1495,
	1095, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1680,
	66021, -1000, 1295, 1875, -1000, 1295, 1909, -1000, -1000, 56244,
	704, -1000, 1288, -216, 1288, -217, -208, -1000, -1000, -1000,
	1288, 2328, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2165,
	-1000, 784, 1436, 1436, 1491, -1000, 355, -1000, 350, -226,
	-1000, 719, 1297, 719, 1297, -1000, -1000, 24749, -1000, 2346,
	-1000, -1000, 1736, -1000, 1916, 24318, 24318, 1369, -1000, 2425,
	1858, -1000, 1858, -1000, -1000, -1000, -1000, -1000, -227, -229,
	-1000, -1000, -1000, -1000, 1288, 1288, 1288, 828, 719, 719,
	-1000, 348, -1000, -1000, 24318, -238, 1288, -1000,
}
var sqlPgo = [...]int{

	0, 3072, 3066, 2038, 3061, 3056, 3048, 3047, 3046, 3039,
	3035, 3033, 3026, 3024, 3013, 3008, 3006, 3003, 3002, 2997,
	2996, 2995, 2994, 2993, 2992, 2991, 2990, 2989, 2988, 2987,
	2984, 2980, 2975, 2974, 2973, 2972, 2971, 2970, 2969, 2966,
	2960, 2952, 2947, 2943, 2942, 35, 2940, 2939, 2938, 2936,
	2935, 2931, 2929, 2928, 2922, 2918, 2916, 2915, 2913, 2912,
	2910, 2904, 2901, 2897, 2896, 2892, 2891, 2889, 2887, 2885,
	2884, 2883, 2882, 2881, 2879, 128, 2878, 2877, 2876, 2874,
	2873, 2872, 2870, 2868, 2864, 2863, 2861, 2860, 2857, 2852,
	168, 2851, 2850, 2847, 2844, 2841, 2838, 2836, 2834, 2830,
	2829, 176, 2827, 2825, 2819, 2818, 2816, 2814, 2813, 2812,
	2811, 2810, 2808, 2807, 2806, 2805, 2804, 2803, 2802, 2801,
	2796, 2795, 2794, 2793, 2791, 2789, 2788, 2787, 195, 130,
	2786, 2785, 2784, 2783, 2779, 2777, 91, 78, 21, 2776,
	80, 119, 178, 222, 173, 2774, 2772, 2771, 2770, 2766,
	59, 125, 115, 116, 117, 147, 2765, 2764, 71, 37,
	28, 27, 94, 2763, 2761, 2760, 2389, 88, 2759, 2758,
	189, 170, 2757, 1792, 2756, 118, 64, 85, 65, 58,
	2754, 100, 20, 2753, 145, 102, 2752, 113, 69, 31,
	4807, 6015, 76, 198, 75, 62, 151, 149, 159, 157,
	122, 154, 2751, 179, 120, 141, 2750, 2748, 2747, 57,
	138, 6, 5, 152, 10, 2746, 9, 2744, 11, 2741,
	2740, 2739, 2738, 19, 114, 38, 54, 2737, 18, 135,
	167, 2736, 162, 2735, 81, 2734, 182, 140, 142, 14,
	163, 2730, 2721, 2718, 2716, 2713, 89, 22, 84, 2711,
	2710, 101, 169, 2708, 36, 124, 60, 99, 194, 156,
	95, 160, 164, 2707, 2706, 2705, 148, 2703, 2701, 121,
	155, 2698, 2696, 32, 44, 166, 51, 2694, 2693, 112,
	2692, 144, 2691, 2690, 2689, 196, 129, 153, 16, 87,
	82, 12, 165, 111, 74, 72, 2688, 2395, 1550, 1112,
	2684, 108, 77, 45, 90, 103, 185, 39, 2683, 2681,
	1091, 2678, 2677, 2676, 2675, 126, 2674, 2673, 2672, 97,
	33, 73, 2671, 110, 41, 104, 191, 66, 158, 175,
	177, 2670, 123, 2665, 136, 98, 2660, 139, 181, 127,
	2656, 1333, 2654, 190, 2653, 2649, 2643, 2632, 70, 2629,
	2626, 335, 2625, 109, 2624, 2623, 134, 143, 67, 29,
	2622, 55, 1390, 2621, 137, 52, 2617, 1470, 34, 0,
	5863, 4586, 5053, 2616, 260, 2615, 150, 93, 2614, 2613,
	2612, 2611, 30, 13, 3, 7, 17, 15, 1691, 1394,
	2610, 2607, 63, 92, 105, 2606, 193, 161, 2604, 2602,
	2601, 68, 2600, 26, 2597, 24, 2596, 2595, 25, 2,
	2594, 2593, 174, 2591, 2590, 2589, 2588, 2337, 2586, 188,
	2582, 96, 2579, 132, 107, 2578, 2577, 2576, 2574, 180,
	2573, 184, 2572, 4, 23, 1, 2571, 2563, 2559, 146,
	8, 2221, 2554, 2553, 56, 133, 86, 2551, 2548, 131,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 419, 419, 18, 28, 19, 29, 13, 421,
	421, 421, 421, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 418, 418, 154, 154, 153, 149,
	149, 422, 422, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 367, 367, 368, 368, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 427, 427, 428,
	428, 429, 429, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 414, 414, 237, 237, 336, 336, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 338, 338, 74, 74, 308, 308, 77, 77, 267,
	267, 78, 78, 78, 78, 78, 79, 79, 79, 79,
	89, 89, 89, 89, 417, 417, 230, 230, 170, 170,
	170, 170, 84, 84, 84, 84, 85, 85, 85, 86,
	86, 134, 134, 95, 95, 95, 95, 95, 94, 94,
	94, 94, 94, 94, 40, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 45, 45,
	97, 97, 423, 423, 99, 96, 96, 96, 98, 98,
	98, 98, 100, 101, 101, 101, 101, 101, 101, 102,
	102, 361, 361, 245, 245, 359, 359, 375, 375, 360,
	360, 207, 207, 207, 207, 207, 208, 208, 208, 366,
	366, 366, 366, 366, 366, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 119, 119, 119, 128, 128, 128, 128, 128,
	128, 128, 121, 121, 121, 112, 112, 104, 104, 104,
	104, 108, 108, 108, 108, 108, 105, 105, 109, 109,
	111, 111, 113, 113, 113, 113, 113, 113, 106, 106,
	106, 106, 115, 115, 115, 115, 114, 114, 124, 124,
	124, 124, 124, 124, 322, 322, 120, 120, 120, 120,
	123, 123, 123, 123, 118, 118, 118, 122, 122, 125,
	125, 125, 125, 107, 107, 107, 432, 432, 432, 126,
	126, 117, 117, 127, 127, 127, 127, 127, 127, 127,
	116, 116, 116, 420, 420, 110, 415, 415, 412, 412,
	412, 412, 412, 412, 412, 413, 413, 416, 416, 82,
	82, 82, 55, 55, 433, 433, 433, 56, 56, 434,
	434, 434, 431, 431, 431, 431, 431, 431, 431, 431,
	209, 209, 210, 210, 290, 290, 290, 290, 290, 211,
	211, 156, 156, 156, 214, 215, 215, 212, 212, 213,
	213, 213, 217, 217, 216, 219, 219, 218, 289, 380,
	380, 381, 381, 381, 381, 381, 381, 381, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 378, 378,
	378, 379, 376, 376, 377, 377, 377, 377, 435, 435,
	435, 435, 435, 435, 436, 436, 288, 288, 223, 223,
	383, 383, 383, 383, 384, 384, 384, 384, 384, 387,
	386, 385, 385, 385, 385, 385, 318, 318, 318, 59,
	59, 59, 256, 256, 255, 255, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	131, 131, 57, 57, 57, 162, 162, 54, 54, 54,
	438, 438, 58, 58, 58, 439, 439, 61, 61, 61,
	61, 61, 61, 53, 53, 53, 53, 53, 440, 440,
	273, 273, 272, 272, 228, 228, 324, 174, 174, 150,
	150, 150, 21, 23, 23, 16, 16, 16, 16, 16,
	16, 31, 31, 32, 32, 27, 27, 424, 424, 425,
	425, 83, 83, 87, 87, 87, 93, 93, 130, 130,
	130, 130, 130, 130, 130, 35, 35, 35, 35, 47,
	47, 47, 47, 91, 442, 442, 442, 92, 92, 441,
	441, 169, 169, 169, 169, 171, 171, 285, 285, 286,
	286, 443, 443, 287, 287, 287, 164, 163, 165, 165,
	52, 52, 52, 158, 158, 159, 159, 160, 160, 161,
	161, 444, 444, 80, 80, 80, 133, 133, 203, 203,
	281, 281, 281, 224, 224, 179, 179, 284, 284, 282,
	282, 282, 254, 254, 254, 132, 132, 233, 233, 247,
	247, 248, 248, 333, 333, 249, 90, 90, 143, 143,
	141, 141, 141, 141, 141, 141, 445, 445, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 147, 147,
	147, 147, 148, 148, 148, 146, 146, 394, 394, 394,
	396, 396, 397, 393, 393, 395, 395, 437, 437, 258,
	258, 258, 221, 222, 220, 220, 446, 446, 226, 226,
	225, 227, 227, 323, 323, 323, 252, 252, 252, 252,
	276, 276, 274, 274, 275, 275, 277, 277, 278, 278,
	278, 279, 279, 280, 280, 251, 251, 304, 304, 145,
	145, 145, 232, 232, 232, 234, 234, 295, 295, 295,
	296, 296, 294, 294, 294, 294, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 326, 326, 235, 235, 327,
	283, 283, 410, 410, 410, 411, 411, 321, 321, 328,
	328, 328, 328, 328, 328, 319, 319, 320, 320, 334,
	335, 335, 261, 261, 261, 261, 259, 259, 260, 260,
	329, 329, 329, 329, 253, 253, 330, 330, 330, 331,
	291, 291, 339, 339, 339, 339, 353, 231, 231, 231,
	447, 447, 340, 340, 340, 340, 340, 340, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	343, 343, 343, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 352, 352, 352, 352, 352, 344, 344, 349, 349,
	350, 350, 350, 345, 346, 351, 351, 351, 351, 448,
	448, 355, 355, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 348, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 268, 268, 269, 269,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 299, 299, 299,
	299, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 388, 388, 388, 388,
	388, 388, 388, 388, 391, 391, 392, 392, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 398, 398, 399,
	399, 401, 401, 402, 402, 403, 404, 404, 404, 405,
	406, 406, 400, 400, 407, 407, 407, 407, 408, 408,
	409, 409, 409, 409, 409, 310, 310, 311, 311, 317,
	317, 317, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 172, 172,
	172, 172, 172, 243, 243, 241, 241, 241, 244, 244,
	242, 242, 240, 240, 239, 239, 307, 307, 305, 305,
	309, 309, 262, 262, 354, 354, 354, 354, 354, 354,
	354, 263, 263, 263, 271, 264, 264, 265, 265, 265,
	265, 265, 301, 302, 266, 266, 266, 303, 303, 312,
	316, 316, 315, 314, 314, 313, 313, 292, 292, 293,
	293, 250, 250, 449, 449, 246, 246, 332, 332, 332,
	332, 205, 205, 236, 236, 204, 204, 198, 198, 199,
	199, 199, 199, 229, 229, 356, 356, 356, 357, 358,
	306, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 194, 193, 192, 191, 337,
	200, 200, 201, 201, 201, 202, 202, 202, 202, 173,
	173, 195, 195, 196, 197, 197, 190, 190, 190, 166,
	166, 166, 167, 167, 168, 168, 365, 365, 363, 363,
	363, 364, 364, 364, 364, 362, 362, 362, 362, 362,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	371, 371, 371, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 374, 374,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 5, 4,
	6, 4, 6, 4, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 6, 6, 7, 9, 6, 3, 4,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 0, 1,
	3, 3, 2, 2, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 5,
	8, 4, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 1,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 2, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -426,
	82, -395, -65, -68, -70, -430, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -394,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, -191,
	-195, -196, -197, -190, -166, -371, -374, 4, -369, -372,
	131, 228, 227, 176, 240, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 42, 44, 45, 48, 49, 50,
	51, 52, 53, 56, 61, 66, 67, 68, 69, 70,
	75, 72, 73, 74, 77, 79, 80, 81, 84, 85,
	93, 94, 95, 96, 97, 98, 102, 105, 104, 107,
	110, 111, 112, 114, 116, 117, 120, 121, 124, 122,
	366, 368, 123, 125, 126, 127, 137, 138, 139, 141,
	142, 144, 146, 150, 151, 153, 157, 159, 160, 161,
	162, 163, 164, 165, 177, 172, 178, 182, 185, 184,
	186, 187, 188, 179, 193, 196, 197, 198, 200, 201,
	204, 205, 206, 207, 210, 209, 212, 215, 216, 219,
	220, 223, 225, 226, 229, 230, 233, 231, 232, 235,
	236, 238, 237, 245, 246, 248, 249, 250, 264, 253,
	254, 257, 260, 263, 265, 266, 267, 268, 269, 270,
	272, 274, 276, 278, 280, 281, 282, 283, 284, 285,
	287, 288, 290, 291, 292, 293, 294, 299, 296, 297,
	298, 300, 301, 302, 303, 305, 307, 308, 309, 310,
	312, 314, 335, 336, 348, 315, 316, 317, 318, 319,
	320, 321, 325, 329, 326, 327, 328, 330, 323, 324,
	331, 332, 334, 337, 339, 341, 342, 345, 346, 347,
	349, 352, 353, 354, 350, 351, 344, 359, 357, 358,
	361, 362, 363, 364, 365, 367, 369, 374, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 379, 381, 403, 404, 405, 409, 416, 251, -184,
	2, -166, -166, 276, 26, 2, 26, 272, 324, 362,
	364, 2, 192, 2, -417, -230, 2, 26, -170, -166,
	82, 152, 322, -184, 2, -417, -230, 24, 2, -166,
	2, -171, 2, 315, -166, 445, 77, 220, 61, 311,
	331, -101, 378, -100, 371, 317, -102, -361, 2, 233,
	-166, 445, 445, 445, 445, 2, 360, 267, 407, 323,
	396, 95, 283, 176, -412, 2, 4, -372, -369, -199,
	-198, 360, 95, -197, -190, 435, -196, 445, 445, 445,
	2, 197, 198, 282, 281, 331, 332, 445, 445, 445,
	2, 25, 55, 76, 79, 101, 127, 147, 150, 255,
	-427, 226, 264, 280, 317, 330, 359, 369, 380, -431,
	347, 56, 396, -438, 385, 110, -272, 95, 364, 362,
	220, 151, 392, 307, 155, 390, 105, 182, 394, 393,
	445, 445, 25, 55, 64, 79, 110, 127, 147, 150,
	-429, 264, 280, 314, 317, 330, 359, 369, 385, 380,
	2, 407, 323, 360, 176, 95, 396, 307, 279, -75,
	2, 442, 29, 334, -140, 360, 2, -166, 197, 198,
	2, 445, 445, -412, 2, 197, 198, 2, 319, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 2, -128, 331, 347, 160, 38,
	61, 26, 66, 96, 153, 176, 177, 205, 76, 77,
	281, 220, 198, -322, 332, 361, 318, 357, 378, 82,
	397, 308, 419, -420, 122, 4, 95, 233, 333, 371,
	70, 365, 366, -437, 2, 360, -441, 2, 378, 378,
	2, -441, 2, -441, 2, -169, 2, 378, 375, -442,
	378, 416, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, -142, -144, -143, 445, 445, 445,
	445, 445, -128, 331, 2, 61, 26, -445, 145, -225,
	-226, 389, 190, 118, 256, -141, -143, 2, -394, -359,
	2, -297, -375, -299, 433, 434, 428, 239, 420, -310,
	101, 228, 227, 390, 251, -374, -300, -312, 119, 311,
	-244, 8, 9, 5, 6, 7, -173, -341, -306, -348,
	382, 130, 242, -202, 448, 10, 442, -391, -143, -311,
	33, 156, 54, -363, -201, -342, -350, -346, -347, -447,
	44, 50, 49, 369, 232, 325, 326, 341, 327, 328,
	42, 399, 172, 248, 250, 184, 4, 191, -200, -190,
	-388, -389, -369, -370, 183, 189, 185, 340, 186, 187,
	188, 41, 286, 141, 142, 140, 111, 100, 99, 244,
	46, 45, 43, 404, -351, 97, 371, 372, 373, 374,
	200, 201, -166, -371, 64, 87, 88, 86, 91, 90,
	92, 89, 333, 396, 55, 32, 166, 167, 171, 243,
	168, 62, -390, 351, 83, 149, 181, 169, 194, 195,
	199, 214, 217, 234, 241, 259, 261, 306, 338, -448,
	405, 128, 129, 262, 273, 355, 379, 381, 154, 213,
	57, 58, -396, 287, -397, -184, -396, 445, 445, 447,
	445, -220, -221, -222, 2, 26, 108, 442, 2, -325,
	2, 440, -329, -143, 208, -328, 442, -326, -191, 252,
	-392, 312, -388, -389, -173, -190, -201, 4, -3, -223,
	442, 444, 360, 65, 2, -267, 442, -166, 26, -140,
	251, 375, 447, -308, 442, 251, 148, 253, -166, 2,
	2, 335, 2, 442, -101, 59, 378, -286, 2, -287,
	-163, -164, -165, 196, 278, 285, 419, -359, -423, 148,
	425, 375, -359, -245, 444, 2, -329, 166, -191, 2,
	-188, -362, 4, -369, -372, -370, -373, 64, -371, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 47, 54,
	55, 60, 63, 65, 76, 82, 86, 87, 89, 88,
	90, 91, 92, 101, 103, 106, 108, 109, 113, 115,
	118, 130, 132, 145, 147, 148, 152, 155, 158, 170,
	180, 190, 192, 208, 211, 218, 221, 222, 239, 242,
	247, 251, 252, 255, 256, 271, 277, 289, 304, 322,
	333, 343, 356, 360, 370, 375, 376, 382, 389, 390,
	396, 398, 406, 410, 411, 412, 413, -374, 2, -329,
	166, 2, -192, 166, -329, -195, 2, -367, 166, -365,
	10, -364, 5, 4, -369, -372, -370, 2, -175, -166,
	2, -187, -362, 2, -204, 166, -191, 375, 447, -236,
	-198, -199, -229, -166, 444, -297, 2, -90, 2, -297,
	166, 2, -90, 166, 2, -297, 166, 2, -90, 166,
	2, 2, 2, 380, 2, 79, 166, -166, 360, 94,
	2, 298, -428, 314, 384, 407, 2, 2, 2, 2,
	2, 2, 2, 360, 323, -439, 287, -180, 2, -166,
	145, -367, 166, 2, -367, 166, 2, -193, -195, -193,
	176, 193, -175, 166, 2, 364, 362, 364, 362, 148,
	2, 192, 2, 192, 2, -330, 2, -331, -191, 2,
	2, 2, 2, 2, 166, -166, 360, 94, 2, 207,
	2, 2, 2, 2, 2, 2, 2, 2, 2, -238,
	166, 2, -191, -238, 166, 2, -238, 166, 2, -205,
	166, 2, -204, -175, 166, 2, -368, 166, 2, -367,
	-368, 166, 2, -338, 2, -337, -364, 403, -75, 442,
	331, 442, -367, -191, -297, -90, 148, -297, -90, 2,
	95, 360, -128, 2, 145, 398, 2, 8, 2, -367,
	284, 137, 2, 335, 2, 281, 332, 61, 419, 148,
	2, 2, -415, 2, 251, 148, 2, 148, 2, 148,
	2, 148, 2, 148, 2, 2, 281, 332, 2, 377,
	206, 123, 2, 148, 2, 148, 2, 5, 2, 196,
	278, 348, 2, -191, -432, 2, 360, 407, 323, 2,
	2, 72, 73, 148, 2, 148, 419, 2, -253, -329,
	-285, -286, -285, 375, -171, -445, -225, -226, -128, 335,
	2, 2, -445, -252, -274, -275, 218, 132, 247, -258,
	26, 108, -258, -258, 48, 443, 443, 11, 12, 63,
	37, 433, 434, 435, 436, 143, 437, 438, 431, 432,
	430, 423, 424, 427, 202, 203, 78, 426, 425, 71,
	224, 313, 133, 134, 135, 136, 295, 173, 174, 175,
	14, 15, 16, 30, 255, 217, 420, 169, 338, 428,
	17, 18, 19, 194, 195, 241, 40, 170, -172, -206,
	-297, -297, -297, -297, -297, 261, 442, -250, -292, 440,
	-143, 442, 442, 442, 5, 442, 5, -358, 8, -143,
	-297, -310, 443, -242, 442, -143, -310, -305, 442, 311,
	440, 442, -313, -297, 444, -398, 414, -344, 442, 275,
	-343, 442, -343, -343, 408, 415, 421, 415, 421, 145,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 408, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 447, -396, -223, 442, -246, -332, -297,
	435, -246, -246, 251, -239, -297, 83, -261, 199, 234,
	149, 214, 306, 181, -358, -75, -294, 448, -321, 421,
	-143, -326, -190, -143, -328, 442, -325, -321, 435, -191,
	442, 148, 442, 444, 148, -229, -362, -191, -200, -201,
	-239, -367, -412, -229, -170, 34, -307, -339, -340, -352,
	-341, -349, -345, -348, 291, 292, 290, 294, 293, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 43, 404, -351, 191,
	183, 189, 185, 340, 186, 187, 188, 41, 286, 141,
	142, 140, 111, 100, 99, 244, 46, 45, 97, 371,
	372, 373, 374, 200, 201, 405, 351, 57, 58, -412,
	-229, 145, -361, -239, 34, -286, 2, -443, 447, 216,
	-208, 223, 238, 159, 252, 417, -366, 5, 4, -306,
	-318, 101, 220, -348, 9, 434, -356, 8, 433, -360,
	-359, 85, 444, -362, -152, 296, -151, 23, 27, 112,
	401, 124, -213, 178, 267, 119, 344, -419, -421, 316,
	367, 368, 74, 245, 296, 119, -255, -257, 34, 93,
	236, 263, 51, 164, 227, 228, 346, 409, 119, 296,
	413, 119, -421, 296, -421, -154, 344, -419, -421, 316,
	296, -153, -213, 119, 448, -367, -236, 447, 447, -362,
	435, 119, 119, 119, 119, 2, 2, 239, 2, 2,
	2, 150, -431, -429, 2, 2, 2, -191, 166, -192,
	166, 2, -195, 407, 251, -414, -237, 360, -191, -162,
	-393, 413, 239, 239, 34, 442, 2, -177, 166, 2,
	-167, -166, 176, -393, 239, -330, -203, -191, -203, 334,
	-184, 34, -294, 119, 2, 2, 2, -166, -155, 447,
	53, 302, 119, -155, 119, -155, 119, -155, 447, 119,
	-155, 119, 447, 119, 119, 443, 447, -338, -367, -138,
	413, 148, 82, 442, -368, -175, 2, -191, 2, 360,
	200, -367, -367, -361, 26, 336, 2, 73, -191, -416,
	145, -413, 307, -412, -191, -191, -191, -191, -191, 145,
	2, 377, 2, 377, 2, -166, -166, 216, -191, 145,
	360, 176, 360, -155, 447, -171, -445, -252, -361, -445,
	-275, -274, -277, -297, 26, -280, 139, 235, -297, -299,
	-142, -142, -142, -227, -323, -297, 277, 176, -353, -339,
	-339, -189, -362, 371, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, 217,
	169, 338, 40, 170, -297, 375, -297, -297, -297, -297,
	231, 239, 242, 382, 130, 391, 108, 245, -449, 356,
	36, -303, -143, -243, 442, -317, 31, 343, 26, -310,
	442, 2, -292, -297, -293, -240, -239, -239, 443, 406,
	26, 108, 435, 2, 8, -268, -270, 418, 230, 98,
	161, 229, -269, 321, 443, 447, 34, 443, -297, -240,
	-309, -305, -239, -316, -315, 410, -362, 435, -399, 138,
	155, 8, -358, 371, 371, 371, 371, 442, 443, 2,
	443, 2, 443, 2, 443, 2, 443, 2, -297, -297,
	-297, -297, -297, -297, -297, -239, -262, 2, -354, -239,
	4, 418, 230, 98, 161, 229, 321, -262, 2, -263,
	2, -297, -239, -264, -298, -299, 433, 434, 428, -310,
	-265, 2, -297, -240, -297, 47, 211, 376, -266, -297,
	148, -239, -239, 2, -239, 2, -397, 34, -239, -232,
	447, 148, 34, 4, -232, -232, 442, 443, 447, 199,
	199, -325, -261, 199, -259, 259, -259, -259, -410, 442,
	441, -321, -176, 440, 449, -362, -320, -319, 34, -184,
	257, -321, -321, 444, 443, -320, -191, 442, -239, -362,
	349, 443, 444, 194, 194, 443, -138, 375, 413, -75,
	443, 447, -231, 33, 440, -270, 442, -355, 408, 442,
	442, 148, -230, -423, 443, 378, -287, -207, 285, 342,
	297, 329, 9, 8, 8, 447, -362, 447, 375, -424,
	76, 65, -289, 166, 65, -376, -178, 76, -377, -166,
	60, 390, 277, 147, -424, 76, -424, 76, 76, 334,
	347, 48, -329, 37, -90, 212, 148, 419, 360, 375,
	-329, -257, -339, 93, 227, 228, 48, -357, -356, 434,
	-357, 48, -357, -357, -357, 413, -192, -329, 375, 268,
	-367, 375, 447, 37, -90, 212, 148, 375, -204, -176,
	-335, -334, 422, -198, -166, 444, -297, -90, -297, -90,
	119, 2, -439, 207, 442, -223, 239, -256, -255, 239,
	-194, 2, -191, -229, -336, 192, 447, -237, 268, 119,
	119, 442, 116, 283, 2, 251, 239, -177, 166, -158,
	363, 119, -291, 411, -281, -90, 442, 101, 34, -281,
	-247, -248, -333, -249, -178, 442, -184, -166, 2, -191,
	-238, -238, -238, -204, -205, -175, -367, -368, -368, -75,
	-337, 443, 443, -137, 254, -136, -166, 5, -140, 398,
	-210, -290, -289, -378, -379, -376, 217, 176, 390, 193,
	131, -138, -334, -335, -335, -191, 145, -229, -229, 331,
	145, 145, 444, 283, 95, 360, 267, 176, -191, -204,
	-191, -329, -445, -278, -356, 442, -279, 311, 312, 447,
	-150, 35, 106, 204, -191, 419, 117, -297, -297, 375,
	-449, 356, -303, 117, -297, 231, 242, 382, 130, 391,
	108, 245, 148, 442, -298, -298, 443, -241, -297, -297,
	441, 451, 443, -446, 447, -225, -297, -239, -239, 443,
	443, 375, 375, 375, 375, 442, 444, -239, -229, 441,
	441, 447, 443, -314, -315, 113, -297, 444, -404, 260,
	442, 442, 443, 443, 447, 419, 419, 419, 419, -297,
	34, 447, 447, 447, 443, 447, 447, 447, 443, 443,
	148, 443, 443, -271, 271, 443, 11, 12, 433, 434,
	435, 436, 143, 437, 438, 431, 432, 430, 423, 424,
	425, 71, 224, 313, 14, 15, 16, 194, 170, -298,
	-298, -298, 443, -301, -302, 148, 145, 34, -266, -266,
	-266, 443, 148, -239, 443, 443, 442, 443, -291, -332,
	-234, 2, -325, -186, -362, -291, -291, -239, -297, -325,
	-325, -260, 398, 251, 199, -325, -319, 443, -411, -358,
	-321, -320, -358, -296, -295, 146, 237, -184, -223, -320,
	-320, -362, -321, 443, -235, -327, -392, -446, 444, -362,
	-129, 5, 242, -129, 148, -229, 24, -339, 440, 441,
	8, 8, 442, -358, -358, -229, 148, -359, -286, 388,
	69, 285, -359, -151, -191, -178, -185, -166, 239, -289,
	166, -157, 239, -339, -185, 442, 442, 204, 204, -178,
	-185, 166, -178, 166, -185, -185, -418, 285, 246, -297,
	219, 283, 240, -152, 296, -90, -90, 442, -423, 398,
	107, -191, -194, 296, -200, -357, -357, -255, 296, -192,
	-367, 413, -175, -153, -90, -90, 442, -176, -154, 296,
	-135, 165, 245, 435, -166, 407, -166, -209, -210, -166,
	-433, 415, 413, 119, 119, -223, 148, -138, -367, -191,
	-367, -367, -367, 2, 442, 2, -191, 119, 251, 239,
	-159, 114, -444, 425, -175, -226, -225, -297, -254, -284,
	304, 251, -224, -179, -178, 403, -184, -254, -233, 447,
	148, 425, 444, -224, 2, -155, -155, -155, -155, -155,
	-75, -138, 447, 442, 425, 425, 442, -367, -367, 443,
	447, -191, -177, 176, 176, -183, -167, -138, -43, 413,
	360, 331, 331, -166, -187, -175, -191, -188, -204, -279,
	-297, -323, -191, 448, -297, -297, 117, 117, -297, -298,
	-298, -297, 117, 148, 442, -297, -307, 30, 30, 443,
	447, -293, -297, 443, 406, -446, -446, -446, 5, 230,
	161, 229, -269, 229, -269, -269, 8, 435, -362, 443,
	-305, 115, -297, 370, -362, 435, -405, -181, 442, -166,
	411, -225, -358, 443, -353, -339, -297, -297, -297, -297,
	-297, -297, -301, -297, -353, -339, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, 108, 239, 245, -298, -302,
	-301, -297, -297, -339, 443, 443, 443, -239, -75, -251,
	155, -335, 447, -251, -251, 443, -260, 442, -297, -325,
	441, 443, 447, -320, 441, 447, 450, 425, -223, 444,
	-319, 443, 447, -283, 34, 443, -362, -90, 253, 8,
	441, 443, -358, 443, 443, -229, 375, 375, 119, 239,
	400, -380, -377, -297, -228, -324, -297, 442, 442, -149,
	112, 334, -425, 2, 119, -155, 119, -155, 417, 442,
	442, 375, -424, 76, -239, -297, -139, 101, -361, -421,
	375, 375, 268, -239, 375, -138, 148, 358, 2, 2,
	2, 443, 34, 249, -166, -191, -192, 34, -191, -162,
	2, -273, 398, -176, -191, 119, -160, 210, -444, -365,
	-393, -276, -274, -254, -246, 240, 75, 443, 447, 444,
	-291, -248, -234, -297, 2, 443, -136, -137, -367, -367,
	-367, -138, -140, -140, -290, 2, 442, -177, -167, 442,
	254, -191, -215, -214, 267, 245, 252, 443, -150, -176,
	-297, -297, 117, 30, 30, -297, -297, -307, 443, -297,
	-297, -239, 441, 5, -297, 443, 443, 443, 443, -297,
	444, -406, -166, -297, 443, 443, 443, 443, 447, 447,
	443, 443, 443, 443, -302, 148, 108, 245, 442, 443,
	443, -304, 158, 48, -325, -304, -304, -229, -294, -358,
	-295, -176, 440, -362, -327, 442, 444, 441, 443, -178,
	-185, -289, 119, -381, 76, -382, 63, 131, 82, 239,
	242, 390, 277, 60, 101, 289, 34, 443, 443, 447,
	-150, -228, -229, 239, 353, 101, 239, 101, 94, 385,
	-178, -185, -229, -229, -191, -178, -185, 443, 447, 425,
	-194, -192, -367, 443, -176, -368, 371, -211, 179, -90,
	2, 442, -223, -256, -90, 442, -166, 251, 442, -176,
	-161, 209, -444, -365, -158, -254, -282, 442, 251, -90,
	-179, 2, -226, 425, 443, 443, 94, 94, -228, 442,
	442, -229, -44, -45, 176, 76, 270, -188, 360, -150,
	-297, -297, -297, 443, -446, -362, 435, -400, 267, 443,
	-297, -297, -298, 148, 442, -307, -401, 412, -297, -239,
	-401, -401, 443, -321, -358, 2, -289, -185, -189, -182,
	-166, 131, 166, 242, 204, 442, -298, -191, 442, 2,
	-435, 103, 180, -288, -436, 81, 354, -324, 443, 443,
	242, 242, -297, -339, -155, -155, 443, 443, 375, 375,
	375, -361, -359, 375, -297, -212, -213, 170, -434, 413,
	-209, -433, -228, -191, -228, 251, -444, -365, -159, 109,
	-229, 76, -276, -303, -138, 442, 442, 443, -228, -228,
	443, 447, 26, 442, 26, 442, -191, 443, -226, 48,
	443, 443, -298, -307, 443, -402, -403, -181, -320, 441,
	-382, -182, 239, -297, -168, 442, -297, 180, 104, 162,
	-211, 442, 289, -174, 63, 442, 442, -178, -185, 442,
	425, 442, -433, 265, 94, 236, 443, 34, 443, -273,
	443, -191, -365, -160, 393, 240, 443, -185, -254, -368,
	-368, -288, 443, 443, -45, -229, -229, -407, 283, 312,
	157, -239, 443, 447, 34, 119, 443, -383, 225, -166,
	443, 104, 162, -212, -229, -191, -422, 398, -189, -217,
	-216, -214, -219, -218, -214, -239, -359, -239, -191, 94,
	-211, -90, -288, 442, -288, 442, -161, 334, -291, 443,
	443, -211, -288, 443, 443, 443, -408, -409, 40, 387,
	85, -297, -408, -408, -403, -405, 131, -384, -387, -386,
	251, 149, 266, 339, 443, 353, 409, -435, 443, -223,
	-297, 443, 447, 403, 443, 447, 403, 443, 443, 442,
	-212, -434, -211, -228, -211, -228, -247, -138, -138, -212,
	-211, -409, 274, 144, 311, 274, 144, -182, -386, 251,
	-387, 251, 393, 105, -383, -216, 170, -218, 148, -229,
	-433, -212, 443, -212, 443, -291, -212, 30, -385, 236,
	302, 53, 334, -385, -384, 442, 442, 443, -440, 411,
	-288, -440, -288, -409, 22, 242, 101, -435, -239, -239,
	-156, 53, 302, 2, -211, -211, 443, 443, -212, -212,
	-212, 375, -440, -440, 442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 340, 342, 344, 346,
	347, 349, 351, 352, 353, 354, 355, 357, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 405, 0, 828, 830, 832, 834, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	392, 394, 0, 0, 414, 415, 0, 916, -2, 408,
	410, 412, 475, 477, 479, 481, 483, 485, 487, 488,
	490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
	510, 512, 514, 516, 518, 520, -2, -2, -2, 0,
	-2, -2, -2, 846, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 955,
	292, 294, 296, 298, 300, 0, -2, 969, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 931, 933, 935, 937, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 341, 343, 345, 348, 350, 356, 358, 360, 719,
	1548, 1561, 1562, 1563, 1566, 1567, 1568, 1569, 1570, 1571,
	1890, 1891, 1892, 1972, 1973, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 0, 370,
	368, 1542, 371, 1727, 373, 375, 279, 280, 281, 282,
	283, 284, 0, 152, 0, 385, 379, 384, 386, 388,
	389, 390, 391, 366, 364, 0, 385, 1593, 383, 826,
	827, 821, 822, 1760, 856, 404, -2, -2, -2, 1860,
	-2, 436, -2, 443, 1863, 1762, 446, 0, 448, -2,
	451, 829, 831, 833, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, -2, -2, -2, -2,
	0, 0, 1627, 1519, 1563, 1522, 1517, 170, 172, 174,
	175, 0, 0, 0, 0, 0, 0, 198, 200, 203,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 643,
	0, 0, 648, 770, 771, 792, 0, 0, 0, 0,
	287, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 231, 325,
	326, 0, 956, 0, 0, 0, 150, 143, 0, 0,
	631, 393, 395, 0, 142, 0, 0, 825, 0, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 489, 491,
	493, 495, 497, 499, 501, 503, 505, 507, 509, 511,
	513, 515, 517, 519, 521, 522, 0, 0, 0, 0,
	0, 526, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 525, 527, 528, 529, 0,
	574, 613, 614, 0, 761, 957, 858, 836, 849, 858,
	838, 839, 840, 841, 842, 847, 848, 851, 0, 843,
	844, 845, 34, 36, 38, 40, 42, 44, 255, 257,
	259, 261, 265, 267, -2, 929, 930, 293, 295, 297,
	299, 301, 396, 0, 398, 0, 526, 920, 0, -2,
	0, 961, 961, 961, 0, 0, 930, 928, 0, 401,
	402, 455, 456, 1180, 0, 0, 0, 0, 0, 1417,
	1264, -2, -2, 0, 457, -2, 1297, 1299, 1839, 1860,
	1416, 1301, 1302, 1303, 1304, 1305, 0, 0, 1308, 0,
	1310, 1311, 1312, 1313, 0, 1315, 0, 1319, 1320, 1321,
	0, 1844, 1496, 1559, -2, 1088, 1089, 1090, 1091, 1092,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1555, 0,
	1388, 1335, -2, 1580, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1636, -2, -2, -2,
	-2, -2, -2, -2, 1144, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1873, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 0, 1828, 1845, 1846, 1851, 1853,
	1847, 1836, 1358, -2, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1145,
	-2, 1840, 1841, 1856, 1857, 1862, 1866, 1867, 1843, 1852,
	-2, -2, 947, 1735, 950, 719, 948, 932, 934, 0,
	936, 0, 0, 0, 941, 964, 962, 0, 1000, 945,
	946, 956, 1015, 1038, 0, 1020, 0, 1038, 1060, 0,
	1025, 1755, 1336, 1337, 0, 1563, 1560, -2, 2, 0,
	0, 0, 0, 0, 194, 367, 0, 372, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 855, 406,
	407, 0, 431, 0, 435, 1835, -2, -2, 439, 859,
	863, 864, 865, 0, 0, 0, 0, 445, 0, 0,
	432, 433, 449, 452, 0, 52, 0, 1845, 1060, 53,
	0, 1532, 1585, 1586, 1587, 1588, 1589, 1873, 1889, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 55, 0,
	1845, 58, 0, 1845, 0, -2, 62, 0, 1845, 153,
	154, 1576, 1577, 1581, 1582, 1583, 1584, 65, 0, 1538,
	67, 0, 1535, 75, 0, 1845, 1516, 0, 0, 623,
	1513, 1518, 624, 1523, 0, 176, 177, 178, 179, 180,
	1845, 182, 183, 0, 185, 186, 1845, 188, 189, 0,
	191, 206, 207, 0, 209, 0, 1845, 0, 0, 0,
	215, -2, 232, 0, 229, 0, 219, 220, 222, 223,
	224, 225, 226, 0, 0, 0, 776, 0, 269, 1543,
	0, -2, 1845, 764, 767, 1845, 769, 781, 1546, 0,
	-2, 0, 954, 1845, 872, 644, 645, 646, 647, 0,
	278, 0, 885, 0, 887, 0, 906, 1066, 1015, 233,
	234, 235, 236, 237, 1845, 0, 0, 0, 242, 0,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 135,
	1845, 304, 323, 135, 1845, 307, 135, 1845, 310, 135,
	1845, 313, 1511, 135, 1845, 316, 317, 1845, 319, 155,
	320, 1845, 322, 0, -2, 361, 1549, -2, 328, 0,
	-2, 0, 167, 0, 629, 630, 0, 823, 824, 416,
	0, 0, 523, 524, 0, 0, 534, 535, 536, 537,
	1733, 1651, 540, 0, 543, 564, 578, 0, 0, 0,
	547, 549, 628, 551, 0, 0, 553, 0, 555, 0,
	557, 0, 559, 0, 561, 563, 565, 579, 567, 0,
	0, 0, 577, 0, 583, 0, 586, 587, 588, 0,
	590, 591, 592, 593, 0, 595, 596, -2, -2, 600,
	602, 0, 608, 0, 612, 0, 530, 531, 135, 1064,
	835, -2, 837, 0, 853, 923, -2, 0, 397, 0,
	400, 927, 921, 926, 978, 979, 0, 0, 0, 0,
	959, 960, 0, 0, 0, 918, 919, 0, 0, 0,
	0, 1422, 1423, 1424, 1425, 1426, 1427, 1430, 1431, 1428,
	1429, 1432, 1433, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1436, 1437, 0, 0, 1439, 0, 1441, 0, 0,
	0, 0, 0, 0, 1243, 1245, 1504, 0, 0, 1438,
	1185, 1186, 1187, 1222, 1223, 0, 0, 1298, 1501, 1500,
	1300, 0, 1453, 0, 1307, 0, 1177, 1314, 1529, -2,
	0, 1417, 1448, 0, 0, 1322, 1323, 1324, 0, 0,
	1453, 0, 0, 1495, 0, 1390, 0, 1124, 0, 1125,
	1126, 0, 1127, 1128, 1141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1146, 0, 0, 0, 1476, -2, 0,
	0, 0, 0, 0, 949, 0, 0, 1004, 1505, 1509,
	1510, 1004, 1004, 0, 0, 1454, 0, 0, 0, 0,
	1057, 1057, 1057, 1055, 1032, 0, 1038, 0, 1048, 0,
	1038, 1038, 0, -2, 1020, 0, 0, 1048, 1061, 1062,
	0, 0, 0, 0, 0, 0, 1564, 0, 0, 1551,
	0, 167, 0, 377, 387, 956, 0, 1456, 1079, 1075,
	1082, 1083, 1084, 1085, 1131, 1132, 1133, 1134, 1135, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, -2, 1142, 1144, 1162,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1137, 0, 1112, 1112, 1112, 1129, 1130, 1153, 1154,
	1156, 1158, 1160, 1080, 1081, 1147, 1148, 1149, 1150, 0,
	381, 0, 0, 0, 0, -2, 441, 0, 861, 0,
	866, 466, 467, 468, 868, 869, 444, 469, 470, 471,
	472, 473, 474, 0, 736, 0, 738, 1525, 0, 442,
	459, 447, 0, 453, 76, 818, 103, 0, 818, 818,
	0, 0, 122, 0, 0, 0, 0, 0, 94, 99,
	82, 83, 0, 0, 0, 0, 59, 744, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 0, 93, 0, 88, 78, 0, 0, 96, 101,
	0, 126, 128, 0, 0, 1051, 622, 0, 0, 1564,
	1521, 0, 0, 0, 0, 208, 210, 0, 212, 213,
	214, 0, 775, 0, 221, 218, 262, 719, 1845, 743,
	1845, 741, 1547, 0, 0, 276, 271, 0, 273, 762,
	0, 953, 0, 0, 0, 0, 782, 0, 1845, 787,
	1534, 1572, 1573, 874, 0, 1071, 0, 888, 0, 0,
	1067, 0, 1069, 0, 239, 240, 241, 0, 302, 0,
	133, 134, 0, 305, 0, 308, 0, 311, 0, 0,
	314, 0, 0, 0, 0, 956, 0, 0, 0, 145,
	0, 0, 0, 0, 167, 1051, 418, 1051, 420, 0,
	0, 538, 539, 541, 542, 544, 545, 609, 546, 550,
	0, 616, 1751, 626, 552, 554, 556, 558, 560, 0,
	569, 0, 571, 0, 573, 581, 584, 589, 594, 0,
	0, 0, 0, 760, 0, 852, 924, 926, 399, 922,
	976, 977, 982, 986, 987, 990, 993, 994, 984, 1180,
	942, 943, 944, 970, 971, 801, 0, 1972, 1181, 1076,
	1182, 1183, 1531, 0, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 1196, 1197, -2, -2, -2, -2, -2, -2,
	-2, -2, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, -2, -2, -2, 1220, 1221, -2, 1440,
	1442, 0, 1504, 0, -2, 0, -2, -2, -2, -2,
	1240, 0, 1242, 1247, 1249, 1251, 0, 0, 0, 0,
	1503, 1261, 1487, 1488, 0, 0, 1419, 1420, 1421, 1246,
	0, 1267, 1502, 1499, 0, 0, 1452, 967, 1326, 0,
	0, 0, 0, 1333, 0, 1530, 1176, 1163, 1164, 1165,
	1166, 1167, 1168, 1178, 1318, 1450, 0, 1449, 0, 0,
	0, 1460, 0, 1494, 1490, 0, 1552, 1558, 1398, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1370, 0, 1463,
	-2, -2, -2, -2, -2, -2, -2, 0, 1372, 0,
	1374, 1454, 1473, 0, 0, 1268, 0, 0, 0, 1417,
	0, 1377, 1454, 1481, 0, 0, 0, 0, 0, 1454,
	0, 1486, 0, 1384, 0, 1386, 951, 0, 0, 1071,
	0, 0, 0, 1508, 1071, 1071, 0, 999, 0, 0,
	0, 0, 0, 0, 1052, 1056, 1053, 1054, 0, 0,
	1038, 1048, 1012, 0, 0, 1533, 1018, 1047, 0, 719,
	1037, 1048, 1048, 0, -2, 1022, 0, 0, 967, -2,
	168, 718, 0, 0, 0, 369, 0, 0, 0, 363,
	365, 0, 1072, 1074, 0, 1086, 0, 0, -2, 0,
	0, 0, 0, 0, 434, 0, 860, 867, 0, 463,
	0, 465, 737, 1527, 1526, 0, 454, 0, 0, 0,
	0, 817, 105, 1845, 0, 137, 0, 0, 703, 1539,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 745, 746, 748, 754, 756, 0, 750, 1528, 0,
	751, 0, 753, 755, 757, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 1515,
	158, 1050, 0, 1514, 1524, 0, 181, 184, 187, 190,
	0, 216, 0, 0, 651, 634, 0, 739, 742, 0,
	719, 774, 1545, 0, 167, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 780, 0, 0, 0, 1845, 876,
	882, 0, 969, 0, 904, 890, 0, 0, 0, 904,
	908, 909, 911, 912, 0, 0, 1068, 0, 243, 324,
	135, 135, 135, 1512, 135, 135, 156, 318, 321, 327,
	362, 956, 167, 165, 1715, 163, 160, 162, 0, 0,
	0, 652, 654, 655, 656, 657, 0, 1573, 0, 1679,
	1573, 140, 167, 417, 422, 532, 0, 627, 625, 568,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 611,
	615, 1065, 925, 0, 988, 0, 985, 991, 992, 0,
	973, 799, 800, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1262, 0, -2, 1241, 1244, 1248, 1250, 1252,
	0, 0, 0, 0, 0, 0, 1443, 0, 1445, 1263,
	1497, 1500, 1415, 0, 0, 966, 967, 967, 967, 1332,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 1458,
	1459, 0, 1325, 0, 1491, 0, 0, 0, 1334, 0,
	0, 0, 1136, 1110, 0, 1155, 1157, 1159, 1161, 0,
	0, 0, 0, 0, 1353, 0, 0, 0, 1357, 1369,
	0, 1371, 1373, 0, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1271,
	1272, 1273, 1376, 1479, 1480, 0, 0, 0, 0, 0,
	0, 1382, 0, 1485, 1383, 1385, 956, 1001, 996, 1506,
	1051, 1003, 1005, 1507, 1536, 996, 996, 0, 1455, 1040,
	0, 1042, 0, 0, 0, 1044, 0, 1033, 0, 1035,
	1048, 1017, 0, 0, 1010, 0, 1009, 719, 1046, 1019,
	1023, 1552, 0, 1063, 0, 1027, 1030, 0, 0, 1565,
	192, 195, 196, 193, 0, 376, 0, 1457, 0, 1077,
	0, 0, 0, 0, 0, 380, 0, 430, -2, 461,
	462, 464, 460, 104, 805, 0, 0, 1537, 0, 107,
	1845, 116, 0, 680, 0, 0, 0, 0, 0, 820,
	0, 1845, 135, 1845, 135, 118, 121, 0, 125, 123,
	0, 0, 671, 77, 818, 80, 86, 0, 0, 0,
	92, 0, 811, 0, 749, 752, 758, 60, 0, 813,
	803, 0, 802, 127, 81, 87, 0, 815, 79, 0,
	167, 0, 0, 1520, 0, 0, 0, 0, 650, -2,
	0, 0, 0, 0, 0, 0, 0, 270, 275, 274,
	765, -2, 768, 777, 0, 779, 791, 0, 0, 0,
	878, 882, 0, 881, 954, 981, 968, 1070, 883, 904,
	0, 0, 0, 893, 895, 892, 889, 886, 1071, 0,
	0, 0, 0, 0, 238, 303, 306, 309, 312, 315,
	329, 144, 0, 0, 0, 0, 0, 167, 0, 0,
	0, 0, 0, 1573, 1573, 0, 1541, 141, 419, 0,
	0, 570, 572, 580, 603, 604, 666, 0, 607, 0,
	0, 972, 801, 0, 1184, 1225, 0, 0, -2, 0,
	0, 1229, 0, 0, 0, -2, 0, 0, 0, 1444,
	1446, 0, 1499, 1327, 0, 0, 0, 0, 1309, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 0, 1316, 1317, 1418,
	1461, 1489, 1493, 0, 1553, 1557, 1396, 1397, 1401, 1544,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	0, 1462, 1472, 1474, 1269, 1270, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, -2, -2, -2, 1287,
	1288, 1289, -2, -2, -2, 0, 0, 0, 1475, 1477,
	1478, 1482, 1483, 0, 1379, 1380, 1381, 1484, 0, 998,
	0, 1002, 0, 998, 998, 963, 1041, 0, 1059, 1043,
	1015, 1034, 0, 1024, 1013, 0, 1014, 0, 1045, 0,
	1021, 1026, 0, 1029, 0, 1327, -2, 151, 378, 0,
	1078, 1087, 0, 1139, 1143, 382, 0, 0, 0, 0,
	136, 678, 702, 0, 0, 794, 801, 0, 0, 109,
	0, 0, 0, 117, 0, 114, 0, 120, 124, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 0, 95,
	0, 0, 0, 0, 0, 138, 0, 0, 211, 773,
	217, 660, 0, 635, 0, 719, 743, 0, 268, 763,
	778, 0, 0, 0, 0, 0, 880, 882, 0, 873,
	874, 904, 980, 884, 902, -2, 901, 0, 0, 0,
	969, 910, 907, 913, 914, 0, 164, 0, 159, 161,
	0, 147, 0, 0, 653, 658, 0, 0, 0, 0,
	0, 533, 605, 665, 0, 0, 983, 989, 974, 801,
	1227, 1231, 0, 0, 0, 1233, -2, 0, 1255, -2,
	-2, 1447, 1498, 1306, 967, 1328, 1330, 1331, 1179, 1492,
	0, 1403, 1400, 0, 1387, 1111, 1348, 1349, 0, 0,
	1352, 1354, 1355, 1356, 1471, 0, 0, 0, 0, 1378,
	952, 1392, 0, 0, 1006, 1392, 1392, 0, 1038, 1036,
	1011, 1007, 0, 1553, 1028, 0, 0, 1073, 1138, 807,
	809, 106, 0, 679, 0, 682, 0, 0, 0, 0,
	689, 690, 0, 0, 0, 0, 0, 708, 717, 0,
	796, 0, 0, 0, 111, 130, 0, 0, 819, 0,
	135, 135, 0, 0, 806, 0, 0, 0, 0, 0,
	812, 814, 804, 0, 816, 157, 0, 668, 0, 639,
	636, 651, 634, 740, 772, 0, 790, 0, 0, 0,
	870, 882, 0, 875, 876, 277, 0, 0, 0, 891,
	894, 896, 981, 0, 166, 167, 0, 0, 0, 0,
	0, 0, 421, 423, 0, 0, 429, 664, 0, 975,
	1235, -2, -2, 1256, 0, 1554, 1556, 969, 0, 1389,
	0, 0, -2, 0, 0, 0, 938, 0, 997, 995,
	939, 940, 1058, 1048, 0, 1031, 108, 0, 683, 684,
	1540, 686, 0, 688, 691, 0, 693, 1575, 0, 697,
	704, 709, 0, 660, 0, 714, 715, 795, 706, 0,
	110, 112, 129, 798, 113, 119, 0, 0, 0, 0,
	0, 0, 97, 0, 1049, 634, 667, 0, 637, 0,
	0, 0, 0, 791, 0, 0, 0, 877, 878, 0,
	0, 0, 904, 915, 146, 0, 0, 717, 0, 0,
	701, 0, 425, 0, 427, 0, 606, 1329, 1407, 0,
	1350, 1351, -2, 0, 1295, 1391, 1393, 0, 1016, 1008,
	681, 685, 0, 0, 723, 0, 0, 0, 712, 713,
	668, 0, 0, 132, 0, 0, 0, 808, 810, 0,
	0, 0, 632, 0, 640, 0, 660, 0, 717, 0,
	717, 0, 879, 880, 0, 898, 1071, 900, 905, 0,
	0, 660, 717, 700, 424, 0, 0, 0, 0, 0,
	0, 1402, 1296, 0, 0, 0, 692, 728, 0, 0,
	0, 710, 711, 708, 0, 719, 115, 0, 797, 0,
	672, 0, 0, 675, 0, 0, 98, 0, 0, 641,
	668, 639, 660, 0, 660, 0, 871, 0, 899, 167,
	167, 668, 660, 426, 428, 1399, 1404, 1408, -2, 1809,
	1624, 0, 1405, 1406, 1394, 1395, 0, 694, 724, 725,
	0, 720, 721, 722, 1574, 695, 696, 705, 716, 723,
	131, 669, 0, 0, 670, 0, 0, 100, 102, 0,
	634, 638, 668, 0, 668, 0, 1071, 148, 149, 698,
	668, 0, 1410, 1411, 1412, 1413, 1414, 687, 726, 0,
	727, 0, 0, 0, 728, 673, 0, 676, 0, 0,
	633, 788, 717, 788, 717, 897, 699, 0, 729, 0,
	732, 733, 0, 730, 708, 0, 0, 663, 783, 0,
	660, 785, 660, 1409, 731, 734, 735, 707, 0, 0,
	659, 661, 662, 789, 668, 668, 668, 0, 788, 788,
	674, 0, 784, 786, 0, 0, 668, 677,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1035
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1041
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1050
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1093
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1155
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1174
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1178
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1246
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1289
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1303
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1310
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1318
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1327
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1338
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1346
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1354
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1365
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1375
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1399
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1409
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1421
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1450
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1453
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1491
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1510
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1519
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1524
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1531
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1540
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1544
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1562
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1572
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1576
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1583
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1601
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1630
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1653
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1657
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1660
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1664
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1701
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1710
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1726
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1742
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1745
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1753
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1763
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1769
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1773
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1787
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1797
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1807
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1815
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1821
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1833
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1834
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1835
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1836
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1846
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1854
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1856
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1859
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1878
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1895
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1905
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1931
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1943
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1948
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1962
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1966
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1967
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1971
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1972
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1980
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1982
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1983
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1984
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1990
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1993
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1994
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1997
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1998
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2002
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2012
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2014
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2015
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2016
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2018
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2019
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2024
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2025
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2026
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2027
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2030
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2031
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2042
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2054
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2064
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2068
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2074
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2085
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2089
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2103
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2113
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2120
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2123
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2124
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2125
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2127
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2136
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2137
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2138
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2139
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2142
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2143
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2145
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2154
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2169
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2191
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2207
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2214
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2222
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2230
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2252
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2267
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2271
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2297
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2300
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2306
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2317
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2321
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2324
		{
			return helpWith(sqllex, "DELETE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2326
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2327
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2328
		{
			return helpWith(sqllex, "INSERT")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2329
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2331
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2332
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2335
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2340
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2341
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2342
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2360
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2367
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2371
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2375
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2395
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2409
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2421
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2424
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2444
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2452
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2455
		{
			return helpWith(sqllex, "GRANT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2479
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2483
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2486
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2491
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2495
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2524
		{
			return helpWith(sqllex, "RESET")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2525
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2540
		{
			return helpWith(sqllex, "RESET")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2551
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2565
		{
			return helpWith(sqllex, "USE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2569
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2570
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2571
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2572
		{
			return unimplemented(sqllex, "set local")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2576
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2577
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2578
		{
			return helpWith(sqllex, "USE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2594
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2612
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2630
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2638
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2642
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2646
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2652
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2666
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2674
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2678
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2689
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2692
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2702
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2747
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2752
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2756
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2775
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return unimplemented(sqllex, "set from current")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2802
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2809
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2830
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2851
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2861
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2865
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2869
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2873
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2877
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2883
		{
			sqlVAL.union.val = tree.Low
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = tree.Normal
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = tree.High
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2902
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2906
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2910
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2915
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2919
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2933
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2934
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2935
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2936
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2939
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2941
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2942
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2944
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2945
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2946
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2950
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2951
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2952
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2955
		{
			return helpWith(sqllex, "SHOW")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2962
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2964
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2975
		{
			sqlVAL.str = "client_encoding"
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.str = "timezone"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2979
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2993
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2998
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3002
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3013
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3030
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3037
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3045
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3085
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3093
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3109
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3125
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3138
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3146
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3149
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3151
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3154
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3162
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3165
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3171
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3181
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3193
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3210
		{
			sqlVAL.union.val = true
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3211
		{
			sqlVAL.union.val = false
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3219
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3224
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3228
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3238
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3247
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3256
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3259
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3266
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3270
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3280
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3292
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3297
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3302
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3306
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3318
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3335
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3346
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3349
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3357
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3380
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3384
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3395
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3399
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3410
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3417
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3422
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3546
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3550
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3593
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3598
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3602
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3611
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3618
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3643
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3646
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3707
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3708
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3709
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3736
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3737
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3738
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3752
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3753
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3754
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3755
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3756
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3758
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3759
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3764
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3770
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3780
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3789
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3801
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3808
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3813
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3818
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.str = ""
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3838
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3844
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3858
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3884
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3905
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3920
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3926
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3930
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3934
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3942
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3946
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3950
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4004
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4008
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4037
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4059
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4064
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4076
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4097
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4107
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4108
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4109
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4110
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4111
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4112
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4129
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4133
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4143
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4148
		{
			return unimplemented(sqllex, "references match full")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4149
		{
			return unimplemented(sqllex, "references match partial")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4150
		{
			return unimplemented(sqllex, "references match simple")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4151
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4162
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4174
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4180
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4186
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4194
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4198
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4202
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4206
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4210
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4220
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4245
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[5].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4253
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[8].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4261
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4272
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4276
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4277
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4280
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4282
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4284
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4287
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4289
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4290
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4292
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4305
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4313
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4317
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4320
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = nil
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4345
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4350
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4351
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4359
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[5].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4366
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4367
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4370
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4371
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4377
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4379
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4383
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4385
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4387
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4416
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4430
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4443
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4456
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4459
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4460
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4464
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4479
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4485
		{
			sqlVAL.union.val = true
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = false
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4499
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4519
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4520
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4524
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4528
		{
			sqlVAL.union.val = tree.Descending
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4532
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4545
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4563
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4567
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4571
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4573
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4581
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4587
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4606
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4607
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4610
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4611
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4619
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4622
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4644
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4655
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4659
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4660
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4661
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4677
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4680
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4685
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4695
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4698
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4703
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4712
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4713
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4714
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4722
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4729
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4732
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4733
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4737
		{
			sqlVAL.str = ""
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4741
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4745
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.str = ""
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4755
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4759
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4765
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4769
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4775
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4779
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4792
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4794
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4802
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4806
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4812
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4818
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4824
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4828
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 870:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4838
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4848
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4858
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4862
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4866
		{
			sqlVAL.str = ""
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4872
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4876
		{
			sqlVAL.str = ""
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4882
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4886
		{
			sqlVAL.str = ""
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4892
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4896
		{
			sqlVAL.str = ""
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4901
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4902
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4914
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4921
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4928
		{
			return helpWith(sqllex, "INSERT")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4939
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4946
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4950
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4958
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4964
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4968
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4978
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5002
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5010
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5016
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5020
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5022
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5028
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5033
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5037
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 905:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5065
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5069
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5070
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5091
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5094
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5141
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5166
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5178
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5186
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5191
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5192
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5197
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5232
		{
			return helpWith(sqllex, "SELECT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5233
		{
			return helpWith(sqllex, "VALUES")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5234
		{
			return helpWith(sqllex, "TABLE")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5256
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5295
		{
			return helpWith(sqllex, "SELECT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5308
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5339
		{
			return helpWith(sqllex, "TABLE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5351
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5355
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5359
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5363
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5373
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5381
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5382
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5390
		{
			sqlVAL.union.val = nil
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5395
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5396
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = true
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = false
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = false
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5414
		{
			sqlVAL.union.val = true
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5420
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5425
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5426
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5429
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5430
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5434
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5438
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5444
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5450
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5464
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5477
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5486
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5501
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5510
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5516
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5530
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5543
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5553
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5554
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5557
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5558
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5579
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5608
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5611
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5613
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5628
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5646
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5650
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5656
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5667
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5683
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5687
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5718
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5732
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5741
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5748
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5750
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5758
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5762
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5778
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5784
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5788
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5800
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5806
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5808
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5811
		{
			sqlVAL.union.val = nil
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5813
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5817
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = true
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5831
		{
			sqlVAL.union.val = false
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5851
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5855
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5859
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5863
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5867
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5888
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5894
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5925
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5926
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5937
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5941
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5946
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5947
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5949
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5974
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5980
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6001
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6013
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6027
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6036
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6045
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6051
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6060
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6080
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6081
		{
			return unimplemented(sqllex, "interval with precision")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6102
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6114
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6118
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6122
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6126
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6130
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6134
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6138
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6142
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6150
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = nil
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6244
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6248
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6252
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6256
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6264
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6278
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6296
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6300
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6339
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6345
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6367
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6407
		{
			sqlVAL.union.val = true
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = false
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6425
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6429
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = tree.Year
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = tree.Month
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = tree.Day
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = tree.Month
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = nil
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6519
		{
			sqlVAL.union.val = tree.Second
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6522
		{
			return unimplemented(sqllex, "interval second with precision")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6557
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6566
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6631
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6771
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6779
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6810
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6816
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6820
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6824
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6828
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6876
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6893
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6897
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6901
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6906
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6930
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7096
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7100
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7105
		{
			return unimplemented(sqllex, "func const")
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7111
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7114
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7124
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7132
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7163
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7175
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7178
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7189
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7190
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7203
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7214
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7221
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7230
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7231
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7235
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation for")
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7255
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7289
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7293
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7309
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7323
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7328
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7333
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7335
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7338
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7343
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7348
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7353
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7358
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7367
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7368
		{
			return unimplemented(sqllex, "treat")
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7389
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7394
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7399
		{
			return unimplemented(sqllex, "within group")
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7400
		{
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7404
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7419
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7435
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7478
		{
			sqlVAL.str = ""
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7499
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7520
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7526
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7539
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7567
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7571
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7613
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = tree.Any
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = tree.Some
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7633
		{
			sqlVAL.union.val = tree.All
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7638
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = tree.Div
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7644
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7645
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7648
		{
			sqlVAL.union.val = tree.LT
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7649
		{
			sqlVAL.union.val = tree.GT
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7650
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = tree.LE
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7652
		{
			sqlVAL.union.val = tree.GE
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = tree.NE
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = tree.Like
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7658
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7659
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7660
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7693
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7701
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7726
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7739
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7749
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7779
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7783
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7805
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7809
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7813
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7819
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7826
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7847
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7851
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7859
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7863
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7869
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7875
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7881
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7885
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7889
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7914
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7930
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7934
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7941
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7958
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7964
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7973
		{
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7974
		{
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7997
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8005
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8013
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8023
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8033
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8040
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8076
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8082
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8086
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8094
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8098
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8109
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8120
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8130
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8228
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8265
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8332
		{
			sqlVAL.str = ""
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8338
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8342
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
