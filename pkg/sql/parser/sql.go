// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:565
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8447

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 904,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	169, 739,
	-2, 0,
	-1, 60,
	102, 904,
	175, 904,
	373, 904,
	374, 904,
	-2, 0,
	-1, 74,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 867,
	-1, 108,
	120, 549,
	199, 549,
	360, 549,
	-2, 0,
	-1, 113,
	4, 906,
	20, 906,
	21, 906,
	22, 906,
	23, 906,
	25, 906,
	30, 906,
	35, 906,
	36, 906,
	37, 906,
	38, 906,
	39, 906,
	40, 906,
	41, 906,
	42, 906,
	43, 906,
	44, 906,
	46, 906,
	47, 906,
	48, 906,
	49, 906,
	50, 906,
	51, 906,
	52, 906,
	55, 906,
	56, 906,
	57, 906,
	58, 906,
	60, 906,
	61, 906,
	65, 906,
	66, 906,
	67, 906,
	68, 906,
	69, 906,
	71, 906,
	72, 906,
	73, 906,
	74, 906,
	76, 906,
	78, 906,
	79, 906,
	82, 906,
	83, 906,
	91, 906,
	92, 906,
	93, 906,
	94, 906,
	95, 906,
	96, 906,
	97, 906,
	98, 906,
	100, 906,
	102, 906,
	104, 906,
	107, 906,
	108, 906,
	109, 906,
	111, 906,
	113, 906,
	114, 906,
	116, 906,
	117, 906,
	118, 906,
	119, 906,
	120, 906,
	121, 906,
	122, 906,
	123, 906,
	124, 906,
	125, 906,
	133, 906,
	134, 906,
	135, 906,
	136, 906,
	137, 906,
	138, 906,
	140, 906,
	142, 906,
	146, 906,
	148, 906,
	149, 906,
	151, 906,
	153, 906,
	154, 906,
	155, 906,
	156, 906,
	157, 906,
	158, 906,
	159, 906,
	160, 906,
	161, 906,
	164, 906,
	165, 906,
	170, 906,
	171, 906,
	172, 906,
	175, 906,
	176, 906,
	177, 906,
	178, 906,
	179, 906,
	180, 906,
	181, 906,
	182, 906,
	184, 906,
	186, 906,
	189, 906,
	190, 906,
	191, 906,
	193, 906,
	194, 906,
	197, 906,
	198, 906,
	199, 906,
	201, 906,
	202, 906,
	204, 906,
	205, 906,
	207, 906,
	208, 906,
	211, 906,
	212, 906,
	215, 906,
	217, 906,
	220, 906,
	221, 906,
	222, 906,
	223, 906,
	224, 906,
	226, 906,
	227, 906,
	228, 906,
	229, 906,
	234, 906,
	235, 906,
	236, 906,
	237, 906,
	239, 906,
	240, 906,
	242, 906,
	243, 906,
	244, 906,
	247, 906,
	248, 906,
	250, 906,
	252, 906,
	253, 906,
	254, 906,
	255, 906,
	256, 906,
	257, 906,
	258, 906,
	259, 906,
	261, 906,
	262, 906,
	263, 906,
	264, 906,
	265, 906,
	267, 906,
	268, 906,
	269, 906,
	270, 906,
	271, 906,
	272, 906,
	273, 906,
	274, 906,
	275, 906,
	277, 906,
	278, 906,
	279, 906,
	280, 906,
	281, 906,
	283, 906,
	284, 906,
	285, 906,
	286, 906,
	287, 906,
	288, 906,
	289, 906,
	291, 906,
	293, 906,
	294, 906,
	295, 906,
	296, 906,
	297, 906,
	298, 906,
	300, 906,
	301, 906,
	302, 906,
	303, 906,
	304, 906,
	305, 906,
	306, 906,
	308, 906,
	309, 906,
	310, 906,
	311, 906,
	312, 906,
	313, 906,
	314, 906,
	315, 906,
	316, 906,
	318, 906,
	319, 906,
	320, 906,
	321, 906,
	323, 906,
	324, 906,
	325, 906,
	326, 906,
	328, 906,
	329, 906,
	330, 906,
	331, 906,
	332, 906,
	333, 906,
	334, 906,
	335, 906,
	336, 906,
	337, 906,
	338, 906,
	339, 906,
	341, 906,
	342, 906,
	344, 906,
	345, 906,
	346, 906,
	347, 906,
	348, 906,
	349, 906,
	350, 906,
	351, 906,
	352, 906,
	354, 906,
	355, 906,
	356, 906,
	357, 906,
	360, 906,
	361, 906,
	362, 906,
	363, 906,
	365, 906,
	366, 906,
	368, 906,
	369, 906,
	372, 906,
	373, 906,
	374, 906,
	375, 906,
	377, 906,
	379, 906,
	380, 906,
	381, 906,
	382, 906,
	383, 906,
	384, 906,
	386, 906,
	387, 906,
	388, 906,
	393, 906,
	394, 906,
	395, 906,
	396, 906,
	397, 906,
	398, 906,
	-2, 0,
	-1, 135,
	115, 877,
	128, 877,
	183, 877,
	210, 877,
	238, 877,
	246, 877,
	370, 877,
	-2, 870,
	-1, 140,
	1, 800,
	189, 800,
	267, 800,
	272, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 142,
	1, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 143,
	1, 800,
	424, 800,
	425, 800,
	-2, 0,
	-1, 144,
	1, 804,
	424, 804,
	425, 804,
	-2, 0,
	-1, 172,
	4, 913,
	5, 913,
	6, 913,
	7, 913,
	8, 913,
	9, 913,
	20, 913,
	21, 913,
	22, 913,
	23, 913,
	25, 913,
	30, 913,
	31, 913,
	35, 913,
	36, 913,
	37, 913,
	38, 913,
	39, 913,
	40, 913,
	41, 913,
	42, 913,
	43, 913,
	44, 913,
	46, 913,
	47, 913,
	48, 913,
	49, 913,
	50, 913,
	51, 913,
	52, 913,
	53, 913,
	54, 913,
	55, 913,
	56, 913,
	57, 913,
	58, 913,
	60, 913,
	61, 913,
	63, 913,
	65, 913,
	66, 913,
	67, 913,
	68, 913,
	69, 913,
	71, 913,
	72, 913,
	73, 913,
	74, 913,
	76, 913,
	78, 913,
	79, 913,
	81, 913,
	82, 913,
	83, 913,
	84, 913,
	85, 913,
	86, 913,
	87, 913,
	88, 913,
	89, 913,
	90, 913,
	91, 913,
	92, 913,
	93, 913,
	94, 913,
	95, 913,
	96, 913,
	97, 913,
	98, 913,
	99, 913,
	100, 913,
	102, 913,
	104, 913,
	107, 913,
	108, 913,
	109, 913,
	111, 913,
	113, 913,
	114, 913,
	116, 913,
	117, 913,
	118, 913,
	119, 913,
	120, 913,
	121, 913,
	122, 913,
	123, 913,
	124, 913,
	125, 913,
	126, 913,
	127, 913,
	133, 913,
	134, 913,
	135, 913,
	136, 913,
	137, 913,
	138, 913,
	140, 913,
	142, 913,
	145, 913,
	146, 913,
	148, 913,
	149, 913,
	151, 913,
	153, 913,
	154, 913,
	155, 913,
	156, 913,
	157, 913,
	158, 913,
	159, 913,
	160, 913,
	161, 913,
	162, 913,
	164, 913,
	165, 913,
	170, 913,
	171, 913,
	172, 913,
	174, 913,
	175, 913,
	176, 913,
	177, 913,
	178, 913,
	179, 913,
	180, 913,
	181, 913,
	182, 913,
	184, 913,
	186, 913,
	187, 913,
	188, 913,
	189, 913,
	190, 913,
	191, 913,
	192, 913,
	193, 913,
	194, 913,
	197, 913,
	198, 913,
	199, 913,
	201, 913,
	202, 913,
	204, 913,
	205, 913,
	206, 913,
	207, 913,
	208, 913,
	209, 913,
	211, 913,
	212, 913,
	215, 913,
	217, 913,
	218, 913,
	219, 913,
	220, 913,
	221, 913,
	222, 913,
	223, 913,
	224, 913,
	225, 913,
	226, 913,
	227, 913,
	228, 913,
	229, 913,
	230, 913,
	232, 913,
	233, 913,
	234, 913,
	235, 913,
	236, 913,
	237, 913,
	239, 913,
	240, 913,
	243, 913,
	244, 913,
	247, 913,
	248, 913,
	249, 913,
	250, 913,
	251, 913,
	252, 913,
	253, 913,
	254, 913,
	255, 913,
	256, 913,
	257, 913,
	258, 913,
	259, 913,
	261, 913,
	262, 913,
	263, 913,
	264, 913,
	265, 913,
	267, 913,
	268, 913,
	269, 913,
	270, 913,
	271, 913,
	272, 913,
	273, 913,
	274, 913,
	275, 913,
	277, 913,
	278, 913,
	279, 913,
	280, 913,
	281, 913,
	283, 913,
	284, 913,
	285, 913,
	286, 913,
	287, 913,
	288, 913,
	289, 913,
	291, 913,
	292, 913,
	293, 913,
	294, 913,
	295, 913,
	296, 913,
	297, 913,
	298, 913,
	300, 913,
	301, 913,
	302, 913,
	303, 913,
	304, 913,
	305, 913,
	306, 913,
	308, 913,
	309, 913,
	310, 913,
	311, 913,
	312, 913,
	313, 913,
	314, 913,
	315, 913,
	316, 913,
	317, 913,
	318, 913,
	319, 913,
	320, 913,
	321, 913,
	322, 913,
	323, 913,
	324, 913,
	325, 913,
	326, 913,
	328, 913,
	329, 913,
	330, 913,
	331, 913,
	332, 913,
	333, 913,
	334, 913,
	335, 913,
	336, 913,
	337, 913,
	338, 913,
	339, 913,
	341, 913,
	342, 913,
	344, 913,
	345, 913,
	346, 913,
	347, 913,
	348, 913,
	349, 913,
	350, 913,
	351, 913,
	352, 913,
	354, 913,
	355, 913,
	356, 913,
	357, 913,
	360, 913,
	361, 913,
	362, 913,
	363, 913,
	364, 913,
	365, 913,
	366, 913,
	368, 913,
	369, 913,
	372, 913,
	373, 913,
	374, 913,
	375, 913,
	376, 913,
	377, 913,
	379, 913,
	380, 913,
	381, 913,
	382, 913,
	383, 913,
	384, 913,
	386, 913,
	387, 913,
	388, 913,
	393, 913,
	394, 913,
	395, 913,
	396, 913,
	397, 913,
	398, 913,
	399, 913,
	407, 913,
	412, 913,
	413, 913,
	414, 913,
	421, 913,
	427, 913,
	-2, 0,
	-1, 175,
	1, 57,
	425, 57,
	-2, 904,
	-1, 208,
	423, 1491,
	426, 1491,
	-2, 592,
	-1, 209,
	423, 1493,
	426, 1493,
	-2, 593,
	-1, 210,
	423, 1492,
	426, 1492,
	-2, 594,
	-1, 211,
	426, 1443,
	-2, 595,
	-1, 625,
	144, 1610,
	358, 1610,
	404, 1610,
	423, 1610,
	-2, 0,
	-1, 626,
	144, 1531,
	358, 1531,
	404, 1531,
	423, 1531,
	-2, 0,
	-1, 628,
	144, 1683,
	358, 1683,
	404, 1683,
	423, 1683,
	-2, 0,
	-1, 630,
	144, 1711,
	358, 1711,
	404, 1711,
	423, 1711,
	-2, 0,
	-1, 637,
	144, 1615,
	358, 1615,
	404, 1615,
	423, 1615,
	-2, 426,
	-1, 670,
	1, 522,
	420, 522,
	422, 522,
	424, 522,
	425, 522,
	-2, 0,
	-1, 671,
	1, 591,
	141, 591,
	420, 591,
	422, 591,
	424, 591,
	425, 591,
	-2, 0,
	-1, 677,
	1, 536,
	420, 536,
	422, 536,
	424, 536,
	425, 536,
	-2, 0,
	-1, 679,
	1, 540,
	420, 540,
	422, 540,
	424, 540,
	425, 540,
	-2, 0,
	-1, 681,
	1, 550,
	420, 550,
	422, 550,
	424, 550,
	425, 550,
	-2, 0,
	-1, 682,
	1, 556,
	420, 556,
	422, 556,
	424, 556,
	425, 556,
	-2, 0,
	-1, 683,
	1, 559,
	420, 559,
	422, 559,
	424, 559,
	425, 559,
	-2, 0,
	-1, 687,
	1, 573,
	420, 573,
	422, 573,
	424, 573,
	425, 573,
	-2, 0,
	-1, 688,
	1, 575,
	420, 575,
	422, 575,
	424, 575,
	425, 575,
	-2, 0,
	-1, 716,
	128, 917,
	210, 917,
	238, 917,
	-2, 873,
	-1, 724,
	128, 916,
	210, 916,
	238, 916,
	-2, 871,
	-1, 751,
	421, 1787,
	-2, 1205,
	-1, 752,
	421, 1788,
	-2, 1206,
	-1, 777,
	421, 1485,
	-2, 1476,
	-1, 783,
	5, 1039,
	-2, 1521,
	-1, 784,
	5, 1040,
	-2, 1526,
	-1, 785,
	5, 1041,
	-2, 1525,
	-1, 786,
	5, 1042,
	-2, 1708,
	-1, 787,
	5, 1043,
	-2, 1617,
	-1, 788,
	5, 1044,
	-2, 1676,
	-1, 789,
	5, 1045,
	-2, 1678,
	-1, 790,
	5, 1046,
	-2, 1679,
	-1, 791,
	5, 1047,
	-2, 1680,
	-1, 792,
	5, 1048,
	-2, 1688,
	-1, 793,
	5, 1049,
	-2, 1719,
	-1, 794,
	5, 1050,
	-2, 1586,
	-1, 795,
	5, 1051,
	-2, 1520,
	-1, 796,
	5, 1052,
	-2, 1624,
	-1, 797,
	5, 1053,
	-2, 1625,
	-1, 798,
	5, 1054,
	-2, 1590,
	-1, 799,
	5, 1055,
	421, 1500,
	-2, 1491,
	-1, 800,
	5, 1103,
	421, 1103,
	-2, 1754,
	-1, 805,
	421, 1501,
	-2, 1492,
	-1, 807,
	5, 1059,
	-2, 1752,
	-1, 808,
	5, 1060,
	-2, 1589,
	-1, 809,
	5, 1061,
	-2, 1591,
	-1, 810,
	5, 1062,
	-2, 1592,
	-1, 811,
	5, 1063,
	-2, 1593,
	-1, 812,
	5, 1064,
	-2, 1753,
	-1, 813,
	5, 1065,
	-2, 1765,
	-1, 814,
	5, 1066,
	-2, 1734,
	-1, 815,
	5, 1067,
	-2, 1763,
	-1, 816,
	5, 1068,
	-2, 1573,
	-1, 817,
	5, 1069,
	-2, 1574,
	-1, 818,
	5, 1083,
	-2, 1746,
	-1, 820,
	5, 1058,
	-2, 1742,
	-1, 821,
	5, 1058,
	-2, 1741,
	-1, 822,
	5, 1058,
	-2, 1758,
	-1, 823,
	5, 1075,
	-2, 1736,
	-1, 824,
	5, 1076,
	-2, 1522,
	-1, 825,
	5, 1093,
	-2, 1735,
	-1, 827,
	5, 1094,
	-2, 1550,
	-1, 828,
	5, 1095,
	-2, 1767,
	-1, 829,
	5, 1097,
	-2, 1768,
	-1, 830,
	5, 1099,
	-2, 1769,
	-1, 831,
	5, 1101,
	-2, 1709,
	-1, 832,
	5, 1027,
	-2, 1599,
	-1, 833,
	5, 1028,
	-2, 1600,
	-1, 853,
	5, 1091,
	-2, 1698,
	-1, 870,
	5, 1093,
	-2, 1738,
	-1, 871,
	5, 1093,
	-2, 1737,
	-1, 872,
	5, 1090,
	-2, 1773,
	-1, 933,
	421, 1500,
	-2, 1491,
	-1, 948,
	283, 1473,
	414, 1473,
	-2, 1472,
	-1, 1097,
	257, 902,
	-2, 718,
	-1, 1109,
	241, 1495,
	-2, 0,
	-1, 1152,
	1, 293,
	420, 293,
	424, 293,
	425, 293,
	-2, 876,
	-1, 1155,
	4, 1772,
	10, 1772,
	11, 1772,
	13, 1772,
	14, 1772,
	15, 1772,
	16, 1772,
	17, 1772,
	18, 1772,
	20, 1772,
	21, 1772,
	22, 1772,
	23, 1772,
	25, 1772,
	28, 1772,
	30, 1772,
	32, 1772,
	35, 1772,
	36, 1772,
	37, 1772,
	38, 1772,
	39, 1772,
	40, 1772,
	41, 1772,
	42, 1772,
	43, 1772,
	44, 1772,
	46, 1772,
	47, 1772,
	48, 1772,
	49, 1772,
	50, 1772,
	51, 1772,
	52, 1772,
	55, 1772,
	56, 1772,
	57, 1772,
	58, 1772,
	60, 1772,
	61, 1772,
	62, 1772,
	65, 1772,
	66, 1772,
	67, 1772,
	68, 1772,
	69, 1772,
	70, 1772,
	71, 1772,
	72, 1772,
	73, 1772,
	74, 1772,
	76, 1772,
	77, 1772,
	78, 1772,
	79, 1772,
	81, 1772,
	82, 1772,
	83, 1772,
	91, 1772,
	92, 1772,
	93, 1772,
	94, 1772,
	95, 1772,
	96, 1772,
	97, 1772,
	98, 1772,
	100, 1772,
	102, 1772,
	104, 1772,
	107, 1772,
	108, 1772,
	109, 1772,
	111, 1772,
	113, 1772,
	114, 1772,
	116, 1772,
	117, 1772,
	118, 1772,
	119, 1772,
	120, 1772,
	121, 1772,
	122, 1772,
	123, 1772,
	124, 1772,
	125, 1772,
	129, 1772,
	130, 1772,
	131, 1772,
	132, 1772,
	133, 1772,
	134, 1772,
	135, 1772,
	136, 1772,
	137, 1772,
	138, 1772,
	139, 1772,
	140, 1772,
	142, 1772,
	145, 1772,
	146, 1772,
	148, 1772,
	149, 1772,
	151, 1772,
	153, 1772,
	154, 1772,
	155, 1772,
	156, 1772,
	157, 1772,
	158, 1772,
	159, 1772,
	160, 1772,
	161, 1772,
	162, 1772,
	163, 1772,
	164, 1772,
	165, 1772,
	166, 1772,
	167, 1772,
	168, 1772,
	170, 1772,
	171, 1772,
	172, 1772,
	174, 1772,
	175, 1772,
	176, 1772,
	177, 1772,
	178, 1772,
	179, 1772,
	180, 1772,
	181, 1772,
	182, 1772,
	184, 1772,
	186, 1772,
	187, 1772,
	188, 1772,
	189, 1772,
	190, 1772,
	191, 1772,
	192, 1772,
	193, 1772,
	194, 1772,
	195, 1772,
	196, 1772,
	197, 1772,
	198, 1772,
	199, 1772,
	201, 1772,
	202, 1772,
	204, 1772,
	205, 1772,
	206, 1772,
	207, 1772,
	208, 1772,
	209, 1772,
	211, 1772,
	212, 1772,
	215, 1772,
	216, 1772,
	217, 1772,
	220, 1772,
	221, 1772,
	222, 1772,
	223, 1772,
	224, 1772,
	225, 1772,
	226, 1772,
	227, 1772,
	228, 1772,
	229, 1772,
	232, 1772,
	234, 1772,
	235, 1772,
	236, 1772,
	237, 1772,
	239, 1772,
	240, 1772,
	243, 1772,
	244, 1772,
	245, 1772,
	247, 1772,
	248, 1772,
	250, 1772,
	252, 1772,
	253, 1772,
	254, 1772,
	255, 1772,
	256, 1772,
	257, 1772,
	258, 1772,
	259, 1772,
	261, 1772,
	262, 1772,
	263, 1772,
	264, 1772,
	265, 1772,
	267, 1772,
	268, 1772,
	269, 1772,
	270, 1772,
	271, 1772,
	272, 1772,
	273, 1772,
	274, 1772,
	275, 1772,
	277, 1772,
	278, 1772,
	279, 1772,
	280, 1772,
	281, 1772,
	282, 1772,
	283, 1772,
	284, 1772,
	285, 1772,
	286, 1772,
	287, 1772,
	288, 1772,
	289, 1772,
	291, 1772,
	292, 1772,
	293, 1772,
	294, 1772,
	295, 1772,
	296, 1772,
	297, 1772,
	298, 1772,
	299, 1772,
	300, 1772,
	301, 1772,
	302, 1772,
	303, 1772,
	304, 1772,
	305, 1772,
	306, 1772,
	308, 1772,
	309, 1772,
	310, 1772,
	311, 1772,
	312, 1772,
	313, 1772,
	314, 1772,
	315, 1772,
	316, 1772,
	318, 1772,
	319, 1772,
	320, 1772,
	321, 1772,
	322, 1772,
	323, 1772,
	324, 1772,
	325, 1772,
	326, 1772,
	328, 1772,
	329, 1772,
	330, 1772,
	331, 1772,
	332, 1772,
	333, 1772,
	334, 1772,
	335, 1772,
	336, 1772,
	337, 1772,
	338, 1772,
	339, 1772,
	341, 1772,
	342, 1772,
	344, 1772,
	345, 1772,
	346, 1772,
	347, 1772,
	348, 1772,
	349, 1772,
	350, 1772,
	351, 1772,
	352, 1772,
	354, 1772,
	355, 1772,
	356, 1772,
	357, 1772,
	360, 1772,
	361, 1772,
	362, 1772,
	363, 1772,
	365, 1772,
	366, 1772,
	368, 1772,
	369, 1772,
	372, 1772,
	373, 1772,
	374, 1772,
	375, 1772,
	377, 1772,
	379, 1772,
	380, 1772,
	381, 1772,
	382, 1772,
	383, 1772,
	384, 1772,
	386, 1772,
	387, 1772,
	388, 1772,
	393, 1772,
	394, 1772,
	395, 1772,
	396, 1772,
	397, 1772,
	398, 1772,
	399, 1772,
	400, 1772,
	402, 1772,
	403, 1772,
	404, 1772,
	405, 1772,
	406, 1772,
	407, 1772,
	409, 1772,
	410, 1772,
	411, 1772,
	412, 1772,
	413, 1772,
	414, 1772,
	415, 1772,
	416, 1772,
	417, 1772,
	419, 1772,
	422, 1772,
	423, 1772,
	426, 1772,
	427, 1772,
	-2, 0,
	-1, 1174,
	144, 1683,
	358, 1683,
	404, 1683,
	423, 1683,
	-2, 0,
	-1, 1203,
	144, 1711,
	358, 1711,
	404, 1711,
	423, 1711,
	-2, 0,
	-1, 1204,
	189, 812,
	267, 812,
	272, 812,
	-2, 413,
	-1, 1275,
	1, 1726,
	420, 1726,
	422, 1726,
	423, 1726,
	424, 1726,
	425, 1726,
	-2, 571,
	-1, 1276,
	1, 1681,
	420, 1681,
	422, 1681,
	423, 1681,
	424, 1681,
	425, 1681,
	-2, 572,
	-1, 1286,
	128, 916,
	210, 916,
	238, 916,
	-2, 874,
	-1, 1370,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 1258,
	-1, 1424,
	422, 1378,
	-2, 0,
	-1, 1428,
	189, 812,
	267, 812,
	272, 812,
	-2, 807,
	-1, 1462,
	115, 878,
	128, 878,
	183, 878,
	210, 878,
	238, 878,
	246, 878,
	370, 878,
	-2, 986,
	-1, 1678,
	189, 812,
	267, 812,
	272, 812,
	-2, 415,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1138,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1139,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1140,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1141,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1142,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1143,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1144,
	-1, 1785,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1145,
	-1, 1797,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1157,
	-1, 1798,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1158,
	-1, 1799,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	195, 0,
	196, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1159,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1164,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1168,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1176,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1177,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1178,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1179,
	-1, 1899,
	5, 1055,
	144, 1389,
	421, 1500,
	-2, 1491,
	-1, 1900,
	144, 1390,
	-2, 1730,
	-1, 1901,
	144, 1391,
	-2, 1614,
	-1, 1902,
	144, 1392,
	-2, 1551,
	-1, 1903,
	144, 1393,
	-2, 1581,
	-1, 1904,
	144, 1394,
	-2, 1613,
	-1, 1905,
	144, 1395,
	-2, 1675,
	-1, 1974,
	1, 987,
	81, 987,
	115, 987,
	128, 987,
	145, 987,
	150, 987,
	152, 987,
	174, 987,
	183, 987,
	192, 987,
	206, 987,
	210, 987,
	225, 987,
	238, 987,
	241, 987,
	246, 987,
	290, 987,
	292, 987,
	370, 987,
	378, 987,
	390, 987,
	391, 987,
	401, 987,
	420, 987,
	422, 987,
	424, 987,
	425, 987,
	426, 987,
	-2, 986,
	-1, 1979,
	421, 1477,
	-2, 1489,
	-1, 2063,
	422, 1448,
	426, 1448,
	-2, 1464,
	-1, 2193,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1166,
	-1, 2194,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1170,
	-1, 2200,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1172,
	-1, 2433,
	257, 902,
	-2, 718,
	-1, 2504,
	189, 812,
	267, 812,
	272, 812,
	-2, 412,
	-1, 2522,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1174,
	-1, 2529,
	187, 0,
	188, 0,
	232, 0,
	-2, 1193,
	-1, 2590,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1223,
	-1, 2591,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1224,
	-1, 2592,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1225,
	-1, 2596,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1229,
	-1, 2597,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1230,
	-1, 2598,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1231,
	-1, 2640,
	421, 1478,
	-2, 1490,
	-1, 2755,
	187, 0,
	188, 0,
	232, 0,
	-2, 1194,
	-1, 2758,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1197,
	-1, 2759,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1199,
	-1, 2904,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1198,
	-1, 2905,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	162, 0,
	163, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1200,
	-1, 2915,
	187, 0,
	-2, 1232,
	-1, 3003,
	187, 0,
	-2, 1233,
	-1, 3097,
	38, 0,
	162, 0,
	209, 0,
	322, 0,
	399, 0,
	407, 0,
	-2, 1733,
}

const sqlPrivate = 57344

const sqlLast = 58125

var sqlAct = [...]int{

	805, 3096, 1934, 3105, 3074, 3159, 2855, 2685, 2943, 3076,
	2094, 3073, 3061, 3106, 2932, 3107, 2560, 2102, 3007, 1142,
	2870, 2894, 3095, 2123, 1765, 2698, 2826, 2811, 2186, 2443,
	1825, 2476, 2703, 2451, 1081, 2708, 1055, 1602, 2919, 1289,
	2650, 210, 2222, 1966, 2474, 2651, 498, 952, 725, 1962,
	1603, 2065, 2445, 498, 2348, 2456, 2091, 1103, 2061, 2789,
	498, 1455, 493, 498, 498, 593, 498, 210, 2220, 498,
	498, 2337, 2299, 968, 2313, 1436, 498, 2103, 1138, 1548,
	1544, 1547, 1559, 1982, 498, 2649, 2064, 2324, 945, 1991,
	1967, 733, 129, 1556, 1379, 1457, 2613, 1494, 550, 962,
	2298, 1762, 1382, 1837, 2046, 3008, 2182, 1703, 546, 1757,
	2415, 1510, 1428, 1516, 2455, 1475, 1545, 1863, 1473, 2355,
	1969, 1437, 1822, 2020, 1206, 585, 1857, 801, 926, 2047,
	1416, 1392, 2019, 1851, 918, 1931, 2062, 1153, 1135, 1125,
	954, 2096, 2856, 2068, 1954, 921, 1365, 211, 1838, 1446,
	635, 212, 129, 135, 1288, 1895, 495, 1290, 1702, 764,
	588, 1465, 1939, 206, 73, 136, 629, 498, 498, 900,
	1151, 1122, 1566, 1059, 615, 1486, 494, 923, 898, 724,
	543, 662, 1294, 1106, 765, 1427, 600, 2629, 2215, 1574,
	2630, 1574, 3186, 1574, 608, 2095, 1948, 478, 2124, 498,
	498, 498, 957, 498, 498, 971, 971, 2048, 777, 3180,
	1456, 729, 3179, 1948, 498, 498, 1948, 481, 3156, 1533,
	3153, 3131, 2825, 478, 1525, 2825, 804, 2517, 1519, 3125,
	602, 2462, 1586, 1948, 2494, 3124, 3121, 571, 28, 1948,
	3122, 3118, 3115, 481, 3093, 3119, 1525, 739, 1525, 3092,
	3091, 1080, 3090, 1525, 1586, 729, 1586, 3056, 3043, 826,
	1948, 2136, 1525, 948, 1074, 3036, 3034, 129, 3032, 2825,
	2825, 3005, 2825, 2987, 2977, 2136, 2972, 2724, 2825, 3057,
	1525, 2970, 965, 717, 2463, 2825, 803, 901, 901, 2961,
	2960, 2048, 2953, 1525, 1525, 716, 1525, 2952, 1177, 2925,
	2906, 2825, 730, 1525, 2136, 2850, 2846, 2824, 2757, 1948,
	1948, 2825, 2136, 145, 2991, 2722, 2616, 2714, 39, 2715,
	734, 2715, 2635, 2625, 763, 2428, 2636, 2626, 2619, 40,
	140, 1941, 1948, 938, 942, 947, 915, 2538, 2533, 2484,
	2126, 1525, 1948, 2420, 44, 2310, 902, 2266, 2265, 1948,
	2261, 1948, 1948, 2246, 1948, 1189, 2038, 2247, 2234, 46,
	142, 1061, 1572, 2154, 2235, 1060, 1178, 1948, 2135, 1586,
	478, 45, 2136, 51, 1525, 2122, 2119, 2057, 1947, 1591,
	1948, 1525, 1948, 932, 1590, 904, 172, 905, 1591, 1525,
	481, 1948, 2616, 52, 1940, 1681, 2724, 54, 2035, 1980,
	2420, 929, 58, 1305, 1306, 143, 1854, 2185, 1079, 2165,
	59, 72, 1524, 28, 1432, 60, 61, 1842, 1058, 175,
	2464, 1073, 174, 1173, 1700, 1575, 1172, 1575, 1308, 1575,
	1171, 1170, 1169, 2804, 1062, 2221, 1168, 1167, 1166, 2465,
	62, 1165, 1164, 1163, 1162, 1305, 1306, 1161, 1160, 63,
	172, 1159, 1158, 1157, 906, 1307, 903, 1305, 1306, 172,
	723, 928, 173, 1327, 722, 1855, 721, 2271, 2272, 720,
	1308, 166, 719, 715, 714, 713, 712, 711, 710, 167,
	709, 708, 1308, 707, 706, 705, 174, 701, 700, 699,
	660, 659, 658, 657, 656, 174, 2099, 1307, 655, 654,
	137, 653, 652, 1886, 651, 650, 1965, 498, 498, 1307,
	498, 957, 957, 498, 498, 498, 1178, 649, 498, 648,
	647, 498, 1330, 1331, 1332, 1333, 173, 498, 646, 645,
	1856, 1853, 1313, 644, 643, 173, 642, 498, 498, 498,
	498, 498, 957, 957, 166, 641, 640, 639, 624, 957,
	623, 64, 167, 622, 621, 1145, 172, 620, 65, 1335,
	1336, 1337, 1146, 1582, 137, 1573, 2462, 1741, 619, 172,
	534, 533, 1096, 137, 1313, 504, 1107, 1107, 75, 138,
	66, 498, 67, 498, 68, 503, 1313, 502, 144, 484,
	1305, 1306, 174, 69, 483, 498, 2277, 482, 1093, 196,
	172, 1335, 1336, 1337, 195, 174, 194, 1525, 193, 1328,
	192, 83, 191, 1940, 108, 1308, 1858, 1111, 498, 190,
	189, 188, 187, 141, 186, 185, 184, 183, 182, 498,
	181, 180, 173, 1068, 732, 1973, 174, 1178, 2271, 2272,
	1139, 166, 1307, 179, 178, 173, 177, 176, 1175, 167,
	2768, 1328, 2716, 2633, 166, 2351, 2240, 547, 113, 2217,
	1380, 1124, 167, 2174, 2058, 2051, 1458, 957, 139, 2084,
	137, 1884, 1882, 2287, 1880, 1334, 173, 1129, 1132, 1706,
	578, 1472, 549, 137, 1386, 166, 1599, 498, 1301, 1154,
	1220, 40, 1329, 167, 1878, 1083, 1064, 3112, 1108, 1305,
	1306, 3094, 2998, 498, 172, 2973, 44, 1852, 2942, 2892,
	2994, 969, 1056, 730, 137, 2992, 2888, 4, 2878, 1313,
	2788, 2787, 2775, 2774, 1308, 1067, 2773, 1072, 2772, 1078,
	2766, 2141, 1530, 2765, 1329, 577, 2764, 2763, 2736, 2734,
	174, 1214, 2639, 1204, 2610, 1218, 1335, 1336, 1337, 2609,
	1598, 1307, 2608, 2540, 762, 2008, 2288, 950, 2419, 1286,
	1373, 2423, 1305, 1306, 579, 1287, 2346, 2277, 1348, 1349,
	1350, 2306, 59, 581, 2297, 2270, 2267, 60, 2264, 2262,
	173, 2245, 2227, 2226, 2216, 2127, 1974, 1308, 1301, 166,
	1354, 1528, 914, 1553, 1300, 1201, 1328, 167, 1378, 1383,
	1833, 1368, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314,
	1315, 63, 3184, 3167, 1307, 3166, 1082, 2562, 2098, 3085,
	2271, 2272, 1327, 3080, 3038, 3029, 2085, 3028, 1313, 1701,
	2021, 3025, 3024, 3019, 3016, 2990, 1182, 1285, 2181, 2989,
	1827, 2938, 2917, 1187, 2287, 1221, 1317, 1309, 1310, 1311,
	1312, 1314, 1315, 2864, 2860, 1335, 1336, 1337, 172, 1309,
	1310, 1311, 1312, 1314, 1315, 2858, 2282, 2280, 2281, 2273,
	2274, 2275, 2276, 2278, 2279, 2271, 2272, 2803, 2488, 1329,
	2786, 1330, 1331, 1332, 1333, 2725, 2701, 717, 2692, 2691,
	2689, 1313, 2667, 2666, 174, 498, 1305, 1306, 2877, 716,
	498, 2656, 2655, 2621, 2528, 1328, 2490, 2271, 2272, 2482,
	1297, 1298, 2437, 64, 1345, 1355, 1443, 1302, 1335, 1336,
	1337, 1308, 730, 1885, 1834, 2404, 498, 2288, 2387, 930,
	2365, 2364, 2309, 2244, 173, 2243, 1434, 2232, 172, 172,
	1369, 138, 66, 166, 67, 2209, 1393, 1390, 1307, 2277,
	2143, 167, 1977, 1394, 1395, 1959, 1396, 1946, 1876, 1539,
	1471, 1343, 172, 1435, 1426, 1425, 1424, 1423, 1328, 1422,
	1421, 1420, 137, 580, 174, 174, 108, 2083, 1305, 1306,
	1419, 1418, 1415, 1414, 1440, 1441, 1413, 1412, 1329, 1318,
	1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 174, 1411,
	1410, 3010, 1417, 1308, 2277, 1409, 1408, 1407, 1406, 129,
	2271, 2272, 1453, 2365, 173, 173, 1405, 1404, 1403, 1466,
	901, 1375, 1368, 166, 166, 1313, 1454, 1600, 1200, 1184,
	1307, 167, 167, 1179, 1334, 1156, 2277, 1410, 173, 2281,
	2273, 2274, 2275, 2276, 2278, 2279, 1150, 166, 2138, 2891,
	2760, 1329, 137, 137, 2733, 167, 2628, 2624, 957, 498,
	1691, 1690, 1493, 1700, 1697, 971, 1097, 1100, 1463, 1431,
	2233, 1429, 1960, 1383, 1346, 2330, 548, 2486, 1433, 1366,
	1467, 1481, 1217, 498, 971, 498, 498, 730, 1487, 2271,
	2272, 1883, 1881, 210, 1879, 1700, 1410, 2153, 1460, 1316,
	1317, 1309, 1310, 1311, 1312, 1314, 1315, 2995, 1517, 1700,
	498, 498, 2993, 2287, 1877, 2446, 2883, 498, 1700, 498,
	2727, 498, 1540, 2726, 2631, 498, 2048, 2941, 1400, 932,
	1398, 932, 1458, 1854, 1401, 1283, 1399, 2665, 1552, 2277,
	2966, 1512, 1195, 2152, 2408, 2403, 2398, 929, 2386, 929,
	896, 1344, 2251, 1589, 2250, 1694, 2249, 957, 2023, 1347,
	2248, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	2191, 1674, 1213, 1388, 1687, 498, 957, 210, 498, 498,
	957, 1864, 1554, 2124, 897, 2920, 957, 1549, 2496, 210,
	498, 1563, 1855, 498, 498, 2397, 2288, 1506, 2095, 498,
	2238, 2564, 1397, 1676, 1561, 1664, 1061, 928, 3123, 928,
	1060, 913, 3113, 1536, 1377, 478, 2287, 3120, 2458, 2645,
	3070, 971, 1228, 2699, 2275, 2276, 2278, 2279, 2129, 201,
	957, 957, 1523, 498, 542, 481, 511, 3042, 498, 3146,
	1634, 3147, 1225, 210, 498, 1570, 498, 2506, 498, 478,
	498, 1124, 498, 2838, 2155, 1984, 1543, 1856, 1853, 3183,
	2965, 2964, 498, 3114, 498, 892, 2670, 1259, 1695, 481,
	1732, 1488, 2963, 498, 1730, 2962, 197, 2273, 2274, 2275,
	2276, 2278, 2279, 1476, 2679, 2674, 1477, 2673, 1565, 890,
	2854, 2487, 1668, 1568, 1538, 728, 1215, 1154, 1485, 2288,
	1311, 1312, 1314, 1315, 498, 2642, 2641, 2231, 971, 2273,
	2274, 2275, 2276, 2278, 2279, 743, 1678, 541, 2230, 510,
	1489, 1490, 2229, 2228, 2195, 888, 1875, 1592, 1688, 2125,
	1744, 886, 2041, 478, 2034, 883, 2030, 1699, 2011, 1596,
	1594, 1201, 1216, 1858, 1984, 478, 1258, 1809, 1430, 1675,
	1057, 1993, 1665, 481, 2997, 1983, 1763, 1764, 1874, 1873,
	2092, 1872, 1767, 727, 1191, 481, 1085, 202, 1738, 1609,
	1478, 2509, 1839, 1692, 703, 1704, 2045, 1373, 1843, 3041,
	2684, 1223, 1480, 1712, 1467, 1315, 1839, 971, 1476, 1739,
	1708, 1477, 535, 1270, 2945, 2056, 2003, 1595, 1696, 478,
	3088, 614, 1824, 2002, 1569, 1858, 1721, 1824, 2158, 1666,
	2280, 2281, 2273, 2274, 2275, 2276, 2278, 2279, 1894, 481,
	2160, 1898, 1898, 1908, 1910, 1915, 729, 1839, 613, 2834,
	1715, 498, 1482, 498, 1852, 1996, 2139, 749, 1938, 1304,
	523, 1831, 1742, 203, 1633, 614, 1829, 1743, 717, 2511,
	2161, 717, 717, 1199, 1761, 1192, 1254, 971, 498, 2510,
	1753, 2171, 2159, 1754, 1755, 3138, 2550, 498, 1701, 1698,
	498, 3053, 2454, 971, 1978, 1478, 2453, 498, 3169, 1864,
	2027, 2183, 2184, 540, 3021, 498, 1861, 1480, 1871, 1508,
	1609, 1609, 1577, 498, 1574, 1579, 2279, 2658, 1581, 3054,
	1701, 2021, 1584, 2394, 1255, 498, 2389, 1257, 957, 1606,
	1975, 1835, 3146, 524, 1701, 2021, 1194, 1483, 1483, 498,
	971, 2453, 1989, 1701, 2021, 498, 498, 1505, 1985, 2507,
	205, 1282, 1859, 730, 691, 2547, 1491, 1482, 1476, 730,
	498, 1477, 1737, 498, 204, 2407, 2014, 3109, 2505, 2668,
	726, 1961, 1858, 901, 738, 1971, 1972, 1233, 1995, 539,
	2832, 1997, 1999, 1391, 2675, 1633, 1633, 948, 540, 2043,
	498, 1526, 498, 1926, 498, 1906, 2377, 498, 2079, 498,
	1267, 498, 200, 498, 498, 1989, 498, 957, 957, 957,
	1534, 2013, 957, 2028, 202, 1956, 1957, 2042, 1952, 498,
	2548, 498, 1936, 1944, 1945, 1935, 2031, 2117, 2118, 1951,
	1463, 2376, 505, 1522, 508, 2106, 1483, 198, 1224, 2005,
	1988, 894, 1483, 692, 893, 1478, 3137, 2012, 1731, 730,
	1606, 1606, 1729, 2022, 2024, 2025, 2026, 1480, 1981, 2029,
	1806, 2900, 1479, 2013, 539, 1084, 1989, 1740, 884, 2383,
	201, 2911, 517, 2946, 1509, 2968, 932, 3110, 1268, 1363,
	199, 2113, 2242, 1994, 2128, 508, 514, 2833, 498, 2379,
	203, 1955, 1061, 932, 929, 930, 2049, 930, 1970, 729,
	1609, 478, 129, 542, 884, 2115, 1858, 1482, 2144, 2381,
	885, 929, 2108, 129, 884, 1513, 1445, 2896, 537, 2120,
	2131, 481, 2498, 517, 1841, 1193, 2659, 971, 2197, 498,
	2101, 526, 525, 1823, 3170, 704, 2110, 514, 2111, 498,
	2112, 498, 2114, 1269, 2007, 3111, 2738, 1707, 2380, 2121,
	1575, 1593, 1154, 538, 928, 1597, 2728, 2130, 498, 498,
	498, 3162, 498, 2140, 1830, 516, 1190, 1479, 1714, 3136,
	2037, 928, 2745, 3108, 693, 1633, 1303, 205, 1210, 1679,
	1449, 498, 2075, 2142, 1804, 1807, 541, 2053, 542, 2055,
	1198, 204, 1483, 2148, 1241, 2149, 536, 3145, 2501, 3143,
	2869, 1394, 1395, 537, 1449, 1710, 1711, 2867, 2089, 1452,
	2087, 2895, 1417, 2147, 2145, 1542, 516, 1442, 1188, 1474,
	1293, 1176, 501, 2784, 2097, 2156, 2097, 1447, 2901, 200,
	2412, 1803, 1521, 1452, 1766, 2955, 2954, 2176, 538, 2936,
	1606, 1450, 802, 1234, 3175, 2416, 2599, 1205, 2837, 1917,
	2212, 1953, 1292, 1483, 3013, 2836, 1211, 1373, 2198, 1686,
	1448, 1212, 498, 2822, 198, 1450, 2644, 694, 2361, 2224,
	2225, 541, 511, 2357, 2090, 2088, 2326, 1564, 1551, 1550,
	1515, 536, 1546, 479, 1541, 2500, 2546, 509, 496, 1749,
	2819, 1235, 2180, 3062, 1232, 519, 2178, 201, 1514, 2497,
	2704, 2897, 545, 2015, 695, 589, 596, 199, 545, 479,
	507, 589, 611, 1865, 2871, 1735, 1292, 1479, 618, 1682,
	2937, 1684, 506, 511, 2367, 1511, 638, 1451, 2338, 2366,
	2820, 2189, 1709, 2060, 1291, 1685, 3160, 736, 509, 691,
	2327, 1950, 532, 1363, 1805, 513, 2059, 1489, 1490, 2196,
	518, 1451, 1949, 1121, 2785, 510, 2308, 2077, 2169, 738,
	2170, 507, 1293, 971, 527, 512, 1210, 727, 1119, 2320,
	2311, 2600, 2499, 506, 2686, 2318, 2319, 2601, 3174, 498,
	1750, 2411, 498, 2421, 576, 36, 2835, 1110, 1109, 498,
	3150, 2857, 498, 498, 971, 737, 513, 3161, 1291, 1979,
	2237, 518, 498, 498, 498, 3, 510, 583, 498, 545,
	545, 498, 730, 2325, 2339, 2934, 512, 931, 498, 498,
	498, 498, 498, 606, 2341, 2334, 2790, 3163, 692, 2614,
	2016, 2017, 498, 1242, 1210, 2342, 2343, 599, 3152, 498,
	1869, 496, 496, 496, 1211, 963, 496, 2935, 2354, 1212,
	1280, 498, 957, 1989, 2916, 498, 479, 1063, 2783, 2358,
	2362, 2815, 971, 2368, 2816, 2371, 498, 2350, 2683, 2329,
	575, 35, 971, 2417, 2332, 2300, 2333, 2866, 2335, 971,
	2527, 2218, 2312, 2032, 2303, 2304, 2305, 1264, 2473, 2388,
	2345, 498, 1445, 498, 2263, 498, 2208, 2818, 957, 498,
	957, 957, 957, 574, 32, 2146, 2040, 2821, 498, 2340,
	498, 2405, 1211, 1096, 498, 2010, 2352, 1212, 1532, 498,
	2429, 498, 1470, 2315, 573, 79, 2349, 1281, 498, 1262,
	2363, 2322, 2323, 485, 1252, 2328, 1120, 1820, 2369, 2395,
	2373, 2374, 1185, 1481, 2382, 498, 498, 572, 78, 2301,
	957, 1118, 1868, 1250, 2399, 2460, 1449, 2449, 1818, 693,
	36, 1096, 2116, 2448, 2457, 2393, 2390, 498, 1481, 2400,
	932, 2481, 1728, 2457, 2406, 2425, 2391, 2865, 932, 932,
	2392, 936, 932, 2173, 2422, 1452, 2172, 2431, 929, 2492,
	582, 2418, 1279, 1248, 1609, 498, 929, 929, 1517, 2168,
	929, 528, 2817, 1447, 1246, 1517, 932, 2485, 569, 23,
	498, 604, 605, 2447, 2150, 1372, 1718, 1450, 1667, 1244,
	1402, 1092, 930, 3104, 929, 597, 598, 570, 24, 1263,
	568, 30, 1238, 2166, 129, 2681, 1448, 1520, 971, 930,
	3059, 2459, 2466, 567, 21, 2808, 35, 1538, 928, 529,
	735, 2472, 694, 2663, 1814, 2661, 928, 928, 2491, 2643,
	928, 971, 1815, 498, 2384, 1816, 2385, 2530, 1821, 1633,
	2442, 1261, 565, 20, 566, 19, 1251, 2206, 2440, 32,
	2502, 2503, 1117, 730, 928, 530, 882, 531, 2504, 695,
	2093, 555, 15, 2508, 2401, 1249, 2402, 2081, 2204, 2080,
	79, 2078, 2074, 1451, 556, 16, 2513, 2565, 564, 57,
	1588, 1727, 2542, 2543, 2544, 2515, 1587, 1585, 2555, 1583,
	1580, 486, 487, 78, 1763, 2569, 1222, 1578, 691, 1576,
	2611, 2426, 1531, 2982, 1606, 1247, 1529, 1518, 1507, 2534,
	2435, 1609, 1763, 2579, 1504, 1492, 1245, 1484, 738, 496,
	1091, 2444, 496, 1295, 498, 496, 496, 496, 2554, 3147,
	963, 1243, 2566, 1114, 2890, 2479, 498, 2889, 2561, 496,
	563, 56, 971, 2607, 1237, 2568, 2549, 2551, 2552, 496,
	496, 496, 496, 963, 23, 910, 2493, 554, 55, 2576,
	1705, 2603, 2187, 2578, 2201, 2632, 1817, 2627, 1984, 489,
	488, 562, 12, 24, 1819, 2202, 30, 911, 2207, 2000,
	2672, 1984, 553, 50, 1609, 2984, 1633, 692, 2001, 21,
	2604, 129, 1998, 638, 1116, 596, 2713, 2678, 2612, 887,
	889, 2620, 560, 47, 1296, 2617, 2618, 496, 2615, 561,
	48, 498, 498, 2852, 498, 2044, 490, 491, 20, 498,
	19, 552, 49, 2039, 2682, 2033, 2634, 2009, 1609, 1609,
	1196, 971, 2188, 971, 559, 7, 957, 15, 2151, 2317,
	584, 638, 3023, 2647, 558, 6, 1609, 1609, 1672, 1673,
	16, 1606, 2693, 498, 57, 2827, 1989, 2669, 912, 1633,
	557, 38, 2717, 2467, 2468, 2469, 1236, 2470, 2471, 3000,
	2344, 1305, 1306, 957, 498, 498, 2710, 1609, 2709, 2623,
	2700, 2013, 2702, 2706, 2652, 498, 2791, 2705, 971, 498,
	498, 971, 498, 2018, 2688, 2004, 1308, 2687, 2106, 496,
	498, 1299, 2695, 1633, 1633, 2696, 2203, 2690, 971, 607,
	2036, 551, 37, 1495, 2205, 496, 56, 2707, 693, 2711,
	2006, 1633, 1633, 1307, 1606, 3058, 932, 2742, 2719, 2863,
	2718, 1499, 2638, 55, 2100, 2747, 2082, 1305, 1306, 2730,
	2731, 2073, 1937, 1677, 929, 1601, 3158, 12, 2414, 2480,
	3173, 1380, 1633, 498, 2732, 2414, 2756, 2748, 50, 2271,
	2272, 2739, 1305, 1306, 932, 2163, 2162, 2553, 1606, 1606,
	2743, 1227, 1496, 2489, 2163, 2735, 1226, 2396, 47, 2164,
	1870, 1850, 929, 2761, 2545, 48, 1606, 1606, 2740, 1307,
	1266, 1378, 1376, 1265, 2928, 2881, 2721, 49, 2697, 1752,
	2438, 2436, 2086, 1555, 928, 1278, 1277, 1260, 1256, 1253,
	7, 694, 498, 1239, 1197, 2315, 1680, 1606, 895, 702,
	6, 2944, 971, 2430, 971, 2432, 2433, 2434, 1272, 2660,
	3069, 689, 498, 498, 498, 2375, 38, 1717, 1500, 2782,
	1240, 1719, 928, 2331, 1958, 3052, 2769, 498, 695, 2241,
	3006, 2910, 498, 1867, 498, 1387, 53, 498, 498, 498,
	498, 498, 932, 772, 498, 498, 957, 2793, 2794, 2828,
	971, 2799, 852, 2809, 957, 2483, 2796, 2805, 2646, 1989,
	929, 2802, 498, 498, 2067, 2807, 930, 37, 2066, 974,
	1689, 2798, 776, 2853, 930, 930, 957, 2839, 930, 1501,
	1502, 2723, 1897, 1609, 2737, 2844, 498, 618, 1497, 1605,
	779, 2797, 545, 1607, 2537, 498, 498, 957, 957, 2851,
	782, 2847, 930, 781, 2662, 780, 2664, 1096, 1989, 1918,
	1608, 2830, 2875, 1461, 1498, 931, 2899, 2558, 496, 1389,
	928, 2862, 778, 2873, 1604, 2076, 2884, 2872, 2104, 680,
	2449, 2457, 2806, 2848, 2874, 2349, 2882, 1693, 1828, 971,
	2885, 2880, 1862, 2236, 1384, 2859, 754, 2902, 2792, 1860,
	1183, 753, 2336, 2840, 2652, 2452, 2637, 2868, 1633, 2876,
	2845, 1748, 2179, 1745, 2922, 515, 2268, 1149, 1923, 1916,
	1912, 1832, 1284, 1364, 2105, 971, 1219, 2347, 2461, 498,
	2137, 498, 1372, 971, 498, 1756, 909, 908, 2652, 907,
	3075, 1503, 498, 3072, 2918, 932, 2898, 1683, 971, 2157,
	2652, 2907, 2923, 2924, 1357, 769, 2316, 2931, 2424, 1089,
	3022, 2795, 1356, 929, 891, 932, 3015, 1209, 1208, 1207,
	2360, 3168, 2949, 1606, 1989, 2948, 2657, 2950, 2640, 171,
	2929, 1922, 168, 929, 932, 170, 2947, 169, 498, 2410,
	498, 82, 34, 957, 33, 107, 2831, 106, 498, 105,
	104, 479, 929, 103, 102, 101, 2841, 2842, 100, 2957,
	99, 98, 2926, 97, 96, 2927, 95, 94, 932, 93,
	92, 971, 91, 928, 2981, 1063, 90, 496, 1537, 89,
	932, 2861, 2988, 88, 2986, 479, 929, 87, 2985, 86,
	2980, 498, 2709, 928, 2979, 85, 84, 498, 929, 634,
	2930, 631, 1560, 1560, 81, 498, 80, 2996, 31, 496,
	26, 496, 928, 496, 2969, 111, 2971, 545, 112, 3012,
	2975, 3018, 2879, 2449, 2652, 3004, 25, 77, 3011, 2999,
	76, 29, 18, 498, 498, 11, 17, 22, 134, 498,
	3009, 1609, 133, 132, 131, 130, 928, 14, 3020, 3033,
	957, 3035, 13, 126, 128, 498, 127, 2652, 928, 2652,
	957, 957, 125, 2652, 498, 124, 498, 638, 498, 479,
	1063, 589, 3037, 3055, 969, 123, 122, 1056, 3026, 3046,
	3047, 479, 1063, 3048, 3040, 963, 496, 498, 121, 3045,
	498, 638, 498, 1609, 971, 3065, 10, 3039, 8, 110,
	3077, 3078, 3079, 9, 932, 2893, 2495, 70, 2729, 71,
	27, 3081, 3083, 3082, 43, 3084, 1633, 42, 3071, 3067,
	41, 109, 929, 162, 3089, 638, 161, 160, 498, 159,
	496, 3087, 155, 154, 158, 479, 496, 932, 496, 932,
	496, 156, 496, 932, 496, 3103, 3102, 3101, 157, 153,
	120, 498, 930, 3027, 1733, 929, 1734, 929, 3127, 498,
	3128, 929, 3129, 164, 163, 496, 151, 2983, 1633, 3135,
	148, 2974, 1609, 3116, 3044, 498, 3132, 147, 150, 152,
	149, 1606, 928, 146, 3133, 3134, 165, 119, 118, 3141,
	930, 3144, 3142, 117, 3086, 116, 638, 3077, 115, 3148,
	114, 3149, 3151, 5, 2106, 3154, 3155, 2, 1918, 1918,
	2801, 1, 0, 3157, 0, 928, 0, 928, 1305, 1306,
	2132, 928, 3165, 3164, 0, 0, 0, 0, 0, 0,
	3172, 40, 0, 1606, 0, 3171, 0, 2652, 0, 3176,
	3177, 3130, 0, 1308, 0, 0, 44, 1633, 0, 3178,
	0, 2822, 0, 0, 0, 3181, 3182, 3185, 0, 0,
	0, 0, 0, 3187, 0, 0, 0, 0, 0, 0,
	1307, 0, 2958, 2959, 0, 2133, 0, 0, 2819, 0,
	0, 2812, 0, 3049, 2652, 3050, 0, 0, 930, 0,
	0, 0, 0, 0, 2810, 0, 0, 0, 0, 2814,
	0, 2849, 0, 0, 2134, 1918, 1918, 1918, 0, 3066,
	0, 0, 1606, 581, 0, 1444, 0, 932, 2820, 0,
	0, 0, 0, 618, 0, 545, 0, 0, 0, 0,
	1922, 1922, 0, 0, 0, 929, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 2908, 2813, 1313, 0, 0,
	545, 63, 2886, 2887, 0, 0, 0, 931, 0, 545,
	0, 0, 496, 0, 932, 0, 0, 0, 0, 1992,
	3126, 0, 0, 0, 1335, 1336, 1337, 496, 0, 0,
	0, 2908, 929, 0, 0, 496, 0, 0, 0, 1766,
	0, 0, 0, 0, 0, 928, 0, 496, 0, 0,
	0, 0, 0, 0, 1766, 0, 0, 0, 1305, 1306,
	0, 496, 0, 0, 0, 0, 0, 479, 2050, 0,
	0, 0, 0, 0, 1328, 0, 0, 1922, 1922, 1922,
	0, 0, 2063, 1308, 0, 1063, 0, 0, 0, 0,
	0, 930, 928, 0, 0, 0, 0, 0, 0, 2815,
	0, 0, 2816, 64, 0, 741, 0, 0, 0, 0,
	1307, 930, 1992, 0, 545, 0, 496, 0, 1327, 496,
	0, 496, 0, 496, 0, 496, 496, 1056, 963, 0,
	930, 138, 66, 0, 67, 2818, 0, 0, 0, 0,
	0, 596, 0, 1992, 0, 2821, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 2751, 580, 930, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 1330, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 1313, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2271, 2272, 0, 0, 0,
	589, 0, 0, 0, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 1918, 1918, 0, 0, 0, 166, 0, 0,
	2817, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	1766, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 1063, 1328, 2286, 137, 0, 0, 0,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	496, 496, 496, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 496, 0, 0, 0, 0, 0, 1918,
	1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918,
	1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 0, 1918,
	1334, 0, 0, 930, 2277, 930, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 499, 1922, 1922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2210, 2211, 0, 0, 0, 0, 0, 0,
	1380, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	0, 2287, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
	1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
	0, 1922, 1065, 577, 1069, 0, 1075, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 2294,
	2295, 2296, 0, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 579, 0, 931, 0, 0, 0, 0, 0,
	59, 581, 931, 931, 2288, 60, 931, 0, 0, 0,
	0, 545, 0, 0, 545, 0, 0, 0, 0, 0,
	0, 545, 0, 930, 545, 545, 0, 0, 2271, 2272,
	1461, 2289, 2290, 2291, 496, 1992, 2356, 0, 0, 63,
	1992, 0, 0, 2356, 0, 0, 2753, 0, 0, 0,
	1992, 2356, 1992, 2356, 2356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 496, 958, 0, 0, 972, 972,
	930, 1537, 0, 1181, 0, 0, 0, 0, 0, 0,
	1186, 0, 0, 496, 0, 0, 0, 963, 2286, 0,
	2271, 2272, 0, 2289, 2290, 2291, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2752, 741,
	0, 0, 0, 741, 2282, 2280, 2281, 2273, 2274, 2275,
	2276, 2278, 2279, 1560, 0, 1560, 0, 496, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	496, 64, 496, 0, 0, 0, 963, 0, 0, 0,
	2286, 1992, 0, 545, 0, 0, 0, 2277, 0, 0,
	1992, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	66, 0, 67, 0, 0, 0, 0, 2477, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 959, 0, 0, 973, 973, 0, 0, 0, 1063,
	0, 580, 0, 0, 108, 2292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2277,
	1358, 1359, 1360, 1361, 1362, 0, 174, 2512, 0, 0,
	0, 0, 0, 1371, 2287, 0, 0, 0, 0, 0,
	2271, 2272, 496, 2289, 2290, 2291, 0, 0, 0, 0,
	0, 1385, 0, 0, 0, 0, 2523, 2524, 2532, 0,
	0, 0, 0, 0, 0, 0, 173, 2292, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2563, 2287, 0, 0, 0,
	2286, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1918,
	0, 0, 0, 2580, 2581, 2582, 2583, 2584, 2585, 2586,
	2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596,
	2597, 2598, 0, 2602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1918, 0, 0, 2277,
	0, 0, 0, 0, 958, 958, 0, 0, 0, 2288,
	931, 0, 0, 1438, 1438, 1438, 545, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 545, 0,
	0, 0, 0, 0, 0, 958, 958, 0, 0, 0,
	0, 0, 958, 0, 0, 0, 0, 2292, 2654, 0,
	2283, 2284, 2285, 0, 0, 0, 0, 2282, 2280, 2281,
	2273, 2274, 2275, 2276, 2278, 2279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2287, 0, 0, 0,
	0, 1922, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349,
	1350, 0, 1918, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1992, 1560, 0, 1560, 1308, 0, 0,
	1354, 496, 2283, 2284, 2285, 0, 0, 0, 1922, 2282,
	2280, 2281, 2273, 2274, 2275, 2276, 2278, 2279, 0, 0,
	959, 959, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1992, 931, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2288,
	958, 959, 959, 0, 0, 0, 596, 596, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 963, 496, 0, 496, 0, 0, 0, 0, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 1922, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 1355, 0, 0, 1335, 1336,
	1337, 0, 0, 0, 0, 2770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2283, 2284, 2285, 0, 0, 1322, 1323, 2282,
	2280, 2281, 2273, 2274, 2275, 2276, 2278, 2279, 0, 0,
	0, 1343, 0, 0, 0, 0, 959, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 931,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 741, 741, 0, 1992, 2356, 1992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2654, 1063,
	0, 0, 492, 0, 1992, 0, 2356, 0, 0, 1063,
	1063, 496, 1992, 2356, 1334, 0, 496, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 2654, 0, 1063, 2063, 0, 0, 0, 0,
	0, 0, 0, 0, 2654, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 1746, 1992, 1751,
	0, 0, 0, 0, 0, 1758, 0, 2477, 2477, 0,
	0, 0, 0, 0, 0, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	0, 1808, 0, 1810, 1811, 1812, 1813, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	1306, 1344, 1836, 2915, 1319, 1320, 1326, 1325, 1321, 1347,
	1371, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	0, 1992, 0, 2356, 1308, 940, 2933, 0, 0, 0,
	967, 1305, 1306, 0, 496, 0, 0, 0, 2654, 0,
	2939, 0, 0, 0, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1307, 0, 0, 0, 0, 1308, 0, 1914, 1327,
	1925, 1927, 1932, 0, 0, 0, 0, 0, 0, 0,
	0, 2654, 0, 2654, 0, 0, 0, 2654, 0, 0,
	496, 958, 496, 1307, 0, 773, 74, 0, 972, 0,
	1063, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2526, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 1330, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 0, 2563, 0, 2521, 3003, 0, 0, 545,
	0, 0, 0, 0, 0, 0, 74, 2933, 0, 0,
	1330, 1331, 1332, 1333, 0, 1335, 1336, 1337, 0, 0,
	1313, 0, 0, 0, 2052, 0, 2054, 0, 0, 0,
	0, 0, 0, 0, 0, 1992, 2356, 0, 0, 0,
	958, 496, 0, 0, 0, 0, 0, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 2356, 0, 958,
	209, 0, 0, 958, 0, 1328, 1063, 959, 1063, 958,
	496, 0, 209, 0, 973, 718, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 0, 0, 0, 3063,
	0, 0, 1063, 973, 496, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 2654, 0, 958, 958, 0, 0, 0, 0, 0,
	919, 74, 0, 0, 0, 0, 209, 0, 0, 0,
	2563, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 2654, 0,
	0, 1992, 0, 1334, 0, 0, 959, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2933, 0, 0,
	1329, 0, 0, 0, 0, 959, 0, 578, 0, 959,
	0, 972, 0, 1087, 0, 959, 0, 0, 40, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1128, 1128, 1128, 967, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	959, 0, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 1316,
	1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0,
	972, 579, 0, 0, 0, 0, 0, 0, 0, 59,
	581, 1180, 0, 0, 60, 0, 0, 0, 0, 0,
	1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 2193,
	2194, 0, 0, 0, 0, 2200, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 63, 0,
	0, 0, 0, 0, 2213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2219, 0,
	972, 2223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	2239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2252, 1271, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 1308, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 1932, 1932, 1932, 0, 0, 0,
	0, 0, 0, 74, 1307, 74, 1438, 74, 0, 0,
	0, 0, 1327, 0, 2321, 0, 0, 0, 138, 66,
	0, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 172,
	958, 958, 958, 0, 0, 958, 0, 0, 0, 0,
	580, 0, 973, 108, 0, 0, 2520, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 2378,
	0, 1330, 1331, 1332, 1333, 174, 1305, 1306, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 973,
	0, 1308, 0, 0, 0, 0, 0, 0, 1335, 1336,
	1337, 0, 0, 0, 74, 173, 0, 0, 0, 0,
	0, 74, 0, 0, 166, 0, 0, 0, 1307, 0,
	0, 0, 167, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 1305, 1306, 1328, 0,
	972, 2450, 0, 0, 0, 0, 959, 959, 959, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	2199, 1308, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 1313, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 741, 741,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 0,
	0, 741, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 2514, 0, 718,
	0, 1758, 0, 0, 0, 0, 0, 2518, 2519, 0,
	2192, 2522, 0, 0, 0, 2525, 0, 0, 0, 0,
	0, 1367, 0, 1370, 2529, 1330, 1331, 1332, 1333, 0,
	0, 2535, 1328, 0, 0, 1313, 973, 2321, 0, 0,
	1381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2556, 0, 0, 0, 0, 0,
	0, 0, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	0, 2570, 2571, 0, 2572, 2573, 2574, 0, 0, 2575,
	0, 0, 0, 0, 0, 2577, 0, 0, 0, 2271,
	2272, 1535, 2289, 2290, 2291, 0, 0, 0, 1334, 0,
	0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	0, 0, 1328, 0, 0, 1329, 2605, 2606, 0, 0,
	0, 0, 0, 0, 0, 1567, 0, 1567, 0, 0,
	0, 0, 0, 0, 2271, 2272, 0, 2289, 2290, 2291,
	0, 0, 2622, 0, 0, 0, 972, 0, 0, 2286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 1334, 0,
	2648, 0, 0, 74, 0, 0, 1459, 0, 1462, 0,
	0, 0, 0, 0, 2286, 1329, 0, 0, 0, 0,
	1670, 0, 2671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2676, 0, 0, 0, 2277, 2677,
	0, 0, 0, 0, 2680, 1318, 1316, 1317, 1309, 1310,
	1311, 1312, 1314, 1315, 0, 958, 0, 0, 0, 0,
	0, 0, 2293, 0, 1716, 972, 0, 0, 0, 0,
	1722, 0, 1723, 0, 1724, 972, 1725, 0, 1726, 0,
	0, 0, 972, 2277, 0, 0, 2292, 0, 0, 1438,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 1736,
	2720, 958, 0, 958, 958, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2287, 0, 0, 0, 0,
	0, 0, 0, 973, 0, 1318, 1316, 1317, 1309, 1310,
	1311, 1312, 1314, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 2749, 2750, 0, 0,
	2287, 0, 2754, 2755, 0, 0, 0, 2758, 2759, 0,
	0, 0, 0, 0, 0, 0, 0, 2762, 0, 0,
	0, 959, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 2767, 0, 0, 0, 0, 2288, 0,
	2771, 973, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 959, 0, 959,
	959, 959, 0, 0, 2271, 2272, 0, 2289, 2290, 2291,
	0, 972, 0, 2288, 0, 0, 0, 0, 0, 0,
	0, 0, 2531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2829,
	0, 0, 0, 0, 2286, 0, 1976, 0, 0, 0,
	0, 2283, 2284, 2285, 0, 0, 0, 0, 2282, 2280,
	2281, 2273, 2274, 2275, 2276, 2278, 2279, 0, 0, 2271,
	2272, 0, 2289, 2290, 2291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 2283, 2284, 2285, 0,
	0, 0, 0, 2282, 2280, 2281, 2273, 2274, 2275, 2276,
	2278, 2279, 0, 2277, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 2286,
	718, 0, 0, 718, 718, 0, 0, 2903, 2904, 2905,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2109, 0, 0, 1128, 0, 1128, 0, 1128, 0, 967,
	967, 2292, 2913, 2914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2287, 1826, 0, 0, 0, 0, 0, 0, 2277, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	1370, 0, 0, 0, 972, 0, 972, 0, 0, 958,
	0, 0, 2956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2967, 0, 0, 0, 0, 0, 2292, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 2288, 972, 2287, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 2167, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2175, 967, 2177, 0, 0, 0,
	0, 0, 74, 0, 3014, 0, 0, 3017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2190, 0, 0,
	973, 0, 973, 0, 0, 959, 0, 0, 74, 0,
	0, 0, 3030, 0, 0, 0, 0, 0, 2288, 0,
	0, 0, 0, 0, 0, 74, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 2283, 2284, 2285, 0,
	0, 0, 959, 2282, 2280, 2281, 2273, 2274, 2275, 2276,
	2278, 2279, 0, 0, 0, 0, 0, 973, 0, 0,
	973, 0, 74, 0, 74, 972, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 3100,
	3100, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 972, 0, 0, 3117, 958, 0, 0,
	0, 2283, 2284, 2285, 0, 0, 0, 0, 2282, 2280,
	2281, 2273, 2274, 2275, 2276, 2278, 2279, 0, 0, 958,
	0, 0, 0, 3100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 3100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 0, 0, 972, 973,
	0, 0, 0, 959, 0, 0, 972, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 0, 959, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2409, 0, 0, 0, 959, 959, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1826, 0, 0, 958, 0, 0, 0,
	0, 2427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1370, 2439, 0, 2441, 0, 973, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 958, 0, 2516, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 919, 919, 0, 0, 919,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	0, 0, 74, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 74, 0, 74, 1324, 0, 0, 0, 959,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 959,
	959, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 973, 0, 0, 0, 1330, 1331, 1332,
	1333, 0, 0, 0, 731, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0, 0,
	0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 1341,
	0, 0, 0, 1322, 1323, 0, 1308, 0, 0, 1354,
	0, 0, 0, 0, 0, 2694, 0, 1343, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	1353, 1327, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2741, 0, 967, 0,
	1334, 0, 0, 0, 0, 0, 2744, 0, 0, 0,
	1330, 1331, 1332, 1333, 0, 0, 0, 1329, 0, 0,
	1313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 1345, 1355, 0, 0, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 1351, 1352,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1353, 0, 0, 0, 1344, 0, 0,
	1319, 1320, 1326, 1325, 1321, 1347, 1342, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	2778, 0, 0, 0, 2777, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0,
	0, 0, 0, 1334, 0, 2843, 1341, 0, 0, 0,
	1105, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 1346, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	1344, 0, 0, 1319, 1320, 1326, 1325, 1321, 1347, 0,
	1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0,
	1345, 1355, 0, 2257, 1335, 1336, 1337, 2258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2940, 0,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2976, 0, 2978, 0, 0, 0,
	1353, 0, 919, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 3031, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 2776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1826,
	259, 260, 261, 262, 975, 263, 976, 977, 978, 979,
	215, 980, 981, 982, 983, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 984, 270, 271, 272, 273,
	274, 275, 276, 985, 986, 277, 220, 221, 222, 987,
	278, 223, 988, 960, 989, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 990, 288, 0, 289, 290,
	991, 854, 291, 292, 992, 993, 995, 994, 996, 997,
	998, 293, 294, 500, 295, 296, 297, 224, 225, 999,
	298, 1000, 299, 1001, 300, 1002, 1003, 301, 302, 303,
	1004, 304, 1005, 305, 306, 1006, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 1007, 855, 1008, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 1009, 322, 1010, 1011, 856, 323, 1012, 324, 230,
	1013, 231, 1014, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 858, 1015, 238, 332, 0, 0, 0, 1016,
	331, 333, 340, 1017, 857, 334, 235, 336, 335, 337,
	338, 339, 236, 1018, 237, 1019, 341, 859, 860, 342,
	343, 344, 861, 345, 346, 0, 0, 347, 348, 349,
	1020, 351, 350, 1021, 352, 239, 862, 353, 354, 863,
	1022, 355, 356, 1023, 1024, 357, 0, 358, 935, 934,
	359, 360, 362, 363, 361, 864, 364, 365, 367, 366,
	1025, 1026, 865, 1027, 240, 241, 368, 369, 1028, 370,
	371, 1029, 1030, 372, 373, 1031, 1032, 374, 242, 866,
	375, 867, 243, 376, 377, 378, 379, 380, 381, 382,
	1033, 383, 244, 384, 245, 385, 1034, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 1035, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	1036, 406, 868, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 1037, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 1038, 431, 412,
	413, 432, 869, 433, 248, 434, 435, 1039, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	1040, 446, 447, 1041, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 1042, 250, 251, 252, 455, 1043, 1044,
	456, 457, 253, 254, 1045, 458, 459, 0, 460, 461,
	1046, 1047, 462, 463, 464, 466, 1048, 467, 1049, 465,
	468, 469, 470, 255, 256, 1050, 472, 471, 257, 1051,
	1052, 1053, 1054, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 1963,
	0, 0, 0, 0, 0, 0, 0, 0, 1964, 259,
	260, 261, 262, 975, 263, 976, 977, 978, 979, 215,
	980, 981, 982, 983, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 984, 270, 271, 272, 273, 274,
	275, 276, 985, 986, 277, 220, 221, 222, 987, 278,
	223, 988, 960, 989, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 990, 288, 0, 289, 290, 991,
	854, 291, 292, 992, 993, 995, 994, 996, 997, 998,
	293, 294, 500, 295, 296, 297, 224, 225, 999, 298,
	1000, 299, 1001, 300, 1002, 1003, 301, 302, 303, 1004,
	304, 1005, 305, 306, 1006, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1007, 855, 1008, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1009, 322, 1010, 1011, 856, 323, 1012, 324, 230, 1013,
	231, 1014, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 858, 1015, 238, 332, 0, 0, 0, 1016, 331,
	333, 340, 1017, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 1018, 237, 1019, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 1020,
	351, 350, 1021, 352, 239, 862, 353, 354, 863, 1022,
	355, 356, 1023, 1024, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 1025,
	1026, 865, 1027, 240, 241, 368, 369, 1028, 370, 371,
	1029, 1030, 372, 373, 1031, 1032, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 244, 384, 245, 385, 1034, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1042, 250, 251, 252, 455, 1043, 1044, 456,
	457, 253, 254, 1045, 458, 459, 0, 460, 461, 1046,
	1047, 462, 463, 464, 466, 1048, 467, 1049, 465, 468,
	469, 470, 255, 256, 1050, 472, 471, 257, 1051, 1052,
	1053, 1054, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2800, 259,
	260, 261, 262, 975, 263, 976, 977, 978, 979, 215,
	980, 981, 982, 983, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 984, 270, 271, 272, 273, 274,
	275, 276, 985, 986, 277, 220, 221, 222, 987, 278,
	223, 988, 960, 989, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 990, 288, 0, 289, 290, 991,
	854, 291, 292, 992, 993, 995, 994, 996, 997, 998,
	293, 294, 500, 295, 296, 297, 224, 225, 999, 298,
	1000, 299, 1001, 300, 1002, 1003, 301, 302, 303, 1004,
	304, 1005, 305, 306, 1006, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1007, 855, 1008, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1009, 322, 1010, 1011, 856, 323, 1012, 324, 230, 1013,
	231, 1014, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 858, 1015, 238, 332, 0, 0, 0, 1016, 331,
	333, 340, 1017, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 1018, 237, 1019, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 1020,
	351, 350, 1021, 352, 239, 862, 353, 354, 863, 1022,
	355, 356, 1023, 1024, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 1025,
	1026, 865, 1027, 240, 241, 368, 369, 1028, 370, 371,
	1029, 1030, 372, 373, 1031, 1032, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 244, 384, 245, 385, 1034, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1042, 250, 251, 252, 455, 1043, 1044, 456,
	457, 253, 254, 1045, 458, 459, 0, 460, 461, 1046,
	1047, 462, 463, 464, 466, 1048, 467, 1049, 465, 468,
	469, 470, 255, 256, 1050, 472, 471, 257, 1051, 1052,
	1053, 1054, 473, 474, 258, 475, 476, 477, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2909, 259, 260, 261, 262, 975, 263,
	976, 977, 978, 979, 215, 980, 981, 982, 983, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 984,
	270, 271, 272, 273, 274, 275, 276, 985, 986, 277,
	220, 221, 222, 987, 278, 223, 988, 960, 989, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 990,
	288, 0, 289, 290, 991, 854, 291, 292, 992, 993,
	995, 994, 996, 997, 998, 293, 294, 500, 295, 296,
	297, 224, 225, 999, 298, 1000, 299, 1001, 300, 1002,
	1003, 301, 302, 303, 1004, 304, 1005, 305, 306, 1006,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	1007, 855, 1008, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 1009, 322, 1010, 1011, 856,
	323, 1012, 324, 230, 1013, 231, 1014, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 858, 1015, 238, 332,
	0, 0, 0, 1016, 331, 333, 340, 1017, 857, 334,
	235, 336, 335, 337, 338, 339, 236, 1018, 237, 1019,
	341, 859, 860, 342, 343, 344, 861, 345, 346, 0,
	0, 347, 348, 349, 1020, 351, 350, 1021, 352, 239,
	862, 353, 354, 863, 1022, 355, 356, 1023, 1024, 357,
	0, 358, 935, 934, 359, 360, 362, 363, 361, 864,
	364, 365, 367, 366, 1025, 1026, 865, 1027, 240, 241,
	368, 369, 1028, 370, 371, 1029, 1030, 372, 373, 1031,
	1032, 374, 242, 866, 375, 867, 243, 376, 377, 378,
	379, 380, 381, 382, 1033, 383, 244, 384, 245, 385,
	1034, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	1035, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 1036, 406, 868, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 1037, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 1038, 431, 412, 413, 432, 869, 433, 248, 434,
	435, 1039, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 1040, 446, 447, 1041, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 1042, 250, 251,
	252, 455, 1043, 1044, 456, 457, 253, 254, 1045, 458,
	459, 0, 460, 461, 1046, 1047, 462, 463, 464, 466,
	1048, 467, 1049, 465, 468, 469, 470, 255, 256, 1050,
	472, 471, 257, 1051, 1052, 1053, 1054, 473, 474, 258,
	475, 476, 477, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2559, 259,
	260, 261, 262, 975, 263, 976, 977, 978, 979, 215,
	980, 981, 982, 983, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 984, 270, 271, 272, 273, 274,
	275, 276, 985, 986, 277, 220, 221, 222, 987, 278,
	223, 988, 960, 989, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 990, 288, 0, 289, 290, 991,
	854, 291, 292, 992, 993, 995, 994, 996, 997, 998,
	293, 294, 500, 295, 296, 297, 224, 225, 999, 298,
	1000, 299, 1001, 300, 1002, 1003, 301, 302, 303, 1004,
	304, 1005, 305, 306, 1006, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1007, 855, 1008, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1009, 322, 1010, 1011, 856, 323, 1012, 324, 230, 1013,
	231, 1014, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 858, 1015, 238, 332, 0, 0, 0, 1016, 331,
	333, 340, 1017, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 1018, 237, 1019, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 1020,
	351, 350, 1021, 352, 239, 862, 353, 354, 863, 1022,
	355, 356, 1023, 1024, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 1025,
	1026, 865, 1027, 240, 241, 368, 369, 1028, 370, 371,
	1029, 1030, 372, 373, 1031, 1032, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 244, 384, 245, 385, 1034, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1042, 250, 251, 252, 455, 1043, 1044, 456,
	457, 253, 254, 1045, 458, 459, 0, 460, 461, 1046,
	1047, 462, 463, 464, 466, 1048, 467, 1049, 465, 468,
	469, 470, 255, 256, 1050, 472, 471, 257, 1051, 1052,
	1053, 1054, 473, 474, 258, 475, 476, 477, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2536, 259, 260, 261, 262, 975, 263,
	976, 977, 978, 979, 215, 980, 981, 982, 983, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 984,
	270, 271, 272, 273, 274, 275, 276, 985, 986, 277,
	220, 221, 222, 987, 278, 223, 988, 960, 989, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 990,
	288, 0, 289, 290, 991, 854, 291, 292, 992, 993,
	995, 994, 996, 997, 998, 293, 294, 500, 295, 296,
	297, 224, 225, 999, 298, 1000, 299, 1001, 300, 1002,
	1003, 301, 302, 303, 1004, 304, 1005, 305, 306, 1006,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	1007, 855, 1008, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 1009, 322, 1010, 1011, 856,
	323, 1012, 324, 230, 1013, 231, 1014, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 858, 1015, 238, 332,
	0, 0, 0, 1016, 331, 333, 340, 1017, 857, 334,
	235, 336, 335, 337, 338, 339, 236, 1018, 237, 1019,
	341, 859, 860, 342, 343, 344, 861, 345, 346, 0,
	0, 347, 348, 349, 1020, 351, 350, 1021, 352, 239,
	862, 353, 354, 863, 1022, 355, 356, 1023, 1024, 357,
	0, 358, 935, 934, 359, 360, 362, 363, 361, 864,
	364, 365, 367, 366, 1025, 1026, 865, 1027, 240, 241,
	368, 369, 1028, 370, 371, 1029, 1030, 372, 373, 1031,
	1032, 374, 242, 866, 375, 867, 243, 376, 377, 378,
	379, 380, 381, 382, 1033, 383, 244, 384, 245, 385,
	1034, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	1035, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 1036, 406, 868, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 1037, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 1038, 431, 412, 413, 432, 869, 433, 248, 434,
	435, 1039, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 1040, 446, 447, 1041, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 1042, 250, 251,
	252, 455, 1043, 1044, 456, 457, 253, 254, 1045, 458,
	459, 0, 460, 461, 1046, 1047, 462, 463, 464, 466,
	1048, 467, 1049, 465, 468, 469, 470, 255, 256, 1050,
	472, 471, 257, 1051, 1052, 1053, 1054, 473, 474, 258,
	475, 476, 477, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2413, 259,
	260, 261, 262, 975, 263, 976, 977, 978, 979, 215,
	980, 981, 982, 983, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 984, 270, 271, 272, 273, 274,
	275, 276, 985, 986, 277, 220, 221, 222, 987, 278,
	223, 988, 960, 989, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 990, 288, 0, 289, 290, 991,
	854, 291, 292, 992, 993, 995, 994, 996, 997, 998,
	293, 294, 500, 295, 296, 297, 224, 225, 999, 298,
	1000, 299, 1001, 300, 1002, 1003, 301, 302, 303, 1004,
	304, 1005, 305, 306, 1006, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1007, 855, 1008, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1009, 322, 1010, 1011, 856, 323, 1012, 324, 230, 1013,
	231, 1014, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 858, 1015, 238, 332, 0, 0, 0, 1016, 331,
	333, 340, 1017, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 1018, 237, 1019, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 1020,
	351, 350, 1021, 352, 239, 862, 353, 354, 863, 1022,
	355, 356, 1023, 1024, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 1025,
	1026, 865, 1027, 240, 241, 368, 369, 1028, 370, 371,
	1029, 1030, 372, 373, 1031, 1032, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 244, 384, 245, 385, 1034, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1042, 250, 251, 252, 455, 1043, 1044, 456,
	457, 253, 254, 1045, 458, 459, 0, 460, 461, 1046,
	1047, 462, 463, 464, 466, 1048, 467, 1049, 465, 468,
	469, 470, 255, 256, 1050, 472, 471, 257, 1051, 1052,
	1053, 1054, 473, 474, 258, 475, 476, 477, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1866, 259, 260, 261, 262, 975, 263,
	976, 977, 978, 979, 215, 980, 981, 982, 983, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 984,
	270, 271, 272, 273, 274, 275, 276, 985, 986, 277,
	220, 221, 222, 987, 278, 223, 988, 960, 989, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 990,
	288, 0, 289, 290, 991, 854, 291, 292, 992, 993,
	995, 994, 996, 997, 998, 293, 294, 500, 295, 296,
	297, 224, 225, 999, 298, 1000, 299, 1001, 300, 1002,
	1003, 301, 302, 303, 1004, 304, 1005, 305, 306, 1006,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	1007, 855, 1008, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 1009, 322, 1010, 1011, 856,
	323, 1012, 324, 230, 1013, 231, 1014, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 858, 1015, 238, 332,
	0, 0, 0, 1016, 331, 333, 340, 1017, 857, 334,
	235, 336, 335, 337, 338, 339, 236, 1018, 237, 1019,
	341, 859, 860, 342, 343, 344, 861, 345, 346, 0,
	0, 347, 348, 349, 1020, 351, 350, 1021, 352, 239,
	862, 353, 354, 863, 1022, 355, 356, 1023, 1024, 357,
	0, 358, 935, 934, 359, 360, 362, 363, 361, 864,
	364, 365, 367, 366, 1025, 1026, 865, 1027, 240, 241,
	368, 369, 1028, 370, 371, 1029, 1030, 372, 373, 1031,
	1032, 374, 242, 866, 375, 867, 243, 376, 377, 378,
	379, 380, 381, 382, 1033, 383, 244, 384, 245, 385,
	1034, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	1035, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 1036, 406, 868, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 1037, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 1038, 431, 412, 413, 432, 869, 433, 248, 434,
	435, 1039, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 1040, 446, 447, 1041, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 1042, 250, 251,
	252, 455, 1043, 1044, 456, 457, 253, 254, 1045, 458,
	459, 0, 460, 461, 1046, 1047, 462, 463, 464, 466,
	1048, 467, 1049, 465, 468, 469, 470, 255, 256, 1050,
	472, 471, 257, 1051, 1052, 1053, 1054, 473, 474, 258,
	475, 476, 477, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 259,
	260, 261, 262, 975, 263, 976, 977, 978, 979, 215,
	980, 981, 982, 983, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 984, 270, 271, 272, 273, 274,
	275, 276, 985, 986, 277, 220, 221, 222, 987, 278,
	223, 988, 960, 989, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 990, 288, 0, 289, 290, 991,
	854, 291, 292, 992, 993, 995, 994, 996, 997, 998,
	293, 294, 500, 295, 296, 297, 224, 225, 999, 298,
	1000, 299, 1001, 300, 1002, 1003, 301, 302, 303, 1004,
	304, 1005, 305, 306, 1006, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1007, 855, 1008, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1009, 322, 1010, 1011, 856, 323, 1012, 324, 230, 1013,
	231, 1014, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 858, 1015, 238, 332, 0, 0, 0, 1016, 331,
	333, 340, 1017, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 1018, 237, 1019, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 1020,
	351, 350, 1021, 352, 239, 862, 353, 354, 863, 1022,
	355, 356, 1023, 1024, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 1025,
	1026, 865, 1027, 240, 241, 368, 369, 1028, 370, 371,
	1029, 1030, 372, 373, 1031, 1032, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 1033,
	383, 244, 384, 245, 385, 1034, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 1035, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 1036,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 1037, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 1038, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 1039, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 1040,
	446, 447, 1041, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 1042, 250, 251, 252, 455, 1043, 1044, 456,
	457, 253, 254, 1045, 458, 459, 0, 460, 461, 1046,
	1047, 462, 463, 464, 466, 1048, 467, 1049, 465, 468,
	469, 470, 255, 256, 1050, 472, 471, 257, 1051, 1052,
	1053, 1054, 473, 474, 258, 475, 476, 477, 1849, 0,
	799, 760, 761, 758, 759, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	1846, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 1847, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 1845, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	1848, 0, 0, 0, 0, 0, 0, 757, 1844, 0,
	0, 0, 732, 770, 799, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 172, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 174, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 1155, 872, 0, 472, 471, 257, 0,
	0, 0, 166, 473, 474, 258, 475, 476, 477, 748,
	167, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 799, 760, 761, 758, 759, 771,
	0, 1374, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 172, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 174, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 1155, 872, 0, 472, 471, 257, 0,
	0, 0, 166, 473, 474, 258, 475, 476, 477, 748,
	167, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 799, 760, 761, 758, 759, 771,
	0, 1374, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 1928, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 1933, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 1929, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 1930,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 255, 872, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 799, 760, 761, 758, 759, 771,
	0, 757, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 2712, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 255, 872, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 1439, 799, 760, 761, 758, 759,
	771, 757, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 845, 774, 0, 0, 0, 264, 265, 266, 216,
	814, 795, 825, 783, 824, 823, 0, 270, 271, 785,
	784, 274, 275, 276, 775, 844, 277, 871, 870, 222,
	0, 278, 851, 0, 834, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 854, 291, 292, 837, 835, 836, 841, 839,
	838, 840, 293, 294, 500, 295, 827, 297, 821, 820,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 819,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 873, 874, 767, 855, 0,
	0, 0, 0, 0, 316, 317, 318, 818, 816, 817,
	0, 321, 0, 322, 0, 0, 856, 323, 0, 324,
	875, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	846, 847, 850, 858, 0, 848, 794, 0, 0, 0,
	1760, 331, 333, 340, 0, 857, 334, 807, 798, 808,
	809, 810, 811, 812, 0, 800, 0, 341, 859, 860,
	342, 343, 344, 861, 832, 833, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 876, 862, 353, 354,
	863, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 787, 361, 864, 364, 365, 367,
	366, 747, 0, 865, 768, 849, 822, 368, 369, 0,
	796, 797, 0, 0, 372, 373, 0, 0, 374, 242,
	866, 375, 867, 877, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 878, 384, 245, 385, 1759, 386, 387,
	388, 389, 390, 391, 815, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 868, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 788, 789, 790, 791, 423, 429, 430, 842, 431,
	412, 413, 432, 869, 433, 813, 792, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 853, 440, 441, 442,
	879, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 786, 0, 828, 829, 830, 831, 0,
	0, 456, 457, 880, 881, 766, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 843, 467, 0,
	793, 468, 469, 470, 255, 872, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 0, 740, 770, 799,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 845, 774, 0, 0, 0,
	264, 265, 266, 216, 814, 795, 825, 783, 824, 823,
	0, 270, 271, 785, 784, 274, 275, 276, 775, 844,
	277, 871, 870, 222, 0, 278, 851, 0, 834, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 837,
	835, 836, 841, 839, 838, 840, 293, 294, 500, 295,
	827, 297, 821, 820, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 819, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 873,
	874, 767, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 818, 816, 817, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 875, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 846, 847, 850, 858, 0, 848,
	794, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 807, 798, 808, 809, 810, 811, 812, 0, 800,
	0, 341, 859, 860, 342, 343, 344, 861, 832, 833,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	876, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 787, 361,
	864, 364, 365, 367, 366, 747, 0, 865, 768, 849,
	822, 368, 369, 0, 796, 797, 742, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 877, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 878, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 815, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 788, 789, 790, 791, 423,
	429, 430, 842, 431, 412, 413, 432, 869, 433, 813,
	792, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	853, 440, 441, 442, 879, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 786, 0, 828,
	829, 830, 831, 0, 0, 456, 457, 880, 881, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 843, 467, 0, 793, 468, 469, 470, 255, 872,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 799,
	760, 761, 758, 759, 771, 0, 757, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 845, 774, 0, 0, 0,
	264, 265, 266, 216, 814, 795, 825, 783, 824, 823,
	0, 270, 271, 785, 784, 274, 275, 276, 775, 844,
	277, 871, 870, 222, 0, 278, 851, 0, 834, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 837,
	835, 836, 841, 839, 838, 840, 293, 294, 500, 295,
	827, 297, 821, 820, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 819, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 873,
	874, 767, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 818, 816, 817, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 875, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 846, 847, 850, 858, 0, 848,
	794, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 807, 798, 808, 809, 810, 811, 812, 0, 800,
	0, 341, 859, 860, 342, 343, 344, 861, 832, 833,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	876, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 787, 361,
	864, 364, 365, 367, 366, 747, 0, 865, 768, 849,
	822, 368, 369, 0, 796, 797, 0, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 877, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 878, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 815, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 788, 789, 790, 791, 423,
	429, 430, 842, 431, 412, 413, 432, 869, 433, 813,
	792, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	853, 440, 441, 442, 879, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 786, 0, 828,
	829, 830, 831, 0, 0, 456, 457, 880, 881, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 843, 467, 0, 793, 468, 469, 470, 255, 872,
	2541, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 799,
	760, 761, 758, 759, 771, 0, 757, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 845, 774, 0, 0, 0,
	264, 265, 266, 216, 814, 795, 825, 783, 824, 823,
	0, 270, 271, 785, 784, 274, 275, 276, 775, 844,
	277, 871, 870, 222, 0, 278, 851, 0, 834, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 837,
	835, 836, 841, 839, 838, 840, 293, 294, 500, 295,
	827, 297, 821, 820, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 819, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 873,
	874, 767, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 818, 816, 817, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 875, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 846, 847, 850, 858, 0, 848,
	794, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 807, 798, 808, 809, 810, 811, 812, 0, 800,
	0, 341, 859, 860, 342, 343, 344, 861, 832, 833,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	876, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 787, 361,
	864, 364, 365, 367, 366, 747, 0, 865, 768, 849,
	822, 368, 369, 0, 796, 797, 742, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 877, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 878, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 815, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 788, 789, 790, 791, 423,
	429, 430, 842, 431, 412, 413, 432, 869, 433, 813,
	792, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	853, 440, 441, 442, 879, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 786, 0, 828,
	829, 830, 831, 0, 0, 456, 457, 880, 881, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 843, 467, 0, 793, 468, 469, 470, 255, 872,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 799,
	760, 761, 758, 759, 771, 0, 757, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 845, 774, 0, 0, 0,
	264, 265, 266, 216, 814, 795, 825, 783, 824, 823,
	0, 270, 271, 785, 784, 274, 275, 276, 775, 844,
	277, 871, 870, 222, 0, 278, 851, 0, 834, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 837,
	835, 836, 841, 839, 838, 840, 293, 294, 500, 295,
	827, 297, 821, 820, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 819, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 873,
	874, 767, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 818, 816, 817, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 875, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 846, 847, 850, 858, 0, 848,
	794, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 807, 798, 808, 809, 810, 811, 812, 0, 800,
	0, 341, 859, 860, 342, 343, 344, 861, 832, 833,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	876, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 752, 751, 359, 360, 362, 787, 361,
	864, 364, 365, 367, 366, 747, 0, 865, 768, 849,
	822, 368, 369, 0, 796, 797, 0, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 877, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 878, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 815, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 756, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 788, 789, 790, 791, 423,
	429, 430, 842, 431, 412, 413, 432, 869, 433, 813,
	792, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	853, 440, 441, 442, 879, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 786, 0, 828,
	829, 830, 831, 0, 0, 456, 457, 880, 881, 766,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 843, 467, 0, 793, 468, 469, 470, 255, 872,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 1439,
	799, 760, 761, 758, 759, 771, 757, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	1933, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 0, 1924, 770, 799, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 255, 872, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 0, 0, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 0, 1913, 770, 799, 760,
	761, 758, 759, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 845, 774, 0, 0, 0, 264,
	265, 266, 216, 814, 795, 825, 783, 824, 823, 0,
	270, 271, 785, 784, 274, 275, 276, 775, 844, 277,
	871, 870, 222, 0, 278, 851, 0, 834, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 854, 291, 292, 837, 835,
	836, 841, 839, 838, 840, 293, 294, 500, 295, 827,
	297, 821, 820, 750, 298, 0, 299, 0, 300, 0,
	0, 301, 819, 303, 0, 304, 0, 305, 306, 0,
	755, 307, 308, 310, 313, 309, 314, 315, 873, 874,
	767, 855, 0, 0, 0, 0, 0, 316, 317, 318,
	818, 816, 817, 0, 321, 0, 322, 0, 0, 856,
	323, 0, 324, 875, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 846, 847, 850, 858, 0, 848, 794,
	0, 0, 0, 0, 331, 333, 340, 0, 857, 334,
	807, 798, 808, 809, 810, 811, 812, 0, 800, 0,
	341, 859, 860, 342, 343, 344, 861, 832, 833, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 876,
	862, 353, 354, 863, 0, 355, 356, 0, 0, 357,
	0, 358, 752, 751, 359, 360, 362, 787, 361, 864,
	364, 365, 367, 366, 747, 0, 865, 768, 849, 822,
	368, 369, 0, 796, 797, 0, 0, 372, 373, 0,
	0, 374, 242, 866, 375, 867, 877, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 878, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 815, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 868, 407, 408, 409,
	410, 756, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 788, 789, 790, 791, 423, 429,
	430, 842, 431, 412, 413, 432, 869, 433, 813, 792,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 853,
	440, 441, 442, 879, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 786, 0, 828, 829,
	830, 831, 0, 0, 456, 457, 880, 881, 766, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	843, 467, 0, 793, 468, 469, 470, 255, 872, 0,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 748, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 744, 745, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	1911, 770, 799, 760, 761, 758, 759, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 845, 774,
	0, 0, 0, 264, 265, 266, 216, 814, 795, 825,
	783, 824, 823, 0, 270, 271, 785, 784, 274, 275,
	276, 775, 844, 277, 871, 870, 222, 0, 278, 851,
	0, 834, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 854,
	291, 292, 837, 835, 836, 841, 839, 838, 840, 293,
	294, 500, 295, 827, 297, 821, 820, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 819, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 873, 874, 767, 855, 0, 0, 0, 0,
	0, 316, 317, 318, 818, 816, 817, 0, 321, 0,
	322, 0, 0, 856, 323, 0, 324, 875, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 846, 847, 850,
	858, 0, 848, 794, 0, 0, 0, 0, 331, 333,
	340, 0, 857, 334, 807, 798, 808, 809, 810, 811,
	812, 0, 800, 0, 341, 859, 860, 342, 343, 344,
	861, 832, 833, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 876, 862, 353, 354, 863, 0, 355,
	356, 0, 0, 357, 0, 358, 752, 751, 359, 360,
	362, 787, 361, 864, 364, 365, 367, 366, 747, 0,
	865, 768, 849, 822, 368, 369, 0, 796, 797, 0,
	0, 372, 373, 0, 0, 374, 242, 866, 375, 867,
	877, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	878, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 815, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	868, 407, 408, 409, 410, 756, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 788, 789,
	790, 791, 423, 429, 430, 842, 431, 412, 413, 432,
	869, 433, 813, 792, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 853, 440, 441, 442, 879, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	786, 0, 828, 829, 830, 831, 0, 0, 456, 457,
	880, 881, 766, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 843, 467, 0, 793, 468, 469,
	470, 255, 872, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 748, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	744, 745, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 0, 1909, 770, 799, 760, 761, 758,
	759, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 845, 774, 0, 0, 0, 264, 265, 266,
	216, 814, 795, 825, 783, 824, 823, 0, 270, 271,
	785, 784, 274, 275, 276, 775, 844, 277, 871, 870,
	222, 0, 278, 851, 0, 834, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 854, 291, 292, 837, 835, 836, 841,
	839, 838, 840, 293, 294, 500, 295, 827, 297, 821,
	820, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	819, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 873, 874, 767, 855,
	0, 0, 0, 0, 0, 316, 317, 318, 818, 816,
	817, 0, 321, 0, 322, 0, 0, 856, 323, 0,
	324, 875, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 846, 847, 850, 858, 0, 848, 794, 0, 0,
	0, 0, 331, 333, 340, 0, 857, 334, 807, 798,
	808, 809, 810, 811, 812, 0, 800, 0, 341, 859,
	860, 342, 343, 344, 861, 832, 833, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 876, 862, 353,
	354, 863, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 787, 361, 864, 364, 365,
	367, 366, 747, 0, 865, 768, 849, 822, 368, 369,
	0, 796, 797, 0, 0, 372, 373, 0, 0, 374,
	242, 866, 375, 867, 877, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 878, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 815, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 868, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 788, 789, 790, 791, 423, 429, 430, 842,
	431, 412, 413, 432, 869, 433, 813, 792, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 853, 440, 441,
	442, 879, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 786, 0, 828, 829, 830, 831,
	0, 0, 456, 457, 880, 881, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 843, 467,
	0, 793, 468, 469, 470, 255, 872, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 1907, 770,
	1899, 760, 761, 758, 759, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 1902, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 1903, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 1904, 1901, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 1905, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 1900, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 757, 0, 0,
	0, 0, 1896, 770, 1899, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 1902, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 1903, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	1904, 1901, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 1905, 0, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 255, 872, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 1900, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 799, 760, 761, 758, 759, 771,
	0, 757, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 774, 0, 0, 0, 264, 265, 266, 216, 814,
	795, 825, 783, 824, 823, 0, 270, 271, 785, 784,
	274, 275, 276, 775, 844, 277, 871, 870, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 827, 297, 821, 820, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 819, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 767, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 818, 816, 817, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 794, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 807, 798, 808, 809,
	810, 811, 812, 0, 800, 0, 341, 859, 860, 342,
	343, 344, 861, 832, 833, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 752, 751,
	359, 360, 362, 787, 361, 864, 364, 365, 367, 366,
	747, 0, 865, 768, 849, 822, 368, 369, 0, 796,
	797, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 815, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 756, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	788, 789, 790, 791, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 813, 792, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 853, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 786, 0, 828, 829, 830, 831, 0, 0,
	456, 457, 880, 881, 766, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 793,
	468, 469, 470, 255, 872, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 0, 0, 0, 0, 0, 1383,
	0, 757, 0, 0, 0, 0, 0, 770, 799, 760,
	761, 758, 759, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 1747, 263,
	0, 0, 0, 0, 845, 774, 0, 0, 0, 264,
	265, 266, 216, 814, 795, 825, 783, 824, 823, 0,
	270, 271, 785, 784, 274, 275, 276, 775, 844, 277,
	871, 870, 222, 0, 278, 851, 0, 834, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 854, 291, 292, 837, 835,
	836, 841, 839, 838, 840, 293, 294, 500, 295, 827,
	297, 821, 820, 750, 298, 0, 299, 0, 300, 0,
	0, 301, 819, 303, 0, 304, 0, 305, 306, 0,
	755, 307, 308, 310, 313, 309, 314, 315, 873, 874,
	767, 855, 0, 0, 0, 0, 0, 316, 317, 318,
	818, 816, 817, 0, 321, 0, 322, 0, 0, 856,
	323, 0, 324, 875, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 846, 847, 850, 858, 0, 848, 794,
	0, 0, 0, 0, 331, 333, 340, 0, 857, 334,
	807, 798, 808, 809, 810, 811, 812, 0, 800, 0,
	341, 859, 860, 342, 343, 344, 861, 832, 833, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 876,
	862, 353, 354, 863, 0, 355, 356, 0, 0, 357,
	0, 358, 752, 751, 359, 360, 362, 787, 361, 864,
	364, 365, 367, 366, 747, 0, 865, 768, 849, 822,
	368, 369, 0, 796, 797, 0, 0, 372, 373, 0,
	0, 374, 242, 866, 375, 867, 877, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 878, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 815, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 868, 407, 408, 409,
	410, 756, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 788, 789, 790, 791, 423, 429,
	430, 842, 431, 412, 413, 432, 869, 433, 813, 792,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 853,
	440, 441, 442, 879, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 786, 0, 828, 829,
	830, 831, 0, 0, 456, 457, 880, 881, 766, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	843, 467, 0, 793, 468, 469, 470, 255, 872, 0,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 748, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 744, 745, 0, 0,
	0, 0, 0, 0, 0, 757, 0, 0, 0, 0,
	1077, 770, 799, 760, 761, 758, 759, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 845, 774,
	0, 0, 0, 264, 265, 266, 216, 814, 795, 825,
	783, 824, 823, 0, 270, 271, 785, 784, 274, 275,
	276, 775, 844, 277, 871, 870, 222, 0, 278, 851,
	0, 834, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 854,
	291, 292, 837, 835, 836, 841, 839, 838, 840, 293,
	294, 500, 295, 827, 297, 821, 820, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 819, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 873, 874, 767, 855, 0, 0, 0, 0,
	0, 316, 317, 318, 818, 816, 817, 0, 321, 0,
	322, 0, 0, 856, 323, 0, 324, 875, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 1076, 847, 850,
	858, 0, 848, 794, 0, 0, 0, 0, 331, 333,
	340, 0, 857, 334, 807, 798, 808, 809, 810, 811,
	812, 0, 800, 0, 341, 859, 860, 342, 343, 344,
	861, 832, 833, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 876, 862, 353, 354, 863, 0, 355,
	356, 0, 0, 357, 0, 358, 752, 751, 359, 360,
	362, 787, 361, 864, 364, 365, 367, 366, 747, 0,
	865, 768, 849, 822, 368, 369, 0, 796, 797, 0,
	0, 372, 373, 0, 0, 374, 242, 866, 375, 867,
	877, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	878, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 815, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	868, 407, 408, 409, 410, 756, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 788, 789,
	790, 791, 423, 429, 430, 842, 431, 412, 413, 432,
	869, 433, 813, 792, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 853, 440, 441, 442, 879, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	786, 0, 828, 829, 830, 831, 0, 0, 456, 457,
	880, 881, 766, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 843, 467, 0, 793, 468, 469,
	470, 255, 872, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 748, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	744, 745, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 0, 1071, 770, 799, 760, 761, 758,
	759, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 845, 774, 0, 0, 0, 264, 265, 266,
	216, 814, 795, 825, 783, 824, 823, 0, 270, 271,
	785, 784, 274, 275, 276, 775, 844, 277, 871, 870,
	222, 0, 278, 851, 0, 834, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 854, 291, 292, 837, 835, 836, 841,
	839, 838, 840, 293, 294, 500, 295, 827, 297, 821,
	820, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	819, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 873, 874, 767, 855,
	0, 0, 0, 0, 0, 316, 317, 318, 818, 816,
	817, 0, 321, 0, 322, 0, 0, 856, 323, 0,
	324, 875, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 1070, 847, 850, 858, 0, 848, 794, 0, 0,
	0, 0, 331, 333, 340, 0, 857, 334, 807, 798,
	808, 809, 810, 811, 812, 0, 800, 0, 341, 859,
	860, 342, 343, 344, 861, 832, 833, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 876, 862, 353,
	354, 863, 0, 355, 356, 0, 0, 357, 0, 358,
	752, 751, 359, 360, 362, 787, 361, 864, 364, 365,
	367, 366, 747, 0, 865, 768, 849, 822, 368, 369,
	0, 796, 797, 0, 0, 372, 373, 0, 0, 374,
	242, 866, 375, 867, 877, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 878, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 815, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 868, 407, 408, 409, 410, 756,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 788, 789, 790, 791, 423, 429, 430, 842,
	431, 412, 413, 432, 869, 433, 813, 792, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 853, 440, 441,
	442, 879, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 786, 0, 828, 829, 830, 831,
	0, 0, 456, 457, 880, 881, 766, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 843, 467,
	0, 793, 468, 469, 470, 255, 872, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 1066, 770,
	799, 760, 761, 758, 759, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	799, 760, 761, 758, 759, 771, 0, 757, 0, 0,
	0, 0, 0, 770, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	799, 760, 761, 758, 759, 771, 0, 757, 0, 0,
	0, 0, 0, 770, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 3099,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 3098, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	799, 760, 761, 758, 759, 771, 0, 757, 0, 0,
	0, 0, 0, 770, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 3097, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 3099,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 752, 751, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 747, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 3098, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	799, 760, 761, 758, 759, 771, 0, 757, 0, 0,
	0, 0, 0, 770, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 774, 0, 0,
	0, 264, 265, 266, 216, 814, 795, 825, 783, 824,
	823, 0, 270, 271, 785, 784, 274, 275, 276, 775,
	844, 277, 871, 870, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 827, 297, 821, 820, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 819, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 767, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 818, 816, 817, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 794, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 807, 798, 808, 809, 810, 811, 812, 0,
	800, 0, 341, 859, 860, 342, 343, 344, 861, 832,
	833, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 935, 934, 359, 360, 362, 787,
	361, 864, 364, 365, 367, 366, 0, 0, 865, 768,
	849, 822, 368, 369, 0, 796, 797, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 815,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 756, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 788, 789, 790, 791,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	813, 792, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 853, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 786, 0,
	828, 829, 830, 831, 0, 0, 456, 457, 880, 881,
	766, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 793, 468, 469, 470, 255,
	872, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 799, 760, 761, 758, 759,
	771, 0, 0, 1921, 0, 0, 0, 0, 1919, 1920,
	0, 259, 260, 261, 262, 0, 263, 757, 0, 0,
	0, 845, 774, 770, 0, 0, 264, 265, 266, 0,
	814, 795, 825, 783, 824, 823, 0, 270, 271, 785,
	784, 274, 275, 276, 775, 844, 277, 871, 870, 222,
	0, 278, 851, 0, 834, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 854, 291, 3099, 837, 835, 836, 841, 839,
	838, 840, 293, 294, 500, 295, 827, 297, 821, 820,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 819,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 873, 874, 767, 855, 0,
	0, 0, 0, 0, 316, 317, 318, 818, 816, 817,
	0, 321, 0, 322, 0, 0, 856, 323, 0, 324,
	875, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	846, 847, 850, 0, 0, 848, 794, 0, 0, 0,
	0, 331, 333, 340, 0, 857, 334, 807, 798, 808,
	809, 810, 811, 812, 0, 800, 0, 341, 0, 0,
	342, 343, 344, 861, 832, 833, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 876, 862, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 752,
	751, 359, 360, 362, 787, 361, 864, 364, 365, 367,
	366, 747, 0, 0, 768, 849, 822, 368, 369, 0,
	796, 797, 0, 0, 372, 373, 0, 0, 374, 242,
	866, 375, 867, 877, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 878, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 815, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 868, 407, 408, 409, 410, 756, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 788, 789, 790, 791, 423, 429, 430, 842, 431,
	412, 413, 432, 0, 433, 813, 792, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 853, 440, 441, 442,
	879, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 786, 0, 828, 829, 830, 831, 0,
	0, 456, 457, 880, 881, 766, 458, 459, 0, 3098,
	461, 0, 0, 462, 463, 464, 466, 843, 467, 0,
	793, 468, 469, 470, 255, 872, 0, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 732, 0, 933, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 259, 260, 261, 262, 770, 263,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 844, 277,
	220, 221, 222, 0, 278, 851, 0, 834, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 854, 291, 292, 837, 835,
	836, 841, 839, 838, 840, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 873, 874,
	0, 855, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 856,
	323, 0, 324, 875, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 846, 847, 850, 858, 0, 848, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 857, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 859, 860, 342, 343, 344, 861, 345, 346, 0,
	0, 347, 348, 349, 920, 351, 350, 0, 352, 876,
	862, 353, 354, 863, 0, 355, 356, 0, 0, 357,
	0, 358, 935, 934, 359, 360, 362, 363, 361, 864,
	364, 365, 367, 366, 0, 0, 865, 0, 849, 241,
	368, 369, 0, 370, 371, 0, 925, 372, 373, 0,
	0, 374, 242, 866, 375, 867, 877, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 878, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 868, 407, 408, 409,
	410, 247, 927, 0, 415, 416, 417, 418, 419, 420,
	421, 172, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 842, 431, 412, 413, 432, 869, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 879, 0, 446, 447, 174, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 880, 881, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	843, 467, 0, 465, 468, 469, 470, 1155, 256, 0,
	472, 471, 257, 0, 0, 933, 166, 473, 474, 258,
	475, 476, 477, 0, 167, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 845, 0, 917, 0, 1464, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 844, 277, 220, 221, 222,
	0, 278, 851, 0, 834, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 854, 291, 292, 837, 835, 836, 841, 839,
	838, 840, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 873, 874, 0, 855, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 856, 323, 0, 324,
	875, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	846, 847, 850, 858, 0, 848, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 857, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 859, 860,
	342, 343, 344, 861, 345, 346, 0, 0, 347, 348,
	349, 920, 351, 350, 0, 352, 876, 862, 353, 354,
	863, 0, 355, 356, 0, 0, 357, 0, 358, 935,
	934, 359, 360, 362, 363, 361, 864, 364, 365, 367,
	366, 0, 0, 865, 0, 849, 241, 368, 369, 0,
	370, 371, 0, 925, 372, 373, 0, 0, 374, 242,
	866, 375, 867, 877, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 878, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 868, 407, 408, 409, 410, 247, 927,
	0, 415, 416, 417, 418, 419, 420, 421, 172, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 842, 431,
	412, 413, 432, 869, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	879, 0, 446, 447, 174, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 880, 881, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 843, 467, 0,
	465, 468, 469, 470, 1155, 256, 0, 472, 471, 257,
	2314, 0, 933, 166, 473, 474, 258, 475, 476, 477,
	0, 167, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 845, 0,
	917, 0, 1464, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 844, 277, 220, 221, 222, 0, 278, 851,
	0, 834, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 854,
	291, 292, 837, 835, 836, 841, 839, 838, 840, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 873, 874, 0, 855, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 856, 323, 0, 324, 875, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 846, 847, 850,
	858, 0, 848, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 857, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 859, 860, 342, 343, 344,
	861, 345, 346, 0, 0, 347, 348, 349, 920, 351,
	350, 0, 352, 876, 862, 353, 354, 863, 0, 355,
	356, 0, 0, 357, 0, 358, 935, 934, 359, 360,
	362, 363, 361, 864, 364, 365, 367, 366, 0, 0,
	865, 0, 849, 241, 368, 369, 0, 370, 371, 0,
	925, 372, 373, 0, 0, 374, 242, 866, 375, 867,
	877, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	878, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	868, 407, 408, 409, 410, 247, 927, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 842, 431, 412, 413, 432,
	869, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 879, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	880, 881, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 843, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 916, 0, 933,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 845, 0, 917, 0, 922,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 844,
	277, 220, 221, 222, 0, 278, 851, 0, 834, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 837,
	835, 836, 841, 839, 838, 840, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 873,
	874, 0, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 875, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 846, 847, 850, 858, 0, 848,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 859, 860, 342, 343, 344, 861, 345, 346,
	0, 0, 347, 348, 349, 920, 351, 350, 0, 352,
	876, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 935, 934, 359, 360, 362, 363, 361,
	864, 364, 365, 367, 366, 0, 0, 865, 0, 849,
	241, 368, 369, 0, 370, 371, 0, 925, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 877, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 878, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 247, 927, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 842, 431, 412, 413, 432, 869, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 879, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 880, 881, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 843, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 0, 0, 933, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 845, 0, 917, 0, 922, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 844, 277, 220, 221,
	222, 0, 278, 851, 0, 834, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 854, 291, 292, 837, 835, 836, 841,
	839, 838, 840, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 873, 874, 0, 855,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 856, 323, 0,
	324, 875, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 846, 847, 850, 858, 0, 848, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 857, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 859,
	860, 342, 343, 344, 861, 345, 346, 0, 0, 347,
	348, 349, 920, 351, 350, 0, 352, 876, 862, 353,
	354, 863, 0, 355, 356, 0, 0, 357, 0, 358,
	935, 934, 359, 360, 362, 363, 361, 864, 364, 365,
	367, 366, 0, 0, 865, 0, 849, 241, 368, 369,
	0, 370, 371, 0, 925, 372, 373, 0, 0, 374,
	242, 866, 375, 867, 877, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 878, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 868, 407, 408, 409, 410, 247,
	927, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 842,
	431, 412, 413, 432, 869, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 879, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 880, 881, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 843, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 0, 0, 933, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 845,
	0, 917, 0, 922, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 844, 277, 220, 221, 222, 0, 278,
	851, 0, 834, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	854, 291, 292, 837, 835, 836, 841, 839, 838, 840,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 873, 874, 0, 855, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 856, 323, 0, 324, 875, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 846, 847,
	850, 858, 0, 848, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 876, 862, 353, 354, 863, 0,
	355, 356, 0, 0, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 0,
	0, 865, 0, 849, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 866, 375,
	867, 877, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 878, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 842, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 879, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 880, 881, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 843, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	933, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 845, 0, 0, 0,
	2653, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	844, 277, 220, 221, 222, 0, 278, 851, 0, 834,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	837, 835, 836, 841, 839, 838, 840, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	873, 874, 0, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 875, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 846, 847, 850, 858, 0,
	848, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 859, 860, 342, 343, 344, 861, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 876, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 935, 934, 359, 360, 362, 363,
	361, 864, 364, 365, 367, 366, 0, 0, 865, 0,
	849, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 877, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 878, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 247, 927, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 842, 431, 412, 413, 432, 869, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 879, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 880, 881,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 843, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 1152, 0, 956, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 1368, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 960, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 854, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	855, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 856, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 858, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 857, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	859, 860, 342, 343, 344, 861, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 862,
	353, 354, 863, 0, 355, 356, 0, 0, 357, 0,
	358, 935, 934, 359, 360, 362, 363, 361, 864, 364,
	365, 367, 366, 0, 0, 865, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 866, 375, 867, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 868, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	172, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 869, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 174, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 1155, 256, 0, 472,
	471, 257, 0, 0, 933, 166, 473, 474, 258, 475,
	476, 477, 0, 167, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	845, 0, 0, 0, 137, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 844, 277, 220, 221, 222, 0,
	278, 851, 0, 834, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 837, 835, 836, 841, 839, 838,
	840, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 873, 874, 0, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 875,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 846,
	847, 850, 858, 0, 848, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 859, 860, 342,
	343, 344, 861, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 876, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 935, 934,
	359, 360, 362, 363, 361, 864, 364, 365, 367, 366,
	0, 0, 865, 0, 849, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 877, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 878, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 842, 431, 412,
	413, 432, 869, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 879,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 880, 881, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 843, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 732,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 172, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	174, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	1155, 256, 0, 472, 471, 257, 0, 0, 497, 166,
	473, 474, 258, 475, 476, 477, 0, 167, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 137, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 0, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 2107, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	0, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 2562, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 1231, 0, 956,
	955, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 1469,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 960, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 855, 0, 0, 0, 0, 0, 1230, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 858, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 859, 860, 342, 343, 344, 861, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 935, 934, 359, 360, 362, 363, 361,
	864, 364, 365, 367, 366, 0, 0, 865, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 1229, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 869, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 1148, 0, 956, 955, 0, 0,
	0, 953, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 960, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 854, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 855,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 856, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 1147, 233, 234, 858, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 857, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 859,
	860, 342, 343, 344, 861, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 862, 353,
	354, 863, 0, 355, 356, 0, 0, 357, 0, 358,
	935, 934, 359, 360, 362, 363, 361, 864, 364, 365,
	367, 366, 0, 0, 865, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 866, 375, 867, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 868, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 869, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 1144, 0, 956, 955, 0, 0, 0, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 960, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	854, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 855, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 856, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 1143, 233,
	234, 858, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 857, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 859, 860, 342, 343,
	344, 861, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 862, 353, 354, 863, 0,
	355, 356, 0, 0, 357, 0, 358, 935, 934, 359,
	360, 362, 363, 361, 864, 364, 365, 367, 366, 0,
	0, 865, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 866, 375,
	867, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 868, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 869, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 1102, 0,
	956, 955, 0, 0, 0, 953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 960,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 854, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 855, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 856, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 1101, 233, 234, 858, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	857, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 859, 860, 342, 343, 344, 861, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 862, 353, 354, 863, 0, 355, 356, 0,
	0, 357, 0, 358, 935, 934, 359, 360, 362, 363,
	361, 864, 364, 365, 367, 366, 0, 0, 865, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 866, 375, 867, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 868, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 869, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 1099, 0, 956, 955, 0,
	0, 0, 953, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 960, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 854, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	855, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 856, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 1098, 233, 234, 858, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 857, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	859, 860, 342, 343, 344, 861, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 862,
	353, 354, 863, 0, 355, 356, 0, 0, 357, 0,
	358, 935, 934, 359, 360, 362, 363, 361, 864, 364,
	365, 367, 366, 0, 0, 865, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 866, 375, 867, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 868, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 869, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 949, 0, 956, 955, 0, 0, 0, 953,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 960, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 951,
	233, 234, 858, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 859, 860, 342,
	343, 344, 861, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 935, 934,
	359, 360, 362, 363, 361, 864, 364, 365, 367, 366,
	0, 0, 865, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 869, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 956,
	955, 0, 0, 0, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 960, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 854, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 855, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	856, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 858, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 857,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 859, 860, 342, 343, 344, 861, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 862, 353, 354, 863, 0, 355, 356, 0, 0,
	357, 0, 358, 935, 934, 359, 360, 362, 363, 361,
	864, 364, 365, 367, 366, 0, 0, 865, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 866, 375, 867, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 868, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 869, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 956, 955, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 960, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 854, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 855, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 856, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 858, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 857, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 859, 860, 342,
	343, 344, 861, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 862, 353, 354, 863,
	0, 355, 356, 0, 0, 357, 0, 358, 935, 934,
	359, 360, 362, 363, 361, 864, 364, 365, 367, 366,
	0, 0, 865, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 866,
	375, 867, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 868, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 869, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 956, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 960, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 854, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 855, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 856, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 858, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 857, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 859, 860,
	342, 343, 344, 861, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 862, 353, 354,
	863, 0, 355, 356, 0, 0, 357, 0, 358, 935,
	934, 359, 360, 362, 363, 361, 864, 364, 365, 367,
	366, 0, 0, 865, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	866, 375, 867, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 868, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 869, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	603, 0, 208, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 214, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 213, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 207, 0, 208,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 480, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 214, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 213, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	208, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 480,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 214,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 1720,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 213,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 208, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	480, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	214, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	213, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 497, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 480, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 497, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 480, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 1993, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 1990, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 2072, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 1996, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 2070, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 2069, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 1995, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	2071, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 1993,
	278, 223, 0, 0, 1987, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 1990, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 1996, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 1986,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 1995, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 1994, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 610,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	609, 587, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 590, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 592, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 586, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 587, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 590, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 591, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 592, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 590, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 591, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 592, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 1273, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	1276, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 1274, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 1275, 471,
	257, 1123, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 925, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 944, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 946, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 925, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 941, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 943, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 925, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 937, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 939,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 925, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 595,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	594, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 522, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 521, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 520,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 1968, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 497, 2478, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 497,
	2478, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 2475,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 232, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 925, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 497, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 1713, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1671, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 1669, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	636, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 1202, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 637, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 415, 416,
	633, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 632, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 1558, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 1557, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 636, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	1202, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 637, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 633, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 632, 251, 252, 455,
	0, 0, 456, 1203, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 636, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 626,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 637, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 633, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 1174, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 632, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 1141, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 1140, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 1137, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 1136, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 1134, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 1133,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 1131,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 1130, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 1127, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 1126, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 1115,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 1113, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 1112, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 1104, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 0, 472, 471, 257, 1095, 0,
	497, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 1094, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 0, 472, 471, 257, 1090, 0, 497, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 232, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 0, 472,
	471, 257, 1086, 0, 497, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 1088,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 0, 472, 471, 257, 964,
	0, 497, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 966, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 392, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 0, 472, 471, 257, 961, 0, 497, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 415, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 0,
	472, 471, 257, 636, 0, 497, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 626, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	232, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 625, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 637, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 627, 411,
	0, 415, 416, 633, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 628, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 632, 251, 252, 455, 0,
	0, 456, 630, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 0, 472, 471, 257,
	616, 0, 497, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 379, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 389, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 411, 0, 617, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 612, 0, 497,
	0, 473, 474, 258, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 431, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	0, 472, 471, 257, 601, 0, 497, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 232, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 0, 472, 471,
	257, 544, 0, 497, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 215,
	0, 0, 0, 0, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 0, 270, 271, 272, 273, 274,
	275, 276, 0, 0, 277, 220, 221, 222, 0, 278,
	223, 0, 0, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	0, 291, 292, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 500, 295, 296, 297, 224, 225, 0, 298,
	0, 299, 0, 300, 0, 0, 301, 302, 303, 0,
	304, 0, 305, 306, 0, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 230, 0,
	231, 0, 325, 326, 327, 328, 329, 330, 232, 233,
	234, 0, 0, 238, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 235, 336, 335, 337, 338,
	339, 236, 0, 237, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 239, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 240, 241, 368, 369, 0, 370, 371,
	0, 0, 372, 373, 0, 0, 374, 242, 0, 375,
	0, 243, 376, 377, 378, 379, 380, 381, 382, 0,
	383, 244, 384, 245, 385, 0, 386, 387, 388, 389,
	390, 391, 246, 392, 393, 0, 394, 395, 396, 397,
	398, 0, 400, 401, 399, 402, 403, 404, 405, 0,
	406, 0, 407, 408, 409, 410, 247, 411, 0, 415,
	416, 417, 418, 419, 420, 421, 0, 427, 428, 422,
	424, 425, 426, 423, 429, 430, 0, 431, 412, 413,
	432, 0, 433, 248, 434, 435, 0, 445, 436, 437,
	438, 414, 439, 443, 444, 440, 441, 442, 249, 0,
	446, 447, 0, 448, 449, 450, 451, 452, 311, 453,
	312, 454, 0, 250, 251, 252, 455, 0, 0, 456,
	457, 253, 254, 0, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 0, 467, 0, 465, 468,
	469, 470, 255, 256, 497, 472, 471, 257, 0, 0,
	0, 0, 473, 474, 258, 475, 476, 477, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 500, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 0, 325, 326, 327, 328, 329, 330, 232,
	233, 234, 0, 0, 238, 332, 0, 0, 0, 0,
	331, 333, 340, 0, 0, 334, 235, 336, 335, 337,
	338, 339, 236, 0, 237, 0, 341, 0, 0, 342,
	343, 344, 0, 345, 346, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 239, 0, 353, 354, 0,
	0, 355, 356, 0, 0, 357, 0, 358, 0, 0,
	359, 360, 362, 363, 361, 0, 364, 365, 367, 366,
	0, 0, 0, 0, 240, 241, 368, 369, 0, 370,
	371, 0, 0, 372, 373, 0, 0, 374, 242, 0,
	375, 0, 243, 376, 377, 378, 379, 380, 381, 382,
	0, 383, 244, 384, 245, 385, 0, 386, 387, 388,
	389, 390, 391, 246, 392, 393, 0, 394, 395, 396,
	397, 398, 0, 400, 401, 399, 402, 403, 404, 405,
	0, 406, 0, 407, 408, 409, 410, 247, 411, 0,
	415, 416, 417, 418, 419, 420, 421, 0, 427, 428,
	422, 424, 425, 426, 423, 429, 430, 0, 431, 412,
	413, 432, 0, 433, 248, 434, 435, 0, 445, 436,
	437, 438, 414, 439, 443, 444, 440, 441, 442, 249,
	0, 446, 447, 0, 448, 449, 450, 451, 452, 311,
	453, 312, 454, 0, 250, 251, 252, 455, 0, 0,
	456, 457, 253, 254, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 255, 256, 497, 472, 471, 257, 0,
	0, 0, 0, 473, 474, 258, 475, 476, 477, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 0, 270, 271, 272,
	273, 274, 275, 276, 0, 0, 277, 220, 221, 222,
	0, 278, 223, 0, 0, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 0, 291, 292, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 500, 295, 296, 297, 224, 225,
	0, 298, 0, 299, 0, 300, 0, 0, 301, 302,
	303, 0, 304, 0, 305, 306, 0, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	230, 0, 231, 0, 325, 326, 327, 328, 329, 330,
	2372, 233, 234, 0, 0, 238, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 235, 336, 335,
	337, 338, 339, 236, 0, 237, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 239, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 240, 241, 368, 369, 0,
	370, 371, 0, 0, 372, 373, 0, 0, 374, 242,
	0, 375, 0, 243, 376, 377, 378, 379, 380, 381,
	382, 0, 383, 244, 384, 245, 385, 0, 386, 387,
	388, 389, 390, 391, 246, 392, 393, 0, 394, 395,
	396, 397, 398, 0, 400, 401, 399, 402, 403, 404,
	405, 0, 406, 0, 407, 408, 409, 410, 247, 411,
	0, 415, 416, 417, 418, 419, 420, 421, 0, 427,
	428, 422, 424, 425, 426, 423, 429, 430, 0, 431,
	412, 413, 432, 0, 433, 248, 434, 435, 0, 445,
	436, 437, 438, 414, 439, 443, 444, 440, 441, 442,
	249, 0, 446, 447, 0, 448, 449, 450, 451, 452,
	311, 453, 312, 454, 0, 250, 251, 252, 455, 0,
	0, 456, 457, 253, 254, 0, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 0, 467, 0,
	465, 468, 469, 470, 255, 256, 497, 472, 471, 257,
	0, 0, 0, 0, 473, 474, 258, 475, 476, 477,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 500, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 0, 325, 326, 327, 328, 329,
	330, 2370, 233, 234, 0, 0, 238, 332, 0, 0,
	0, 0, 331, 333, 340, 0, 0, 334, 235, 336,
	335, 337, 338, 339, 236, 0, 237, 0, 341, 0,
	0, 342, 343, 344, 0, 345, 346, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 239, 0, 353,
	354, 0, 0, 355, 356, 0, 0, 357, 0, 358,
	0, 0, 359, 360, 362, 363, 361, 0, 364, 365,
	367, 366, 0, 0, 0, 0, 240, 241, 368, 369,
	0, 370, 371, 0, 0, 372, 373, 0, 0, 374,
	242, 0, 375, 0, 243, 376, 377, 378, 379, 380,
	381, 382, 0, 383, 244, 384, 245, 385, 0, 386,
	387, 388, 389, 390, 391, 246, 392, 393, 0, 394,
	395, 396, 397, 398, 0, 400, 401, 399, 402, 403,
	404, 405, 0, 406, 0, 407, 408, 409, 410, 247,
	411, 0, 415, 416, 417, 418, 419, 420, 421, 0,
	427, 428, 422, 424, 425, 426, 423, 429, 430, 0,
	431, 412, 413, 432, 0, 433, 248, 434, 435, 0,
	445, 436, 437, 438, 414, 439, 443, 444, 440, 441,
	442, 249, 0, 446, 447, 0, 448, 449, 450, 451,
	452, 311, 453, 312, 454, 0, 250, 251, 252, 455,
	0, 0, 456, 457, 253, 254, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 255, 256, 497, 472, 471,
	257, 0, 0, 0, 0, 473, 474, 258, 475, 476,
	477, 0, 0, 259, 260, 261, 262, 0, 263, 0,
	0, 0, 0, 215, 0, 0, 0, 0, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 0, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 277, 220,
	221, 222, 0, 278, 223, 0, 0, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 0, 291, 292, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 500, 295, 296, 297,
	224, 225, 0, 298, 0, 299, 0, 300, 0, 0,
	301, 302, 303, 0, 304, 0, 305, 306, 0, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 230, 0, 231, 0, 325, 326, 327, 328,
	329, 330, 2359, 233, 234, 0, 0, 238, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 235,
	336, 335, 337, 338, 339, 236, 0, 237, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 239, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 240, 241, 368,
	369, 0, 370, 371, 0, 0, 372, 373, 0, 0,
	374, 242, 0, 375, 0, 243, 376, 377, 378, 379,
	380, 381, 382, 0, 383, 244, 384, 245, 385, 0,
	386, 387, 388, 389, 390, 391, 246, 392, 393, 0,
	394, 395, 396, 397, 398, 0, 400, 401, 399, 402,
	403, 404, 405, 0, 406, 0, 407, 408, 409, 410,
	247, 411, 0, 415, 416, 417, 418, 419, 420, 421,
	0, 427, 428, 422, 424, 425, 426, 423, 429, 430,
	0, 431, 412, 413, 432, 0, 433, 248, 434, 435,
	0, 445, 436, 437, 438, 414, 439, 443, 444, 440,
	441, 442, 249, 0, 446, 447, 0, 448, 449, 450,
	451, 452, 311, 453, 312, 454, 0, 250, 251, 252,
	455, 0, 0, 456, 457, 253, 254, 0, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 0,
	467, 0, 465, 468, 469, 470, 255, 256, 497, 472,
	471, 257, 0, 0, 0, 0, 473, 474, 258, 475,
	476, 477, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 500, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 0, 325, 326, 327,
	328, 329, 330, 232, 233, 234, 0, 0, 238, 332,
	0, 0, 0, 0, 331, 333, 340, 0, 0, 334,
	235, 336, 335, 337, 338, 339, 236, 0, 237, 0,
	341, 0, 0, 342, 343, 344, 0, 345, 346, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 239,
	0, 353, 354, 0, 0, 355, 356, 0, 0, 357,
	0, 358, 0, 0, 359, 360, 362, 363, 361, 0,
	364, 365, 367, 366, 0, 0, 0, 0, 240, 241,
	368, 369, 0, 370, 371, 0, 0, 372, 373, 0,
	0, 374, 242, 0, 375, 0, 243, 376, 377, 378,
	379, 380, 381, 382, 0, 383, 244, 384, 245, 385,
	0, 386, 387, 388, 389, 390, 391, 246, 392, 393,
	0, 394, 395, 396, 397, 398, 0, 400, 401, 399,
	402, 403, 404, 405, 0, 406, 0, 407, 408, 409,
	410, 247, 411, 0, 617, 416, 417, 418, 419, 420,
	421, 0, 427, 428, 422, 424, 425, 426, 423, 429,
	430, 0, 431, 412, 413, 432, 0, 433, 248, 434,
	435, 0, 445, 436, 437, 438, 414, 439, 443, 444,
	440, 441, 442, 249, 0, 446, 447, 0, 448, 449,
	450, 451, 452, 311, 453, 312, 454, 0, 250, 251,
	252, 455, 0, 0, 456, 457, 253, 254, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 255, 256, 497,
	472, 471, 257, 0, 0, 0, 0, 473, 474, 258,
	475, 476, 477, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 215, 0, 1571, 0, 0,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	0, 270, 271, 272, 273, 274, 275, 276, 0, 0,
	277, 220, 221, 222, 0, 278, 223, 0, 0, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 0, 291, 292, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 500, 295,
	296, 297, 224, 225, 0, 298, 0, 299, 0, 300,
	0, 0, 301, 302, 303, 0, 304, 0, 305, 306,
	0, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 230, 0, 231, 0, 325, 326,
	327, 328, 329, 330, 232, 233, 234, 0, 0, 238,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 235, 336, 335, 337, 338, 339, 236, 0, 237,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	239, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 240,
	241, 368, 369, 0, 370, 371, 0, 0, 372, 373,
	0, 0, 374, 242, 0, 375, 0, 243, 376, 377,
	378, 379, 380, 381, 382, 0, 383, 244, 384, 245,
	385, 0, 386, 387, 388, 389, 390, 391, 246, 392,
	393, 0, 394, 395, 396, 397, 398, 0, 400, 401,
	399, 402, 403, 404, 405, 0, 406, 0, 407, 408,
	409, 410, 247, 411, 0, 415, 416, 417, 418, 419,
	420, 421, 0, 427, 428, 422, 424, 425, 426, 423,
	429, 430, 0, 0, 412, 413, 432, 0, 433, 248,
	434, 435, 0, 445, 436, 437, 438, 414, 439, 443,
	444, 440, 441, 442, 249, 0, 446, 447, 0, 448,
	449, 450, 451, 452, 311, 453, 312, 454, 0, 250,
	251, 252, 455, 0, 0, 456, 457, 253, 254, 0,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 0, 467, 0, 465, 468, 469, 470, 255, 256,
	497, 472, 471, 257, 0, 0, 0, 0, 473, 474,
	258, 475, 476, 477, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 500,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 325,
	326, 327, 328, 329, 330, 1562, 233, 234, 0, 0,
	238, 332, 0, 0, 0, 0, 331, 333, 340, 0,
	0, 334, 235, 336, 335, 337, 338, 339, 236, 0,
	237, 0, 341, 0, 0, 342, 343, 344, 0, 345,
	346, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 239, 0, 353, 354, 0, 0, 355, 356, 0,
	0, 357, 0, 358, 0, 0, 359, 360, 362, 363,
	361, 0, 364, 365, 367, 366, 0, 0, 0, 0,
	240, 241, 368, 369, 0, 370, 371, 0, 0, 372,
	373, 0, 0, 374, 242, 0, 375, 0, 243, 376,
	377, 378, 379, 380, 381, 382, 0, 383, 244, 384,
	245, 385, 0, 386, 387, 388, 389, 390, 391, 246,
	392, 393, 0, 394, 395, 396, 397, 398, 0, 400,
	401, 399, 402, 403, 404, 405, 0, 406, 0, 407,
	408, 409, 410, 247, 411, 0, 415, 416, 417, 418,
	419, 420, 421, 0, 427, 428, 422, 424, 425, 426,
	423, 429, 430, 0, 431, 412, 413, 432, 0, 433,
	248, 434, 435, 0, 445, 436, 437, 438, 414, 439,
	443, 444, 440, 441, 442, 249, 0, 446, 447, 0,
	448, 449, 450, 451, 452, 311, 453, 312, 454, 0,
	250, 251, 252, 455, 0, 0, 456, 457, 253, 254,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 255,
	256, 497, 472, 471, 257, 0, 0, 0, 0, 473,
	474, 258, 475, 476, 477, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 215, 0, 0,
	0, 0, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 0, 270, 271, 272, 273, 274, 275, 276,
	0, 0, 277, 220, 221, 222, 0, 278, 223, 0,
	0, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 0, 291,
	292, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	500, 295, 296, 297, 224, 225, 0, 298, 0, 299,
	0, 300, 0, 0, 301, 302, 303, 0, 304, 0,
	305, 306, 0, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 230, 0, 231, 0,
	325, 326, 327, 328, 329, 330, 232, 233, 234, 0,
	0, 238, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 235, 336, 335, 337, 338, 339, 236,
	0, 237, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 239, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 240, 241, 368, 369, 0, 370, 371, 0, 0,
	372, 373, 0, 0, 374, 242, 0, 375, 0, 243,
	376, 377, 378, 379, 380, 381, 382, 0, 383, 244,
	384, 245, 385, 0, 386, 387, 388, 389, 390, 391,
	246, 899, 393, 0, 394, 395, 396, 397, 398, 0,
	400, 401, 399, 402, 403, 404, 405, 0, 406, 0,
	407, 408, 409, 410, 247, 411, 0, 415, 416, 417,
	418, 419, 420, 421, 0, 427, 428, 422, 424, 425,
	426, 423, 429, 430, 0, 431, 412, 413, 432, 0,
	433, 248, 434, 435, 0, 445, 436, 437, 438, 414,
	439, 443, 444, 440, 441, 442, 249, 0, 446, 447,
	0, 448, 449, 450, 451, 452, 311, 453, 312, 454,
	0, 250, 251, 252, 455, 0, 0, 456, 457, 253,
	254, 0, 458, 459, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 0, 467, 0, 465, 468, 469, 470,
	255, 256, 497, 472, 471, 257, 0, 0, 0, 0,
	473, 474, 258, 475, 476, 477, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 500, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	0, 325, 326, 327, 328, 329, 330, 232, 233, 234,
	0, 0, 238, 332, 0, 0, 0, 0, 331, 333,
	340, 0, 0, 334, 235, 336, 335, 337, 338, 339,
	236, 0, 237, 0, 341, 0, 0, 342, 343, 344,
	0, 345, 346, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 239, 0, 353, 354, 0, 0, 355,
	356, 0, 0, 357, 0, 358, 0, 0, 359, 360,
	362, 363, 361, 0, 364, 365, 367, 366, 0, 0,
	0, 0, 240, 241, 368, 369, 0, 370, 371, 0,
	0, 372, 373, 0, 0, 374, 242, 0, 375, 0,
	243, 376, 377, 378, 0, 380, 381, 382, 0, 383,
	244, 384, 245, 385, 0, 386, 387, 388, 0, 390,
	391, 246, 392, 393, 0, 394, 395, 396, 397, 398,
	0, 400, 401, 399, 402, 403, 404, 405, 0, 406,
	0, 407, 408, 409, 410, 247, 0, 0, 415, 416,
	417, 418, 419, 420, 421, 0, 427, 428, 422, 424,
	425, 426, 423, 429, 430, 0, 431, 412, 413, 432,
	0, 433, 248, 434, 435, 0, 445, 436, 437, 438,
	414, 439, 443, 444, 440, 441, 442, 249, 0, 446,
	447, 0, 448, 449, 450, 451, 452, 311, 453, 312,
	454, 0, 250, 251, 252, 455, 0, 0, 456, 457,
	253, 254, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 255, 256, 0, 472, 471, 257, 0, 0, 0,
	0, 473, 474, 258, 475, 476, 477, 1305, 1306, 0,
	1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 1354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1307,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1330, 1331, 1332, 1333,
	1307, 0, 0, 0, 0, 0, 1313, 0, 1327, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 1305,
	1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 1345,
	1355, 0, 0, 1335, 1336, 1337, 0, 1341, 0, 0,
	0, 0, 0, 0, 1308, 0, 0, 1354, 0, 0,
	0, 0, 0, 0, 1351, 1352, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 1330, 1331, 1332,
	1333, 1307, 0, 0, 0, 0, 1343, 1313, 0, 1327,
	0, 0, 0, 1328, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 1330, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 1343, 1313, 1334,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1353, 1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 1351, 1352, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	1334, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 1344, 0, 0, 1319,
	1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309,
	1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0, 0,
	0, 1334, 0, 2260, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 1346, 0, 0, 0, 1308, 0, 1344, 1354, 0,
	1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	0, 0, 1307, 0, 2259, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 1308, 0, 1344, 1354,
	0, 1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316,
	1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 1330,
	1331, 1332, 1333, 1307, 0, 2256, 0, 0, 0, 1313,
	0, 1327, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349,
	1350, 0, 1345, 1355, 0, 0, 1335, 1336, 1337, 0,
	1341, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	1354, 0, 0, 0, 0, 0, 0, 1351, 1352, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	1330, 1331, 1332, 1333, 1307, 0, 0, 0, 0, 1343,
	1313, 0, 1327, 0, 0, 0, 1328, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1345, 1355, 0, 0, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 1352,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 1330, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	1343, 1313, 1334, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 1353, 1345, 1355, 0, 0, 1335, 1336,
	1337, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 1351,
	1352, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 1334, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 1344,
	0, 0, 1319, 1320, 1326, 1325, 1321, 1347, 0, 1318,
	1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0,
	0, 0, 0, 0, 1334, 0, 2255, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 0,
	1344, 0, 0, 1319, 1320, 1326, 1325, 1321, 1347, 0,
	1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 2254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	0, 1344, 0, 0, 1319, 1320, 1326, 1325, 1321, 1347,
	0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	1307, 0, 0, 0, 3064, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 1305,
	1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 1308, 0, 0, 1354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 1331, 1332,
	1333, 1307, 0, 0, 0, 0, 0, 1313, 0, 1327,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0,
	1345, 1355, 0, 0, 1335, 1336, 1337, 0, 1341, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 1354, 0,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 1330, 1331,
	1332, 1333, 1307, 0, 0, 0, 0, 1343, 1313, 0,
	1327, 0, 0, 0, 1328, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1351, 1352, 0, 0,
	0, 0, 0, 0, 1322, 1323, 0, 0, 0, 1330,
	1331, 1332, 1333, 0, 0, 0, 0, 0, 1343, 1313,
	1334, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 1353, 1345, 1355, 0, 0, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 1351, 1352, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1343,
	0, 1334, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 0, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 1344, 0, 0,
	1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	3060, 0, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 1344, 0,
	0, 1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316,
	1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0,
	0, 3002, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 1338,
	1339, 1340, 1348, 1349, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 1354, 0, 0, 0, 0, 1344,
	0, 0, 1319, 1320, 1326, 1325, 1321, 1347, 0, 1318,
	1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 1307, 0,
	0, 0, 3001, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 1305, 1306, 0,
	1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 1354, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 1331, 1332, 1333, 1307,
	0, 0, 0, 0, 0, 1313, 0, 1327, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 1345, 1355,
	0, 0, 1335, 1336, 1337, 0, 1341, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 1351, 1352, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 1330, 1331, 1332, 1333,
	1307, 0, 0, 0, 0, 1343, 1313, 0, 1327, 0,
	0, 0, 1328, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1353, 1345,
	1355, 0, 0, 1335, 1336, 1337, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1352, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 1330, 1331, 1332,
	1333, 0, 0, 0, 0, 0, 1343, 1313, 1334, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 1353,
	1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1343, 0, 1334,
	0, 0, 0, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 1344, 0, 0, 1319, 1320,
	1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309, 1310,
	1311, 1312, 1314, 1315, 0, 0, 0, 0, 2951, 0,
	1334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 1344, 0, 0, 1319,
	1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309,
	1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0, 2912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340,
	1348, 1349, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 1354, 0, 0, 0, 0, 1344, 0, 0,
	1319, 1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 1307, 0, 0, 0,
	2823, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 1305, 1306, 0, 1338, 1339,
	1340, 1348, 1349, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	1308, 0, 0, 1354, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 1331, 1332, 1333, 1307, 0, 0,
	0, 0, 0, 1313, 0, 1327, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 1305, 1306, 0, 1338,
	1339, 1340, 1348, 1349, 1350, 0, 1345, 1355, 0, 0,
	1335, 1336, 1337, 0, 1341, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 1354, 0, 0, 0, 0, 0,
	0, 1351, 1352, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 1330, 1331, 1332, 1333, 1307, 0,
	0, 0, 0, 1343, 1313, 0, 1327, 0, 0, 0,
	1328, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 1345, 1355, 0,
	0, 1335, 1336, 1337, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 1352, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 1330, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 1343, 1313, 1334, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 1353, 1345, 1355,
	0, 0, 1335, 1336, 1337, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 0, 1351, 1352, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 1334, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 1344, 0, 0, 1319, 1320, 1326, 1325,
	1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312,
	1314, 1315, 0, 0, 0, 0, 2781, 0, 1334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 1344, 0, 0, 1319, 1320, 1326,
	1325, 1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311,
	1312, 1314, 1315, 0, 0, 0, 0, 2780, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	1354, 0, 0, 0, 0, 1344, 0, 0, 1319, 1320,
	1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309, 1310,
	1311, 1312, 1314, 1315, 1307, 0, 0, 0, 2779, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348,
	1349, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 1308, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1331, 1332, 1333, 1307, 0, 0, 0, 0,
	0, 1313, 0, 1327, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340,
	1348, 1349, 1350, 0, 1345, 1355, 0, 0, 1335, 1336,
	1337, 0, 1341, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 1351,
	1352, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 1330, 1331, 1332, 1333, 1307, 0, 0, 0,
	0, 1343, 1313, 0, 1327, 0, 0, 0, 1328, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1353, 1345, 1355, 0, 0, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 1352, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 1330, 1331, 1332, 1333, 0, 0, 0,
	0, 0, 1343, 1313, 1334, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 1353, 1345, 1355, 0, 0,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 1346, 0, 0, 0, 0, 0,
	0, 1351, 1352, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 1334, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 1344, 0, 0, 1319, 1320, 1326, 1325, 1321, 1347,
	0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	0, 0, 0, 0, 2746, 0, 1334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 0, 1344, 0, 0, 1319, 1320, 1326, 1325, 1321,
	1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314,
	1315, 0, 0, 0, 0, 2567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 1308, 0, 0, 1354, 0,
	0, 0, 0, 1344, 0, 0, 1319, 1320, 1326, 1325,
	1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312,
	1314, 1315, 1307, 0, 0, 0, 2539, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1330,
	1331, 1332, 1333, 1307, 0, 0, 0, 0, 0, 1313,
	0, 1327, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 1355, 0, 0, 1335, 1336, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 1352, 0,
	0, 0, 0, 0, 0, 1322, 1323, 0, 0, 0,
	1330, 1331, 1332, 1333, 0, 0, 0, 0, 0, 1343,
	1313, 0, 0, 0, 0, 0, 1328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1345, 1355, 0, 0, 1335, 1336, 1337,
	0, 0, 0, 0, 0, 1342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 1352,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 1334, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 0, 0, 0,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348,
	1349, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 1346, 0, 0, 0, 0, 1308, 1344,
	0, 1354, 1319, 1320, 1326, 1325, 1321, 1347, 0, 1318,
	1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0,
	0, 0, 1840, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340,
	1348, 1349, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 1308,
	1344, 0, 1354, 1319, 1320, 1326, 1325, 1321, 1347, 0,
	1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0,
	0, 2214, 1330, 1331, 1332, 1333, 1307, 0, 0, 0,
	0, 0, 1313, 3140, 1327, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1355, 0, 0, 1335,
	1336, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 1352, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 1330, 1331, 1332, 1333, 0, 0, 0,
	0, 0, 1343, 1313, 0, 2301, 0, 0, 2300, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 1345, 1355, 0, 0,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 1352, 0, 0, 0, 3139, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 1334, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 1305, 1306, 0, 1338, 1339,
	1340, 1348, 1349, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 1346, 0, 2187, 0,
	1308, 0, 1344, 1354, 0, 1319, 1320, 1326, 1325, 1321,
	1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314,
	1315, 0, 0, 0, 0, 0, 0, 1307, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 1943, 1324, 0, 0, 0, 0, 1305, 1306, 0,
	1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 2188, 1942,
	0, 0, 1308, 1344, 0, 1354, 1319, 1320, 1326, 1325,
	1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312,
	1314, 1315, 0, 0, 1330, 1331, 1332, 1333, 0, 1307,
	0, 0, 0, 0, 1313, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1355, 0,
	0, 1335, 1336, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1351, 1352, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 0, 1330, 1331, 1332, 1333,
	0, 0, 0, 0, 1343, 0, 1313, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 1345,
	1355, 0, 0, 1335, 1336, 1337, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1351, 1352, 0, 0, 0, 0,
	0, 0, 1322, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 1334, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 0, 0, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1342, 0, 0, 0, 0, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 1338,
	1339, 1340, 1348, 1349, 1350, 0, 0, 0, 0, 1334,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 1354, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1307, 1346,
	0, 0, 0, 0, 1344, 0, 1327, 1319, 1320, 1326,
	1325, 1321, 1347, 1324, 1318, 1316, 1317, 1309, 1310, 1311,
	1312, 1314, 1315, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 1306, 0, 1338, 1339,
	1340, 1348, 1349, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 1330, 1331, 1332, 1333, 0,
	1308, 0, 0, 1354, 0, 1313, 1344, 0, 0, 1319,
	1320, 1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309,
	1310, 1311, 1312, 1314, 1315, 0, 0, 1307, 1345, 1355,
	0, 0, 1335, 1336, 1337, 1327, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1351, 1352, 0, 0, 0, 0, 0,
	0, 1322, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1330, 1331, 1332, 1333, 1353, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	0, 1342, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1355, 0,
	0, 1335, 1336, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 0,
	0, 0, 1351, 1352, 0, 0, 0, 0, 0, 0,
	1322, 1323, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 0, 1334, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 1308, 0, 0,
	1354, 0, 0, 0, 1329, 1344, 0, 0, 1319, 1320,
	1326, 1325, 1321, 1347, 0, 1318, 1316, 1317, 1309, 1310,
	1311, 1312, 1314, 1315, 1307, 0, 0, 1346, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1331, 1332, 1333, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 1344, 0, 2307, 1319, 1320, 1326,
	1325, 1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311,
	1312, 1314, 1315, 0, 1345, 1355, 0, 0, 1335, 1336,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1352, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0, 0,
	0, 0, 0, 0, 1334, 0, 1341, 0, 0, 0,
	2302, 0, 0, 1308, 0, 0, 1354, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 1346, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348,
	1349, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 1308, 0,
	0, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1330, 1331, 1332,
	1333, 0, 0, 0, 0, 1307, 0, 1313, 0, 0,
	0, 1344, 0, 1327, 1319, 1320, 1326, 1325, 1321, 1347,
	1324, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1351, 1352, 0, 0, 0,
	0, 0, 0, 1322, 1323, 0, 0, 0, 0, 0,
	0, 0, 1330, 1331, 1332, 1333, 0, 1343, 0, 0,
	0, 0, 1313, 0, 1328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 0, 0, 0, 0, 1345, 1355, 0, 0, 1335,
	1336, 1337, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1351, 1352, 0, 0, 0, 0, 0, 0, 1322, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 0, 1343, 0, 0, 0, 0, 0, 0, 1328,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1342, 0,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2269, 0, 0, 0, 0, 0, 1305,
	1306, 0, 1338, 1339, 1340, 1348, 1349, 1350, 0, 0,
	0, 0, 0, 0, 0, 1334, 0, 1341, 0, 0,
	0, 2253, 0, 0, 1308, 0, 0, 1354, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1307, 0, 0, 0, 1346, 0, 1344, 0, 1327,
	1319, 1320, 1326, 1325, 1321, 1347, 1324, 1318, 1316, 1317,
	1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1330, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 1344, 0, 0, 1319, 1320, 1326, 1325, 1321,
	1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314,
	1315, 1345, 1355, 0, 0, 1335, 1336, 1337, 0, 0,
	0, 0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349,
	1350, 0, 0, 0, 0, 0, 1351, 1352, 0, 0,
	1341, 0, 0, 0, 1322, 1323, 0, 1308, 0, 0,
	1354, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 1353, 1327, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 1342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 1338, 1339, 1340, 1348, 1349, 1350,
	0, 1334, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 1330, 1331, 1332, 1333, 0, 1308, 0, 1329, 1354,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 1307, 1345, 1355, 0, 0, 1335, 1336,
	1337, 1327, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	1352, 0, 0, 0, 0, 0, 0, 1322, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 1331, 1332, 1333, 1353, 0, 0, 0, 1344, 0,
	1313, 1319, 1320, 1326, 1325, 1321, 1347, 1342, 1318, 1316,
	1317, 1309, 1310, 1311, 1312, 1314, 1315, 0, 0, 0,
	0, 0, 0, 1345, 1355, 0, 0, 1335, 1336, 1337,
	0, 0, 0, 0, 1305, 1306, 0, 1338, 1339, 1340,
	1348, 1349, 1350, 0, 1334, 0, 0, 0, 1351, 1352,
	0, 0, 0, 0, 0, 0, 1322, 1323, 0, 1308,
	0, 1329, 1354, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 1346, 0, 1307, 0, 0, 0,
	0, 0, 0, 1353, 1327, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 1331, 1332, 1333, 0, 0, 0,
	1329, 1344, 0, 1313, 1319, 1320, 1326, 1325, 1321, 1347,
	0, 1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315,
	0, 0, 0, 1346, 0, 0, 1345, 1355, 0, 0,
	1335, 1336, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 1352, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1353, 0, 0, 0,
	1344, 0, 0, 1319, 1320, 1326, 1325, 1321, 1347, 0,
	1318, 1316, 1317, 1309, 1310, 1311, 1312, 1314, 1315, 0,
	0, 1631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1642, 1627, 1632, 1615,
	1652, 1651, 0, 1329, 0, 1617, 1616, 0, 0, 661,
	0, 691, 0, 1661, 1660, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 0, 0, 0,
	0, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 1653, 0, 1649, 1648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1647, 0, 667, 0, 0,
	0, 0, 669, 0, 0, 0, 696, 0, 0, 0,
	0, 0, 675, 676, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 1646, 1644, 1645, 0, 0, 0, 0,
	692, 670, 0, 1344, 0, 0, 1319, 1320, 1326, 1325,
	1321, 1347, 0, 1318, 1316, 1317, 1309, 1310, 1311, 1312,
	1314, 1315, 1626, 0, 0, 0, 690, 0, 0, 0,
	0, 0, 0, 1635, 1630, 1636, 1637, 1638, 1639, 1640,
	0, 1634, 0, 0, 0, 0, 0, 0, 0, 0,
	1658, 1659, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 673, 0, 0,
	1619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1650, 0, 0, 0, 1628, 1629, 679, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1643, 693, 0, 0, 1612, 1610, 1611, 1614, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1620, 1621, 1622,
	1623, 0, 0, 0, 0, 677, 0, 0, 0, 0,
	0, 1641, 1624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 0, 0, 0, 1618,
	683, 1654, 1655, 1656, 1657, 0, 0, 0, 0, 0,
	0, 0, 663, 681, 694, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1625, 0, 664, 0,
	0, 1662, 0, 0, 0, 0, 0, 0, 684, 0,
	0, 682, 0, 0, 0, 697, 698, 0, 0, 0,
	0, 695, 0, 0, 0, 0, 0, 0, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 687,
}
var sqlPact = [...]int{

	293, -1000, -6, -1000, -1000, -1000, 223, -1000, -1000, -1000,
	-1000, 222, 220, 219, -1000, 207, 206, 204, 203, 202,
	201, 200, 198, 197, 196, 195, 188, -1000, -1000, 186,
	-1000, -1000, -1000, -1000, 184, 182, 180, -1000, 175, 1274,
	31315, 173, 170, 165, 2111, 48660, 1561, 163, 161, -1000,
	151, 1610, 37084, 1338, 1920, -1000, 147, 146, 1390, 48279,
	655, 1985, 33994, 36697, 2015, 47892, 30928, 2001, 33607, 47505,
	-1000, -1000, 1124, -1000, -1000, 47118, 144, 133, 130, 129,
	126, -1000, 124, 46731, 123, 122, 121, 112, 110, 109,
	-1000, 105, 104, 96, 95, 93, 81, 80, 78, 77,
	75, 74, 70, 69, 68, 67, 66, -1000, 57747, 65,
	64, 63, -1000, 1372, 61, 60, 59, 57, 56, -1000,
	-1000, -1000, 54, 53, 52, 51, -1000, 50, 49, 143,
	48, 45, 42, 40, 36, -1000, 1180, 632, 1915, 13625,
	1333, 1329, 1323, 1287, 1263, 789, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 51327, 48660, 32, -39,
	30, -1000, 2363, 790, 23515, 293, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36310, 35923,
	35536, 29380, 46344, 45957, 10739, 10739, 992, -1000, -1000, -1000,
	-1000, -1000, -8, 32458, 48660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 273,
	-1000, -1000, -1000, -1000, -1000, -1000, 19916, 631, 19492, 262,
	19068, 249, 395, -1000, -1000, -1000, 272, -1000, -1000, -1000,
	-1000, 1302, -1000, -1000, -1000, -1000, 45570, 45183, 2060, 44796,
	28983, 28586, 44409, 48660, 48660, 1799, 1798, 44022, -1000, -1000,
	43635, -1000, -1000, 2260, 1946, 1931, 35149, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43254, 42867, 42480, 42093,
	41706, 28189, 27792, 625, -1000, -1000, -1000, -1000, 25063, 614,
	-1000, -1000, -1000, -1000, -1000, 29, -1000, 28, 27, -1000,
	24, 23, 20, 19, 18, 17, 14, 13, -1000, 12,
	8, -1000, 7, 6, -1000, 2, -1, 1559, 1501, 1475,
	41319, 1080, 48660, -1000, 1560, -60, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 612, 48660, -1000, -1000, 20326, 79, -1000,
	608, -1000, 1978, -1000, 20326, 79, -1000, 1557, 211, 1503,
	-1000, -1000, -1000, 1362, 1118, -1000, -1000, 48660, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2622, 1451, 607, 40932, -1000,
	1825, -1000, 774, 14445, -1000, 938, -1000, 14445, 267, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2304, 1240, 2579, 27395, 1555, 2416, 2210,
	2621, 1772, 2197, 2182, 2171, 2131, 2112, 2617, 1188, 2616,
	1147, 2615, 2107, 2065, 2598, 1391, 34762, 2614, 2613, 2028,
	1963, -1000, -1000, -1000, -1000, 1133, -1000, -1000, -1000, -1000,
	-1000, -1000, 38616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1180, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1704, 2309, 2309, 2309, 2464,
	372, 366, -1000, 143, -1000, 1530, -1000, 1437, -1000, -1000,
	-1000, 57182, -1000, -1000, 20326, 20326, 20326, 20326, 20326, 1408,
	-1000, -1000, -1000, 660, -1000, 601, 519, 11970, -1000, -1000,
	-1000, -1000, 600, 2597, -1000, 793, -1000, -1000, -1000, -1000,
	2554, -1000, -1000, -1000, 380, 20326, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 261, 780, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 526, 1299,
	525, 525, 525, -1000, -1000, 815, -1000, -1000, 736, -1000,
	734, -1000, -1000, -1000, 2059, 597, 596, -1000, 595, 587,
	586, -1000, -1000, -1000, 585, 584, 579, 578, 566, 565,
	562, 561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	815, 815, -1000, 560, 559, 550, 549, 548, 546, 545,
	544, 543, 1569, -1000, -1000, 1569, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 990, 50184, -1000, -1000, -1000, -12, 48660,
	-1000, 395, -12, -1000, -1000, 542, -1000, 14855, 14855, 14855,
	-1000, -1000, 1556, 20326, -1000, 1991, -1000, 3653, -217, 732,
	24676, -1000, 22741, 732, 666, 26998, -1000, 1958, -1000, -1000,
	539, 258, -1000, -1000, -1000, -1000, -1000, -1000, 1516, 2211,
	970, -1000, 1253, 2209, -1000, 2491, 2208, 1244, -1000, -1000,
	805, 2202, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1371, -1000, -1000, 1577, 2201, -199, 2099, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1576, -1000, 29775, 32458, -14,
	-1000, -1000, -37, -1000, 10344, 57182, -1000, -1000, -1000, 57182,
	675, -1000, -1000, 2200, -1000, 57182, 616, -1000, -1000, 2196,
	-1000, 1954, 48660, 10739, 48660, 48660, -1000, 538, 1634, 1554,
	-1000, -1000, 32077, 2491, 1632, -1000, -1000, 795, 1629, -1000,
	-1000, 1628, -1000, 395, -1000, -1000, 761, -1000, 2611, 40545,
	50946, 795, 1627, -1000, -1000, -1000, 38616, -1000, 48660, -1000,
	48660, -1000, 1086, -1000, 50565, 139, 2193, -1000, -1000, 139,
	2191, -1000, 139, 2184, -1000, 137, 2183, -1000, -1000, 1442,
	2181, -1000, -57, 2180, -1000, -1000, -57, 2174, -1000, -1000,
	20326, -38, -1000, -1000, -1000, 790, 30541, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40158, 29775, 32077, 48660, 34375, 29775,
	606, 57182, -1000, 2523, 57697, 29775, 57182, -1000, 32077, 48660,
	2057, -1000, 39771, 39384, 2387, 773, -1000, -1000, 48660, -1000,
	20326, -1000, 2521, 1757, -31, -1000, -1000, -1000, -1000, -1000,
	1691, 1686, 932, 1056, -1000, 14445, 14445, 2287, -1000, 256,
	10739, -1000, -1000, 1047, 1719, -1000, -1000, -1000, -1000, 29775,
	29775, -1000, 38997, -1000, -1000, -1000, 1428, 48660, -1000, -1000,
	2055, -1000, 31696, 48660, -1000, 48660, -1000, 48660, -1000, 48660,
	-1000, 48660, -1000, -1000, -1000, -1000, -1000, 2150, 1272, 1268,
	-1000, 48660, -1000, 48660, -1000, -1000, -1000, 1687, -1000, -1000,
	-1000, -1000, 48660, -1000, -1000, -1000, -1000, -1000, -1000, 1199,
	-1000, 1046, -1000, -1000, 141, -1000, -1000, 1704, -1000, 1562,
	1768, 18644, 1734, 20326, 143, -1000, -1000, 143, 143, 13201,
	-1000, -1000, -1000, 48660, -1000, 57697, 57697, 10739, 1008, 20326,
	20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326,
	20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326,
	20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326, 20326,
	20326, 20326, 20326, 20326, 1602, 20326, 989, 20326, 20326, 20326,
	20326, 2012, -1000, -1000, 1373, 419, 1417, -1000, 2562, 2562,
	2562, 57444, 57444, 503, 660, -1000, 20326, -1000, 79, 20326,
	366, 55020, 1672, -9, 11560, 11136, -1000, 2584, 1037, -1000,
	-1000, -1000, -1000, 18220, 792, 57182, 9949, 1998, 1870, -1000,
	2583, -1000, -1000, 2554, -1000, -1000, -1000, -1000, 1007, 1005,
	1004, 972, 537, 692, 672, 670, 669, 501, 20326, 20326,
	20326, 20326, 20326, 20326, 20326, 20326, -1000, -1000, 17810, 17386,
	16962, 16538, 16114, 21556, 15690, 20326, 12380, -1000, -31, -1000,
	50184, -1000, 48660, -12, 2520, 20326, 187, -1000, 55817, -1000,
	187, 187, 536, -44, 57182, 1740, 1729, 23902, 1639, 1422,
	1422, 1422, -1000, 534, 652, 732, 7560, 37465, 1431, 732,
	732, 212, 266, 364, 22354, 1991, 37465, -1000, -1000, 48660,
	531, 11136, 10739, -27, 1280, -1000, 33220, 2327, 2314, 2323,
	1085, -1000, 1065, 2458, 38616, 2495, 551, 2364, 1951, -1000,
	-1000, 980, 38616, 2491, -1000, 57697, -1000, 1792, 2456, 1102,
	1111, 1102, 1102, 1088, 38616, 978, 1349, 29775, 2362, 976,
	-28, 2485, 152, 2360, 1942, 974, -1000, -1000, 48660, 10739,
	2352, 1033, 725, -14, 32458, 48660, 242, -1000, 20326, 79,
	20326, 79, 1062, -45, 241, 1739, 1726, 212, -1000, 32839,
	2519, 2166, 48660, 1752, -1000, 2491, 2165, -1000, 1321, -1000,
	2163, 2161, 2514, 556, 2610, -1000, 1549, 1625, -1000, -1000,
	-1000, 1547, 1624, 1014, 2154, 808, 397, 2512, 397, 26224,
	-1000, 48660, -1000, 48660, -1000, -1000, 48660, -1000, 48660, -1000,
	48660, -1000, 48660, 48660, -1000, 48660, 29775, 29775, 29775, -46,
	4912, 30541, -47, 791, 971, -52, -1000, 363, 48660, 850,
	32839, 3125, -54, -1000, 1017, -1000, -1000, -1000, -1000, 310,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 815, 529, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 526, 1299, 525, 525,
	525, -1000, -1000, -1000, 736, -1000, 734, -1000, -1000, -1000,
	815, 815, -1000, -1000, -194, 1941, -37, 34375, 725, -1000,
	725, -1000, 2053, -1000, 2376, 739, -59, 893, -31, -1000,
	1569, -1000, 1136, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2596, -1000, 2568, -1000,
	-1000, 2582, -17, -1000, -17, -1000, 10739, -1000, 48660, 2038,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48660, -1000,
	48660, -1000, -1000, -1000, -1000, -1000, -1000, 1146, -1000, 2025,
	-1000, 2022, -1000, 240, -1000, -1000, -1000, 48660, 48660, 48660,
	-1000, 38616, -1000, -1000, -1000, -1000, 57182, -1000, 417, -1000,
	-1000, 57182, 1184, 1764, -1000, 1764, -19, -1000, 55745, 1714,
	48660, -1000, -1000, -1000, -1000, -1000, -1000, 772, 886, 886,
	968, 968, 968, 968, 2471, 435, 3138, 689, 752, 752,
	752, 752, 752, 752, 752, 752, 580, 447, 447, 580,
	580, 580, 580, 580, 447, 447, 447, 752, 752, 752,
	57444, 57281, 5326, 20326, 20326, 966, 1368, 419, 5246, 20326,
	393, 393, 393, 393, -1000, 2152, -1000, -1000, -1000, -1000,
	1932, 524, 21556, 21556, -1000, -1000, -1000, 11970, 20326, -1000,
	-1000, -1000, -1000, 519, 20326, -1000, 55091, -242, 362, -166,
	236, 48660, 20326, 9, -1000, 20326, 20326, 20326, 361, -1000,
	360, -1000, 965, -1000, 964, 960, 949, -1000, 516, 650,
	-62, -1000, 1090, -1000, 20326, 233, -1000, 1412, 514, 512,
	359, -69, 762, 758, 756, 754, 20326, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 57019, 52601, 52530,
	52239, 6821, 52168, 52097, -72, 357, -1000, 1930, -166, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 356, -1000, -74, -1000,
	-75, -1000, 354, -1000, 56763, -166, 353, 5509, -1000, 21556,
	21556, 21556, -1000, 352, -1000, 55454, -1000, 56688, 15266, 15266,
	15266, 349, 56432, 20326, -166, -1000, -1000, 511, -77, 808,
	14855, 23128, 10739, -1000, 808, 808, 20326, -1000, 20326, 23902,
	23902, 1615, 1728, 23902, -1000, -1000, -1000, -1000, 37465, 653,
	732, 37465, -1000, 2554, 1766, -1000, -1000, -1000, 48660, 395,
	-1000, 37465, 37465, 10739, 732, -1000, 344, 25450, 9, 232,
	1261, 48660, 48660, 48660, -1000, -1000, 1623, 49803, 1618, 57697,
	48660, -1000, -1000, 510, 509, 1712, 1707, 48660, 48660, 49422,
	49041, 48660, 1339, 20326, 1458, 1366, 79, -1000, 79, 750,
	507, 48660, 1223, -1000, -1000, -1000, -1000, -1000, 48660, -1000,
	-1000, 2577, -1000, 1102, -1000, -1000, -1000, 1102, 2491, 1220,
	48660, 29775, 803, 748, 48660, 1360, 79, -1000, 79, 747,
	504, 10739, 1262, -1000, 746, 48660, 1803, -1000, 1574, -1000,
	-1000, 9554, 57182, -1000, 57182, -1000, -1000, -1000, 10739, 1820,
	1820, 336, -26, -1000, -1000, -1000, -1000, -1000, -1000, 1794,
	48660, 592, 48660, 79, 48660, 181, 791, 29775, 48660, 29775,
	29775, 29775, 79, 2609, 491, 2608, -1000, 48660, 2142, 48660,
	2134, 2220, 711, 48660, 1433, 20326, 1231, -1000, 25837, 835,
	48660, 1186, 140, -1000, -1000, -1000, 16, 48660, -1000, -1000,
	139, 139, 139, -1000, 137, 1442, -1000, -57, -57, -1000,
	-1000, -1000, 4912, 1924, 38235, 48660, 2536, 791, 488, 29775,
	-83, -1000, 853, 943, 941, -1000, 57697, -1000, 658, 871,
	-1000, 2576, 485, 2554, -1000, 791, 48660, 90, -1000, 796,
	1609, -1000, 14445, 14445, -1000, 1569, -1000, -1000, 1179, -1000,
	1257, -1000, -1000, -1000, -1000, 14445, -1000, -1000, 1028, -37,
	-37, -1000, 1144, 1134, 48660, -1000, -1000, -1000, -1000, 1184,
	-1000, 20326, -1000, -1000, -1000, 13201, -1000, -1000, -1000, 48660,
	-200, 20326, 20326, 5122, 4631, 20326, 21556, 21556, -1000, 20326,
	4599, -1000, -1000, -1000, -1000, -1000, 1916, 483, 20326, 57697,
	5834, 4000, -84, 580, -1000, 20326, -1000, 9159, -85, 54664,
	331, 14035, -1000, 56076, -35, -35, -1000, 2589, 1645, 1380,
	1246, 1099, 2570, -1000, -1000, 654, 2186, -1000, 20326, 56175,
	8764, -1000, 26611, 811, 1433, -1000, -1000, 2554, -1000, -1000,
	-1000, -1000, 54593, 57697, 57697, 20326, 20326, -1000, 20326, 20326,
	20326, -1000, -1000, 20326, -1000, -1000, -1000, -1000, 1911, 20326,
	-1000, 57697, 57697, 21556, 21556, 21556, 21556, 21556, 21556, 21556,
	21556, 21556, 21556, 21556, 21556, 21556, 21556, 21556, 21556, 21556,
	21556, 21556, 1721, 21556, 2559, 2559, 2559, -1000, 1988, 1911,
	20326, 20326, 57697, 330, 327, 322, -1000, 20326, -166, 3125,
	-1000, 1859, -1000, -110, -1000, 1991, -1000, -1000, 1859, 1859,
	-94, 57182, -1000, 1615, -1000, 482, 20326, 23902, -1000, 637,
	-1000, -99, -1000, 37465, -1000, 636, -239, -1000, 720, -1000,
	395, -1000, -1000, -1000, 230, 37465, -1000, -100, -1000, 2510,
	320, 10739, -1000, -1000, 948, 947, -1000, 2123, -1000, 1616,
	-1000, 839, -1000, 1292, 20326, 24289, 481, 480, 1388, -1000,
	2119, 1442, 2117, 1442, -1000, -1000, 741, -1000, 57182, 472,
	471, -1000, -27, 1191, -1000, -1000, 20326, 20326, -1000, 929,
	-1000, -1000, -1000, 2491, 927, -1000, -1000, 1307, 20326, -1000,
	-1000, -1000, -1000, 20326, 20326, -1000, -28, 926, 20326, 2097,
	791, 1904, 1038, -1000, -1000, -1000, -1000, -1000, -1000, 1782,
	32839, 48660, 469, 48660, 468, -1000, -1000, 467, 48660, -1000,
	-1000, 2491, -1000, 795, -1000, -1000, -1000, 2606, -1000, 845,
	10739, 465, 10739, 1678, 711, 30160, -1000, 795, 1768, -1000,
	57182, -1000, 1186, 12790, 2332, -105, -1000, 229, -1000, -1000,
	-1000, 808, 26224, 23902, 20326, 2604, -107, -1000, -1000, -1000,
	-1000, -1000, -1000, 79, -30, 464, -1000, 719, 716, -37,
	1493, -1000, 29775, 48660, 48660, -1000, 2557, -1000, 634, 317,
	2554, 316, -1000, -37, 48660, -1000, 1482, 10739, 48660, 48660,
	10739, 48660, -1000, -1000, -31, -1000, -1000, -1000, -1000, 48660,
	-1000, -1000, -1000, 1510, 54522, -1000, 2339, 10739, 2537, 393,
	20326, 20326, 3328, 3850, 3788, 393, 20326, 20326, 57697, 4212,
	-114, 20326, 20326, -1000, 630, 57182, -1000, -1000, -1000, -1000,
	2588, 20326, 315, 314, 311, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 308, -1000, -1000, 57182, 20326, 227, -1000,
	-1000, -1000, 51708, -1000, 20326, 306, 304, -1000, 301, 300,
	7078, 6658, 54166, 54095, 54024, 57182, 1988, 57182, -1000, -1000,
	810, 810, 1079, 1079, 1079, 1079, 2559, 628, 897, 1000,
	3475, 3475, 3475, 457, 865, 865, 3475, 3475, 3475, 1894,
	1698, 459, 5919, -1000, -1000, 57182, 57182, 299, -1000, -1000,
	-1000, -166, 298, 1854, 2449, -1000, 23902, 1854, 1854, -1000,
	-1000, 48660, 57182, -1000, -217, -1000, 2554, -1000, -1000, 1766,
	-1000, 7969, -1000, 10739, -1000, -1000, 25450, -1000, 456, -1000,
	10, 48660, 48660, 48660, 2109, -1000, 3149, -1000, 53668, -115,
	-1000, 2403, 2403, 20326, 212, 24289, 48660, -1000, 1330, 1736,
	887, 48660, -1000, 48660, -1000, -1000, 48660, 48660, 48660, 48660,
	48660, 57182, -116, 48660, 48660, 29775, 57182, 57182, -117, 10739,
	57182, 2350, -1000, 29775, 936, 1360, 1808, -1000, 444, 24289,
	433, 48660, 32839, 2507, -1000, -1000, -1000, -1000, 432, 2011,
	1546, 24289, 1539, 1693, 711, 30160, -1000, 1014, 1186, -1000,
	-1000, -32, -1000, 477, 79, 48660, 2603, 1433, -1000, -34,
	57182, -1000, 712, -1000, 37850, 37850, 29775, 29775, -1000, 294,
	2255, 2252, 629, -1000, -1000, 287, -1000, -37, 1622, -1000,
	-1000, 1385, 1572, -1000, -1000, -1000, -1000, -1000, 2339, 393,
	393, 20326, 20326, 20326, 393, 4212, -122, -1000, 393, 393,
	-1000, -1000, 56076, -1000, -1000, -1000, -1000, 57182, 8369, 1395,
	-1000, 53597, -1000, -1000, -1000, -1000, 20326, 20326, -1000, -1000,
	-1000, -1000, -1000, 21556, 1890, 421, 57697, -1000, -1000, 794,
	20326, 20326, 1991, 794, 794, -123, 732, -1000, -1000, -1000,
	2554, 10, -1000, 2602, 10739, -1000, -1000, -1000, 48660, -1000,
	48660, -1000, 10739, 48660, 1868, 1586, -1000, -1000, 1703, 420,
	21556, 48660, 706, -1000, 1315, 24289, 2339, 10739, 2339, 53526,
	-125, -130, 1583, -1000, -1000, 1582, 20326, -1000, 57697, 1442,
	1442, -132, -133, -1000, 917, 914, 903, -1000, -1000, -1000,
	902, -1000, 742, -57, 20326, -1000, -1000, 1401, 24289, -141,
	24289, -146, 283, 79, 24289, -1000, -1000, 48660, -148, 48660,
	-1000, 711, 30160, -1000, 2220, -1000, 2207, 48660, 2320, -1000,
	-1000, -1000, 1768, 419, -1000, -149, -1000, -1000, 791, 418,
	414, -1000, -1000, -112, -1000, 691, 686, -1000, -1000, -1000,
	10739, 1011, -1000, 393, 393, 393, -1000, 280, -1000, -1000,
	1433, 2432, -1000, 53170, 53099, 5554, 21556, 57697, -151, -1000,
	48660, 57182, -166, -1000, -1000, -1000, 37465, 581, -1000, -1000,
	1811, -1000, -1000, -1000, 48660, 1604, -1000, -1000, 20326, 5919,
	413, 20326, -1000, 1782, 412, -1000, -1000, -1000, -1000, -1000,
	-1000, 2403, -1000, 1208, -1000, -1000, 57182, 2390, -1000, -1000,
	411, 410, 48660, 48660, 406, 404, 20326, 57182, 48660, -154,
	1315, -156, -1000, 1782, -1000, -157, 845, -1000, 403, 30160,
	-1000, 1678, 1006, -164, 48660, 1186, -1000, -1000, -1000, 29775,
	29775, 1622, -1000, 48660, -1000, 48660, -1000, 48660, -1000, 1201,
	20326, -1000, -1000, 5554, -165, -1000, -147, -1000, 2503, -1000,
	-1000, -1000, -1000, 2104, 53028, 1656, 48660, 52672, 1360, 48660,
	2339, 48660, 842, 10739, 1385, 1385, -1000, -1000, 20326, 20326,
	57182, 402, -1000, 1782, 1315, 1360, 1315, 398, 24289, -1000,
	1693, 1082, -1000, 808, -1000, -1000, -170, -172, -1000, -173,
	-178, -1000, 279, 21146, 21146, -166, -1000, 48660, 396, 2076,
	-1000, 1512, 1402, 275, 875, -1000, -180, -1000, 395, -1000,
	20326, -1000, -181, -1000, 834, -186, -1000, 825, -187, -193,
	48660, 1360, 1782, -1000, 1782, 24289, -201, -1000, 26224, -1000,
	791, 791, -1000, -1000, -1000, -1000, -1000, 21951, 1486, 1168,
	55383, -1000, -1000, -1000, 48660, -1000, 1538, 1536, 1139, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1656, 57182, -1000, 1385,
	1807, -1000, 1385, 1874, -1000, -1000, -202, -1000, 1360, 1360,
	-204, -1000, -195, -1000, -1000, 2528, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2237, -1000, 866, 1689, 1689, 1512, -1000,
	394, -1000, 392, 1426, -1000, -1000, 1315, -1000, 20736, -1000,
	2539, -1000, -1000, 1725, -1000, -1000, 20326, 20326, -1000, -1000,
	-1000, 1782, -1000, -1000, -1000, -1000, -210, -213, 1360, 1360,
	901, -1000, -1000, 391, 20326, -230, 1360, -1000,
}
var sqlPgo = [...]int{

	0, 3141, 3137, 1985, 3133, 2521, 3130, 3128, 3125, 3123,
	3118, 2470, 3117, 3116, 3113, 3110, 3109, 3108, 3107, 3100,
	3096, 3094, 3093, 3080, 3079, 3078, 3071, 3064, 3063, 3062,
	3059, 3057, 3056, 3053, 2454, 3051, 2444, 3050, 3047, 3044,
	3040, 3039, 3037, 3036, 3035, 21, 3033, 3029, 3028, 3026,
	3018, 2431, 3006, 3005, 2419, 2995, 2992, 2412, 2986, 2984,
	2392, 2983, 2381, 2982, 2977, 2367, 2975, 2974, 2350, 2973,
	2288, 2972, 2968, 2284, 2967, 98, 108, 2966, 2271, 2965,
	2962, 2254, 2252, 2223, 2961, 2210, 2960, 2957, 2207, 2188,
	2956, 237, 2948, 2945, 2940, 2938, 2127, 2104, 2936, 2934,
	2931, 166, 2929, 2083, 2926, 2925, 2919, 2917, 2913, 2909,
	2906, 2902, 2900, 2899, 2897, 2896, 2894, 2893, 2891, 2890,
	2888, 2885, 2884, 2883, 2880, 2879, 2877, 2875, 181, 110,
	2874, 2872, 2050, 1964, 2871, 2869, 31, 44, 23, 65,
	164, 165, 4695, 153, 2867, 2865, 2862, 2859, 2856, 28,
	115, 118, 113, 111, 362, 2851, 2850, 56, 29, 32,
	20, 81, 2849, 2848, 2847, 1822, 82, 2846, 2844, 160,
	174, 2842, 754, 2840, 26, 99, 49, 93, 45, 55,
	2839, 105, 14, 2838, 120, 119, 2836, 73, 36, 24,
	4436, 88, 183, 57, 62, 176, 156, 151, 147, 127,
	208, 2835, 172, 78, 138, 2834, 2829, 2827, 58, 136,
	7, 6, 142, 4, 2826, 11, 2823, 9, 2820, 2819,
	2817, 2816, 34, 114, 42, 48, 2815, 85, 219, 125,
	2810, 162, 2808, 74, 2807, 173, 139, 2, 148, 2806,
	75, 17, 77, 2804, 2803, 96, 154, 2802, 33, 116,
	80, 97, 182, 144, 87, 149, 155, 2800, 2799, 2798,
	135, 2797, 133, 126, 2796, 2795, 25, 39, 157, 35,
	2793, 2792, 106, 2791, 141, 2789, 2786, 2785, 185, 112,
	124, 8, 51, 86, 10, 146, 103, 61, 71, 2782,
	3245, 1829, 1315, 2781, 100, 72, 30, 59, 102, 159,
	37, 2780, 2779, 1437, 2776, 2774, 2773, 117, 2772, 2768,
	2767, 90, 43, 95, 2759, 109, 40, 161, 177, 54,
	145, 134, 171, 121, 2758, 129, 104, 2755, 137, 170,
	50, 2754, 324, 2752, 131, 2749, 2740, 2735, 2733, 184,
	2730, 2723, 2720, 259, 2719, 101, 2712, 130, 123, 132,
	94, 107, 158, 150, 506, 2702, 140, 47, 2700, 555,
	19, 0, 3759, 3633, 2699, 143, 89, 2698, 2694, 2688,
	2683, 27, 12, 3, 5, 15, 13, 286, 226, 2682,
	2673, 128, 79, 91, 2666, 178, 169, 2665, 2663, 2661,
	38, 2660, 18, 2659, 16, 2656, 2655, 22, 1, 2654,
	2653, 163, 2651, 2650, 2647, 2450, 2645, 175, 2641, 2640,
	83, 2639, 2638, 2631, 2629, 2266, 2628, 2626, 52, 68,
	122,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 407, 407,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 406, 406, 153, 153, 152, 148,
	148, 409, 409, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 77,
	77, 359, 359, 360, 360, 135, 135, 136, 136, 136,
	136, 137, 137, 138, 138, 138, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 129, 129, 49, 49, 49, 49, 49, 49,
	49, 49, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 60, 60, 50,
	327, 327, 62, 62, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 71, 71, 71, 72,
	72, 72, 69, 69, 69, 67, 67, 67, 66, 66,
	66, 70, 70, 70, 68, 68, 68, 236, 236, 73,
	73, 73, 73, 73, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 329, 329,
	74, 74, 301, 301, 78, 78, 261, 261, 79, 79,
	79, 79, 79, 80, 80, 80, 80, 90, 90, 90,
	90, 405, 405, 229, 229, 169, 169, 169, 169, 85,
	85, 85, 85, 86, 86, 86, 87, 87, 134, 134,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	40, 40, 40, 41, 41, 42, 42, 43, 43, 44,
	44, 45, 45, 45, 45, 45, 97, 97, 97, 99,
	96, 96, 96, 98, 98, 98, 98, 100, 100, 101,
	101, 101, 101, 101, 101, 102, 102, 353, 353, 239,
	239, 351, 351, 352, 352, 206, 206, 206, 206, 206,
	207, 207, 207, 358, 358, 358, 358, 358, 358, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 119, 119, 119, 128,
	128, 128, 128, 128, 128, 128, 121, 121, 121, 112,
	112, 104, 104, 104, 104, 108, 108, 108, 108, 108,
	105, 105, 109, 109, 111, 111, 113, 113, 113, 113,
	113, 113, 106, 106, 106, 106, 115, 115, 115, 115,
	114, 114, 124, 124, 124, 124, 124, 124, 314, 314,
	120, 120, 120, 120, 123, 123, 123, 123, 118, 118,
	118, 122, 122, 125, 125, 125, 125, 107, 107, 107,
	412, 412, 412, 126, 126, 117, 117, 127, 127, 127,
	127, 127, 127, 127, 116, 116, 116, 408, 408, 110,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 402,
	402, 404, 404, 83, 83, 83, 55, 55, 56, 56,
	208, 208, 209, 209, 283, 283, 283, 283, 210, 210,
	155, 155, 155, 213, 214, 214, 211, 211, 212, 212,
	212, 216, 216, 215, 218, 218, 217, 282, 369, 369,
	370, 370, 370, 370, 370, 370, 370, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 367, 367, 367,
	368, 365, 365, 366, 366, 366, 366, 413, 413, 281,
	281, 222, 222, 372, 372, 372, 372, 373, 373, 373,
	373, 373, 376, 375, 374, 374, 374, 374, 374, 310,
	310, 310, 59, 59, 59, 250, 250, 249, 249, 251,
	251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 131, 131, 57, 57, 57, 161, 161, 54,
	54, 54, 58, 58, 61, 61, 61, 61, 61, 61,
	53, 53, 53, 53, 53, 266, 266, 266, 265, 265,
	227, 227, 316, 316, 316, 173, 173, 174, 174, 149,
	149, 149, 21, 23, 23, 16, 16, 16, 16, 16,
	16, 31, 31, 32, 32, 27, 27, 410, 410, 411,
	411, 84, 84, 88, 88, 88, 94, 94, 130, 130,
	130, 130, 130, 130, 130, 35, 35, 35, 35, 47,
	47, 47, 47, 92, 416, 416, 416, 93, 93, 415,
	415, 168, 168, 168, 168, 170, 170, 278, 278, 279,
	279, 417, 417, 280, 280, 280, 163, 162, 164, 164,
	52, 52, 52, 157, 157, 158, 158, 159, 159, 160,
	160, 418, 418, 81, 81, 81, 133, 133, 202, 202,
	274, 274, 274, 223, 223, 179, 179, 277, 277, 275,
	275, 275, 248, 248, 248, 132, 132, 232, 232, 241,
	241, 242, 242, 324, 324, 243, 91, 91, 142, 142,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 143,
	143, 143, 143, 143, 143, 143, 146, 146, 146, 146,
	147, 147, 147, 145, 145, 383, 383, 383, 385, 385,
	386, 382, 382, 384, 384, 414, 414, 252, 252, 252,
	220, 221, 219, 219, 419, 419, 225, 225, 224, 226,
	226, 315, 315, 315, 246, 246, 246, 246, 269, 269,
	267, 267, 268, 268, 270, 270, 271, 271, 271, 272,
	272, 273, 273, 245, 245, 297, 297, 144, 144, 144,
	231, 231, 231, 233, 233, 288, 288, 288, 289, 289,
	287, 287, 287, 287, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 318, 318, 234, 234, 319, 276, 276,
	399, 399, 399, 400, 400, 313, 313, 320, 320, 320,
	320, 320, 320, 311, 311, 312, 312, 325, 326, 326,
	255, 255, 255, 255, 253, 253, 254, 254, 321, 321,
	321, 321, 247, 247, 322, 322, 322, 284, 284, 330,
	330, 330, 330, 345, 230, 230, 230, 340, 340, 331,
	331, 331, 331, 331, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 334, 334, 334, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 344, 344, 344,
	344, 344, 335, 335, 341, 342, 336, 337, 343, 343,
	343, 343, 347, 347, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 339, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 263, 263,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 292, 292, 292, 292,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 377, 377, 377, 377, 377, 377, 377,
	377, 380, 380, 381, 381, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 387, 387, 388, 388, 390, 390,
	391, 391, 392, 393, 393, 393, 394, 395, 395, 389,
	389, 396, 396, 396, 397, 397, 398, 398, 398, 398,
	398, 303, 303, 309, 309, 309, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 171, 171, 171, 171, 171, 238, 238, 237,
	237, 300, 300, 298, 298, 302, 302, 256, 256, 346,
	346, 346, 346, 346, 346, 346, 257, 257, 257, 264,
	258, 258, 259, 259, 259, 259, 259, 294, 295, 260,
	260, 260, 296, 296, 304, 308, 308, 307, 306, 306,
	305, 305, 285, 285, 286, 286, 244, 244, 420, 420,
	240, 240, 323, 323, 323, 323, 204, 204, 235, 235,
	203, 203, 197, 197, 198, 198, 198, 198, 228, 228,
	348, 348, 348, 349, 350, 299, 189, 188, 176, 177,
	187, 186, 185, 175, 178, 182, 183, 184, 180, 181,
	193, 192, 191, 190, 328, 199, 199, 200, 200, 200,
	201, 201, 201, 201, 172, 172, 194, 194, 195, 196,
	196, 165, 165, 165, 166, 166, 167, 167, 357, 357,
	355, 355, 355, 356, 356, 356, 356, 354, 354, 354,
	354, 354, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 1, 2, 1, 2, 7, 3, 6,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 6, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 3,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 4, 7, 2, 6, 4, 7,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 3,
	1, 1, 3, 5, 4, 6, 4, 3, 0, 1,
	3, 2, 4, 2, 4, 1, 6, 6, 3, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 3, 1,
	3, 2, 1, 3, 1, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 3, 4, 4,
	4, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 2, 3, 3, 3,
	2, 3, 5, 4, 6, 4, 6, 4, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 3, 4, 3,
	1, 1, 1, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 6, 7, 6, 5, 3, 4,
	13, 16, 9, 12, 4, 2, 2, 0, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 4, 2, 5,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 2, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 2,
	2, 1, 5, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -384, 104, -65, -68, -70, 109, 117,
	122, 123, 147, 156, 258, 265, 287, 289, 291, 300,
	-42, -41, 118, -140, -142, 285, -86, -87, -96, -97,
	-98, -99, -134, 318, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 321, -35,
	-47, -93, -92, 365, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -383,
	-66, -67, -69, -71, -72, -143, -141, 421, 286, 375,
	37, 330, 67, 112, 295, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 392, 400, -146, -144,
	-145, -147, 307, 383, 343, 425, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 2, 343, 386,
	308, 376, 93, 169, 270, 256, -401, 2, 4, -363,
	-361, -198, -197, 343, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 116, 124, 125, 136,
	149, 151, 159, 160, 161, 176, 182, 184, 164, 205,
	234, 235, 248, 252, 262, 264, 273, 297, 324, 339,
	354, 355, 356, 362, 363, 383, 384, 388, 395, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 113, 114, 117, 118, 121,
	119, 349, 351, 120, 122, 123, 133, 134, 135, 137,
	138, 140, 142, 146, 148, 153, 154, 155, 156, 157,
	158, 170, 165, 171, 175, 178, 177, 179, 180, 181,
	172, 186, 189, 190, 191, 193, 194, 197, 198, 199,
	202, 201, 204, 207, 208, 211, 212, 215, 217, 220,
	221, 224, 222, 223, 226, 227, 229, 228, 236, 237,
	239, 240, 243, 244, 247, 250, 253, 254, 255, 256,
	257, 258, 259, 261, 263, 265, 267, 268, 269, 270,
	271, 272, 274, 275, 277, 278, 279, 280, 281, 285,
	283, 284, 286, 287, 288, 289, 291, 293, 294, 295,
	296, 298, 319, 320, 332, 300, 301, 302, 303, 304,
	305, 306, 310, 314, 311, 312, 313, 308, 309, 315,
	316, 318, 321, 323, 325, 326, 329, 330, 331, 333,
	336, 337, 338, 334, 335, 328, 341, 342, 344, 345,
	346, 347, 348, 350, 352, 357, 360, 361, 365, 366,
	368, 369, 372, 373, 374, 379, 375, 377, 380, 381,
	382, 387, 386, 393, 394, 396, 397, 398, -196, -165,
	414, -195, 424, 424, 424, 2, 190, 191, 269, 268,
	315, 316, -190, -194, -195, -196, -165, 4, -361, -363,
	93, 241, 424, 424, 424, 2, 343, 331, 55, 308,
	376, 293, 386, 366, 107, -265, 186, 93, 371, -165,
	265, 24, 2, 102, 175, 374, 373, 24, 261, 309,
	345, 347, 2, 424, 424, 2, 386, 308, 343, 169,
	93, 376, 293, -184, 2, -165, -76, 2, 421, 27,
	-75, -5, -51, -60, -65, -78, -73, -11, -34, -36,
	-57, -54, -62, -68, -70, -82, -81, -83, -85, -89,
	-88, -91, -96, -97, -103, -132, -133, 80, 25, 109,
	318, 118, 185, 2, -405, -229, 2, 24, -169, -165,
	80, 147, 307, -139, 343, 2, -165, 190, 191, 2,
	-184, 2, -401, 2, 190, 191, 2, -405, -229, 23,
	2, -165, 2, 304, 321, -170, 2, 300, -165, 424,
	424, 424, 424, 424, 424, 212, 60, 297, 315, -101,
	361, -100, 354, 302, -102, -353, 2, 224, -165, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 2, -128, 315, 331, 154, 36, 60, 24, 65,
	94, 148, 169, 170, 198, 75, 76, 268, 212, 191,
	-314, 316, 344, 303, 341, 361, 80, 377, 294, -408,
	119, 4, 93, 224, 317, 354, 69, 348, 349, 424,
	424, 424, -414, 2, 343, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, -141, -143, -142, 424,
	424, 424, 424, 424, -224, -225, 370, 183, 115, 246,
	-140, -142, 2, -383, -128, 315, 2, 60, 24, -351,
	2, -290, 241, -292, 412, 413, 407, 230, 399, -303,
	99, 219, 218, -293, -304, 116, 297, 421, 7, 8,
	5, 6, -172, -332, -299, -339, 364, 126, 233, -201,
	427, 9, -380, -142, 31, 53, -355, -200, -333, -342,
	-337, -338, -340, 42, 49, 48, 352, 223, 310, 311,
	312, 313, 325, 379, 165, 40, 239, 240, 177, 4,
	184, -199, -165, -377, -378, -361, -362, 176, 178, 179,
	180, 181, 182, 324, 39, 273, 137, 138, 136, 108,
	98, 97, 235, 44, 43, 41, -343, 95, 354, 355,
	356, 357, 193, 194, 63, 85, 86, 84, 89, 88,
	90, 87, 317, 376, 54, 30, 159, 160, 164, 234,
	161, 61, -379, 335, 81, 127, 145, 174, 162, 187,
	188, 192, 206, 209, 225, 232, 249, 251, 292, 322,
	57, 56, 384, 124, 125, 149, 205, 252, 262, 339,
	362, 363, -415, 2, 361, 361, 2, -415, 2, -415,
	2, -168, 2, 361, 358, -416, 361, 395, -385, 274,
	-386, -184, -385, 424, 424, 426, 424, -219, -220, -221,
	2, 24, 105, 421, 2, -317, 2, 419, -321, -142,
	200, -320, 421, -318, -190, 242, -381, 298, -377, -378,
	-172, -165, -200, 4, 219, 218, -3, 2, -321, 159,
	-190, 2, -321, 159, 2, -191, 159, -321, -194, 2,
	-359, 159, -357, 9, -356, 5, 4, -361, -363, -362,
	63, 2, -175, -165, 2, -203, 159, -190, -187, -354,
	4, -361, -363, -362, -364, 24, 26, 27, 28, 29,
	31, 32, 33, 34, 45, 53, 54, 59, 62, 64,
	75, 80, 84, 85, 87, 86, 88, 89, 90, 99,
	101, 103, 105, 106, 110, 112, 115, 126, 128, 141,
	143, 144, 147, 150, 152, 163, 169, 173, 183, 185,
	200, 203, 210, 213, 214, 230, 231, 233, 238, 241,
	242, 245, 246, 260, 266, 276, 290, 307, 317, 327,
	340, 343, 353, 358, 359, 364, 370, 371, 376, 378,
	385, 389, 390, 391, 392, -188, -354, 358, 426, -235,
	-197, -198, -228, -165, 423, -290, 2, -91, 2, -290,
	159, 2, -91, 159, 2, -290, 159, 2, -91, 159,
	2, -222, 421, 423, 343, 64, 2, -190, 159, -180,
	2, -165, 141, -191, 159, 2, -194, -359, 159, 2,
	-359, 159, 2, -193, 2, -190, -192, -194, -192, 169,
	169, -175, 159, 2, -165, 24, 144, 2, 185, 2,
	185, 2, -322, 2, -321, -236, 159, 2, -190, -236,
	159, 2, -236, 159, 2, -204, 159, 2, -203, -175,
	159, 2, -360, 159, 2, -359, -360, 159, 2, -261,
	421, -329, 2, -328, -356, 383, 421, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 315, -139, 241, 358, 426, 421,
	-190, -290, -91, -301, 421, 144, -290, -91, 241, 144,
	243, 2, 93, 343, 398, 24, -165, 2, 319, 2,
	421, -101, 58, 361, -279, 2, -280, -162, -163, -164,
	189, 267, 272, 398, -351, 358, 404, 144, -351, -239,
	423, -128, 2, 141, 378, 2, 7, 2, -359, 271,
	133, 2, 319, 2, 268, 316, 60, 144, 2, 2,
	-403, 2, 241, 144, 2, 144, 2, 144, 2, 144,
	2, 144, 2, 2, 268, 316, 2, 360, 199, 120,
	2, 144, 2, 144, 2, 5, 2, 189, 267, 332,
	2, -190, -412, 2, 343, 386, 308, 2, 2, 144,
	2, 144, 398, 2, -247, -321, -224, -225, -246, -267,
	-268, 210, 128, 238, -252, 24, 105, -252, -252, 47,
	422, 422, -128, 319, 2, 10, 11, 62, 35, 412,
	413, 414, 415, 139, 416, 417, 410, 411, 409, 402,
	403, 406, 195, 196, 77, 405, 404, 70, 216, 299,
	129, 130, 131, 132, 282, 166, 167, 168, 13, 14,
	15, 28, 245, 209, 399, 162, 322, 407, 16, 17,
	18, 187, 188, 232, 38, 163, -171, -205, -290, -290,
	-290, -290, -290, 251, -244, -285, 419, -142, 421, 421,
	-142, -290, -303, -237, 421, 421, 5, 421, 5, -350,
	7, -142, -298, 419, -305, -290, 423, -387, 393, -335,
	421, 264, -334, 421, -334, -334, -347, 387, 394, 400,
	394, 400, 141, 421, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, -347, -347, 421, 421,
	421, 421, 421, 421, 421, 421, 421, -278, -279, -278,
	358, -170, 426, -385, -222, 421, -240, -323, -290, 414,
	-240, -240, 241, -237, -290, 81, -255, 192, 225, 145,
	206, 292, 174, -350, -76, -287, 427, -313, 400, -142,
	-318, -165, -142, -320, 421, -317, -313, 414, -190, 421,
	144, 421, 423, -151, 283, -150, 22, 25, 109, 381,
	121, -212, 171, 256, 116, 328, -407, 118, 301, 350,
	351, 283, 116, -249, -251, 32, 91, 227, 253, 50,
	157, 218, 219, 330, 116, 283, 392, 116, 118, 283,
	-153, 328, -407, 118, 301, 283, -152, -212, 116, 427,
	118, 236, -359, -235, 426, 426, -354, 414, 116, 116,
	116, 116, 144, -228, -354, -190, -199, -165, -200, 421,
	-222, 230, 241, -401, -250, -249, 230, -161, -382, 392,
	230, 230, -222, 32, 421, 2, -177, 159, 2, -166,
	-165, -177, 159, -382, 230, -322, -202, -190, -202, 318,
	-184, 32, -154, 426, 52, 288, 116, -154, 116, -154,
	116, -154, 426, 116, -154, 116, 426, 116, 116, -237,
	422, 426, -329, -359, -401, -228, -169, -359, 144, 80,
	421, 32, -300, -330, -331, -344, -332, -341, -336, -339,
	278, 279, 277, 281, 280, 42, 49, 48, 352, 223,
	310, 311, 312, 313, 325, 379, 165, 40, 239, 240,
	177, 4, 41, -343, 184, 176, 178, 179, 180, 181,
	182, 324, 39, 273, 137, 138, 136, 108, 98, 97,
	235, 44, 43, 95, 354, 355, 356, 357, 193, 194,
	57, 56, 384, 335, -360, -401, -228, 141, -175, 2,
	-190, 2, 71, 72, 398, -353, -237, 32, -279, 2,
	-417, 426, 208, -207, 215, 229, 153, 242, 396, -358,
	5, 4, -299, -310, 99, 212, -339, 8, 413, -348,
	7, 412, -352, -351, -352, 83, 423, -354, 343, 193,
	-359, -359, -353, 24, 320, 2, -190, -404, 141, -402,
	293, -401, -190, -190, -190, -190, -190, 141, 2, 360,
	2, 360, 2, -165, -165, 208, -190, 343, 169, 343,
	-154, 426, -246, -268, -267, -270, -290, 24, -273, 135,
	226, -290, -292, -141, -141, -141, -226, -315, -290, 266,
	169, -353, -345, -330, -330, -189, -354, 354, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, 209, 162, 322, 38, 163, -290, 358,
	-290, -290, -290, -290, 222, 230, 233, 364, 126, 372,
	105, 236, -420, 340, 34, -296, -142, 421, -309, 29,
	327, 24, -303, 297, 421, -285, -290, -286, -238, -237,
	422, 32, 426, -237, 422, 385, 24, 105, 414, 2,
	7, -262, 397, 221, 96, 155, 220, -263, 306, -238,
	-302, -298, -308, -307, 389, -354, 414, -388, 134, 150,
	7, -350, 354, 354, 354, 354, 421, 422, 2, 422,
	2, 422, 2, 422, 2, 422, 2, -290, -290, -290,
	-290, -290, -290, -290, -237, -256, 2, -346, -237, 4,
	397, 221, 96, 155, 220, 306, -256, 2, -237, 2,
	-237, 2, -257, 2, -290, -237, -258, -291, -292, 412,
	413, 407, -303, -259, 2, -290, -238, -290, 45, 203,
	359, -260, -290, 144, -237, -170, -386, 32, -237, -231,
	426, 144, 32, 4, -231, -231, 421, 422, 426, 192,
	192, -317, -255, 192, -253, 249, -253, -253, -399, 421,
	420, -313, -176, 419, 428, -354, -312, -311, 32, -184,
	247, -313, -313, 423, 422, -312, -190, 421, -237, -354,
	426, 358, -410, 75, 64, -282, 159, 64, -365, -178,
	75, -366, -165, 59, 371, 266, 143, -410, 75, -410,
	75, 75, 318, 331, 47, -321, 35, -91, 204, 73,
	144, 358, -321, -251, -330, 91, 218, 219, 47, -349,
	-348, 413, -349, 47, -349, -349, -349, 392, -191, -321,
	358, 257, -359, 73, 358, 426, 35, -91, 204, 73,
	144, 358, -203, -176, 73, 343, -326, -325, 401, -197,
	-165, 423, -290, -91, -290, -91, 333, 422, 423, 187,
	187, -208, -209, -165, -283, -282, -367, -368, -365, 186,
	169, 371, 127, 32, 116, -228, -327, 185, 116, 257,
	116, 116, 32, 421, 113, 270, 2, 241, 230, 241,
	230, -157, 346, 116, -284, 390, -274, -91, 421, 99,
	32, -274, -241, -242, -324, -243, -178, 421, -184, -190,
	-236, -236, -236, -203, -204, -175, -359, -360, -360, 422,
	-76, -328, 422, -138, 392, 358, 392, 422, -139, 378,
	-209, -75, 25, 80, 109, 422, 426, -230, 31, 419,
	-262, 421, -347, 421, -138, -325, 144, -229, -326, -326,
	141, 72, 404, 358, 422, 361, -280, -206, 272, 326,
	284, 314, 8, 7, 7, 426, -354, -190, 141, -228,
	-228, 315, 141, 141, 423, -190, -203, -190, -321, -271,
	-348, 421, -272, 297, 298, 426, -149, 33, 103, 197,
	-190, 398, 114, -290, -290, 358, -420, 340, -296, 114,
	-290, 222, 233, 364, 126, 372, 105, 236, 144, 421,
	-291, -291, -237, -290, 420, 430, 422, 423, -228, -290,
	-419, 426, -224, -290, -237, -237, 422, 422, 358, 358,
	358, 358, 421, 420, 420, 426, -306, -307, 110, -290,
	423, -393, 250, 421, 421, 422, 422, 426, 398, 398,
	398, 398, -290, 32, 426, 426, 426, 422, 426, 426,
	426, 422, 422, 144, 422, 422, 422, 422, -264, 260,
	422, 10, 11, 412, 413, 414, 415, 139, 416, 417,
	410, 411, 409, 402, 403, 404, 70, 216, 299, 13,
	14, 15, 187, 163, -291, -291, -291, 422, -294, -295,
	144, 141, 32, -260, -260, -260, 422, 144, -237, 421,
	422, -284, -323, -233, 2, -317, -186, -354, -284, -284,
	-237, -290, -317, -317, -254, 378, 241, 192, -317, -311,
	422, -400, -350, -313, -312, -350, -289, -288, 142, 228,
	-184, -222, -312, -312, -354, -313, 422, -234, -319, -381,
	-419, 423, -150, -190, -178, -185, -165, 230, -282, 159,
	-156, 230, -330, -185, 421, 421, 197, 197, -178, -185,
	159, -178, 159, -185, -185, -406, 272, 237, -290, 211,
	270, 231, -151, 283, -91, -91, 398, 421, -193, 283,
	-199, -349, -349, -249, 283, -191, -359, 392, 398, -175,
	-152, -91, -91, 398, 421, -176, -153, 283, 398, -190,
	-135, 158, 236, 414, -354, -129, 5, 233, -129, 422,
	426, 169, -177, 169, -183, -166, -91, -190, 144, -138,
	-359, -191, -359, -359, -359, -91, 2, 421, 2, -190,
	116, -190, 116, -158, 111, -418, 404, -175, -225, -224,
	-290, -248, -277, 290, 241, -223, -179, -178, 383, -184,
	-248, -232, 426, 144, 404, 423, -223, -154, -154, -154,
	-154, -154, -76, 144, -137, 244, -136, -165, 5, -228,
	23, -138, 421, -359, 422, -330, 419, 420, 7, 7,
	421, -350, -138, -228, 144, -43, 392, 270, 93, 343,
	256, 169, -351, -351, -279, 369, 68, 272, -351, 343,
	315, 315, -165, -272, -290, -315, -190, 427, -290, -290,
	114, 114, -290, -291, -291, -290, 114, 144, 421, -290,
	-300, 28, 28, 422, -286, -290, 414, -354, 422, 422,
	422, 385, -419, -419, -419, 5, 221, 155, 220, -263,
	220, -263, -263, 7, -298, 112, -290, 353, -354, 414,
	-394, -181, 421, -165, 390, -224, -350, 422, -345, -330,
	-290, -290, -290, -290, -290, -290, -294, -290, -345, -330,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, 105,
	230, 236, -291, -295, -294, -290, -290, -330, 422, 422,
	422, -237, -75, -245, 150, -326, 426, -245, -245, 422,
	-254, 421, -290, -317, 420, 422, 426, -312, 420, 426,
	429, 404, -222, 423, -311, 422, 426, -276, 32, 422,
	-354, 358, 358, 116, 230, 380, -369, -366, -290, -227,
	-316, -178, -381, 421, -165, 421, 421, -148, 109, 318,
	-411, 116, -154, 116, -154, 396, 421, 421, 358, -410,
	75, -290, -237, 358, 358, 257, -290, -290, -237, 358,
	-290, 118, -138, 144, 342, -210, 172, -283, -166, 421,
	-177, 421, 421, -222, -190, -250, -161, 2, -266, 378,
	-176, 421, -176, -159, 202, -418, -357, -382, -269, -267,
	-248, -240, 231, 74, 422, 426, 423, -284, -242, -233,
	-290, 2, 422, -91, 426, 421, 404, 404, 243, -359,
	-139, -139, 7, 420, 422, -350, 422, -228, 244, -187,
	-175, -190, -188, -203, -190, 242, 422, -149, -176, -290,
	-290, 114, 28, 28, -290, -290, -300, 422, -290, -290,
	420, 5, -290, 422, 422, 422, 422, -290, 423, -395,
	-165, -290, 422, 422, 422, 422, 426, 426, 422, 422,
	422, 422, -295, 144, 105, 236, 421, 422, 422, -297,
	152, 47, -317, -297, -297, -228, -287, -350, -288, -176,
	419, -354, -319, 421, 423, -178, -185, -282, 116, -370,
	75, -371, 62, 127, 80, 230, 233, 371, 266, 59,
	99, 276, 32, 422, 422, 426, -174, 62, -174, -290,
	-227, -228, 230, 337, 99, 230, 99, 92, 366, -178,
	-185, -228, -228, -190, -178, -185, 422, -193, -191, -359,
	422, -176, 73, -360, 354, -211, -212, 163, 421, -227,
	421, -228, -208, 32, 421, 146, 46, 241, -227, 241,
	-160, 201, -418, -357, -157, -248, -275, 421, 241, -91,
	-179, 2, -225, 404, -136, -137, -359, -359, 422, 92,
	92, 420, 422, -44, -45, 169, 75, 259, -214, -213,
	256, 236, -149, -290, -290, -290, 422, -419, -354, 414,
	-389, 256, 422, -290, -290, -291, 144, 421, -300, -390,
	391, -290, -237, -390, -390, 422, -313, -350, 2, -282,
	-185, -189, -182, -165, 127, 159, 233, 197, 421, -291,
	-190, 421, 2, -281, -413, 79, 338, -316, -149, -189,
	-149, 422, 422, 422, 233, 233, -290, -330, -154, -154,
	422, 422, 358, 358, 358, 358, 398, -290, 254, -227,
	422, -227, 422, 422, -91, -227, -190, 422, -190, -418,
	-357, -158, 106, -228, 75, -269, -296, 422, -138, 421,
	421, 426, 24, 421, 24, 421, -188, 343, 422, -225,
	47, 422, 422, -291, -300, 422, -391, -392, -181, -312,
	420, -371, -182, 230, -290, -167, 421, -290, -210, 421,
	-174, 276, -173, 62, 421, 421, -178, -185, 421, 421,
	-290, -190, 422, -281, 422, -210, 422, -266, 421, -357,
	-159, 373, 231, 422, -185, -248, -360, -360, -45, -228,
	-228, -190, -396, 270, 298, -237, 422, 426, 32, 116,
	422, -372, 217, -165, 422, -211, -228, -149, -190, -409,
	378, -189, -216, -215, -213, -218, -217, -213, -237, -237,
	421, -210, -281, -211, -281, 421, -227, -160, 318, -284,
	422, 422, 422, 422, 422, -397, -398, 38, 368, 83,
	-290, -397, -392, -394, 127, -373, -376, -375, 241, 145,
	255, 323, 422, 337, 388, 422, -222, -290, 422, 426,
	383, 422, 426, 383, 422, 422, -228, -211, -210, -210,
	-227, 422, -241, -138, -138, -398, 263, 140, 297, 263,
	140, -182, -375, 241, -376, 241, 373, 102, -372, -215,
	163, -217, 144, 422, -211, -211, 422, -284, 28, -374,
	227, 288, 52, 318, -374, -373, 421, 421, -155, 52,
	288, -281, -398, 21, 233, 99, -237, -237, -210, 422,
	422, -211, -211, 358, 421, -237, 422, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 250, 251, 253, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	390, 391, 0, 866, -2, 0, 369, 371, 380, 382,
	384, 386, 387, 0, 449, 451, 453, 455, 457, 459,
	461, 462, 464, 466, 468, 470, 472, 474, 476, 478,
	480, 482, 484, 486, 488, 490, 492, 494, -2, 778,
	780, 782, 784, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 223, 225, 227, 229, 232, 233, 235, 903,
	256, 258, 260, 262, 264, -2, 917, 0, 0, 0,
	-2, 0, -2, -2, -2, 796, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 879, 881,
	883, 885, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1548, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
	1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573,
	1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
	1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
	1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623,
	1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633,
	1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643,
	1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1444, 1488,
	1447, 1442, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 672, 1473, 1486, 1487, 1488, 1491, 1492, 1493,
	1548, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 348,
	1639, 350, 352, 0, 0, 0, 0, 244, 245, 246,
	247, 248, 249, 252, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 347, 345, 1467, 289, 290, 0, 0,
	330, 331, 332, 333, 334, 335, 337, 294, 296, 298,
	299, 301, 303, 305, 307, 309, 311, 313, 315, 316,
	318, 320, 321, 323, 325, 326, 328, 739, 0, 0,
	0, 0, 0, 170, 0, 362, 356, 361, 363, 365,
	366, 367, 368, 0, 0, 168, 163, 0, 0, 605,
	343, 341, 0, 162, 0, 0, 775, 0, 362, 1515,
	360, 776, 777, 0, 0, 771, 772, 1669, 806, 370,
	372, 381, 383, 385, 388, -2, -2, 1764, -2, 411,
	-2, 419, 1767, 1671, 422, 0, 424, -2, 427, 450,
	452, 454, 456, 458, 460, 463, 465, 467, 469, 471,
	473, 475, 477, 479, 481, 483, 485, 487, 489, 491,
	493, 495, 496, 0, 0, 0, 0, 0, 500, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 499, 501, 502, 503, 0, 548, 587, 588, 779,
	781, 783, 0, 713, 905, 63, 65, 67, 69, 71,
	224, 226, 228, 230, 234, 236, -2, 877, 878, 257,
	259, 261, 263, 265, -2, 0, 909, 909, 909, 0,
	0, 878, 876, 0, 373, 0, 375, 0, 500, 378,
	379, 431, 432, 1120, 0, 0, 0, 0, 0, 1261,
	1204, -2, -2, 1236, 1238, 1743, 1764, 0, 1240, 1241,
	1242, 1243, 0, 0, 1246, 0, 1248, 1249, 1250, 1251,
	0, 1253, 1257, 1258, 0, 1421, 1484, -2, 1034, 1035,
	1036, 1037, 1038, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1480, 1475, 1325, 1272, -2, 1502, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1556,
	-2, -2, -2, -2, -2, -2, 1087, -2, -2, -2,
	-2, -2, -2, -2, 1776, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 0, 1732, 1749, 1750, 1755, 1757,
	1751, 1740, 1295, -2, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1789, 1790, 1791, 1792, 1793, 1794,
	-2, -2, -2, 1744, 1745, 1747, 1756, 1760, 1761, 1766,
	1770, 1771, 808, 786, 799, 808, 788, 789, 790, 791,
	792, 797, 798, 801, 0, 793, 794, 795, 895, 1646,
	898, 672, 896, 880, 882, 0, 884, 0, 0, 0,
	889, 912, 910, 0, 948, 893, 894, 904, 963, 986,
	0, 968, 0, 986, 1008, 0, 973, 1665, 1273, 1274,
	0, 1488, 1485, -2, 1787, 1788, 2, 80, 0, 1749,
	1008, 82, 0, 1749, 85, 0, 1749, 0, -2, 89,
	0, 1749, 171, 172, 1498, 1499, 1503, 1504, 1505, 1506,
	1776, 92, 0, 1463, 101, 0, 1749, 1441, 0, 1460,
	1507, 1508, 1509, 1510, 1511, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 0, 1457, 0, 0, 597,
	1438, 1443, 598, 1448, 0, 194, 195, 196, 197, 198,
	1749, 200, 201, 0, 203, 204, 1749, 206, 207, 0,
	209, 0, 0, 0, 0, 0, 231, 672, 1749, 0,
	238, 1468, 0, 696, 1749, 694, 1472, -2, 1749, 716,
	719, 1749, 721, 672, 723, 1470, 728, 1471, 0, -2,
	1495, 902, 1749, 822, 349, 351, 0, 243, 0, 835,
	0, 837, 0, 856, 1014, 155, 1749, 268, 287, 155,
	1749, 271, 155, 1749, 274, 155, 1749, 277, 1436, 155,
	1749, 280, 281, 1749, 283, 173, 284, 1749, 286, 344,
	0, 0, -2, 338, 1474, -2, 0, 336, 295, 297,
	300, 302, 304, 306, 308, 310, 312, 314, 317, 319,
	322, 324, 327, 329, -2, 0, 0, 0, 0, 0,
	0, 603, 604, 0, 0, 0, 773, 774, 0, 0,
	0, 392, 0, 0, 0, 0, 805, 389, 0, 408,
	0, 410, 1739, -2, -2, 414, 809, 813, 814, 815,
	0, 0, 0, 0, 421, 0, 0, 0, 425, 428,
	0, 497, 498, 0, 0, 508, 509, 510, 511, 1644,
	1570, 514, 0, 517, 538, 552, 0, 0, 521, 523,
	602, 525, 0, 0, 527, 0, 529, 0, 531, 0,
	533, 0, 535, 537, 539, 553, 541, 0, 0, 0,
	551, 0, 557, 0, 560, 561, 562, 0, 564, 565,
	566, 567, 0, 569, 570, -2, -2, 574, 576, 0,
	586, 0, 504, 505, 155, 1012, -2, 0, 872, 926,
	927, 0, 0, 0, 0, 907, 908, 0, 0, 0,
	868, 869, 374, 0, 377, 0, 0, 0, 0, 1356,
	1357, 1358, 1359, 1360, 1361, 1364, 1365, 1362, 1363, 1366,
	1367, 0, 0, 0, 0, 0, 1368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1369, 1370,
	1371, 0, 0, 1373, 0, 1375, 0, 0, 0, 0,
	0, 0, 1183, 1185, 1429, 0, 0, 1372, 1125, 1126,
	1127, 1162, 1163, 0, 1237, 1426, 1425, 1239, 0, 1378,
	-2, 1379, 1261, 0, 0, 0, 1245, 0, 1117, 1252,
	1454, 1259, 1260, 1378, 0, 1420, 0, 1327, 0, 1070,
	0, 1071, 1072, 0, 1073, 1074, 1085, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1089, 0, 0,
	0, 0, 0, 1401, -2, 0, 0, 785, -2, 787,
	0, 803, 0, 897, 0, 0, 952, 1430, 1434, 1435,
	952, 952, 0, 0, 1379, 0, 0, 0, 0, 1005,
	1005, 1005, 1003, 980, 0, 986, 0, 996, 0, 986,
	986, 0, -2, 968, 0, 0, 996, 1009, 1010, 0,
	0, 0, 0, 102, 768, 123, 0, 768, 768, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 119, 108,
	109, 0, 0, 86, 697, 0, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 121, 0, 146, 148, 0, 0,
	0, 0, 999, 596, 0, 0, 1489, 1446, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 1475, 1476, 611,
	0, 0, 0, 241, 692, 695, 0, 714, 0, 901,
	0, 0, 0, 0, 0, 729, 0, 1749, 734, 1459,
	1494, 0, 1749, 824, 0, 1018, 0, 838, 0, 0,
	1015, 0, 266, 0, 153, 154, 0, 269, 0, 272,
	0, 275, 0, 0, 278, 0, 0, 0, 0, 0,
	904, 0, 0, 185, 0, 354, 364, 0, 0, 0,
	0, 904, 0, 1381, 1026, 1022, 1029, 1030, 1031, 1117,
	1077, 1078, 1079, 1080, 1081, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1093, 1087, 1103, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1083, 0, 1058, 1058,
	1058, 1075, 1076, 1094, 1095, 1097, 1099, 1101, 1027, 1028,
	1093, 1093, 1090, 1091, 185, 0, 358, 0, 999, 394,
	999, 396, 0, 582, 0, 0, 0, 0, -2, 416,
	0, 811, 0, 816, 440, 441, 442, 818, 819, 420,
	443, 444, 445, 446, 447, 448, 0, 689, 0, 691,
	1450, 0, 417, 433, 418, 423, 0, 429, 0, 0,
	512, 513, 515, 516, 518, 519, 520, 524, 0, 590,
	1661, 600, 526, 528, 530, 532, 534, 0, 543, 0,
	545, 0, 547, 555, 558, 563, 568, 0, 0, 0,
	712, 0, 875, 924, 925, 930, 934, 935, 938, 941,
	942, 932, 1120, 890, 891, 892, 918, 919, 751, 0,
	0, 376, 1121, 1023, 1122, 1123, 1456, 0, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, -2, -2,
	-2, -2, -2, -2, -2, -2, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, -2, -2, -2,
	1160, 1161, -2, 1374, 1376, 0, 1429, 0, -2, 0,
	-2, -2, -2, -2, 1180, 0, 1182, 1187, 1189, 1191,
	0, 0, 0, 0, 1428, 1201, 1412, 0, 0, 1353,
	1354, 1355, 1186, 0, 0, 1427, 1424, 0, 0, 1377,
	1256, 0, 0, 915, 1263, 0, 0, 0, 0, 1270,
	0, 1455, 1104, 1105, 1106, 1107, 1108, 1109, 1118, 0,
	0, 1385, 1419, 1415, 0, 1477, 1483, 1335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1307, 0, 1388, -2,
	-2, -2, -2, -2, -2, -2, 0, 1309, 0, 1321,
	0, 1323, 0, 1311, 1379, 1398, 0, 0, 1207, 0,
	0, 0, 1261, 0, 1314, 1379, 1406, 0, 0, 0,
	0, 0, 1379, 0, 1411, 802, 899, 0, 0, 1018,
	0, 0, 0, 1433, 1018, 1018, 0, 947, 0, 0,
	0, 0, 0, 0, 1000, 1004, 1001, 1002, 0, 0,
	986, 996, 960, 0, 0, 1458, 966, 995, 0, 672,
	985, 996, 996, 0, -2, 970, 0, 0, 915, -2,
	0, 0, 0, 0, 767, 125, 1749, 0, 157, 0,
	0, 662, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 698, 699, 701, 707, 709, 0, 703,
	1453, 0, 704, 0, 706, 708, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 1440, 0, 0, 176, 998, 0, 1439,
	1449, 0, 199, 202, 205, 208, 186, 671, 0, 0,
	0, 0, 610, -2, 612, 614, 615, 616, 617, 1595,
	1495, 0, 1495, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 826, 832, 0, 917, 0, 854, 840, 0, 0,
	0, 854, 858, 859, 861, 862, 0, 0, 1016, 288,
	155, 155, 155, 1437, 155, 155, 174, 282, 285, 346,
	291, 339, 904, 0, 0, 0, 0, 185, 0, 0,
	0, 340, 0, 0, 0, 342, 0, 1019, 1021, 0,
	1032, 0, 1085, 0, 160, 185, 0, 0, 393, 398,
	0, 583, 0, 0, 409, 0, 810, 817, 0, 437,
	0, 439, 690, 1452, 1451, 0, 430, 506, 0, 601,
	599, 542, 0, 0, 0, 584, 585, 589, 1013, 0,
	936, 0, 933, 939, 940, 0, 921, 749, 750, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1202, 0,
	-2, 1181, 1184, 1188, 1190, 1192, 0, 0, 0, 0,
	0, 0, 0, 1203, 1422, 1425, 1351, 0, 0, 1380,
	0, 0, 914, 915, 915, 915, 1269, 0, 0, 0,
	0, 0, 0, 1383, 1384, 0, 0, 1416, 0, 0,
	0, 1271, 0, 0, 0, 1082, 1056, 0, 1096, 1098,
	1100, 1102, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 1294, 1306, 0, 1308, 1320, 1322, 1310, 0, 0,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1210, 1211, 1212, 1313, 1404, 1405,
	0, 0, 0, 0, 0, 0, 1319, 0, 1410, 904,
	949, 944, 1431, 999, 951, 953, 1432, 1461, 944, 944,
	0, 1380, 988, 0, 990, 0, 0, 0, 992, 0,
	981, 0, 983, 996, 965, 0, 0, 958, 0, 957,
	672, 994, 967, 971, 1477, 0, 1011, 0, 975, 978,
	0, 0, 124, 755, 0, 0, 1462, 0, 127, 1749,
	136, 0, 639, 0, 0, 0, 0, 0, 770, 137,
	1749, 155, 1749, 155, 138, 141, 0, 145, 143, 0,
	0, 630, 103, 768, 106, 112, 0, 0, 761, 0,
	702, 705, 711, 87, 0, 763, 753, 0, 0, 752,
	147, 107, 113, 0, 0, 765, 105, 0, 0, 0,
	185, 0, 0, 1445, 1490, 210, 212, 213, 211, 619,
	0, 1495, 0, 1495, 0, 1466, 608, 672, 0, 239,
	240, 696, 717, -2, 720, 722, 724, 0, 726, 737,
	0, 0, 0, 828, 832, 0, 831, 902, 929, 916,
	1017, 833, 854, 0, 0, 0, 843, 845, 842, 839,
	836, 1018, 0, 0, 0, 0, 0, 267, 270, 273,
	276, 279, 292, 0, 183, 1627, 181, 178, 180, 353,
	0, 164, 0, 0, 0, 1382, 0, 1024, 0, 0,
	0, 0, 161, 357, 0, 395, 0, 0, 0, 0,
	0, 0, 406, 407, -2, 435, 436, 438, 434, 0,
	544, 546, 554, 0, 0, 920, 751, 0, 1124, 1165,
	0, 0, -2, 0, 0, 1169, 0, 0, 0, -2,
	0, 0, 0, 1413, 0, 1424, 1254, 1255, 1262, 1352,
	1264, 0, 0, 0, 0, 1247, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 0, 1386, 1414, 1418, 0, 1478, 1482,
	1333, 1334, 1338, 1469, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 0, 1387, 1397, 1399, 1208, 1209,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	-2, -2, -2, 1226, 1227, 1228, -2, -2, -2, 0,
	0, 0, 1400, 1402, 1403, 1407, 1408, 0, 1316, 1317,
	1318, 1409, 0, 946, 0, 950, 0, 946, 946, 911,
	989, 0, 1007, 991, 963, 982, 0, 972, 961, 0,
	962, 0, 993, 0, 969, 974, 0, 977, 0, 1264,
	-2, 0, 0, 0, 0, 156, 637, 661, 0, 0,
	740, 748, 748, 0, 1464, 0, 0, 129, 0, 0,
	0, 0, 134, 0, 140, 144, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 115, 118, 0, 0,
	114, 0, 158, 0, 0, 627, 0, 613, 0, 0,
	0, 0, 611, 0, 237, 693, 715, 725, 0, 0,
	0, 0, 0, 830, 832, 0, 823, 824, 854, 928,
	834, 852, 853, 851, 0, 0, 0, 917, 860, 857,
	863, 864, 0, 169, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 1025, 1033, 0, 1086, 359, 0, 577,
	578, 625, 0, 581, 507, 931, 937, 922, 751, 1167,
	1171, 0, 0, 0, 1173, -2, 0, 1195, -2, -2,
	1423, 1244, 915, 1265, 1267, 1268, 1119, 1417, 0, 1340,
	1337, 0, 1324, 1057, 1285, 1286, 0, 0, 1289, 1291,
	1292, 1293, 1396, 0, 0, 0, 0, 1315, 900, 1329,
	0, 0, 954, 1329, 1329, 0, 986, 984, 959, 955,
	0, 1478, 976, 0, 0, 757, 759, 126, 0, 638,
	0, 641, 0, 0, 0, 0, 648, 649, 0, 0,
	0, 0, 0, 663, 670, 0, 751, 0, 751, 0,
	0, 0, 0, 131, 150, 0, 0, 769, 0, 155,
	155, 0, 0, 756, 0, 0, 0, 762, 764, 754,
	0, 766, 0, 175, 0, 606, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 736, 0, 0, 0,
	820, 832, 0, 825, 826, 242, 0, 0, 0, 841,
	844, 846, 929, 0, 182, 0, 177, 179, 185, 0,
	0, 1020, 1084, 397, 399, 0, 0, 405, 579, 624,
	0, 0, 923, 1175, -2, -2, 1196, 0, 1479, 1481,
	917, 0, 1326, 0, 0, -2, 0, 0, 0, 886,
	0, 945, 943, 887, 888, 1006, 996, 0, 979, 128,
	0, 642, 643, 1465, 645, 0, 647, 650, 0, 652,
	1497, 0, 656, 619, 0, 667, 668, 741, 742, 747,
	743, 748, 665, 0, 130, 132, 149, 746, 133, 139,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	670, 0, 660, 619, 609, 0, 737, 732, 0, 0,
	827, 828, 0, 0, 0, 854, 865, 184, 165, 0,
	0, 0, 401, 0, 403, 0, 623, 0, 1266, 1343,
	0, 1287, 1288, -2, 0, 1234, 1328, 1330, 0, 964,
	956, 640, 644, 0, 0, 676, 0, 0, 627, 0,
	751, 0, 152, 0, 0, 0, 758, 760, 0, 0,
	117, 0, 659, 619, 670, 627, 670, 0, 0, 829,
	830, 0, 848, 1018, 850, 855, 0, 0, 400, 0,
	0, 580, 0, 0, 0, 1339, 1235, 0, 0, 0,
	651, 681, 0, 0, 0, 664, 0, 744, 672, 135,
	0, 745, 0, 631, 0, 0, 634, 0, 0, 0,
	0, 627, 619, 607, 619, 0, 0, 821, 0, 849,
	185, 185, 402, 404, 1336, 1341, 1344, -2, 1714, 1545,
	0, 1342, 1331, 1332, 0, 653, 677, 678, 0, 673,
	674, 675, 1496, 654, 655, 669, 676, 151, 628, 0,
	0, 629, 0, 0, 120, 122, 0, 657, 627, 627,
	0, 733, 1018, 166, 167, 0, 1346, 1347, 1348, 1349,
	1350, 646, 679, 0, 680, 0, 0, 0, 681, 632,
	0, 635, 0, 622, 658, 730, 670, 847, 0, 682,
	0, 685, 686, 0, 683, 666, 0, 0, 618, 620,
	621, 619, 1345, 684, 687, 688, 0, 0, 627, 627,
	0, 731, 633, 0, 0, 0, 627, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1025
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1031
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1226
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1234
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1273
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1324
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1349
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1414
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1417
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1529
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1623
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1658
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1673
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1693
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1717
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1721
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1762
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1778
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1804
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1823
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1831
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1833
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1837
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1840
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1873
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1880
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1885
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1891
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1915
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1927
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1934
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1948
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = nil
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1965
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "DELETE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1998
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2003
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2015
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2019
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2037
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2045
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2049
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2052
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2060
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2068
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2098
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2106
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2110
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2113
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2121
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2128
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2132
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2157
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2160
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2162
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2166
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2173
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "DELETE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "INSERT")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2188
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2189
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2191
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2194
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2197
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2207
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2211
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2225
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2232
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2240
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2256
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2262
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2266
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2276
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2291
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2319
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2322
		{
			return helpWith(sqllex, "GRANT")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2342
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2346
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2350
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2353
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2358
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2362
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2373
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2377
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "RESET")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2407
		{
			return helpWith(sqllex, "RESET")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2429
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2432
		{
			return helpWith(sqllex, "USE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2436
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2438
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2439
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2440
		{
			return helpWith(sqllex, "USE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return unimplemented(sqllex, "set local")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2457
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2475
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2493
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2501
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2505
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2509
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2515
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2556
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2559
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2581
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2585
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2590
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2610
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2615
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2619
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2630
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2647
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2660
		{
			return unimplemented(sqllex, "set from current")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2669
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2674
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2681
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2691
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2702
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2708
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2712
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2718
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2722
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2726
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2734
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.Low
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = tree.Normal
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2748
		{
			sqlVAL.union.val = tree.High
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2759
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2763
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2767
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2776
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2812
		{
			return helpWith(sqllex, "SHOW")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2821
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2832
		{
			sqlVAL.str = "client_encoding"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2835
		{
			sqlVAL.str = "timezone"
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2868
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2876
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2904
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2914
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2921
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2926
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2937
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2961
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2980
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2998
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3001
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3014
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3019
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3023
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3045
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3055
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3059
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3063
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3071
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3076
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3080
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3090
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3099
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3108
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3111
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3122
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3125
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3132
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3144
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3154
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3170
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3187
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3205
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3210
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3215
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3222
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3230
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3237
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3242
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3254
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3258
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3261
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3269
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3276
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3281
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3401
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3405
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3409
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3448
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3452
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3457
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3461
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3470
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3477
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3481
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3493
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3502
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3505
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3592
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3598
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3608
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3620
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3635
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3640
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3645
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3651
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3658
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3685
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3691
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3701
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3711
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3721
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3732
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3747
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3773
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3777
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3795
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3803
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3811
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3815
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3819
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3831
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3852
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3886
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3891
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3897
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3914
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3924
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3952
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3958
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3962
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3967
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3969
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3970
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3977
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3981
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3985
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3989
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3993
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3999
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4005
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4061
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4069
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4077
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4084
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4088
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4092
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4093
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4096
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4098
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4100
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4103
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4106
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4108
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4117
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4120
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4132
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4135
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4143
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4153
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4160
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4168
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4175
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4183
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4185
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4187
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4189
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4191
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4193
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4222
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4236
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4245
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4254
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4259
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4263
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4267
		{
			sqlVAL.union.val = false
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4273
		{
			sqlVAL.union.val = true
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.union.val = false
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4283
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4296
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4299
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4300
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4303
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4304
		{
			sqlVAL.str = ""
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4307
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4308
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.Descending
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4320
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4333
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4343
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4355
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4361
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4375
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4389
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4394
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4395
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4398
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4399
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4410
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4440
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4443
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4448
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4465
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4468
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4470
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4473
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4483
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4488
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4500
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4501
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4502
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4510
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4517
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4520
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4521
		{
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4525
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4529
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4533
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4537
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4543
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4547
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4557
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4563
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4567
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4580
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4582
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4586
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4590
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4594
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4600
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4606
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4616
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4626
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4636
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4646
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4650
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4654
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4660
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4664
		{
			sqlVAL.str = ""
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4674
		{
			sqlVAL.str = ""
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4680
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4684
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4689
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4690
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4709
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4716
		{
			return helpWith(sqllex, "INSERT")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4727
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4734
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4738
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4746
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4752
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4756
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4760
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4766
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4790
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4804
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4808
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4816
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 855:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4842
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4853
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4857
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4858
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4879
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4882
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4886
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4929
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4939
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4954
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4958
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4966
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4970
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4974
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4981
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5016
		{
			return helpWith(sqllex, "SELECT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5017
		{
			return helpWith(sqllex, "VALUES")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5018
		{
			return helpWith(sqllex, "TABLE")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5040
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5053
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5079
		{
			return helpWith(sqllex, "SELECT")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5083
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5092
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5101
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5116
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5123
		{
			return helpWith(sqllex, "TABLE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5135
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5138
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5139
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5161
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5162
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5166
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5169
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5172
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5173
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5181
		{
			sqlVAL.union.val = false
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5185
		{
			sqlVAL.union.val = false
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5191
		{
			sqlVAL.union.val = true
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5197
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5202
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5203
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5206
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5207
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5221
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5227
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5237
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5241
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5245
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5254
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5274
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5278
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5300
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5307
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5316
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5320
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5324
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5330
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5331
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5334
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5335
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5356
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5362
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5388
		{
			return helpWith(sqllex, "VALUES")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5390
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5402
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5405
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5407
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5413
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5423
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5427
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5433
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5439
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5444
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5471
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5479
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5506
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5520
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5524
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5527
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5529
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5533
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5537
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5542
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5564
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5568
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5586
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5588
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = nil
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5592
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5593
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5597
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5607
		{
			sqlVAL.union.val = true
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5611
		{
			sqlVAL.union.val = false
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5631
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5661
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5668
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5674
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5681
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5687
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5695
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5699
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5705
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5706
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5728
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5750
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5754
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5758
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5780
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5794
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5803
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5818
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5825
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5827
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5836
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5844
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5853
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5871
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5875
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5879
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5887
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5891
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5895
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5899
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5903
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5907
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5923
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5927
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5931
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5935
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = nil
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5974
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5978
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5982
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5990
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5994
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5998
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6002
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6006
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6014
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6024
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6028
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6037
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6055
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6059
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6066
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6070
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6074
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6078
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6082
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6098
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6109
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6137
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6141
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6145
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6150
		{
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6151
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6160
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6164
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6168
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6172
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6176
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6193
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.Year
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6203
		{
			sqlVAL.union.val = tree.Month
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6207
		{
			sqlVAL.union.val = tree.Day
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6211
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6215
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6219
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6225
		{
			sqlVAL.union.val = tree.Month
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = nil
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = tree.Second
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6262
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6286
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6297
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6338
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6354
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6402
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6414
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6418
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6422
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6426
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6430
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6446
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6450
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6454
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6458
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6466
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6470
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6474
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6549
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6559
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6563
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6567
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6571
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6575
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6579
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6583
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6599
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6603
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6607
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6611
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6615
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6632
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6636
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6640
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6655
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6659
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6663
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6679
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6687
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6691
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6695
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6719
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6731
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6735
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6743
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6751
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6755
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6777
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6821
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6825
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6829
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6836
		{
			return unimplemented(sqllex, "func const")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6845
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6847
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6863
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6872
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6898
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6902
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6906
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6928
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6929
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6942
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6953
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6960
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6974
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7067
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7072
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7077
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7082
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7087
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7092
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7097
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7106
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7107
		{
			return unimplemented(sqllex, "treat")
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7128
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7133
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7138
		{
			return unimplemented(sqllex, "within group")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7139
		{
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7143
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7158
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7164
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7174
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.str = ""
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7223
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7238
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7262
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7275
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7288
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = tree.Any
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = tree.Some
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = tree.All
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.Div
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7383
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = tree.LT
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7385
		{
			sqlVAL.union.val = tree.GT
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = tree.LE
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = tree.GE
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.NE
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = tree.Like
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7394
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7424
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7454
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7494
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7530
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7550
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7612
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7636
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7642
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7651
		{
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7652
		{
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7656
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7666
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7675
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7679
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7683
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7691
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7701
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7711
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7718
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7760
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7772
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7785
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7796
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7806
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8000
		{
			sqlVAL.str = ""
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8006
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8010
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
