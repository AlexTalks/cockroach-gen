// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*scanner).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9195

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 958,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 794,
	193, 794,
	207, 228,
	279, 228,
	287, 650,
	314, 228,
	323, 650,
	360, 650,
	384, 228,
	407, 650,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 958,
	182, 958,
	393, 958,
	394, 958,
	-2, 0,
	-1, 88,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 919,
	-1, 116,
	123, 576,
	206, 576,
	377, 576,
	-2, 0,
	-1, 117,
	4, 960,
	21, 960,
	22, 960,
	23, 960,
	24, 960,
	25, 960,
	27, 960,
	32, 960,
	37, 960,
	38, 960,
	39, 960,
	40, 960,
	41, 960,
	42, 960,
	43, 960,
	44, 960,
	45, 960,
	46, 960,
	48, 960,
	49, 960,
	50, 960,
	51, 960,
	52, 960,
	53, 960,
	56, 960,
	57, 960,
	58, 960,
	59, 960,
	61, 960,
	62, 960,
	66, 960,
	67, 960,
	68, 960,
	69, 960,
	70, 960,
	72, 960,
	73, 960,
	74, 960,
	75, 960,
	77, 960,
	79, 960,
	80, 960,
	81, 960,
	84, 960,
	85, 960,
	93, 960,
	94, 960,
	95, 960,
	96, 960,
	97, 960,
	98, 960,
	99, 960,
	100, 960,
	102, 960,
	104, 960,
	105, 960,
	107, 960,
	110, 960,
	111, 960,
	112, 960,
	114, 960,
	116, 960,
	117, 960,
	119, 960,
	120, 960,
	121, 960,
	122, 960,
	123, 960,
	124, 960,
	125, 960,
	126, 960,
	127, 960,
	128, 960,
	129, 960,
	131, 960,
	137, 960,
	138, 960,
	139, 960,
	140, 960,
	141, 960,
	142, 960,
	144, 960,
	146, 960,
	150, 960,
	151, 960,
	153, 960,
	154, 960,
	156, 960,
	157, 960,
	159, 960,
	160, 960,
	161, 960,
	162, 960,
	163, 960,
	164, 960,
	165, 960,
	166, 960,
	167, 960,
	168, 960,
	171, 960,
	172, 960,
	176, 960,
	177, 960,
	178, 960,
	179, 960,
	182, 960,
	183, 960,
	184, 960,
	185, 960,
	186, 960,
	187, 960,
	188, 960,
	189, 960,
	191, 960,
	193, 960,
	196, 960,
	197, 960,
	198, 960,
	200, 960,
	201, 960,
	204, 960,
	205, 960,
	206, 960,
	207, 960,
	209, 960,
	210, 960,
	212, 960,
	213, 960,
	215, 960,
	216, 960,
	219, 960,
	220, 960,
	223, 960,
	225, 960,
	226, 960,
	227, 960,
	228, 960,
	229, 960,
	230, 960,
	231, 960,
	232, 960,
	233, 960,
	235, 960,
	236, 960,
	237, 960,
	238, 960,
	240, 960,
	243, 960,
	244, 960,
	245, 960,
	246, 960,
	248, 960,
	249, 960,
	250, 960,
	252, 960,
	253, 960,
	254, 960,
	257, 960,
	258, 960,
	260, 960,
	262, 960,
	263, 960,
	264, 960,
	265, 960,
	266, 960,
	267, 960,
	268, 960,
	269, 960,
	270, 960,
	272, 960,
	273, 960,
	274, 960,
	275, 960,
	276, 960,
	278, 960,
	280, 960,
	281, 960,
	282, 960,
	283, 960,
	284, 960,
	285, 960,
	286, 960,
	287, 960,
	288, 960,
	290, 960,
	291, 960,
	292, 960,
	293, 960,
	294, 960,
	296, 960,
	297, 960,
	298, 960,
	299, 960,
	300, 960,
	301, 960,
	302, 960,
	303, 960,
	305, 960,
	307, 960,
	308, 960,
	309, 960,
	310, 960,
	311, 960,
	312, 960,
	314, 960,
	315, 960,
	316, 960,
	317, 960,
	318, 960,
	319, 960,
	320, 960,
	321, 960,
	323, 960,
	324, 960,
	325, 960,
	326, 960,
	327, 960,
	328, 960,
	329, 960,
	330, 960,
	331, 960,
	332, 960,
	334, 960,
	335, 960,
	336, 960,
	337, 960,
	339, 960,
	340, 960,
	341, 960,
	342, 960,
	344, 960,
	345, 960,
	346, 960,
	347, 960,
	348, 960,
	349, 960,
	350, 960,
	351, 960,
	352, 960,
	353, 960,
	354, 960,
	355, 960,
	357, 960,
	358, 960,
	359, 960,
	361, 960,
	362, 960,
	363, 960,
	364, 960,
	365, 960,
	366, 960,
	367, 960,
	368, 960,
	369, 960,
	371, 960,
	372, 960,
	373, 960,
	374, 960,
	377, 960,
	378, 960,
	379, 960,
	380, 960,
	381, 960,
	383, 960,
	384, 960,
	385, 960,
	387, 960,
	388, 960,
	391, 960,
	392, 960,
	393, 960,
	394, 960,
	395, 960,
	397, 960,
	399, 960,
	400, 960,
	401, 960,
	402, 960,
	403, 960,
	404, 960,
	405, 960,
	407, 960,
	408, 960,
	409, 960,
	414, 960,
	415, 960,
	416, 960,
	417, 960,
	418, 960,
	419, 960,
	-2, 0,
	-1, 118,
	1, 851,
	196, 851,
	278, 851,
	285, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 120,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 121,
	1, 851,
	445, 851,
	446, 851,
	-2, 0,
	-1, 122,
	1, 855,
	445, 855,
	446, 855,
	-2, 0,
	-1, 146,
	118, 931,
	132, 931,
	190, 931,
	218, 931,
	247, 931,
	256, 931,
	389, 931,
	-2, 928,
	-1, 176,
	4, 967,
	5, 967,
	6, 967,
	7, 967,
	8, 967,
	9, 967,
	10, 967,
	21, 967,
	22, 967,
	23, 967,
	24, 967,
	25, 967,
	27, 967,
	32, 967,
	33, 967,
	37, 967,
	38, 967,
	39, 967,
	40, 967,
	41, 967,
	42, 967,
	43, 967,
	44, 967,
	45, 967,
	46, 967,
	48, 967,
	49, 967,
	50, 967,
	51, 967,
	52, 967,
	53, 967,
	54, 967,
	55, 967,
	56, 967,
	57, 967,
	58, 967,
	59, 967,
	61, 967,
	62, 967,
	64, 967,
	66, 967,
	67, 967,
	68, 967,
	69, 967,
	70, 967,
	72, 967,
	73, 967,
	74, 967,
	75, 967,
	77, 967,
	79, 967,
	80, 967,
	81, 967,
	83, 967,
	84, 967,
	85, 967,
	86, 967,
	87, 967,
	88, 967,
	89, 967,
	90, 967,
	91, 967,
	92, 967,
	93, 967,
	94, 967,
	95, 967,
	96, 967,
	97, 967,
	98, 967,
	99, 967,
	100, 967,
	101, 967,
	102, 967,
	104, 967,
	105, 967,
	107, 967,
	110, 967,
	111, 967,
	112, 967,
	114, 967,
	116, 967,
	117, 967,
	119, 967,
	120, 967,
	121, 967,
	122, 967,
	123, 967,
	124, 967,
	125, 967,
	126, 967,
	127, 967,
	128, 967,
	129, 967,
	130, 967,
	131, 967,
	137, 967,
	138, 967,
	139, 967,
	140, 967,
	141, 967,
	142, 967,
	144, 967,
	146, 967,
	149, 967,
	150, 967,
	151, 967,
	153, 967,
	154, 967,
	156, 967,
	157, 967,
	159, 967,
	160, 967,
	161, 967,
	162, 967,
	163, 967,
	164, 967,
	165, 967,
	166, 967,
	167, 967,
	168, 967,
	169, 967,
	171, 967,
	172, 967,
	176, 967,
	177, 967,
	178, 967,
	179, 967,
	181, 967,
	182, 967,
	183, 967,
	184, 967,
	185, 967,
	186, 967,
	187, 967,
	188, 967,
	189, 967,
	191, 967,
	193, 967,
	194, 967,
	195, 967,
	196, 967,
	197, 967,
	198, 967,
	199, 967,
	200, 967,
	201, 967,
	204, 967,
	205, 967,
	206, 967,
	207, 967,
	209, 967,
	210, 967,
	212, 967,
	213, 967,
	214, 967,
	215, 967,
	216, 967,
	217, 967,
	219, 967,
	220, 967,
	223, 967,
	225, 967,
	226, 967,
	227, 967,
	228, 967,
	229, 967,
	230, 967,
	231, 967,
	232, 967,
	233, 967,
	234, 967,
	235, 967,
	236, 967,
	237, 967,
	238, 967,
	239, 967,
	240, 967,
	241, 967,
	242, 967,
	243, 967,
	244, 967,
	245, 967,
	246, 967,
	248, 967,
	249, 967,
	250, 967,
	253, 967,
	254, 967,
	257, 967,
	258, 967,
	259, 967,
	260, 967,
	261, 967,
	262, 967,
	263, 967,
	264, 967,
	265, 967,
	266, 967,
	267, 967,
	268, 967,
	269, 967,
	270, 967,
	272, 967,
	273, 967,
	274, 967,
	275, 967,
	276, 967,
	278, 967,
	280, 967,
	281, 967,
	282, 967,
	283, 967,
	284, 967,
	285, 967,
	286, 967,
	287, 967,
	288, 967,
	290, 967,
	291, 967,
	292, 967,
	293, 967,
	294, 967,
	296, 967,
	297, 967,
	298, 967,
	299, 967,
	300, 967,
	301, 967,
	302, 967,
	303, 967,
	305, 967,
	306, 967,
	307, 967,
	308, 967,
	309, 967,
	310, 967,
	311, 967,
	312, 967,
	314, 967,
	315, 967,
	316, 967,
	317, 967,
	318, 967,
	319, 967,
	320, 967,
	321, 967,
	323, 967,
	324, 967,
	325, 967,
	326, 967,
	327, 967,
	328, 967,
	329, 967,
	330, 967,
	331, 967,
	332, 967,
	333, 967,
	334, 967,
	335, 967,
	336, 967,
	337, 967,
	338, 967,
	339, 967,
	340, 967,
	341, 967,
	342, 967,
	344, 967,
	345, 967,
	346, 967,
	347, 967,
	348, 967,
	349, 967,
	350, 967,
	351, 967,
	352, 967,
	353, 967,
	354, 967,
	355, 967,
	357, 967,
	358, 967,
	359, 967,
	361, 967,
	362, 967,
	363, 967,
	364, 967,
	365, 967,
	366, 967,
	367, 967,
	368, 967,
	369, 967,
	371, 967,
	372, 967,
	373, 967,
	374, 967,
	377, 967,
	378, 967,
	379, 967,
	380, 967,
	381, 967,
	382, 967,
	383, 967,
	384, 967,
	385, 967,
	387, 967,
	388, 967,
	390, 967,
	391, 967,
	392, 967,
	393, 967,
	394, 967,
	395, 967,
	396, 967,
	397, 967,
	399, 967,
	400, 967,
	401, 967,
	402, 967,
	403, 967,
	404, 967,
	405, 967,
	407, 967,
	408, 967,
	409, 967,
	414, 967,
	415, 967,
	416, 967,
	417, 967,
	418, 967,
	419, 967,
	420, 967,
	428, 967,
	433, 967,
	434, 967,
	435, 967,
	442, 967,
	448, 967,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 958,
	-1, 537,
	148, 1623,
	375, 1623,
	425, 1623,
	444, 1623,
	-2, 0,
	-1, 538,
	148, 1699,
	375, 1699,
	425, 1699,
	444, 1699,
	-2, 0,
	-1, 539,
	148, 1613,
	375, 1613,
	425, 1613,
	444, 1613,
	-2, 0,
	-1, 541,
	148, 1781,
	375, 1781,
	425, 1781,
	444, 1781,
	-2, 0,
	-1, 543,
	148, 1809,
	375, 1809,
	425, 1809,
	444, 1809,
	-2, 0,
	-1, 550,
	148, 1707,
	375, 1707,
	425, 1707,
	444, 1707,
	-2, 451,
	-1, 567,
	444, 1573,
	447, 1573,
	-2, 619,
	-1, 568,
	444, 1575,
	447, 1575,
	-2, 620,
	-1, 569,
	444, 1574,
	447, 1574,
	-2, 621,
	-1, 570,
	447, 1522,
	-2, 622,
	-1, 714,
	1, 549,
	441, 549,
	443, 549,
	445, 549,
	446, 549,
	-2, 0,
	-1, 715,
	1, 618,
	145, 618,
	441, 618,
	443, 618,
	445, 618,
	446, 618,
	-2, 0,
	-1, 721,
	1, 563,
	441, 563,
	443, 563,
	445, 563,
	446, 563,
	-2, 0,
	-1, 723,
	1, 567,
	441, 567,
	443, 567,
	445, 567,
	446, 567,
	-2, 0,
	-1, 725,
	1, 577,
	441, 577,
	443, 577,
	445, 577,
	446, 577,
	-2, 0,
	-1, 726,
	1, 583,
	441, 583,
	443, 583,
	445, 583,
	446, 583,
	-2, 0,
	-1, 727,
	1, 586,
	441, 586,
	443, 586,
	445, 586,
	446, 586,
	-2, 0,
	-1, 731,
	1, 600,
	441, 600,
	443, 600,
	445, 600,
	446, 600,
	-2, 0,
	-1, 732,
	1, 602,
	441, 602,
	443, 602,
	445, 602,
	446, 602,
	-2, 0,
	-1, 775,
	132, 971,
	218, 971,
	247, 971,
	-2, 928,
	-1, 790,
	132, 970,
	218, 970,
	247, 970,
	-2, 928,
	-1, 814,
	444, 1572,
	-2, 459,
	-1, 843,
	442, 1564,
	-2, 1555,
	-1, 849,
	5, 1096,
	-2, 1604,
	-1, 850,
	5, 1097,
	-2, 1608,
	-1, 851,
	5, 1098,
	-2, 1607,
	-1, 852,
	5, 1099,
	-2, 1807,
	-1, 853,
	5, 1100,
	-2, 1709,
	-1, 854,
	5, 1101,
	-2, 1773,
	-1, 855,
	5, 1102,
	-2, 1775,
	-1, 856,
	5, 1103,
	-2, 1786,
	-1, 857,
	5, 1104,
	-2, 1776,
	-1, 858,
	5, 1105,
	-2, 1777,
	-1, 859,
	5, 1106,
	-2, 1603,
	-1, 860,
	5, 1107,
	-2, 1820,
	-1, 861,
	5, 1108,
	-2, 1674,
	-1, 862,
	5, 1109,
	-2, 1716,
	-1, 863,
	5, 1110,
	-2, 1718,
	-1, 864,
	5, 1111,
	-2, 1678,
	-1, 865,
	5, 1112,
	442, 1582,
	-2, 1573,
	-1, 866,
	5, 1168,
	442, 1168,
	-2, 1855,
	-1, 871,
	442, 1583,
	-2, 1574,
	-1, 873,
	5, 1116,
	-2, 1853,
	-1, 874,
	5, 1117,
	-2, 1854,
	-1, 875,
	5, 1118,
	-2, 1677,
	-1, 876,
	5, 1119,
	-2, 1866,
	-1, 877,
	5, 1120,
	-2, 1679,
	-1, 878,
	5, 1121,
	-2, 1680,
	-1, 879,
	5, 1122,
	-2, 1681,
	-1, 880,
	5, 1123,
	-2, 1835,
	-1, 881,
	5, 1124,
	-2, 1864,
	-1, 882,
	5, 1125,
	-2, 1658,
	-1, 883,
	5, 1126,
	-2, 1659,
	-1, 884,
	5, 1140,
	-2, 1847,
	-1, 886,
	5, 1115,
	-2, 1843,
	-1, 887,
	5, 1115,
	-2, 1842,
	-1, 888,
	5, 1115,
	-2, 1859,
	-1, 889,
	5, 1132,
	-2, 1837,
	-1, 890,
	5, 1133,
	-2, 1605,
	-1, 891,
	5, 1143,
	-2, 1836,
	-1, 892,
	5, 1145,
	-2, 1875,
	-1, 894,
	5, 1156,
	-2, 1633,
	-1, 895,
	5, 1167,
	-2, 1868,
	-1, 896,
	5, 1159,
	-2, 1869,
	-1, 897,
	5, 1167,
	-2, 1870,
	-1, 898,
	5, 1163,
	-2, 1871,
	-1, 899,
	5, 1083,
	-2, 1687,
	-1, 900,
	5, 1084,
	-2, 1688,
	-1, 901,
	444, 1570,
	-2, 1554,
	-1, 902,
	442, 1895,
	-2, 1571,
	-1, 922,
	5, 1151,
	-2, 1796,
	-1, 939,
	5, 1150,
	-2, 1876,
	-1, 949,
	5, 1152,
	408, 1152,
	-2, 1838,
	-1, 950,
	5, 1153,
	408, 1153,
	-2, 1839,
	-1, 986,
	442, 1582,
	-2, 1573,
	-1, 1015,
	148, 1809,
	375, 1809,
	425, 1809,
	444, 1809,
	-2, 0,
	-1, 1016,
	196, 863,
	278, 863,
	285, 863,
	-2, 439,
	-1, 1134,
	296, 1552,
	435, 1552,
	-2, 1551,
	-1, 1190,
	287, 650,
	407, 650,
	-2, 227,
	-1, 1210,
	268, 956,
	-2, 767,
	-1, 1219,
	251, 1577,
	-2, 0,
	-1, 1283,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 930,
	-1, 1286,
	4, 1874,
	11, 1874,
	12, 1874,
	14, 1874,
	15, 1874,
	16, 1874,
	17, 1874,
	18, 1874,
	19, 1874,
	21, 1874,
	22, 1874,
	23, 1874,
	24, 1874,
	25, 1874,
	27, 1874,
	30, 1874,
	32, 1874,
	34, 1874,
	37, 1874,
	38, 1874,
	39, 1874,
	40, 1874,
	41, 1874,
	42, 1874,
	43, 1874,
	44, 1874,
	45, 1874,
	46, 1874,
	48, 1874,
	49, 1874,
	50, 1874,
	51, 1874,
	52, 1874,
	53, 1874,
	56, 1874,
	57, 1874,
	58, 1874,
	59, 1874,
	61, 1874,
	62, 1874,
	63, 1874,
	66, 1874,
	67, 1874,
	68, 1874,
	69, 1874,
	70, 1874,
	71, 1874,
	72, 1874,
	73, 1874,
	74, 1874,
	75, 1874,
	77, 1874,
	78, 1874,
	79, 1874,
	80, 1874,
	81, 1874,
	83, 1874,
	84, 1874,
	85, 1874,
	93, 1874,
	94, 1874,
	95, 1874,
	96, 1874,
	97, 1874,
	98, 1874,
	99, 1874,
	100, 1874,
	102, 1874,
	104, 1874,
	105, 1874,
	107, 1874,
	110, 1874,
	111, 1874,
	112, 1874,
	114, 1874,
	116, 1874,
	117, 1874,
	119, 1874,
	120, 1874,
	121, 1874,
	122, 1874,
	123, 1874,
	124, 1874,
	125, 1874,
	126, 1874,
	127, 1874,
	128, 1874,
	129, 1874,
	133, 1874,
	134, 1874,
	135, 1874,
	136, 1874,
	137, 1874,
	138, 1874,
	139, 1874,
	140, 1874,
	141, 1874,
	142, 1874,
	143, 1874,
	144, 1874,
	146, 1874,
	149, 1874,
	150, 1874,
	151, 1874,
	153, 1874,
	154, 1874,
	156, 1874,
	157, 1874,
	159, 1874,
	160, 1874,
	161, 1874,
	162, 1874,
	163, 1874,
	164, 1874,
	165, 1874,
	166, 1874,
	167, 1874,
	168, 1874,
	169, 1874,
	170, 1874,
	171, 1874,
	172, 1874,
	173, 1874,
	174, 1874,
	175, 1874,
	177, 1874,
	178, 1874,
	179, 1874,
	181, 1874,
	182, 1874,
	183, 1874,
	184, 1874,
	185, 1874,
	186, 1874,
	187, 1874,
	188, 1874,
	189, 1874,
	191, 1874,
	193, 1874,
	194, 1874,
	195, 1874,
	196, 1874,
	197, 1874,
	198, 1874,
	199, 1874,
	200, 1874,
	201, 1874,
	202, 1874,
	203, 1874,
	204, 1874,
	205, 1874,
	206, 1874,
	207, 1874,
	209, 1874,
	210, 1874,
	212, 1874,
	213, 1874,
	214, 1874,
	215, 1874,
	216, 1874,
	217, 1874,
	219, 1874,
	220, 1874,
	223, 1874,
	224, 1874,
	225, 1874,
	226, 1874,
	227, 1874,
	228, 1874,
	229, 1874,
	230, 1874,
	231, 1874,
	232, 1874,
	233, 1874,
	234, 1874,
	235, 1874,
	236, 1874,
	237, 1874,
	238, 1874,
	241, 1874,
	243, 1874,
	244, 1874,
	245, 1874,
	246, 1874,
	248, 1874,
	249, 1874,
	250, 1874,
	253, 1874,
	254, 1874,
	255, 1874,
	257, 1874,
	258, 1874,
	260, 1874,
	262, 1874,
	263, 1874,
	264, 1874,
	265, 1874,
	266, 1874,
	267, 1874,
	268, 1874,
	269, 1874,
	270, 1874,
	272, 1874,
	273, 1874,
	274, 1874,
	275, 1874,
	276, 1874,
	278, 1874,
	280, 1874,
	281, 1874,
	282, 1874,
	283, 1874,
	284, 1874,
	285, 1874,
	286, 1874,
	287, 1874,
	288, 1874,
	290, 1874,
	291, 1874,
	292, 1874,
	293, 1874,
	294, 1874,
	295, 1874,
	296, 1874,
	297, 1874,
	298, 1874,
	299, 1874,
	300, 1874,
	301, 1874,
	302, 1874,
	303, 1874,
	305, 1874,
	306, 1874,
	307, 1874,
	308, 1874,
	309, 1874,
	310, 1874,
	311, 1874,
	312, 1874,
	313, 1874,
	314, 1874,
	315, 1874,
	316, 1874,
	317, 1874,
	318, 1874,
	319, 1874,
	320, 1874,
	321, 1874,
	323, 1874,
	324, 1874,
	325, 1874,
	326, 1874,
	327, 1874,
	328, 1874,
	329, 1874,
	330, 1874,
	331, 1874,
	332, 1874,
	334, 1874,
	335, 1874,
	336, 1874,
	337, 1874,
	338, 1874,
	339, 1874,
	340, 1874,
	341, 1874,
	342, 1874,
	344, 1874,
	345, 1874,
	346, 1874,
	347, 1874,
	348, 1874,
	349, 1874,
	350, 1874,
	351, 1874,
	352, 1874,
	353, 1874,
	354, 1874,
	355, 1874,
	357, 1874,
	358, 1874,
	359, 1874,
	361, 1874,
	362, 1874,
	363, 1874,
	364, 1874,
	365, 1874,
	366, 1874,
	367, 1874,
	368, 1874,
	369, 1874,
	371, 1874,
	372, 1874,
	373, 1874,
	374, 1874,
	377, 1874,
	378, 1874,
	379, 1874,
	380, 1874,
	381, 1874,
	383, 1874,
	384, 1874,
	385, 1874,
	387, 1874,
	388, 1874,
	391, 1874,
	392, 1874,
	393, 1874,
	394, 1874,
	395, 1874,
	397, 1874,
	399, 1874,
	400, 1874,
	401, 1874,
	402, 1874,
	403, 1874,
	404, 1874,
	405, 1874,
	407, 1874,
	408, 1874,
	409, 1874,
	414, 1874,
	415, 1874,
	416, 1874,
	417, 1874,
	418, 1874,
	419, 1874,
	420, 1874,
	421, 1874,
	423, 1874,
	424, 1874,
	425, 1874,
	426, 1874,
	427, 1874,
	428, 1874,
	430, 1874,
	431, 1874,
	432, 1874,
	433, 1874,
	434, 1874,
	435, 1874,
	436, 1874,
	437, 1874,
	438, 1874,
	440, 1874,
	443, 1874,
	444, 1874,
	447, 1874,
	448, 1874,
	-2, 0,
	-1, 1289,
	148, 1781,
	375, 1781,
	425, 1781,
	444, 1781,
	-2, 0,
	-1, 1356,
	1, 1827,
	441, 1827,
	443, 1827,
	444, 1827,
	445, 1827,
	446, 1827,
	-2, 598,
	-1, 1357,
	1, 1779,
	441, 1779,
	443, 1779,
	444, 1779,
	445, 1779,
	446, 1779,
	-2, 599,
	-1, 1370,
	196, 863,
	278, 863,
	285, 863,
	-2, 858,
	-1, 1375,
	132, 970,
	218, 970,
	247, 970,
	-2, 928,
	-1, 1468,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 1324,
	-1, 1521,
	443, 1457,
	-2, 0,
	-1, 1556,
	118, 932,
	132, 932,
	190, 932,
	218, 932,
	247, 932,
	256, 932,
	389, 932,
	-2, 1040,
	-1, 1609,
	442, 1155,
	-2, 1143,
	-1, 1648,
	196, 863,
	278, 863,
	285, 863,
	-2, 441,
	-1, 1897,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1204,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1205,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1206,
	-1, 1900,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1207,
	-1, 1901,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1208,
	-1, 1902,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1209,
	-1, 1903,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1210,
	-1, 1904,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1211,
	-1, 1916,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1223,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1224,
	-1, 1918,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1225,
	-1, 1921,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1230,
	-1, 1927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 1929,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1242,
	-1, 1930,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1243,
	-1, 1931,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1244,
	-1, 1932,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1245,
	-1, 2025,
	5, 1112,
	148, 1468,
	442, 1582,
	-2, 1573,
	-1, 2026,
	148, 1469,
	-2, 1831,
	-1, 2027,
	148, 1470,
	-2, 1706,
	-1, 2028,
	148, 1471,
	-2, 1634,
	-1, 2029,
	148, 1472,
	-2, 1668,
	-1, 2030,
	148, 1473,
	-2, 1704,
	-1, 2031,
	148, 1474,
	-2, 1772,
	-1, 2099,
	1, 1041,
	83, 1041,
	118, 1041,
	132, 1041,
	145, 1041,
	149, 1041,
	155, 1041,
	158, 1041,
	181, 1041,
	190, 1041,
	199, 1041,
	214, 1041,
	218, 1041,
	234, 1041,
	247, 1041,
	251, 1041,
	256, 1041,
	304, 1041,
	306, 1041,
	389, 1041,
	398, 1041,
	411, 1041,
	412, 1041,
	413, 1041,
	422, 1041,
	441, 1041,
	443, 1041,
	445, 1041,
	446, 1041,
	447, 1041,
	-2, 1040,
	-1, 2104,
	442, 1556,
	-2, 1568,
	-1, 2123,
	442, 1154,
	-2, 1144,
	-1, 2333,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 2334,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 2340,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 2516,
	196, 863,
	278, 863,
	285, 863,
	-2, 438,
	-1, 2587,
	443, 1527,
	447, 1527,
	-2, 1543,
	-1, 2599,
	268, 956,
	-2, 767,
	-1, 2676,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1240,
	-1, 2683,
	194, 0,
	195, 0,
	241, 0,
	-2, 1259,
	-1, 2746,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1288,
	-1, 2747,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1289,
	-1, 2748,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2752,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1294,
	-1, 2753,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1295,
	-1, 2754,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1296,
	-1, 2796,
	442, 1557,
	-2, 1569,
	-1, 2875,
	444, 1977,
	-2, 905,
	-1, 2916,
	194, 0,
	195, 0,
	241, 0,
	-2, 1260,
	-1, 2919,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1263,
	-1, 2920,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1265,
	-1, 3062,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1264,
	-1, 3063,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1266,
	-1, 3073,
	194, 0,
	-2, 1297,
	-1, 3163,
	194, 0,
	-2, 1298,
	-1, 3269,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1834,
}

const sqlPrivate = 57344

const sqlLast = 67159

var sqlAct = [...]int{

	871, 3101, 3349, 3126, 3017, 3268, 3278, 1568, 3339, 3104,
	3241, 2247, 2588, 3242, 2056, 3244, 3279, 3090, 3280, 1812,
	3228, 2714, 3267, 2256, 3129, 3167, 2248, 3031, 800, 1884,
	988, 2814, 2616, 2866, 3054, 2861, 2871, 2975, 2524, 2091,
	209, 1944, 209, 209, 1275, 2585, 209, 209, 209, 209,
	209, 2608, 1383, 209, 548, 2815, 2621, 2222, 1138, 2326,
	2361, 569, 2359, 2244, 2288, 1551, 2493, 791, 2225, 2610,
	3077, 1580, 2482, 2205, 1549, 1039, 665, 2287, 1131, 209,
	201, 2442, 979, 569, 2281, 2279, 2951, 2458, 1530, 1762,
	2257, 1579, 2151, 1763, 2153, 1700, 1691, 2092, 2469, 2769,
	5, 1770, 2441, 3168, 870, 1476, 33, 1975, 1957, 1877,
	1881, 799, 139, 2322, 1150, 2094, 1718, 2620, 87, 1147,
	867, 1677, 1679, 1773, 1724, 2087, 1027, 3127, 1494, 2144,
	1271, 2223, 1370, 1941, 2498, 1987, 788, 2206, 1531, 2586,
	2183, 1284, 1140, 1791, 1268, 2250, 1759, 1204, 570, 203,
	1559, 202, 2182, 1466, 2291, 1969, 516, 500, 1018, 571,
	1489, 1258, 524, 974, 2079, 1540, 2064, 953, 2021, 1958,
	1457, 209, 209, 146, 1384, 971, 1382, 565, 660, 1234,
	147, 532, 1282, 641, 542, 1779, 610, 1690, 1158, 139,
	827, 519, 951, 976, 1388, 1369, 1216, 706, 2785, 2357,
	1550, 2786, 1813, 3377, 527, 1793, 1793, 2073, 790, 2249,
	574, 2207, 577, 1793, 3368, 2053, 3367, 3348, 2073, 795,
	2073, 1731, 1396, 1397, 3335, 3333, 3299, 3298, 2989, 2989,
	2073, 2073, 574, 3295, 577, 3292, 1805, 3296, 3289, 3293,
	3265, 2671, 1731, 3264, 1731, 2627, 3261, 1731, 1399, 3260,
	1805, 3223, 3214, 1805, 3213, 2116, 2989, 3207, 2989, 3201,
	674, 1731, 3199, 2989, 3165, 3151, 2989, 796, 2116, 1731,
	2628, 3148, 3118, 3117, 1398, 2989, 1731, 1731, 3110, 2594,
	3109, 3083, 1731, 982, 2989, 1731, 954, 954, 123, 3064,
	795, 139, 3045, 2116, 59, 3013, 2640, 3007, 2988, 2073,
	2918, 2073, 2989, 2885, 2116, 60, 118, 2878, 2877, 2514,
	2791, 2781, 2878, 776, 2792, 2782, 2207, 804, 2775, 64,
	775, 2200, 2073, 2707, 1396, 1397, 2647, 1731, 2455, 968,
	2648, 2113, 2073, 2453, 40, 120, 2452, 2073, 2039, 2376,
	2073, 2772, 2406, 783, 2389, 2377, 2073, 39, 2390, 70,
	1399, 1727, 1179, 2378, 1404, 1173, 2277, 2073, 2129, 2253,
	1809, 1972, 2073, 2115, 955, 1731, 2110, 2116, 2106, 42,
	2073, 2072, 1731, 1808, 43, 2073, 1398, 1809, 1000, 76,
	2073, 3224, 121, 2066, 1426, 1427, 1428, 41, 86, 957,
	1005, 958, 77, 44, 3152, 1805, 2772, 2065, 3008, 1731,
	2648, 1396, 1397, 2197, 2142, 1651, 2640, 2231, 2325, 1730,
	2073, 2140, 1526, 1157, 179, 2414, 2415, 2629, 959, 45,
	956, 1396, 1397, 782, 1973, 781, 780, 1399, 176, 176,
	78, 176, 779, 778, 774, 1419, 2630, 1467, 773, 2414,
	2415, 772, 2432, 2433, 2434, 1670, 771, 1399, 2012, 770,
	1001, 769, 828, 1398, 1794, 1794, 1404, 768, 2914, 767,
	2414, 2415, 1794, 766, 765, 764, 178, 178, 763, 178,
	704, 1396, 1397, 1398, 703, 702, 701, 1439, 1440, 1441,
	700, 2360, 699, 698, 697, 696, 1426, 1427, 1428, 695,
	694, 693, 1974, 1971, 692, 691, 690, 1399, 689, 2429,
	1445, 688, 687, 686, 685, 209, 2414, 2415, 684, 177,
	177, 683, 177, 682, 209, 681, 1178, 680, 673, 1172,
	170, 672, 170, 1398, 1420, 632, 631, 590, 171, 589,
	171, 1418, 588, 1404, 580, 209, 79, 1419, 579, 578,
	555, 554, 209, 46, 553, 552, 893, 2420, 148, 148,
	536, 148, 2966, 1404, 2010, 199, 198, 197, 209, 1042,
	209, 209, 1143, 209, 1042, 209, 49, 145, 82, 2627,
	83, 2420, 47, 209, 209, 1026, 122, 2170, 1731, 1031,
	176, 1161, 48, 196, 1976, 195, 194, 193, 192, 176,
	998, 191, 2420, 1421, 1422, 1423, 1424, 2008, 209, 1801,
	1792, 52, 190, 1404, 116, 2006, 2090, 1857, 1001, 189,
	188, 187, 209, 119, 1143, 1143, 209, 209, 178, 209,
	186, 185, 2435, 184, 183, 869, 1420, 178, 2430, 1436,
	1446, 209, 182, 1426, 1427, 1428, 181, 180, 2420, 209,
	2930, 1134, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	117, 2879, 2430, 209, 209, 209, 209, 209, 1143, 1143,
	2789, 177, 149, 1143, 2496, 209, 1143, 209, 2383, 2372,
	177, 170, 176, 2430, 2308, 176, 1016, 1434, 2210, 171,
	170, 1970, 2065, 2237, 1419, 2414, 2415, 176, 171, 1001,
	1166, 2107, 1171, 1497, 1177, 1153, 1217, 1217, 2098, 1496,
	2252, 1497, 2004, 1279, 1167, 2121, 1675, 1496, 1552, 148,
	178, 1143, 4, 178, 1815, 1566, 1483, 2431, 1163, 798,
	1500, 1160, 574, 1033, 577, 178, 1013, 990, 1495, 3100,
	1395, 209, 1159, 1035, 3285, 1128, 1133, 3266, 1221, 3197,
	3158, 2431, 3046, 2968, 1478, 209, 1400, 1401, 1402, 1403,
	1405, 1406, 3155, 177, 3039, 1425, 177, 3153, 2950, 2949,
	209, 2937, 2431, 170, 1287, 2936, 170, 2935, 177, 2934,
	2928, 171, 2927, 1420, 171, 139, 1272, 1294, 170, 2926,
	1814, 796, 2925, 2851, 1297, 2804, 171, 2803, 2801, 2795,
	2766, 2765, 148, 1478, 661, 148, 1736, 2764, 1437, 2691,
	2687, 2651, 2491, 2449, 981, 1285, 2440, 148, 967, 2413,
	2410, 2409, 2407, 1218, 2396, 1262, 1265, 2420, 2395, 59,
	2394, 663, 2391, 1400, 1401, 1402, 1403, 1405, 1406, 2388,
	60, 2366, 2365, 1767, 2414, 2415, 1375, 2416, 2417, 2418,
	2419, 2421, 2422, 1376, 64, 1402, 1403, 1405, 1406, 2358,
	2238, 2426, 2427, 2428, 843, 2278, 2099, 1980, 2425, 2423,
	2424, 2416, 2417, 2418, 2419, 2421, 2422, 1395, 1734, 1394,
	1671, 2184, 2475, 1479, 70, 1477, 3375, 1465, 3347, 2321,
	1435, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 1438, 2011,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 3346,
	3300, 989, 2508, 2716, 76, 1301, 3256, 3254, 3192, 3190,
	3187, 3186, 1374, 86, 3182, 3176, 3147, 77, 3146, 1947,
	1368, 3096, 3075, 3051, 1953, 3050, 3029, 1381, 2416, 2417,
	2418, 2419, 2421, 2422, 1396, 1397, 3026, 2118, 3021, 2965,
	2948, 1373, 2899, 2896, 2830, 3038, 1371, 2829, 2818, 2817,
	2777, 2682, 2641, 209, 796, 78, 2602, 2574, 2555, 2534,
	1399, 2533, 2510, 2454, 2387, 2386, 2420, 2371, 2349, 2219,
	1501, 2414, 2415, 776, 2432, 2433, 2434, 1396, 1397, 209,
	775, 1537, 1377, 1498, 1490, 1528, 1398, 1487, 1391, 1392,
	209, 1042, 209, 209, 3170, 2009, 2125, 825, 2124, 1143,
	569, 209, 209, 1399, 2102, 569, 209, 2084, 1576, 2236,
	1573, 209, 2071, 1643, 2002, 1461, 1565, 1529, 1525, 1524,
	1523, 1522, 1521, 1520, 176, 1519, 1499, 1646, 1518, 1398,
	1517, 2429, 1515, 985, 1042, 1514, 1513, 2967, 2007, 176,
	2414, 2415, 1560, 2432, 2433, 2434, 2005, 2430, 1491, 1492,
	1534, 1535, 1512, 1661, 1660, 1511, 1673, 1670, 1667, 2913,
	1510, 79, 178, 1509, 1508, 1645, 1404, 2534, 954, 1507,
	1506, 1548, 1505, 1504, 1816, 1503, 1480, 178, 982, 1462,
	982, 1460, 139, 1455, 1012, 1003, 995, 2922, 2800, 2784,
	2780, 2375, 145, 82, 796, 83, 1426, 1427, 1428, 2085,
	2429, 2414, 2415, 2420, 1479, 177, 2506, 1458, 1561, 2418,
	2419, 2421, 2422, 1571, 176, 170, 1670, 3191, 2611, 1510,
	177, 1670, 3044, 171, 1547, 2207, 664, 1552, 1030, 116,
	170, 1670, 1695, 2558, 3009, 2787, 2431, 1028, 171, 1557,
	2643, 2642, 1366, 2003, 148, 1527, 1316, 1419, 1648, 574,
	1664, 577, 178, 2393, 574, 2392, 577, 1143, 209, 148,
	2331, 2186, 2172, 1685, 1042, 1040, 1669, 1554, 3156, 3099,
	1151, 1025, 2420, 3154, 1497, 117, 983, 1575, 1029, 2828,
	1496, 761, 1642, 1485, 2430, 1657, 2590, 149, 2589, 1813,
	3130, 1510, 1764, 1577, 2657, 177, 2569, 1713, 3078, 3350,
	2249, 2718, 2381, 209, 209, 170, 3286, 1988, 2123, 1516,
	209, 3238, 1493, 171, 2583, 1756, 1662, 1972, 1194, 762,
	209, 3297, 3294, 2435, 826, 2623, 2810, 1305, 2862, 209,
	2285, 209, 3324, 209, 662, 3206, 1420, 209, 3323, 2999,
	1612, 1768, 1182, 1340, 1715, 755, 1192, 1717, 966, 209,
	1721, 2518, 753, 2430, 2423, 2424, 2416, 2417, 2418, 2419,
	2421, 2422, 3287, 1699, 2130, 757, 3372, 751, 3124, 1665,
	3121, 748, 3120, 2431, 2146, 1847, 2146, 1845, 3119, 1680,
	1973, 1725, 1752, 1681, 1755, 2833, 2844, 2145, 627, 1143,
	209, 1143, 2841, 2840, 2807, 2806, 1143, 2370, 2245, 2369,
	209, 209, 2368, 2367, 794, 2335, 1160, 574, 3016, 577,
	1143, 1143, 1785, 209, 1464, 1776, 1193, 1159, 2155, 209,
	2202, 2196, 2193, 2174, 569, 209, 1339, 209, 2112, 209,
	1928, 209, 1372, 209, 1156, 2507, 1998, 993, 1997, 1886,
	1817, 1720, 2431, 209, 2119, 209, 1729, 1854, 1974, 1971,
	1658, 1246, 1783, 745, 209, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1298, 2986, 1030, 628, 3059, 1826, 1682, 1227,
	1303, 1226, 2658, 209, 1692, 1746, 793, 1745, 2173, 209,
	1684, 1855, 1822, 2426, 2427, 2428, 556, 1188, 3205, 2983,
	2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 1042,
	992, 1030, 1689, 2847, 1406, 2158, 1796, 796, 1778, 1798,
	1943, 2105, 1800, 1225, 1029, 1224, 1803, 794, 1781, 1818,
	2165, 1313, 1744, 622, 2557, 1693, 1694, 736, 3258, 1943,
	2984, 1285, 2820, 1861, 1686, 1379, 1951, 1864, 2164, 1782,
	1976, 1949, 795, 3106, 789, 1829, 1396, 1397, 2660, 787,
	1976, 1029, 2426, 2427, 2428, 1299, 1586, 1335, 2133, 2425,
	2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 1882, 1883,
	2135, 1810, 1399, 574, 1013, 577, 1959, 1960, 1666, 562,
	2659, 3282, 1671, 1668, 1042, 2305, 1011, 679, 2346, 793,
	1205, 2995, 621, 1561, 1959, 1985, 2701, 1338, 1398, 1988,
	3221, 1836, 2136, 3342, 1317, 2323, 2324, 3315, 1336, 2618,
	2344, 1856, 1859, 1190, 2698, 2134, 1687, 2566, 737, 1862,
	3323, 2190, 2561, 1687, 1712, 3362, 1203, 209, 2422, 1793,
	2020, 1853, 2024, 2024, 2037, 2157, 1959, 1970, 2619, 2057,
	2059, 1671, 2184, 1697, 2063, 2577, 1671, 2184, 3183, 1205,
	1611, 1042, 209, 1860, 1858, 795, 1671, 2184, 1863, 1365,
	564, 209, 776, 1202, 209, 776, 776, 1042, 2979, 1873,
	2517, 2980, 1874, 1875, 2546, 792, 630, 629, 1404, 796,
	2103, 2519, 2699, 1022, 2831, 1984, 2143, 659, 1976, 1488,
	2842, 2618, 796, 3314, 2111, 2233, 796, 1569, 3283, 981,
	2100, 981, 1939, 2414, 2415, 2194, 2982, 810, 1426, 1427,
	1428, 2341, 1687, 2545, 2548, 2086, 2904, 1245, 2985, 2096,
	2097, 749, 2342, 1304, 1937, 2347, 3219, 1955, 749, 2993,
	1351, 3069, 2310, 3194, 620, 2550, 619, 3056, 759, 1649,
	1676, 758, 954, 750, 1995, 209, 982, 749, 2156, 1982,
	1846, 558, 1844, 1187, 2821, 3220, 738, 1683, 1680, 1419,
	1454, 1695, 1681, 982, 623, 1023, 1680, 563, 1979, 2385,
	1681, 3284, 1024, 1302, 1976, 736, 1042, 796, 2549, 2114,
	2080, 209, 785, 2095, 736, 795, 3340, 2032, 792, 209,
	139, 2048, 2076, 512, 2061, 991, 1695, 787, 2900, 209,
	1314, 2069, 2070, 3281, 2798, 1872, 787, 560, 2077, 2081,
	2082, 746, 209, 2313, 1006, 1143, 3107, 507, 2906, 2981,
	1300, 1322, 1557, 3313, 3322, 1933, 3320, 209, 1042, 3136,
	2337, 209, 209, 1934, 3028, 2420, 1935, 3055, 2606, 1940,
	2240, 786, 2120, 2994, 557, 2147, 1757, 1682, 1420, 1942,
	1536, 1315, 3341, 1950, 1312, 1682, 739, 209, 209, 1684,
	1004, 209, 2343, 1499, 1017, 2228, 737, 1684, 1378, 1925,
	1732, 2345, 2128, 2177, 3363, 737, 209, 999, 1794, 1828,
	561, 2220, 499, 209, 3343, 209, 2755, 209, 1491, 1492,
	2191, 559, 1134, 209, 740, 2176, 209, 2169, 209, 581,
	209, 2127, 209, 209, 2312, 209, 1143, 1143, 1143, 2131,
	1143, 2159, 2161, 1686, 209, 209, 2430, 209, 1539, 1010,
	2309, 1686, 2853, 209, 1348, 1387, 1386, 2199, 985, 2905,
	985, 3057, 2499, 1022, 209, 2150, 209, 2297, 2040, 2580,
	2946, 2303, 2212, 2304, 2214, 1696, 1543, 1572, 3112, 1586,
	1586, 2273, 2274, 2204, 209, 209, 209, 2203, 209, 2185,
	2187, 2188, 2189, 3111, 2167, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 2175, 2260, 1936, 2242, 1546, 1160,
	574, 209, 577, 1716, 1543, 1938, 2251, 2192, 2251, 1687,
	2208, 2284, 2299, 2217, 2300, 1454, 2078, 2311, 1923, 1926,
	2262, 1539, 1687, 3094, 738, 2431, 1349, 2232, 3357, 2275,
	1687, 1544, 1385, 738, 3173, 1023, 1546, 2756, 1723, 2998,
	139, 2809, 1024, 2757, 2271, 2607, 2997, 2255, 1656, 2530,
	2483, 2552, 2269, 3195, 1541, 2526, 1850, 2241, 1722, 1678,
	2224, 1387, 2221, 1611, 1611, 1777, 1922, 2270, 1766, 1544,
	1765, 2276, 1285, 1740, 1869, 2298, 2286, 2266, 1022, 2267,
	2697, 2268, 3229, 508, 1652, 2867, 1719, 1543, 2338, 1542,
	1323, 983, 2178, 983, 1386, 3032, 1350, 2947, 2363, 2364,
	209, 2218, 1248, 3095, 2536, 2315, 2471, 2374, 1823, 1693,
	1694, 2535, 1654, 2373, 582, 583, 2329, 2318, 2472, 1546,
	2075, 2074, 2109, 1545, 739, 1885, 2108, 1655, 1233, 2320,
	678, 784, 2230, 739, 1219, 509, 793, 1541, 1231, 3102,
	514, 2484, 2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421,
	2422, 1220, 1544, 2317, 3178, 3, 1683, 3018, 2652, 1775,
	1023, 1545, 740, 3327, 1683, 3128, 2579, 1024, 3092, 3356,
	1870, 740, 1542, 510, 3232, 511, 3179, 2952, 2770, 2336,
	1385, 1993, 671, 3329, 2996, 2444, 796, 1924, 1042, 2500,
	2451, 3074, 1363, 2945, 2846, 3196, 2456, 2443, 585, 584,
	2681, 2463, 2464, 3093, 209, 2502, 2465, 209, 2408, 2348,
	1989, 2201, 2171, 1345, 209, 2126, 3103, 209, 209, 1042,
	1343, 1567, 1564, 1364, 1333, 1331, 2179, 2180, 1042, 1295,
	789, 2307, 3233, 209, 3180, 1329, 2306, 2302, 1327, 1852,
	2503, 1833, 2380, 1325, 1545, 2486, 2479, 209, 586, 587,
	1319, 1644, 1502, 2470, 2513, 1209, 2487, 2488, 1229, 1992,
	1843, 3277, 3226, 2972, 209, 209, 209, 2865, 2826, 2824,
	209, 2478, 2808, 209, 1586, 2605, 2592, 2515, 2591, 2246,
	209, 209, 209, 209, 209, 2490, 2495, 981, 2235, 2520,
	747, 982, 2234, 2104, 209, 209, 2215, 1807, 1806, 982,
	982, 2474, 209, 982, 981, 2494, 1804, 1802, 2505, 2609,
	1799, 2532, 1797, 1795, 209, 1143, 1786, 209, 1232, 2538,
	1737, 2542, 2543, 1042, 2457, 676, 677, 982, 1230, 2485,
	513, 1042, 1735, 1726, 2527, 987, 209, 2460, 1362, 209,
	209, 2709, 1389, 2531, 1714, 2467, 2468, 1711, 1583, 2473,
	1698, 1143, 209, 1688, 1143, 1143, 1143, 2523, 2477, 1344,
	3140, 209, 2480, 2560, 2501, 3324, 1342, 209, 1611, 2595,
	1332, 1330, 2537, 209, 2540, 209, 2593, 669, 670, 2040,
	2040, 1328, 209, 2516, 1326, 2521, 2446, 2447, 2448, 1324,
	1685, 2327, 2567, 3250, 1755, 2553, 1318, 2554, 2511, 2512,
	2350, 2351, 2141, 1842, 1228, 1143, 1143, 3048, 2625, 2551,
	1674, 752, 754, 209, 209, 1685, 3047, 209, 2639, 2556,
	963, 1184, 2562, 3142, 1390, 2572, 2146, 2573, 2614, 209,
	1042, 209, 209, 1042, 209, 2613, 2570, 2162, 2655, 2176,
	2576, 2146, 2571, 2565, 964, 1725, 2163, 2876, 2575, 1695,
	209, 1725, 2160, 1360, 1361, 1830, 3185, 3160, 2953, 2563,
	1396, 1397, 2328, 2564, 2181, 2622, 1396, 1397, 2166, 1393,
	2198, 515, 2168, 3225, 2622, 3198, 2857, 2852, 2794, 2040,
	2040, 2040, 2254, 2504, 2062, 1647, 2612, 1578, 3338, 3355,
	2624, 796, 1399, 1042, 2414, 2415, 1396, 1397, 2638, 2631,
	2437, 2438, 2439, 1467, 1042, 2799, 209, 1307, 2665, 139,
	2138, 2137, 1398, 1306, 2704, 2650, 985, 2138, 1398, 526,
	2509, 2139, 2001, 2000, 1999, 1996, 965, 1994, 1967, 2923,
	2633, 2634, 2635, 985, 2636, 2637, 1347, 2696, 1465, 1346,
	2654, 1463, 3364, 3086, 2662, 2693, 2694, 2695, 3042, 3020,
	2663, 2895, 2884, 2667, 2860, 2669, 2850, 2849, 2848, 2823,
	2632, 2684, 2603, 1470, 2666, 2601, 2264, 1475, 2719, 2239,
	2216, 1954, 1789, 1788, 1787, 1769, 1748, 1747, 901, 1743,
	1742, 1741, 1739, 1738, 1538, 2767, 2689, 1380, 1359, 1358,
	1882, 2725, 1341, 1337, 1334, 1320, 2700, 2702, 2703, 209,
	1257, 1256, 1255, 2708, 1254, 1253, 1882, 2735, 1252, 2715,
	1251, 209, 1250, 1249, 1247, 1242, 1241, 1042, 205, 1240,
	502, 503, 1239, 1238, 520, 502, 520, 530, 535, 2724,
	1201, 551, 1200, 1199, 2732, 209, 2788, 2763, 2783, 205,
	2721, 1198, 2805, 2759, 2722, 2734, 1197, 1196, 1195, 1189,
	1183, 1181, 2771, 1180, 1009, 1008, 938, 668, 848, 983,
	1650, 205, 760, 614, 2720, 2760, 744, 3105, 1353, 75,
	1191, 601, 69, 2822, 3237, 2768, 983, 734, 209, 2544,
	1832, 1321, 1758, 2773, 2774, 1834, 139, 2776, 2476, 1586,
	2834, 2083, 3218, 2931, 2384, 3166, 3068, 982, 1991, 1484,
	71, 836, 921, 2973, 2811, 2290, 2289, 803, 2790, 2843,
	1045, 209, 209, 209, 1659, 209, 842, 1672, 2845, 1701,
	2122, 2023, 1582, 845, 1586, 1584, 1042, 209, 847, 2797,
	846, 1143, 2838, 1585, 802, 1486, 1705, 844, 1581, 2229,
	2258, 1583, 1583, 2779, 1236, 724, 1663, 2812, 209, 502,
	502, 1948, 1986, 2379, 1481, 816, 838, 205, 2880, 1983,
	1002, 209, 209, 1143, 1143, 1143, 815, 209, 209, 209,
	2873, 2481, 209, 209, 2040, 2040, 2839, 2617, 1702, 209,
	2793, 2176, 3037, 1611, 2802, 2891, 2872, 1868, 2319, 2869,
	1865, 2856, 1042, 1755, 2462, 2677, 2678, 617, 2903, 2868,
	2411, 1968, 2832, 994, 2825, 2045, 2827, 2038, 2034, 2859,
	1367, 1456, 981, 2259, 1032, 819, 1946, 1472, 1611, 2353,
	981, 981, 2492, 2921, 981, 2489, 2870, 2874, 2626, 2117,
	1876, 962, 961, 960, 2497, 3243, 2882, 209, 2881, 3240,
	2260, 2902, 1653, 2892, 2893, 2886, 2894, 2887, 981, 1706,
	2908, 2863, 2132, 982, 2040, 2040, 2040, 2040, 2040, 2040,
	2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
	2040, 2040, 2040, 2897, 2040, 2736, 2737, 2738, 2739, 2740,
	2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750,
	2751, 2752, 2753, 2754, 2917, 2758, 2898, 1448, 209, 2460,
	832, 2461, 2653, 1206, 3184, 2957, 1447, 756, 1042, 3175,
	1042, 1021, 1707, 1708, 1020, 1278, 1019, 2909, 2529, 3361,
	2819, 1703, 1586, 175, 172, 174, 173, 209, 209, 209,
	2836, 2578, 91, 38, 2944, 37, 36, 2497, 18, 209,
	115, 114, 113, 112, 111, 209, 2992, 209, 1704, 110,
	209, 209, 209, 209, 209, 109, 108, 3002, 3003, 107,
	106, 209, 209, 1143, 105, 1042, 2970, 1143, 104, 2991,
	103, 1586, 1586, 102, 101, 2958, 100, 99, 2960, 2964,
	2955, 2956, 98, 209, 97, 3001, 1042, 1586, 1586, 1143,
	96, 95, 3006, 2971, 94, 2494, 2990, 982, 93, 209,
	92, 35, 547, 544, 51, 50, 3022, 90, 89, 17,
	34, 3015, 15, 55, 56, 14, 1611, 982, 1586, 2969,
	209, 30, 31, 81, 3036, 1042, 80, 3052, 29, 3010,
	16, 1709, 28, 2961, 3023, 26, 1151, 3000, 27, 1040,
	3011, 985, 1755, 2954, 12, 3005, 1583, 3034, 3049, 985,
	985, 1042, 3025, 985, 3035, 3041, 2959, 3033, 9, 8,
	11, 2614, 13, 25, 144, 1611, 1611, 143, 3043, 74,
	142, 73, 141, 140, 72, 24, 10, 985, 23, 3019,
	136, 1611, 1611, 996, 3024, 68, 138, 1042, 3080, 3060,
	3014, 2622, 668, 209, 1710, 209, 137, 1042, 209, 2706,
	3058, 65, 135, 134, 3040, 66, 209, 3065, 133, 132,
	2712, 3030, 1611, 1007, 67, 131, 22, 6, 54, 7,
	551, 3053, 2656, 84, 85, 32, 3089, 63, 62, 209,
	61, 802, 21, 3088, 53, 802, 205, 20, 205, 205,
	166, 1148, 209, 205, 3084, 165, 3081, 3082, 164, 209,
	163, 205, 1162, 159, 1143, 3132, 1572, 3087, 3123, 209,
	3076, 158, 162, 160, 161, 3108, 3141, 1164, 157, 1168,
	130, 1174, 168, 167, 155, 152, 1186, 151, 3133, 154,
	209, 3135, 1952, 3122, 983, 156, 3145, 3131, 153, 150,
	1208, 3114, 983, 983, 205, 205, 983, 1148, 169, 209,
	3143, 1470, 3149, 3150, 129, 209, 3144, 3139, 58, 205,
	128, 127, 3138, 209, 126, 125, 2872, 1244, 981, 124,
	983, 57, 3137, 2796, 19, 2, 1, 0, 0, 3181,
	3172, 205, 205, 205, 205, 1148, 3085, 0, 0, 0,
	209, 209, 0, 551, 3169, 205, 3171, 0, 2044, 2614,
	0, 0, 0, 0, 1293, 1586, 3159, 209, 1143, 3193,
	0, 1296, 0, 209, 3115, 3116, 0, 1143, 1143, 0,
	0, 0, 0, 0, 0, 209, 0, 209, 3212, 3189,
	0, 0, 3216, 0, 3217, 0, 0, 3164, 0, 0,
	3200, 2414, 2415, 3204, 0, 3222, 3209, 209, 0, 0,
	0, 3208, 0, 209, 209, 3234, 1042, 3215, 0, 205,
	3235, 3210, 3211, 0, 0, 209, 3203, 0, 0, 0,
	0, 3245, 3251, 205, 0, 3246, 0, 3248, 0, 3253,
	0, 3255, 3188, 0, 0, 3239, 0, 3262, 535, 0,
	3247, 0, 0, 3263, 0, 209, 0, 0, 0, 1611,
	0, 2429, 3257, 0, 3259, 0, 3288, 0, 0, 0,
	0, 0, 0, 3273, 3274, 0, 0, 3276, 0, 0,
	3275, 0, 0, 0, 981, 3301, 0, 0, 3303, 209,
	3305, 0, 0, 2040, 0, 0, 3310, 3290, 3311, 0,
	1449, 1450, 1451, 1452, 1453, 3312, 0, 3302, 209, 0,
	3308, 3309, 3307, 0, 3073, 0, 3304, 0, 3306, 0,
	0, 0, 0, 0, 0, 3318, 0, 3321, 3319, 0,
	1469, 209, 2040, 2420, 3326, 3252, 1482, 3332, 3330, 3334,
	3245, 3325, 3328, 0, 3331, 3337, 0, 0, 0, 3336,
	0, 0, 0, 3097, 0, 0, 0, 985, 0, 0,
	0, 0, 3345, 3344, 0, 0, 0, 3352, 0, 0,
	0, 1583, 0, 3351, 3354, 3353, 0, 3358, 0, 0,
	0, 2260, 0, 0, 0, 0, 3365, 1136, 3366, 0,
	0, 3359, 3360, 0, 0, 0, 0, 0, 0, 3369,
	3370, 3371, 3373, 3374, 2986, 0, 1583, 0, 0, 0,
	0, 3378, 0, 0, 2430, 0, 0, 0, 0, 0,
	3376, 0, 2040, 0, 0, 0, 2963, 0, 981, 0,
	2983, 1586, 0, 2976, 0, 0, 0, 0, 0, 1210,
	1213, 502, 0, 3163, 0, 0, 2974, 0, 981, 0,
	0, 0, 2978, 1467, 0, 1532, 1532, 1532, 0, 0,
	0, 0, 205, 0, 205, 0, 0, 205, 0, 0,
	0, 2984, 59, 0, 0, 0, 0, 0, 1162, 0,
	205, 0, 1586, 60, 0, 0, 0, 0, 205, 1162,
	520, 1291, 0, 205, 1162, 837, 88, 64, 0, 551,
	983, 2977, 0, 2431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 802, 0, 0, 1611, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 1396,
	1397, 1040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 1586, 0,
	0, 0, 0, 0, 0, 1399, 86, 3066, 0, 0,
	77, 0, 0, 88, 0, 0, 1611, 0, 0, 2044,
	2044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 3066, 1583, 0, 0, 0, 78, 2979,
	0, 0, 2980, 1885, 0, 0, 0, 0, 0, 0,
	2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 0,
	0, 0, 0, 0, 0, 777, 0, 0, 0, 0,
	0, 0, 0, 0, 797, 2912, 205, 2982, 0, 0,
	0, 0, 1611, 1583, 1583, 0, 983, 985, 0, 2985,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 1583,
	1583, 1404, 0, 0, 972, 88, 0, 985, 0, 2044,
	2044, 2044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 0, 0, 0, 0, 0, 205, 0,
	1583, 1426, 1427, 1428, 0, 0, 0, 0, 1774, 0,
	0, 0, 0, 0, 79, 0, 0, 205, 0, 205,
	0, 205, 0, 0, 0, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1790, 0, 0,
	0, 0, 0, 0, 0, 145, 82, 0, 83, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	2981, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 664,
	0, 0, 116, 0, 0, 0, 0, 0, 1148, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 551, 0, 0, 0, 178, 0, 205, 0, 0,
	0, 0, 205, 205, 0, 205, 0, 205, 0, 205,
	983, 205, 1885, 1425, 1574, 0, 0, 0, 117, 0,
	0, 1848, 0, 1849, 0, 0, 0, 0, 0, 0,
	149, 1420, 205, 0, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 535, 0, 0, 0, 0, 171, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1866, 0, 1871, 0, 0, 0, 0, 148, 1878, 0,
	0, 0, 0, 0, 0, 1887, 1888, 1889, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	0, 1927, 0, 1929, 1930, 1931, 1932, 1583, 0, 0,
	0, 2414, 2415, 0, 2432, 2433, 2434, 0, 0, 0,
	0, 0, 0, 1956, 0, 0, 0, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 1469, 0,
	0, 0, 1981, 0, 2044, 2044, 0, 0, 0, 0,
	0, 0, 1728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2429, 0, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	0, 0, 0, 0, 2036, 502, 2047, 2049, 2054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	502, 0, 0, 0, 0, 0, 0, 205, 0, 502,
	0, 0, 205, 0, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
	2044, 2044, 2044, 2420, 2044, 0, 59, 0, 0, 88,
	0, 88, 0, 88, 0, 0, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2436, 64, 0, 1396, 1397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1811, 0, 0, 0,
	0, 0, 0, 0, 2435, 0, 0, 0, 0, 1399,
	0, 70, 0, 520, 0, 1824, 1825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2430, 1398, 0, 0, 797, 88,
	0, 76, 0, 1418, 0, 0, 88, 0, 0, 2154,
	86, 0, 0, 88, 77, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 60, 0, 0, 0,
	205, 0, 0, 1583, 0, 0, 0, 0, 0, 2680,
	64, 0, 78, 0, 0, 205, 0, 0, 0, 205,
	2209, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 2211,
	0, 2213, 0, 0, 0, 1404, 0, 0, 0, 0,
	70, 0, 0, 2431, 0, 205, 1162, 0, 0, 205,
	0, 0, 1396, 1397, 1583, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1774, 1426, 1427, 1428, 0, 0,
	76, 2154, 0, 502, 0, 2263, 0, 0, 1399, 86,
	0, 205, 0, 77, 205, 0, 205, 0, 205, 0,
	205, 205, 0, 1148, 0, 777, 0, 0, 0, 0,
	0, 0, 2282, 668, 1398, 2154, 0, 0, 0, 0,
	0, 205, 1418, 1459, 0, 0, 1419, 0, 79, 0,
	0, 78, 1162, 0, 1162, 0, 0, 0, 0, 0,
	1583, 1468, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 205, 205, 205, 0, 205, 0, 0, 145,
	82, 0, 83, 2426, 2427, 2428, 0, 0, 2675, 0,
	2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 205,
	0, 176, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 664, 1404, 0, 116, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 178,
	0, 0, 0, 0, 1426, 1427, 1428, 2333, 2334, 0,
	0, 0, 0, 2340, 0, 0, 0, 79, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2354, 2355, 149, 0, 0, 0, 1981, 0,
	0, 0, 177, 0, 0, 0, 0, 2362, 145, 82,
	0, 83, 170, 0, 0, 1419, 88, 0, 1162, 1553,
	171, 1556, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 2382, 0, 0, 0, 0, 0, 0,
	0, 148, 664, 0, 0, 116, 0, 2397, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1399, 0, 0, 0, 0, 1425, 0, 0, 0,
	2195, 117, 0, 0, 0, 2054, 2054, 2054, 0, 0,
	0, 0, 0, 149, 1420, 205, 0, 1398, 0, 0,
	1532, 177, 0, 205, 205, 1418, 0, 205, 2466, 0,
	0, 170, 502, 0, 0, 502, 0, 0, 0, 171,
	0, 0, 502, 2044, 0, 502, 502, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2674, 0, 0, 0, 1162, 0, 0, 0, 0,
	0, 0, 2044, 802, 0, 0, 0, 1421, 1422, 1423,
	1424, 2272, 205, 2154, 2525, 802, 0, 1404, 2154, 0,
	0, 2525, 0, 0, 0, 0, 0, 0, 2154, 2525,
	2154, 2525, 2525, 0, 0, 0, 0, 0, 0, 0,
	2547, 0, 205, 205, 0, 0, 0, 1426, 1427, 1428,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 205, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2582, 0, 0, 2584, 2587, 0,
	0, 0, 2044, 0, 0, 0, 0, 0, 1419, 0,
	205, 0, 0, 0, 0, 0, 902, 0, 0, 205,
	0, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 2154, 0, 502, 2615, 0, 0, 0, 0, 0,
	2154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1774, 0, 797, 1774, 0, 206, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 2661, 0, 1148,
	205, 0, 205, 0, 0, 0, 0, 1420, 0, 206,
	0, 0, 0, 0, 0, 0, 2668, 0, 205, 0,
	1878, 1396, 1397, 0, 0, 0, 2672, 2673, 0, 0,
	2676, 0, 0, 0, 2679, 0, 0, 0, 0, 0,
	0, 0, 0, 2683, 0, 0, 0, 1399, 0, 0,
	0, 0, 2690, 0, 0, 2466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1398, 2717, 0, 2710, 0, 0, 0,
	0, 1418, 0, 0, 777, 0, 0, 777, 777, 0,
	0, 0, 0, 0, 0, 2726, 2727, 0, 2728, 2729,
	2730, 0, 0, 2731, 0, 0, 0, 2733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 2761, 2762,
	0, 0, 1945, 1421, 1422, 1423, 1424, 868, 0, 0,
	0, 0, 0, 1404, 0, 0, 797, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 2778, 502, 0, 1468,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 502,
	0, 0, 0, 1426, 1427, 1428, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 0, 0, 0, 575, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2568, 0, 0, 0, 0, 0, 0, 0, 2813, 2816,
	575, 0, 0, 0, 1419, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 551, 0, 0, 0,
	0, 2835, 0, 0, 1556, 0, 2596, 0, 0, 2598,
	2599, 2600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 2854,
	205, 205, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	2645, 2646, 0, 1532, 0, 0, 2154, 205, 0, 0,
	0, 0, 0, 1420, 2883, 0, 984, 0, 0, 2282,
	2282, 0, 0, 0, 0, 668, 668, 2154, 0, 0,
	1774, 1774, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2910,
	2911, 0, 0, 0, 0, 2915, 2916, 0, 0, 0,
	2919, 2920, 0, 0, 0, 0, 88, 2924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 2932, 2929, 0, 0, 0,
	0, 0, 0, 2933, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 88, 0, 0, 0, 0, 0, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 205, 0, 0, 0, 0, 1162, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 88, 0, 0,
	568, 205, 0, 0, 206, 1047, 206, 206, 1047, 0,
	1047, 206, 0, 0, 0, 2154, 2525, 2154, 0, 206,
	0, 0, 0, 0, 88, 0, 0, 1162, 0, 0,
	0, 0, 2816, 2154, 0, 2525, 0, 0, 1162, 1162,
	205, 2154, 2525, 0, 0, 0, 0, 0, 0, 205,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 1047, 206, 206, 0, 0, 0, 0, 0, 0,
	0, 3027, 0, 0, 0, 2414, 2415, 206, 2432, 2433,
	2434, 0, 0, 0, 0, 0, 0, 2154, 0, 0,
	0, 1396, 1397, 0, 2686, 0, 0, 0, 0, 206,
	206, 206, 206, 0, 1047, 1047, 0, 0, 1162, 1047,
	0, 2816, 1047, 206, 0, 0, 0, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3061, 3062, 3063,
	0, 0, 0, 0, 0, 2429, 0, 0, 0, 0,
	0, 0, 1945, 1398, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 3071, 3072, 0, 0, 1047, 0, 0,
	0, 0, 0, 1468, 0, 0, 0, 3079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 2154, 0, 2525, 0, 0, 3091, 0, 2888, 2889,
	2890, 206, 0, 0, 205, 0, 0, 2339, 0, 0,
	0, 0, 0, 0, 2816, 0, 0, 2420, 0, 0,
	0, 0, 3113, 1421, 1422, 1423, 1424, 551, 0, 0,
	0, 0, 0, 1404, 802, 204, 0, 204, 204, 0,
	2587, 3125, 204, 0, 0, 0, 0, 205, 0, 0,
	575, 2816, 0, 0, 2816, 0, 0, 1162, 0, 0,
	0, 0, 0, 1426, 1427, 1428, 0, 0, 2435, 0,
	0, 0, 0, 0, 0, 2816, 2816, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 204, 204, 0, 0, 2717, 2430, 0,
	972, 972, 0, 502, 972, 0, 0, 0, 204, 0,
	872, 3091, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 3174, 0, 0, 3177, 0, 0, 0, 0, 0,
	204, 204, 204, 204, 0, 0, 0, 0, 2154, 2525,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 2525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 1162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 2431, 0, 0,
	0, 0, 0, 0, 88, 3230, 88, 0, 3012, 0,
	0, 1162, 205, 1420, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 205, 0, 0, 802, 0, 0, 0,
	0, 0, 204, 0, 88, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 2717, 3272, 3272, 3272, 1047, 206, 206,
	0, 0, 0, 0, 0, 1047, 206, 0, 0, 0,
	0, 206, 0, 3291, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2154, 797, 2816,
	0, 2816, 0, 0, 0, 0, 1043, 0, 0, 1144,
	1047, 1043, 0, 0, 3272, 0, 3091, 2426, 2427, 2428,
	0, 0, 0, 88, 2425, 2423, 2424, 2416, 2417, 2418,
	2419, 2421, 2422, 0, 0, 0, 0, 0, 0, 1162,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 2414,
	2415, 0, 2432, 2433, 2434, 0, 0, 0, 207, 0,
	0, 1144, 1144, 0, 0, 0, 0, 0, 2685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3272, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 1144, 0, 0, 2429,
	1144, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 206, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2414, 2415, 0, 2432, 2433, 2434, 0, 1144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 0, 984, 0, 0, 204, 0, 0, 206,
	206, 2420, 0, 0, 0, 0, 206, 0, 0, 204,
	1555, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	88, 0, 575, 0, 0, 206, 0, 206, 814, 206,
	0, 2429, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 2435, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 88, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2430, 0, 0, 1047, 0, 1047, 0, 0,
	0, 0, 1047, 1398, 0, 0, 0, 206, 0, 0,
	0, 1418, 0, 2420, 0, 0, 1047, 1047, 1415, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	206, 206, 0, 206, 0, 206, 0, 206, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 2435, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 2431, 0, 1404, 0, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 2430, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 1047, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 1044,
	0, 0, 1145, 0, 1044, 0, 0, 0, 0, 0,
	204, 204, 0, 0, 1442, 1443, 0, 204, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 1434, 204, 0,
	204, 0, 0, 0, 1419, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 1145, 1145, 1144, 568, 0, 0,
	0, 1444, 568, 2431, 0, 0, 0, 0, 0, 0,
	1047, 2426, 2427, 2428, 0, 1433, 0, 0, 2425, 2423,
	2424, 2416, 2417, 2418, 2419, 2421, 2422, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 1145, 1145,
	0, 0, 0, 1145, 0, 0, 1145, 0, 204, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 972, 0,
	0, 575, 204, 1420, 204, 0, 204, 1047, 204, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 1145, 0, 1047, 0, 0, 977, 0, 1437, 0,
	0, 204, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 2426, 2427, 2428, 0, 0, 0, 0,
	2425, 2423, 2424, 2416, 2417, 2418, 2419, 2421, 2422, 0,
	1399, 0, 0, 1445, 0, 0, 200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 88, 1144, 814, 1398, 0, 0, 814,
	0, 1043, 0, 0, 1418, 0, 0, 1126, 0, 0,
	0, 1415, 1126, 88, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 1047, 2940, 0, 0, 0, 2939, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 0, 1404, 0, 206, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 1047, 0, 0, 206, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 1144, 206, 1144, 984,
	0, 0, 0, 1144, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 1144, 1144, 0,
	1434, 204, 0, 0, 0, 0, 0, 1419, 0, 206,
	0, 568, 206, 0, 206, 0, 206, 0, 206, 206,
	0, 0, 1047, 1047, 1047, 0, 1047, 0, 0, 0,
	1945, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 1145,
	206, 206, 206, 0, 206, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 206, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 575, 0,
	1399, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 1398, 0, 204, 0,
	0, 0, 0, 1435, 1418, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 1145, 0, 0,
	204, 0, 0, 204, 1044, 204, 0, 204, 1043, 204,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2332, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 0, 1404, 0, 0, 0,
	0, 651, 0, 0, 1047, 0, 0, 0, 0, 1126,
	0, 204, 204, 204, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 204, 0,
	0, 0, 0, 0, 1047, 0, 814, 0, 0, 0,
	0, 0, 1126, 0, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 1037, 0, 0, 0, 0, 0,
	0, 1155, 0, 0, 0, 0, 0, 1419, 636, 1145,
	206, 1145, 0, 1043, 0, 0, 1145, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 0,
	1145, 1145, 0, 0, 0, 0, 0, 0, 0, 637,
	206, 206, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 1144, 0, 0, 0, 638, 0, 0, 0,
	206, 1047, 0, 0, 0, 1043, 0, 1237, 0, 1047,
	0, 0, 0, 0, 0, 0, 639, 1047, 1425, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1261,
	1261, 1261, 1155, 0, 0, 0, 1420, 1047, 206, 0,
	1047, 1047, 1047, 1292, 0, 655, 0, 206, 0, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 1144, 1144, 0, 1144, 0, 0,
	0, 1047, 1047, 0, 984, 0, 0, 0, 0, 206,
	0, 0, 984, 984, 0, 0, 984, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 206, 1047,
	206, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	1555, 0, 0, 642, 0, 0, 206, 0, 0, 0,
	1432, 0, 0, 0, 1044, 0, 0, 1399, 659, 643,
	1445, 0, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 1398, 0, 0, 658, 0, 0, 1047,
	0, 1418, 0, 644, 0, 0, 645, 0, 1415, 0,
	1047, 0, 653, 0, 0, 0, 0, 0, 0, 646,
	0, 204, 204, 0, 0, 0, 0, 0, 0, 1555,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 1044, 647, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 650,
	0, 0, 0, 1404, 649, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 657, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 652, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 1126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1419, 0, 1044, 0, 0, 204,
	0, 204, 0, 0, 0, 1043, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 1562, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 1570, 0,
	0, 0, 1126, 0, 0, 1145, 1043, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 1044, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 206,
	0, 206, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 1047, 206, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 1047,
	1047, 1047, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 1145, 1145, 1145, 0,
	1145, 0, 1144, 0, 0, 0, 0, 0, 1047, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	0, 1144, 1144, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 2402, 0, 0, 0, 2403, 0, 0,
	0, 0, 1144, 1144, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1750,
	0, 0, 0, 0, 0, 0, 1761, 1043, 0, 0,
	1043, 0, 0, 0, 1047, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 0, 1780, 0, 1780,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 204,
	204, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 1047,
	1043, 1047, 0, 1047, 0, 0, 984, 0, 0, 0,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1047, 0, 0, 1047, 0, 1820, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 1831, 0, 0, 0, 0,
	0, 1837, 0, 1838, 0, 1839, 0, 1840, 0, 1841,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	1851, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	0, 0, 0, 1047, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1145, 0, 0, 0, 204,
	0, 0, 0, 1044, 0, 0, 206, 0, 204, 204,
	0, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 1144, 0,
	0, 1145, 0, 0, 1145, 1145, 1145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1144, 1144, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2101, 0, 0, 206, 1047, 1145, 1145, 0, 0, 1043,
	0, 0, 0, 1047, 1047, 0, 1126, 705, 0, 736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 1126, 0, 0,
	206, 0, 1047, 710, 0, 0, 1126, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 711, 814, 0, 0,
	0, 713, 0, 0, 0, 741, 0, 0, 0, 814,
	0, 719, 720, 1044, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 1044, 0, 0, 0, 0, 0,
	737, 714, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 1126, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 1155, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 709, 0, 0, 0, 0,
	1144, 0, 1043, 0, 1144, 0, 0, 0, 0, 0,
	0, 716, 717, 2227, 0, 0, 0, 1761, 0, 0,
	0, 0, 0, 1043, 0, 0, 1144, 0, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 1044, 0, 0,
	718, 0, 0, 0, 204, 0, 0, 0, 0, 2265,
	0, 0, 1261, 0, 1261, 722, 1261, 0, 1155, 1155,
	0, 0, 1043, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1126, 2301,
	0, 1126, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	2314, 1155, 2316, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 2330, 0, 0,
	0, 1126, 0, 732, 0, 0, 1044, 0, 0, 0,
	0, 1145, 1126, 727, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 725, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 1145, 1145, 1145, 0, 0, 0, 0,
	0, 1144, 728, 0, 0, 0, 726, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 1044, 729, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 731, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 733, 0, 1399, 0, 0, 1445,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1398, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 1144, 0, 1415, 0, 0,
	0, 0, 0, 0, 1144, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 0,
	1044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 0, 1404, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 0, 1044, 0, 1145, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	2522, 0, 0, 0, 0, 0, 1044, 0, 0, 1145,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	2559, 2227, 0, 0, 0, 0, 1434, 0, 0, 0,
	1126, 0, 0, 1419, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1044, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2597, 0,
	0, 0, 0, 0, 0, 0, 0, 2604, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2649,
	0, 0, 0, 0, 0, 0, 1126, 1437, 1126, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 2664, 0,
	1155, 0, 0, 0, 1145, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 2670, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 0, 1126, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1126, 0, 0, 0, 0, 1435,
	0, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 1977, 0, 0, 0, 1978, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 1145, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 1145, 1145, 0,
	0, 1404, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 1044, 1432, 0, 0,
	0, 0, 0, 0, 1399, 1126, 0, 1445, 0, 0,
	0, 0, 1442, 1443, 0, 1126, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	1398, 0, 0, 0, 0, 1434, 0, 0, 1418, 0,
	0, 0, 1419, 0, 0, 1415, 0, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 0,
	1404, 0, 0, 1425, 0, 0, 0, 0, 2855, 0,
	0, 2858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 2864, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 2901, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 1126, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 1608, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 0, 1425, 0, 0, 2938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1620, 1602, 1609, 1592, 1630, 1629,
	0, 0, 1594, 1593, 0, 0, 0, 0, 0, 0,
	1640, 1641, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1631, 0, 1627, 1626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 3004, 0,
	0, 0, 0, 0, 0, 0, 0, 2227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1624, 1622, 1623, 0, 1435, 0, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 0, 0, 0, 2688, 1604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1613, 1607, 1615, 1617,
	1618, 1619, 1614, 0, 1612, 0, 0, 0, 0, 0,
	0, 0, 0, 1636, 1637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1596, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 0, 0,
	0, 1605, 0, 1606, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1621,
	0, 0, 0, 1589, 1587, 1588, 1591, 1590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1597, 1598,
	1600, 1601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1616, 1599, 0, 3157, 0, 0, 0,
	0, 0, 0, 0, 1639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1595, 0, 1632, 1633, 1634, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1603, 0, 0, 0, 0, 1610, 1638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1041, 0, 0, 0, 0,
	3236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3249, 214, 215, 216, 217, 218, 1048, 219, 1049,
	1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 1057, 226,
	227, 228, 229, 230, 231, 1058, 1059, 232, 458, 459,
	460, 1060, 233, 461, 1061, 1046, 1062, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1063, 243, 0,
	244, 245, 246, 1064, 923, 247, 248, 1065, 1066, 1068,
	1067, 1069, 1070, 1071, 249, 250, 251, 252, 253, 254,
	462, 463, 1072, 255, 1073, 257, 256, 1074, 258, 1075,
	1076, 259, 260, 261, 1077, 262, 1078, 263, 264, 1079,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 1080, 211, 1081, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 1082, 281, 1083, 1084,
	924, 282, 283, 1085, 284, 468, 1086, 469, 285, 1087,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 1088, 476, 294, 0, 0, 0, 212, 293, 295,
	302, 1089, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 1090, 475, 1091, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 1092,
	314, 313, 1093, 315, 477, 930, 316, 317, 931, 1094,
	318, 319, 1095, 1096, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	1097, 213, 933, 1098, 478, 479, 334, 335, 1099, 336,
	337, 338, 1100, 1101, 340, 341, 1102, 1103, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 1104, 351, 482, 352, 483, 353, 1105, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1106, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1107, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1108, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1109, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 1110, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1111, 419, 420,
	418, 1112, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 1113, 488, 489, 490, 491, 1114, 1115, 428, 429,
	492, 430, 493, 1116, 431, 432, 433, 0, 434, 435,
	1117, 1118, 436, 437, 438, 439, 441, 1119, 442, 1120,
	440, 443, 444, 445, 494, 495, 496, 1121, 447, 446,
	497, 1122, 1123, 1124, 1125, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 2088, 0, 0, 0, 0, 0, 0, 0, 0,
	2089, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2962, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3067, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053,
	1054, 1055, 1056, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 458, 459, 460, 1060, 233, 461, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 462, 463, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	468, 1086, 469, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 1088, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 1090, 475, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 477,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 478,
	479, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 482,
	352, 483, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 488, 489, 490,
	491, 1114, 1115, 428, 429, 492, 430, 493, 1116, 431,
	432, 433, 0, 434, 435, 1117, 1118, 436, 437, 438,
	439, 441, 1119, 442, 1120, 440, 443, 444, 445, 494,
	495, 496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125,
	448, 449, 498, 450, 451, 452, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2713, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2705, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 1041, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2581, 0, 214, 215, 216, 217, 218,
	1048, 219, 1049, 1050, 1051, 1052, 453, 1053, 1054, 1055,
	1056, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 1057, 226, 227, 228, 229, 230, 231, 1058, 1059,
	232, 458, 459, 460, 1060, 233, 461, 1061, 1046, 1062,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1063, 243, 0, 244, 245, 246, 1064, 923, 247, 248,
	1065, 1066, 1068, 1067, 1069, 1070, 1071, 249, 250, 251,
	252, 253, 254, 462, 463, 1072, 255, 1073, 257, 256,
	1074, 258, 1075, 1076, 259, 260, 261, 1077, 262, 1078,
	263, 264, 1079, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 1080, 211, 1081, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 1082,
	281, 1083, 1084, 924, 282, 283, 1085, 284, 468, 1086,
	469, 285, 1087, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 1088, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 1089, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 1090, 475, 1091, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 1092, 314, 313, 1093, 315, 477, 930, 316,
	317, 931, 1094, 318, 319, 1095, 1096, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 1097, 213, 933, 1098, 478, 479, 334,
	335, 1099, 336, 337, 338, 1100, 1101, 340, 341, 1102,
	1103, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 1104, 351, 482, 352, 483,
	353, 1105, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 1106, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 1107, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 1108, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 1109, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 1110, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	1111, 419, 420, 418, 1112, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 1113, 488, 489, 490, 491, 1114,
	1115, 428, 429, 492, 430, 493, 1116, 431, 432, 433,
	0, 434, 435, 1117, 1118, 436, 437, 438, 439, 441,
	1119, 442, 1120, 440, 443, 444, 445, 494, 495, 496,
	1121, 447, 446, 497, 1122, 1123, 1124, 1125, 448, 449,
	498, 450, 451, 452, 1041, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1990,
	0, 214, 215, 216, 217, 218, 1048, 219, 1049, 1050,
	1051, 1052, 453, 1053, 1054, 1055, 1056, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 1057, 226, 227,
	228, 229, 230, 231, 1058, 1059, 232, 458, 459, 460,
	1060, 233, 461, 1061, 1046, 1062, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1063, 243, 0, 244,
	245, 246, 1064, 923, 247, 248, 1065, 1066, 1068, 1067,
	1069, 1070, 1071, 249, 250, 251, 252, 253, 254, 462,
	463, 1072, 255, 1073, 257, 256, 1074, 258, 1075, 1076,
	259, 260, 261, 1077, 262, 1078, 263, 264, 1079, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	1080, 211, 1081, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 1082, 281, 1083, 1084, 924,
	282, 283, 1085, 284, 468, 1086, 469, 285, 1087, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 926,
	1088, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	1089, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	1090, 475, 1091, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 1092, 314,
	313, 1093, 315, 477, 930, 316, 317, 931, 1094, 318,
	319, 1095, 1096, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 1097,
	213, 933, 1098, 478, 479, 334, 335, 1099, 336, 337,
	338, 1100, 1101, 340, 341, 1102, 1103, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 1104, 351, 482, 352, 483, 353, 1105, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 1106,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 1107, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 1108, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 1109, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 1110, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 1111, 419, 420, 418,
	1112, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	1113, 488, 489, 490, 491, 1114, 1115, 428, 429, 492,
	430, 493, 1116, 431, 432, 433, 0, 434, 435, 1117,
	1118, 436, 437, 438, 439, 441, 1119, 442, 1120, 440,
	443, 444, 445, 494, 495, 496, 1121, 447, 446, 497,
	1122, 1123, 1124, 1125, 448, 449, 498, 450, 451, 452,
	1149, 0, 1041, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1733, 0, 0, 0, 214,
	215, 216, 217, 218, 1048, 219, 1049, 1050, 1051, 1052,
	453, 1053, 1054, 1055, 1056, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 1057, 226, 227, 228, 229,
	230, 231, 1058, 1059, 232, 458, 459, 460, 1060, 233,
	461, 1061, 1046, 1062, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 1063, 243, 0, 244, 245, 246,
	1064, 923, 247, 248, 1065, 1066, 1068, 1067, 1069, 1070,
	1071, 249, 250, 251, 252, 253, 254, 462, 463, 1072,
	255, 1073, 257, 256, 1074, 258, 1075, 1076, 259, 260,
	261, 1077, 262, 1078, 263, 264, 1079, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 1080, 211,
	1081, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 1082, 281, 1083, 1084, 924, 282, 283,
	1085, 284, 468, 1086, 469, 285, 1087, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 1088, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 1089, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 1090, 475,
	1091, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 1092, 314, 313, 1093,
	315, 477, 930, 316, 317, 931, 1094, 318, 319, 1095,
	1096, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 1097, 213, 933,
	1098, 478, 479, 334, 335, 1099, 336, 337, 338, 1100,
	1101, 340, 341, 1102, 1103, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 1104,
	351, 482, 352, 483, 353, 1105, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 1106, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 1107, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	1108, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 1109, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 1110, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 1111, 419, 420, 418, 1112, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 1113, 488,
	489, 490, 491, 1114, 1115, 428, 429, 492, 430, 493,
	1116, 431, 432, 433, 0, 434, 435, 1117, 1118, 436,
	437, 438, 439, 441, 1119, 442, 1120, 440, 443, 444,
	445, 494, 495, 496, 1121, 447, 446, 497, 1122, 1123,
	1124, 1125, 448, 449, 498, 450, 451, 452, 1038, 0,
	1041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 1048, 219, 1049, 1050, 1051, 1052, 453, 1053,
	1054, 1055, 1056, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 1057, 226, 227, 228, 229, 230, 231,
	1058, 1059, 232, 458, 459, 460, 1060, 233, 461, 1061,
	1046, 1062, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1063, 243, 0, 244, 245, 246, 1064, 923,
	247, 248, 1065, 1066, 1068, 1067, 1069, 1070, 1071, 249,
	250, 251, 252, 253, 254, 462, 463, 1072, 255, 1073,
	257, 256, 1074, 258, 1075, 1076, 259, 260, 261, 1077,
	262, 1078, 263, 264, 1079, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 1080, 211, 1081, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 1082, 281, 1083, 1084, 924, 282, 283, 1085, 284,
	468, 1086, 469, 285, 1087, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 1088, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 1089, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 1090, 475, 1091, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 1092, 314, 313, 1093, 315, 477,
	930, 316, 317, 931, 1094, 318, 319, 1095, 1096, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 1097, 213, 933, 1098, 478,
	479, 334, 335, 1099, 336, 337, 338, 1100, 1101, 340,
	341, 1102, 1103, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 1104, 351, 482,
	352, 483, 353, 1105, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 1106, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	1107, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 1108, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 1109,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 1110,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 1111, 419, 420, 418, 1112, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 1113, 488, 489, 490,
	491, 1114, 1115, 428, 429, 492, 430, 493, 1116, 431,
	432, 433, 0, 434, 435, 1117, 1118, 436, 437, 438,
	439, 441, 1119, 442, 1120, 440, 443, 444, 445, 494,
	495, 496, 1121, 447, 446, 497, 1122, 1123, 1124, 1125,
	448, 449, 498, 450, 451, 452, 1041, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 1048, 219,
	1049, 1050, 1051, 1052, 453, 1053, 1054, 1055, 1056, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 1057,
	226, 227, 228, 229, 230, 231, 1058, 1059, 232, 458,
	459, 460, 1060, 233, 461, 1061, 1046, 1062, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1063, 243,
	0, 244, 245, 246, 1064, 923, 247, 248, 1065, 1066,
	1068, 1067, 1069, 1070, 1071, 249, 250, 251, 252, 253,
	254, 462, 463, 1072, 255, 1073, 257, 256, 1074, 258,
	1075, 1076, 259, 260, 261, 1077, 262, 1078, 263, 264,
	1079, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 1080, 211, 1081, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 1082, 281, 1083,
	1084, 924, 282, 283, 1085, 284, 468, 1086, 469, 285,
	1087, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 1088, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 1089, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 1090, 475, 1091, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	1092, 314, 313, 1093, 315, 477, 930, 316, 317, 931,
	1094, 318, 319, 1095, 1096, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 1097, 213, 933, 1098, 478, 479, 334, 335, 1099,
	336, 337, 338, 1100, 1101, 340, 341, 1102, 1103, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 1104, 351, 482, 352, 483, 353, 1105,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 1106, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 1107, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 1108, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 1109, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 1110, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 1111, 419,
	420, 418, 1112, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 1113, 488, 489, 490, 491, 1114, 1115, 428,
	429, 492, 430, 493, 1116, 431, 432, 433, 0, 434,
	435, 1117, 1118, 436, 437, 438, 439, 441, 1119, 442,
	1120, 440, 443, 444, 445, 494, 495, 496, 1121, 447,
	446, 497, 1122, 1123, 1124, 1125, 448, 449, 498, 450,
	451, 452, 1966, 0, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 1963, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 1964, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 1962, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 1965, 0, 0, 0, 0,
	0, 0, 835, 1961, 0, 0, 0, 798, 833, 865,
	822, 823, 824, 820, 821, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 213, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 176, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 178, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 1286, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 170, 448,
	449, 498, 450, 451, 452, 809, 171, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	865, 822, 823, 824, 820, 821, 834, 1473, 1471, 0,
	0, 0, 0, 833, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 914, 839,
	0, 0, 0, 220, 221, 222, 454, 880, 859, 891,
	849, 890, 889, 0, 226, 851, 850, 229, 230, 231,
	841, 913, 232, 949, 950, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 894, 254, 887, 886, 811, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 885, 261, 0,
	262, 0, 263, 264, 0, 817, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 830, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 884, 882, 883, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 840, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 861, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 873,
	864, 875, 877, 878, 879, 874, 0, 866, 0, 303,
	927, 928, 304, 305, 306, 929, 899, 900, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 853, 327,
	932, 330, 331, 333, 332, 808, 213, 933, 831, 918,
	888, 334, 335, 0, 862, 337, 863, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 881, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 818, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 176, 399,
	400, 854, 855, 857, 858, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 876, 856, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 922, 412, 413,
	414, 944, 0, 419, 420, 418, 178, 421, 422, 423,
	424, 425, 269, 426, 270, 852, 0, 895, 896, 897,
	898, 0, 0, 428, 429, 945, 430, 946, 829, 431,
	432, 433, 0, 434, 435, 0, 812, 436, 437, 438,
	439, 441, 912, 442, 0, 860, 443, 444, 445, 1286,
	892, 939, 0, 447, 446, 497, 0, 0, 0, 170,
	448, 449, 498, 450, 451, 452, 809, 171, 0, 0,
	0, 0, 0, 0, 807, 0, 0, 0, 0, 805,
	806, 865, 822, 823, 824, 820, 821, 834, 1473, 2352,
	0, 0, 0, 0, 833, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 0, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 176,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 178, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	1286, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	170, 448, 449, 498, 450, 451, 452, 809, 171, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 1473,
	1471, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 2050, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 2055, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 2051,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 2052, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 801, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 813, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 813, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 865,
	822, 823, 824, 820, 821, 834, 835, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 839, 0,
	0, 0, 220, 221, 222, 454, 880, 859, 891, 849,
	890, 889, 0, 226, 851, 850, 229, 230, 231, 841,
	913, 232, 949, 950, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 894, 254, 887, 886, 811, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 885, 261, 0, 262,
	0, 263, 264, 0, 817, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 830, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 884, 882, 883, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 840, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 861, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 873, 864,
	875, 877, 878, 879, 874, 0, 866, 0, 303, 927,
	928, 304, 305, 306, 929, 899, 900, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 853, 327, 932,
	330, 331, 333, 332, 808, 2875, 933, 831, 918, 888,
	334, 335, 0, 862, 337, 863, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 881, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 818, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	854, 855, 857, 858, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 876, 856, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 922, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 852, 0, 895, 896, 897, 898,
	0, 0, 428, 429, 945, 430, 946, 829, 431, 432,
	433, 0, 434, 435, 0, 812, 436, 437, 438, 439,
	441, 912, 442, 0, 860, 443, 444, 445, 494, 892,
	939, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 809, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 805, 806,
	1533, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 833, 865, 822, 823, 824, 820, 821,
	834, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 2692, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 1880, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 1879, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 434, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 454, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 434,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 1533, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	833, 865, 822, 823, 824, 820, 821, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	216, 217, 218, 0, 219, 0, 0, 0, 0, 914,
	839, 0, 0, 0, 220, 221, 222, 454, 880, 859,
	891, 849, 890, 889, 0, 226, 851, 850, 229, 230,
	231, 841, 913, 232, 949, 950, 460, 0, 233, 920,
	0, 903, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	923, 247, 248, 906, 904, 905, 910, 908, 907, 909,
	249, 250, 251, 252, 894, 254, 887, 886, 811, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 885, 261,
	0, 262, 0, 263, 264, 0, 817, 265, 266, 268,
	271, 267, 272, 273, 274, 940, 941, 830, 211, 0,
	0, 0, 0, 0, 275, 276, 277, 884, 882, 883,
	0, 280, 0, 281, 0, 2055, 924, 282, 283, 0,
	284, 947, 0, 840, 285, 0, 286, 287, 288, 289,
	290, 291, 292, 915, 916, 919, 926, 0, 917, 861,
	0, 0, 0, 212, 293, 295, 302, 0, 925, 296,
	873, 864, 875, 877, 878, 879, 874, 0, 866, 0,
	303, 927, 928, 304, 305, 306, 929, 899, 900, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	948, 930, 316, 317, 931, 0, 318, 319, 0, 0,
	320, 0, 321, 322, 325, 323, 324, 326, 328, 853,
	327, 932, 330, 331, 333, 332, 808, 213, 933, 831,
	918, 888, 334, 335, 0, 862, 337, 863, 0, 0,
	340, 341, 0, 0, 342, 480, 934, 343, 935, 942,
	344, 339, 345, 346, 347, 348, 349, 350, 0, 351,
	943, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 881, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 936, 377, 378, 379, 380, 818, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 854, 855, 857, 858, 394, 398, 401, 402,
	911, 403, 383, 384, 404, 937, 405, 876, 856, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 922, 412,
	413, 414, 944, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 269, 426, 270, 852, 0, 895, 896,
	897, 898, 0, 0, 428, 429, 945, 430, 946, 829,
	431, 432, 433, 0, 434, 435, 0, 812, 436, 437,
	438, 439, 441, 912, 442, 0, 860, 443, 444, 445,
	494, 892, 939, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 809, 0, 0,
	0, 0, 0, 0, 0, 807, 0, 0, 0, 0,
	805, 806, 865, 822, 823, 824, 820, 821, 834, 835,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 1471, 0, 0, 0, 2060, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	2058, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 2046, 833, 865, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	2035, 833, 865, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 254, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 0, 0, 0, 0, 0, 0, 0,
	835, 0, 0, 0, 0, 2033, 833, 2025, 822, 823,
	824, 820, 821, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 2028, 887, 886, 811, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 2029, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 2030, 2027, 328, 853, 327, 932, 330, 331,
	333, 332, 808, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 2031, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 812, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 2026, 452, 809, 0, 0, 0, 0, 0, 0,
	0, 807, 0, 0, 0, 0, 805, 806, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	2022, 833, 2025, 822, 823, 824, 820, 821, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	914, 839, 0, 0, 0, 220, 221, 222, 454, 880,
	859, 891, 849, 890, 889, 0, 226, 851, 850, 229,
	230, 231, 841, 913, 232, 949, 950, 460, 0, 233,
	920, 0, 903, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 906, 904, 905, 910, 908, 907,
	909, 249, 250, 251, 252, 894, 2028, 887, 886, 811,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 885,
	261, 0, 262, 0, 263, 264, 0, 817, 265, 266,
	268, 271, 267, 272, 273, 274, 940, 941, 830, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 884, 882,
	883, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 947, 0, 840, 285, 0, 286, 287, 2029,
	289, 290, 291, 292, 915, 916, 919, 926, 0, 917,
	861, 0, 0, 0, 212, 293, 295, 302, 0, 925,
	296, 873, 864, 875, 877, 878, 879, 874, 0, 866,
	0, 303, 927, 928, 304, 305, 306, 929, 899, 900,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 948, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 2030, 2027, 328,
	853, 327, 932, 330, 331, 333, 332, 808, 213, 933,
	831, 918, 888, 334, 335, 0, 862, 337, 863, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	942, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 943, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 881, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 818,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 2031,
	0, 399, 400, 854, 855, 857, 858, 394, 398, 401,
	402, 911, 403, 383, 384, 404, 937, 405, 876, 856,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 922,
	412, 413, 414, 944, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 852, 0, 895,
	896, 897, 898, 0, 0, 428, 429, 945, 430, 946,
	829, 431, 432, 433, 0, 434, 435, 0, 812, 436,
	437, 438, 439, 441, 912, 442, 0, 860, 443, 444,
	445, 494, 892, 939, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 2026, 452, 809, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 805, 806, 865, 822, 823, 824, 820, 821, 834,
	835, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 0, 0, 0, 0, 0, 1479,
	0, 835, 0, 0, 0, 0, 0, 833, 865, 822,
	823, 824, 820, 821, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	1867, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 1176, 833, 865, 822, 823, 824, 820, 821, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 1175, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 1170, 833, 865, 822,
	823, 824, 820, 821, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 454, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1169, 916, 919, 926, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 927, 928,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 933, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 434, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 809, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 805, 806, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 1165, 833, 865, 822, 823, 824, 820, 821, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 839, 0, 0, 0, 220, 221, 222, 454,
	880, 859, 891, 849, 890, 889, 0, 226, 851, 850,
	229, 230, 231, 841, 913, 232, 949, 950, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 894, 254, 887, 886,
	811, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	885, 261, 0, 262, 0, 263, 264, 0, 817, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 830,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 884,
	882, 883, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 840, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 861, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 873, 864, 875, 877, 878, 879, 874, 0,
	866, 0, 303, 927, 928, 304, 305, 306, 929, 899,
	900, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 853, 327, 932, 330, 331, 333, 332, 808, 213,
	933, 831, 918, 888, 334, 335, 0, 862, 337, 863,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 881, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	818, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 854, 855, 857, 858, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 876,
	856, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	922, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 852, 0,
	895, 896, 897, 898, 0, 0, 428, 429, 945, 430,
	946, 829, 431, 432, 433, 0, 434, 435, 0, 812,
	436, 437, 438, 439, 441, 912, 442, 0, 860, 443,
	444, 445, 494, 892, 939, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 809,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 0, 805, 806, 865, 822, 823, 824, 820, 821,
	834, 835, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 914, 839, 0, 0, 0, 220, 221, 222,
	454, 880, 859, 891, 849, 890, 889, 0, 226, 851,
	850, 229, 230, 231, 841, 913, 232, 949, 950, 460,
	0, 233, 920, 0, 903, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 906, 904, 905, 910,
	908, 907, 909, 249, 250, 251, 252, 894, 254, 887,
	886, 811, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 885, 261, 0, 262, 0, 263, 264, 0, 817,
	265, 266, 268, 271, 267, 272, 273, 274, 940, 941,
	830, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	884, 882, 883, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 947, 0, 840, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 915, 916, 919, 926,
	0, 917, 861, 0, 0, 0, 212, 293, 295, 302,
	0, 925, 296, 873, 864, 875, 877, 878, 879, 874,
	0, 866, 0, 303, 927, 928, 304, 305, 306, 929,
	899, 900, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 948, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 853, 327, 932, 330, 331, 333, 332, 808,
	213, 933, 831, 918, 888, 334, 335, 0, 862, 337,
	863, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 942, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 943, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 881, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 818, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 854, 855, 857, 858, 394,
	398, 401, 402, 911, 403, 383, 384, 404, 937, 405,
	876, 856, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 922, 412, 413, 414, 944, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 852,
	0, 895, 896, 897, 898, 0, 0, 428, 429, 945,
	430, 946, 829, 431, 432, 433, 0, 434, 435, 0,
	812, 436, 437, 438, 439, 441, 912, 442, 0, 860,
	443, 444, 445, 494, 892, 939, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	809, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 805, 806, 865, 822, 823, 824, 820,
	821, 834, 835, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 914, 839, 0, 0, 0, 220, 221,
	222, 454, 880, 859, 891, 849, 890, 889, 0, 226,
	851, 850, 229, 230, 231, 841, 913, 232, 949, 950,
	460, 0, 233, 920, 0, 903, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 3271, 906, 904, 905,
	910, 908, 907, 909, 249, 250, 251, 252, 894, 254,
	887, 886, 811, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 885, 261, 0, 262, 0, 263, 264, 0,
	817, 265, 266, 268, 271, 267, 272, 273, 274, 940,
	941, 830, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 884, 882, 883, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 947, 0, 840, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 915, 916, 919,
	926, 0, 917, 861, 0, 0, 0, 212, 293, 295,
	302, 0, 925, 296, 873, 864, 875, 877, 878, 879,
	874, 0, 866, 0, 303, 927, 928, 304, 305, 306,
	929, 899, 900, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 948, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 853, 327, 932, 330, 331, 333, 332,
	808, 213, 933, 831, 918, 888, 334, 335, 0, 862,
	337, 863, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 942, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 943, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 881, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 818, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 854, 855, 857, 858,
	394, 398, 401, 402, 911, 403, 383, 384, 404, 937,
	405, 876, 856, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 922, 412, 413, 414, 944, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	852, 0, 895, 896, 897, 898, 0, 0, 428, 429,
	945, 430, 946, 829, 431, 432, 433, 0, 3270, 435,
	0, 812, 436, 437, 438, 439, 441, 912, 442, 0,
	860, 443, 444, 445, 494, 892, 939, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 809, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 805, 806, 865, 822, 823, 824,
	820, 821, 834, 835, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 839, 0, 0, 0, 220,
	221, 222, 3269, 880, 859, 891, 849, 890, 889, 0,
	226, 851, 850, 229, 230, 231, 841, 913, 232, 949,
	950, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 3271, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 894,
	254, 887, 886, 811, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 885, 261, 0, 262, 0, 263, 264,
	0, 817, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 830, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 884, 882, 883, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 840, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 861, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 873, 864, 875, 877, 878,
	879, 874, 0, 866, 0, 303, 927, 928, 304, 305,
	306, 929, 899, 900, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 853, 327, 932, 330, 331, 333,
	332, 808, 213, 933, 831, 918, 888, 334, 335, 0,
	862, 337, 863, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 881, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 818, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 854, 855, 857,
	858, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 876, 856, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 922, 412, 413, 414, 944, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 852, 0, 895, 896, 897, 898, 0, 0, 428,
	429, 945, 430, 946, 829, 431, 432, 433, 0, 3270,
	435, 0, 812, 436, 437, 438, 439, 441, 912, 442,
	0, 860, 443, 444, 445, 494, 892, 939, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 809, 0, 0, 0, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 805, 806, 865, 822, 823,
	824, 820, 821, 834, 835, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 914, 839, 0, 0, 0,
	220, 221, 222, 454, 880, 859, 891, 849, 890, 889,
	0, 226, 851, 850, 229, 230, 231, 841, 913, 232,
	949, 950, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	894, 254, 887, 886, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 885, 261, 0, 262, 0, 263,
	264, 0, 817, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 830, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 884, 882, 883, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 840,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 861, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 873, 864, 875, 877,
	878, 879, 874, 0, 866, 0, 303, 927, 928, 304,
	305, 306, 929, 899, 900, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 853, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 831, 918, 888, 334, 335,
	0, 862, 337, 863, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 881,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 818, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 854, 855,
	857, 858, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 876, 856, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 922, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 852, 0, 895, 896, 897, 898, 0, 0,
	428, 429, 945, 430, 946, 829, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 912,
	442, 0, 860, 443, 444, 445, 494, 892, 939, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 2043, 0, 0, 0, 0, 2041, 2042, 865, 822,
	823, 824, 820, 821, 834, 835, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 839, 0, 0,
	0, 220, 221, 222, 0, 880, 859, 891, 849, 890,
	889, 0, 226, 851, 850, 229, 230, 231, 841, 913,
	232, 949, 950, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 3271,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 894, 254, 887, 886, 811, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 885, 261, 0, 262, 0,
	263, 264, 0, 817, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 830, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 884, 882, 883, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	840, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 0, 0, 917, 861, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 873, 864, 875,
	877, 878, 879, 874, 0, 866, 0, 303, 0, 0,
	304, 305, 306, 929, 899, 900, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 948, 930, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 853, 327, 932, 330,
	331, 333, 332, 808, 213, 0, 831, 918, 888, 334,
	335, 0, 862, 337, 863, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	881, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 818, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 854,
	855, 857, 858, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 0, 405, 876, 856, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 922, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 852, 0, 895, 896, 897, 898, 0,
	0, 428, 429, 945, 430, 946, 829, 431, 432, 433,
	0, 3270, 435, 0, 812, 436, 437, 438, 439, 441,
	912, 442, 0, 860, 443, 444, 445, 494, 892, 939,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 798, 0,
	986, 0, 0, 0, 0, 0, 0, 805, 806, 0,
	0, 0, 0, 0, 0, 0, 835, 214, 215, 216,
	217, 218, 833, 219, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 913, 232, 458, 459, 460, 0, 233, 920, 0,
	903, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 906, 904, 905, 910, 908, 907, 909, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 940, 941, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	947, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 915, 916, 919, 926, 0, 917, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 973, 314, 313, 0, 315, 948,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 213, 933, 0, 918,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 942, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 943,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 980, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 176, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 911,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 944, 0, 419, 420, 418, 178, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 945, 430, 946, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 912, 442, 0, 440, 443, 444, 445, 1286,
	495, 496, 0, 447, 446, 497, 986, 0, 0, 170,
	448, 449, 498, 450, 451, 452, 0, 171, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 914, 0, 970, 0, 1558, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 913, 232, 458,
	459, 460, 0, 233, 920, 0, 903, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 906, 904,
	905, 910, 908, 907, 909, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	940, 941, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 947, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 915, 916,
	919, 926, 0, 917, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	973, 314, 313, 0, 315, 948, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 213, 933, 0, 918, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 942, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 943, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 980, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 176, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 911, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 944, 0, 419,
	420, 418, 178, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 945, 430, 946, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 912, 442,
	0, 440, 443, 444, 445, 1286, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 170, 448, 449, 498, 450,
	451, 452, 0, 171, 0, 0, 2459, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 1558, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 913,
	232, 458, 459, 460, 0, 233, 920, 0, 903, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	906, 904, 905, 910, 908, 907, 909, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 940, 941, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 947, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	915, 916, 919, 926, 0, 917, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 973, 314, 313, 0, 315, 948, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 213, 933, 0, 918, 479, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 942, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 943, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 980, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 911, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 944,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 945, 430, 946, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	912, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 969, 0, 986, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 970, 914, 975, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 913, 232,
	458, 459, 460, 0, 233, 920, 0, 903, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 906,
	904, 905, 910, 908, 907, 909, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 940, 941, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 947, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 915,
	916, 919, 926, 0, 917, 294, 0, 0, 0, 212,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 973, 314, 313, 0, 315, 948, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 213, 933, 0, 918, 479, 334, 335,
	0, 336, 337, 338, 0, 978, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 942, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 943, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 980, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 911, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 944, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 945, 430, 946, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 912,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 986, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 914, 0, 970, 0, 975, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 913, 232, 458, 459, 460, 0,
	233, 920, 0, 903, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 906, 904, 905, 910, 908,
	907, 909, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 940, 941, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 947, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 915, 916, 919, 926, 0,
	917, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 973, 314, 313,
	0, 315, 948, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 213,
	933, 0, 918, 479, 334, 335, 0, 336, 337, 338,
	0, 978, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 942, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 943, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 980, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 911, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 944, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 945, 430,
	946, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 912, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 986,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 0, 970,
	0, 975, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	913, 232, 458, 459, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 0, 918, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 980, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 945, 430, 946, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 798, 0, 1142, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 1460, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 176, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 178, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 1286, 495, 496, 0,
	447, 446, 497, 1283, 0, 1142, 170, 448, 449, 498,
	450, 451, 452, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 148, 0, 0, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 1046, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 923, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 211, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	924, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	926, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 925, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 927, 928, 304, 305, 306,
	929, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 930, 316, 317, 931, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 932, 330, 331, 333, 332,
	0, 0, 933, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	934, 343, 935, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 936, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 176, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 937,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 178, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 1286, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 170, 448, 449, 498, 450, 451,
	452, 0, 171, 0, 0, 0, 0, 1142, 1141, 0,
	0, 0, 0, 1139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 1046, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 923, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 211, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 924, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 926, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 925, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 927, 928, 304,
	305, 306, 929, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 930, 316, 317,
	931, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 932, 330, 331,
	333, 332, 0, 0, 933, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 934, 343, 935, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 936,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 937, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 1142, 1141, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 2644, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 1046, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 923, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 924, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 926, 0,
	476, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	925, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 927, 928, 304, 305, 306, 929, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 930, 316, 317, 931, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 932, 330, 331, 333, 332, 0, 0,
	933, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 934, 343,
	935, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 936, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 937, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 986,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 914, 0, 0,
	0, 1290, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	913, 232, 458, 459, 460, 0, 233, 920, 0, 903,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 923, 247,
	248, 906, 904, 905, 910, 908, 907, 909, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 940, 941, 0, 211, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 924, 282, 283, 0, 284, 947,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 915, 916, 919, 926, 0, 917, 294, 0, 0,
	0, 212, 293, 295, 302, 0, 925, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 927,
	928, 304, 305, 306, 929, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 948, 930,
	316, 317, 931, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 932,
	330, 331, 333, 332, 0, 213, 933, 0, 918, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 934, 343, 935, 942, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 943, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 936, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 911, 403,
	383, 384, 404, 937, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	944, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 945, 430, 946, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 912, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 798, 0, 208, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 216, 217, 218, 0,
	219, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	220, 221, 222, 454, 455, 223, 456, 224, 225, 457,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	458, 459, 460, 0, 233, 461, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 462, 463, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 464, 265, 266, 268, 271, 267, 272, 273,
	274, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 467, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 468, 0, 469,
	285, 0, 286, 287, 288, 289, 290, 291, 292, 470,
	471, 472, 0, 0, 476, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 473, 298, 297, 299,
	300, 301, 474, 0, 475, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 477, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 0, 321, 322,
	325, 323, 324, 326, 328, 329, 327, 0, 330, 331,
	333, 332, 0, 0, 0, 0, 478, 479, 334, 335,
	0, 336, 337, 338, 0, 0, 340, 341, 0, 0,
	342, 480, 0, 343, 0, 481, 344, 339, 345, 346,
	347, 348, 349, 350, 0, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 176, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 178, 421, 422, 423, 424, 425, 269,
	426, 270, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 1286, 495, 496, 0,
	447, 446, 497, 208, 0, 0, 170, 448, 449, 498,
	450, 451, 452, 0, 171, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 0, 0, 148, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 208,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 216, 217,
	218, 0, 219, 0, 0, 0, 0, 453, 0, 0,
	0, 1563, 220, 221, 222, 454, 455, 223, 456, 224,
	225, 457, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 458, 459, 460, 0, 233, 461, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 462, 463, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 464, 265, 266, 268, 271, 267,
	272, 273, 274, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 467, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 468,
	0, 469, 285, 0, 286, 287, 288, 289, 290, 291,
	292, 470, 471, 472, 0, 0, 476, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 473, 298,
	297, 299, 300, 301, 474, 0, 475, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 477, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 0,
	321, 322, 325, 323, 324, 326, 328, 329, 327, 0,
	330, 331, 333, 332, 0, 0, 0, 0, 478, 479,
	334, 335, 0, 336, 337, 338, 0, 0, 340, 341,
	0, 0, 342, 480, 0, 343, 0, 481, 344, 339,
	345, 346, 347, 348, 349, 350, 0, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 269, 426, 270, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 208, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 216, 217, 218, 0, 219, 0,
	0, 0, 0, 453, 0, 0, 0, 2261, 220, 221,
	222, 454, 455, 223, 456, 224, 225, 457, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 458, 459,
	460, 0, 233, 461, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	462, 463, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	464, 265, 266, 268, 271, 267, 272, 273, 274, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 467, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 468, 0, 469, 285, 0,
	286, 287, 288, 289, 290, 291, 292, 470, 471, 472,
	0, 0, 476, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 473, 298, 297, 299, 300, 301,
	474, 0, 475, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 477, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 0, 321, 322, 325, 323,
	324, 326, 328, 329, 327, 0, 330, 331, 333, 332,
	0, 0, 0, 0, 478, 479, 334, 335, 0, 336,
	337, 338, 0, 0, 340, 341, 0, 0, 342, 480,
	0, 343, 0, 481, 344, 339, 345, 346, 347, 348,
	349, 350, 0, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 269, 426, 270,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 675, 0, 567, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 216, 217, 218, 0, 219, 0, 0, 0,
	0, 453, 0, 2716, 0, 0, 220, 221, 222, 454,
	455, 223, 456, 224, 225, 457, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 458, 459, 460, 0,
	233, 461, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 573, 252, 253, 254, 462, 463,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 464, 265,
	266, 268, 271, 267, 272, 273, 274, 465, 466, 0,
	211, 0, 0, 0, 0, 0, 275, 276, 277, 467,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 468, 0, 469, 285, 0, 286, 287,
	288, 289, 290, 291, 292, 470, 471, 472, 0, 0,
	476, 294, 0, 0, 0, 212, 293, 295, 302, 0,
	0, 296, 473, 298, 297, 299, 300, 301, 474, 0,
	475, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 477, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 0, 321, 322, 325, 323, 324, 326,
	328, 329, 327, 0, 330, 331, 333, 332, 0, 213,
	0, 0, 478, 479, 334, 335, 0, 336, 337, 338,
	0, 0, 340, 341, 0, 0, 342, 480, 0, 343,
	0, 481, 344, 339, 345, 346, 347, 348, 349, 350,
	0, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 572,
	421, 422, 423, 424, 425, 269, 426, 270, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	566, 0, 567, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 576, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 573, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 572, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 567, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 576, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 573, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 1835, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	572, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 567, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 576, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 573, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 572, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 576, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1311, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 576,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 1310,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 1309, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1281, 0, 1142, 1141, 0, 0, 0, 0,
	1139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 1046, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 923, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 924,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1280, 471, 472, 926,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 925, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 927, 928, 304, 305, 306, 929,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 930, 316, 317, 931, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 932, 330, 331, 333, 332, 0,
	0, 933, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 934,
	343, 935, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 936, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 937, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	1277, 0, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1276, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 1215, 0,
	1142, 1141, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1214, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1212, 0, 1142, 1141,
	0, 0, 0, 0, 1139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1211, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 1135, 0, 1142, 1141, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 1046, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 923, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 924, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1137, 471,
	472, 926, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 925, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 927, 928, 304, 305,
	306, 929, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 930, 316, 317, 931,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 932, 330, 331, 333,
	332, 0, 0, 933, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 934, 343, 935, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 936, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	937, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 1142, 1141, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 1046, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 923, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 924, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 926, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 925,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 927, 928, 304, 305, 306, 929, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 930, 316, 317, 931, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 932, 330, 331, 333, 332, 0, 0, 933,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 934, 343, 935,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 936, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 937, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1142, 1141,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 1046, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 923, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 924, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 926, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 925, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 927, 928,
	304, 305, 306, 929, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 930, 316,
	317, 931, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 932, 330,
	331, 333, 332, 0, 0, 933, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 934, 343, 935, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	936, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 937, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	1142, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	1046, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 923,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 924, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 926, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 925, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	927, 928, 304, 305, 306, 929, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	930, 316, 317, 931, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	932, 330, 331, 333, 332, 0, 0, 933, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 934, 343, 935, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 936, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 937, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 2155, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 2152, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 2296,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 2158, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 2293, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 2295, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 2292, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 2157, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 2294, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	2155, 233, 461, 0, 0, 2149, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 2152, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 2158, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2148, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 2157, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	2156, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1354, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 1357, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 1355, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 1356, 446, 497, 1130, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1132, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 978, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1127, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1129, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 978, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1034, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1036, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 978, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 529, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 528, 218, 518, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 521, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 522, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 523, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	517, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 518, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	521, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	522, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	523, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 978, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	2226, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1821, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 1760, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1754, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1753, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1749, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1751, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1270, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1269, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1267, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 211, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1266, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 212, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	213, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1264, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 211,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1263, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 212, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 213, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1260, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 211, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 1259, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 212, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 213, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1235, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 1152, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 211, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1154, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 212, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 213, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 211, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	212, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 213, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 521, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 522, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 523, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 667, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 666, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 506, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 505, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 504, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 2093, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 208, 2283, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 2837, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 208, 2283, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 2280, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 1827, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1819, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 549, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 1014, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 550,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 546, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 545, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1772, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	1771, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 539, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 1289, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 1274, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1273, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	1223, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 1222, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 1207, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 1146, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 1014, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	1015, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	997, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 549, 0, 208, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 539, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 537,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 470, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 538, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 550, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 540, 381, 0, 382, 386, 387, 546,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 541, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 545, 489, 490, 491, 0, 0, 428,
	543, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 533, 0, 208, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 470, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 534, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	531, 0, 208, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 525, 0,
	208, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 501, 0, 208, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 2541, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 2539, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 2528, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	2243, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 285, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 347, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 534, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 208, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 214,
	215, 216, 217, 218, 0, 219, 0, 0, 0, 0,
	453, 0, 1784, 0, 0, 220, 221, 222, 454, 455,
	223, 456, 224, 225, 457, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 458, 459, 460, 0, 233,
	461, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 462, 463, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 464, 265, 266,
	268, 271, 267, 272, 273, 274, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 467, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 468, 0, 469, 285, 0, 286, 287, 288,
	289, 290, 291, 292, 470, 471, 472, 0, 0, 476,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 473, 298, 297, 299, 300, 301, 474, 0, 475,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 477, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 0, 321, 322, 325, 323, 324, 326, 328,
	329, 327, 0, 330, 331, 333, 332, 0, 0, 0,
	0, 478, 479, 334, 335, 0, 336, 337, 338, 0,
	0, 340, 341, 0, 0, 342, 480, 0, 343, 0,
	481, 344, 339, 345, 346, 347, 348, 349, 350, 0,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 0, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 269, 426, 270, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 208, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 214, 215, 216, 217, 218, 0, 219, 0, 0,
	0, 0, 453, 0, 0, 0, 0, 220, 221, 222,
	454, 455, 223, 456, 224, 225, 457, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 458, 459, 460,
	0, 233, 461, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 462,
	463, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 464,
	265, 266, 268, 271, 267, 272, 273, 274, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	467, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 468, 0, 469, 285, 0, 286,
	287, 288, 289, 290, 291, 292, 1243, 471, 472, 0,
	0, 476, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 473, 298, 297, 299, 300, 301, 474,
	0, 475, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 477, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 0, 321, 322, 325, 323, 324,
	326, 328, 329, 327, 0, 330, 331, 333, 332, 0,
	0, 0, 0, 478, 479, 334, 335, 0, 336, 337,
	338, 0, 0, 340, 341, 0, 0, 342, 480, 0,
	343, 0, 481, 344, 339, 345, 346, 347, 348, 349,
	350, 0, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 269, 426, 270, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 208, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 214, 215, 216, 217, 218, 0, 219,
	0, 0, 0, 0, 453, 0, 0, 0, 0, 220,
	221, 222, 454, 455, 223, 456, 224, 225, 457, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 458,
	459, 460, 0, 233, 461, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 462, 463, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 464, 265, 266, 268, 271, 267, 272, 273, 274,
	465, 466, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 467, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 468, 0, 469, 285,
	0, 286, 287, 288, 289, 290, 291, 292, 1185, 471,
	472, 0, 0, 476, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 473, 298, 297, 299, 300,
	301, 474, 0, 475, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 477, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 0, 321, 322, 325,
	323, 324, 326, 328, 329, 327, 0, 330, 331, 333,
	332, 0, 0, 0, 0, 478, 479, 334, 335, 0,
	336, 337, 338, 0, 0, 340, 341, 0, 0, 342,
	480, 0, 343, 0, 481, 344, 339, 345, 346, 347,
	348, 349, 350, 0, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 269, 426,
	270, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 208, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 214, 215, 216, 217, 218,
	0, 219, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 220, 221, 222, 454, 455, 223, 456, 224, 225,
	457, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 458, 459, 460, 0, 233, 461, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 462, 463, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 464, 265, 266, 268, 271, 267, 272,
	273, 274, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 467, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 468, 0,
	469, 285, 0, 286, 287, 288, 289, 290, 291, 292,
	470, 471, 472, 0, 0, 476, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 473, 298, 297,
	299, 300, 301, 474, 0, 475, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 477, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 0, 321,
	322, 325, 323, 324, 326, 328, 329, 327, 0, 330,
	331, 333, 332, 0, 0, 0, 0, 478, 479, 334,
	335, 0, 336, 337, 338, 0, 0, 340, 341, 0,
	0, 342, 480, 0, 343, 0, 481, 344, 339, 345,
	346, 347, 348, 349, 350, 0, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 952, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	269, 426, 270, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	208, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 214, 215, 216,
	217, 218, 0, 219, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 220, 221, 222, 454, 455, 223, 456,
	224, 225, 457, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 458, 459, 460, 0, 233, 461, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 462, 463, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 464, 265, 266, 268, 271,
	267, 272, 273, 274, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 467, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	468, 0, 469, 0, 0, 286, 287, 288, 289, 290,
	291, 292, 470, 471, 472, 0, 0, 476, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 473,
	298, 297, 299, 300, 301, 474, 0, 475, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 477,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	0, 321, 322, 325, 323, 324, 326, 328, 329, 327,
	0, 330, 331, 333, 332, 0, 0, 0, 0, 478,
	479, 334, 335, 0, 336, 337, 338, 0, 0, 340,
	341, 0, 0, 342, 480, 0, 343, 0, 481, 344,
	339, 345, 346, 0, 348, 349, 350, 0, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 0,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 0, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 269, 426, 270, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 1399, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1398, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1399, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 1398, 0, 0, 0, 0, 1404, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 0, 1398,
	0, 0, 2405, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 2404, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	1398, 0, 0, 2401, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 0, 1398, 0, 0, 2400, 0,
	1404, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 0, 2399, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0, 1978,
	0, 1404, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 3231, 1398, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 3227, 1398, 0, 0,
	0, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1437, 0, 0, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 3162, 1398, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 3161, 1398, 0,
	0, 0, 0, 1404, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 1421, 1422,
	1423, 1424, 0, 0, 0, 0, 0, 1434, 1404, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1425, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1437, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0,
	0, 0, 0, 3070, 1398, 0, 0, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 2987, 1398,
	0, 0, 0, 0, 1404, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 1421,
	1422, 1423, 1424, 0, 0, 0, 0, 0, 1434, 1404,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 1425, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1437, 0, 0, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	0, 0, 0, 0, 2943, 1398, 0, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424, 2942,
	1398, 0, 0, 0, 0, 1404, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 1423, 1424, 0, 0, 0, 0, 0, 1434,
	1404, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1425, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 1437, 0, 0, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 0, 0, 0, 0, 2941, 1398, 0, 0, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422, 1423, 1424,
	2907, 1398, 0, 0, 0, 0, 1404, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 0,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 1421, 1422, 1423, 1424, 0, 0, 0, 0, 0,
	1434, 1404, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1425, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 0, 0, 0, 0, 2723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 0, 1445, 0, 0, 0, 1435, 0,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 1398, 0, 2356,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 2327, 0, 1399, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 1398, 0, 0, 0, 0, 1404, 3317, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 0, 2328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 0, 0, 0, 0,
	0, 1434, 1404, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 3316, 0,
	0, 1413, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 1425,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 0, 1396, 1397, 0, 1429,
	1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1437, 0, 0,
	0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 0, 0, 0, 0, 0, 1398, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 1415, 2068, 0, 0, 0, 0, 0,
	0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 2067, 0, 0, 1399, 0, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421, 1422,
	1423, 1424, 0, 1398, 0, 0, 0, 0, 1404, 0,
	2444, 1418, 0, 2443, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1446, 0, 0, 1426, 1427,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	1443, 0, 0, 0, 0, 0, 0, 1413, 1414, 0,
	0, 0, 0, 1421, 1422, 1423, 1424, 0, 0, 0,
	0, 0, 1434, 1404, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	0, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1425, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 1396, 1397, 0,
	1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1437, 0,
	0, 0, 0, 1399, 0, 1435, 1445, 0, 1410, 1411,
	1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401,
	1402, 1403, 1405, 1406, 0, 0, 0, 0, 0, 1398,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 1415, 0, 0, 0, 0, 0,
	0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 1399, 0,
	1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 1421,
	1422, 1423, 1424, 0, 1398, 0, 0, 0, 0, 1404,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 1446, 0, 0, 1426,
	1427, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 1443, 0, 0, 0, 0, 0, 0, 1413, 1414,
	0, 0, 0, 0, 1421, 1422, 1423, 1424, 0, 0,
	0, 0, 0, 1434, 1404, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0, 0,
	0, 1433, 795, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 1443, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 1425, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1420,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 1396, 1397,
	0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1437,
	0, 0, 0, 0, 1399, 0, 1435, 1445, 0, 1410,
	1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408, 1400,
	1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0, 0,
	1398, 2711, 0, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 2445, 0, 0, 1399,
	0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412, 1438,
	0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
	1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0, 0,
	1404, 0, 0, 1418, 0, 2450, 0, 0, 0, 0,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1446, 0, 0,
	1426, 1427, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 1443, 0, 0, 0, 0, 0, 0, 1413,
	1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424, 0,
	0, 0, 0, 0, 1434, 1404, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1443, 0, 0,
	0, 0, 0, 0, 1413, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1425, 0, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1420, 0, 0, 0, 1396,
	1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1437, 0, 0, 0, 0, 1399, 0, 1435, 1445, 0,
	1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0, 0,
	0, 1398, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 0, 0, 0, 1396, 1397, 0, 1429, 1430, 1431,
	1439, 1440, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 2398, 0, 0,
	1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416, 1412,
	1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0, 0,
	0, 1404, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1436, 1446, 0,
	0, 1426, 1427, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 1443, 0, 0, 0, 0, 0, 0,
	1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423, 1424,
	0, 0, 0, 0, 0, 1434, 1404, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 1443, 2412,
	0, 0, 0, 0, 0, 1413, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1425, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1420, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 0, 0, 0,
	1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1437, 0, 0, 0, 0, 1399, 0, 1435, 1445,
	0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0, 0,
	0, 0, 1398, 0, 0, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1396, 1397, 0, 1429, 1430,
	1431, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 1399, 0, 1435, 1445, 0, 1410, 1411, 1417, 1416,
	1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 1406, 1421, 1422, 1423, 1424, 0, 1398, 0, 0,
	0, 0, 1404, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 1415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1446,
	0, 0, 1426, 1427, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1413, 1414, 0, 0, 0, 0, 1421, 1422, 1423,
	1424, 0, 0, 0, 0, 0, 1434, 1404, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 1436, 1446, 0, 0, 1426, 1427, 1428,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1413, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 0,
	0, 1434, 0, 0, 1425, 0, 0, 0, 1419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 0, 0, 1444, 0, 0, 593, 612,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 594,
	0, 0, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 596, 0, 0, 0, 0, 1425,
	0, 0, 0, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1420, 0, 0,
	597, 1396, 1397, 0, 1429, 1430, 1431, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 1437, 599, 622, 0, 0, 1399, 625, 1435,
	1445, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0, 1409,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406, 0, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 1415, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 621, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 1435, 0, 0, 1410, 1411, 1417,
	1416, 1412, 1438, 0, 1409, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 1406, 1421, 1422, 1423, 1424, 0, 600, 0,
	0, 0, 0, 1404, 0, 0, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 1436,
	1446, 0, 0, 1426, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	624, 0, 0, 0, 1442, 1443, 0, 0, 0, 0,
	605, 0, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 0, 0,
	611, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 607, 0, 0, 620, 0, 619, 0, 0,
	0, 0, 608, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 609, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 626, 0, 623, 0, 0, 0, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 1410, 1411, 1417, 1416, 1412, 1438, 0,
	1409, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 1406,
}
var sqlPact = [...]int{

	267, -1000, -32, -1000, -1000, -1000, -1000, -1000, 192, 191,
	187, 179, 178, 176, 175, 166, 165, -1000, -1000, -1000,
	164, -1000, -1000, 157, -1000, 146, 143, 142, 141, -1000,
	140, 138, -1000, -1000, -1000, -1000, 112, 111, 110, 46754,
	1531, 56104, 47972, 1691, 2018, 41468, 55696, 41060, 55288, 54880,
	105, -1000, 54472, 100, 99, 96, -1000, -1000, 95, 1384,
	33278, 94, 93, 89, 1797, 87, 84, -1000, 82, -1000,
	66603, 1183, -1000, 81, 80, -1000, 6759, 792, 47564, 2060,
	76, 73, 32869, 2008, -1000, -1000, 1168, -1000, -1000, 72,
	70, 68, 66, 63, 59, 58, 57, 56, -1000, 53,
	51, 50, 49, 46, 45, 44, 40, 39, 38, 37,
	35, 31, 30, 29, 25, -1000, 7845, 1351, 1269, 1265,
	1250, 1243, 1263, 803, 23, 20, 19, 18, 14, 12,
	-1000, -1000, 6, 4, 1, -4, -1000, -7, -11, 106,
	-12, -13, -19, -20, -22, 1680, 1965, 1186, 717, 16223,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60124, 56506, -25, -56, -27, -1000, 2298, 806, 27963, 267,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	459, -1000, -1000, -1000, 283, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1335,
	644, -1000, -1000, -1000, 54064, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56506, -1000, 1526, 3, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 643, -1000, 1509, 242, 1461, -1000,
	-1000, -1000, -1000, -1000, 56506, -1000, -1000, 2533, 2532, 1484,
	642, 53662, -1000, 1762, -1000, 752, 16654, -1000, 989, -1000,
	16654, 279, -1000, -1000, -1000, -1000, -1000, 40652, 13206, 40244,
	39836, 36992, 53254, 12788, 46352, 959, -1000, -1000, -1000, -1000,
	-1000, -34, 34484, 56506, -1000, 274, -1000, -1000, -1000, -1000,
	-1000, -1000, 24149, 702, 23704, 353, 23259, 350, -1000, -1000,
	-1000, -1000, 2531, 2529, 862, 2528, 2222, 59722, 1293, 2527,
	1215, 932, 811, 2526, 2525, 2524, 2519, 2511, 2510, 2508,
	1203, 52846, 1990, 36574, 36156, 46754, 46754, 1838, 52438, -1000,
	-1000, 1051, 1007, -1000, -1000, -1000, -1000, 2136, 2016, 2006,
	45944, -1000, -1000, 2501, 2500, 2497, 2494, 2493, 59320, 1257,
	2492, 1775, 2491, 2490, 2488, 2486, 2483, 2482, 2480, 2479,
	2478, -1000, 45536, 45128, 44720, 44312, 52030, 35738, 35320, -1000,
	-1000, -1000, 29591, 4128, 51622, 30429, 46754, -1000, -1000, 24580,
	107, -1000, -1000, -1000, 1961, -1000, 24580, 107, -1000, 1360,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1671, 1225, 2385,
	34902, 1419, 1085, 2128, 2473, 1719, 2121, 2116, 2113, 2103,
	2102, 2472, 1176, 2471, 1120, 2470, 2098, 2091, 2414, 1628,
	39428, 2467, 2466, 2261, 2070, 1955, -1000, -1000, -1000, -1000,
	1140, -1000, -1000, -1000, 41870, -1000, -1000, 1387, -1000, -1000,
	1387, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 957, 58516,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1299, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1423, -1000, 1433, -1000, -1000, 2465,
	1965, 1694, 2196, 2196, 2196, 2301, 426, 424, -1000, 106,
	-1000, -1000, 66339, -1000, -1000, 24580, 24580, 24580, 24580, 24580,
	1399, -1000, 641, -1000, -1000, 667, -1000, 639, 573, -1000,
	-1000, -1000, -1000, -1000, -1000, 637, 2416, -1000, 872, -1000,
	-1000, -1000, -1000, 2375, -1000, 15347, -1000, -1000, -1000, 433,
	634, 24580, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, 769,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 545, 1314, 542, 542, 542, -1000,
	-1000, 804, -1000, -1000, -1000, 286, 541, 278, 528, -1000,
	-1000, -1000, -1000, 1987, 633, 631, -1000, 630, 628, 627,
	-1000, -1000, -1000, 622, 621, 618, 613, 610, 594, 593,
	590, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 801, -1000,
	588, 586, 583, 581, 580, 579, 578, 577, 576, -1000,
	-1000, -35, 56506, -1000, 459, -35, -1000, -1000, 575, -1000,
	18392, 18392, 18392, -1000, -1000, 1499, 24580, -1000, 1818, -1000,
	3415, -248, 706, 28775, -1000, 27132, 706, 673, 31649, -1000,
	1954, -1000, -1000, 574, 271, -1000, -1000, -1000, 1953, 56506,
	13622, 46754, 46754, -1000, -1000, 24580, -1000, -1000, 37408, 34082,
	56506, 47156, 2333, 8983, 34082, 56506, 1986, -1000, -1000, -1000,
	56506, -1000, 24580, -1000, 2331, 1637, -42, -1000, -1000, -1000,
	-1000, -1000, 1748, 1769, 933, 1049, -1000, 16654, 2205, -1000,
	-1000, -1000, 262, 13622, -1000, 1643, 2114, 1058, -1000, 1600,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1247, 2111,
	-1000, 2565, 2108, 1228, -1000, -1000, 784, 2105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1587, -1000, -1000,
	2255, -1000, -1000, 1622, 2094, -97, 37408, 34484, -38, -1000,
	-1000, -48, -1000, 12370, 66339, -1000, -1000, -1000, 66339, 749,
	-1000, -1000, 2093, -1000, 66339, 677, -1000, -1000, 2081, -1000,
	-1000, -1000, 2461, -1000, 2460, 1714, 2459, 2458, 2457, -1000,
	1272, 1308, 2455, -1000, 2454, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 43904, 43496, 808, -1000, 1495, -1000, -1000, 43088,
	779, 1711, -1000, -1000, 1709, -1000, 799, -1000, 2453, 51214,
	1863, 779, 1706, -1000, -1000, -1000, -1000, -1000, 46754, -1000,
	46754, -1000, 46754, -1000, 1105, -1000, 58918, -248, -1000, -1000,
	-1000, -1000, -1000, 2077, 2452, 2451, 2450, -1000, 56506, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2074,
	-1000, -1000, 153, 2073, -1000, 153, 2071, -1000, 152, 2068,
	-1000, -1000, 1476, 2067, -1000, -52, 2059, -1000, -1000, -52,
	2058, -1000, -70, -1000, -1000, -1000, 806, -1000, 29183, 50806,
	37408, 776, 632, 66339, -1000, 37408, 66339, -1000, -1000, 50398,
	42686, -1000, -1000, 1022, 1788, -1000, -1000, -1000, -1000, 37408,
	37408, -1000, 49990, -1000, -1000, -1000, 1443, 2262, 46754, -1000,
	-1000, 1976, -1000, 33680, 46754, -1000, 46754, -1000, 46754, -1000,
	46754, -1000, 46754, -1000, -1000, -1000, -1000, -1000, 2138, 1275,
	1273, -1000, 56506, -1000, 56506, -1000, -1000, -1000, 1720, -1000,
	-1000, -1000, -1000, 46754, -1000, -1000, -1000, -1000, -1000, -1000,
	1974, -1000, 1171, -1000, 1021, -1000, -1000, 160, -1000, -1000,
	-42, -1000, 58516, -1000, -1000, 1965, 1694, -1000, 56506, -1000,
	-1000, -1000, 1965, 1578, 1842, 22814, 1815, 24580, 106, -1000,
	-1000, 106, 106, 17961, -1000, -1000, 8983, 8983, 13622, 968,
	24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
	24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
	24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580, 24580,
	24580, 24580, 24580, 24580, 24580, 1729, 24580, 955, 24580, 24580,
	24580, 24580, 1494, -1000, -1000, 1393, 477, 1410, -1000, 2365,
	2365, 2365, 66720, 66720, 482, 2449, 667, -1000, 24580, -1000,
	107, 24580, 14040, -1000, 2400, 1119, -1000, -1000, 424, 8229,
	1634, -1000, 414, 14485, -1000, -1000, -1000, 15347, 573, 22369,
	24580, 797, 66339, 11954, 2001, 1906, -1000, 2399, -1000, -1000,
	2375, -1000, -1000, -1000, -1000, 2397, 967, 965, 2396, -1000,
	2395, 2394, 572, 700, 603, 595, 552, 446, 24580, 24580,
	24580, 24580, 24580, 24580, 24580, 24580, -1000, 21938, 21493, 21048,
	25873, 20603, 24580, 15778, 20158, 19713, 56506, -35, 2330, 24580,
	235, -1000, 64890, -1000, 235, 235, 570, -72, 66339, 1802,
	1801, 28369, 1697, 1421, 1421, 1421, -1000, 565, 658, 706,
	9441, 48374, 1426, 706, 706, 254, 287, 413, 26726, 1818,
	48374, -1000, -1000, 46754, 562, 14040, 13622, 1062, -75, 247,
	1812, 1808, -1000, -77, 776, 953, -82, -1000, 4019, -80,
	-1000, 904, -1000, -1000, -1000, -1000, 263, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 800,
	556, 554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 545, 1314, 542, 542, 542, -1000,
	-1000, -1000, 286, 541, 278, 528, -1000, -1000, -1000, -1000,
	-1000, -1000, 1947, -48, 47156, 753, -85, 886, -42, -1000,
	1387, -1000, 1173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2413, -1000, 2382, -1000,
	-1000, 2393, -36, -1000, -1000, 13622, -1000, -43, 1211, -1000,
	39020, 2256, 2241, 2250, 1104, -1000, 1073, 2300, 41870, 2315,
	365, -1000, 1944, -1000, -1000, 743, 1018, 948, 41870, 2565,
	-1000, 8983, -1000, 1879, 2296, 1123, 1113, 1123, 1123, 1108,
	-1000, 41870, 947, 1337, 37408, -1000, 946, -1000, -44, 2313,
	109, -1000, 1943, 945, -1000, -1000, 46754, 13622, 703, -38,
	34484, 56506, 234, -1000, 24580, 107, 24580, 107, -1000, -1000,
	2057, -1000, -1000, -1000, 2448, 1262, 1774, -1000, -1000, -1000,
	527, 1703, 2565, 1701, -1000, -1000, 42278, 56506, 1820, -40,
	46754, -1000, -1000, 1327, -1000, 2053, 2049, 567, 2447, -1000,
	1489, 1698, -1000, -1000, -1000, 58114, 935, 2040, 789, 258,
	2328, 258, 32055, -1000, 56506, -1000, 56506, -1000, -1000, -1000,
	2444, -1000, 46754, -1000, -1000, 46754, -1000, 46754, -1000, 46754,
	-1000, 46754, 46754, -1000, 56506, 37408, 37408, 37408, 4019, 38216,
	-87, 412, -1000, 49588, 56506, 832, 38618, -211, 703, -1000,
	703, -1000, 46754, 1972, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56506, -1000, 56506, -1000, -1000, -1000, -1000,
	-1000, -1000, 1154, -1000, 1971, -1000, 1966, -1000, 230, -1000,
	-1000, -1000, 1537, 46754, 46754, 46754, -1000, 41870, -1000, -1000,
	1965, -1000, -1000, -1000, -1000, -1000, 66339, -1000, 437, -1000,
	-1000, 66339, 1194, 1826, -1000, 1826, -39, -1000, 64509, 1792,
	46754, -1000, -1000, -1000, -1000, -1000, 741, 410, 410, 966,
	966, 966, 966, 2335, 923, 313, 211, 460, 460, 460,
	460, 460, 460, 460, 460, 1435, 390, 390, 1435, 1435,
	1435, 1435, 1435, 390, 390, 390, 460, 460, 460, 66720,
	66414, 6613, 24580, 24580, 930, 1374, 477, 5330, 24580, 4780,
	4780, 4780, 4780, -1000, 1380, -1000, -1000, -1000, -1000, 1941,
	526, 25873, 25873, -1000, -1000, -1000, -1000, 14916, 24580, -1000,
	-1000, -1000, -1000, 19268, -1000, -1000, 64058, -252, 406, -67,
	34, -1000, 24580, 24580, 24580, 389, -1000, 388, -1000, -1000,
	928, -1000, 927, 924, 922, -1000, 525, 225, 24580, 56506,
	-1000, 61772, 650, -102, -1000, -90, 1089, -1000, 24580, 224,
	-1000, 1409, 523, 522, 386, -99, 379, 736, 734, 377,
	375, 371, 24580, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66033, 61697, 61391, 61316, 7000, 61010, 60935,
	-101, 369, -1000, 1940, -67, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 368, -1000, 367, -1000, 65958, -67, 366, 3900,
	-1000, 25873, 25873, 25873, -1000, 363, -1000, 64815, -1000, 65652,
	18837, 18837, 18837, 360, 65577, 24580, -67, -107, -1000, -110,
	-1000, -1000, 521, -115, 789, 18392, 27554, 13622, -1000, 789,
	789, 24580, -1000, 24580, 28369, 28369, 1735, 1799, 28369, -1000,
	-1000, -1000, -1000, 48374, 429, 706, 48374, -1000, 2375, 1784,
	-1000, -1000, -1000, 56506, 459, -1000, 48374, 48374, 13622, 706,
	-1000, 359, 30835, 34, 220, -1000, -1000, 13622, 1827, 1827,
	-1000, 1937, 56506, 2339, -1000, -1000, 8983, -1000, 666, 894,
	-1000, 2392, 520, -1000, 2375, 2375, 56506, 161, 16654, -1000,
	1387, -1000, -1000, 1182, -1000, 1296, -1000, -1000, -1000, -1000,
	16654, -1000, 1256, 46754, 56506, 56506, -1000, -1000, 1696, 57712,
	1690, 8983, 56506, -1000, -1000, 519, 517, 1787, 1780, 56506,
	56506, 57310, 56908, 56506, 1328, 24580, 1395, 1635, 107, -1000,
	107, 516, 1026, 46754, 46754, 1226, -1000, -1000, -1000, -1000,
	-1000, 46754, -1000, -1000, 2389, -1000, 1123, -1000, -1000, -1000,
	1123, 2565, 1221, 46754, 37408, 783, 56506, 1345, 107, -1000,
	107, 515, 13622, 1249, -1000, 1881, -1000, 1594, -1000, -1000,
	11538, 66339, -1000, 66339, -1000, 56506, -1000, 807, 56506, 38618,
	773, 2039, -1000, 2565, 2037, 459, -1000, -1000, 131, 776,
	37408, 46754, -40, 37408, 37408, 37408, 2443, 514, 2440, -1000,
	46754, 2036, 1487, 1686, 2075, 693, 56506, 1429, -1000, 24580,
	1287, -1000, 31243, 822, 56506, 1205, 122, -1000, -1000, -1000,
	-8, 56506, -1000, 2438, -1000, -1000, 153, 153, 153, -1000,
	152, 1476, -1000, -52, -52, -1000, -1000, 4019, 776, -41,
	510, -1000, 716, 715, 30013, 37408, -117, -1000, -1000, -1000,
	-1000, -1000, 46754, 56506, 625, 1862, 56506, -1000, 776, -1000,
	781, -1000, 1012, -48, -48, -1000, 1149, 1117, 56506, 13622,
	56506, 46754, 13622, 46754, -1000, -1000, -1000, -1000, -1000, 1194,
	-1000, 24580, -1000, -1000, -1000, 17961, -1000, -1000, -1000, 46754,
	-207, 24580, 24580, 4464, 4211, 24580, 25873, 25873, -1000, 24580,
	4062, -1000, -1000, -1000, -1000, -1000, 1932, 509, 24580, 8983,
	5758, 5314, -1000, 357, 8707, 1435, -1000, 24580, -1000, 356,
	17530, -1000, 65196, -37, -37, -1000, 2412, 1730, 1353, 1267,
	1129, 2386, 11122, -67, -120, -1000, -1000, 664, -1000, 2106,
	-1000, 24580, 65271, 10706, -1000, 32461, 790, 1429, -1000, -1000,
	2375, 759, -1000, -1000, -1000, 759, -1000, 63983, 8983, 8983,
	24580, 24580, -1000, 24580, 24580, 24580, -1000, -1000, 24580, -1000,
	-1000, 1929, 24580, -1000, 8983, 8983, 25873, 25873, 25873, 25873,
	25873, 25873, 25873, 25873, 25873, 25873, 25873, 25873, 25873, 25873,
	25873, 25873, 25873, 25873, 25873, 1678, 25873, 2363, 2363, 2363,
	-1000, 1920, 1929, 24580, 24580, 8983, 354, 348, 347, -1000,
	24580, -67, -1000, -1000, 4019, -1000, 1903, -1000, -106, -1000,
	1818, -1000, -1000, 1903, 1903, -125, 66339, -1000, 1735, -1000,
	508, 24580, 28369, -1000, 649, -1000, -132, -1000, 48374, -1000,
	648, -249, -1000, 710, -1000, 459, -1000, -1000, -1000, 216,
	48374, -1000, -133, -1000, 2324, 346, 13622, -1000, -1000, -1000,
	-1000, -1000, 107, -48, 1451, -1000, 2377, -1000, 647, 345,
	2375, 344, 342, -48, 56506, -1000, -42, -1000, -1000, -1000,
	-1000, -1000, -1000, 920, 919, -1000, 2033, -1000, 1682, -1000,
	826, -1000, 1258, 24580, 24580, 507, 506, 1320, 2437, 2030,
	1476, 2029, 1476, -1000, -1000, 762, -1000, 66339, 505, 502,
	-1000, -43, 1209, -1000, -1000, 24580, 24580, 49182, -1000, 2255,
	-1000, 918, -1000, -1000, -1000, 2565, 917, -1000, -1000, 1322,
	-1000, -1000, -1000, -1000, 24580, -1000, -44, 911, 776, 1926,
	1045, -1000, 2436, 2435, 2434, 340, -47, -1000, 2323, 1573,
	56506, 46754, 46754, 2322, 46754, -1000, -1000, -1000, -1000, 779,
	-1000, -1000, 2432, -1000, 830, 13622, 46754, 2028, 1755, 693,
	37814, -1000, 779, 1842, -1000, 66339, -1000, 1205, 17085, 2252,
	-135, -1000, 207, -1000, -1000, -1000, 789, 32055, 28369, 24580,
	2430, -140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48780, 48780, 37408, 37408, 37408, 776, 56506, 56506, 38618, 2429,
	501, 56506, 56506, 500, -1000, -1000, -1000, 1444, 46754, -1000,
	-1000, -1000, -1000, -1000, 1349, 1584, -1000, 1466, 63677, -1000,
	2236, 13622, 2329, 4780, 24580, 24580, 3498, 1029, 428, 4780,
	24580, 24580, 8983, 6263, -143, 24580, 24580, -1000, 24580, 646,
	66339, 2404, 24580, 339, 336, 329, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 327, -1000, -1000, -1000, -1000, -1000,
	66339, 24580, 196, -1000, -1000, -1000, 60526, -1000, 24580, 326,
	324, -1000, -1000, -1000, 322, 318, 8558, 5930, 63602, 63296,
	63221, 66339, 1920, 66339, -1000, -1000, 674, 674, 1090, 1090,
	1090, 1090, 2363, 449, 404, 823, 3160, 3160, 3160, 1592,
	495, 495, 3160, 3160, 3160, 1925, 1732, 498, 5860, -1000,
	-1000, 66339, 66339, 316, -1000, -1000, -1000, -67, 315, 1899,
	2290, -1000, 28369, 1899, 1899, -1000, -1000, 56506, 66339, -1000,
	-248, -1000, 2375, -1000, -1000, 1784, -1000, 9870, -1000, 13622,
	-1000, -1000, 30835, -1000, 497, -1000, 108, -1000, -1000, 596,
	-1000, -1000, 300, -1000, -1000, -48, 56506, 56506, 56506, 2024,
	-1000, 3340, -1000, 62915, -145, -1000, 64509, 24580, 56506, -1000,
	1390, 1825, 854, -1000, 56506, -1000, 56506, -1000, -1000, 56506,
	56506, 46754, 56506, 56506, -146, 66339, -49, -1000, 709, -1000,
	46754, 46754, 37408, -148, 13622, -1000, 37408, 937, -1000, -1000,
	-1000, 1858, 107, -1000, 2427, 496, 2565, 107, 703, -1000,
	-1000, 494, 56506, 1483, 484, 13622, 1766, 693, 37814, -1000,
	935, 1205, -1000, -1000, -50, -1000, 503, 107, 56506, 2426,
	1429, -1000, -51, 66339, -1000, 697, -1000, -151, -1000, -1000,
	299, -1000, 2202, 2193, -1000, -1000, 24580, 483, 481, 56506,
	1561, -1000, -1000, -1000, 13622, 1006, -1000, -1000, -1000, 2236,
	4780, 4780, 24580, 24580, 24580, 4780, 6263, -154, -1000, 4780,
	4780, -67, -1000, -1000, 65196, -1000, -1000, -1000, -1000, 66339,
	10290, 1364, -1000, 62840, -1000, -1000, -1000, -1000, 24580, 24580,
	-1000, -1000, -1000, -1000, -1000, 25873, 1923, 480, 8983, -1000,
	-1000, 786, 24580, 24580, 1818, 786, 786, -162, 706, -1000,
	-1000, -1000, 2375, 108, -1000, 2421, 13622, -1000, -1000, -1000,
	-1000, -1000, 56506, -1000, 56506, -1000, 13622, 56506, 1917, 1661,
	-1000, -1000, 1779, 479, 25873, 46754, 727, 1916, 1362, 24580,
	-1000, -163, -165, 1621, -1000, -1000, 1606, 24580, -1000, 8983,
	1476, 1476, -170, -171, -1000, 903, 897, 895, 56506, 16654,
	-1000, -1000, -1000, 893, -1000, -52, 24580, 1345, 1875, 777,
	-1000, 38618, 773, -1000, -1000, -1000, 24580, -1000, 46754, 24580,
	1478, -1000, 693, 37814, -1000, 2075, -1000, 2131, 56506, 2227,
	-1000, -1000, -1000, 1842, 477, -1000, 776, 476, 474, -172,
	24580, 24580, -178, -53, -1000, 731, 726, -1000, -1000, 46754,
	-1000, 4780, 4780, 4780, -1000, 297, -1000, -1000, 1429, 2289,
	-1000, 62534, 62459, 960, 25873, 8983, -179, -1000, 56506, 66339,
	-67, -1000, -1000, -1000, 48374, 553, -1000, -1000, 1329, -1000,
	-1000, -1000, 56506, 1675, -1000, -1000, 24580, 5860, 473, 24580,
	-1000, -1000, 1854, 1952, 1858, 472, -1000, -1000, -1000, -1000,
	1259, -1000, -1000, 66339, 2273, -1000, -1000, 469, 468, 56506,
	56506, 467, 692, -1000, 466, 66339, 773, -1000, 1368, -1000,
	1839, 296, 2321, -181, 830, -184, 46754, 37814, -1000, 1755,
	995, -186, 56506, 1205, -1000, -1000, 37408, 37408, 1362, -189,
	-191, -1000, 1561, -1000, 56506, -1000, 56506, -1000, -1000, 1343,
	24580, -1000, -1000, 960, -192, -1000, -66, -1000, 2319, -1000,
	-1000, -1000, -1000, 2023, 62153, 1737, 56506, 62078, 1950, -1000,
	-1000, 1345, 56506, 46754, 813, 13622, 1349, 1349, -1000, -1000,
	24580, 16654, 24580, -1000, 46754, -1000, 2179, 1858, 107, 1362,
	465, 1362, 464, -1000, 1766, 1094, -1000, 789, -1000, -1000,
	-194, -197, 1858, 1362, -1000, -1000, -200, -203, 294, 25442,
	25442, 25442, -67, -1000, 56506, 461, 2010, -1000, 1452, 1332,
	291, 853, -1000, -1000, 1916, -205, 459, -1000, 24580, -1000,
	-208, -1000, 819, -210, -1000, 818, -216, -1000, -217, 458,
	-1000, 1345, 777, 1858, 24580, 1858, 24580, -1000, 32055, -1000,
	776, 776, 1345, 1858, -1000, -1000, -1000, -1000, -1000, 26304,
	1449, 1196, 64434, -1000, -1000, -1000, -1000, 56506, -1000, 1475,
	1473, 1127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1737, 66339, -1000, 1349, 1873, -1000, 1349, 1915, -1000, -1000,
	56506, 773, -1000, 1345, -218, 1345, -219, -202, -1000, -1000,
	-1000, 1345, 2338, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2140, -1000, 845, 1450, 1450, 1452, -1000, 457, -1000, 436,
	-226, -1000, 788, 1362, 788, 1362, -1000, -1000, 25011, -1000,
	2347, -1000, -1000, 1807, -1000, 1916, 24580, 24580, 1472, -1000,
	2420, 1858, -1000, 1858, -1000, -1000, -1000, -1000, -1000, -227,
	-229, -1000, -1000, -1000, -1000, 1345, 1345, 1345, 891, 788,
	788, -1000, 434, -1000, -1000, 24580, -240, 1345, -1000,
}
var sqlPgo = [...]int{

	0, 3106, 3105, 2035, 3104, 3101, 3099, 3095, 3094, 3091,
	3090, 3088, 3084, 3078, 3069, 3068, 3065, 3059, 3057, 3055,
	3054, 3053, 3052, 3050, 3048, 3044, 3043, 3042, 3041, 3033,
	3030, 3028, 3025, 3020, 3017, 3014, 3012, 3010, 3008, 3007,
	3005, 3004, 3003, 3002, 3001, 34, 2999, 2998, 2997, 2996,
	2995, 2994, 2989, 2988, 2985, 2983, 2982, 2981, 2976, 2966,
	2965, 2960, 2958, 2956, 2955, 2954, 2953, 2952, 2951, 2950,
	2949, 2947, 2944, 2943, 2942, 100, 2940, 2939, 2938, 2924,
	2918, 2915, 2912, 2910, 2908, 2906, 2903, 2902, 2901, 2895,
	106, 2894, 2893, 2892, 2890, 2889, 2888, 2887, 2885, 2884,
	2883, 184, 2882, 2881, 2880, 2878, 2874, 2871, 2870, 2864,
	2862, 2857, 2856, 2854, 2853, 2850, 2848, 2844, 2840, 2839,
	2836, 2835, 2829, 2824, 2823, 2822, 2821, 2820, 197, 134,
	2818, 2816, 2815, 2813, 2812, 2811, 84, 85, 19, 2810,
	76, 118, 180, 3465, 173, 2806, 2805, 2804, 2803, 2800,
	59, 122, 121, 124, 116, 143, 2799, 2798, 63, 51,
	33, 27, 89, 2796, 2794, 2791, 2458, 123, 2789, 2787,
	191, 181, 2786, 997, 2784, 119, 125, 101, 92, 56,
	2783, 103, 17, 2782, 115, 38, 2781, 114, 75, 29,
	4917, 6266, 78, 196, 68, 80, 151, 149, 159, 148,
	120, 854, 2780, 185, 130, 144, 2777, 2732, 2722, 45,
	139, 4, 3, 127, 13, 2721, 10, 2719, 15, 2715,
	2713, 2712, 2711, 30, 117, 60, 67, 2710, 31, 7,
	156, 2709, 166, 2708, 87, 2702, 188, 146, 161, 14,
	169, 2699, 2697, 2696, 2695, 2694, 88, 23, 90, 2693,
	2691, 99, 176, 2690, 32, 131, 57, 95, 194, 164,
	98, 165, 168, 2688, 2687, 2685, 215, 2683, 2681, 107,
	155, 2680, 2677, 35, 52, 174, 36, 2670, 2668, 113,
	2667, 145, 2662, 2660, 2657, 195, 132, 158, 9, 64,
	77, 26, 11, 170, 108, 74, 72, 2651, 2464, 338,
	317, 2646, 102, 81, 41, 86, 105, 190, 91, 2640,
	2639, 1607, 2636, 2635, 2634, 2633, 135, 2632, 2631, 2626,
	97, 39, 65, 2625, 109, 55, 150, 193, 66, 163,
	175, 179, 2624, 138, 2620, 137, 73, 2619, 141, 182,
	71, 2618, 1224, 128, 2617, 160, 2615, 2613, 2610, 2608,
	452, 2605, 2603, 546, 2602, 110, 2601, 2600, 140, 152,
	153, 28, 2597, 54, 606, 2596, 142, 58, 2594, 2795,
	44, 0, 5550, 4696, 5167, 2590, 5778, 2587, 154, 94,
	2586, 2585, 2584, 2583, 37, 20, 6, 8, 18, 16,
	625, 104, 2582, 2581, 82, 93, 111, 2580, 192, 167,
	2579, 2578, 2576, 70, 2575, 25, 2574, 21, 2573, 2572,
	22, 5, 2571, 2568, 177, 2565, 2562, 2561, 2560, 2351,
	2559, 187, 2557, 96, 2554, 126, 129, 2553, 2552, 2551,
	2550, 183, 2549, 186, 2548, 12, 24, 1, 2547, 2546,
	2543, 147, 2, 2170, 2542, 2540, 69, 136, 62, 2538,
	2536, 133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 421, 421, 18, 28, 19, 29, 13, 423,
	423, 423, 423, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 420, 420, 154, 154, 153, 149,
	149, 424, 424, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 369, 369, 370, 370, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 429, 429, 430,
	430, 431, 431, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 416, 416, 237, 237, 337, 337, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 339, 339, 74, 74, 309, 309, 77, 77,
	267, 267, 78, 78, 78, 78, 78, 79, 79, 79,
	79, 89, 89, 89, 89, 419, 419, 230, 230, 170,
	170, 170, 170, 84, 84, 84, 84, 85, 85, 85,
	86, 86, 134, 134, 95, 95, 95, 95, 95, 94,
	94, 94, 94, 94, 94, 40, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 45,
	45, 97, 97, 425, 425, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 101, 101, 101, 101, 101, 101,
	102, 102, 363, 363, 245, 245, 361, 361, 377, 377,
	362, 362, 207, 207, 207, 207, 207, 208, 208, 208,
	368, 368, 368, 368, 368, 368, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 119, 119, 119, 128, 128, 128, 128,
	128, 128, 128, 121, 121, 121, 112, 112, 104, 104,
	104, 104, 108, 108, 108, 108, 108, 105, 105, 109,
	109, 111, 111, 113, 113, 113, 113, 113, 113, 106,
	106, 106, 106, 115, 115, 115, 115, 114, 114, 124,
	124, 124, 124, 124, 124, 323, 323, 120, 120, 120,
	120, 123, 123, 123, 123, 118, 118, 118, 122, 122,
	125, 125, 125, 125, 107, 107, 107, 434, 434, 434,
	126, 126, 117, 117, 127, 127, 127, 127, 127, 127,
	127, 116, 116, 116, 422, 422, 110, 417, 417, 414,
	414, 414, 414, 414, 414, 414, 415, 415, 418, 418,
	82, 82, 82, 55, 55, 435, 435, 435, 56, 56,
	436, 436, 436, 433, 433, 433, 433, 433, 433, 433,
	433, 209, 209, 210, 210, 290, 290, 290, 290, 290,
	211, 211, 156, 156, 156, 214, 215, 215, 212, 212,
	213, 213, 213, 217, 217, 216, 219, 219, 218, 289,
	382, 382, 383, 383, 383, 383, 383, 383, 383, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 380,
	380, 380, 381, 378, 378, 379, 379, 379, 379, 437,
	437, 437, 437, 437, 437, 438, 438, 288, 288, 223,
	223, 385, 385, 385, 385, 386, 386, 386, 386, 386,
	389, 388, 387, 387, 387, 387, 387, 319, 319, 319,
	59, 59, 59, 256, 256, 255, 255, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 131, 131, 57, 57, 57, 162, 162, 54, 54,
	54, 440, 440, 58, 58, 58, 441, 441, 61, 61,
	61, 61, 61, 61, 53, 53, 53, 53, 53, 442,
	442, 273, 273, 272, 272, 228, 228, 325, 174, 174,
	150, 150, 150, 21, 23, 23, 16, 16, 16, 16,
	16, 16, 31, 31, 32, 32, 27, 27, 426, 426,
	427, 427, 83, 83, 87, 87, 87, 93, 93, 130,
	130, 130, 130, 130, 130, 130, 35, 35, 35, 35,
	47, 47, 47, 47, 91, 444, 444, 444, 92, 92,
	443, 443, 169, 169, 169, 169, 171, 171, 285, 285,
	286, 286, 445, 445, 287, 287, 287, 164, 163, 165,
	165, 52, 52, 52, 158, 158, 159, 159, 160, 160,
	161, 161, 446, 446, 80, 80, 80, 133, 133, 203,
	203, 281, 281, 281, 224, 224, 179, 179, 284, 284,
	282, 282, 282, 282, 254, 254, 254, 132, 132, 233,
	233, 247, 247, 248, 248, 334, 334, 249, 90, 90,
	143, 143, 141, 141, 141, 141, 141, 141, 447, 447,
	142, 142, 142, 144, 144, 144, 144, 144, 144, 144,
	147, 147, 147, 147, 148, 148, 148, 146, 146, 396,
	396, 396, 398, 398, 399, 395, 395, 397, 397, 439,
	439, 258, 258, 258, 221, 222, 220, 220, 448, 448,
	226, 226, 225, 227, 227, 324, 324, 324, 252, 252,
	252, 252, 276, 276, 274, 274, 275, 275, 277, 277,
	278, 278, 278, 279, 279, 280, 280, 251, 251, 305,
	305, 145, 145, 145, 232, 232, 232, 234, 234, 296,
	296, 296, 297, 297, 295, 295, 295, 295, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 327, 327, 235,
	235, 328, 283, 283, 412, 412, 412, 413, 413, 322,
	322, 329, 329, 329, 329, 329, 329, 320, 320, 321,
	321, 335, 336, 336, 261, 261, 261, 261, 259, 259,
	260, 260, 330, 330, 330, 330, 253, 253, 331, 331,
	331, 332, 291, 292, 292, 340, 340, 340, 340, 355,
	231, 231, 231, 449, 449, 341, 341, 341, 341, 341,
	341, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 345, 345, 345, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 354, 354, 354, 354, 354, 346,
	346, 351, 351, 352, 352, 352, 347, 348, 353, 353,
	353, 353, 450, 450, 357, 357, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 343, 343, 343, 350, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 268, 268, 269, 269, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 300, 300, 300, 300, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	390, 390, 390, 390, 390, 390, 390, 390, 393, 393,
	394, 394, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 400, 400, 401, 401, 403, 403, 404, 404, 405,
	406, 406, 406, 407, 408, 408, 402, 402, 409, 409,
	409, 409, 410, 410, 411, 411, 411, 411, 411, 311,
	311, 312, 312, 318, 318, 318, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 172, 172, 172, 172, 172, 243, 243, 241,
	241, 241, 244, 244, 242, 242, 240, 240, 239, 239,
	308, 308, 306, 306, 310, 310, 262, 262, 356, 356,
	356, 356, 356, 356, 356, 263, 263, 263, 271, 264,
	264, 265, 265, 265, 265, 265, 302, 303, 266, 266,
	266, 304, 304, 313, 317, 317, 316, 315, 315, 314,
	314, 293, 293, 294, 294, 250, 250, 451, 451, 246,
	246, 333, 333, 333, 333, 205, 205, 236, 236, 204,
	204, 198, 198, 199, 199, 199, 199, 229, 229, 358,
	358, 358, 359, 360, 307, 189, 188, 176, 177, 187,
	186, 185, 175, 178, 182, 183, 184, 180, 181, 194,
	193, 192, 191, 338, 200, 200, 201, 201, 201, 202,
	202, 202, 202, 173, 173, 195, 195, 196, 197, 197,
	190, 190, 190, 166, 166, 166, 167, 167, 168, 168,
	367, 367, 365, 365, 365, 366, 366, 366, 366, 364,
	364, 364, 364, 364, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 373, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 376, 376,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 8, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 3, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 2, 3, 3,
	3, 6, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 2, 3, 4, 3, 4, 5, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 2, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -428,
	82, -397, -65, -68, -70, -432, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -396,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	-191, -195, -196, -197, -190, -166, -373, -376, 4, -371,
	-374, 131, 176, 240, 21, 22, 23, 24, 25, 27,
	37, 38, 39, 42, 44, 45, 48, 49, 50, 51,
	52, 53, 56, 61, 66, 67, 68, 69, 70, 75,
	72, 73, 74, 77, 79, 80, 81, 84, 85, 93,
	94, 95, 96, 97, 98, 102, 105, 104, 107, 110,
	111, 112, 114, 116, 117, 120, 121, 124, 122, 366,
	368, 123, 125, 126, 127, 137, 138, 139, 141, 142,
	144, 146, 150, 151, 153, 157, 159, 160, 161, 162,
	163, 164, 165, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 196, 197, 198, 200, 201, 204,
	205, 206, 207, 210, 209, 212, 215, 216, 219, 220,
	223, 225, 226, 228, 229, 227, 230, 233, 231, 232,
	235, 236, 238, 237, 245, 246, 248, 249, 250, 264,
	253, 254, 257, 260, 263, 265, 266, 267, 268, 269,
	270, 272, 274, 276, 278, 280, 281, 282, 283, 284,
	285, 287, 288, 290, 291, 292, 293, 294, 299, 296,
	297, 298, 300, 301, 302, 303, 305, 307, 308, 309,
	310, 312, 314, 335, 336, 348, 315, 316, 317, 318,
	319, 320, 321, 325, 329, 326, 327, 328, 330, 323,
	324, 331, 332, 334, 337, 339, 341, 342, 345, 346,
	347, 349, 352, 353, 354, 350, 351, 344, 359, 357,
	358, 361, 362, 363, 364, 365, 367, 369, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 374, 379, 381, 403, 404, 405, 409, 416, 251,
	-184, 2, -166, -166, 276, 26, 2, 26, 272, 324,
	362, 364, 2, 192, 2, -419, -230, 2, 26, -170,
	-166, 82, 152, 322, -184, 2, -419, -230, 24, 2,
	-166, 2, -171, 2, 315, -166, 445, 77, 220, 61,
	311, 331, -101, 378, -100, 371, 317, -102, -363, 2,
	233, -166, 445, 445, 445, 445, 2, 360, 267, 407,
	323, 396, 95, 283, 176, -414, 2, 4, -374, -371,
	-199, -198, 360, 95, -197, -190, 435, -196, 445, 445,
	445, 2, 197, 198, 282, 281, 331, 332, 445, 445,
	445, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	255, -429, 226, 264, 280, 317, 330, 359, 369, 380,
	-433, 347, 56, 396, -440, 385, 110, -272, 95, 364,
	362, 220, 151, 392, 307, 155, 390, 105, 182, 394,
	393, 445, 445, 25, 55, 64, 79, 110, 127, 147,
	150, -431, 264, 280, 314, 317, 330, 359, 369, 385,
	380, 2, 407, 323, 360, 176, 95, 396, 307, 279,
	-75, 2, 442, 29, 334, -140, 360, 2, -166, 197,
	198, 2, 445, 445, -414, 2, 197, 198, 2, 319,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 2, -128, 331, 347, 160,
	38, 61, 26, 66, 96, 153, 176, 177, 205, 76,
	77, 281, 220, 198, -323, 332, 361, 318, 357, 378,
	82, 397, 308, 419, -422, 122, 4, 95, 233, 333,
	371, 70, 365, 366, -439, 2, 360, -443, 2, 378,
	378, 2, -443, 2, -443, 2, -169, 2, 378, 375,
	-444, 378, 416, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, -142, -144, -143, 445, 445,
	445, 445, 445, -128, 331, 2, 61, 26, -447, 145,
	-225, -226, 389, 190, 118, 256, -141, -143, 2, -396,
	-361, 2, -298, -377, -300, 433, 434, 428, 239, 420,
	-311, 101, 390, 251, -376, -301, -313, 119, 311, -244,
	8, 9, 5, 6, 7, -173, -342, -307, -350, 382,
	130, 242, -202, 448, 10, 442, -393, -143, -312, 33,
	156, 54, -365, -201, -344, -352, -348, -349, -449, 44,
	50, 49, 369, 232, 325, 326, 341, 327, 328, 42,
	399, 172, 248, 250, 184, 4, 191, -200, -190, -390,
	-391, -371, -372, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 43, 404, -353, 97, 371, 372, 373, 374, 200,
	201, -166, -373, 64, 87, 88, 86, 91, 90, 92,
	89, 333, 396, 55, 32, 166, 167, 171, 243, 168,
	62, -392, 351, 83, 149, 181, 169, 194, 195, 199,
	214, 217, 234, 241, 259, 261, 306, 338, -450, 405,
	128, 129, 262, 273, 355, 379, 381, 154, 213, 57,
	58, -398, 287, -399, -184, -398, 445, 445, 447, 445,
	-220, -221, -222, 2, 26, 108, 442, 2, -326, 2,
	440, -330, -143, 208, -329, 442, -327, -191, 252, -394,
	312, -390, -391, -173, -190, -201, 4, -3, -223, 442,
	444, 360, 65, 2, -267, 442, -166, 26, -140, 251,
	375, 447, -309, 442, 251, 148, 253, -166, 2, 2,
	335, 2, 442, -101, 59, 378, -286, 2, -287, -163,
	-164, -165, 196, 278, 285, 419, -361, -425, 148, 425,
	375, -361, -245, 444, 2, -330, 166, -191, 2, -188,
	-364, 4, -371, -374, -372, -375, 64, -373, 26, 28,
	29, 30, 31, 33, 34, 35, 36, 47, 54, 55,
	60, 63, 65, 76, 82, 86, 87, 89, 88, 90,
	91, 92, 101, 103, 106, 108, 109, 113, 115, 118,
	130, 132, 145, 147, 148, 152, 155, 158, 170, 180,
	190, 192, 208, 211, 218, 221, 222, 239, 242, 247,
	251, 252, 255, 256, 271, 277, 289, 304, 322, 333,
	343, 356, 360, 370, 375, 376, 382, 389, 390, 396,
	398, 406, 410, 411, 412, 413, -376, 2, -330, 166,
	2, -192, 166, -330, -195, 2, -369, 166, -367, 10,
	-366, 5, 4, -371, -374, -372, 2, -175, -166, 2,
	-187, -364, 2, -204, 166, -191, 375, 447, -236, -198,
	-199, -229, -166, 444, -298, 2, -90, 2, -298, 166,
	2, -90, 166, 2, -298, 166, 2, -90, 166, 2,
	2, 2, 380, 2, 79, 166, -166, 360, 94, 2,
	298, -430, 314, 384, 407, 2, 2, 2, 2, 2,
	2, 2, 360, 323, -441, 287, -180, 2, -166, 145,
	-369, 166, 2, -369, 166, 2, -193, -195, -193, 176,
	193, -175, 166, 2, 364, 362, 364, 362, 148, 2,
	192, 2, 192, 2, -331, 2, -332, -191, 2, 2,
	2, 2, 2, 166, -166, 360, 94, 2, 207, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -238, 166,
	2, -191, -238, 166, 2, -238, 166, 2, -205, 166,
	2, -204, -175, 166, 2, -370, 166, 2, -369, -370,
	166, 2, -339, 2, -338, -366, 403, -75, 442, 331,
	442, -369, -191, -298, -90, 148, -298, -90, 2, 95,
	360, -128, 2, 145, 398, 2, 8, 2, -369, 284,
	137, 2, 335, 2, 281, 332, 61, 419, 148, 2,
	2, -417, 2, 251, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 2, 281, 332, 2, 377, 206,
	123, 2, 148, 2, 148, 2, 5, 2, 196, 278,
	348, 2, -191, -434, 2, 360, 407, 323, 2, 2,
	72, 73, 148, 2, 148, 419, 2, -253, -330, -285,
	-286, -285, 375, -171, -447, -225, -226, -128, 335, 2,
	2, -447, -252, -274, -275, 218, 132, 247, -258, 26,
	108, -258, -258, 48, 443, 443, 11, 12, 63, 37,
	433, 434, 435, 436, 143, 437, 438, 431, 432, 430,
	423, 424, 427, 202, 203, 78, 426, 425, 71, 224,
	313, 133, 134, 135, 136, 295, 173, 174, 175, 14,
	15, 16, 30, 255, 217, 420, 169, 338, 428, 17,
	18, 19, 194, 195, 241, 40, 170, -172, -206, -298,
	-298, -298, -298, -298, 261, 442, -250, -293, 440, -143,
	442, 442, 442, 5, 442, 5, -360, 8, -143, -298,
	-311, 443, -242, 442, -143, -311, -306, 442, 311, 440,
	442, -314, -298, 444, -400, 414, -346, 442, 275, -345,
	442, -345, -345, 408, -343, 442, 421, 415, 442, -343,
	442, 442, 145, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 408, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 447, -398, -223, 442,
	-246, -333, -298, 435, -246, -246, 251, -239, -298, 83,
	-261, 199, 234, 149, 214, 306, 181, -360, -75, -295,
	448, -322, 421, -143, -327, -190, -143, -329, 442, -326,
	-322, 435, -191, 442, 148, 442, 444, 148, -229, -364,
	-191, -200, -201, -239, -369, -414, -229, -170, 34, -308,
	-340, -341, -354, -342, -351, -347, -350, 291, 292, 290,
	294, 293, 44, 50, 49, 369, 232, 325, 326, 341,
	327, 328, 42, 399, 172, 248, 250, 184, 4, 43,
	404, -353, 191, 183, 189, 185, 340, 186, 187, 188,
	41, 286, 141, 142, 140, 111, 100, 99, 244, 46,
	45, 97, 371, 372, 373, 374, 200, 201, 405, 351,
	57, 58, -414, -229, 145, -363, -239, 34, -286, 2,
	-445, 447, 216, -208, 223, 238, 159, 252, 417, -368,
	5, 4, -307, -319, 101, 220, -350, 9, 434, -358,
	8, 433, -362, -361, 85, 444, -364, -152, 296, -151,
	23, 27, 112, 401, 124, -213, 178, 267, 119, 344,
	-421, -423, 316, 367, 368, 74, 245, 296, 119, -255,
	-257, 34, 93, 236, 263, 51, 164, 227, 228, 346,
	409, 119, 296, 413, 119, -423, 296, -423, -154, 344,
	-421, -423, 316, 296, -153, -213, 119, 448, -369, -236,
	447, 447, -364, 435, 119, 119, 119, 119, 2, 2,
	239, 2, 2, 2, 150, -433, -431, 2, 2, 2,
	-191, 166, -192, 166, 2, -195, 407, 251, -416, -237,
	360, -191, -162, -395, 413, 239, 239, 34, 442, 2,
	-177, 166, 2, -167, -166, 176, -395, 239, -331, -203,
	-191, -203, 334, -184, 34, -295, 119, 2, 2, 2,
	-166, -155, 447, 53, 302, 119, -155, 119, -155, 119,
	-155, 447, 119, -155, 119, 447, 119, 119, 443, 447,
	-339, -369, -138, 413, 148, 82, 442, -370, -175, 2,
	-191, 2, 360, 200, -369, -369, -363, 26, 336, 2,
	73, -191, -418, 145, -415, 307, -414, -191, -191, -191,
	-191, -191, 145, 2, 377, 2, 377, 2, -166, -166,
	216, -191, 145, 360, 176, 360, -155, 447, -171, -447,
	-252, -363, -447, -275, -274, -277, -298, 26, -280, 139,
	235, -298, -300, -142, -142, -142, -227, -324, -298, 277,
	176, -355, -340, -340, -189, -364, 371, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, 217, 169, 338, 40, 170, -298, 375, -298,
	-298, -298, -298, 231, 239, 242, 382, 130, 391, 108,
	245, -451, 356, 36, -304, -143, -243, 442, -318, 31,
	343, 26, -311, 442, 2, -293, -298, -294, -240, -239,
	-239, 443, 406, 26, 108, 435, 2, 8, -268, -270,
	418, 230, 98, 161, 229, -269, 321, 443, 447, 34,
	443, -298, -240, -310, -306, -239, -317, -316, 410, -364,
	435, -401, 138, 155, 8, -360, 8, 371, 371, 8,
	8, 8, 442, 443, 2, 443, 2, 443, 2, 443,
	2, 443, 2, -298, -298, -298, -298, -298, -298, -298,
	-239, -262, 2, -356, -239, 4, 418, 230, 98, 161,
	229, 321, -262, 2, -263, 2, -298, -239, -264, -299,
	-300, 433, 434, 428, -311, -265, 2, -298, -240, -298,
	47, 211, 376, -266, -298, 148, -239, -239, 2, -239,
	2, -399, 34, -239, -232, 447, 148, 34, 4, -232,
	-232, 442, 443, 447, 199, 199, -326, -261, 199, -259,
	259, -259, -259, -412, 442, 441, -322, -176, 440, 449,
	-364, -321, -320, 34, -184, 257, -322, -322, 444, 443,
	-321, -191, 442, -239, -364, 349, 443, 444, 194, 194,
	443, -138, 375, 413, -75, 443, 447, -231, 33, 440,
	-270, 442, -357, 408, 442, 442, 148, -230, -425, 443,
	378, -287, -207, 285, 342, 297, 329, 9, 8, 8,
	447, -364, 447, 375, -426, 76, 65, -289, 166, 65,
	-378, -178, 76, -379, -166, 60, 390, 277, 147, -426,
	76, -426, 76, 76, 334, 347, 48, -330, 37, -90,
	212, 148, 419, 360, 375, -330, -257, -340, 93, 227,
	228, 48, -359, -358, 434, -359, 48, -359, -359, -359,
	413, -192, -330, 375, 268, -369, 375, 447, 37, -90,
	212, 148, 375, -204, -176, -336, -335, 422, -198, -166,
	444, -298, -90, -298, -90, 119, 2, -441, 207, 442,
	-223, 239, -256, -255, 239, -194, 2, -191, -229, -337,
	192, 447, -237, 268, 119, 119, 442, 116, 283, 2,
	251, 239, -177, 166, -158, 363, 119, -292, -291, 411,
	-281, -90, 442, 101, 34, -281, -247, -248, -334, -249,
	-178, 442, -184, -166, 2, -191, -238, -238, -238, -204,
	-205, -175, -369, -370, -370, -75, -338, 443, 443, -137,
	254, -136, -166, 5, -140, 398, -210, -290, -289, -380,
	-381, -378, 217, 176, 390, 193, 131, -138, -335, -336,
	-336, -191, 145, -229, -229, 331, 145, 145, 444, 283,
	95, 360, 267, 176, -191, -204, -191, -330, -447, -278,
	-358, 442, -279, 311, 312, 447, -150, 35, 106, 204,
	-191, 419, 117, -298, -298, 375, -451, 356, -304, 117,
	-298, 231, 242, 382, 130, 391, 108, 245, 148, 442,
	-299, -299, 443, -241, -298, -298, 441, 451, 443, -448,
	447, -225, -298, -239, -239, 443, 443, 375, 375, 375,
	375, 442, 444, -239, -229, 441, 441, 447, 443, -315,
	-316, 113, -298, 444, -406, 260, 442, 442, 443, 443,
	447, 443, 419, 419, 443, 443, 443, -298, 34, 447,
	447, 447, 443, 447, 447, 447, 443, 443, 148, 443,
	443, -271, 271, 443, 11, 12, 433, 434, 435, 436,
	143, 437, 438, 431, 432, 430, 423, 424, 425, 71,
	224, 313, 14, 15, 16, 194, 170, -299, -299, -299,
	443, -302, -303, 148, 145, 34, -266, -266, -266, 443,
	148, -239, 443, 443, 442, 443, -292, -333, -234, 2,
	-326, -186, -364, -292, -292, -239, -298, -326, -326, -260,
	398, 251, 199, -326, -320, 443, -413, -360, -322, -321,
	-360, -297, -296, 146, 237, -184, -223, -321, -321, -364,
	-322, 443, -235, -328, -394, -448, 444, -364, -129, 5,
	242, -129, 148, -229, 24, -340, 440, 441, 8, 8,
	442, -360, -360, -229, 148, -361, -286, 388, 69, 285,
	-361, -151, -191, -178, -185, -166, 239, -289, 166, -157,
	239, -340, -185, 442, 442, 204, 204, -178, -185, 166,
	-178, 166, -185, -185, -420, 285, 246, -298, 219, 283,
	240, -152, 296, -90, -90, 442, -425, 398, 107, -191,
	-194, 296, -200, -359, -359, -255, 296, -192, -369, 413,
	-175, -153, -90, -90, 442, -176, -154, 296, -135, 165,
	245, 435, -166, 407, -166, -209, -210, -166, -435, 415,
	413, 119, 119, -223, 148, -138, -369, -191, -369, -369,
	-369, 2, 442, 2, -191, 119, 251, 239, -159, 114,
	-446, 425, -175, -226, -225, -298, -254, -284, 304, 251,
	-224, -179, -178, 403, -184, -254, -233, 447, 148, 425,
	444, -224, 2, -155, -155, -155, -155, -155, -75, -138,
	447, 442, 425, 425, 442, -369, -369, 443, 447, -191,
	-177, 176, 176, -183, -167, -138, -43, 413, 360, 331,
	331, -166, -187, -175, -191, -188, -204, -279, -298, -324,
	-191, 448, -298, -298, 117, 117, -298, -299, -299, -298,
	117, 148, 442, -298, -308, 30, 30, 443, 447, -294,
	-298, 443, 406, -448, -448, -448, 5, 230, 161, 229,
	-269, 229, -269, -269, 8, 435, -364, 443, -306, 115,
	-298, 370, -364, 435, -407, -181, 442, -166, 411, -225,
	-360, -343, -343, 443, -355, -340, -298, -298, -298, -298,
	-298, -298, -302, -298, -355, -340, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, -299, -299, -299, -299, -299,
	-299, -299, -299, -299, -299, 108, 239, 245, -299, -303,
	-302, -298, -298, -340, 443, 443, 443, -239, -75, -251,
	155, -336, 447, -251, -251, 443, -260, 442, -298, -326,
	441, 443, 447, -321, 441, 447, 450, 425, -223, 444,
	-320, 443, 447, -283, 34, 443, -364, -90, 253, 8,
	441, 443, -360, 443, 443, -229, 375, 375, 119, 239,
	400, -382, -379, -298, -228, -325, -298, 442, 442, -149,
	112, 334, -427, 2, 119, -155, 119, -155, 417, 442,
	442, 375, -426, 76, -239, -298, -139, 101, -363, -423,
	375, 375, 268, -239, 375, -138, 148, 358, 2, 2,
	2, 443, 34, 249, -166, -191, -192, 34, -191, -162,
	2, -273, 398, -176, -191, 119, -160, 210, -446, -367,
	-395, -276, -274, -254, -246, 240, 75, 443, 447, 444,
	-292, -248, -234, -298, 2, 443, -136, -137, -369, -369,
	-369, -138, -140, -140, -290, 2, 442, -177, -167, 442,
	254, -191, -215, -214, 267, 245, 252, 443, -150, -176,
	-298, -298, 117, 30, 30, -298, -298, -308, 443, -298,
	-298, -239, 441, 5, -298, 443, 443, 443, 443, -298,
	444, -408, -166, -298, 443, 443, 443, 443, 447, 447,
	443, 443, 443, 443, -303, 148, 108, 245, 442, 443,
	443, -305, 158, 48, -326, -305, -305, -229, -295, -360,
	-296, -176, 440, -364, -328, 442, 444, 441, 443, -178,
	-185, -289, 119, -383, 76, -384, 63, 131, 82, 239,
	242, 390, 277, 60, 101, 289, 34, 443, 443, 447,
	-150, -228, -229, 239, 353, 101, 239, 101, 94, 385,
	-178, -185, -229, -229, -191, -178, -185, 443, 447, 425,
	-194, -192, -369, 443, -176, -370, 371, -211, 179, -90,
	2, 442, -223, -256, -90, -336, 442, -166, 251, 442,
	-176, -161, 209, -446, -367, -158, -254, -282, 442, 251,
	-90, -179, 2, -226, 425, 443, 443, 94, 94, -228,
	442, 442, -229, -44, -45, 176, 76, 270, -188, 360,
	-150, -298, -298, -298, 443, -448, -364, 435, -402, 267,
	443, -298, -298, -299, 148, 442, -308, -403, 412, -298,
	-239, -403, -403, 443, -322, -360, 2, -289, -185, -189,
	-182, -166, 131, 166, 242, 204, 442, -299, -191, 442,
	2, -437, 103, 180, -288, -438, 81, 354, -325, 443,
	443, 242, 242, -298, -340, -155, -155, 443, 443, 375,
	375, 375, -363, -361, 375, -298, -212, -213, 170, -436,
	413, -209, -435, -228, -191, -228, 251, -446, -367, -159,
	109, -229, 76, -276, -304, -138, 442, 442, 443, -228,
	-228, 443, 447, 26, 442, 26, 442, -191, 443, -226,
	48, 443, 443, -299, -308, 443, -404, -405, -181, -321,
	441, -384, -182, 239, -298, -168, 442, -298, 180, 104,
	162, -211, 442, 289, -174, 63, 442, 442, -178, -185,
	442, 425, 442, -435, 265, 94, 236, 443, 34, 443,
	-273, 443, -191, -367, -160, 393, 240, 443, -185, -254,
	-370, -370, -288, 443, 443, -45, -229, -229, -409, 283,
	312, 157, -239, 443, 447, 34, 119, 443, -385, 225,
	-166, 443, 104, 162, -212, -229, -191, -424, 398, -189,
	-217, -216, -214, -219, -218, -214, -239, -361, -239, -191,
	94, -211, -90, -288, 442, -288, 442, -161, 334, -291,
	443, 443, -211, -288, 443, 443, 443, -410, -411, 40,
	387, 85, -298, -410, -410, -405, -407, 131, -386, -389,
	-388, 251, 149, 266, 339, 443, 353, 409, -437, 443,
	-223, -298, 443, 447, 403, 443, 447, 403, 443, 443,
	442, -212, -436, -211, -228, -211, -228, -247, -138, -138,
	-212, -211, -411, 274, 144, 311, 274, 144, -182, -388,
	251, -389, 251, 393, 105, -385, -216, 170, -218, 148,
	-229, -435, -212, 443, -212, 443, -292, -212, 30, -387,
	236, 302, 53, 334, -387, -386, 442, 442, 443, -442,
	411, -288, -442, -288, -411, 22, 242, 101, -437, -239,
	-239, -156, 53, 302, 2, -211, -211, 443, 443, -212,
	-212, -212, 375, -442, -442, 442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 341, 343, 345, 347,
	348, 350, 352, 353, 354, 355, 356, 358, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 406, 0, 829, 831, 833, 835, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	393, 395, 0, 0, 415, 416, 0, 918, -2, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 488, 489,
	491, 493, 495, 497, 499, 501, 503, 505, 507, 509,
	511, 513, 515, 517, 519, 521, -2, -2, -2, 0,
	-2, -2, -2, 847, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 957,
	292, 294, 296, 298, 300, 0, -2, 971, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 933, 935, 937, 939, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 340, 342, 344, 346, 349, 351, 357, 359, 361,
	720, 1552, 1565, 1566, 1567, 1570, 1571, 1572, 1573, 1574,
	1575, 1896, 1976, 1977, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 0,
	371, 369, 1546, 372, 1733, 374, 376, 279, 280, 281,
	282, 283, 284, 0, 152, 0, 386, 380, 385, 387,
	389, 390, 391, 392, 367, 365, 0, 386, 1597, 384,
	827, 828, 822, 823, 1766, 857, 405, -2, -2, -2,
	1865, -2, 437, -2, 444, 1868, 1768, 447, 0, 449,
	-2, 452, 830, 832, 834, 31, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1631, 1523, 1567, 1526, 1521, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 198, 200,
	203, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	776, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	644, 0, 0, 649, 771, 772, 793, 0, 0, 0,
	0, 287, 289, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 0, 0, 231,
	325, 326, 0, 958, 0, 0, 0, 150, 143, 0,
	0, 632, 394, 396, 0, 142, 0, 0, 826, 0,
	410, 412, 414, 477, 479, 481, 483, 485, 487, 490,
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 523, 0, 0, 0,
	0, 0, 527, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 526, 528, 529, 530,
	0, 575, 614, 615, 0, 762, 959, 859, 837, 850,
	859, 839, 840, 841, 842, 843, 848, 849, 852, 0,
	844, 845, 846, 34, 36, 38, 40, 42, 44, 255,
	257, 259, 261, 265, 267, -2, 931, 932, 293, 295,
	297, 299, 301, 397, 0, 399, 0, 527, 922, 0,
	-2, 0, 963, 963, 963, 0, 0, 932, 930, 0,
	402, 403, 456, 457, 1186, 0, 0, 0, 0, 0,
	1421, 1270, 0, 458, -2, 1301, 1303, 1844, 1865, 1420,
	1305, 1306, 1307, 1308, 1309, 0, 0, 1312, 0, 1314,
	1315, 1316, 1317, 0, 1319, 0, 1323, 1324, 1325, 0,
	1849, 1500, 1563, -2, 1091, 1092, 1093, 1094, 1095, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1559, 0, 1392,
	1339, -2, 1584, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1640, -2, -2, -2, -2,
	-2, -2, -2, 1147, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1879, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 0, 1833, 1850, 1851, 1856, 1858, 1852,
	1841, 1362, -2, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1148, -2,
	1845, 1846, 1861, 1862, 1867, 1872, 1873, 1848, 1857, -2,
	-2, 949, 1741, 952, 720, 950, 934, 936, 0, 938,
	0, 0, 0, 943, 966, 964, 0, 1002, 947, 948,
	958, 1017, 1040, 0, 1022, 0, 1040, 1062, 0, 1027,
	1761, 1340, 1341, 0, 1567, 1564, -2, 2, 0, 0,
	0, 0, 0, 194, 368, 0, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 856, 407, 408,
	0, 432, 0, 436, 1840, -2, -2, 440, 860, 864,
	865, 866, 0, 0, 0, 0, 446, 0, 0, 433,
	434, 450, 453, 0, 52, 0, 1850, 1062, 53, 0,
	1536, 1589, 1590, 1591, 1592, 1593, 1879, 1895, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 55, 0, 1850,
	58, 0, 1850, 0, -2, 62, 0, 1850, 153, 154,
	1580, 1581, 1585, 1586, 1587, 1588, 65, 0, 1542, 67,
	0, 1539, 75, 0, 1850, 1520, 0, 0, 624, 1517,
	1522, 625, 1527, 0, 176, 177, 178, 179, 180, 1850,
	182, 183, 0, 185, 186, 1850, 188, 189, 0, 191,
	206, 207, 0, 209, 0, 1850, 0, 0, 0, 215,
	-2, 232, 0, 229, 0, 219, 220, 222, 223, 224,
	225, 226, 0, 0, 0, 777, 0, 269, 1547, 0,
	-2, 1850, 765, 768, 1850, 770, 782, 1550, 0, -2,
	0, 956, 1850, 873, 645, 646, 647, 648, 0, 278,
	0, 886, 0, 888, 0, 908, 1068, 1017, 233, 234,
	235, 236, 237, 1850, 0, 0, 0, 242, 0, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 135, 1850,
	304, 323, 135, 1850, 307, 135, 1850, 310, 135, 1850,
	313, 1515, 135, 1850, 316, 317, 1850, 319, 155, 320,
	1850, 322, 0, -2, 362, 1553, -2, 328, 0, -2,
	0, 167, 0, 630, 631, 0, 824, 825, 417, 0,
	0, 524, 525, 0, 0, 535, 536, 537, 538, 1739,
	1655, 541, 0, 544, 565, 579, 0, 0, 0, 548,
	550, 629, 552, 0, 0, 554, 0, 556, 0, 558,
	0, 560, 0, 562, 564, 566, 580, 568, 0, 0,
	0, 578, 0, 584, 0, 587, 588, 589, 0, 591,
	592, 593, 594, 0, 596, 597, -2, -2, 601, 603,
	0, 609, 0, 613, 0, 531, 532, 135, 1066, 836,
	-2, 838, 0, 854, 925, -2, 0, 398, 0, 401,
	929, 923, 928, 980, 981, 0, 0, 0, 0, 961,
	962, 0, 0, 0, 920, 921, 0, 0, 0, 0,
	1426, 1427, 1428, 1429, 1430, 1431, 1434, 1435, 1432, 1433,
	1436, 1437, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 1443, 0, 1445, 0, 0, 0,
	0, 0, 0, 1249, 1251, 1508, 0, 0, 1442, 1191,
	1192, 1193, 1228, 1229, 0, 0, 1302, 1505, 1504, 1304,
	0, 1457, 0, 1311, 0, 1183, 1318, 1533, -2, 0,
	1421, 1452, 0, 0, 1326, 1327, 1328, 0, 0, 1457,
	0, 0, 1499, 0, 1394, 0, 1127, 0, 1128, 1129,
	0, 1130, 1131, 1144, 1157, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1149, 0, 0, 0,
	1480, -2, 0, 0, 0, 0, 0, 951, 0, 0,
	1006, 1509, 1513, 1514, 1006, 1006, 0, 0, 1458, 0,
	0, 0, 0, 1059, 1059, 1059, 1057, 1034, 0, 1040,
	0, 1050, 0, 1040, 1040, 0, -2, 1022, 0, 0,
	1050, 1063, 1064, 0, 0, 0, 0, 0, 0, 1568,
	0, 0, 1555, 0, 167, 0, 378, 388, 958, 0,
	1460, 1082, 1078, 1085, 1086, 1087, 1088, 1134, 1135, 1136,
	1137, 1138, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, -2,
	1145, 1147, 1168, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1140, 0, 1115, 1115, 1115, 1132,
	1133, 1156, 1167, 1159, 1167, 1163, 1083, 1084, 1150, 1151,
	1152, 1153, 0, 382, 0, 0, 0, 0, -2, 442,
	0, 862, 0, 867, 467, 468, 469, 869, 870, 445,
	470, 471, 472, 473, 474, 475, 0, 737, 0, 739,
	1529, 0, 443, 460, 448, 0, 454, 76, 819, 103,
	0, 819, 819, 0, 0, 122, 0, 0, 0, 0,
	0, 94, 99, 82, 83, 0, 0, 0, 0, 59,
	745, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 93, 0, 88, 78, 0,
	0, 96, 101, 0, 126, 128, 0, 0, 1053, 623,
	0, 0, 1568, 1525, 0, 0, 0, 0, 208, 210,
	0, 212, 213, 214, 0, 776, 0, 221, 218, 262,
	720, 1850, 744, 1850, 742, 1551, 0, 0, 276, 271,
	0, 273, 763, 0, 955, 0, 0, 0, 0, 783,
	0, 1850, 788, 1538, 1576, 1577, 875, 0, 1074, 0,
	889, 0, 0, 1069, 0, 1071, 0, 239, 240, 241,
	0, 302, 0, 133, 134, 0, 305, 0, 308, 0,
	311, 0, 0, 314, 0, 0, 0, 0, 958, 0,
	0, 0, 145, 0, 0, 0, 0, 167, 1053, 419,
	1053, 421, 0, 0, 539, 540, 542, 543, 545, 546,
	610, 547, 551, 0, 617, 1757, 627, 553, 555, 557,
	559, 561, 0, 570, 0, 572, 0, 574, 582, 585,
	590, 595, 0, 0, 0, 0, 761, 0, 853, 926,
	928, 400, 924, 978, 979, 984, 988, 989, 992, 995,
	996, 986, 1186, 944, 945, 946, 972, 973, 802, 0,
	1976, 1187, 1079, 1188, 1189, 1535, 0, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, -2, -2, -2,
	-2, -2, -2, -2, -2, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, -2, -2, -2, 1226,
	1227, -2, 1444, 1446, 0, 1508, 0, -2, 0, -2,
	-2, -2, -2, 1246, 0, 1248, 1253, 1255, 1257, 0,
	0, 0, 0, 1507, 1267, 1491, 1492, 0, 0, 1423,
	1424, 1425, 1252, 0, 1271, 1506, 1503, 0, 0, 1456,
	969, 1330, 0, 0, 0, 0, 1337, 0, 1534, 1182,
	1169, 1170, 1171, 1172, 1173, 1174, 1184, 1322, 1454, 0,
	1453, 0, 0, 0, 1464, 0, 1498, 1494, 0, 1556,
	1562, 1402, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1374, 0, 1467, -2, -2, -2, -2, -2,
	-2, -2, 0, 1376, 0, 1378, 1458, 1477, 0, 0,
	1272, 0, 0, 0, 1421, 0, 1381, 1458, 1485, 0,
	0, 0, 0, 0, 1458, 0, 1490, 0, 1388, 0,
	1390, 953, 0, 0, 1074, 0, 0, 0, 1512, 1074,
	1074, 0, 1001, 0, 0, 0, 0, 0, 0, 1054,
	1058, 1055, 1056, 0, 0, 1040, 1050, 1014, 0, 0,
	1537, 1020, 1049, 0, 720, 1039, 1050, 1050, 0, -2,
	1024, 0, 0, 969, -2, 168, 719, 0, 0, 0,
	370, 0, 0, 0, 364, 366, 0, 1075, 1077, 0,
	1089, 0, 0, -2, 0, 0, 0, 0, 0, 435,
	0, 861, 868, 0, 464, 0, 466, 738, 1531, 1530,
	0, 455, 0, 0, 0, 0, 818, 105, 1850, 0,
	137, 0, 0, 704, 1543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 746, 747, 749, 755,
	757, 0, 751, 1532, 0, 752, 0, 754, 756, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 1519, 158, 1052, 0, 1518, 1528,
	0, 181, 184, 187, 190, 0, 216, 0, 0, 652,
	635, 0, 740, 743, 0, 720, 775, 1549, 0, 167,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 1850, 877, 883, 0, 971, 1073, 0,
	906, 891, 0, 0, 0, 906, 910, 911, 913, 914,
	0, 0, 1070, 0, 243, 324, 135, 135, 135, 1516,
	135, 135, 156, 318, 321, 327, 363, 958, 167, 165,
	1721, 163, 160, 162, 0, 0, 0, 653, 655, 656,
	657, 658, 0, 1577, 0, 1683, 1577, 140, 167, 418,
	423, 533, 0, 628, 626, 569, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 612, 616, 1067, 927, 0,
	990, 0, 987, 993, 994, 0, 975, 800, 801, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1268, 0,
	-2, 1247, 1250, 1254, 1256, 1258, 0, 0, 0, 0,
	0, 0, 1447, 0, 1449, 1269, 1501, 1504, 1419, 0,
	0, 968, 969, 969, 969, 1336, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1462, 1463, 0, 1329, 0,
	1495, 0, 0, 0, 1338, 0, 0, 0, 1139, 1113,
	0, 1167, 1165, 1166, 1160, 1167, 1164, 0, 0, 0,
	0, 0, 1357, 0, 0, 0, 1361, 1373, 0, 1375,
	1377, 0, 0, 1379, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 1277,
	1380, 1483, 1484, 0, 0, 0, 0, 0, 0, 1386,
	0, 1489, 1387, 1389, 958, 1003, 998, 1510, 1053, 1005,
	1007, 1511, 1540, 998, 998, 0, 1459, 1042, 0, 1044,
	0, 0, 0, 1046, 0, 1035, 0, 1037, 1050, 1019,
	0, 0, 1012, 0, 1011, 720, 1048, 1021, 1025, 1556,
	0, 1065, 0, 1029, 1032, 0, 0, 1569, 192, 195,
	196, 193, 0, 377, 0, 1461, 0, 1080, 0, 0,
	0, 0, 0, 381, 0, 431, -2, 462, 463, 465,
	461, 104, 806, 0, 0, 1541, 0, 107, 1850, 116,
	0, 681, 0, 0, 0, 0, 0, 821, 0, 1850,
	135, 1850, 135, 118, 121, 0, 125, 123, 0, 0,
	672, 77, 819, 80, 86, 0, 0, 0, 92, 0,
	812, 0, 750, 753, 759, 60, 0, 814, 804, 0,
	803, 127, 81, 87, 0, 816, 79, 0, 167, 0,
	0, 1524, 0, 0, 0, 0, 651, -2, 0, 0,
	0, 0, 0, 0, 0, 270, 275, 274, 766, -2,
	769, 778, 0, 780, 792, 0, 0, 0, 879, 883,
	0, 882, 956, 983, 970, 1072, 884, 906, 0, 0,
	0, 894, 896, 893, 890, 887, 1074, 0, 0, 0,
	0, 0, 238, 303, 306, 309, 312, 315, 329, 144,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 1577, 1577, 0, 1545, 141, 420, 0, 0, 571,
	573, 581, 604, 605, 667, 0, 608, 0, 0, 974,
	802, 0, 1190, 1231, 0, 0, -2, 0, 0, 1235,
	0, 0, 0, -2, 0, 0, 0, 1448, 1450, 0,
	1503, 1331, 0, 0, 0, 0, 1313, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 0, 1320, 1321, 1422, 1465, 1493,
	1497, 0, 1557, 1561, 1400, 1401, 1405, 1548, 0, 0,
	0, 1158, 1162, 1342, 0, 0, 0, 0, 0, 0,
	0, 1466, 1476, 1478, 1273, 1274, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, -2, -2, -2, 1291,
	1292, 1293, -2, -2, -2, 0, 0, 0, 1479, 1481,
	1482, 1486, 1487, 0, 1383, 1384, 1385, 1488, 0, 1000,
	0, 1004, 0, 1000, 1000, 965, 1043, 0, 1061, 1045,
	1017, 1036, 0, 1026, 1015, 0, 1016, 0, 1047, 0,
	1023, 1028, 0, 1031, 0, 1331, -2, 151, 379, 0,
	1081, 1090, 0, 1142, 1146, 383, 0, 0, 0, 0,
	136, 679, 703, 0, 0, 795, 802, 0, 0, 109,
	0, 0, 0, 117, 0, 114, 0, 120, 124, 0,
	0, 0, 0, 0, 0, 89, 90, 91, 0, 95,
	0, 0, 0, 0, 0, 138, 0, 0, 211, 774,
	217, 661, 0, 636, 0, 720, 744, 0, 1053, 764,
	779, 0, 0, 0, 0, 0, 881, 883, 0, 874,
	875, 906, 982, 885, 904, -2, 903, 0, 0, 0,
	971, 912, 909, 915, 916, 0, 164, 0, 159, 161,
	0, 147, 0, 0, 654, 659, 0, 0, 0, 0,
	0, 534, 606, 666, 0, 0, 985, 991, 976, 802,
	1233, 1237, 0, 0, 0, 1239, -2, 0, 1261, -2,
	-2, 1451, 1502, 1310, 969, 1332, 1334, 1335, 1185, 1496,
	0, 1407, 1404, 0, 1391, 1114, 1352, 1353, 0, 0,
	1356, 1358, 1359, 1360, 1475, 0, 0, 0, 0, 1382,
	954, 1396, 0, 0, 1008, 1396, 1396, 0, 1040, 1038,
	1013, 1009, 0, 1557, 1030, 0, 0, 1076, 1141, 808,
	810, 106, 0, 680, 0, 683, 0, 0, 0, 0,
	690, 691, 0, 0, 0, 0, 0, 709, 718, 0,
	797, 0, 0, 0, 111, 130, 0, 0, 820, 0,
	135, 135, 0, 0, 807, 0, 0, 0, 0, 0,
	813, 815, 805, 0, 817, 157, 0, 669, 0, 640,
	637, 652, 635, 741, 773, 268, 0, 791, 0, 0,
	0, 871, 883, 0, 876, 877, 277, 0, 0, 0,
	892, 895, 897, 983, 0, 166, 167, 0, 0, 0,
	0, 0, 0, 422, 424, 0, 0, 430, 665, 0,
	977, 1241, -2, -2, 1262, 0, 1558, 1560, 971, 0,
	1393, 0, 0, -2, 0, 0, 0, 940, 0, 999,
	997, 941, 942, 1060, 1050, 0, 1033, 108, 0, 684,
	685, 1544, 687, 0, 689, 692, 0, 694, 1579, 0,
	698, 705, 710, 0, 661, 0, 715, 716, 796, 707,
	0, 110, 112, 129, 799, 113, 119, 0, 0, 0,
	0, 0, 0, 97, 0, 1051, 635, 668, 0, 638,
	0, 0, 0, 0, 792, 0, 0, 0, 878, 879,
	0, 0, 0, 906, 917, 146, 0, 0, 718, 0,
	0, 702, 0, 426, 0, 428, 0, 607, 1333, 1411,
	0, 1354, 1355, -2, 0, 1299, 1395, 1397, 0, 1018,
	1010, 682, 686, 0, 0, 724, 0, 0, 0, 713,
	714, 669, 0, 0, 132, 0, 0, 0, 809, 811,
	0, 0, 0, 633, 0, 641, 0, 661, 0, 718,
	0, 718, 0, 880, 881, 0, 899, 900, 902, 907,
	0, 0, 661, 718, 701, 425, 0, 0, 0, 0,
	0, 0, 1406, 1300, 0, 0, 0, 693, 729, 0,
	0, 0, 711, 712, 709, 0, 720, 115, 0, 798,
	0, 673, 0, 0, 676, 0, 0, 98, 0, 0,
	642, 669, 640, 661, 0, 661, 0, 872, 0, 901,
	167, 167, 669, 661, 427, 429, 1403, 1408, 1412, -2,
	1814, 1628, 0, 1409, 1410, 1398, 1399, 0, 695, 725,
	726, 0, 721, 722, 723, 1578, 696, 697, 706, 717,
	724, 131, 670, 0, 0, 671, 0, 0, 100, 102,
	0, 635, 639, 669, 0, 669, 0, 1074, 148, 149,
	699, 669, 0, 1414, 1415, 1416, 1417, 1418, 688, 727,
	0, 728, 0, 0, 0, 729, 674, 0, 677, 0,
	0, 634, 789, 718, 789, 718, 898, 700, 0, 730,
	0, 733, 734, 0, 731, 709, 0, 0, 664, 784,
	0, 661, 786, 661, 1413, 732, 735, 736, 708, 0,
	0, 660, 662, 663, 790, 669, 669, 669, 0, 789,
	789, 675, 0, 785, 787, 0, 0, 669, 678,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1030
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1036
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1045
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1054
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1070
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1139
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1150
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1169
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1178
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1194
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1247
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1251
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1260
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1271
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1281
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1292
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1302
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1321
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1333
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1340
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1348
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1357
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1362
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1368
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1376
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1389
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1405
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1425
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1434
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1445
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1455
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1476
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1481
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1486
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1491
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1500
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1524
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1541
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1581
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1612
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1633
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1680
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1703
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1707
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1710
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1751
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1760
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1770
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1779
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1788
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1796
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1815
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1857
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1861
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1867
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1877
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1881
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1885
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1891
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1921
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1931
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1953
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1967
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1989
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2006
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2023
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2024
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2034
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2036
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2037
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2038
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2065
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2068
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2069
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2072
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2073
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2102
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2104
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2105
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2117
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       name,
				AsOf:        sqlDollar[8].union.asOfClause(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2148
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2154
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2183
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2217
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2218
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2223
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2224
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2226
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2253
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2287
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2340
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2347
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2351
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2360
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2390
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2392
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2400
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2407
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			return helpWith(sqllex, "DELETE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2417
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2418
		{
			return helpWith(sqllex, "INSERT")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2419
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2421
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2422
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2425
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2431
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2432
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2436
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2450
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2461
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2465
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2485
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2489
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2499
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2514
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "GRANT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2585
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2600
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2614
		{
			return helpWith(sqllex, "RESET")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2615
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2623
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			return helpWith(sqllex, "RESET")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2638
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2641
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2652
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "USE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2659
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2660
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "USE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2702
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2720
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2737
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2761
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2844
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2847
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2851
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2877
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2883
		{
			return unimplemented(sqllex, "set from current")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2884
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2892
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2897
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2904
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2925
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2978
		{
			sqlVAL.union.val = tree.Low
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2982
		{
			sqlVAL.union.val = tree.Normal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2986
		{
			sqlVAL.union.val = tree.High
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3001
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3059
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.str = "client_encoding"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.str = "timezone"
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3088
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3097
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3117
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3186
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3218
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3234
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3244
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3254
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3270
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3301
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3337
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3344
		{
			sqlVAL.union.val = true
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3345
		{
			sqlVAL.union.val = false
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3362
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3372
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3414
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3426
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3466
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3505
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3516
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3549
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3569
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3581
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3710
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3714
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3757
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3810
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3846
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3863
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3881
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3882
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3883
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3887
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3903
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3920
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3922
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3936
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3937
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3938
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3939
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3940
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3941
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3942
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3943
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3964
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3973
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3977
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3997
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4002
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4020
		{
			sqlVAL.str = ""
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4027
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4033
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4047
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4053
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4094
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4127
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4131
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4139
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4161
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4177
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4181
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4194
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4198
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4202
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4291
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4306
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4307
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4308
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4309
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4332
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4364
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match full")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4365
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match simple")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4367
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4382
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4402
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4410
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4418
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4422
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4426
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4436
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4461
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4470
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4478
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4489
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4493
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4494
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4499
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4501
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4504
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4507
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4509
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4522
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4537
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = nil
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4562
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4567
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4568
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4576
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4588
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4589
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4592
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4593
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4599
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4601
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4603
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4605
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4609
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4625
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4643
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4662
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4680
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4698
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4701
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4702
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4706
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = false
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4737
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4750
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4762
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4766
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = tree.Descending
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4797
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4811
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4825
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4839
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4853
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4855
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4859
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4873
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4889
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4903
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4919
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4923
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4928
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4932
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4933
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4941
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4944
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4954
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4966
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4977
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4981
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5002
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5007
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5017
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5025
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5035
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5036
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5044
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5051
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5054
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5063
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5067
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5071
		{
			sqlVAL.str = ""
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5081
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5087
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5091
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5101
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5114
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5116
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5120
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5135
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 871:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5161
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5181
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5185
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5189
		{
			sqlVAL.str = ""
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5195
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.str = ""
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.str = ""
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5219
		{
			sqlVAL.str = ""
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5224
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5225
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5237
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5251
		{
			return helpWith(sqllex, "INSERT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5262
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5273
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5286
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5335
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5349
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5352
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5353
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5355
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5361
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5366
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5370
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 907:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5398
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5402
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5403
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5499
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5507
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5511
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5524
		{
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5530
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5565
		{
			return helpWith(sqllex, "SELECT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5566
		{
			return helpWith(sqllex, "VALUES")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5567
		{
			return helpWith(sqllex, "TABLE")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5589
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5628
		{
			return helpWith(sqllex, "SELECT")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5641
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5650
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5665
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5672
		{
			return helpWith(sqllex, "TABLE")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5688
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5692
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5700
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5706
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5714
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5715
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5719
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5723
		{
			sqlVAL.union.val = nil
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5728
		{
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5729
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = true
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = false
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = false
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = true
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5758
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5759
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5762
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5763
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5777
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5797
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5806
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5825
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5845
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5849
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5878
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5901
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5902
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5905
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5906
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5959
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5961
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5973
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5976
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5998
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6015
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6066
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6080
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6101
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6111
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6115
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6131
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6137
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6159
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6161
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = nil
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6166
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6180
		{
			sqlVAL.union.val = true
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = false
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6224
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6278
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6279
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6306
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6315
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6337
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6343
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6351
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6365
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6384
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6398
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6407
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6416
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6422
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6431
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6451
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6452
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6485
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6497
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6501
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6505
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6517
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6537
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6576
		{
			sqlVAL.union.val = nil
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6689
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6704
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6710
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6716
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6738
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = true
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6779
		{
			sqlVAL.union.val = false
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6788
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6792
		{
			return unimplementedWithIssue(sqllex, 32565)
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6794
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6796
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6803
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6808
		{
			return unimplementedWithIssue(sqllex, 32098)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = true
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = false
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = false
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = tree.Year
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6827
		{
			sqlVAL.union.val = tree.Month
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6831
		{
			sqlVAL.union.val = tree.Day
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.Month
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = nil
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = tree.Second
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6889
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6924
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6933
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7177
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7243
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7265
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7459
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7473
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7491
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7537
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7548
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7549
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7555
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7559
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7573
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7594
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7614
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7687
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7692
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7697
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7712
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7717
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7727
		{
			return unimplemented(sqllex, "treat")
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7748
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7753
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7758
		{
			return unimplemented(sqllex, "within group")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7759
		{
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7794
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7810
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7837
		{
			sqlVAL.str = ""
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7879
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7885
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7898
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7972
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = tree.Any
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Some
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = tree.All
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = tree.Div
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = tree.LT
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = tree.GT
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = tree.LE
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.GE
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = tree.NE
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = tree.Like
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8283
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8332
		{
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8333
		{
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8364
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8445
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8467
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8478
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8489
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8499
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8597
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8626
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8634
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.str = ""
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
