// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8590

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	428, 28,
	-2, 877,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	171, 712,
	188, 712,
	-2, 0,
	-1, 75,
	103, 877,
	177, 877,
	375, 877,
	376, 877,
	-2, 0,
	-1, 86,
	116, 851,
	129, 851,
	185, 851,
	212, 851,
	240, 851,
	248, 851,
	372, 851,
	-2, 840,
	-1, 114,
	121, 521,
	201, 521,
	362, 521,
	-2, 0,
	-1, 115,
	4, 879,
	21, 879,
	22, 879,
	23, 879,
	24, 879,
	26, 879,
	31, 879,
	36, 879,
	37, 879,
	38, 879,
	39, 879,
	40, 879,
	41, 879,
	42, 879,
	43, 879,
	44, 879,
	45, 879,
	47, 879,
	48, 879,
	49, 879,
	50, 879,
	51, 879,
	52, 879,
	53, 879,
	56, 879,
	57, 879,
	58, 879,
	59, 879,
	61, 879,
	62, 879,
	66, 879,
	67, 879,
	68, 879,
	69, 879,
	70, 879,
	72, 879,
	73, 879,
	74, 879,
	75, 879,
	77, 879,
	79, 879,
	80, 879,
	83, 879,
	84, 879,
	92, 879,
	93, 879,
	94, 879,
	95, 879,
	96, 879,
	97, 879,
	98, 879,
	99, 879,
	101, 879,
	103, 879,
	105, 879,
	108, 879,
	109, 879,
	110, 879,
	112, 879,
	114, 879,
	115, 879,
	117, 879,
	118, 879,
	119, 879,
	120, 879,
	121, 879,
	122, 879,
	123, 879,
	124, 879,
	125, 879,
	126, 879,
	134, 879,
	135, 879,
	136, 879,
	137, 879,
	138, 879,
	139, 879,
	141, 879,
	143, 879,
	147, 879,
	149, 879,
	150, 879,
	152, 879,
	153, 879,
	155, 879,
	156, 879,
	157, 879,
	158, 879,
	159, 879,
	160, 879,
	161, 879,
	162, 879,
	163, 879,
	166, 879,
	167, 879,
	172, 879,
	173, 879,
	174, 879,
	177, 879,
	178, 879,
	179, 879,
	180, 879,
	181, 879,
	182, 879,
	183, 879,
	184, 879,
	186, 879,
	188, 879,
	191, 879,
	192, 879,
	193, 879,
	195, 879,
	196, 879,
	199, 879,
	200, 879,
	201, 879,
	203, 879,
	204, 879,
	206, 879,
	207, 879,
	209, 879,
	210, 879,
	213, 879,
	214, 879,
	217, 879,
	219, 879,
	222, 879,
	223, 879,
	224, 879,
	225, 879,
	226, 879,
	228, 879,
	229, 879,
	230, 879,
	231, 879,
	236, 879,
	237, 879,
	238, 879,
	239, 879,
	241, 879,
	242, 879,
	244, 879,
	245, 879,
	246, 879,
	249, 879,
	250, 879,
	252, 879,
	254, 879,
	255, 879,
	256, 879,
	257, 879,
	258, 879,
	259, 879,
	260, 879,
	261, 879,
	263, 879,
	264, 879,
	265, 879,
	266, 879,
	267, 879,
	269, 879,
	270, 879,
	271, 879,
	272, 879,
	273, 879,
	274, 879,
	275, 879,
	276, 879,
	277, 879,
	279, 879,
	280, 879,
	281, 879,
	282, 879,
	283, 879,
	285, 879,
	286, 879,
	287, 879,
	288, 879,
	289, 879,
	290, 879,
	291, 879,
	293, 879,
	295, 879,
	296, 879,
	297, 879,
	298, 879,
	299, 879,
	300, 879,
	302, 879,
	303, 879,
	304, 879,
	305, 879,
	306, 879,
	307, 879,
	308, 879,
	310, 879,
	311, 879,
	312, 879,
	313, 879,
	314, 879,
	315, 879,
	316, 879,
	317, 879,
	318, 879,
	320, 879,
	321, 879,
	322, 879,
	323, 879,
	325, 879,
	326, 879,
	327, 879,
	328, 879,
	330, 879,
	331, 879,
	332, 879,
	333, 879,
	334, 879,
	335, 879,
	336, 879,
	337, 879,
	338, 879,
	339, 879,
	340, 879,
	341, 879,
	343, 879,
	344, 879,
	346, 879,
	347, 879,
	348, 879,
	349, 879,
	350, 879,
	351, 879,
	352, 879,
	353, 879,
	354, 879,
	356, 879,
	357, 879,
	358, 879,
	359, 879,
	362, 879,
	363, 879,
	364, 879,
	365, 879,
	367, 879,
	368, 879,
	370, 879,
	371, 879,
	374, 879,
	375, 879,
	376, 879,
	377, 879,
	379, 879,
	381, 879,
	382, 879,
	383, 879,
	384, 879,
	385, 879,
	386, 879,
	387, 879,
	389, 879,
	390, 879,
	391, 879,
	396, 879,
	397, 879,
	398, 879,
	399, 879,
	400, 879,
	401, 879,
	-2, 0,
	-1, 116,
	1, 773,
	191, 773,
	269, 773,
	274, 773,
	427, 773,
	428, 773,
	-2, 0,
	-1, 118,
	1, 773,
	427, 773,
	428, 773,
	-2, 0,
	-1, 119,
	1, 773,
	427, 773,
	428, 773,
	-2, 0,
	-1, 120,
	1, 777,
	427, 777,
	428, 777,
	-2, 0,
	-1, 144,
	116, 850,
	129, 850,
	185, 850,
	212, 850,
	240, 850,
	248, 850,
	372, 850,
	-2, 843,
	-1, 174,
	4, 886,
	5, 886,
	6, 886,
	7, 886,
	8, 886,
	9, 886,
	10, 886,
	21, 886,
	22, 886,
	23, 886,
	24, 886,
	26, 886,
	31, 886,
	32, 886,
	36, 886,
	37, 886,
	38, 886,
	39, 886,
	40, 886,
	41, 886,
	42, 886,
	43, 886,
	44, 886,
	45, 886,
	47, 886,
	48, 886,
	49, 886,
	50, 886,
	51, 886,
	52, 886,
	53, 886,
	54, 886,
	55, 886,
	56, 886,
	57, 886,
	58, 886,
	59, 886,
	61, 886,
	62, 886,
	64, 886,
	66, 886,
	67, 886,
	68, 886,
	69, 886,
	70, 886,
	72, 886,
	73, 886,
	74, 886,
	75, 886,
	77, 886,
	79, 886,
	80, 886,
	82, 886,
	83, 886,
	84, 886,
	85, 886,
	86, 886,
	87, 886,
	88, 886,
	89, 886,
	90, 886,
	91, 886,
	92, 886,
	93, 886,
	94, 886,
	95, 886,
	96, 886,
	97, 886,
	98, 886,
	99, 886,
	100, 886,
	101, 886,
	103, 886,
	105, 886,
	108, 886,
	109, 886,
	110, 886,
	112, 886,
	114, 886,
	115, 886,
	117, 886,
	118, 886,
	119, 886,
	120, 886,
	121, 886,
	122, 886,
	123, 886,
	124, 886,
	125, 886,
	126, 886,
	127, 886,
	128, 886,
	134, 886,
	135, 886,
	136, 886,
	137, 886,
	138, 886,
	139, 886,
	141, 886,
	143, 886,
	146, 886,
	147, 886,
	149, 886,
	150, 886,
	152, 886,
	153, 886,
	155, 886,
	156, 886,
	157, 886,
	158, 886,
	159, 886,
	160, 886,
	161, 886,
	162, 886,
	163, 886,
	164, 886,
	166, 886,
	167, 886,
	172, 886,
	173, 886,
	174, 886,
	176, 886,
	177, 886,
	178, 886,
	179, 886,
	180, 886,
	181, 886,
	182, 886,
	183, 886,
	184, 886,
	186, 886,
	188, 886,
	189, 886,
	190, 886,
	191, 886,
	192, 886,
	193, 886,
	194, 886,
	195, 886,
	196, 886,
	199, 886,
	200, 886,
	201, 886,
	203, 886,
	204, 886,
	206, 886,
	207, 886,
	208, 886,
	209, 886,
	210, 886,
	211, 886,
	213, 886,
	214, 886,
	217, 886,
	219, 886,
	220, 886,
	221, 886,
	222, 886,
	223, 886,
	224, 886,
	225, 886,
	226, 886,
	227, 886,
	228, 886,
	229, 886,
	230, 886,
	231, 886,
	232, 886,
	234, 886,
	235, 886,
	236, 886,
	237, 886,
	238, 886,
	239, 886,
	241, 886,
	242, 886,
	245, 886,
	246, 886,
	249, 886,
	250, 886,
	251, 886,
	252, 886,
	253, 886,
	254, 886,
	255, 886,
	256, 886,
	257, 886,
	258, 886,
	259, 886,
	260, 886,
	261, 886,
	263, 886,
	264, 886,
	265, 886,
	266, 886,
	267, 886,
	269, 886,
	270, 886,
	271, 886,
	272, 886,
	273, 886,
	274, 886,
	275, 886,
	276, 886,
	277, 886,
	279, 886,
	280, 886,
	281, 886,
	282, 886,
	283, 886,
	285, 886,
	286, 886,
	287, 886,
	288, 886,
	289, 886,
	290, 886,
	291, 886,
	293, 886,
	294, 886,
	295, 886,
	296, 886,
	297, 886,
	298, 886,
	299, 886,
	300, 886,
	302, 886,
	303, 886,
	304, 886,
	305, 886,
	306, 886,
	307, 886,
	308, 886,
	310, 886,
	311, 886,
	312, 886,
	313, 886,
	314, 886,
	315, 886,
	316, 886,
	317, 886,
	318, 886,
	319, 886,
	320, 886,
	321, 886,
	322, 886,
	323, 886,
	324, 886,
	325, 886,
	326, 886,
	327, 886,
	328, 886,
	330, 886,
	331, 886,
	332, 886,
	333, 886,
	334, 886,
	335, 886,
	336, 886,
	337, 886,
	338, 886,
	339, 886,
	340, 886,
	341, 886,
	343, 886,
	344, 886,
	346, 886,
	347, 886,
	348, 886,
	349, 886,
	350, 886,
	351, 886,
	352, 886,
	353, 886,
	354, 886,
	356, 886,
	357, 886,
	358, 886,
	359, 886,
	362, 886,
	363, 886,
	364, 886,
	365, 886,
	366, 886,
	367, 886,
	368, 886,
	370, 886,
	371, 886,
	374, 886,
	375, 886,
	376, 886,
	377, 886,
	378, 886,
	379, 886,
	381, 886,
	382, 886,
	383, 886,
	384, 886,
	385, 886,
	386, 886,
	387, 886,
	389, 886,
	390, 886,
	391, 886,
	396, 886,
	397, 886,
	398, 886,
	399, 886,
	400, 886,
	401, 886,
	402, 886,
	410, 886,
	415, 886,
	416, 886,
	417, 886,
	424, 886,
	430, 886,
	-2, 0,
	-1, 177,
	1, 28,
	428, 28,
	-2, 877,
	-1, 509,
	145, 1602,
	360, 1602,
	407, 1602,
	426, 1602,
	-2, 0,
	-1, 510,
	145, 1522,
	360, 1522,
	407, 1522,
	426, 1522,
	-2, 0,
	-1, 512,
	145, 1675,
	360, 1675,
	407, 1675,
	426, 1675,
	-2, 0,
	-1, 514,
	145, 1703,
	360, 1703,
	407, 1703,
	426, 1703,
	-2, 0,
	-1, 521,
	145, 1607,
	360, 1607,
	407, 1607,
	426, 1607,
	-2, 398,
	-1, 538,
	426, 1482,
	429, 1482,
	-2, 564,
	-1, 539,
	426, 1484,
	429, 1484,
	-2, 565,
	-1, 540,
	426, 1483,
	429, 1483,
	-2, 566,
	-1, 541,
	429, 1434,
	-2, 567,
	-1, 643,
	1, 494,
	423, 494,
	425, 494,
	427, 494,
	428, 494,
	-2, 0,
	-1, 644,
	1, 563,
	142, 563,
	423, 563,
	425, 563,
	427, 563,
	428, 563,
	-2, 0,
	-1, 650,
	1, 508,
	423, 508,
	425, 508,
	427, 508,
	428, 508,
	-2, 0,
	-1, 652,
	1, 512,
	423, 512,
	425, 512,
	427, 512,
	428, 512,
	-2, 0,
	-1, 654,
	1, 522,
	423, 522,
	425, 522,
	427, 522,
	428, 522,
	-2, 0,
	-1, 655,
	1, 528,
	423, 528,
	425, 528,
	427, 528,
	428, 528,
	-2, 0,
	-1, 656,
	1, 531,
	423, 531,
	425, 531,
	427, 531,
	428, 531,
	-2, 0,
	-1, 660,
	1, 545,
	423, 545,
	425, 545,
	427, 545,
	428, 545,
	-2, 0,
	-1, 661,
	1, 547,
	423, 547,
	425, 547,
	427, 547,
	428, 547,
	-2, 0,
	-1, 704,
	129, 890,
	212, 890,
	240, 890,
	-2, 846,
	-1, 717,
	129, 889,
	212, 889,
	240, 889,
	-2, 844,
	-1, 739,
	424, 1780,
	-2, 1183,
	-1, 740,
	424, 1781,
	-2, 1184,
	-1, 768,
	424, 1476,
	-2, 1467,
	-1, 774,
	5, 1012,
	-2, 1512,
	-1, 775,
	5, 1013,
	-2, 1517,
	-1, 776,
	5, 1014,
	-2, 1516,
	-1, 777,
	5, 1015,
	-2, 1700,
	-1, 778,
	5, 1016,
	-2, 1609,
	-1, 779,
	5, 1017,
	-2, 1668,
	-1, 780,
	5, 1018,
	-2, 1670,
	-1, 781,
	5, 1019,
	-2, 1680,
	-1, 782,
	5, 1020,
	-2, 1671,
	-1, 783,
	5, 1021,
	-2, 1672,
	-1, 784,
	5, 1022,
	-2, 1511,
	-1, 785,
	5, 1023,
	-2, 1711,
	-1, 786,
	5, 1024,
	-2, 1578,
	-1, 787,
	5, 1025,
	-2, 1616,
	-1, 788,
	5, 1026,
	-2, 1617,
	-1, 789,
	5, 1027,
	-2, 1582,
	-1, 790,
	5, 1028,
	424, 1491,
	-2, 1482,
	-1, 791,
	5, 1081,
	424, 1081,
	-2, 1746,
	-1, 796,
	424, 1492,
	-2, 1483,
	-1, 798,
	5, 1032,
	-2, 1744,
	-1, 799,
	5, 1033,
	-2, 1745,
	-1, 800,
	5, 1034,
	-2, 1581,
	-1, 801,
	5, 1035,
	-2, 1757,
	-1, 802,
	5, 1036,
	-2, 1583,
	-1, 803,
	5, 1037,
	-2, 1584,
	-1, 804,
	5, 1038,
	-2, 1585,
	-1, 805,
	5, 1039,
	-2, 1726,
	-1, 806,
	5, 1040,
	-2, 1755,
	-1, 807,
	5, 1041,
	-2, 1564,
	-1, 808,
	5, 1042,
	-2, 1565,
	-1, 809,
	5, 1056,
	-2, 1738,
	-1, 811,
	5, 1031,
	-2, 1734,
	-1, 812,
	5, 1031,
	-2, 1733,
	-1, 813,
	5, 1031,
	-2, 1750,
	-1, 814,
	5, 1048,
	-2, 1728,
	-1, 815,
	5, 1049,
	-2, 1513,
	-1, 816,
	5, 1059,
	-2, 1727,
	-1, 817,
	5, 1061,
	-2, 1765,
	-1, 819,
	5, 1072,
	-2, 1541,
	-1, 820,
	5, 1073,
	-2, 1759,
	-1, 821,
	5, 1075,
	-2, 1760,
	-1, 822,
	5, 1077,
	-2, 1761,
	-1, 823,
	5, 1079,
	-2, 1701,
	-1, 824,
	5, 1000,
	-2, 1591,
	-1, 825,
	5, 1001,
	-2, 1592,
	-1, 845,
	5, 1067,
	-2, 1690,
	-1, 863,
	5, 1066,
	-2, 1766,
	-1, 864,
	5, 1068,
	390, 1068,
	-2, 1729,
	-1, 865,
	5, 1069,
	390, 1069,
	-2, 1730,
	-1, 910,
	424, 1491,
	-2, 1482,
	-1, 939,
	145, 1703,
	360, 1703,
	407, 1703,
	426, 1703,
	-2, 0,
	-1, 940,
	191, 785,
	269, 785,
	274, 785,
	-2, 386,
	-1, 1058,
	285, 1464,
	417, 1464,
	-2, 1463,
	-1, 1115,
	259, 875,
	-2, 691,
	-1, 1127,
	243, 1486,
	-2, 0,
	-1, 1166,
	1, 279,
	423, 279,
	425, 279,
	427, 279,
	428, 279,
	-2, 849,
	-1, 1169,
	4, 1764,
	11, 1764,
	12, 1764,
	14, 1764,
	15, 1764,
	16, 1764,
	17, 1764,
	18, 1764,
	19, 1764,
	21, 1764,
	22, 1764,
	23, 1764,
	24, 1764,
	26, 1764,
	29, 1764,
	31, 1764,
	33, 1764,
	36, 1764,
	37, 1764,
	38, 1764,
	39, 1764,
	40, 1764,
	41, 1764,
	42, 1764,
	43, 1764,
	44, 1764,
	45, 1764,
	47, 1764,
	48, 1764,
	49, 1764,
	50, 1764,
	51, 1764,
	52, 1764,
	53, 1764,
	56, 1764,
	57, 1764,
	58, 1764,
	59, 1764,
	61, 1764,
	62, 1764,
	63, 1764,
	66, 1764,
	67, 1764,
	68, 1764,
	69, 1764,
	70, 1764,
	71, 1764,
	72, 1764,
	73, 1764,
	74, 1764,
	75, 1764,
	77, 1764,
	78, 1764,
	79, 1764,
	80, 1764,
	82, 1764,
	83, 1764,
	84, 1764,
	92, 1764,
	93, 1764,
	94, 1764,
	95, 1764,
	96, 1764,
	97, 1764,
	98, 1764,
	99, 1764,
	101, 1764,
	103, 1764,
	105, 1764,
	108, 1764,
	109, 1764,
	110, 1764,
	112, 1764,
	114, 1764,
	115, 1764,
	117, 1764,
	118, 1764,
	119, 1764,
	120, 1764,
	121, 1764,
	122, 1764,
	123, 1764,
	124, 1764,
	125, 1764,
	126, 1764,
	130, 1764,
	131, 1764,
	132, 1764,
	133, 1764,
	134, 1764,
	135, 1764,
	136, 1764,
	137, 1764,
	138, 1764,
	139, 1764,
	140, 1764,
	141, 1764,
	143, 1764,
	146, 1764,
	147, 1764,
	149, 1764,
	150, 1764,
	152, 1764,
	153, 1764,
	155, 1764,
	156, 1764,
	157, 1764,
	158, 1764,
	159, 1764,
	160, 1764,
	161, 1764,
	162, 1764,
	163, 1764,
	164, 1764,
	165, 1764,
	166, 1764,
	167, 1764,
	168, 1764,
	169, 1764,
	170, 1764,
	172, 1764,
	173, 1764,
	174, 1764,
	176, 1764,
	177, 1764,
	178, 1764,
	179, 1764,
	180, 1764,
	181, 1764,
	182, 1764,
	183, 1764,
	184, 1764,
	186, 1764,
	188, 1764,
	189, 1764,
	190, 1764,
	191, 1764,
	192, 1764,
	193, 1764,
	194, 1764,
	195, 1764,
	196, 1764,
	197, 1764,
	198, 1764,
	199, 1764,
	200, 1764,
	201, 1764,
	203, 1764,
	204, 1764,
	206, 1764,
	207, 1764,
	208, 1764,
	209, 1764,
	210, 1764,
	211, 1764,
	213, 1764,
	214, 1764,
	217, 1764,
	218, 1764,
	219, 1764,
	222, 1764,
	223, 1764,
	224, 1764,
	225, 1764,
	226, 1764,
	227, 1764,
	228, 1764,
	229, 1764,
	230, 1764,
	231, 1764,
	234, 1764,
	236, 1764,
	237, 1764,
	238, 1764,
	239, 1764,
	241, 1764,
	242, 1764,
	245, 1764,
	246, 1764,
	247, 1764,
	249, 1764,
	250, 1764,
	252, 1764,
	254, 1764,
	255, 1764,
	256, 1764,
	257, 1764,
	258, 1764,
	259, 1764,
	260, 1764,
	261, 1764,
	263, 1764,
	264, 1764,
	265, 1764,
	266, 1764,
	267, 1764,
	269, 1764,
	270, 1764,
	271, 1764,
	272, 1764,
	273, 1764,
	274, 1764,
	275, 1764,
	276, 1764,
	277, 1764,
	279, 1764,
	280, 1764,
	281, 1764,
	282, 1764,
	283, 1764,
	284, 1764,
	285, 1764,
	286, 1764,
	287, 1764,
	288, 1764,
	289, 1764,
	290, 1764,
	291, 1764,
	293, 1764,
	294, 1764,
	295, 1764,
	296, 1764,
	297, 1764,
	298, 1764,
	299, 1764,
	300, 1764,
	301, 1764,
	302, 1764,
	303, 1764,
	304, 1764,
	305, 1764,
	306, 1764,
	307, 1764,
	308, 1764,
	310, 1764,
	311, 1764,
	312, 1764,
	313, 1764,
	314, 1764,
	315, 1764,
	316, 1764,
	317, 1764,
	318, 1764,
	320, 1764,
	321, 1764,
	322, 1764,
	323, 1764,
	324, 1764,
	325, 1764,
	326, 1764,
	327, 1764,
	328, 1764,
	330, 1764,
	331, 1764,
	332, 1764,
	333, 1764,
	334, 1764,
	335, 1764,
	336, 1764,
	337, 1764,
	338, 1764,
	339, 1764,
	340, 1764,
	341, 1764,
	343, 1764,
	344, 1764,
	346, 1764,
	347, 1764,
	348, 1764,
	349, 1764,
	350, 1764,
	351, 1764,
	352, 1764,
	353, 1764,
	354, 1764,
	356, 1764,
	357, 1764,
	358, 1764,
	359, 1764,
	362, 1764,
	363, 1764,
	364, 1764,
	365, 1764,
	367, 1764,
	368, 1764,
	370, 1764,
	371, 1764,
	374, 1764,
	375, 1764,
	376, 1764,
	377, 1764,
	379, 1764,
	381, 1764,
	382, 1764,
	383, 1764,
	384, 1764,
	385, 1764,
	386, 1764,
	387, 1764,
	389, 1764,
	390, 1764,
	391, 1764,
	396, 1764,
	397, 1764,
	398, 1764,
	399, 1764,
	400, 1764,
	401, 1764,
	402, 1764,
	403, 1764,
	405, 1764,
	406, 1764,
	407, 1764,
	408, 1764,
	409, 1764,
	410, 1764,
	412, 1764,
	413, 1764,
	414, 1764,
	415, 1764,
	416, 1764,
	417, 1764,
	418, 1764,
	419, 1764,
	420, 1764,
	422, 1764,
	425, 1764,
	426, 1764,
	429, 1764,
	430, 1764,
	-2, 0,
	-1, 1171,
	145, 1675,
	360, 1675,
	407, 1675,
	426, 1675,
	-2, 0,
	-1, 1238,
	1, 1718,
	423, 1718,
	425, 1718,
	426, 1718,
	427, 1718,
	428, 1718,
	-2, 543,
	-1, 1239,
	1, 1673,
	423, 1673,
	425, 1673,
	426, 1673,
	427, 1673,
	428, 1673,
	-2, 544,
	-1, 1252,
	191, 785,
	269, 785,
	274, 785,
	-2, 780,
	-1, 1256,
	129, 889,
	212, 889,
	240, 889,
	-2, 847,
	-1, 1346,
	116, 851,
	129, 851,
	185, 851,
	212, 851,
	240, 851,
	248, 851,
	372, 851,
	-2, 1237,
	-1, 1396,
	425, 1369,
	-2, 0,
	-1, 1429,
	116, 851,
	129, 851,
	185, 851,
	212, 851,
	240, 851,
	248, 851,
	372, 851,
	-2, 959,
	-1, 1483,
	424, 1071,
	-2, 1059,
	-1, 1522,
	191, 785,
	269, 785,
	274, 785,
	-2, 388,
	-1, 1751,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1116,
	-1, 1752,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1117,
	-1, 1753,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1118,
	-1, 1754,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1119,
	-1, 1755,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1120,
	-1, 1756,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1121,
	-1, 1757,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1122,
	-1, 1758,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1123,
	-1, 1770,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1135,
	-1, 1771,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1136,
	-1, 1772,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	197, 0,
	198, 0,
	405, 0,
	406, 0,
	407, 0,
	408, 0,
	409, 0,
	-2, 1137,
	-1, 1775,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1142,
	-1, 1781,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1146,
	-1, 1783,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1154,
	-1, 1784,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1155,
	-1, 1785,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1156,
	-1, 1786,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1157,
	-1, 1874,
	5, 1028,
	145, 1380,
	424, 1491,
	-2, 1482,
	-1, 1875,
	145, 1381,
	-2, 1722,
	-1, 1876,
	145, 1382,
	-2, 1606,
	-1, 1877,
	145, 1383,
	-2, 1542,
	-1, 1878,
	145, 1384,
	-2, 1573,
	-1, 1879,
	145, 1385,
	-2, 1605,
	-1, 1880,
	145, 1386,
	-2, 1667,
	-1, 1948,
	1, 960,
	82, 960,
	116, 960,
	129, 960,
	146, 960,
	151, 960,
	154, 960,
	176, 960,
	185, 960,
	194, 960,
	208, 960,
	212, 960,
	227, 960,
	240, 960,
	243, 960,
	248, 960,
	292, 960,
	294, 960,
	372, 960,
	380, 960,
	393, 960,
	394, 960,
	404, 960,
	423, 960,
	425, 960,
	427, 960,
	428, 960,
	429, 960,
	-2, 959,
	-1, 1953,
	424, 1468,
	-2, 1480,
	-1, 1972,
	424, 1070,
	-2, 1060,
	-1, 2066,
	425, 1439,
	429, 1439,
	-2, 1455,
	-1, 2171,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1144,
	-1, 2172,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1148,
	-1, 2178,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1150,
	-1, 2351,
	191, 785,
	269, 785,
	274, 785,
	-2, 385,
	-1, 2432,
	259, 875,
	-2, 691,
	-1, 2502,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1152,
	-1, 2509,
	189, 0,
	190, 0,
	234, 0,
	-2, 1171,
	-1, 2570,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1201,
	-1, 2571,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1202,
	-1, 2572,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1203,
	-1, 2576,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1207,
	-1, 2577,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1208,
	-1, 2578,
	14, 0,
	15, 0,
	16, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1209,
	-1, 2620,
	424, 1469,
	-2, 1481,
	-1, 2736,
	189, 0,
	190, 0,
	234, 0,
	-2, 1172,
	-1, 2739,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1175,
	-1, 2740,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1177,
	-1, 2882,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1176,
	-1, 2883,
	17, 0,
	18, 0,
	19, 0,
	39, 0,
	164, 0,
	165, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1178,
	-1, 2893,
	189, 0,
	-2, 1210,
	-1, 2980,
	189, 0,
	-2, 1211,
	-1, 3077,
	39, 0,
	164, 0,
	211, 0,
	324, 0,
	402, 0,
	410, 0,
	-2, 1725,
}

const sqlPrivate = 57344

const sqlLast = 62562

var sqlAct = [...]int{

	796, 3076, 3086, 3051, 3143, 3054, 3087, 2840, 3039, 3088,
	3052, 2107, 2674, 2921, 2910, 2540, 2874, 2984, 3075, 2855,
	914, 1158, 2810, 1738, 2692, 2099, 2687, 2795, 2697, 2638,
	2164, 2450, 754, 2442, 1940, 1798, 2639, 519, 903, 2897,
	203, 1344, 203, 203, 1668, 2455, 203, 203, 203, 203,
	203, 1262, 2068, 203, 2199, 718, 963, 1909, 2279, 1453,
	2444, 540, 2064, 2328, 1121, 1936, 1454, 2096, 594, 2317,
	2128, 1422, 2130, 2197, 2293, 1624, 2108, 203, 1403, 198,
	1062, 540, 1635, 727, 1623, 1424, 2002, 1620, 2771, 1565,
	2067, 2304, 1632, 2278, 1735, 1827, 2054, 1941, 2593, 1731,
	1939, 5, 1055, 1810, 726, 137, 2359, 2985, 1354, 1574,
	1074, 1943, 2160, 1432, 2454, 1598, 1592, 951, 1993, 1795,
	85, 1252, 1553, 1838, 1621, 1154, 33, 1404, 792, 2032,
	1551, 1071, 2640, 2333, 2055, 1064, 895, 1647, 2065, 1141,
	2841, 1167, 2101, 1617, 1151, 2071, 541, 200, 199, 542,
	488, 942, 898, 472, 1821, 1413, 1928, 1913, 496, 2031,
	1906, 877, 1811, 1335, 1870, 1263, 504, 144, 1261, 203,
	203, 536, 1138, 145, 513, 1641, 1082, 589, 1366, 1165,
	137, 1564, 753, 875, 1267, 900, 491, 635, 1251, 1124,
	2609, 2195, 1423, 2610, 722, 2100, 1669, 2497, 499, 1649,
	717, 1649, 1649, 3173, 2462, 2056, 3166, 1922, 545, 548,
	1922, 2426, 768, 2349, 3165, 1103, 3140, 121, 1922, 3138,
	2809, 1441, 59, 2809, 722, 1915, 1601, 1922, 545, 548,
	1661, 2461, 3135, 60, 116, 3106, 1605, 3105, 3102, 1922,
	3099, 1922, 3103, 3096, 3100, 3073, 2056, 1605, 64, 1605,
	2251, 2252, 603, 3072, 3071, 3070, 3034, 1605, 1661, 1661,
	1965, 3021, 3015, 40, 118, 1605, 2809, 723, 3013, 3011,
	3009, 2596, 2809, 2809, 2809, 39, 3035, 69, 930, 2982,
	878, 878, 137, 1965, 2951, 2949, 2969, 2939, 1605, 2809,
	892, 1605, 2938, 2049, 2931, 2930, 1605, 42, 1605, 2809,
	2903, 43, 1661, 2884, 1605, 705, 74, 1965, 2869, 119,
	2214, 704, 2473, 2836, 41, 84, 2215, 1922, 2830, 75,
	44, 1097, 1922, 2808, 2738, 2711, 2703, 2809, 1965, 2704,
	2704, 712, 2615, 2605, 2599, 2533, 2616, 2606, 1922, 1605,
	925, 2596, 2480, 2290, 45, 590, 2418, 1922, 2246, 2251,
	2252, 2245, 1922, 879, 76, 1922, 2241, 2226, 2126, 1978,
	1922, 2227, 1665, 1922, 1964, 1275, 1276, 1914, 1965, 59,
	795, 592, 1962, 1959, 1102, 1922, 2831, 1922, 1955, 2257,
	60, 1921, 1605, 2251, 2252, 1922, 2269, 2270, 2271, 909,
	1278, 1605, 881, 1664, 882, 64, 174, 1665, 2046, 1991,
	1525, 2734, 2473, 2081, 2418, 2198, 1605, 2163, 1604, 926,
	1989, 1399, 1081, 177, 2463, 883, 880, 1277, 1544, 711,
	710, 709, 708, 174, 69, 707, 703, 702, 701, 700,
	699, 698, 176, 2464, 3093, 697, 1650, 696, 1650, 1650,
	794, 695, 694, 2266, 693, 692, 633, 751, 632, 631,
	630, 629, 628, 74, 627, 626, 77, 2267, 625, 176,
	624, 623, 84, 46, 622, 621, 75, 620, 1091, 619,
	618, 617, 175, 616, 615, 614, 613, 203, 2257, 612,
	1096, 611, 168, 49, 143, 80, 203, 81, 2461, 47,
	169, 610, 609, 120, 1283, 1605, 602, 926, 48, 175,
	1824, 76, 601, 580, 579, 174, 561, 203, 560, 1914,
	559, 146, 2257, 203, 1861, 551, 52, 550, 549, 114,
	2104, 526, 174, 525, 524, 523, 508, 196, 117, 203,
	966, 203, 203, 1067, 203, 966, 203, 195, 146, 194,
	2268, 176, 193, 192, 203, 203, 725, 906, 2251, 2252,
	191, 190, 189, 188, 923, 187, 2267, 186, 176, 185,
	1825, 2272, 926, 115, 203, 203, 184, 203, 1067, 1067,
	203, 203, 203, 147, 203, 1657, 2786, 1648, 1713, 203,
	183, 175, 182, 203, 203, 203, 203, 203, 1067, 1067,
	2267, 168, 1067, 181, 203, 1067, 203, 180, 175, 169,
	179, 950, 178, 77, 1947, 955, 2251, 2252, 168, 2750,
	1162, 1058, 2705, 2613, 2331, 1345, 169, 905, 2220, 2210,
	146, 2251, 2252, 4, 907, 1826, 1823, 2147, 174, 2059,
	964, 143, 80, 1956, 81, 1075, 940, 146, 1671, 2268,
	1067, 2089, 2019, 1859, 1857, 1855, 1114, 1853, 1425, 1549,
	1125, 1125, 174, 2261, 2253, 2254, 2255, 2256, 2258, 2259,
	203, 1077, 1439, 593, 176, 959, 114, 1052, 1057, 1111,
	1274, 2863, 1360, 2268, 203, 1356, 1087, 2257, 1275, 1276,
	957, 1090, 916, 1095, 3074, 1101, 2975, 937, 176, 203,
	1084, 545, 548, 1083, 2972, 2970, 2952, 818, 2870, 2788,
	1275, 1276, 1670, 1278, 175, 1129, 2770, 2769, 2920, 2757,
	115, 1828, 723, 2756, 168, 1140, 1275, 1276, 1155, 2755,
	147, 2754, 169, 1145, 1148, 1278, 1176, 1168, 175, 174,
	1277, 2748, 2747, 1179, 2746, 2257, 2745, 2628, 168, 2627,
	2625, 1278, 2619, 146, 2421, 174, 169, 2251, 2252, 2590,
	2257, 2589, 1277, 2253, 2254, 2255, 2256, 2258, 2259, 1256,
	1257, 1126, 2588, 891, 2517, 176, 1085, 591, 1277, 1279,
	1280, 1281, 1282, 1284, 1285, 174, 1297, 2263, 2264, 2265,
	2513, 176, 2417, 2326, 2262, 2260, 2261, 2253, 2254, 2255,
	2256, 2258, 2259, 2286, 174, 2277, 2250, 1356, 1357, 2090,
	1355, 1343, 2247, 1822, 2244, 175, 2242, 1283, 2225, 2204,
	1250, 176, 2203, 2267, 2196, 168, 2127, 1948, 1832, 1274,
	2732, 175, 1273, 169, 1183, 1545, 2033, 1970, 2267, 1283,
	176, 168, 1629, 1610, 2159, 1300, 1301, 1302, 1303, 169,
	3171, 1608, 3151, 3150, 2103, 1283, 915, 2542, 3066, 3064,
	3059, 175, 2862, 174, 3007, 1255, 3005, 1305, 1306, 1307,
	146, 168, 3002, 3001, 2996, 2993, 2968, 2967, 1253, 169,
	175, 1801, 2916, 1305, 1306, 1307, 2257, 203, 2895, 2853,
	168, 2849, 723, 2845, 2843, 2785, 2768, 2681, 169, 176,
	146, 2680, 2678, 2656, 705, 2655, 2268, 2645, 2644, 1401,
	704, 1258, 2601, 203, 2508, 1270, 1271, 1298, 2474, 146,
	2436, 2268, 2409, 2390, 2369, 2368, 203, 966, 203, 203,
	2251, 2252, 1807, 1298, 1067, 540, 203, 203, 2345, 175,
	540, 203, 2289, 2343, 2224, 203, 1420, 1860, 2223, 168,
	2209, 2187, 1367, 1364, 1974, 1973, 1951, 169, 1410, 1275,
	1276, 2088, 2253, 2254, 2255, 2256, 2258, 2259, 966, 1933,
	1920, 1460, 1851, 1339, 1407, 1408, 1612, 1438, 146, 1402,
	1398, 1397, 1519, 1396, 1278, 1395, 1394, 1393, 1447, 1392,
	2266, 1672, 1540, 1391, 1390, 1388, 1433, 1387, 878, 1304,
	1299, 1368, 1369, 1386, 1520, 1385, 1421, 2369, 1384, 137,
	1383, 1277, 1382, 1381, 1380, 1379, 1299, 2262, 2260, 2261,
	2253, 2254, 2255, 2256, 2258, 2259, 1378, 1442, 1377, 2987,
	723, 1376, 1340, 2260, 2261, 2253, 2254, 2255, 2256, 2258,
	2259, 2787, 2310, 1338, 2742, 1547, 1170, 936, 928, 920,
	2624, 2608, 2604, 2213, 1934, 1357, 1967, 1444, 2341, 2257,
	1336, 1434, 1430, 2251, 2252, 2393, 952, 1544, 1550, 3006,
	1400, 1522, 1544, 2445, 2868, 2832, 1858, 1856, 1854, 954,
	1852, 1544, 545, 548, 1425, 2611, 752, 545, 548, 1543,
	2476, 1067, 203, 1427, 1281, 1282, 1284, 1285, 966, 2475,
	2056, 1824, 1373, 2973, 2971, 1248, 1449, 2035, 1374, 2231,
	1559, 1516, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	909, 203, 909, 1451, 2230, 2229, 953, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 1613, 2267, 203, 2228,
	2919, 1446, 1536, 203, 1569, 203, 2169, 203, 1371, 2021,
	1383, 203, 1628, 1198, 1372, 949, 1531, 1450, 1383, 2654,
	1362, 1825, 1517, 2255, 2256, 2258, 2259, 1669, 1625, 2483,
	2404, 1589, 1587, 690, 1591, 2898, 2100, 1595, 2544, 3094,
	1839, 1067, 203, 1067, 1972, 1389, 2218, 1370, 1067, 3104,
	1573, 3129, 203, 203, 2634, 890, 3101, 1161, 1606, 2457,
	3048, 1187, 1067, 1067, 2688, 203, 2134, 3020, 691, 1673,
	3128, 203, 2822, 2004, 1979, 1638, 540, 203, 575, 203,
	2268, 203, 3170, 203, 2945, 203, 1826, 1823, 1599, 2353,
	1342, 3095, 686, 1630, 581, 203, 684, 203, 1084, 545,
	548, 1083, 1682, 682, 721, 680, 203, 677, 1995, 1703,
	2942, 2941, 1995, 1701, 2940, 2670, 2667, 2666, 2631, 2659,
	2630, 2208, 1645, 1994, 1222, 203, 2207, 2206, 1603, 1594,
	203, 2205, 918, 1793, 2173, 2051, 2045, 2184, 906, 1140,
	906, 954, 2042, 2023, 1961, 1782, 1254, 1080, 966, 2839,
	1850, 2097, 576, 1652, 1791, 1849, 1654, 2007, 2182, 1656,
	1848, 1847, 1740, 1659, 2879, 2673, 674, 1716, 2484, 1710,
	2022, 1532, 1828, 720, 1711, 1640, 1168, 1678, 1460, 1460,
	954, 1954, 1643, 1674, 1180, 1718, 586, 1797, 953, 2923,
	2014, 2262, 2260, 2261, 2253, 2254, 2255, 2256, 2258, 2259,
	2392, 1185, 1260, 1685, 1221, 3068, 1797, 2806, 905, 3019,
	905, 731, 1736, 1737, 1805, 907, 937, 907, 2342, 1803,
	1666, 484, 2647, 545, 548, 2013, 1554, 953, 1285, 1555,
	1644, 966, 1217, 1566, 2803, 2486, 722, 1535, 1534, 2485,
	2818, 1544, 1541, 2144, 479, 1828, 935, 1692, 1739, 608,
	3120, 1787, 2161, 2162, 2453, 2179, 2452, 1712, 1554, 1788,
	1563, 1555, 1789, 585, 1822, 1794, 2180, 1812, 1813, 2185,
	203, 2401, 2524, 2527, 2804, 1561, 1181, 2396, 1586, 1846,
	1218, 2006, 1567, 1568, 3090, 1812, 1571, 1569, 1195, 2354,
	2998, 1714, 3119, 2668, 966, 203, 1715, 2084, 1717, 1365,
	2043, 946, 2412, 2452, 203, 705, 1968, 203, 705, 705,
	966, 1727, 1561, 1556, 1728, 1729, 1869, 2947, 1873, 1873,
	1883, 1885, 1890, 3128, 1812, 1558, 737, 1839, 2039, 723,
	1912, 1840, 2259, 1538, 1545, 2033, 1836, 2525, 1949, 1545,
	2033, 1554, 723, 1709, 1555, 1556, 723, 1434, 1545, 2033,
	578, 577, 3153, 1199, 2724, 2889, 1649, 1558, 1831, 1828,
	719, 1892, 3146, 1960, 1247, 1220, 1952, 2876, 1808, 2381,
	2251, 2252, 2816, 2269, 2270, 2271, 1560, 1333, 1935, 947,
	2222, 878, 1945, 1946, 948, 1929, 2005, 588, 2733, 203,
	1834, 2352, 1184, 1790, 665, 3091, 1944, 2181, 1925, 2720,
	2622, 1792, 583, 2657, 2380, 2183, 2799, 1992, 1560, 2800,
	1953, 722, 917, 931, 2726, 716, 3118, 1204, 527, 1486,
	966, 3089, 723, 1828, 1963, 203, 1881, 137, 1556, 1901,
	2266, 1910, 2648, 203, 3127, 1918, 1919, 584, 1233, 1186,
	1558, 1926, 2802, 203, 1930, 1931, 1266, 1539, 3125, 2924,
	688, 2957, 2805, 687, 1430, 3032, 203, 678, 1569, 1067,
	2852, 1561, 2875, 3092, 678, 2440, 679, 2092, 678, 1702,
	587, 203, 966, 1700, 665, 203, 203, 1996, 1460, 2817,
	1615, 582, 480, 203, 666, 1969, 203, 2766, 2387, 203,
	2149, 1560, 1409, 1561, 2175, 716, 1485, 909, 1590, 2257,
	929, 924, 471, 2725, 2415, 1570, 2933, 1977, 203, 675,
	533, 3160, 2026, 1796, 909, 203, 2932, 203, 1804, 203,
	1990, 1259, 203, 1684, 203, 2334, 203, 1182, 203, 203,
	481, 203, 1067, 1067, 1067, 1058, 1067, 2053, 3144, 1976,
	203, 203, 2914, 203, 2008, 2010, 1980, 2801, 2272, 203,
	1368, 1369, 2877, 2025, 2122, 2123, 1196, 2000, 2040, 2990,
	203, 2018, 203, 1523, 666, 934, 482, 2152, 483, 2016,
	1999, 2633, 2441, 1412, 3030, 2365, 1561, 2267, 1333, 2024,
	203, 203, 203, 1265, 203, 1779, 1557, 535, 2136, 3154,
	1060, 2048, 2041, 1650, 2361, 941, 2052, 2093, 2579, 3145,
	2094, 2025, 3031, 1552, 1197, 203, 2061, 1194, 2063, 2133,
	2034, 2036, 2037, 2038, 1639, 2000, 667, 1627, 1557, 2767,
	1626, 1084, 545, 548, 2057, 1115, 1118, 1230, 2113, 3147,
	1622, 1614, 2082, 1575, 1265, 1723, 2124, 1416, 2102, 137,
	2102, 2138, 1561, 2139, 2383, 2523, 3159, 2111, 1545, 1542,
	1416, 1579, 1173, 2118, 2151, 906, 2106, 3040, 1205, 1706,
	2268, 2115, 2120, 2116, 2385, 2117, 1264, 1419, 2148, 1597,
	1526, 1168, 906, 2119, 529, 2000, 2318, 2125, 2137, 1982,
	1419, 2135, 2693, 2821, 2856, 1414, 2176, 1596, 534, 2915,
	2820, 1984, 1576, 2371, 1266, 2027, 667, 1190, 1927, 1417,
	2370, 1557, 203, 2384, 2307, 1231, 2154, 2078, 2167, 668,
	1777, 1780, 1417, 1679, 1593, 607, 1412, 1264, 1415, 600,
	2156, 1985, 2158, 1924, 2580, 905, 531, 1724, 1530, 1923,
	2581, 1958, 907, 1983, 2306, 1137, 1567, 1568, 1957, 1127,
	1135, 2150, 905, 2080, 2201, 2202, 669, 720, 486, 907,
	2675, 3, 946, 2419, 1637, 2335, 1128, 1776, 2211, 1580,
	3132, 528, 2842, 2319, 2263, 2264, 2265, 2912, 2414, 2174,
	1232, 2262, 2260, 2261, 2253, 2254, 2255, 2256, 2258, 2259,
	1416, 2142, 2772, 2143, 946, 1418, 2594, 966, 1844, 668,
	1528, 2851, 723, 3134, 532, 1245, 1227, 1225, 1418, 1215,
	2913, 2894, 1213, 203, 1529, 530, 203, 1211, 2765, 2291,
	1419, 2672, 2280, 203, 2298, 2299, 203, 203, 966, 2507,
	1581, 1582, 2819, 2028, 2029, 1209, 669, 966, 1414, 1577,
	947, 2217, 203, 2337, 2321, 948, 2288, 1207, 2243, 1201,
	2314, 2186, 1417, 1485, 1485, 2312, 203, 1133, 2300, 2315,
	2322, 2323, 2050, 2020, 1975, 1578, 1440, 1437, 2281, 1246,
	2329, 1415, 947, 203, 203, 203, 1177, 948, 1460, 203,
	1778, 2305, 203, 2146, 2145, 1457, 2141, 1708, 1689, 203,
	203, 203, 203, 203, 1518, 2346, 2347, 2297, 3085, 552,
	2313, 2850, 1375, 203, 203, 1110, 2330, 1699, 1843, 2295,
	2309, 203, 2340, 1460, 2325, 605, 606, 2302, 2303, 598,
	599, 2308, 2292, 203, 1067, 3037, 203, 2535, 2324, 2792,
	1136, 2362, 966, 2212, 2320, 1134, 2691, 2332, 1418, 913,
	966, 2350, 1583, 485, 2283, 2284, 2285, 2366, 1244, 1226,
	1224, 676, 1214, 2355, 203, 1212, 203, 2652, 203, 2650,
	1210, 1067, 203, 2632, 203, 1067, 1067, 1067, 2395, 2439,
	2098, 2086, 2336, 203, 2085, 2083, 2077, 1663, 1208, 203,
	1662, 2351, 1660, 1658, 203, 1655, 203, 1653, 2367, 1651,
	1206, 1448, 1200, 203, 2356, 1611, 2373, 2410, 2377, 2378,
	1132, 1584, 1114, 1609, 2427, 1600, 2358, 1588, 909, 1585,
	1572, 2000, 1559, 1562, 1067, 1067, 909, 909, 2459, 2391,
	909, 2372, 2443, 2375, 2388, 2402, 2389, 2386, 203, 966,
	203, 203, 966, 203, 2448, 2447, 2961, 1559, 2423, 2397,
	2332, 887, 2406, 1114, 909, 2400, 2420, 1698, 203, 2411,
	1268, 2165, 2472, 3129, 2407, 2872, 2408, 2405, 2871, 1548,
	2963, 1995, 2481, 2338, 888, 1995, 2430, 1599, 2012, 2702,
	681, 683, 2011, 1599, 1686, 2398, 2009, 2348, 1569, 2399,
	1242, 1243, 3000, 2424, 1275, 1276, 2811, 3036, 2491, 553,
	554, 966, 1275, 1276, 2434, 2977, 2773, 2458, 1348, 2030,
	1460, 966, 1353, 203, 723, 2015, 1272, 2465, 2471, 1278,
	2446, 137, 487, 2047, 2017, 2848, 2456, 714, 2618, 665,
	2105, 2166, 2087, 1446, 2076, 2456, 1911, 2510, 1521, 1075,
	1452, 1269, 964, 2466, 2467, 2468, 1277, 2469, 2470, 2488,
	716, 3142, 2339, 2495, 1277, 889, 1460, 1460, 1602, 2546,
	2493, 3158, 1345, 1485, 2519, 2520, 2521, 2623, 2492, 2545,
	498, 2489, 2251, 2252, 1460, 1460, 906, 556, 555, 1275,
	1276, 1987, 1986, 2530, 906, 906, 715, 1987, 906, 2515,
	1736, 2549, 2526, 2528, 2529, 2344, 1189, 1988, 1845, 1820,
	1229, 2532, 1188, 1228, 203, 1460, 2743, 2522, 1736, 2559,
	1343, 2538, 906, 1341, 2534, 2906, 203, 2866, 2548, 666,
	2541, 2710, 966, 2686, 557, 558, 2437, 2583, 2435, 2091,
	1631, 2612, 2556, 1241, 1240, 2591, 2558, 1223, 2607, 2587,
	203, 1219, 1457, 1457, 1216, 1202, 905, 933, 862, 773,
	1667, 1524, 689, 907, 905, 905, 673, 2922, 905, 1235,
	2649, 907, 907, 2584, 3047, 907, 663, 2379, 1688, 1680,
	1681, 1203, 1616, 1690, 2311, 1932, 3029, 2626, 2751, 2221,
	2595, 2592, 905, 203, 137, 2600, 2983, 2597, 2598, 907,
	2888, 1842, 1361, 70, 762, 844, 2793, 2635, 2641, 2070,
	2069, 969, 1533, 767, 1546, 1971, 1872, 1456, 770, 203,
	203, 2603, 203, 2614, 1458, 772, 771, 203, 1459, 1363,
	2664, 769, 2620, 1455, 2079, 2109, 653, 1537, 1802, 1837,
	966, 203, 2216, 1358, 742, 1067, 2682, 793, 2660, 764,
	1835, 927, 741, 2316, 2636, 2451, 2617, 2861, 2671, 1722,
	2157, 667, 203, 1719, 2621, 572, 2248, 2669, 919, 1898,
	1891, 1887, 1249, 1334, 203, 203, 1067, 1067, 1067, 2110,
	203, 203, 956, 2699, 2665, 203, 2706, 201, 745, 474,
	475, 1800, 1350, 492, 474, 492, 502, 507, 966, 2698,
	522, 2723, 2677, 2191, 2694, 2689, 2658, 2327, 546, 2676,
	2025, 2460, 1966, 2651, 2679, 2653, 1730, 2685, 2684, 886,
	909, 885, 2696, 2717, 597, 2695, 884, 2728, 546, 3053,
	3050, 2700, 2722, 1527, 1981, 1327, 758, 2708, 2707, 2296,
	2422, 1460, 1107, 203, 2999, 2713, 2712, 1326, 2718, 2719,
	685, 2000, 713, 2992, 668, 945, 944, 943, 2364, 3152,
	2646, 173, 170, 2729, 172, 171, 2662, 2413, 2737, 89,
	38, 2629, 2741, 37, 36, 18, 2295, 113, 112, 111,
	110, 109, 909, 108, 107, 106, 105, 104, 103, 102,
	101, 669, 100, 99, 2111, 98, 97, 96, 95, 94,
	93, 92, 203, 91, 90, 35, 518, 515, 1726, 51,
	50, 88, 966, 87, 966, 2764, 474, 474, 17, 34,
	15, 55, 56, 14, 908, 30, 31, 79, 78, 29,
	16, 203, 203, 203, 28, 26, 27, 12, 9, 8,
	11, 13, 25, 142, 141, 73, 203, 140, 2779, 72,
	139, 203, 1457, 203, 138, 2329, 203, 203, 203, 203,
	203, 71, 24, 1485, 2812, 10, 23, 203, 203, 1067,
	134, 966, 68, 1067, 2814, 909, 2778, 2781, 906, 2780,
	2784, 203, 203, 2641, 136, 2791, 2775, 2776, 135, 65,
	133, 132, 966, 66, 2838, 1067, 131, 130, 1485, 67,
	129, 22, 6, 54, 7, 203, 2873, 2482, 2844, 82,
	2774, 83, 32, 63, 2783, 62, 61, 2641, 21, 53,
	20, 164, 163, 162, 161, 966, 157, 156, 160, 2860,
	158, 2833, 159, 155, 128, 166, 2837, 1893, 2790, 165,
	906, 153, 150, 149, 2847, 152, 154, 1114, 905, 151,
	2865, 966, 148, 167, 2857, 907, 127, 2854, 58, 2824,
	2880, 2448, 2867, 2789, 2859, 2000, 2829, 126, 125, 124,
	2834, 123, 122, 57, 19, 2858, 2044, 2, 1, 0,
	0, 2878, 0, 2823, 0, 0, 0, 966, 0, 0,
	1806, 2828, 0, 203, 0, 203, 0, 966, 203, 0,
	0, 1460, 0, 0, 0, 0, 203, 0, 1348, 909,
	905, 0, 966, 0, 2000, 2901, 2902, 907, 2885, 0,
	2909, 0, 0, 2777, 2905, 964, 0, 0, 2896, 909,
	2864, 2900, 203, 906, 0, 2927, 0, 2456, 0, 0,
	0, 2926, 0, 2928, 0, 2907, 2925, 0, 2641, 2121,
	0, 2886, 1897, 203, 0, 1460, 0, 909, 1067, 0,
	0, 0, 0, 203, 2904, 0, 0, 2815, 901, 2943,
	0, 0, 0, 2948, 0, 2950, 0, 2825, 2826, 2954,
	203, 0, 2641, 2956, 2641, 1485, 0, 2886, 2641, 2935,
	0, 909, 2641, 2960, 0, 0, 2964, 1739, 0, 203,
	0, 2908, 2846, 905, 2965, 203, 0, 0, 197, 0,
	907, 0, 1739, 203, 0, 2966, 2944, 2958, 0, 2698,
	0, 0, 0, 0, 921, 2000, 0, 2989, 1460, 0,
	0, 1485, 1485, 597, 2995, 0, 2988, 0, 2959, 2986,
	0, 203, 203, 2448, 2976, 0, 0, 0, 203, 1485,
	1485, 0, 2997, 0, 932, 2981, 0, 0, 203, 1067,
	522, 2936, 2937, 3010, 203, 3012, 0, 906, 1067, 1067,
	0, 0, 203, 0, 203, 2953, 201, 0, 201, 201,
	1485, 1072, 3014, 201, 0, 3018, 3026, 906, 0, 3024,
	3025, 546, 1086, 0, 203, 0, 3023, 203, 0, 203,
	0, 966, 0, 3043, 0, 0, 0, 0, 0, 0,
	0, 201, 1109, 3055, 201, 906, 0, 201, 201, 201,
	3062, 1072, 909, 3060, 3049, 3061, 201, 3063, 3045, 3065,
	201, 201, 201, 201, 1072, 3033, 203, 905, 3067, 3017,
	0, 522, 1457, 201, 907, 0, 0, 3069, 3004, 906,
	3081, 3082, 3084, 3083, 0, 0, 909, 905, 909, 0,
	203, 0, 909, 3056, 907, 3058, 909, 3097, 3108, 203,
	3022, 0, 0, 3003, 3109, 0, 3110, 1457, 3112, 3117,
	3114, 0, 0, 0, 2962, 905, 203, 0, 0, 0,
	3057, 0, 907, 0, 3111, 3126, 3113, 3124, 0, 0,
	3123, 1739, 0, 2641, 3131, 2641, 3130, 201, 0, 3133,
	0, 0, 0, 0, 3055, 3115, 3116, 3136, 3137, 905,
	3139, 201, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 1345, 3149, 3148, 2806, 507, 1893, 1893, 0,
	3141, 0, 0, 0, 3157, 0, 0, 0, 0, 0,
	59, 0, 3155, 0, 3156, 0, 0, 0, 0, 0,
	0, 60, 2803, 0, 0, 2796, 0, 0, 3163, 3164,
	0, 3167, 3168, 3169, 0, 0, 64, 0, 2794, 0,
	906, 3174, 0, 2798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3027, 0, 3028, 0, 0, 0, 0,
	562, 2111, 2804, 0, 0, 69, 1485, 0, 3161, 3162,
	0, 0, 0, 0, 906, 0, 906, 0, 3044, 0,
	906, 0, 0, 0, 906, 0, 0, 0, 0, 3172,
	2797, 2403, 0, 0, 74, 0, 1893, 1893, 1893, 0,
	0, 0, 0, 84, 0, 0, 0, 75, 0, 0,
	905, 0, 1897, 1897, 565, 0, 0, 907, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 2428, 0,
	0, 0, 2431, 2432, 2433, 0, 0, 909, 0, 909,
	0, 3107, 76, 0, 905, 0, 905, 2188, 2189, 0,
	905, 907, 573, 907, 905, 0, 0, 907, 0, 0,
	0, 907, 0, 0, 0, 0, 571, 0, 0, 0,
	1457, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2478, 2479, 0, 474, 0, 0, 0, 1457, 1457,
	0, 1275, 1276, 0, 2799, 0, 0, 2800, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 908, 0, 0,
	201, 1897, 1897, 1897, 0, 0, 1278, 0, 0, 1457,
	0, 0, 0, 1086, 0, 201, 1445, 0, 0, 0,
	2802, 0, 546, 1086, 492, 0, 0, 546, 1086, 0,
	2805, 0, 522, 1277, 77, 0, 2274, 2275, 2276, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 1411, 0, 0,
	0, 0, 143, 80, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 174, 0, 906, 0, 906, 1123, 0,
	0, 0, 0, 0, 593, 0, 0, 114, 0, 0,
	0, 1144, 1144, 1144, 1079, 0, 0, 0, 0, 0,
	1283, 0, 0, 0, 1174, 0, 1485, 0, 0, 176,
	0, 0, 0, 0, 0, 2801, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 1306,
	1307, 115, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 905, 0, 905, 566, 175,
	0, 0, 907, 0, 907, 0, 1893, 1893, 0, 168,
	1485, 0, 0, 0, 0, 0, 0, 169, 1234, 546,
	0, 564, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 563, 0, 0, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 201, 0,
	0, 0, 0, 0, 0, 0, 570, 0, 0, 0,
	0, 574, 0, 0, 0, 1636, 567, 0, 0, 0,
	201, 0, 201, 0, 201, 1457, 0, 569, 474, 0,
	0, 0, 0, 1485, 0, 1893, 1893, 1893, 1893, 1893,
	1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893,
	1893, 1893, 1893, 1893, 0, 1893, 0, 0, 0, 522,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 1072,
	201, 1897, 1897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 522, 0, 0, 0, 0, 0, 201, 0,
	0, 0, 0, 546, 201, 0, 201, 0, 201, 0,
	201, 0, 201, 2714, 2715, 2716, 2503, 2504, 0, 0,
	0, 0, 1704, 0, 1705, 0, 0, 0, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 507, 0, 0, 0, 0, 522, 0, 0,
	1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897,
	1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 1897, 0,
	1897, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 2560, 2561, 2562, 2563, 2564,
	2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574,
	2575, 2576, 2577, 2578, 0, 2582, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 474, 0, 1277,
	0, 0, 0, 0, 0, 0, 2835, 1297, 0, 0,
	0, 0, 908, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 0, 0, 0, 0, 0, 908,
	0, 474, 0, 0, 201, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	60, 0, 0, 0, 0, 0, 0, 2251, 2252, 0,
	2269, 2270, 2271, 0, 0, 64, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 729, 1283, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 204, 0, 0,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 1088, 0, 1092, 0, 1098, 492, 2266, 0, 0,
	0, 0, 1457, 74, 0, 0, 0, 0, 0, 1619,
	0, 0, 84, 1292, 1293, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 2003, 1642, 1298, 1642, 1175, 0, 539, 0,
	201, 0, 0, 1178, 0, 0, 0, 0, 0, 0,
	201, 76, 0, 0, 0, 0, 0, 0, 539, 0,
	0, 0, 0, 201, 0, 0, 2257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 1676, 546, 2058, 0, 0, 0, 0, 0, 0,
	2066, 0, 0, 1086, 0, 0, 201, 0, 0, 1687,
	1304, 0, 0, 0, 0, 1693, 0, 1694, 0, 1695,
	0, 1696, 0, 1697, 0, 1636, 0, 1299, 0, 0,
	0, 0, 2003, 0, 474, 0, 201, 0, 0, 201,
	0, 201, 0, 201, 1707, 201, 201, 1893, 1072, 0,
	1316, 0, 0, 0, 2267, 0, 0, 2131, 597, 0,
	2003, 0, 0, 77, 0, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 1086,
	1328, 1329, 1330, 1331, 1332, 0, 1893, 0, 0, 0,
	0, 143, 80, 0, 81, 0, 0, 201, 201, 201,
	0, 201, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 174, 0, 1359, 0, 0, 0, 0, 0,
	0, 0, 201, 593, 0, 0, 114, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 2268, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1897, 2251, 2252, 0, 2269, 2270, 2271, 0,
	115, 0, 0, 0, 0, 0, 1893, 0, 0, 0,
	147, 2512, 0, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 2893, 168, 2251,
	2252, 1897, 2269, 2270, 2271, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2511, 0, 1086,
	0, 0, 0, 2266, 0, 0, 0, 146, 0, 0,
	0, 0, 1405, 1405, 1405, 0, 2917, 0, 0, 0,
	0, 2263, 2264, 2265, 0, 1950, 0, 0, 2262, 2260,
	2261, 2253, 2254, 2255, 2256, 2258, 2259, 0, 0, 2266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 797, 0, 0, 0,
	0, 1897, 2257, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 908, 0, 0, 0, 0, 1278, 0,
	0, 908, 908, 0, 0, 908, 0, 0, 0, 0,
	474, 0, 0, 474, 0, 0, 2980, 0, 2257, 0,
	474, 0, 0, 474, 474, 1277, 0, 0, 0, 1428,
	0, 2272, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	2267, 0, 0, 0, 0, 0, 0, 2272, 0, 0,
	201, 2003, 2360, 0, 0, 0, 2003, 0, 0, 2360,
	0, 0, 0, 0, 0, 0, 2003, 2360, 2003, 2360,
	2360, 0, 0, 0, 0, 0, 2267, 0, 0, 1079,
	201, 201, 1283, 0, 0, 0, 0, 967, 1445, 0,
	1068, 0, 967, 0, 0, 0, 0, 1619, 0, 0,
	201, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2268, 0, 1068, 1068, 2114, 0, 0,
	1144, 1636, 1144, 1636, 1144, 201, 1079, 1079, 0, 201,
	0, 201, 0, 0, 0, 1068, 1068, 0, 0, 1068,
	201, 0, 1068, 0, 0, 0, 1072, 2140, 0, 2268,
	1298, 2003, 0, 474, 0, 0, 0, 0, 0, 0,
	2003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2153, 1079,
	2155, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 2487, 0, 1072, 201, 0,
	201, 0, 0, 2168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 2263, 2264, 2265,
	0, 0, 0, 0, 2262, 2260, 2261, 2253, 2254, 2255,
	2256, 2258, 2259, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2263, 2264, 2265, 0, 0, 0, 0,
	2262, 2260, 2261, 2253, 2254, 2255, 2256, 2258, 2259, 0,
	2543, 0, 1720, 0, 1725, 0, 0, 0, 0, 0,
	1732, 0, 0, 0, 0, 0, 0, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 0, 1781, 0, 1783, 1784, 1785, 1786, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1809, 0, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 908, 0, 0, 0, 1347,
	0, 474, 0, 1833, 2251, 2252, 0, 2269, 2270, 2271,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 0, 1086, 0, 0,
	0, 0, 1889, 0, 1900, 1902, 1907, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2643, 0, 0,
	0, 0, 0, 0, 2266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 763, 86, 0, 0, 0,
	0, 2357, 0, 0, 967, 0, 2003, 1636, 0, 1636,
	0, 1068, 539, 0, 201, 0, 968, 539, 0, 1069,
	0, 968, 0, 0, 0, 0, 0, 0, 201, 0,
	0, 2394, 1123, 2257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 2003,
	908, 0, 1275, 1276, 1069, 1069, 0, 0, 2273, 0,
	0, 2131, 2131, 0, 0, 0, 0, 597, 597, 0,
	0, 86, 201, 0, 1069, 1069, 0, 1278, 1069, 0,
	0, 1069, 2272, 0, 0, 0, 2425, 0, 0, 0,
	2429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2438, 0, 0, 1277, 0, 0, 0, 0, 0,
	0, 2267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	2752, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2060, 0, 2062, 2490,
	0, 1079, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 896, 86, 0, 967, 2496, 0, 0, 0,
	0, 1283, 0, 0, 908, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 2268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 0, 0, 2003, 2360,
	2003, 0, 0, 2251, 2252, 0, 2269, 2270, 2271, 0,
	0, 0, 2643, 1086, 0, 0, 0, 0, 2003, 0,
	2360, 0, 0, 1086, 1086, 201, 2003, 2360, 0, 0,
	0, 0, 0, 0, 201, 201, 0, 0, 1068, 1298,
	1068, 0, 0, 0, 0, 1068, 2643, 0, 1086, 2066,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	1068, 0, 0, 2266, 0, 0, 0, 0, 0, 0,
	0, 0, 2003, 539, 0, 0, 0, 0, 2263, 2264,
	2265, 0, 0, 0, 0, 2262, 2260, 2261, 2253, 2254,
	2255, 2256, 2258, 2259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2171, 2172, 0, 0, 0, 0,
	2178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 0, 0, 0, 0, 2192,
	2193, 0, 2257, 0, 0, 1833, 0, 0, 0, 0,
	0, 0, 0, 2200, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2003, 0, 2360, 0, 0, 2911, 0, 2219, 0, 0,
	0, 0, 0, 201, 0, 0, 0, 2643, 0, 2232,
	0, 2272, 0, 968, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2267, 2643, 0, 2643, 0, 2683, 0, 2643, 0, 0,
	201, 2643, 0, 0, 968, 0, 0, 0, 967, 2690,
	1086, 1907, 1907, 1907, 0, 0, 1279, 1280, 1281, 1282,
	1284, 1285, 1405, 0, 0, 0, 0, 201, 0, 0,
	2301, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2543, 0, 0, 0,
	0, 0, 474, 2721, 0, 0, 0, 0, 0, 0,
	2911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 967, 0, 2268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 967, 2003, 2360,
	0, 0, 0, 0, 0, 201, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 0, 0,
	86, 2360, 86, 0, 86, 0, 0, 0, 0, 1086,
	0, 1086, 2382, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 0, 0,
	0, 3041, 0, 0, 1086, 0, 201, 724, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 1275, 1276, 0, 0, 0, 0, 2263, 2264, 2265,
	0, 0, 0, 2543, 2262, 2260, 2261, 2253, 2254, 2255,
	2256, 2258, 2259, 0, 0, 0, 1278, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 2449, 0,
	0, 0, 2643, 0, 2643, 0, 2003, 1069, 0, 1069,
	0, 0, 0, 1277, 1069, 0, 2827, 0, 0, 0,
	0, 1297, 0, 2911, 0, 1123, 1068, 0, 1069, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2494, 0, 0,
	0, 1732, 0, 1275, 1276, 2506, 0, 2498, 2499, 0,
	0, 2502, 706, 0, 0, 2505, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 2509, 0, 0, 0, 1278, 1337,
	1283, 0, 0, 2516, 0, 0, 2301, 0, 0, 1068,
	1068, 1068, 0, 1068, 0, 0, 0, 1346, 0, 0,
	0, 1352, 0, 0, 968, 1277, 2536, 0, 1305, 1306,
	1307, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2550, 2551, 0, 2552, 2553, 2554, 0,
	0, 2555, 1275, 1276, 0, 0, 0, 2557, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2918, 0, 0, 1278, 1298, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 2585, 2586,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 1275,
	1276, 0, 1283, 0, 1277, 0, 0, 968, 0, 0,
	0, 0, 1297, 0, 2602, 0, 0, 0, 0, 0,
	0, 2955, 0, 0, 1278, 0, 0, 0, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 2974, 0,
	86, 1277, 0, 1426, 0, 1429, 0, 0, 0, 1297,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 1300, 1301, 1302, 1303, 0, 2637, 0, 0, 0,
	1298, 1283, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2661,
	0, 0, 0, 2501, 0, 1315, 1325, 0, 0, 1305,
	1306, 1307, 0, 0, 0, 0, 3008, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 0, 3016, 0, 1283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 1313, 0, 0, 0, 1305, 1306, 1307, 1298,
	1405, 0, 0, 1299, 967, 0, 0, 3046, 0, 0,
	0, 2709, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 968, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 1298, 0, 2730, 2731,
	0, 0, 0, 0, 2735, 2736, 0, 0, 0, 2739,
	2740, 0, 0, 0, 0, 1304, 2744, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 1299, 0, 0, 2749, 0, 0, 968, 0,
	0, 0, 2753, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 0, 1304, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 0, 0, 1299,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 967, 1069, 1069,
	1069, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 1068, 1068, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 1314, 0, 0, 0, 0, 0, 0,
	2813, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282,
	1284, 1285, 0, 0, 0, 0, 0, 0, 1275, 1276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 0, 967, 0, 0, 967,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1277, 0, 0, 706, 0, 0, 706, 706, 1297, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	2881, 2882, 2883, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 967, 1324,
	0, 0, 0, 0, 0, 0, 2891, 2892, 967, 0,
	0, 0, 2500, 0, 0, 0, 0, 0, 1275, 1276,
	2899, 1799, 0, 1277, 0, 0, 0, 1300, 1301, 1302,
	1303, 1297, 0, 0, 724, 0, 0, 1283, 1294, 0,
	0, 0, 0, 1278, 0, 0, 0, 1346, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 1306, 1307, 2934, 0,
	1277, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	729, 0, 0, 0, 0, 0, 0, 2946, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 0,
	1283, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 1298, 0, 0, 0, 967,
	0, 0, 2177, 0, 1315, 1325, 0, 1429, 1305, 1306,
	1307, 0, 0, 0, 968, 0, 0, 1300, 1301, 1302,
	1303, 0, 0, 968, 0, 0, 0, 1283, 86, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 2991, 0, 0, 2994, 0, 0,
	0, 1313, 0, 0, 0, 1305, 1306, 1307, 1298, 0,
	0, 1304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 1299, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 967, 0, 0,
	1069, 0, 1068, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 1304, 0, 968, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	86, 1299, 0, 1068, 1068, 1068, 0, 1069, 0, 0,
	0, 1069, 1069, 1069, 0, 0, 0, 0, 3080, 3080,
	3080, 0, 0, 0, 1316, 967, 0, 0, 0, 0,
	86, 1304, 0, 0, 0, 0, 3098, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 86, 1299, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0,
	1069, 1069, 0, 0, 0, 3080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 86, 968, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 2760, 0, 0, 0, 2759,
	3080, 0, 0, 0, 0, 0, 0, 968, 0, 967,
	0, 967, 0, 0, 0, 0, 0, 968, 0, 0,
	1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 1288,
	1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1311, 0,
	0, 0, 0, 0, 0, 1278, 1275, 1276, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 967, 0,
	1068, 1278, 1277, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 1799, 1294, 0, 967,
	0, 0, 1068, 0, 0, 0, 0, 0, 1277, 0,
	0, 0, 0, 0, 0, 0, 1297, 1346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 1302, 1303, 0, 0, 0, 0, 0, 967, 1283,
	2170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1300, 1301, 1302, 1303, 0,
	0, 0, 0, 1315, 1325, 1283, 0, 1305, 1306, 1307,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 1321, 1322,
	0, 0, 0, 1305, 1306, 1307, 1292, 1293, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 896, 0, 0, 0, 0, 0, 1298, 0, 896,
	896, 0, 0, 896, 0, 0, 968, 0, 0, 0,
	0, 1069, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1298, 0, 1068, 1312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 1069, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1304, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1299, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 86, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 1316, 0, 0, 1299, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 86, 0, 86, 1068, 1311, 0, 0,
	0, 0, 0, 0, 1278, 1068, 1068, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 1277, 0, 86, 0, 0, 0, 0, 967, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 968, 724,
	968, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317,
	0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285,
	0, 0, 86, 0, 2237, 0, 0, 0, 2238, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1286, 1287,
	1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 1069, 0, 968, 1283, 1069,
	0, 0, 0, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 968, 0,
	0, 1069, 1315, 1325, 0, 1311, 1305, 1306, 1307, 0,
	0, 0, 1278, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 968, 0, 0, 0, 1292, 1293, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 1313,
	0, 0, 0, 0, 1294, 0, 1298, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 86, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 0, 1283, 0, 968, 0,
	0, 0, 1304, 896, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 1275, 1276, 86, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 1316, 0, 1069, 1321, 1322, 0, 0, 1311,
	0, 0, 0, 1292, 1293, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 1313, 0, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	1323, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	1304, 0, 0, 1829, 0, 1069, 0, 1830, 0, 0,
	1300, 1301, 1302, 1303, 1069, 1069, 0, 1299, 896, 0,
	1283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 1315, 1325, 0, 968, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 1312, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 2758, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 0, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 2514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1799, 205, 206, 207, 208, 971,
	209, 972, 973, 974, 975, 426, 976, 977, 978, 979,
	210, 211, 212, 427, 428, 213, 429, 214, 215, 430,
	980, 216, 217, 218, 219, 220, 221, 222, 981, 982,
	223, 431, 432, 433, 983, 224, 434, 984, 970, 985,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	986, 234, 0, 235, 236, 987, 846, 237, 238, 988,
	989, 991, 990, 992, 993, 994, 239, 240, 241, 242,
	243, 244, 435, 436, 995, 245, 996, 246, 997, 247,
	998, 999, 248, 249, 250, 1000, 251, 1001, 252, 253,
	1002, 437, 254, 255, 257, 260, 256, 261, 262, 438,
	439, 1003, 847, 1004, 0, 0, 0, 0, 263, 264,
	265, 440, 266, 267, 0, 268, 1005, 269, 1006, 1007,
	848, 270, 1008, 271, 441, 1009, 442, 272, 1010, 273,
	274, 275, 276, 277, 278, 443, 444, 445, 850, 1011,
	449, 280, 0, 0, 0, 1012, 279, 281, 288, 1013,
	849, 282, 446, 284, 283, 285, 286, 287, 447, 1014,
	448, 1015, 289, 851, 852, 290, 291, 292, 853, 293,
	294, 0, 0, 295, 296, 297, 1016, 299, 298, 1017,
	300, 450, 854, 301, 302, 855, 1018, 303, 304, 1019,
	1020, 305, 0, 306, 912, 911, 307, 308, 310, 311,
	309, 856, 312, 313, 315, 314, 1021, 1022, 857, 1023,
	451, 452, 316, 317, 1024, 318, 319, 1025, 1026, 320,
	321, 1027, 1028, 322, 453, 858, 323, 859, 454, 324,
	325, 326, 327, 328, 329, 330, 1029, 331, 455, 332,
	456, 333, 1030, 334, 335, 336, 337, 338, 339, 457,
	340, 341, 1031, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 1032, 354, 860, 355,
	356, 357, 358, 458, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 1033, 375, 376, 370, 372, 373, 374,
	371, 377, 378, 1034, 379, 360, 361, 380, 861, 381,
	459, 382, 383, 1035, 393, 384, 385, 386, 362, 387,
	391, 392, 388, 389, 390, 460, 1036, 394, 395, 1037,
	396, 397, 398, 399, 400, 258, 401, 259, 402, 1038,
	461, 462, 463, 403, 1039, 1040, 404, 405, 464, 465,
	1041, 406, 407, 0, 408, 409, 1042, 1043, 410, 411,
	412, 414, 1044, 415, 1045, 413, 416, 417, 418, 466,
	467, 468, 1046, 420, 419, 469, 1047, 1048, 1049, 1050,
	421, 422, 470, 423, 424, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 1937, 0, 0, 0,
	0, 0, 0, 0, 0, 1938, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2782, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2887, 0, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2539, 0, 205, 206, 207, 208, 971, 209,
	972, 973, 974, 975, 426, 976, 977, 978, 979, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 980,
	216, 217, 218, 219, 220, 221, 222, 981, 982, 223,
	431, 432, 433, 983, 224, 434, 984, 970, 985, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 986,
	234, 0, 235, 236, 987, 846, 237, 238, 988, 989,
	991, 990, 992, 993, 994, 239, 240, 241, 242, 243,
	244, 435, 436, 995, 245, 996, 246, 997, 247, 998,
	999, 248, 249, 250, 1000, 251, 1001, 252, 253, 1002,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	1003, 847, 1004, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 1005, 269, 1006, 1007, 848,
	270, 1008, 271, 441, 1009, 442, 272, 1010, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 850, 1011, 449,
	280, 0, 0, 0, 1012, 279, 281, 288, 1013, 849,
	282, 446, 284, 283, 285, 286, 287, 447, 1014, 448,
	1015, 289, 851, 852, 290, 291, 292, 853, 293, 294,
	0, 0, 295, 296, 297, 1016, 299, 298, 1017, 300,
	450, 854, 301, 302, 855, 1018, 303, 304, 1019, 1020,
	305, 0, 306, 912, 911, 307, 308, 310, 311, 309,
	856, 312, 313, 315, 314, 1021, 1022, 857, 1023, 451,
	452, 316, 317, 1024, 318, 319, 1025, 1026, 320, 321,
	1027, 1028, 322, 453, 858, 323, 859, 454, 324, 325,
	326, 327, 328, 329, 330, 1029, 331, 455, 332, 456,
	333, 1030, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 1031, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 1032, 354, 860, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 1033, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 1034, 379, 360, 361, 380, 861, 381, 459,
	382, 383, 1035, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 1036, 394, 395, 1037, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 1038, 461,
	462, 463, 403, 1039, 1040, 404, 405, 464, 465, 1041,
	406, 407, 0, 408, 409, 1042, 1043, 410, 411, 412,
	414, 1044, 415, 1045, 413, 416, 417, 418, 466, 467,
	468, 1046, 420, 419, 469, 1047, 1048, 1049, 1050, 421,
	422, 470, 423, 424, 425, 965, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2531, 0, 205, 206, 207, 208, 971, 209, 972, 973,
	974, 975, 426, 976, 977, 978, 979, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 980, 216, 217,
	218, 219, 220, 221, 222, 981, 982, 223, 431, 432,
	433, 983, 224, 434, 984, 970, 985, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 986, 234, 0,
	235, 236, 987, 846, 237, 238, 988, 989, 991, 990,
	992, 993, 994, 239, 240, 241, 242, 243, 244, 435,
	436, 995, 245, 996, 246, 997, 247, 998, 999, 248,
	249, 250, 1000, 251, 1001, 252, 253, 1002, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 1003, 847,
	1004, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 1005, 269, 1006, 1007, 848, 270, 1008,
	271, 441, 1009, 442, 272, 1010, 273, 274, 275, 276,
	277, 278, 443, 444, 445, 850, 1011, 449, 280, 0,
	0, 0, 1012, 279, 281, 288, 1013, 849, 282, 446,
	284, 283, 285, 286, 287, 447, 1014, 448, 1015, 289,
	851, 852, 290, 291, 292, 853, 293, 294, 0, 0,
	295, 296, 297, 1016, 299, 298, 1017, 300, 450, 854,
	301, 302, 855, 1018, 303, 304, 1019, 1020, 305, 0,
	306, 912, 911, 307, 308, 310, 311, 309, 856, 312,
	313, 315, 314, 1021, 1022, 857, 1023, 451, 452, 316,
	317, 1024, 318, 319, 1025, 1026, 320, 321, 1027, 1028,
	322, 453, 858, 323, 859, 454, 324, 325, 326, 327,
	328, 329, 330, 1029, 331, 455, 332, 456, 333, 1030,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 1031,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 1032, 354, 860, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	1033, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	1034, 379, 360, 361, 380, 861, 381, 459, 382, 383,
	1035, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 1036, 394, 395, 1037, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 1038, 461, 462, 463,
	403, 1039, 1040, 404, 405, 464, 465, 1041, 406, 407,
	0, 408, 409, 1042, 1043, 410, 411, 412, 414, 1044,
	415, 1045, 413, 416, 417, 418, 466, 467, 468, 1046,
	420, 419, 469, 1047, 1048, 1049, 1050, 421, 422, 470,
	423, 424, 425, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2416, 0,
	205, 206, 207, 208, 971, 209, 972, 973, 974, 975,
	426, 976, 977, 978, 979, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 980, 216, 217, 218, 219,
	220, 221, 222, 981, 982, 223, 431, 432, 433, 983,
	224, 434, 984, 970, 985, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 986, 234, 0, 235, 236,
	987, 846, 237, 238, 988, 989, 991, 990, 992, 993,
	994, 239, 240, 241, 242, 243, 244, 435, 436, 995,
	245, 996, 246, 997, 247, 998, 999, 248, 249, 250,
	1000, 251, 1001, 252, 253, 1002, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 1003, 847, 1004, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 1005, 269, 1006, 1007, 848, 270, 1008, 271, 441,
	1009, 442, 272, 1010, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 850, 1011, 449, 280, 0, 0, 0,
	1012, 279, 281, 288, 1013, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 1014, 448, 1015, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 1016, 299, 298, 1017, 300, 450, 854, 301, 302,
	855, 1018, 303, 304, 1019, 1020, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 1021, 1022, 857, 1023, 451, 452, 316, 317, 1024,
	318, 319, 1025, 1026, 320, 321, 1027, 1028, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 1029, 331, 455, 332, 456, 333, 1030, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 1031, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 1032, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 1033, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 1034, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 1035, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 1036, 394, 395, 1037, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 1038, 461, 462, 463, 403, 1039,
	1040, 404, 405, 464, 465, 1041, 406, 407, 0, 408,
	409, 1042, 1043, 410, 411, 412, 414, 1044, 415, 1045,
	413, 416, 417, 418, 466, 467, 468, 1046, 420, 419,
	469, 1047, 1048, 1049, 1050, 421, 422, 470, 423, 424,
	425, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1841, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 1073,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1607, 0, 0, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 962,
	0, 965, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	207, 208, 971, 209, 972, 973, 974, 975, 426, 976,
	977, 978, 979, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 980, 216, 217, 218, 219, 220, 221,
	222, 981, 982, 223, 431, 432, 433, 983, 224, 434,
	984, 970, 985, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 986, 234, 0, 235, 236, 987, 846,
	237, 238, 988, 989, 991, 990, 992, 993, 994, 239,
	240, 241, 242, 243, 244, 435, 436, 995, 245, 996,
	246, 997, 247, 998, 999, 248, 249, 250, 1000, 251,
	1001, 252, 253, 1002, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 1003, 847, 1004, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 1005,
	269, 1006, 1007, 848, 270, 1008, 271, 441, 1009, 442,
	272, 1010, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 1011, 449, 280, 0, 0, 0, 1012, 279,
	281, 288, 1013, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 1014, 448, 1015, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 1016,
	299, 298, 1017, 300, 450, 854, 301, 302, 855, 1018,
	303, 304, 1019, 1020, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 1021,
	1022, 857, 1023, 451, 452, 316, 317, 1024, 318, 319,
	1025, 1026, 320, 321, 1027, 1028, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 1029,
	331, 455, 332, 456, 333, 1030, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 1031, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 1032,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 1033, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 1034, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 1035, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 1036,
	394, 395, 1037, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 1038, 461, 462, 463, 403, 1039, 1040, 404,
	405, 464, 465, 1041, 406, 407, 0, 408, 409, 1042,
	1043, 410, 411, 412, 414, 1044, 415, 1045, 413, 416,
	417, 418, 466, 467, 468, 1046, 420, 419, 469, 1047,
	1048, 1049, 1050, 421, 422, 470, 423, 424, 425, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	971, 209, 972, 973, 974, 975, 426, 976, 977, 978,
	979, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 980, 216, 217, 218, 219, 220, 221, 222, 981,
	982, 223, 431, 432, 433, 983, 224, 434, 984, 970,
	985, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 986, 234, 0, 235, 236, 987, 846, 237, 238,
	988, 989, 991, 990, 992, 993, 994, 239, 240, 241,
	242, 243, 244, 435, 436, 995, 245, 996, 246, 997,
	247, 998, 999, 248, 249, 250, 1000, 251, 1001, 252,
	253, 1002, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 1003, 847, 1004, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 1005, 269, 1006,
	1007, 848, 270, 1008, 271, 441, 1009, 442, 272, 1010,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	1011, 449, 280, 0, 0, 0, 1012, 279, 281, 288,
	1013, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	1014, 448, 1015, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 1016, 299, 298,
	1017, 300, 450, 854, 301, 302, 855, 1018, 303, 304,
	1019, 1020, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 1021, 1022, 857,
	1023, 451, 452, 316, 317, 1024, 318, 319, 1025, 1026,
	320, 321, 1027, 1028, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 1029, 331, 455,
	332, 456, 333, 1030, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 1031, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 1032, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 1033, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 1034, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 1035, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 1036, 394, 395,
	1037, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	1038, 461, 462, 463, 403, 1039, 1040, 404, 405, 464,
	465, 1041, 406, 407, 0, 408, 409, 1042, 1043, 410,
	411, 412, 414, 1044, 415, 1045, 413, 416, 417, 418,
	466, 467, 468, 1046, 420, 419, 469, 1047, 1048, 1049,
	1050, 421, 422, 470, 423, 424, 425, 1819, 0, 790,
	748, 749, 750, 746, 747, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	1816, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 1817, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	466, 817, 863, 1815, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 736, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 1818, 0, 0, 0, 0, 0, 0, 761,
	1814, 0, 0, 0, 725, 759, 790, 748, 749, 750,
	746, 747, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 174, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 176, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 1169, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 168, 421, 422,
	470, 423, 424, 425, 736, 169, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 790,
	748, 749, 750, 746, 747, 760, 1351, 1349, 0, 0,
	0, 0, 759, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 0, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 174, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	176, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	1169, 817, 863, 0, 420, 419, 469, 0, 0, 0,
	168, 421, 422, 470, 423, 424, 425, 736, 169, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 790, 748, 749, 750, 746, 747, 760, 1351,
	2190, 0, 0, 0, 0, 759, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 174, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 176, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 1169, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 168, 421, 422, 470, 423, 424, 425,
	736, 169, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 790, 748, 749, 750, 746,
	747, 760, 1351, 1349, 0, 0, 0, 0, 759, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 1903, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 1908, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 1904, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 1905, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 790, 748,
	749, 750, 746, 747, 760, 761, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 2701, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 1406, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 0, 759, 790, 748, 749, 750, 746,
	747, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 1734, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 1733,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	728, 759, 790, 748, 749, 750, 746, 747, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 730, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 466, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	736, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 790, 748, 749, 750, 746,
	747, 760, 761, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 730, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 790, 748,
	749, 750, 746, 747, 760, 761, 0, 0, 0, 0,
	0, 759, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 2518, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 790, 748, 749, 750, 746, 747, 760, 761, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 837, 765,
	0, 0, 0, 210, 211, 212, 427, 805, 784, 816,
	774, 815, 814, 0, 216, 217, 776, 775, 220, 221,
	222, 766, 836, 223, 864, 865, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 819, 244, 812, 811, 738, 245, 0,
	246, 0, 247, 0, 0, 248, 810, 250, 0, 251,
	0, 252, 253, 0, 743, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 756, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 809, 807, 808, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 786, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 798, 789, 800, 802, 803,
	804, 799, 0, 791, 0, 289, 851, 852, 290, 291,
	292, 853, 824, 825, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 740, 739, 307,
	308, 310, 778, 309, 856, 312, 313, 315, 314, 735,
	0, 857, 757, 841, 813, 316, 317, 0, 787, 788,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 806, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 744, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 779,
	780, 782, 783, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 801, 781, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 845, 388, 389, 390, 872, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 777, 0, 820, 821, 822, 823, 0, 0, 404,
	405, 873, 874, 755, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 785, 416,
	417, 418, 466, 817, 863, 0, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 736,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 732, 733, 1406, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 0, 0, 0, 759, 790, 748,
	749, 750, 746, 747, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 1908,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 790, 748, 749, 750, 746, 747, 760, 761, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 837, 765,
	0, 0, 0, 210, 211, 212, 427, 805, 784, 816,
	774, 815, 814, 0, 216, 217, 776, 775, 220, 221,
	222, 766, 836, 223, 864, 865, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 819, 244, 812, 811, 738, 245, 0,
	246, 0, 247, 0, 0, 248, 810, 250, 0, 251,
	0, 252, 253, 0, 743, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 756, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 809, 807, 808, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 786, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 798, 789, 800, 802, 803,
	804, 799, 0, 791, 0, 289, 851, 852, 290, 291,
	292, 853, 824, 825, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 740, 739, 307,
	308, 310, 778, 309, 856, 312, 313, 315, 314, 735,
	0, 857, 757, 841, 813, 316, 317, 0, 787, 788,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 806, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 744, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 779,
	780, 782, 783, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 801, 781, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 845, 388, 389, 390, 872, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 777, 0, 820, 821, 822, 823, 0, 0, 404,
	405, 873, 874, 755, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 785, 416,
	417, 418, 466, 817, 863, 0, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 736,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 732, 733, 0, 0, 0, 0, 0, 0,
	0, 761, 1349, 0, 0, 0, 1899, 759, 790, 748,
	749, 750, 746, 747, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 206, 207, 208, 0,
	209, 0, 0, 0, 0, 837, 765, 0, 0, 0,
	210, 211, 212, 427, 805, 784, 816, 774, 815, 814,
	0, 216, 217, 776, 775, 220, 221, 222, 766, 836,
	223, 864, 865, 433, 0, 224, 843, 0, 826, 0,
	225, 226, 227, 228, 229, 0, 231, 232, 233, 230,
	0, 234, 0, 235, 236, 0, 846, 237, 238, 829,
	827, 828, 833, 831, 830, 832, 239, 240, 241, 242,
	819, 244, 812, 811, 738, 245, 0, 246, 0, 247,
	0, 0, 248, 810, 250, 0, 251, 0, 252, 253,
	0, 743, 254, 255, 257, 260, 256, 261, 262, 866,
	867, 756, 847, 0, 0, 0, 0, 0, 263, 264,
	265, 809, 807, 808, 0, 268, 0, 269, 0, 0,
	848, 270, 0, 271, 868, 0, 442, 272, 0, 273,
	274, 275, 276, 277, 278, 838, 839, 842, 850, 0,
	840, 786, 0, 0, 0, 0, 279, 281, 288, 0,
	849, 282, 798, 789, 800, 802, 803, 804, 799, 0,
	791, 0, 289, 851, 852, 290, 291, 292, 853, 824,
	825, 0, 0, 295, 296, 297, 0, 299, 298, 0,
	300, 869, 854, 301, 302, 855, 0, 303, 304, 0,
	0, 305, 0, 306, 740, 739, 307, 308, 310, 778,
	309, 856, 312, 313, 315, 314, 735, 0, 857, 757,
	841, 813, 316, 317, 0, 787, 788, 0, 0, 320,
	321, 0, 0, 322, 453, 858, 323, 859, 870, 324,
	325, 326, 327, 328, 329, 330, 0, 331, 871, 332,
	456, 333, 0, 334, 335, 336, 337, 338, 339, 806,
	340, 341, 0, 342, 343, 344, 345, 346, 0, 348,
	349, 347, 350, 351, 352, 353, 0, 354, 860, 355,
	356, 357, 358, 744, 359, 0, 363, 364, 365, 366,
	367, 368, 369, 0, 375, 376, 779, 780, 782, 783,
	371, 377, 378, 834, 379, 360, 361, 380, 861, 381,
	801, 781, 383, 0, 393, 384, 385, 386, 362, 387,
	391, 845, 388, 389, 390, 872, 0, 394, 395, 0,
	396, 397, 398, 399, 400, 258, 401, 259, 777, 0,
	820, 821, 822, 823, 0, 0, 404, 405, 873, 874,
	755, 406, 407, 0, 408, 409, 0, 0, 410, 411,
	412, 414, 835, 415, 0, 785, 416, 417, 418, 466,
	817, 863, 0, 420, 419, 469, 0, 0, 0, 0,
	421, 422, 470, 423, 424, 425, 736, 0, 0, 0,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 732,
	733, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 1888, 759, 790, 748, 749, 750, 746,
	747, 760, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 837, 765, 0, 0, 0, 210, 211, 212,
	427, 805, 784, 816, 774, 815, 814, 0, 216, 217,
	776, 775, 220, 221, 222, 766, 836, 223, 864, 865,
	433, 0, 224, 843, 0, 826, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 846, 237, 238, 829, 827, 828, 833,
	831, 830, 832, 239, 240, 241, 242, 819, 244, 812,
	811, 738, 245, 0, 246, 0, 247, 0, 0, 248,
	810, 250, 0, 251, 0, 252, 253, 0, 743, 254,
	255, 257, 260, 256, 261, 262, 866, 867, 756, 847,
	0, 0, 0, 0, 0, 263, 264, 265, 809, 807,
	808, 0, 268, 0, 269, 0, 0, 848, 270, 0,
	271, 868, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 838, 839, 842, 850, 0, 840, 786, 0,
	0, 0, 0, 279, 281, 288, 0, 849, 282, 798,
	789, 800, 802, 803, 804, 799, 0, 791, 0, 289,
	851, 852, 290, 291, 292, 853, 824, 825, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 869, 854,
	301, 302, 855, 0, 303, 304, 0, 0, 305, 0,
	306, 740, 739, 307, 308, 310, 778, 309, 856, 312,
	313, 315, 314, 735, 0, 857, 757, 841, 813, 316,
	317, 0, 787, 788, 0, 0, 320, 321, 0, 0,
	322, 453, 858, 323, 859, 870, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 871, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 806, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 860, 355, 356, 357, 358,
	744, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 779, 780, 782, 783, 371, 377, 378,
	834, 379, 360, 361, 380, 861, 381, 801, 781, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 845, 388,
	389, 390, 872, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 777, 0, 820, 821, 822,
	823, 0, 0, 404, 405, 873, 874, 755, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 835,
	415, 0, 785, 416, 417, 418, 466, 817, 863, 0,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 736, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 0, 0, 0,
	1886, 759, 790, 748, 749, 750, 746, 747, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	765, 0, 0, 0, 210, 211, 212, 427, 805, 784,
	816, 774, 815, 814, 0, 216, 217, 776, 775, 220,
	221, 222, 766, 836, 223, 864, 865, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 819, 244, 812, 811, 738, 245,
	0, 246, 0, 247, 0, 0, 248, 810, 250, 0,
	251, 0, 252, 253, 0, 743, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 756, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 809, 807, 808, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 786, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 798, 789, 800, 802,
	803, 804, 799, 0, 791, 0, 289, 851, 852, 290,
	291, 292, 853, 824, 825, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 740, 739,
	307, 308, 310, 778, 309, 856, 312, 313, 315, 314,
	735, 0, 857, 757, 841, 813, 316, 317, 0, 787,
	788, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 806, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 744, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	779, 780, 782, 783, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 801, 781, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 845, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 777, 0, 820, 821, 822, 823, 0, 0,
	404, 405, 873, 874, 755, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 785,
	416, 417, 418, 466, 817, 863, 0, 420, 419, 469,
	0, 0, 0, 0, 421, 422, 470, 423, 424, 425,
	736, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 1884, 759, 790,
	748, 749, 750, 746, 747, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 427, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 0, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 850,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 851, 852, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 857,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 861,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	466, 817, 863, 0, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 736, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	732, 733, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 0, 0, 1882, 759, 1874, 748, 749, 750,
	746, 747, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 1877,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 1878,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 1879, 1876, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	1880, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 1875, 425, 736, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 1871, 759, 1874, 748, 749, 750, 746, 747, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 427, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 1877, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 1878, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 1879, 1876, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 1880, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 1875,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 790, 748, 749, 750,
	746, 747, 760, 761, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 738, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 740, 739, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 735, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 736, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 732, 733, 0,
	0, 0, 0, 0, 1357, 0, 761, 0, 0, 0,
	0, 0, 759, 790, 748, 749, 750, 746, 747, 760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 1721, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 427, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 244, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 307, 308, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 1100, 759,
	790, 748, 749, 750, 746, 747, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 765, 0,
	0, 0, 210, 211, 212, 427, 805, 784, 816, 774,
	815, 814, 0, 216, 217, 776, 775, 220, 221, 222,
	766, 836, 223, 864, 865, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 819, 244, 812, 811, 738, 245, 0, 246,
	0, 247, 0, 0, 248, 810, 250, 0, 251, 0,
	252, 253, 0, 743, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 756, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 809, 807, 808, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 1099, 839, 842,
	850, 0, 840, 786, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 798, 789, 800, 802, 803, 804,
	799, 0, 791, 0, 289, 851, 852, 290, 291, 292,
	853, 824, 825, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 740, 739, 307, 308,
	310, 778, 309, 856, 312, 313, 315, 314, 735, 0,
	857, 757, 841, 813, 316, 317, 0, 787, 788, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 806, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 744, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 779, 780,
	782, 783, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 801, 781, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 845, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	777, 0, 820, 821, 822, 823, 0, 0, 404, 405,
	873, 874, 755, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 785, 416, 417,
	418, 466, 817, 863, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 736, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 732, 733, 0, 0, 0, 0, 0, 0, 0,
	761, 0, 0, 0, 0, 1094, 759, 790, 748, 749,
	750, 746, 747, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 837, 765, 0, 0, 0, 210,
	211, 212, 427, 805, 784, 816, 774, 815, 814, 0,
	216, 217, 776, 775, 220, 221, 222, 766, 836, 223,
	864, 865, 433, 0, 224, 843, 0, 826, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 829, 827,
	828, 833, 831, 830, 832, 239, 240, 241, 242, 819,
	244, 812, 811, 738, 245, 0, 246, 0, 247, 0,
	0, 248, 810, 250, 0, 251, 0, 252, 253, 0,
	743, 254, 255, 257, 260, 256, 261, 262, 866, 867,
	756, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	809, 807, 808, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 868, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 1093, 839, 842, 850, 0, 840,
	786, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 798, 789, 800, 802, 803, 804, 799, 0, 791,
	0, 289, 851, 852, 290, 291, 292, 853, 824, 825,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	869, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 740, 739, 307, 308, 310, 778, 309,
	856, 312, 313, 315, 314, 735, 0, 857, 757, 841,
	813, 316, 317, 0, 787, 788, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 870, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 871, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 806, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 744, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 779, 780, 782, 783, 371,
	377, 378, 834, 379, 360, 361, 380, 861, 381, 801,
	781, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	845, 388, 389, 390, 872, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 777, 0, 820,
	821, 822, 823, 0, 0, 404, 405, 873, 874, 755,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 835, 415, 0, 785, 416, 417, 418, 466, 817,
	863, 0, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 736, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 732, 733,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	0, 0, 1089, 759, 790, 748, 749, 750, 746, 747,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 837, 765, 0, 0, 0, 210, 211, 212, 427,
	805, 784, 816, 774, 815, 814, 0, 216, 217, 776,
	775, 220, 221, 222, 766, 836, 223, 864, 865, 433,
	0, 224, 843, 0, 826, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 846, 237, 238, 829, 827, 828, 833, 831,
	830, 832, 239, 240, 241, 242, 819, 244, 812, 811,
	738, 245, 0, 246, 0, 247, 0, 0, 248, 810,
	250, 0, 251, 0, 252, 253, 0, 743, 254, 255,
	257, 260, 256, 261, 262, 866, 867, 756, 847, 0,
	0, 0, 0, 0, 263, 264, 265, 809, 807, 808,
	0, 268, 0, 269, 0, 0, 848, 270, 0, 271,
	868, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 838, 839, 842, 850, 0, 840, 786, 0, 0,
	0, 0, 279, 281, 288, 0, 849, 282, 798, 789,
	800, 802, 803, 804, 799, 0, 791, 0, 289, 851,
	852, 290, 291, 292, 853, 824, 825, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 869, 854, 301,
	302, 855, 0, 303, 304, 0, 0, 305, 0, 306,
	740, 739, 307, 308, 310, 778, 309, 856, 312, 313,
	315, 314, 735, 0, 857, 757, 841, 813, 316, 317,
	0, 787, 788, 0, 0, 320, 321, 0, 0, 322,
	453, 858, 323, 859, 870, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 871, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 806, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 860, 355, 356, 357, 358, 744,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 779, 780, 782, 783, 371, 377, 378, 834,
	379, 360, 361, 380, 861, 381, 801, 781, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 845, 388, 389,
	390, 872, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 777, 0, 820, 821, 822, 823,
	0, 0, 404, 405, 873, 874, 755, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 835, 415,
	0, 785, 416, 417, 418, 466, 817, 863, 0, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 736, 0, 0, 0, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 732, 733, 790, 748, 749,
	750, 746, 747, 760, 761, 0, 0, 0, 0, 0,
	759, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 837, 765, 0, 0, 0, 210,
	211, 212, 427, 805, 784, 816, 774, 815, 814, 0,
	216, 217, 776, 775, 220, 221, 222, 766, 836, 223,
	864, 865, 433, 0, 224, 843, 0, 826, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 846, 237, 238, 829, 827,
	828, 833, 831, 830, 832, 239, 240, 241, 242, 819,
	244, 812, 811, 738, 245, 0, 246, 0, 247, 0,
	0, 248, 810, 250, 0, 251, 0, 252, 253, 0,
	743, 254, 255, 257, 260, 256, 261, 262, 866, 867,
	756, 847, 0, 0, 0, 0, 0, 263, 264, 265,
	809, 807, 808, 0, 268, 0, 269, 0, 0, 848,
	270, 0, 271, 868, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 838, 839, 842, 850, 0, 840,
	786, 0, 0, 0, 0, 279, 281, 288, 0, 849,
	282, 798, 789, 800, 802, 803, 804, 799, 0, 791,
	0, 289, 851, 852, 290, 291, 292, 853, 824, 825,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	869, 854, 301, 302, 855, 0, 303, 304, 0, 0,
	305, 0, 306, 740, 739, 307, 308, 310, 778, 309,
	856, 312, 313, 315, 314, 735, 0, 857, 757, 841,
	813, 316, 317, 0, 787, 788, 0, 0, 320, 321,
	0, 0, 322, 453, 858, 323, 859, 870, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 871, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 806, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 860, 355, 356,
	357, 358, 744, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 779, 780, 782, 783, 371,
	377, 378, 834, 379, 360, 361, 380, 861, 381, 801,
	781, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	845, 388, 389, 390, 872, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 777, 0, 820,
	821, 822, 823, 0, 0, 404, 405, 873, 874, 755,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 835, 415, 0, 785, 416, 417, 418, 466, 817,
	863, 0, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 736, 0, 0, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 732, 733,
	790, 748, 749, 750, 746, 747, 760, 761, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 765, 0,
	0, 0, 210, 211, 212, 427, 805, 784, 816, 774,
	815, 814, 0, 216, 217, 776, 775, 220, 221, 222,
	766, 836, 223, 864, 865, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	3079, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 819, 244, 812, 811, 738, 245, 0, 246,
	0, 247, 0, 0, 248, 810, 250, 0, 251, 0,
	252, 253, 0, 743, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 756, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 809, 807, 808, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 786, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 798, 789, 800, 802, 803, 804,
	799, 0, 791, 0, 289, 851, 852, 290, 291, 292,
	853, 824, 825, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 740, 739, 307, 308,
	310, 778, 309, 856, 312, 313, 315, 314, 735, 0,
	857, 757, 841, 813, 316, 317, 0, 787, 788, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 806, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 744, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 779, 780,
	782, 783, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 801, 781, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 845, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	777, 0, 820, 821, 822, 823, 0, 0, 404, 405,
	873, 874, 755, 406, 407, 0, 3078, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 785, 416, 417,
	418, 466, 817, 863, 0, 420, 419, 469, 0, 0,
	0, 0, 421, 422, 470, 423, 424, 425, 736, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 732, 733, 790, 748, 749, 750, 746, 747, 760,
	761, 0, 0, 0, 0, 0, 759, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 765, 0, 0, 0, 210, 211, 212, 3077, 805,
	784, 816, 774, 815, 814, 0, 216, 217, 776, 775,
	220, 221, 222, 766, 836, 223, 864, 865, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 3079, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 819, 244, 812, 811, 738,
	245, 0, 246, 0, 247, 0, 0, 248, 810, 250,
	0, 251, 0, 252, 253, 0, 743, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 756, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 809, 807, 808, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 786, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 798, 789, 800,
	802, 803, 804, 799, 0, 791, 0, 289, 851, 852,
	290, 291, 292, 853, 824, 825, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 740,
	739, 307, 308, 310, 778, 309, 856, 312, 313, 315,
	314, 735, 0, 857, 757, 841, 813, 316, 317, 0,
	787, 788, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 806, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 744, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 779, 780, 782, 783, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 801, 781, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 845, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 777, 0, 820, 821, 822, 823, 0,
	0, 404, 405, 873, 874, 755, 406, 407, 0, 3078,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	785, 416, 417, 418, 466, 817, 863, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 736, 0, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 732, 733, 790, 748, 749, 750,
	746, 747, 760, 761, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 205, 206, 207, 208, 0, 209, 0,
	0, 0, 0, 837, 765, 0, 0, 0, 210, 211,
	212, 427, 805, 784, 816, 774, 815, 814, 0, 216,
	217, 776, 775, 220, 221, 222, 766, 836, 223, 864,
	865, 433, 0, 224, 843, 0, 826, 0, 225, 226,
	227, 228, 229, 0, 231, 232, 233, 230, 0, 234,
	0, 235, 236, 0, 846, 237, 238, 829, 827, 828,
	833, 831, 830, 832, 239, 240, 241, 242, 819, 244,
	812, 811, 0, 245, 0, 246, 0, 247, 0, 0,
	248, 810, 250, 0, 251, 0, 252, 253, 0, 743,
	254, 255, 257, 260, 256, 261, 262, 866, 867, 756,
	847, 0, 0, 0, 0, 0, 263, 264, 265, 809,
	807, 808, 0, 268, 0, 269, 0, 0, 848, 270,
	0, 271, 868, 0, 442, 272, 0, 273, 274, 275,
	276, 277, 278, 838, 839, 842, 850, 0, 840, 786,
	0, 0, 0, 0, 279, 281, 288, 0, 849, 282,
	798, 789, 800, 802, 803, 804, 799, 0, 791, 0,
	289, 851, 852, 290, 291, 292, 853, 824, 825, 0,
	0, 295, 296, 297, 0, 299, 298, 0, 300, 869,
	854, 301, 302, 855, 0, 303, 304, 0, 0, 305,
	0, 306, 912, 911, 307, 308, 310, 778, 309, 856,
	312, 313, 315, 314, 0, 0, 857, 757, 841, 813,
	316, 317, 0, 787, 788, 0, 0, 320, 321, 0,
	0, 322, 453, 858, 323, 859, 870, 324, 325, 326,
	327, 328, 329, 330, 0, 331, 871, 332, 456, 333,
	0, 334, 335, 336, 337, 338, 339, 806, 340, 341,
	0, 342, 343, 344, 345, 346, 0, 348, 349, 347,
	350, 351, 352, 353, 0, 354, 860, 355, 356, 357,
	358, 744, 359, 0, 363, 364, 365, 366, 367, 368,
	369, 0, 375, 376, 779, 780, 782, 783, 371, 377,
	378, 834, 379, 360, 361, 380, 861, 381, 801, 781,
	383, 0, 393, 384, 385, 386, 362, 387, 391, 845,
	388, 389, 390, 872, 0, 394, 395, 0, 396, 397,
	398, 399, 400, 258, 401, 259, 777, 0, 820, 821,
	822, 823, 0, 0, 404, 405, 873, 874, 755, 406,
	407, 0, 408, 409, 0, 0, 410, 411, 412, 414,
	835, 415, 0, 785, 416, 417, 418, 466, 817, 863,
	0, 420, 419, 469, 0, 0, 0, 0, 421, 422,
	470, 423, 424, 425, 0, 0, 0, 0, 0, 0,
	0, 0, 1896, 0, 0, 0, 0, 1894, 1895, 790,
	748, 749, 750, 746, 747, 760, 761, 0, 0, 0,
	0, 0, 759, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 837, 765, 0, 0,
	0, 210, 211, 212, 0, 805, 784, 816, 774, 815,
	814, 0, 216, 217, 776, 775, 220, 221, 222, 766,
	836, 223, 864, 865, 433, 0, 224, 843, 0, 826,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 3079,
	829, 827, 828, 833, 831, 830, 832, 239, 240, 241,
	242, 819, 244, 812, 811, 738, 245, 0, 246, 0,
	247, 0, 0, 248, 810, 250, 0, 251, 0, 252,
	253, 0, 743, 254, 255, 257, 260, 256, 261, 262,
	866, 867, 756, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 809, 807, 808, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 868, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 838, 839, 842, 0,
	0, 840, 786, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 798, 789, 800, 802, 803, 804, 799,
	0, 791, 0, 289, 0, 0, 290, 291, 292, 853,
	824, 825, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 869, 854, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 740, 739, 307, 308, 310,
	778, 309, 856, 312, 313, 315, 314, 735, 0, 0,
	757, 841, 813, 316, 317, 0, 787, 788, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 870,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 871,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	806, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 744, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 779, 780, 782,
	783, 371, 377, 378, 834, 379, 360, 361, 380, 0,
	381, 801, 781, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 845, 388, 389, 390, 872, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 777,
	0, 820, 821, 822, 823, 0, 0, 404, 405, 873,
	874, 755, 406, 407, 0, 3078, 409, 0, 0, 410,
	411, 412, 414, 835, 415, 0, 785, 416, 417, 418,
	466, 817, 863, 0, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 725, 0, 910, 0, 0, 0, 0, 0,
	732, 733, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 205, 206, 207, 208, 759, 209, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 836, 223, 431, 432, 433,
	0, 224, 843, 0, 826, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 846, 237, 238, 829, 827, 828, 833, 831,
	830, 832, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 866, 867, 0, 847, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 848, 270, 0, 271,
	868, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 838, 839, 842, 850, 0, 840, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 849, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 851,
	852, 290, 291, 292, 853, 293, 294, 0, 0, 295,
	296, 297, 897, 299, 298, 0, 300, 869, 854, 301,
	302, 855, 0, 303, 304, 0, 0, 305, 0, 306,
	912, 911, 307, 308, 310, 311, 309, 856, 312, 313,
	315, 314, 0, 0, 857, 0, 841, 452, 316, 317,
	0, 318, 319, 0, 902, 320, 321, 0, 0, 322,
	453, 858, 323, 859, 870, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 871, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 860, 355, 356, 357, 358, 458,
	904, 0, 363, 364, 365, 366, 367, 368, 369, 174,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 834,
	379, 360, 361, 380, 861, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 872, 0, 394, 395, 176, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 873, 874, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 835, 415,
	0, 413, 416, 417, 418, 1169, 467, 468, 0, 420,
	419, 469, 0, 910, 0, 168, 421, 422, 470, 423,
	424, 425, 0, 169, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 0, 894, 0, 1431, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 836, 223, 431, 432, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 897, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 841, 452, 316, 317, 0,
	318, 319, 0, 902, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 904,
	0, 363, 364, 365, 366, 367, 368, 369, 174, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	872, 0, 394, 395, 176, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 873, 874, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	413, 416, 417, 418, 1169, 467, 468, 0, 420, 419,
	469, 2294, 0, 910, 168, 421, 422, 470, 423, 424,
	425, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 894, 0, 1431, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 836, 223, 431, 432, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 897, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 841, 452, 316, 317, 0,
	318, 319, 0, 902, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 904,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 873, 874, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 893, 0, 910, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	837, 894, 0, 899, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 836, 223, 431, 432, 433, 0,
	224, 843, 0, 826, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 829, 827, 828, 833, 831, 830,
	832, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 866, 867, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 868,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	838, 839, 842, 850, 0, 840, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 897, 299, 298, 0, 300, 869, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 841, 452, 316, 317, 0,
	318, 319, 0, 902, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 870, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 871, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 904,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 834, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	872, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 873, 874, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 835, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 910, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	0, 894, 0, 899, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 836, 223, 431, 432, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 0, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 851, 852, 290,
	291, 292, 853, 293, 294, 0, 0, 295, 296, 297,
	897, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 912, 911,
	307, 308, 310, 311, 309, 856, 312, 313, 315, 314,
	0, 0, 857, 0, 841, 452, 316, 317, 0, 318,
	319, 0, 902, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 458, 904, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 873, 874, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 0, 420, 419, 469,
	0, 910, 0, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 837, 0,
	894, 0, 899, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 836, 223, 431, 432, 433, 0, 224, 843,
	0, 826, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 829, 827, 828, 833, 831, 830, 832, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 866, 867, 0, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 868, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 838, 839,
	842, 850, 0, 840, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 869, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 0,
	0, 857, 0, 841, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 870, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 871, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 834, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 872, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 873, 874, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 835, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 0, 420, 419, 469, 0,
	910, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 837, 0, 0,
	0, 2642, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 836, 223, 431, 432, 433, 0, 224, 843, 0,
	826, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 829, 827, 828, 833, 831, 830, 832, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 866, 867, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 868, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 838, 839, 842,
	850, 0, 840, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 869, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 841, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	870, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	871, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 904, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 834, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 872, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	873, 874, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 835, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 1166, 0,
	1066, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	1338, 0, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	970, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 846, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 847, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 848, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	850, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 849, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 851, 852, 290, 291, 292,
	853, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 854, 301, 302, 855, 0, 303,
	304, 0, 0, 305, 0, 306, 912, 911, 307, 308,
	310, 311, 309, 856, 312, 313, 315, 314, 0, 0,
	857, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 858, 323, 859,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	860, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 174, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	861, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 176, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 1169, 467, 468, 0, 420, 419, 469, 0, 0,
	0, 168, 421, 422, 470, 423, 424, 425, 0, 169,
	0, 0, 0, 0, 1066, 1065, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 205, 206, 207, 208, 0, 209, 0, 0, 0,
	0, 426, 0, 0, 0, 0, 210, 211, 212, 427,
	428, 213, 429, 214, 215, 430, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 223, 431, 432, 433,
	0, 224, 434, 0, 970, 0, 225, 226, 227, 228,
	229, 0, 231, 232, 233, 230, 0, 234, 0, 235,
	236, 0, 846, 237, 238, 0, 0, 0, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 435, 436,
	0, 245, 0, 246, 0, 247, 0, 0, 248, 249,
	250, 0, 251, 0, 252, 253, 0, 437, 254, 255,
	257, 260, 256, 261, 262, 438, 439, 0, 847, 0,
	0, 0, 0, 0, 263, 264, 265, 440, 266, 267,
	0, 268, 0, 269, 0, 0, 848, 270, 0, 271,
	441, 0, 442, 272, 0, 273, 274, 275, 276, 277,
	278, 443, 444, 445, 850, 0, 449, 280, 0, 0,
	0, 0, 279, 281, 288, 0, 849, 282, 446, 284,
	283, 285, 286, 287, 447, 0, 448, 0, 289, 851,
	852, 290, 291, 292, 853, 293, 294, 0, 0, 295,
	296, 297, 0, 299, 298, 0, 300, 450, 854, 301,
	302, 855, 0, 303, 304, 0, 0, 305, 0, 306,
	912, 911, 307, 308, 310, 311, 309, 856, 312, 313,
	315, 314, 0, 0, 857, 0, 451, 452, 316, 317,
	0, 318, 319, 0, 0, 320, 321, 0, 0, 322,
	453, 858, 323, 859, 454, 324, 325, 326, 327, 328,
	329, 330, 0, 331, 455, 332, 456, 333, 0, 334,
	335, 336, 337, 338, 339, 457, 340, 341, 0, 342,
	343, 344, 345, 346, 0, 348, 349, 347, 350, 351,
	352, 353, 0, 354, 860, 355, 356, 357, 358, 458,
	359, 0, 363, 364, 365, 366, 367, 368, 369, 0,
	375, 376, 370, 372, 373, 374, 371, 377, 378, 0,
	379, 360, 361, 380, 861, 381, 459, 382, 383, 0,
	393, 384, 385, 386, 362, 387, 391, 392, 388, 389,
	390, 460, 0, 394, 395, 0, 396, 397, 398, 399,
	400, 258, 401, 259, 402, 0, 461, 462, 463, 403,
	0, 0, 404, 405, 464, 465, 0, 406, 407, 0,
	408, 409, 0, 0, 410, 411, 412, 414, 0, 415,
	0, 413, 416, 417, 418, 466, 467, 468, 0, 420,
	419, 469, 0, 0, 0, 0, 421, 422, 470, 423,
	424, 425, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 2477, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 910, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 837,
	0, 0, 0, 1172, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 836, 223, 431, 432, 433, 0, 224,
	843, 0, 826, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	846, 237, 238, 829, 827, 828, 833, 831, 830, 832,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 866, 867, 0, 847, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 848, 270, 0, 271, 868, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 838,
	839, 842, 850, 0, 840, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 849, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 851, 852, 290,
	291, 292, 853, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 869, 854, 301, 302, 855,
	0, 303, 304, 0, 0, 305, 0, 306, 912, 911,
	307, 308, 310, 311, 309, 856, 312, 313, 315, 314,
	0, 0, 857, 0, 841, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 321, 0, 0, 322, 453, 858,
	323, 859, 870, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 871, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 860, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 0, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 834, 379, 360,
	361, 380, 861, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 872,
	0, 394, 395, 0, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 873, 874, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 835, 415, 0, 413,
	416, 417, 418, 466, 467, 468, 0, 420, 419, 469,
	725, 0, 202, 0, 421, 422, 470, 423, 424, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 0, 209, 0, 0, 0, 0, 426,
	0, 0, 0, 0, 210, 211, 212, 427, 428, 213,
	429, 214, 215, 430, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 223, 431, 432, 433, 0, 224,
	434, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	231, 232, 233, 230, 0, 234, 0, 235, 236, 0,
	0, 237, 238, 0, 0, 0, 0, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 435, 436, 0, 245,
	0, 246, 0, 247, 0, 0, 248, 249, 250, 0,
	251, 0, 252, 253, 0, 437, 254, 255, 257, 260,
	256, 261, 262, 438, 439, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 440, 266, 267, 0, 268,
	0, 269, 0, 0, 0, 270, 0, 271, 441, 0,
	442, 272, 0, 273, 274, 275, 276, 277, 278, 443,
	444, 445, 0, 0, 449, 280, 0, 0, 0, 0,
	279, 281, 288, 0, 0, 282, 446, 284, 283, 285,
	286, 287, 447, 0, 448, 0, 289, 0, 0, 290,
	291, 292, 0, 293, 294, 0, 0, 295, 296, 297,
	0, 299, 298, 0, 300, 450, 0, 301, 302, 0,
	0, 303, 304, 0, 0, 305, 0, 306, 0, 0,
	307, 308, 310, 311, 309, 0, 312, 313, 315, 314,
	0, 0, 0, 0, 451, 452, 316, 317, 0, 318,
	319, 0, 0, 320, 321, 0, 0, 322, 453, 0,
	323, 0, 454, 324, 325, 326, 327, 328, 329, 330,
	0, 331, 455, 332, 456, 333, 0, 334, 335, 336,
	337, 338, 339, 457, 340, 341, 0, 342, 343, 344,
	345, 346, 0, 348, 349, 347, 350, 351, 352, 353,
	0, 354, 0, 355, 356, 357, 358, 458, 359, 0,
	363, 364, 365, 366, 367, 368, 369, 174, 375, 376,
	370, 372, 373, 374, 371, 377, 378, 0, 379, 360,
	361, 380, 0, 381, 459, 382, 383, 0, 393, 384,
	385, 386, 362, 387, 391, 392, 388, 389, 390, 460,
	0, 394, 395, 176, 396, 397, 398, 399, 400, 258,
	401, 259, 402, 0, 461, 462, 463, 403, 0, 0,
	404, 405, 464, 465, 0, 406, 407, 0, 408, 409,
	0, 0, 410, 411, 412, 414, 0, 415, 0, 413,
	416, 417, 418, 1169, 467, 468, 0, 420, 419, 469,
	0, 202, 0, 168, 421, 422, 470, 423, 424, 425,
	0, 169, 0, 0, 0, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	0, 0, 146, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 0, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 0, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 0, 301, 302, 0, 0,
	303, 304, 0, 0, 305, 0, 306, 0, 0, 307,
	308, 310, 311, 309, 0, 312, 313, 315, 314, 0,
	0, 0, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 0, 323,
	0, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 0, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 0, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 0, 420, 419, 469, 0,
	202, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 206, 207,
	208, 0, 209, 0, 0, 0, 0, 426, 0, 0,
	0, 2112, 210, 211, 212, 427, 428, 213, 429, 214,
	215, 430, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 223, 431, 432, 433, 0, 224, 434, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 231, 232,
	233, 230, 0, 234, 0, 235, 236, 0, 0, 237,
	238, 0, 0, 0, 0, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 435, 436, 0, 245, 0, 246,
	0, 247, 0, 0, 248, 249, 250, 0, 251, 0,
	252, 253, 0, 437, 254, 255, 257, 260, 256, 261,
	262, 438, 439, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 440, 266, 267, 0, 268, 0, 269,
	0, 0, 0, 270, 0, 271, 441, 0, 442, 272,
	0, 273, 274, 275, 276, 277, 278, 443, 444, 445,
	0, 0, 449, 280, 0, 0, 0, 0, 279, 281,
	288, 0, 0, 282, 446, 284, 283, 285, 286, 287,
	447, 0, 448, 0, 289, 0, 0, 290, 291, 292,
	0, 293, 294, 0, 0, 295, 296, 297, 0, 299,
	298, 0, 300, 450, 0, 301, 302, 0, 0, 303,
	304, 0, 0, 305, 0, 306, 0, 0, 307, 308,
	310, 311, 309, 0, 312, 313, 315, 314, 0, 0,
	0, 0, 451, 452, 316, 317, 0, 318, 319, 0,
	0, 320, 321, 0, 0, 322, 453, 0, 323, 0,
	454, 324, 325, 326, 327, 328, 329, 330, 0, 331,
	455, 332, 456, 333, 0, 334, 335, 336, 337, 338,
	339, 457, 340, 341, 0, 342, 343, 344, 345, 346,
	0, 348, 349, 347, 350, 351, 352, 353, 0, 354,
	0, 355, 356, 357, 358, 458, 359, 0, 363, 364,
	365, 366, 367, 368, 369, 0, 375, 376, 370, 372,
	373, 374, 371, 377, 378, 0, 379, 360, 361, 380,
	0, 381, 459, 382, 383, 0, 393, 384, 385, 386,
	362, 387, 391, 392, 388, 389, 390, 460, 0, 394,
	395, 0, 396, 397, 398, 399, 400, 258, 401, 259,
	402, 0, 461, 462, 463, 403, 0, 0, 404, 405,
	464, 465, 0, 406, 407, 0, 408, 409, 0, 0,
	410, 411, 412, 414, 0, 415, 0, 413, 416, 417,
	418, 466, 467, 468, 0, 420, 419, 469, 0, 202,
	0, 0, 421, 422, 470, 423, 424, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	2542, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 1193, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1436,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 1192, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 1191, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1164, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1163, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1160, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1159, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1120, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1119, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1117, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1116, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1059, 0, 1066, 1065, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1061, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1066, 1065, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 970, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 846,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 847, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 848, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 850, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 849, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 851, 852, 290, 291,
	292, 853, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 854, 301, 302, 855, 0,
	303, 304, 0, 0, 305, 0, 306, 912, 911, 307,
	308, 310, 311, 309, 856, 312, 313, 315, 314, 0,
	0, 857, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 858, 323,
	859, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 860, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 861, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 0, 420, 419, 469, 1066,
	1065, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 970,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 846, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 847, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 848, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 850,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 849, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 851, 852, 290, 291, 292, 853,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 854, 301, 302, 855, 0, 303, 304,
	0, 0, 305, 0, 306, 912, 911, 307, 308, 310,
	311, 309, 856, 312, 313, 315, 314, 0, 0, 857,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 858, 323, 859, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 860,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 861,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 1066, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 970, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 846, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 847, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 848, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 850, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 849, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 851, 852,
	290, 291, 292, 853, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 854, 301, 302,
	855, 0, 303, 304, 0, 0, 305, 0, 306, 912,
	911, 307, 308, 310, 311, 309, 856, 312, 313, 315,
	314, 0, 0, 857, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	858, 323, 859, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 860, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 861, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 604, 0, 538, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 544, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 543, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 537, 0, 538, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 547, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 544, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 543, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 538, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 547, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 544, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 1691, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 543, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 538, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	547, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 544, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 0, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 0, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 0, 301, 302, 0, 0,
	303, 304, 0, 0, 305, 0, 306, 0, 0, 307,
	308, 310, 311, 309, 0, 312, 313, 315, 314, 0,
	0, 0, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 0, 323,
	0, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 0, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 0, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 543, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 202, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 426, 0, 547, 0, 0, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 223, 431, 432,
	433, 0, 224, 434, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 435,
	436, 0, 245, 0, 246, 0, 247, 0, 0, 248,
	249, 250, 0, 251, 0, 252, 253, 0, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 0, 269, 0, 0, 0, 270, 0,
	271, 441, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 443, 444, 445, 0, 0, 449, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 446,
	284, 283, 285, 286, 287, 447, 0, 448, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 450, 0,
	301, 302, 0, 0, 303, 304, 0, 0, 305, 0,
	306, 0, 0, 307, 308, 310, 311, 309, 0, 312,
	313, 315, 314, 0, 0, 0, 0, 451, 452, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 453, 0, 323, 0, 454, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 455, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 0, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	0, 379, 360, 361, 380, 0, 381, 459, 382, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 0, 461, 462, 463,
	403, 0, 0, 404, 405, 464, 465, 0, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 0,
	415, 0, 413, 416, 417, 418, 466, 467, 468, 202,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 547, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 2004, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 2001, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 2075, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 2007,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 2073, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 2072, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 2006, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 2074, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 202, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 2004,
	224, 434, 0, 0, 1998, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 2001, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 2007, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1997, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 2006, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 2005, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 501, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 500, 490, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	493, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 494, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 495, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 489, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 490, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	493, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 494, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 495, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 202, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 493, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 494, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 495, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 1236, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 1239, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 1237, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 1238, 419, 469, 1139, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 902, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 1054, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 1056, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 902, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 1051, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 1053, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 902, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 958, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 960, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 902, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 596, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 595, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 478, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 477, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	476, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 202, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	1942, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 0, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 0, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 0, 301, 302, 0, 0,
	303, 304, 0, 0, 305, 0, 306, 0, 0, 307,
	308, 310, 311, 309, 0, 312, 313, 315, 314, 0,
	0, 0, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 0, 323,
	0, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 0, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 0, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 0, 420, 419, 469, 202,
	2132, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 202, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 2663,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 202, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 902, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 202, 2132, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 223, 431, 432,
	433, 0, 224, 434, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 435,
	436, 0, 245, 0, 246, 0, 247, 0, 0, 248,
	249, 250, 0, 251, 0, 252, 253, 0, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 0, 269, 0, 0, 0, 270, 0,
	271, 441, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 443, 444, 445, 0, 0, 449, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 446,
	284, 283, 285, 286, 287, 447, 0, 448, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 450, 0,
	301, 302, 0, 0, 303, 304, 0, 0, 305, 0,
	306, 0, 0, 307, 308, 310, 311, 309, 0, 312,
	313, 315, 314, 0, 0, 0, 0, 451, 452, 316,
	317, 0, 318, 319, 0, 0, 320, 2129, 0, 0,
	322, 453, 0, 323, 0, 454, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 455, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 0, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	0, 379, 360, 361, 380, 0, 381, 459, 382, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 0, 461, 462, 463,
	403, 0, 0, 404, 405, 464, 465, 0, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 0,
	415, 0, 413, 416, 417, 418, 466, 467, 468, 202,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 0, 0, 0, 205, 206, 207, 208,
	1683, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 1677, 0, 202,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 1675, 0, 202,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 520, 0, 202,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 938, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 521, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 517,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 516, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 0, 420, 419, 469, 1634, 0, 202,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 1633, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 202, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 1618, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 520, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	510, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 521, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 517, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 1171, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 516, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1157, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1156, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1153, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1152, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1150, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1149, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1147, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1146, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1143, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1142, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1131, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1130, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1122, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1113, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1112, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1108, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1104, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1106, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1076, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	1078, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 1070, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 520, 0, 202, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 938, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 521, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 517, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 516, 462, 463, 403, 0,
	0, 404, 939, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 202, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 205, 206, 207, 208, 922, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 520, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 510, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 509, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 521,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 511, 359, 0, 363, 364, 517, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	512, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 516,
	462, 463, 403, 0, 0, 404, 514, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 505, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 506, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 503, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 497, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 0, 420, 419, 469, 473, 0, 202, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 443, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 202, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 0, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 0, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 0, 301, 302, 0, 0,
	303, 304, 0, 0, 305, 0, 306, 0, 0, 307,
	308, 310, 311, 309, 0, 312, 313, 315, 314, 0,
	0, 0, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 0, 323,
	0, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 0, 355, 356, 357, 358, 458, 359, 0, 363,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 0, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 202, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 426, 0, 0, 0, 0, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 223, 431, 432,
	433, 0, 224, 434, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 435,
	436, 0, 245, 0, 246, 0, 247, 0, 0, 248,
	249, 250, 0, 251, 0, 252, 253, 0, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 0, 269, 0, 0, 0, 270, 0,
	271, 441, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 2376, 444, 445, 0, 0, 449, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 446,
	284, 283, 285, 286, 287, 447, 0, 448, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 450, 0,
	301, 302, 0, 0, 303, 304, 0, 0, 305, 0,
	306, 0, 0, 307, 308, 310, 311, 309, 0, 312,
	313, 315, 314, 0, 0, 0, 0, 451, 452, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 453, 0, 323, 0, 454, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 455, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 0, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	0, 379, 360, 361, 380, 0, 381, 459, 382, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 0, 461, 462, 463,
	403, 0, 0, 404, 405, 464, 465, 0, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 0,
	415, 0, 413, 416, 417, 418, 466, 467, 468, 202,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 2374, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 340, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 202, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 272, 0, 273, 274, 275, 276, 277, 278,
	2363, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 327, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 337, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 359,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 202, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 0, 0, 0, 205, 206, 207, 208, 0, 209,
	0, 0, 0, 0, 426, 0, 0, 0, 0, 210,
	211, 212, 427, 428, 213, 429, 214, 215, 430, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 223,
	431, 432, 433, 0, 224, 434, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 231, 232, 233, 230, 0,
	234, 0, 235, 236, 0, 0, 237, 238, 0, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 435, 436, 0, 245, 0, 246, 0, 247, 0,
	0, 248, 249, 250, 0, 251, 0, 252, 253, 0,
	437, 254, 255, 257, 260, 256, 261, 262, 438, 439,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	440, 266, 267, 0, 268, 0, 269, 0, 0, 0,
	270, 0, 271, 441, 0, 442, 272, 0, 273, 274,
	275, 276, 277, 278, 2095, 444, 445, 0, 0, 449,
	280, 0, 0, 0, 0, 279, 281, 288, 0, 0,
	282, 446, 284, 283, 285, 286, 287, 447, 0, 448,
	0, 289, 0, 0, 290, 291, 292, 0, 293, 294,
	0, 0, 295, 296, 297, 0, 299, 298, 0, 300,
	450, 0, 301, 302, 0, 0, 303, 304, 0, 0,
	305, 0, 306, 0, 0, 307, 308, 310, 311, 309,
	0, 312, 313, 315, 314, 0, 0, 0, 0, 451,
	452, 316, 317, 0, 318, 319, 0, 0, 320, 321,
	0, 0, 322, 453, 0, 323, 0, 454, 324, 325,
	326, 327, 328, 329, 330, 0, 331, 455, 332, 456,
	333, 0, 334, 335, 336, 337, 338, 339, 457, 340,
	341, 0, 342, 343, 344, 345, 346, 0, 348, 349,
	347, 350, 351, 352, 353, 0, 354, 0, 355, 356,
	357, 358, 458, 359, 0, 363, 364, 365, 366, 367,
	368, 369, 0, 375, 376, 370, 372, 373, 374, 371,
	377, 378, 0, 379, 360, 361, 380, 0, 381, 459,
	382, 383, 0, 393, 384, 385, 386, 362, 387, 391,
	392, 388, 389, 390, 460, 0, 394, 395, 0, 396,
	397, 398, 399, 400, 258, 401, 259, 402, 0, 461,
	462, 463, 403, 0, 0, 404, 405, 464, 465, 0,
	406, 407, 0, 408, 409, 0, 0, 410, 411, 412,
	414, 0, 415, 0, 413, 416, 417, 418, 466, 467,
	468, 202, 420, 419, 469, 0, 0, 0, 0, 421,
	422, 470, 423, 424, 425, 0, 0, 0, 205, 206,
	207, 208, 0, 209, 0, 0, 0, 0, 426, 0,
	0, 0, 0, 210, 211, 212, 427, 428, 213, 429,
	214, 215, 430, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 223, 431, 432, 433, 0, 224, 434,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 231,
	232, 233, 230, 0, 234, 0, 235, 236, 0, 0,
	237, 238, 0, 0, 0, 0, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 435, 436, 0, 245, 0,
	246, 0, 247, 0, 0, 248, 249, 250, 0, 251,
	0, 252, 253, 0, 437, 254, 255, 257, 260, 256,
	261, 262, 438, 439, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 440, 266, 267, 0, 268, 0,
	269, 0, 0, 0, 270, 0, 271, 441, 0, 442,
	272, 0, 273, 274, 275, 276, 277, 278, 443, 444,
	445, 0, 0, 449, 280, 0, 0, 0, 0, 279,
	281, 288, 0, 0, 282, 446, 284, 283, 285, 286,
	287, 447, 0, 448, 0, 289, 0, 0, 290, 291,
	292, 0, 293, 294, 0, 0, 295, 296, 297, 0,
	299, 298, 0, 300, 450, 0, 301, 302, 0, 0,
	303, 304, 0, 0, 305, 0, 306, 0, 0, 307,
	308, 310, 311, 309, 0, 312, 313, 315, 314, 0,
	0, 0, 0, 451, 452, 316, 317, 0, 318, 319,
	0, 0, 320, 321, 0, 0, 322, 453, 0, 323,
	0, 454, 324, 325, 326, 327, 328, 329, 330, 0,
	331, 455, 332, 456, 333, 0, 334, 335, 336, 337,
	338, 339, 457, 340, 341, 0, 342, 343, 344, 345,
	346, 0, 348, 349, 347, 350, 351, 352, 353, 0,
	354, 0, 355, 356, 357, 358, 458, 359, 0, 506,
	364, 365, 366, 367, 368, 369, 0, 375, 376, 370,
	372, 373, 374, 371, 377, 378, 0, 379, 360, 361,
	380, 0, 381, 459, 382, 383, 0, 393, 384, 385,
	386, 362, 387, 391, 392, 388, 389, 390, 460, 0,
	394, 395, 0, 396, 397, 398, 399, 400, 258, 401,
	259, 402, 0, 461, 462, 463, 403, 0, 0, 404,
	405, 464, 465, 0, 406, 407, 0, 408, 409, 0,
	0, 410, 411, 412, 414, 0, 415, 0, 413, 416,
	417, 418, 466, 467, 468, 202, 420, 419, 469, 0,
	0, 0, 0, 421, 422, 470, 423, 424, 425, 0,
	0, 0, 205, 206, 207, 208, 0, 209, 0, 0,
	0, 0, 426, 0, 1646, 0, 0, 210, 211, 212,
	427, 428, 213, 429, 214, 215, 430, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 223, 431, 432,
	433, 0, 224, 434, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 231, 232, 233, 230, 0, 234, 0,
	235, 236, 0, 0, 237, 238, 0, 0, 0, 0,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 435,
	436, 0, 245, 0, 246, 0, 247, 0, 0, 248,
	249, 250, 0, 251, 0, 252, 253, 0, 437, 254,
	255, 257, 260, 256, 261, 262, 438, 439, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 440, 266,
	267, 0, 268, 0, 269, 0, 0, 0, 270, 0,
	271, 441, 0, 442, 272, 0, 273, 274, 275, 276,
	277, 278, 443, 444, 445, 0, 0, 449, 280, 0,
	0, 0, 0, 279, 281, 288, 0, 0, 282, 446,
	284, 283, 285, 286, 287, 447, 0, 448, 0, 289,
	0, 0, 290, 291, 292, 0, 293, 294, 0, 0,
	295, 296, 297, 0, 299, 298, 0, 300, 450, 0,
	301, 302, 0, 0, 303, 304, 0, 0, 305, 0,
	306, 0, 0, 307, 308, 310, 311, 309, 0, 312,
	313, 315, 314, 0, 0, 0, 0, 451, 452, 316,
	317, 0, 318, 319, 0, 0, 320, 321, 0, 0,
	322, 453, 0, 323, 0, 454, 324, 325, 326, 327,
	328, 329, 330, 0, 331, 455, 332, 456, 333, 0,
	334, 335, 336, 337, 338, 339, 457, 340, 341, 0,
	342, 343, 344, 345, 346, 0, 348, 349, 347, 350,
	351, 352, 353, 0, 354, 0, 355, 356, 357, 358,
	458, 359, 0, 363, 364, 365, 366, 367, 368, 369,
	0, 375, 376, 370, 372, 373, 374, 371, 377, 378,
	0, 0, 360, 361, 380, 0, 381, 459, 382, 383,
	0, 393, 384, 385, 386, 362, 387, 391, 392, 388,
	389, 390, 460, 0, 394, 395, 0, 396, 397, 398,
	399, 400, 258, 401, 259, 402, 0, 461, 462, 463,
	403, 0, 0, 404, 405, 464, 465, 0, 406, 407,
	0, 408, 409, 0, 0, 410, 411, 412, 414, 0,
	415, 0, 413, 416, 417, 418, 466, 467, 468, 202,
	420, 419, 469, 0, 0, 0, 0, 421, 422, 470,
	423, 424, 425, 0, 0, 0, 205, 206, 207, 208,
	0, 209, 0, 0, 0, 0, 426, 0, 0, 0,
	0, 210, 211, 212, 427, 428, 213, 429, 214, 215,
	430, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 223, 431, 432, 433, 0, 224, 434, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 231, 232, 233,
	230, 0, 234, 0, 235, 236, 0, 0, 237, 238,
	0, 0, 0, 0, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 435, 436, 0, 245, 0, 246, 0,
	247, 0, 0, 248, 249, 250, 0, 251, 0, 252,
	253, 0, 437, 254, 255, 257, 260, 256, 261, 262,
	438, 439, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 440, 266, 267, 0, 268, 0, 269, 0,
	0, 0, 270, 0, 271, 441, 0, 442, 272, 0,
	273, 274, 275, 276, 277, 278, 443, 444, 445, 0,
	0, 449, 280, 0, 0, 0, 0, 279, 281, 288,
	0, 0, 282, 446, 284, 283, 285, 286, 287, 447,
	0, 448, 0, 289, 0, 0, 290, 291, 292, 0,
	293, 294, 0, 0, 295, 296, 297, 0, 299, 298,
	0, 300, 450, 0, 301, 302, 0, 0, 303, 304,
	0, 0, 305, 0, 306, 0, 0, 307, 308, 310,
	311, 309, 0, 312, 313, 315, 314, 0, 0, 0,
	0, 451, 452, 316, 317, 0, 318, 319, 0, 0,
	320, 321, 0, 0, 322, 453, 0, 323, 0, 454,
	324, 325, 326, 327, 328, 329, 330, 0, 331, 455,
	332, 456, 333, 0, 334, 335, 336, 337, 338, 339,
	457, 876, 341, 0, 342, 343, 344, 345, 346, 0,
	348, 349, 347, 350, 351, 352, 353, 0, 354, 0,
	355, 356, 357, 358, 458, 359, 0, 363, 364, 365,
	366, 367, 368, 369, 0, 375, 376, 370, 372, 373,
	374, 371, 377, 378, 0, 379, 360, 361, 380, 0,
	381, 459, 382, 383, 0, 393, 384, 385, 386, 362,
	387, 391, 392, 388, 389, 390, 460, 0, 394, 395,
	0, 396, 397, 398, 399, 400, 258, 401, 259, 402,
	0, 461, 462, 463, 403, 0, 0, 404, 405, 464,
	465, 0, 406, 407, 0, 408, 409, 0, 0, 410,
	411, 412, 414, 0, 415, 0, 413, 416, 417, 418,
	466, 467, 468, 202, 420, 419, 469, 0, 0, 0,
	0, 421, 422, 470, 423, 424, 425, 0, 0, 0,
	205, 206, 207, 208, 0, 209, 0, 0, 0, 0,
	426, 0, 0, 0, 0, 210, 211, 212, 427, 428,
	213, 429, 214, 215, 430, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 223, 431, 432, 433, 0,
	224, 434, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 231, 232, 233, 230, 0, 234, 0, 235, 236,
	0, 0, 237, 238, 0, 0, 0, 0, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 435, 436, 0,
	245, 0, 246, 0, 247, 0, 0, 248, 249, 250,
	0, 251, 0, 252, 253, 0, 437, 254, 255, 257,
	260, 256, 261, 262, 438, 439, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 440, 266, 267, 0,
	268, 0, 269, 0, 0, 0, 270, 0, 271, 441,
	0, 442, 0, 0, 273, 274, 275, 276, 277, 278,
	443, 444, 445, 0, 0, 449, 280, 0, 0, 0,
	0, 279, 281, 288, 0, 0, 282, 446, 284, 283,
	285, 286, 287, 447, 0, 448, 0, 289, 0, 0,
	290, 291, 292, 0, 293, 294, 0, 0, 295, 296,
	297, 0, 299, 298, 0, 300, 450, 0, 301, 302,
	0, 0, 303, 304, 0, 0, 305, 0, 306, 0,
	0, 307, 308, 310, 311, 309, 0, 312, 313, 315,
	314, 0, 0, 0, 0, 451, 452, 316, 317, 0,
	318, 319, 0, 0, 320, 321, 0, 0, 322, 453,
	0, 323, 0, 454, 324, 325, 326, 0, 328, 329,
	330, 0, 331, 455, 332, 456, 333, 0, 334, 335,
	336, 0, 338, 339, 457, 340, 341, 0, 342, 343,
	344, 345, 346, 0, 348, 349, 347, 350, 351, 352,
	353, 0, 354, 0, 355, 356, 357, 358, 458, 0,
	0, 363, 364, 365, 366, 367, 368, 369, 0, 375,
	376, 370, 372, 373, 374, 371, 377, 378, 0, 379,
	360, 361, 380, 0, 381, 459, 382, 383, 0, 393,
	384, 385, 386, 362, 387, 391, 392, 388, 389, 390,
	460, 0, 394, 395, 0, 396, 397, 398, 399, 400,
	258, 401, 259, 402, 0, 461, 462, 463, 403, 0,
	0, 404, 405, 464, 465, 0, 406, 407, 0, 408,
	409, 0, 0, 410, 411, 412, 414, 0, 415, 0,
	413, 416, 417, 418, 466, 467, 468, 0, 420, 419,
	469, 0, 0, 0, 0, 421, 422, 470, 423, 424,
	425, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 1277, 0, 0, 0, 0,
	1283, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 1325, 0, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1313, 1283, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 1304, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1316, 0, 0, 0,
	1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 0, 0, 1277, 0, 2240,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 1300, 1301, 1302, 1303, 0, 1277,
	0, 2239, 0, 0, 1283, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 1313, 1283, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1304, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1316, 0, 0, 0, 1278, 0, 1314, 1324, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 0, 0, 0, 0,
	0, 1277, 0, 2236, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 1314, 1324,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1300, 1301,
	1302, 1303, 0, 1277, 0, 2235, 0, 0, 1283, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 1325, 0, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1313,
	1283, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 1315, 1325, 0, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 1304, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1316, 0, 0, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	0, 0, 0, 0, 0, 1277, 0, 2234, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 1830,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 3042, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 3038,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 2979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 2978,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 2929, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 2890,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 2807, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 2763,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 2762, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 2761,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 1314, 0, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 2727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 1324, 0, 0, 0, 0, 1314, 0, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 1277, 0, 0, 0, 2547,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 3122, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1316, 0,
	0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 2194, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 2165, 0, 1278, 0, 1314, 1324, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 1300, 1301, 1302, 1303,
	0, 1277, 0, 0, 0, 0, 1283, 0, 2281, 1297,
	0, 2280, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 0, 2166, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 0, 0, 1313, 1283, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 1315, 1325, 0, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1304, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1917, 0, 0, 0, 0, 1299,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1316, 1916, 0, 0, 1278, 0, 1314, 1324,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 0, 0,
	0, 0, 0, 1277, 0, 0, 0, 0, 0, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	1300, 1301, 1302, 1303, 0, 1277, 0, 0, 0, 0,
	1283, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 1325, 0, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 1300, 1301, 1302, 1303, 0, 0, 0, 0,
	0, 1313, 1283, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 1304, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	722, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1316, 0, 0, 0,
	1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 0, 0, 0, 0, 0, 1277, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 1300, 1301, 1302, 1303, 0, 1277,
	0, 0, 0, 0, 1283, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 1300, 1301, 1302, 1303,
	0, 0, 0, 0, 0, 1313, 1283, 0, 0, 0,
	0, 2287, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1313, 1304, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2537,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1316, 2282, 0, 0, 1278, 0, 1314, 1324, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 0, 0, 0, 0,
	0, 1277, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 1275, 1276, 0, 1308, 1309, 1310, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 1278, 0, 1314, 1324,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1300, 1301,
	1302, 1303, 0, 1277, 0, 0, 0, 0, 1283, 0,
	0, 1297, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 1325, 0, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 0, 0, 0, 1313,
	1283, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 1315, 1325, 0, 0, 1305, 1306,
	1307, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1321,
	1322, 0, 0, 0, 0, 0, 0, 1292, 1293, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1313, 1304, 0, 0, 0, 0, 0, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 0, 1275, 1276, 0, 1308, 1309, 1310, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1316, 2233, 0, 0, 1278, 0,
	1314, 1324, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 0,
	0, 0, 0, 1297, 0, 0, 0, 0, 0, 0,
	1294, 0, 0, 0, 0, 1275, 1276, 0, 1308, 1309,
	1310, 1318, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	1278, 0, 1314, 1324, 0, 1289, 1290, 1296, 1295, 1291,
	1317, 0, 1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284,
	1285, 0, 1300, 1301, 1302, 1303, 0, 1277, 0, 0,
	0, 0, 1283, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1325, 0, 0,
	1305, 1306, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1322, 0, 0, 0, 0, 0, 0, 1292,
	1293, 0, 0, 0, 1300, 1301, 1302, 1303, 0, 0,
	0, 0, 0, 1313, 1283, 0, 0, 0, 0, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1323, 0, 1315, 1325,
	0, 0, 1305, 1306, 1307, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 1292, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1304, 0, 0, 0,
	0, 0, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 1316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 0, 1275, 1276, 0,
	1308, 1309, 1310, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1316, 0,
	0, 0, 1278, 0, 1314, 1324, 0, 1289, 1290, 1296,
	1295, 1291, 1317, 0, 1288, 1286, 1287, 1279, 1280, 1281,
	1282, 1284, 1285, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 1275,
	1276, 0, 1308, 1309, 1310, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1278, 0, 1314, 1324, 0, 1289,
	1290, 1296, 1295, 1291, 1317, 0, 1288, 1286, 1287, 1279,
	1280, 1281, 1282, 1284, 1285, 0, 1300, 1301, 1302, 1303,
	0, 1277, 0, 0, 0, 0, 1283, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 1294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1315, 1325, 0, 0, 1305, 1306, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1322, 0, 0, 0,
	0, 0, 0, 1292, 1293, 0, 0, 0, 1300, 1301,
	1302, 1303, 0, 0, 0, 0, 0, 1313, 1283, 0,
	0, 0, 0, 0, 1298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 1315, 1325, 0, 0, 1305, 1306, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 1322, 0,
	0, 0, 0, 0, 0, 1292, 1293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1304, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 1476, 1483, 1466, 1504, 1503, 0, 1299,
	0, 1468, 1467, 0, 0, 0, 0, 0, 0, 1514,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 0, 0, 0, 1314, 0,
	0, 1289, 1290, 1296, 1295, 1291, 1317, 0, 1288, 1286,
	1287, 1279, 1280, 1281, 1282, 1284, 1285, 0, 1505, 0,
	1501, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1498,
	1496, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 0, 1289, 1290, 1296, 1295, 1291, 1317, 0,
	1288, 1286, 1287, 1279, 1280, 1281, 1282, 1284, 1285, 1478,
	0, 0, 634, 0, 665, 0, 0, 0, 0, 0,
	1487, 1481, 1489, 1491, 1492, 1493, 1488, 0, 1486, 0,
	0, 0, 0, 0, 0, 641, 0, 1510, 1511, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 640, 0, 0, 0, 0, 642, 0, 0, 1502,
	670, 0, 0, 1479, 1480, 0, 648, 649, 0, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 1463, 1461, 1462, 1465, 1464, 0, 0, 0, 0,
	664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 1472, 1474, 1475, 0, 644,
	0, 0, 0, 0, 0, 0, 638, 0, 1490, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 645, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 1506, 1507,
	1508, 1509, 0, 652, 0, 0, 0, 0, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 651, 0, 0, 0, 1484, 1512,
	0, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 654, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 655, 0, 0, 0,
	671, 672, 0, 0, 0, 0, 669, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 662,
}
var sqlPact = [...]int{

	196, -1000, -15, -1000, -1000, -1000, -1000, -1000, 175, 173,
	170, 166, 155, 153, 139, 132, 130, -1000, -1000, -1000,
	128, -1000, -1000, 126, -1000, -1000, 125, 124, 123, -1000,
	116, 115, -1000, -1000, -1000, -1000, 112, 110, 100, 52347,
	1389, 51963, 39913, 1349, 1876, 36799, 51573, 36409, 51183, 50793,
	99, -1000, 50403, 98, 97, 96, -1000, -1000, 94, 1546,
	34099, 91, 90, 88, 2017, 83, 81, -1000, 79, 3198,
	1105, -1000, 77, 76, 1222, 343, 39523, 1847, 75, 69,
	33709, 1843, -1000, -1000, 1073, -1000, -1000, 65, 64, 54,
	52, 49, 48, 47, 46, 44, -1000, 43, 42, 40,
	38, 37, 34, 33, 31, 28, 27, 25, 24, 23,
	22, 21, 19, -1000, 62160, 1294, 1235, 1233, 1231, 1224,
	1220, 800, 18, 17, 15, 14, 10, 8, -1000, -1000,
	4, 3, 2, 1, -1000, 0, -1, 114, -2, -5,
	-6, -7, -8, 2235, -1000, 1118, 544, 15038, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55035, 52347,
	-11, -35, -12, -1000, 2159, 761, 25439, 196, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 422, -1000, -1000,
	-1000, 256, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1197, 615, -1000, -1000, -1000, 50013, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52347, -1000, 1388, -20, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 614, -1000, 1387, 133,
	1298, -1000, -1000, -1000, -1000, -1000, 52347, -1000, -1000, 2355,
	1374, 613, 49629, -1000, 1723, -1000, 744, 15451, -1000, 911,
	-1000, 15451, 254, -1000, -1000, -1000, -1000, -1000, 39133, 11307,
	38743, 38353, 32149, 49239, 10907, 48849, 917, -1000, -1000, -1000,
	-1000, -1000, -17, 35251, 52347, -1000, 250, -1000, -1000, -1000,
	-1000, -1000, -1000, 21800, 466, 21373, 319, 20946, 213, -1000,
	-1000, -1000, -1000, 48459, 48069, 1883, 47679, 31749, 31349, 47289,
	52347, 52347, 1698, 46899, -1000, 1975, 1868, 1863, 37963, -1000,
	-1000, -1000, 46509, 46119, 45729, 45339, 44949, 30949, 30549, -1000,
	-1000, 26996, 612, 44559, 27799, 52347, -1000, -1000, 22213, 485,
	-1000, -1000, -1000, 1851, -1000, 22213, 485, -1000, 1312, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1520, 1189, 2304, 30149,
	1416, 1082, 1967, 2353, 1545, 1965, 1953, 1935, 1930, 1927,
	2352, 1092, 2349, 1133, 2345, 1925, 1924, 2308, 1566, 37573,
	2342, 2341, 2128, 1923, 1844, -1000, -1000, -1000, -1000, 1093,
	-1000, -1000, -1000, 41453, -1000, -1000, 1240, -1000, -1000, 1240,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 916, 54267, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1600, -1000, 1330, -1000, -1000, 1584, 2145,
	2145, 2145, 2178, 397, 394, -1000, 114, -1000, -1000, 61374,
	-1000, -1000, 22213, 22213, 22213, 22213, 22213, 1254, -1000, -1000,
	-1000, 628, -1000, 609, 539, -1000, -1000, -1000, -1000, -1000,
	-1000, 598, 2318, -1000, 796, -1000, -1000, -1000, -1000, 2264,
	-1000, 13358, -1000, -1000, -1000, 376, 22213, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 246, 754, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 519,
	1163, 518, 518, 518, -1000, -1000, 787, -1000, -1000, -1000,
	741, -1000, 695, -1000, -1000, -1000, 1880, 597, 594, -1000,
	592, 581, 580, -1000, -1000, -1000, 579, 578, 576, 574,
	571, 569, 563, 561, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 785, -1000, -1000, -1000, 560, 559, 555, 553,
	552, 551, 549, 547, 546, -18, 52347, -1000, 422, -18,
	-1000, -1000, 545, -1000, 16277, 16277, 16277, -1000, -1000, 1379,
	22213, -1000, 1764, -1000, 3124, -238, 671, 26606, -1000, 24659,
	671, 634, 29745, -1000, 1842, -1000, -1000, 543, 236, -1000,
	-1000, -1000, -1000, -1000, 1841, 52347, 11705, 52347, 52347, -1000,
	22213, -1000, -1000, 32547, 34867, 52347, 37183, 2217, 61992, 34867,
	52347, 1872, -1000, -1000, 52347, -1000, 22213, -1000, 2215, 1691,
	-29, -1000, -1000, -1000, -1000, -1000, 1590, 1703, 902, 1363,
	-1000, 15451, 2095, -1000, -1000, -1000, 223, 11705, -1000, 1448,
	2016, 1060, -1000, 1397, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1131, 2013, -1000, 1730, 2012, 1123, -1000, -1000,
	767, 2010, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1343, -1000, -1000, 2124, -1000, -1000, 1514, 2008, -204,
	32547, 35251, -21, -1000, -1000, -38, -1000, 10507, 61374, -1000,
	-1000, -1000, 61374, 724, -1000, -1000, 2006, -1000, 61374, 716,
	-1000, -1000, 1998, -1000, -1000, 542, 1529, 1367, -1000, -1000,
	44169, 1730, 1528, -1000, -1000, 763, 1518, -1000, -1000, 1515,
	-1000, 422, -1000, -1000, 799, -1000, 2338, 43785, 1713, 763,
	1512, -1000, 41453, -1000, 52347, -1000, 52347, -1000, 1040, -1000,
	54651, 148, 1992, -1000, -1000, 148, 1990, -1000, 148, 1988,
	-1000, 146, 1986, -1000, -1000, 1433, 1985, -1000, -127, 1983,
	-1000, -1000, -127, 1980, -1000, -32, -1000, -1000, -1000, 761,
	33319, 43395, 32547, 762, 557, 61374, -1000, 32547, 61374, -1000,
	-1000, 43005, 42615, -1000, -1000, 962, 1648, -1000, -1000, -1000,
	-1000, 32547, 32547, -1000, 42225, -1000, -1000, -1000, 1331, 2121,
	52347, -1000, -1000, 1866, -1000, 34483, 52347, -1000, 52347, -1000,
	52347, -1000, 52347, -1000, 52347, -1000, -1000, -1000, -1000, -1000,
	2025, 1241, 1237, -1000, 52347, -1000, 52347, -1000, -1000, -1000,
	1579, -1000, -1000, -1000, -1000, 52347, -1000, -1000, -1000, -1000,
	-1000, -1000, 1865, -1000, 1128, -1000, 959, -1000, -1000, 149,
	-1000, -1000, -29, -1000, 54267, -1000, -1000, 1584, -1000, 52347,
	-1000, -1000, 1336, 1635, 20519, 1629, 22213, 114, -1000, -1000,
	114, 114, 14611, -1000, -1000, 61992, 61992, 11705, 936, 22213,
	22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213,
	22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213,
	22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213,
	22213, 22213, 22213, 22213, 1676, 22213, 915, 22213, 22213, 22213,
	22213, 1157, -1000, -1000, 1301, 447, 1319, -1000, 2278, 2278,
	2278, 61738, 61738, 498, 628, -1000, 22213, -1000, 485, 22213,
	12105, -1000, 2301, 994, -1000, -1000, 394, 6878, 1455, -1000,
	393, 12532, -1000, -1000, -1000, 13358, 539, 20092, 778, 61374,
	10109, 1893, 1767, -1000, 2300, -1000, -1000, 2264, -1000, -1000,
	-1000, 935, 934, 929, 924, 538, 645, 643, 642, 641,
	512, 22213, 22213, 22213, 22213, 22213, 22213, 22213, 22213, -1000,
	19679, 19252, 18825, 18398, 17971, 23452, 17544, 22213, 13771, 52347,
	-18, 2213, 22213, 80, -1000, 60210, -1000, 80, 80, 536,
	-44, 61374, 1665, 1659, 25828, 1634, 1264, 1264, 1264, -1000,
	535, 621, 671, 7704, 40297, 1277, 671, 671, 178, 245,
	392, 24270, 1764, 40297, -1000, -1000, 52347, 522, 12105, 11705,
	976, -47, 207, 1679, 1672, 178, -1000, -52, 762, 914,
	-23, -1000, 3863, -61, -1000, 1014, -1000, -1000, -1000, -1000,
	403, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 784, 521, 520, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 519, 1163,
	518, 518, 518, -1000, -1000, -1000, 741, -1000, 695, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1839, -38, 37183, 709,
	-66, 841, -29, -1000, 1240, -1000, 1535, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2315, -1000, 2283, -1000, -1000, 2299, -19, -1000, -1000, 11705,
	-1000, -30, 1177, -1000, 36019, 2120, 2116, 2112, 1035, -1000,
	987, 2177, 41453, 2198, 436, -1000, 1838, -1000, -1000, 738,
	955, 913, 41453, 1730, -1000, 61992, -1000, 1733, 2171, 1054,
	1049, 1054, 1054, 1063, -1000, 41453, 912, 1171, 32547, -1000,
	906, -1000, -31, 2197, 87, -1000, 1837, 905, -1000, -1000,
	52347, 11705, 686, -21, 35251, 52347, 203, -1000, 22213, 485,
	22213, 485, 35635, 2211, 1979, 52347, 1686, -26, 52347, -1000,
	-1000, 1730, 1978, -1000, 1168, -1000, 1977, 1974, 2209, 527,
	2337, -1000, 1354, 1495, -1000, -1000, -1000, 53883, 933, 1973,
	773, 420, 2207, 420, 28967, -1000, 52347, -1000, 52347, -1000,
	-1000, 52347, -1000, 52347, -1000, 52347, -1000, 52347, 52347, -1000,
	52347, 32547, 32547, 32547, 3863, 33319, -67, 391, -1000, 41841,
	52347, 816, 35635, -199, 686, -1000, 686, -1000, 52347, 1864,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 52347,
	-1000, 52347, -1000, -1000, -1000, -1000, -1000, -1000, 1056, -1000,
	1862, -1000, 1861, -1000, 201, -1000, -1000, -1000, 1526, 52347,
	52347, 52347, -1000, 41453, -1000, -1000, -1000, -1000, -1000, -1000,
	61374, -1000, 410, -1000, -1000, 61374, 1083, 1692, -1000, 1692,
	-22, -1000, 59918, 1639, 52347, -1000, -1000, -1000, -1000, -1000,
	735, 667, 667, 938, 938, 938, 938, 2193, 4332, 4901,
	689, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 3320,
	354, 354, 3320, 3320, 3320, 3320, 3320, 354, 354, 354,
	5641, 5641, 5641, 61738, 61666, 6585, 22213, 22213, 904, 1282,
	447, 6167, 22213, 5562, 5562, 5562, 5562, -1000, 1161, -1000,
	-1000, -1000, -1000, 1826, 517, 23452, 23452, -1000, -1000, -1000,
	-1000, 12945, 22213, -1000, -1000, -1000, -1000, 17117, -1000, 59482,
	-242, 389, -202, -24, -1000, 22213, 22213, 22213, 387, -1000,
	384, -1000, 901, -1000, 897, 896, 891, -1000, 516, 193,
	22213, 52347, -1000, 56610, 620, -113, -1000, 1065, -1000, 22213,
	192, -1000, 1258, 514, 510, 383, -68, 728, 714, 713,
	698, 22213, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 61302, 56538, 56246, 56174, 6559, 55882, 55810, -69,
	381, -1000, 1823, -202, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 379, -1000, -74, -1000, -77, -1000, 377, -1000, 61010,
	-202, 371, 4753, -1000, 23452, 23452, 23452, -1000, 370, -1000,
	59846, -1000, 60938, 16704, 16704, 16704, 368, 60646, 22213, -202,
	-1000, 508, -82, 773, 16277, 25049, 11705, -1000, 773, 773,
	22213, -1000, 22213, 25828, 25828, 1621, 1640, 25828, -1000, -1000,
	-1000, -1000, 40297, 607, 671, 40297, -1000, 2264, 1663, -1000,
	-1000, -1000, 52347, 422, -1000, 40297, 40297, 11705, 671, -1000,
	358, 28188, -24, 188, -1000, -1000, 11705, 1650, 1650, -1000,
	1818, 52347, 2238, -1000, -1000, 61992, -1000, 626, 925, -1000,
	2297, 504, -1000, 2264, 2264, 52347, 68, 15451, -1000, 1240,
	-1000, -1000, 1150, -1000, 1145, -1000, -1000, -1000, -1000, 15451,
	-1000, 1365, 52347, 52347, 52347, -1000, -1000, 1492, 53499, 1473,
	61992, 52347, -1000, -1000, 491, 490, 1631, 1624, 52347, 52347,
	53115, 52731, 52347, 1260, 22213, 1561, 1333, 485, -1000, 485,
	489, 950, 52347, 52347, 1122, -1000, -1000, -1000, -1000, -1000,
	52347, -1000, -1000, 2289, -1000, 1054, -1000, -1000, -1000, 1054,
	1730, 1116, 52347, 32547, 765, 52347, 1184, 485, -1000, 485,
	488, 11705, 1147, -1000, 1738, -1000, 1396, -1000, -1000, 9711,
	61374, -1000, 61374, -1000, 357, -25, -1000, -1000, -1000, -1000,
	-1000, -1000, 1712, 52347, 573, 52347, 485, 52347, 66, 762,
	32547, 52347, -26, 52347, 32547, 32547, 32547, 485, 2336, 486,
	2334, -1000, 52347, 1972, 1352, 1470, 2030, 656, 52347, 1293,
	22213, 1141, -1000, 28578, 804, 52347, 1094, 59, -1000, -1000,
	-1000, 7, 52347, -1000, -1000, 148, 148, 148, -1000, 146,
	1433, -1000, -127, -127, -1000, -1000, 3863, 762, -27, 484,
	-1000, 682, 673, 27400, 32547, -83, -1000, 762, -1000, 764,
	-1000, 953, -38, -38, -1000, 1052, 1048, 52347, 11705, 52347,
	52347, 11705, 52347, -1000, -1000, -1000, -1000, 1083, -1000, 22213,
	-1000, -1000, -1000, 14611, -1000, -1000, -1000, 52347, -233, 22213,
	22213, 6057, 5688, 22213, 23452, 23452, -1000, 22213, 5460, -1000,
	-1000, -1000, -1000, -1000, 1804, 480, 22213, 61992, 4248, 4212,
	-1000, 355, 7180, 3320, -1000, 22213, -1000, 339, 15864, -1000,
	60282, -54, -54, -1000, 2312, 1552, 1245, 1181, 1067, 2285,
	9313, -202, -90, -1000, -1000, 623, 1934, -1000, 22213, 60574,
	8915, -1000, 29356, 775, 1293, -1000, -1000, 2264, -1000, -1000,
	-1000, -1000, 59124, 61992, 61992, 22213, 22213, -1000, 22213, 22213,
	22213, -1000, -1000, 22213, -1000, -1000, -1000, -1000, 1797, 22213,
	-1000, 61992, 61992, 23452, 23452, 23452, 23452, 23452, 23452, 23452,
	23452, 23452, 23452, 23452, 23452, 23452, 23452, 23452, 23452, 23452,
	23452, 23452, 1622, 23452, 2271, 2271, 2271, -1000, 1846, 1797,
	22213, 22213, 61992, 337, 326, 324, -1000, 22213, -202, 3863,
	-1000, 1765, -1000, -158, -1000, 1764, -1000, -1000, 1765, 1765,
	-91, 61374, -1000, 1621, -1000, 478, 22213, 25828, -1000, 619,
	-1000, -92, -1000, 40297, -1000, 618, -239, -1000, 668, -1000,
	422, -1000, -1000, -1000, 187, 40297, -1000, -93, -1000, 2205,
	317, 11705, -1000, -1000, -1000, -1000, -1000, 485, -38, 1285,
	-1000, 2269, -1000, 617, 315, 2264, 314, 312, -38, 52347,
	-1000, -29, -1000, -1000, -1000, -1000, -1000, -1000, 890, 888,
	-1000, 1966, -1000, 1469, -1000, 802, -1000, 1143, 22213, 26217,
	474, 473, 1242, -1000, 1962, 1433, 1960, 1433, -1000, -1000,
	750, -1000, 61374, 471, 469, -1000, -30, 1173, -1000, -1000,
	22213, 22213, 41069, -1000, 2124, -1000, 887, -1000, -1000, -1000,
	1730, 886, -1000, -1000, 1164, -1000, -1000, -1000, -1000, 22213,
	-1000, -31, 885, 762, 1796, 951, -1000, 1706, 35635, 52347,
	468, 52347, 467, -1000, -1000, 463, 52347, -1000, -1000, -1000,
	1730, -1000, 763, -1000, -1000, -1000, 2331, -1000, 814, 11705,
	52347, 1939, 1608, 656, 32935, -1000, 763, 1635, -1000, 61374,
	-1000, 1094, 14184, 2114, -99, -1000, 186, -1000, -1000, -1000,
	773, 28967, 25828, 22213, 2329, -100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 40685, 40685, 32547, 32547, 32547, 762, 52347,
	52347, -1000, -1000, 1283, 52347, -1000, -1000, -1000, -1000, -1000,
	1226, 1395, -1000, 1300, 59052, -1000, 2137, 11705, 2201, 5562,
	22213, 22213, 705, 1489, 372, 5562, 22213, 22213, 61992, 3786,
	-101, 22213, 22213, -1000, 22213, 611, 61374, 2311, 22213, 311,
	309, 307, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	306, -1000, -1000, -1000, -1000, -1000, 61374, 22213, 183, -1000,
	-1000, -1000, 55419, -1000, 22213, 296, 294, -1000, 288, 284,
	7016, 6120, 58694, 58622, 58264, 61374, 1846, 61374, -1000, -1000,
	736, 736, 1042, 1042, 1042, 1042, 2271, 239, 338, 610,
	909, 909, 909, 595, 537, 537, 909, 909, 909, 1793,
	1511, 462, 5072, -1000, -1000, 61374, 61374, 282, -1000, -1000,
	-1000, -202, 281, 1758, 2168, -1000, 25828, 1758, 1758, -1000,
	-1000, 52347, 61374, -1000, -238, -1000, 2264, -1000, -1000, 1663,
	-1000, 8115, -1000, 11705, -1000, -1000, 28188, -1000, 461, -1000,
	150, -1000, -1000, 608, -1000, -1000, 274, -1000, -1000, -38,
	52347, 52347, 52347, 1932, -1000, 3102, -1000, 58192, -102, -1000,
	2143, 2143, 22213, 178, 26217, 52347, -1000, 1270, 1720, 834,
	52347, -1000, 52347, -1000, -1000, 52347, 52347, 52347, 52347, 52347,
	-107, 61374, -53, -1000, 658, -1000, 52347, 52347, 32547, -112,
	11705, -1000, 32547, 923, 1184, 1727, -1000, 460, 26217, 459,
	52347, 35635, 2202, -1000, -1000, -1000, -1000, 457, 1874, 1347,
	455, 11705, 1611, 656, 32935, -1000, 933, 1094, -1000, -1000,
	-62, -1000, 428, 485, 52347, 2325, 1293, -1000, -88, 61374,
	-1000, 657, -1000, -117, -1000, -1000, 273, -1000, 2085, 2082,
	1421, -1000, -1000, -1000, 11705, 949, -1000, -1000, -1000, 2137,
	5562, 5562, 22213, 22213, 22213, 5562, 3786, -122, -1000, 5562,
	5562, -202, -1000, -1000, 60282, -1000, -1000, -1000, -1000, 61374,
	8517, 1227, -1000, 57834, -1000, -1000, -1000, -1000, 22213, 22213,
	-1000, -1000, -1000, -1000, -1000, 23452, 1786, 454, 61992, -1000,
	-1000, 771, 22213, 22213, 1764, 771, 771, -125, 671, -1000,
	-1000, -1000, 2264, 150, -1000, 2323, 11705, -1000, -1000, -1000,
	-1000, -1000, 52347, -1000, 52347, -1000, 11705, 52347, 1769, 1437,
	-1000, -1000, 1620, 448, 23452, 52347, 706, -1000, 1239, 26217,
	2137, 11705, 2137, 57762, -130, -131, 1411, -1000, -1000, 1401,
	22213, -1000, 61992, 1433, 1433, -133, -138, -1000, 884, 881,
	880, 52347, 15451, -1000, -1000, -1000, 854, -1000, -127, 22213,
	-1000, -1000, 1191, 26217, -140, 26217, -141, 271, 485, 26217,
	-1000, -1000, 52347, 26217, 1338, -1000, 656, 32935, -1000, 2030,
	-1000, 2049, 52347, 2104, -1000, -1000, -1000, 1635, 447, -1000,
	762, 443, 442, -143, -1000, 670, 669, -1000, -1000, 52347,
	-1000, 5562, 5562, 5562, -1000, 261, -1000, -1000, 1293, 2167,
	-1000, 57404, 57332, 3896, 23452, 61992, -146, -1000, 52347, 61374,
	-202, -1000, -1000, -1000, 40297, 596, -1000, -1000, 1304, -1000,
	-1000, -1000, 52347, 1457, -1000, -1000, 22213, 5072, 441, 22213,
	-1000, 1706, 440, -1000, -1000, -1000, -1000, -1000, -1000, 2143,
	-1000, 1142, -1000, -1000, 61374, 2139, -1000, -1000, 439, 438,
	52347, 52347, 432, 652, -1000, 430, 61374, 52347, -155, 1239,
	-156, -1000, 1706, -1000, -157, 814, -163, 52347, 32935, -1000,
	1608, 964, -164, 52347, 1094, -1000, -1000, 32547, 32547, 1421,
	-1000, 52347, -1000, 52347, -1000, -1000, 1432, 22213, -1000, -1000,
	3896, -169, -1000, -153, -1000, 2174, -1000, -1000, -1000, -1000,
	1928, 56974, 1568, 52347, 56902, 1184, 52347, 2137, 52347, 810,
	11705, 1226, 1226, -1000, -1000, 22213, 15451, 22213, 426, -1000,
	1706, 1239, 1184, 1239, 425, 1239, 424, -1000, 1611, 1015,
	-1000, 773, -1000, -1000, -170, -171, -1000, -172, -180, 259,
	23039, 23039, 23039, -202, -1000, 52347, 423, 1890, -1000, 1308,
	1268, 9, 830, -1000, -182, -1000, 422, -1000, 22213, -1000,
	-185, -1000, 801, -187, -1000, 794, -188, -1000, -190, 52347,
	1184, 1706, -1000, 1706, 26217, 1706, 26217, -1000, 28967, -1000,
	762, 762, -1000, -1000, -1000, -1000, -1000, 23865, 1281, 1081,
	59554, -1000, -1000, -1000, -1000, 52347, -1000, 1335, 1321, 1078,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1568, 61374, -1000,
	1226, 1725, -1000, 1226, 1778, -1000, -1000, -193, -1000, 1184,
	1184, -206, 1184, -209, -198, -1000, -1000, 2232, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2070, -1000, 825, 1439, 1439,
	1308, -1000, 419, -1000, 418, 1429, -1000, -1000, 1239, -1000,
	1239, -1000, 22626, -1000, 2249, -1000, -1000, 1541, -1000, -1000,
	22213, 22213, -1000, -1000, -1000, 1706, 1706, -1000, -1000, -1000,
	-1000, -211, -219, 1184, 1184, 1184, 852, -1000, -1000, -1000,
	416, 22213, -222, 1184, -1000,
}
var sqlPgo = [...]int{

	0, 2778, 2777, 1881, 2774, 2773, 2772, 2771, 2769, 2768,
	2767, 2758, 2756, 2753, 2752, 2749, 2746, 2745, 2743, 2742,
	2741, 2739, 2735, 2734, 2733, 2732, 2730, 2728, 2727, 2726,
	2724, 2723, 2722, 2721, 2720, 2719, 2718, 2716, 2715, 2713,
	2712, 2711, 2709, 2707, 2706, 16, 2704, 2703, 2702, 2701,
	2700, 2699, 2697, 2696, 2693, 2691, 2690, 2689, 2688, 2684,
	2672, 2670, 2666, 2665, 2662, 2661, 2654, 2650, 2649, 2647,
	2645, 2644, 2643, 2642, 2641, 101, 2640, 2639, 2638, 2637,
	2636, 2635, 2634, 2630, 2629, 2628, 2627, 2626, 2625, 2623,
	126, 2622, 2621, 2620, 2619, 2618, 2613, 2611, 2610, 2609,
	2607, 174, 2606, 2605, 2604, 2603, 2601, 2600, 2599, 2598,
	2597, 2596, 2595, 2593, 2592, 2590, 2589, 2588, 2587, 2586,
	2585, 2584, 2583, 2581, 2580, 2579, 2578, 2577, 187, 133,
	2575, 2574, 2573, 2570, 2569, 2567, 72, 70, 44, 2566,
	68, 120, 173, 4855, 167, 2565, 2564, 2562, 2561, 2560,
	30, 122, 130, 115, 116, 137, 2559, 2558, 67, 33,
	24, 19, 84, 2557, 2556, 2555, 2447, 82, 2553, 2550,
	186, 166, 2547, 447, 2544, 22, 131, 65, 92, 132,
	45, 2542, 107, 14, 2540, 111, 106, 2539, 110, 56,
	23, 2868, 102, 189, 64, 79, 148, 147, 149, 146,
	128, 212, 2536, 175, 125, 144, 2535, 2534, 2533, 62,
	138, 12, 7, 140, 10, 2532, 3, 2530, 5, 2529,
	2526, 2521, 2519, 20, 114, 54, 55, 2516, 29, 221,
	150, 2512, 157, 2511, 74, 2507, 176, 143, 139, 57,
	162, 2503, 2492, 2491, 2488, 2482, 78, 11, 76, 2479,
	2473, 98, 168, 2472, 31, 124, 87, 109, 184, 156,
	91, 155, 164, 2471, 2470, 2469, 160, 2468, 154, 95,
	2466, 2465, 26, 51, 165, 28, 2463, 2460, 112, 2459,
	142, 2457, 2456, 2455, 188, 121, 151, 13, 52, 90,
	25, 163, 103, 71, 69, 2453, 3407, 1491, 1341, 2452,
	93, 58, 35, 88, 108, 182, 59, 2451, 2450, 1456,
	2449, 2444, 2443, 2442, 123, 2439, 2438, 2437, 97, 34,
	85, 2436, 99, 36, 113, 185, 63, 152, 136, 172,
	127, 2435, 134, 96, 2434, 141, 179, 66, 2433, 1076,
	2431, 178, 2429, 2428, 2426, 2425, 32, 2424, 2418, 697,
	2417, 94, 2416, 2415, 129, 159, 41, 83, 2414, 37,
	100, 2413, 135, 80, 2412, 1187, 21, 0, 4346, 3947,
	2411, 145, 86, 2410, 2409, 2407, 2406, 27, 8, 2,
	4, 9, 6, 440, 370, 2405, 2404, 38, 75, 104,
	2403, 183, 161, 2402, 2401, 2400, 39, 2396, 17, 2389,
	15, 2388, 2386, 18, 1, 2385, 2384, 171, 2383, 2382,
	2381, 2378, 2232, 2377, 181, 2376, 89, 2374, 117, 118,
	2370, 2369, 2367, 2366, 2071, 2362, 2361, 60, 73, 2359,
	2358, 119,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 414, 414, 18, 28, 19, 29, 13, 416,
	416, 416, 416, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 413, 413, 154, 154, 153, 149,
	149, 417, 417, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 365, 365, 366, 366, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 129, 129, 49, 49, 49, 49,
	49, 49, 49, 49, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 60,
	60, 50, 409, 409, 237, 237, 334, 334, 62, 62,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	336, 336, 74, 74, 307, 307, 77, 77, 267, 267,
	78, 78, 78, 78, 78, 79, 79, 79, 79, 89,
	89, 89, 89, 412, 412, 230, 230, 170, 170, 170,
	170, 84, 84, 84, 84, 85, 85, 85, 86, 86,
	134, 134, 95, 95, 95, 95, 94, 94, 94, 94,
	94, 94, 40, 40, 40, 41, 41, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 45, 45, 97, 97,
	418, 418, 99, 96, 96, 96, 98, 98, 98, 98,
	100, 101, 101, 101, 101, 101, 101, 102, 102, 359,
	359, 245, 245, 357, 357, 358, 358, 207, 207, 207,
	207, 207, 208, 208, 208, 364, 364, 364, 364, 364,
	364, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 119, 119,
	119, 128, 128, 128, 128, 128, 128, 128, 121, 121,
	121, 112, 112, 104, 104, 104, 104, 108, 108, 108,
	108, 108, 105, 105, 109, 109, 111, 111, 113, 113,
	113, 113, 113, 113, 106, 106, 106, 106, 115, 115,
	115, 115, 114, 114, 124, 124, 124, 124, 124, 124,
	321, 321, 120, 120, 120, 120, 123, 123, 123, 123,
	118, 118, 118, 122, 122, 125, 125, 125, 125, 107,
	107, 107, 421, 421, 421, 126, 126, 117, 117, 127,
	127, 127, 127, 127, 127, 127, 116, 116, 116, 415,
	415, 110, 410, 410, 407, 407, 407, 407, 407, 407,
	407, 408, 408, 411, 411, 82, 82, 82, 55, 55,
	56, 56, 209, 209, 210, 210, 289, 289, 289, 289,
	211, 211, 156, 156, 156, 214, 215, 215, 212, 212,
	213, 213, 213, 217, 217, 216, 219, 219, 218, 288,
	375, 375, 376, 376, 376, 376, 376, 376, 376, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 373,
	373, 373, 374, 371, 371, 372, 372, 372, 372, 422,
	422, 287, 287, 223, 223, 378, 378, 378, 378, 379,
	379, 379, 379, 379, 382, 381, 380, 380, 380, 380,
	380, 317, 317, 317, 59, 59, 59, 256, 256, 255,
	255, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 131, 131, 57, 57, 57,
	162, 162, 54, 54, 54, 58, 58, 61, 61, 61,
	61, 61, 61, 53, 53, 53, 53, 53, 272, 272,
	272, 271, 271, 228, 228, 323, 323, 323, 174, 174,
	175, 175, 150, 150, 150, 21, 23, 23, 16, 16,
	16, 16, 16, 16, 31, 31, 32, 32, 27, 27,
	419, 419, 420, 420, 83, 83, 87, 87, 87, 93,
	93, 130, 130, 130, 130, 130, 130, 130, 35, 35,
	35, 35, 47, 47, 47, 47, 91, 425, 425, 425,
	92, 92, 424, 424, 169, 169, 169, 169, 171, 171,
	284, 284, 285, 285, 426, 426, 286, 286, 286, 164,
	163, 165, 165, 52, 52, 52, 158, 158, 159, 159,
	160, 160, 161, 161, 427, 427, 80, 80, 80, 133,
	133, 203, 203, 280, 280, 280, 224, 224, 180, 180,
	283, 283, 281, 281, 281, 254, 254, 254, 132, 132,
	233, 233, 247, 247, 248, 248, 331, 331, 249, 90,
	90, 143, 143, 141, 141, 141, 141, 141, 141, 142,
	142, 142, 144, 144, 144, 144, 144, 144, 144, 147,
	147, 147, 147, 148, 148, 148, 146, 146, 389, 389,
	389, 391, 391, 392, 388, 388, 390, 390, 423, 423,
	258, 258, 258, 221, 222, 220, 220, 428, 428, 226,
	226, 225, 227, 227, 322, 322, 322, 252, 252, 252,
	252, 275, 275, 273, 273, 274, 274, 276, 276, 277,
	277, 277, 278, 278, 279, 279, 251, 251, 303, 303,
	145, 145, 145, 232, 232, 232, 234, 234, 294, 294,
	294, 295, 295, 293, 293, 293, 293, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 325, 325, 235, 235,
	326, 282, 282, 405, 405, 405, 406, 406, 320, 320,
	327, 327, 327, 327, 327, 327, 318, 318, 319, 319,
	332, 333, 333, 261, 261, 261, 261, 259, 259, 260,
	260, 328, 328, 328, 328, 253, 253, 329, 329, 329,
	290, 290, 337, 337, 337, 337, 351, 231, 231, 231,
	429, 429, 338, 338, 338, 338, 338, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 341,
	341, 341, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	350, 350, 350, 350, 350, 342, 342, 347, 347, 348,
	348, 348, 343, 344, 349, 349, 349, 349, 430, 430,
	353, 353, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 346, 268, 268, 268, 268, 268, 268, 268, 268,
	268, 268, 268, 268, 268, 268, 269, 269, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 298, 298, 298, 298, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 383, 383, 383, 383, 383, 383, 383, 383,
	386, 386, 387, 387, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 393, 393, 394, 394, 396, 396, 397,
	397, 398, 399, 399, 399, 400, 401, 401, 395, 395,
	402, 402, 402, 402, 403, 403, 404, 404, 404, 404,
	404, 309, 309, 310, 310, 316, 316, 316, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 172, 172, 172, 172, 172, 243,
	243, 241, 241, 241, 244, 244, 242, 242, 240, 240,
	239, 239, 306, 306, 304, 304, 308, 308, 262, 262,
	352, 352, 352, 352, 352, 352, 352, 263, 263, 263,
	270, 264, 264, 265, 265, 265, 265, 265, 300, 301,
	266, 266, 266, 302, 302, 311, 315, 315, 314, 313,
	313, 312, 312, 291, 291, 292, 292, 250, 250, 431,
	431, 246, 246, 330, 330, 330, 330, 205, 205, 236,
	236, 204, 204, 198, 198, 199, 199, 199, 199, 229,
	229, 354, 354, 354, 355, 356, 305, 190, 189, 177,
	178, 188, 187, 186, 176, 179, 183, 184, 185, 181,
	182, 194, 193, 192, 191, 335, 200, 200, 201, 201,
	201, 202, 202, 202, 202, 173, 173, 195, 195, 196,
	197, 197, 166, 166, 166, 167, 167, 168, 168, 363,
	363, 361, 361, 361, 362, 362, 362, 362, 360, 360,
	360, 360, 360, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 1, 2, 1, 2, 7,
	3, 6, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 3, 5, 2, 3, 0, 3, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 4, 4, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 2, 3, 3, 3, 6, 4, 2, 3,
	4, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	4, 3, 1, 1, 1, 2, 3, 2, 3, 6,
	6, 7, 9, 6, 3, 4, 5, 5, 3, 1,
	1, 5, 2, 0, 1, 1, 1, 1, 3, 2,
	2, 2, 1, 2, 0, 3, 3, 2, 8, 11,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 4, 7, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 7, 3, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 6, 3, 6, 7, 6,
	5, 3, 4, 13, 16, 13, 16, 4, 2, 2,
	0, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 427, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 79,
	67, 118, 101, 105, 124, 148, 267, 293, 302, 287,
	-98, -99, 320, -35, -47, -92, -91, -5, -11, 26,
	37, -37, -38, -39, 52, -57, -54, -51, -60, 81,
	-390, -65, -68, -70, 110, 123, 158, 260, -85, -86,
	289, 291, -42, -41, 119, -141, -143, -96, -97, -134,
	-104, -105, -106, -107, -108, -109, -110, -111, -112, -113,
	-114, -115, -116, -117, -118, -119, -120, -121, -122, -123,
	-124, -125, -126, -127, 323, 367, 38, 332, 68, 113,
	297, 21, -6, -7, -8, -9, -10, -12, -23, -50,
	-52, -53, -55, -56, -61, -58, -59, -389, -66, -67,
	-69, -71, -72, 288, -144, -142, 424, 377, -14, -18,
	-19, -15, -17, -20, -16, -24, -28, -29, -26, -25,
	-27, -30, -31, -32, -33, -21, -22, -13, 395, 403,
	-147, -145, -146, -148, 309, 385, 345, 428, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, -191, -195, -196,
	-197, -166, 4, -367, -369, 21, 22, 23, 24, 26,
	36, 37, 38, 41, 43, 44, 47, 48, 49, 50,
	51, 52, 53, 56, 61, 66, 67, 68, 69, 70,
	75, 72, 73, 74, 77, 79, 80, 83, 84, 92,
	93, 94, 95, 96, 97, 101, 103, 105, 108, 109,
	110, 112, 114, 115, 118, 119, 122, 120, 351, 353,
	121, 123, 124, 134, 135, 136, 138, 139, 141, 143,
	147, 149, 153, 155, 156, 157, 158, 159, 160, 172,
	167, 173, 177, 180, 179, 181, 182, 183, 174, 188,
	191, 192, 193, 195, 196, 199, 200, 201, 204, 203,
	206, 209, 210, 213, 214, 217, 219, 222, 223, 226,
	224, 225, 228, 229, 231, 230, 238, 239, 241, 242,
	245, 246, 249, 252, 255, 256, 257, 258, 259, 260,
	261, 263, 265, 267, 269, 270, 271, 272, 273, 274,
	276, 277, 279, 280, 281, 282, 283, 287, 285, 286,
	288, 289, 290, 291, 293, 295, 296, 297, 298, 300,
	321, 322, 334, 302, 303, 304, 305, 306, 307, 308,
	312, 316, 313, 314, 315, 310, 311, 317, 318, 320,
	323, 325, 327, 328, 331, 332, 333, 335, 338, 339,
	340, 336, 337, 330, 343, 344, 346, 347, 348, 349,
	350, 352, 354, 359, 362, 363, 367, 368, 370, 371,
	374, 375, 376, 381, 377, 379, 382, 383, 384, 390,
	389, 396, 397, 399, 400, 401, 31, 39, 40, 42,
	45, 57, 58, 59, 62, 98, 99, 117, 125, 126,
	137, 150, 152, 161, 162, 163, 178, 184, 186, 166,
	207, 236, 237, 250, 254, 264, 266, 275, 299, 326,
	341, 356, 357, 358, 364, 365, 385, 386, 387, 391,
	398, 243, -185, 2, -166, -166, 267, 25, 2, 25,
	263, 311, 347, 349, 2, 187, 2, -412, -230, 2,
	25, -170, -166, 81, 148, 309, -185, 2, -412, -230,
	24, 2, -166, 2, -171, 2, 302, -166, 427, 214,
	61, 299, 317, -101, 363, -100, 356, 304, -102, -359,
	2, 226, -166, 427, 427, 427, 427, 2, 345, 258,
	389, 310, 378, 94, 272, 171, -407, 2, 4, -369,
	-367, -199, -198, 345, 94, -197, -166, 417, -196, 427,
	427, 427, 2, 192, 193, 271, 270, 317, 318, 427,
	427, 427, 2, 345, 333, 56, 310, 378, 295, 389,
	368, 108, -271, 94, 373, 103, 177, 376, 375, 427,
	427, 2, 389, 310, 345, 171, 94, 378, 295, -75,
	2, 424, 28, 320, -140, 345, 2, -166, 192, 193,
	2, 427, 427, -407, 2, 192, 193, 2, 306, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 2, -128, 317, 333, 156, 37,
	61, 25, 66, 95, 149, 171, 172, 200, 76, 77,
	270, 214, 193, -321, 318, 346, 305, 343, 363, 81,
	379, 296, 401, -415, 120, 4, 94, 226, 319, 356,
	70, 350, 351, -423, 2, 345, -424, 2, 363, 363,
	2, -424, 2, -424, 2, -169, 2, 363, 360, -425,
	363, 398, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, -142, -144, -143, 427, 427, 427,
	427, 427, -128, 317, 2, 61, 25, -225, -226, 372,
	185, 116, 248, -141, -143, 2, -389, -357, 2, -296,
	243, -298, 415, 416, 410, 232, 402, -309, 100, 221,
	220, -299, -311, 117, 299, -244, 8, 9, 5, 6,
	7, -173, -339, -305, -346, 366, 127, 235, -202, 430,
	10, 424, -386, -143, -310, 32, 54, -361, -201, -340,
	-348, -344, -345, -429, 43, 50, 49, 354, 225, 312,
	313, 327, 314, 315, 41, 381, 167, 241, 242, 179,
	4, 186, -200, -166, -383, -384, -367, -368, 178, 184,
	180, 326, 181, 182, 183, 40, 275, 138, 139, 137,
	109, 99, 98, 237, 45, 44, 42, 386, -349, 96,
	356, 357, 358, 359, 195, 196, 64, 86, 87, 85,
	90, 89, 91, 88, 319, 378, 55, 31, 161, 162,
	166, 236, 163, 62, -385, 337, 82, 128, 146, 176,
	164, 189, 190, 194, 208, 211, 227, 234, 251, 253,
	294, 324, -430, 387, 57, 58, 125, 126, 150, 207,
	254, 264, 341, 364, 365, -391, 276, -392, -185, -391,
	427, 427, 429, 427, -220, -221, -222, 2, 25, 106,
	424, 2, -324, 2, 422, -328, -143, 202, -327, 424,
	-325, -191, 244, -387, 300, -383, -384, -173, -166, -201,
	4, 221, 220, -3, -223, 424, 426, 345, 65, -267,
	424, -166, 25, -140, 243, 360, 429, -307, 424, 243,
	145, 245, -166, 2, 321, 2, 424, -101, 59, 363,
	-285, 2, -286, -163, -164, -165, 191, 269, 274, 401,
	-357, -418, 145, 407, 360, -357, -245, 426, 2, -328,
	161, -191, 2, -189, -360, 4, -367, -369, -368, -370,
	64, 25, 27, 28, 29, 30, 32, 33, 34, 35,
	46, 54, 55, 60, 63, 65, 76, 81, 85, 86,
	88, 87, 89, 90, 91, 100, 102, 104, 106, 107,
	111, 113, 116, 127, 129, 142, 144, 145, 148, 151,
	154, 165, 171, 175, 185, 187, 202, 205, 212, 215,
	216, 232, 233, 235, 240, 243, 244, 247, 248, 262,
	268, 278, 292, 309, 319, 329, 342, 345, 355, 360,
	361, 366, 372, 373, 378, 380, 388, 392, 393, 394,
	395, 2, -328, 161, 2, -192, 161, -328, -195, 2,
	-365, 161, -363, 10, -362, 5, 4, -367, -369, -368,
	2, -176, -166, 2, -188, -360, 2, -204, 161, -191,
	360, 429, -236, -198, -199, -229, -166, 426, -296, 2,
	-90, 2, -296, 161, 2, -90, 161, 2, -296, 161,
	2, -90, 161, 2, 2, -191, 161, -181, 2, -166,
	142, -192, 161, 2, -195, -365, 161, 2, -365, 161,
	2, -194, 2, -191, -193, -195, -193, 171, 188, -176,
	161, 2, 145, 2, 187, 2, 187, 2, -329, 2,
	-328, -238, 161, 2, -191, -238, 161, 2, -238, 161,
	2, -205, 161, 2, -204, -176, 161, 2, -366, 161,
	2, -365, -366, 161, 2, -336, 2, -335, -362, 385,
	424, 317, 424, -365, -191, -296, -90, 145, -296, -90,
	2, 94, 345, -128, 2, 142, 380, 2, 8, 2,
	-365, 273, 134, 2, 321, 2, 270, 318, 61, 401,
	145, 2, 2, -410, 2, 243, 145, 2, 145, 2,
	145, 2, 145, 2, 145, 2, 2, 270, 318, 2,
	362, 201, 121, 2, 145, 2, 145, 2, 5, 2,
	191, 269, 334, 2, -191, -421, 2, 345, 389, 310,
	2, 2, 72, 73, 145, 2, 145, 401, 2, -253,
	-328, -284, -285, -284, 360, -171, -225, -226, -128, 321,
	2, -252, -273, -274, 212, 129, 240, -258, 25, 106,
	-258, -258, 48, 425, 425, 11, 12, 63, 36, 415,
	416, 417, 418, 140, 419, 420, 413, 414, 412, 405,
	406, 409, 197, 198, 78, 408, 407, 71, 218, 301,
	130, 131, 132, 133, 284, 168, 169, 170, 14, 15,
	16, 29, 247, 211, 402, 164, 324, 410, 17, 18,
	19, 189, 190, 234, 39, 165, -172, -206, -296, -296,
	-296, -296, -296, 253, -250, -291, 422, -143, 424, 424,
	424, 5, 424, 5, -356, 8, -143, -296, -309, 425,
	-242, 424, -143, -309, -304, 424, 299, 422, -312, -296,
	426, -393, 396, -342, 424, 266, -341, 424, -341, -341,
	390, 397, 403, 397, 403, 142, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 390,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 429,
	-391, -223, 424, -246, -330, -296, 417, -246, -246, 243,
	-239, -296, 82, -261, 194, 227, 146, 208, 294, 176,
	-356, -75, -293, 430, -320, 403, -143, -325, -166, -143,
	-327, 424, -324, -320, 417, -191, 424, 145, 424, 426,
	145, -229, -360, -191, -200, -166, -201, -239, -365, -407,
	-229, -170, 33, -306, -337, -338, -350, -339, -347, -343,
	-346, 280, 281, 279, 283, 282, 43, 50, 49, 354,
	225, 312, 313, 327, 314, 315, 41, 381, 167, 241,
	242, 179, 4, 42, 386, -349, 186, 178, 184, 180,
	326, 181, 182, 183, 40, 275, 138, 139, 137, 109,
	99, 98, 237, 45, 44, 96, 356, 357, 358, 359,
	195, 196, 387, 337, 57, 58, -407, -229, 142, -359,
	-239, 33, -285, 2, -426, 429, 210, -208, 217, 231,
	155, 244, 399, -364, 5, 4, -305, -317, 100, 214,
	-346, 9, 416, -354, 8, 415, -358, -357, 84, 426,
	-360, -152, 285, -151, 23, 26, 110, 383, 122, -213,
	173, 258, 117, 330, -414, -416, 303, 352, 353, 74,
	238, 285, 117, -255, -257, 33, 92, 229, 255, 51,
	159, 220, 221, 332, 391, 117, 285, 395, 117, -416,
	285, -416, -154, 330, -414, -416, 303, 285, -153, -213,
	117, 430, -365, -236, 429, 429, -360, 417, 117, 117,
	117, 117, 424, -223, 232, 243, -409, -237, 345, -191,
	-256, -255, 232, -162, -388, 395, 232, 232, -223, 33,
	424, 2, -178, 161, 2, -167, -166, 171, -388, 232,
	-329, -203, -191, -203, 320, -185, 33, -155, 429, 53,
	290, 117, -155, 117, -155, 117, -155, 429, 117, -155,
	117, 429, 117, 117, 425, 429, -336, -365, -138, 395,
	145, 81, 424, -366, -176, 2, -191, 2, 345, 195,
	-365, -365, -359, 25, 322, 2, 73, -191, -411, 142,
	-408, 295, -407, -191, -191, -191, -191, -191, 142, 2,
	362, 2, 362, 2, -166, -166, 210, -191, 142, 345,
	171, 345, -155, 429, -171, -252, -359, -274, -273, -276,
	-296, 25, -279, 136, 228, -296, -298, -142, -142, -142,
	-227, -322, -296, 268, 171, -351, -337, -337, -190, -360,
	356, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, 211, 164, 324, 39,
	165, -296, 360, -296, -296, -296, -296, 224, 232, 235,
	366, 127, 374, 106, 238, -431, 342, 35, -302, -143,
	-243, 424, -316, 30, 329, 25, -309, 424, -291, -296,
	-292, -240, -239, -239, 425, 388, 25, 106, 417, 2,
	8, -268, 400, 223, 97, 157, 222, -269, 308, 425,
	429, 33, 425, -296, -240, -308, -304, -315, -314, 392,
	-360, 417, -394, 135, 151, 8, -356, 356, 356, 356,
	356, 424, 425, 2, 425, 2, 425, 2, 425, 2,
	425, 2, -296, -296, -296, -296, -296, -296, -296, -239,
	-262, 2, -352, -239, 4, 400, 223, 97, 157, 222,
	308, -262, 2, -239, 2, -239, 2, -263, 2, -296,
	-239, -264, -297, -298, 415, 416, 410, -309, -265, 2,
	-296, -240, -296, 46, 205, 361, -266, -296, 145, -239,
	-392, 33, -239, -232, 429, 145, 33, 4, -232, -232,
	424, 425, 429, 194, 194, -324, -261, 194, -259, 251,
	-259, -259, -405, 424, 423, -320, -177, 422, 431, -360,
	-319, -318, 33, -185, 249, -320, -320, 426, 425, -319,
	-191, 424, -239, -360, 335, 425, 426, 189, 189, 425,
	-138, 360, 395, -75, 425, 429, -231, 32, 422, -268,
	424, -353, 390, 424, 424, 145, -230, -418, 425, 363,
	-286, -207, 274, 328, 286, 316, 9, 8, 8, 429,
	-360, 429, 360, -419, 76, 65, -288, 161, 65, -371,
	-179, 76, -372, -166, 60, 373, 268, 144, -419, 76,
	-419, 76, 76, 320, 333, 48, -328, 36, -90, 206,
	145, 401, 345, 360, -328, -257, -337, 92, 220, 221,
	48, -355, -354, 416, -355, 48, -355, -355, -355, 395,
	-192, -328, 360, 259, -365, 360, 429, 36, -90, 206,
	145, 360, -204, -177, -333, -332, 404, -198, -166, 426,
	-296, -90, -296, -90, -209, -210, -166, -289, -288, -373,
	-374, -371, 188, 171, 373, 128, 33, 117, -229, -334,
	187, 429, -237, 117, 259, 117, 117, 33, 424, 114,
	272, 2, 243, 232, -178, 161, -158, 348, 117, -290,
	393, -280, -90, 424, 100, 33, -280, -247, -248, -331,
	-249, -179, 424, -185, -191, -238, -238, -238, -204, -205,
	-176, -365, -366, -366, -75, -335, 425, 425, -137, 246,
	-136, -166, 5, -140, 380, -210, -138, -332, -333, -333,
	-191, 142, -229, -229, 317, 142, 142, 426, 272, 94,
	345, 258, 171, -191, -204, -191, -328, -277, -354, 424,
	-278, 299, 300, 429, -150, 34, 104, 199, -191, 401,
	115, -296, -296, 360, -431, 342, -302, 115, -296, 224,
	235, 366, 127, 374, 106, 238, 145, 424, -297, -297,
	425, -241, -296, -296, 423, 433, 425, -428, 429, -225,
	-296, -239, -239, 425, 425, 360, 360, 360, 360, 424,
	426, -239, -229, 423, 423, 429, -313, -314, 111, -296,
	426, -399, 252, 424, 424, 425, 425, 429, 401, 401,
	401, 401, -296, 33, 429, 429, 429, 425, 429, 429,
	429, 425, 425, 145, 425, 425, 425, 425, -270, 262,
	425, 11, 12, 415, 416, 417, 418, 140, 419, 420,
	413, 414, 412, 405, 406, 407, 71, 218, 301, 14,
	15, 16, 189, 165, -297, -297, -297, 425, -300, -301,
	145, 142, 33, -266, -266, -266, 425, 145, -239, 424,
	425, -290, -330, -234, 2, -324, -187, -360, -290, -290,
	-239, -296, -324, -324, -260, 380, 243, 194, -324, -318,
	425, -406, -356, -320, -319, -356, -295, -294, 143, 230,
	-185, -223, -319, -319, -360, -320, 425, -235, -326, -387,
	-428, 426, -360, -129, 5, 235, -129, 145, -229, 24,
	-337, 422, 423, 8, 8, 424, -356, -356, -229, 145,
	-357, -285, 371, 69, 274, -357, -151, -191, -179, -186,
	-166, 232, -288, 161, -157, 232, -337, -186, 424, 424,
	199, 199, -179, -186, 161, -179, 161, -186, -186, -413,
	274, 239, -296, 213, 272, 233, -152, 285, -90, -90,
	424, -418, 380, 105, -191, -194, 285, -200, -355, -355,
	-255, 285, -192, -365, 395, -176, -153, -90, -90, 424,
	-177, -154, 285, -135, 160, 238, 417, 425, 429, 171,
	-178, 171, -184, -167, -90, -191, 145, -138, -365, -191,
	-192, -365, -365, -365, -90, 2, 424, 2, -191, 117,
	243, 232, -159, 112, -427, 407, -176, -226, -225, -296,
	-254, -283, 292, 243, -224, -180, -179, 385, -185, -254,
	-233, 429, 145, 407, 426, -224, -155, -155, -155, -155,
	-155, -75, -138, 429, 424, 407, 407, 424, -365, -365,
	425, -138, -43, 395, 345, 317, 317, -166, -188, -176,
	-191, -189, -204, -278, -296, -322, -191, 430, -296, -296,
	115, 115, -296, -297, -297, -296, 115, 145, 424, -296,
	-306, 29, 29, 425, 429, -292, -296, 425, 388, -428,
	-428, -428, 5, 223, 157, 222, -269, 222, -269, -269,
	8, 417, -360, 425, -304, 113, -296, 355, -360, 417,
	-400, -182, 424, -166, 393, -225, -356, 425, -351, -337,
	-296, -296, -296, -296, -296, -296, -300, -296, -351, -337,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, 106,
	232, 238, -297, -301, -300, -296, -296, -337, 425, 425,
	425, -239, -75, -251, 151, -333, 429, -251, -251, 425,
	-260, 424, -296, -324, 423, 425, 429, -319, 423, 429,
	432, 407, -223, 426, -318, 425, 429, -282, 33, 425,
	-360, -90, 245, 8, 423, 425, -356, 425, 425, -229,
	360, 360, 117, 232, 382, -375, -372, -296, -228, -323,
	-179, -387, 424, -166, 424, 424, -149, 110, 320, -420,
	117, -155, 117, -155, 399, 424, 424, 360, -419, 76,
	-239, -296, -139, 100, -359, -416, 360, 360, 259, -239,
	360, -138, 145, 344, -211, 174, -289, -167, 424, -178,
	424, 424, -223, -191, -256, -162, 2, -272, 380, -177,
	-191, 117, -160, 204, -427, -363, -388, -275, -273, -254,
	-246, 233, 75, 425, 429, 426, -290, -248, -234, -296,
	2, 425, -136, -137, -365, -365, -365, -138, -140, -140,
	246, -191, -215, -214, 258, 238, 244, 425, -150, -177,
	-296, -296, 115, 29, 29, -296, -296, -306, 425, -296,
	-296, -239, 423, 5, -296, 425, 425, 425, 425, -296,
	426, -401, -166, -296, 425, 425, 425, 425, 429, 429,
	425, 425, 425, 425, -301, 145, 106, 238, 424, 425,
	425, -303, 154, 48, -324, -303, -303, -229, -293, -356,
	-294, -177, 422, -360, -326, 424, 426, 423, 425, -179,
	-186, -288, 117, -376, 76, -377, 63, 128, 81, 232,
	235, 373, 268, 60, 100, 278, 33, 425, 425, 429,
	-175, 63, -175, -296, -228, -229, 232, 339, 100, 232,
	100, 93, 368, -179, -186, -229, -229, -191, -179, -186,
	425, 429, 407, -194, -192, -365, 425, -177, -366, 356,
	-212, -213, 165, 424, -228, 424, -229, -209, 33, 424,
	147, 47, 243, 424, -177, -161, 203, -427, -363, -158,
	-254, -281, 424, 243, -90, -180, 2, -226, 407, 425,
	425, 93, 93, -44, -45, 171, 76, 261, -189, 345,
	-150, -296, -296, -296, 425, -428, -360, 417, -395, 258,
	425, -296, -296, -297, 145, 424, -306, -396, 394, -296,
	-239, -396, -396, 425, -320, -356, 2, -288, -186, -190,
	-183, -166, 128, 161, 235, 199, 424, -297, -191, 424,
	2, -287, -422, 80, 340, -323, -150, -190, -150, 425,
	425, 425, 235, 235, -296, -337, -155, -155, 425, 425,
	360, 360, 360, -359, -357, 360, -296, 256, -228, 425,
	-228, 425, 425, -90, -228, -191, -228, 243, -427, -363,
	-159, 107, -229, 76, -275, -302, -138, 424, 424, 429,
	25, 424, 25, 424, -191, 425, -226, 48, 425, 425,
	-297, -306, 425, -397, -398, -182, -319, 423, -377, -183,
	232, -296, -168, 424, -296, -211, 424, -175, 278, -174,
	63, 424, 424, -179, -186, 424, 407, 424, -191, 425,
	-287, 425, -211, 425, -272, 425, -191, -363, -160, 375,
	233, 425, -186, -254, -366, -366, -45, -229, -229, -402,
	272, 300, 153, -239, 425, 429, 33, 117, 425, -378,
	219, -166, 425, -212, -229, -150, -191, -417, 380, -190,
	-217, -216, -214, -219, -218, -214, -239, -357, -239, 424,
	-211, -287, -212, -287, 424, -287, 424, -161, 320, -290,
	425, 425, 425, 425, 425, -403, -404, 39, 370, 84,
	-296, -403, -403, -398, -400, 128, -379, -382, -381, 243,
	146, 257, 325, 425, 339, 391, 425, -223, -296, 425,
	429, 385, 425, 429, 385, 425, 425, -229, -212, -211,
	-211, -228, -211, -228, -247, -138, -138, -404, 265, 141,
	299, 265, 141, -183, -381, 243, -382, 243, 375, 103,
	-378, -216, 165, -218, 145, 425, -212, -212, 425, -212,
	425, -290, 29, -380, 229, 290, 53, 320, -380, -379,
	424, 424, -156, 53, 290, -287, -287, -404, 22, 235,
	100, -239, -239, -211, -211, 425, 425, -212, -212, -212,
	360, 424, -239, 425, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 280,
	281, 283, 284, 285, 287, 288, 289, 291, 293, 295,
	296, 298, 300, 301, 302, 303, 304, 306, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 354, 0, 751, 753, 755, 757, 29, 30, 0,
	0, 169, 171, 173, 0, 196, 198, 200, 201, -2,
	0, 236, 237, 239, 0, -2, 0, 0, 341, 343,
	0, 0, 362, 363, 0, 839, -2, 356, 358, 360,
	421, 423, 425, 427, 429, 431, 433, 434, 436, 438,
	440, 442, 444, 446, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 466, -2, -2, -2, 0, -2, -2,
	-2, 769, 33, 35, 37, 39, 41, 43, 61, 204,
	205, 207, 209, 211, 214, 215, 217, 876, 242, 244,
	246, 248, 250, 0, -2, 890, 0, 0, 45, 46,
	47, 48, 49, 50, 51, 68, 69, 70, 71, 72,
	73, 74, 54, 56, 57, 63, 64, 66, 0, 0,
	852, 854, 856, 858, -2, 0, 0, -2, 9, 11,
	13, 15, 17, 19, 21, 23, 25, 282, 286, 290,
	292, 294, 297, 299, 305, 307, 309, 644, 1464, 1477,
	1478, 1479, 1482, 1483, 1484, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 0, 319, 317, 1458, 320, 1631, 322, 324, 230,
	231, 232, 233, 234, 235, 0, 152, 0, 334, 328,
	333, 335, 337, 338, 339, 340, 315, 313, 0, 334,
	1506, 332, 749, 750, 744, 745, 1661, 779, 353, -2,
	-2, 1756, -2, 384, -2, 391, 1759, 1663, 394, 0,
	396, -2, 399, 752, 754, 756, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, -2, -2,
	-2, -2, 0, 0, 1539, 1435, 1479, 1438, 1433, 170,
	172, 174, 175, 0, 0, 0, 0, 0, 0, 197,
	199, 202, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 238,
	240, 241, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 0, 0, 0, 0, 0, 150, 143, 0, 0,
	577, 342, 344, 0, 142, 0, 0, 748, 0, 357,
	359, 361, 422, 424, 426, 428, 430, 432, 435, 437,
	439, 441, 443, 445, 447, 449, 451, 453, 455, 457,
	459, 461, 463, 465, 467, 468, 0, 0, 0, 0,
	0, 472, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 471, 473, 474, 475, 0,
	520, 559, 560, 0, 686, 878, 781, 759, 772, 781,
	761, 762, 763, 764, 765, 770, 771, 774, 0, 766,
	767, 768, 34, 36, 38, 40, 42, 44, 206, 208,
	210, 212, 216, 218, -2, 850, 851, 243, 245, 247,
	249, 251, 345, 0, 347, 0, 472, -2, 0, 882,
	882, 882, 0, 0, 851, 849, 0, 350, 351, 403,
	404, 1098, 0, 0, 0, 0, 0, 1333, 1182, -2,
	-2, 1214, 1216, 1735, 1756, 1332, 1218, 1219, 1220, 1221,
	1222, 0, 0, 1225, 0, 1227, 1228, 1229, 1230, 0,
	1232, 0, 1236, 1237, 1238, 0, 1412, 1475, -2, 1007,
	1008, 1009, 1010, 1011, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1471, 1466, 1304, 1251, -2, 1493, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1547, -2, -2, -2, -2, -2, -2, -2, 1063, -2,
	-2, -2, -2, -2, -2, -2, 1769, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 0, 1724, 1741, 1742,
	1747, 1749, 1743, 1732, 1274, -2, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1782, 1783, 1784, 1785,
	1786, 1787, 1064, -2, -2, -2, 1736, 1737, 1739, 1748,
	1752, 1753, 1758, 1762, 1763, 868, 1638, 871, 644, 869,
	853, 855, 0, 857, 0, 0, 0, 862, 885, 883,
	0, 921, 866, 867, 877, 936, 959, 0, 941, 0,
	959, 981, 0, 946, 1657, 1252, 1253, 0, 1479, 1476,
	-2, 1780, 1781, 2, 0, 0, 0, 0, 0, 316,
	0, 321, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 778, 355, 0, 379, 0, 383, 1731, -2,
	-2, 387, 782, 786, 787, 788, 0, 0, 0, 0,
	393, 0, 0, 380, 381, 397, 400, 0, 52, 0,
	1741, 981, 53, 0, 1448, 1498, 1499, 1500, 1501, 1502,
	1769, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 55, 0, 1741, 58, 0, 1741, 0, -2, 62,
	0, 1741, 153, 154, 1489, 1490, 1494, 1495, 1496, 1497,
	65, 0, 1454, 67, 0, 1451, 75, 0, 1741, 1432,
	0, 0, 569, 1429, 1434, 570, 1439, 0, 176, 177,
	178, 179, 180, 1741, 182, 183, 0, 185, 186, 1741,
	188, 189, 0, 191, 213, 644, 1741, 0, 220, 1459,
	0, 668, 1741, 666, 1463, -2, 1741, 689, 692, 1741,
	694, 644, 696, 1461, 701, 1462, 0, -2, 0, 875,
	1741, 795, 0, 229, 0, 808, 0, 810, 0, 829,
	987, 135, 1741, 254, 273, 135, 1741, 257, 135, 1741,
	260, 135, 1741, 263, 1427, 135, 1741, 266, 267, 1741,
	269, 155, 270, 1741, 272, 0, -2, 310, 1465, -2,
	0, -2, 0, 167, 0, 575, 576, 0, 746, 747,
	364, 0, 0, 469, 470, 0, 0, 480, 481, 482,
	483, 1636, 1561, 486, 0, 489, 510, 524, 0, 0,
	0, 493, 495, 574, 497, 0, 0, 499, 0, 501,
	0, 503, 0, 505, 0, 507, 509, 511, 525, 513,
	0, 0, 0, 523, 0, 529, 0, 532, 533, 534,
	0, 536, 537, 538, 539, 0, 541, 542, -2, -2,
	546, 548, 0, 554, 0, 558, 0, 476, 477, 135,
	985, 758, -2, 760, 0, 776, -2, 0, 346, 0,
	349, 845, 899, 900, 0, 0, 0, 0, 880, 881,
	0, 0, 0, 841, 842, 0, 0, 0, 0, 1338,
	1339, 1340, 1341, 1342, 1343, 1346, 1347, 1344, 1345, 1348,
	1349, 0, 0, 0, 0, 0, 1350, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 1352,
	1353, 0, 0, 1355, 0, 1357, 0, 0, 0, 0,
	0, 0, 1161, 1163, 1420, 0, 0, 1354, 1103, 1104,
	1105, 1140, 1141, 0, 1215, 1417, 1416, 1217, 0, 1369,
	0, 1224, 0, 1095, 1231, 1445, -2, 0, 1333, 1364,
	0, 0, 1239, 1240, 1241, 0, 0, 1369, 0, 1411,
	0, 1306, 0, 1043, 0, 1044, 1045, 0, 1046, 1047,
	1060, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 1392, -2, 0, 0, 0,
	870, 0, 0, 925, 1421, 1425, 1426, 925, 925, 0,
	0, 1370, 0, 0, 0, 0, 978, 978, 978, 976,
	953, 0, 959, 0, 969, 0, 959, 959, 0, -2,
	941, 0, 0, 969, 982, 983, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 1466, 1467, 0, 167, 0,
	326, 336, 877, 0, 1372, 999, 995, 1002, 1003, 1004,
	1095, 1050, 1051, 1052, 1053, 1054, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, -2, 1061, 1063, 1081, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1056, 0,
	1031, 1031, 1031, 1048, 1049, 1072, 1073, 1075, 1077, 1079,
	1000, 1001, 1066, 1067, 1068, 1069, 0, 330, 0, 0,
	0, 0, -2, 389, 0, 784, 0, 789, 412, 413,
	414, 791, 792, 392, 415, 416, 417, 418, 419, 420,
	0, 661, 0, 663, 1441, 0, 390, 405, 395, 0,
	401, 76, 741, 103, 0, 741, 741, 0, 0, 122,
	0, 0, 0, 0, 0, 94, 99, 82, 83, 0,
	0, 0, 0, 59, 669, 0, 672, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 93,
	0, 88, 78, 0, 0, 96, 101, 0, 126, 128,
	0, 0, 972, 568, 0, 0, 1480, 1437, 0, 0,
	0, 0, 583, 0, 0, 0, 227, 222, 0, 224,
	664, 667, 0, 687, 0, 874, 0, 0, 0, 0,
	0, 702, 0, 1741, 707, 1450, 1485, 1486, 797, 0,
	991, 0, 811, 0, 0, 988, 0, 252, 0, 133,
	134, 0, 255, 0, 258, 0, 261, 0, 0, 264,
	0, 0, 0, 0, 877, 0, 0, 0, 145, 0,
	0, 0, 0, 167, 972, 366, 972, 368, 0, 0,
	484, 485, 487, 488, 490, 491, 555, 492, 496, 0,
	562, 1653, 572, 498, 500, 502, 504, 506, 0, 515,
	0, 517, 0, 519, 527, 530, 535, 540, 0, 0,
	0, 0, 685, 0, 775, 848, 348, 897, 898, 903,
	907, 908, 911, 914, 915, 905, 1098, 863, 864, 865,
	891, 892, 724, 0, 0, 1099, 996, 1100, 1101, 1447,
	0, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, -2, -2, -2, -2, -2, -2, -2, -2, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	-2, -2, -2, 1138, 1139, -2, 1356, 1358, 0, 1420,
	0, -2, 0, -2, -2, -2, -2, 1158, 0, 1160,
	1165, 1167, 1169, 0, 0, 0, 0, 1419, 1179, 1403,
	1404, 0, 0, 1335, 1336, 1337, 1164, 0, 1418, 1415,
	0, 0, 1368, 888, 1242, 0, 0, 0, 0, 1249,
	0, 1446, 1082, 1083, 1084, 1085, 1086, 1087, 1096, 1235,
	1366, 0, 1365, 0, 0, 0, 1376, 1410, 1406, 0,
	1468, 1474, 1314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1286, 0, 1379, -2, -2, -2, -2, -2, -2,
	-2, 0, 1288, 0, 1300, 0, 1302, 0, 1290, 1370,
	1389, 0, 0, 1185, 0, 0, 0, 1333, 0, 1293,
	1370, 1397, 0, 0, 0, 0, 0, 1370, 0, 1402,
	872, 0, 0, 991, 0, 0, 0, 1424, 991, 991,
	0, 920, 0, 0, 0, 0, 0, 0, 973, 977,
	974, 975, 0, 0, 959, 969, 933, 0, 0, 1449,
	939, 968, 0, 644, 958, 969, 969, 0, -2, 943,
	0, 0, 888, -2, 168, 643, 0, 0, 0, 318,
	0, 0, 0, 312, 314, 0, 992, 994, 0, 1005,
	0, 0, -2, 0, 0, 0, 0, 0, 382, 0,
	783, 790, 0, 409, 0, 411, 662, 1443, 1442, 0,
	402, 0, 0, 0, 0, 740, 105, 1741, 0, 137,
	0, 0, 634, 1455, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 670, 671, 673, 679, 681,
	0, 675, 1444, 0, 676, 0, 678, 680, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 1431, 158, 971, 0, 1430, 1440, 0,
	181, 184, 187, 190, 0, 582, -2, 584, 586, 587,
	588, 589, 1587, 1486, 0, 1486, 0, 0, 0, 167,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 0, 1741, 799, 805, 0, 890,
	0, 827, 813, 0, 0, 0, 827, 831, 832, 834,
	835, 0, 0, 989, 274, 135, 135, 135, 1428, 135,
	135, 156, 268, 271, 277, 311, 877, 167, 165, 1619,
	163, 160, 162, 0, 0, 0, 140, 167, 365, 370,
	478, 0, 573, 571, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 556, 557, 561, 986, 0, 909, 0,
	906, 912, 913, 0, 894, 722, 723, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1180, 0, -2, 1159,
	1162, 1166, 1168, 1170, 0, 0, 0, 0, 0, 0,
	1359, 0, 1361, 1181, 1413, 1416, 1331, 0, 0, 887,
	888, 888, 888, 1248, 0, 0, 0, 0, 0, 0,
	0, 1367, 0, 1374, 1375, 0, 0, 1407, 0, 0,
	0, 1250, 0, 0, 0, 1055, 1029, 0, 1074, 1076,
	1078, 1080, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 1273, 1285, 0, 1287, 1299, 1301, 1289, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1188, 1189, 1190, 1292, 1395, 1396,
	0, 0, 0, 0, 0, 0, 1298, 0, 1401, 877,
	922, 917, 1422, 972, 924, 926, 1423, 1452, 917, 917,
	0, 1371, 961, 0, 963, 0, 0, 0, 965, 0,
	954, 0, 956, 969, 938, 0, 0, 931, 0, 930,
	644, 967, 940, 944, 1468, 0, 984, 0, 948, 951,
	0, 0, 1481, 192, 194, 195, 193, 0, 325, 0,
	1373, 0, 997, 0, 0, 0, 0, 0, 329, 0,
	378, -2, 407, 408, 410, 406, 104, 728, 0, 0,
	1453, 0, 107, 1741, 116, 0, 611, 0, 0, 0,
	0, 0, 743, 117, 1741, 135, 1741, 135, 118, 121,
	0, 125, 123, 0, 0, 602, 77, 741, 80, 86,
	0, 0, 0, 92, 0, 734, 0, 674, 677, 683,
	60, 0, 736, 726, 0, 725, 127, 81, 87, 0,
	738, 79, 0, 167, 0, 0, 1436, 591, 0, 1486,
	0, 1486, 0, 1457, 580, 644, 0, 221, 226, 225,
	668, 690, -2, 693, 695, 697, 0, 699, 710, 0,
	0, 0, 801, 805, 0, 804, 875, 902, 889, 990,
	806, 827, 0, 0, 0, 816, 818, 815, 812, 809,
	991, 0, 0, 0, 0, 0, 253, 256, 259, 262,
	265, 278, 144, 0, 0, 0, 0, 0, 167, 0,
	0, 141, 367, 0, 0, 516, 518, 526, 549, 550,
	597, 0, 553, 0, 0, 893, 724, 0, 1102, 1143,
	0, 0, -2, 0, 0, 1147, 0, 0, 0, -2,
	0, 0, 0, 1360, 1362, 0, 1415, 1243, 0, 0,
	0, 0, 1226, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	0, 1233, 1234, 1334, 1377, 1405, 1409, 0, 1469, 1473,
	1312, 1313, 1317, 1460, 0, 0, 0, 1254, 0, 0,
	0, 0, 0, 0, 0, 1378, 1388, 1390, 1186, 1187,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	-2, -2, -2, 1204, 1205, 1206, -2, -2, -2, 0,
	0, 0, 1391, 1393, 1394, 1398, 1399, 0, 1295, 1296,
	1297, 1400, 0, 919, 0, 923, 0, 919, 919, 884,
	962, 0, 980, 964, 936, 955, 0, 945, 934, 0,
	935, 0, 966, 0, 942, 947, 0, 950, 0, 1243,
	-2, 151, 327, 0, 998, 1006, 0, 1058, 1062, 331,
	0, 0, 0, 0, 136, 609, 633, 0, 0, 713,
	721, 721, 0, 1455, 0, 0, 109, 0, 0, 0,
	0, 114, 0, 120, 124, 0, 0, 0, 0, 0,
	0, 89, 90, 91, 0, 95, 0, 0, 0, 0,
	0, 138, 0, 0, 599, 0, 585, 0, 0, 0,
	0, 583, 0, 219, 665, 688, 698, 0, 0, 0,
	0, 0, 803, 805, 0, 796, 797, 827, 901, 807,
	825, 826, 824, 0, 0, 0, 890, 833, 830, 836,
	837, 0, 164, 0, 159, 161, 0, 147, 0, 0,
	0, 479, 551, 596, 0, 0, 904, 910, 895, 724,
	1145, 1149, 0, 0, 0, 1151, -2, 0, 1173, -2,
	-2, 1363, 1414, 1223, 888, 1244, 1246, 1247, 1097, 1408,
	0, 1319, 1316, 0, 1303, 1030, 1264, 1265, 0, 0,
	1268, 1270, 1271, 1272, 1387, 0, 0, 0, 0, 1294,
	873, 1308, 0, 0, 927, 1308, 1308, 0, 959, 957,
	932, 928, 0, 1469, 949, 0, 0, 993, 1057, 730,
	732, 106, 0, 610, 0, 613, 0, 0, 0, 0,
	620, 621, 0, 0, 0, 0, 0, 635, 642, 0,
	724, 0, 724, 0, 0, 0, 0, 111, 130, 0,
	0, 742, 0, 135, 135, 0, 0, 729, 0, 0,
	0, 0, 0, 735, 737, 727, 0, 739, 157, 0,
	578, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 709, 0, 0, 0, 793, 805, 0, 798, 799,
	228, 0, 0, 0, 814, 817, 819, 902, 0, 166,
	167, 0, 0, 369, 371, 0, 0, 377, 595, 0,
	896, 1153, -2, -2, 1174, 0, 1470, 1472, 890, 0,
	1305, 0, 0, -2, 0, 0, 0, 859, 0, 918,
	916, 860, 861, 979, 969, 0, 952, 108, 0, 614,
	615, 1456, 617, 0, 619, 622, 0, 624, 1488, 0,
	628, 591, 0, 639, 640, 714, 715, 720, 716, 721,
	637, 0, 110, 112, 129, 719, 113, 119, 0, 0,
	0, 0, 0, 0, 97, 0, 970, 0, 0, 642,
	0, 632, 591, 581, 0, 710, 0, 0, 0, 800,
	801, 0, 0, 0, 827, 838, 146, 0, 0, 0,
	373, 0, 375, 0, 552, 1245, 1323, 0, 1266, 1267,
	-2, 0, 1212, 1307, 1309, 0, 937, 929, 612, 616,
	0, 0, 648, 0, 0, 599, 0, 724, 0, 132,
	0, 0, 0, 731, 733, 0, 0, 0, 0, 631,
	591, 642, 599, 642, 0, 642, 0, 802, 803, 0,
	821, 991, 823, 828, 0, 0, 372, 0, 0, 0,
	0, 0, 0, 1318, 1213, 0, 0, 0, 623, 653,
	0, 0, 0, 636, 0, 717, 644, 115, 0, 718,
	0, 603, 0, 0, 606, 0, 0, 98, 0, 0,
	599, 591, 579, 591, 0, 591, 0, 794, 0, 822,
	167, 167, 374, 376, 1315, 1320, 1324, -2, 1706, 1536,
	0, 1321, 1322, 1310, 1311, 0, 625, 649, 650, 0,
	645, 646, 647, 1487, 626, 627, 641, 648, 131, 600,
	0, 0, 601, 0, 0, 100, 102, 0, 629, 599,
	599, 0, 599, 0, 991, 148, 149, 0, 1326, 1327,
	1328, 1329, 1330, 618, 651, 0, 652, 0, 0, 0,
	653, 604, 0, 607, 0, 594, 630, 703, 642, 705,
	642, 820, 0, 654, 0, 657, 658, 0, 655, 638,
	0, 0, 590, 592, 593, 591, 591, 1325, 656, 659,
	660, 0, 0, 599, 599, 599, 0, 704, 706, 605,
	0, 0, 0, 599, 608,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 413, 3, 419, 414, 3,
	424, 425, 417, 415, 429, 416, 426, 418, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 433, 428,
	405, 407, 406, 409, 430, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 422, 3, 423, 420, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 431, 412, 432, 410,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 408, 57748, 411, 57749, 421,
	57750, 427, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1035
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1044
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1069
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1168
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1172
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1195
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1254
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1260
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1276
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1283
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1290
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1304
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1312
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1321
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1340
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1348
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1379
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1389
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1393
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1399
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1444
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1447
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1478
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1485
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1518
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1533
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1538
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1556
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1570
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1577
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1581
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1585
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1624
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1654
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1658
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1716
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1736
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1740
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1744
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1750
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1760
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1764
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1770
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1774
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1778
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1782
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1788
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1798
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1802
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1806
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1812
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1824
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1825
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1826
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1827
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1837
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1847
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1869
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1877
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1896
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1905
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1926
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1931
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1937
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1938
		{
			sqlVAL.str = ""
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1947
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1950
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1951
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1961
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1962
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1973
		{

			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1981
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1985
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1995
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2005
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2020
		{

			sqlVAL.union.val = nil
		}
	case 228:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return helpWith(sqllex, "DELETE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2067
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2068
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2069
		{
			return helpWith(sqllex, "DROP")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2072
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2073
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2099
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2103
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2114
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2118
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2121
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2144
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2152
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2160
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2175
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2194
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2197
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2201
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2229
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2231
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2242
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2246
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2249
		{
			return helpWith(sqllex, "DELETE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2251
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2252
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2253
		{
			return helpWith(sqllex, "INSERT")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2254
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2256
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2260
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2265
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2266
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2267
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2271
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2300
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2316
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2322
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2336
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2340
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2351
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2375
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2382
		{
			return helpWith(sqllex, "GRANT")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2410
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2418
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2422
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2433
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2451
		{
			return helpWith(sqllex, "RESET")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2452
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2460
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2464
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2467
		{
			return helpWith(sqllex, "RESET")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2475
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2478
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2492
		{
			return helpWith(sqllex, "USE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2496
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2497
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2498
		{
			return unimplemented(sqllex, "set local")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2503
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2504
		{
			return helpWith(sqllex, "USE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2520
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2556
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2564
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2568
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2572
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2578
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2588
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2600
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2604
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2618
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2644
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2648
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2670
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2673
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2678
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2682
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2701
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2708
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2714
		{
			return unimplemented(sqllex, "set from current")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2715
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2728
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2739
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2762
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2780
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2784
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2788
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2794
		{
			sqlVAL.union.val = tree.Low
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2798
		{
			sqlVAL.union.val = tree.Normal
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2802
		{
			sqlVAL.union.val = tree.High
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2813
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2817
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2826
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2830
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2844
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2845
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2847
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2849
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2850
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2851
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2852
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2853
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2854
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2857
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2858
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2859
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2861
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2862
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2864
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2866
		{
			return helpWith(sqllex, "SHOW")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2875
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2886
		{
			sqlVAL.str = "client_encoding"
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2889
		{
			sqlVAL.str = "timezone"
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2890
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2904
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2909
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2924
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2933
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2948
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2956
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2963
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2980
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2996
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3007
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3020
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3073
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3076
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3078
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3092
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3104
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3107
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3114
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = true
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3122
		{
			sqlVAL.union.val = false
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3139
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3149
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3170
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3177
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3181
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3208
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3213
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3225
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3246
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3257
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3260
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3264
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3268
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3272
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3278
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[9].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3285
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3295
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3306
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3310
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3321
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3328
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3333
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3453
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3457
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3461
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3500
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3504
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3509
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3513
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3522
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3529
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3533
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3554
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3557
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3593
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3619
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3644
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3660
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3680
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3687
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3692
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3697
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3703
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.str = ""
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3717
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3723
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3737
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3743
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3763
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 608:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3773
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3784
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3817
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3859
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3871
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3883
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3887
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3904
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3916
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3943
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3949
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3955
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4000
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4004
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4019
		{
			return unimplemented(sqllex, "match full")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4020
		{
			return unimplemented(sqllex, "match partial")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4021
		{
			return unimplemented(sqllex, "match simple")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4022
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4033
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4037
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4045
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4051
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4077
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4087
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4097
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4116
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4124
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4132
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4136
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4143
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4147
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4148
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4151
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4153
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4155
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4158
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4160
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4161
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4163
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4176
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4184
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4188
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4191
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4195
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4199
		{
			sqlVAL.union.val = nil
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4213
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4216
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4224
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4231
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4239
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4241
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4243
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4245
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4247
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4249
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4292
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4318
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4323
		{
			sqlVAL.union.val = true
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4327
		{
			sqlVAL.union.val = false
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = false
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4337
		{
			sqlVAL.union.val = true
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = false
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4347
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4363
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4364
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4367
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.str = ""
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4371
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4372
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4376
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4380
		{
			sqlVAL.union.val = tree.Descending
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4384
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4411
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4419
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4423
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4425
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4429
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4439
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4443
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4449
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4453
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4458
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4459
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4462
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4463
		{
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4493
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4507
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4511
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4512
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4513
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4529
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4532
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4534
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4547
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4550
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4552
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4555
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4564
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4565
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4566
		{
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4574
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4581
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4584
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4585
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.str = ""
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4593
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4601
		{
			sqlVAL.str = ""
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4607
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4611
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4617
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4621
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4627
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4631
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4644
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4646
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4650
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4654
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4664
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4670
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4676
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4680
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4690
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4710
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4714
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4718
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4728
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4734
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4738
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4748
		{
			sqlVAL.str = ""
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4753
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4754
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4766
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4773
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4780
		{
			return helpWith(sqllex, "INSERT")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4791
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4798
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4802
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4810
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4816
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4820
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4824
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4830
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4854
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4858
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4862
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4868
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4872
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4874
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4880
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4885
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4889
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 828:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4917
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4921
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4922
		{
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4926
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4943
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4946
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4950
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4993
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4999
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5003
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5018
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5022
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5030
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5034
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5045
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5080
		{
			return helpWith(sqllex, "SELECT")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5081
		{
			return helpWith(sqllex, "VALUES")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5082
		{
			return helpWith(sqllex, "TABLE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5104
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5131
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5143
		{
			return helpWith(sqllex, "SELECT")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5156
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5165
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5187
		{
			return helpWith(sqllex, "TABLE")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5199
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5202
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5203
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5207
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5217
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5226
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5230
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5234
		{
			sqlVAL.union.val = nil
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5239
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5240
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5244
		{
			sqlVAL.union.val = true
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5248
		{
			sqlVAL.union.val = false
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5252
		{
			sqlVAL.union.val = false
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5258
		{
			sqlVAL.union.val = true
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5264
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5269
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5270
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5273
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5274
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5278
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5282
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5288
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5294
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5304
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5308
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5312
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5321
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5330
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5341
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5345
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5367
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5374
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5387
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5391
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5397
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5398
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5401
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5402
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5419
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5423
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5429
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5433
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5452
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5455
		{
			return helpWith(sqllex, "VALUES")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5457
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5472
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5480
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5490
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5494
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5500
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5506
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5511
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5523
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5535
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5562
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5585
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5592
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5602
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5607
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5639
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5651
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5653
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5656
		{
			sqlVAL.union.val = nil
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5658
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5662
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = true
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5676
		{
			sqlVAL.union.val = false
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5704
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5712
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5716
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5722
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5746
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5760
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5764
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5770
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5771
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5782
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5791
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5792
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5829
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5833
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5845
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5859
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5868
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5890
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5892
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5912
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5937
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5941
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5945
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5949
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5973
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5993
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5997
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6017
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6021
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = nil
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6032
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6036
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6040
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6048
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6052
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6056
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6060
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6064
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6068
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6084
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6091
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6105
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6109
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6120
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6124
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6128
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6132
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6138
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6153
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6159
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6165
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6173
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6177
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6181
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6187
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = true
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = false
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6245
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6249
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6261
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6270
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = tree.Year
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6280
		{
			sqlVAL.union.val = tree.Month
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.Day
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6296
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6302
		{
			sqlVAL.union.val = tree.Month
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6306
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6310
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6314
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6318
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6322
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6326
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6330
		{
			sqlVAL.union.val = nil
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = tree.Second
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6339
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6363
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6367
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6371
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6374
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6383
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6552
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6560
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6568
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6584
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6592
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6604
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6608
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6620
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6627
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6693
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6710
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6714
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6718
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6769
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6773
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6777
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6781
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6785
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6789
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6793
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6797
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6801
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6805
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6809
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6813
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6817
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6821
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6825
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6829
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6837
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6841
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6915
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6920
		{
			return unimplemented(sqllex, "func const")
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6926
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6929
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6947
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6956
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7006
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7007
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7020
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7031
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7038
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7047
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7052
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7072
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7102
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7106
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7110
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7122
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7126
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7130
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7140
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7145
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7150
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7152
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7165
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7175
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7184
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7185
		{
			return unimplemented(sqllex, "treat")
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7206
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7211
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7216
		{
			return unimplemented(sqllex, "within group")
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7217
		{
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7221
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7232
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7236
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7242
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7246
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7252
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7295
		{
			sqlVAL.str = ""
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7301
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7305
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7337
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7343
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7356
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7430
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.Any
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.Some
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = tree.All
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7457
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.Div
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7459
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7463
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.LT
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.GT
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.LE
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = tree.GE
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.NE
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7474
		{
			sqlVAL.union.val = tree.Like
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7475
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7476
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7539
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7543
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7550
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7556
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7560
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7566
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7600
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7626
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7630
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7636
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7664
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7668
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7672
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7676
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7680
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7686
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7698
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7731
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7751
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7758
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7764
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7775
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7781
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7790
		{
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7791
		{
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7795
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7799
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7805
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7814
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7818
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7822
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7850
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7857
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7889
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7899
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7903
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7915
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7926
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7937
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7947
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8141
		{
			sqlVAL.str = ""
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8147
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8151
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
