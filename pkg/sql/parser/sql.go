// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:578
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9109

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 975,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 814,
	194, 814,
	208, 231,
	284, 231,
	292, 670,
	319, 231,
	328, 670,
	365, 670,
	389, 231,
	412, 670,
	-2, 0,
	-1, 75,
	208, 235,
	-2, 0,
	-1, 76,
	105, 975,
	183, 975,
	398, 975,
	399, 975,
	-2, 0,
	-1, 87,
	118, 949,
	132, 949,
	191, 949,
	219, 949,
	250, 949,
	260, 949,
	394, 949,
	-2, 936,
	-1, 116,
	123, 591,
	207, 591,
	286, 579,
	337, 579,
	382, 591,
	-2, 0,
	-1, 117,
	4, 977,
	21, 977,
	22, 977,
	23, 977,
	24, 977,
	25, 977,
	27, 977,
	32, 977,
	37, 977,
	38, 977,
	39, 977,
	40, 977,
	41, 977,
	42, 977,
	43, 977,
	44, 977,
	45, 977,
	46, 977,
	48, 977,
	49, 977,
	50, 977,
	51, 977,
	52, 977,
	53, 977,
	56, 977,
	57, 977,
	58, 977,
	59, 977,
	61, 977,
	62, 977,
	66, 977,
	67, 977,
	68, 977,
	69, 977,
	70, 977,
	72, 977,
	73, 977,
	74, 977,
	75, 977,
	77, 977,
	79, 977,
	80, 977,
	81, 977,
	84, 977,
	85, 977,
	93, 977,
	94, 977,
	95, 977,
	96, 977,
	97, 977,
	98, 977,
	99, 977,
	100, 977,
	102, 977,
	104, 977,
	105, 977,
	107, 977,
	110, 977,
	111, 977,
	112, 977,
	114, 977,
	116, 977,
	117, 977,
	119, 977,
	120, 977,
	121, 977,
	122, 977,
	123, 977,
	124, 977,
	125, 977,
	126, 977,
	127, 977,
	128, 977,
	129, 977,
	131, 977,
	137, 977,
	138, 977,
	139, 977,
	140, 977,
	141, 977,
	142, 977,
	144, 977,
	146, 977,
	150, 977,
	151, 977,
	153, 977,
	154, 977,
	156, 977,
	157, 977,
	159, 977,
	160, 977,
	161, 977,
	162, 977,
	163, 977,
	164, 977,
	165, 977,
	166, 977,
	167, 977,
	168, 977,
	169, 977,
	172, 977,
	173, 977,
	177, 977,
	178, 977,
	179, 977,
	180, 977,
	183, 977,
	184, 977,
	185, 977,
	186, 977,
	187, 977,
	188, 977,
	189, 977,
	190, 977,
	192, 977,
	194, 977,
	197, 977,
	198, 977,
	199, 977,
	201, 977,
	202, 977,
	205, 977,
	206, 977,
	207, 977,
	208, 977,
	210, 977,
	211, 977,
	213, 977,
	214, 977,
	216, 977,
	217, 977,
	220, 977,
	221, 977,
	224, 977,
	225, 977,
	227, 977,
	228, 977,
	229, 977,
	230, 977,
	231, 977,
	232, 977,
	233, 977,
	234, 977,
	235, 977,
	236, 977,
	238, 977,
	239, 977,
	240, 977,
	241, 977,
	243, 977,
	246, 977,
	247, 977,
	248, 977,
	249, 977,
	251, 977,
	252, 977,
	253, 977,
	255, 977,
	256, 977,
	257, 977,
	258, 977,
	261, 977,
	262, 977,
	264, 977,
	266, 977,
	267, 977,
	268, 977,
	269, 977,
	270, 977,
	271, 977,
	272, 977,
	273, 977,
	274, 977,
	276, 977,
	277, 977,
	278, 977,
	279, 977,
	280, 977,
	281, 977,
	283, 977,
	285, 977,
	286, 977,
	287, 977,
	288, 977,
	289, 977,
	290, 977,
	291, 977,
	292, 977,
	293, 977,
	295, 977,
	296, 977,
	297, 977,
	298, 977,
	299, 977,
	301, 977,
	302, 977,
	303, 977,
	304, 977,
	305, 977,
	306, 977,
	307, 977,
	308, 977,
	310, 977,
	312, 977,
	313, 977,
	314, 977,
	315, 977,
	316, 977,
	317, 977,
	319, 977,
	320, 977,
	321, 977,
	322, 977,
	323, 977,
	324, 977,
	325, 977,
	326, 977,
	328, 977,
	329, 977,
	330, 977,
	331, 977,
	332, 977,
	333, 977,
	334, 977,
	335, 977,
	336, 977,
	337, 977,
	339, 977,
	340, 977,
	341, 977,
	342, 977,
	344, 977,
	345, 977,
	346, 977,
	347, 977,
	349, 977,
	350, 977,
	351, 977,
	352, 977,
	353, 977,
	354, 977,
	355, 977,
	356, 977,
	357, 977,
	358, 977,
	359, 977,
	360, 977,
	362, 977,
	363, 977,
	364, 977,
	366, 977,
	367, 977,
	368, 977,
	369, 977,
	370, 977,
	371, 977,
	372, 977,
	373, 977,
	374, 977,
	376, 977,
	377, 977,
	378, 977,
	379, 977,
	382, 977,
	383, 977,
	384, 977,
	385, 977,
	386, 977,
	388, 977,
	389, 977,
	390, 977,
	392, 977,
	393, 977,
	396, 977,
	397, 977,
	398, 977,
	399, 977,
	400, 977,
	402, 977,
	404, 977,
	405, 977,
	406, 977,
	407, 977,
	408, 977,
	409, 977,
	410, 977,
	412, 977,
	413, 977,
	414, 977,
	419, 977,
	420, 977,
	421, 977,
	422, 977,
	423, 977,
	424, 977,
	-2, 0,
	-1, 118,
	1, 867,
	197, 867,
	283, 867,
	290, 867,
	427, 867,
	450, 867,
	-2, 0,
	-1, 120,
	1, 867,
	450, 867,
	-2, 0,
	-1, 121,
	1, 867,
	450, 867,
	-2, 0,
	-1, 122,
	1, 871,
	450, 871,
	-2, 0,
	-1, 146,
	118, 948,
	132, 948,
	191, 948,
	219, 948,
	250, 948,
	260, 948,
	394, 948,
	-2, 945,
	-1, 176,
	4, 984,
	5, 984,
	6, 984,
	7, 984,
	8, 984,
	9, 984,
	10, 984,
	21, 984,
	22, 984,
	23, 984,
	24, 984,
	25, 984,
	27, 984,
	32, 984,
	33, 984,
	37, 984,
	38, 984,
	39, 984,
	40, 984,
	41, 984,
	42, 984,
	43, 984,
	44, 984,
	45, 984,
	46, 984,
	48, 984,
	49, 984,
	50, 984,
	51, 984,
	52, 984,
	53, 984,
	54, 984,
	55, 984,
	56, 984,
	57, 984,
	58, 984,
	59, 984,
	61, 984,
	62, 984,
	64, 984,
	66, 984,
	67, 984,
	68, 984,
	69, 984,
	70, 984,
	72, 984,
	73, 984,
	74, 984,
	75, 984,
	77, 984,
	79, 984,
	80, 984,
	81, 984,
	83, 984,
	84, 984,
	85, 984,
	86, 984,
	87, 984,
	88, 984,
	89, 984,
	90, 984,
	91, 984,
	92, 984,
	93, 984,
	94, 984,
	95, 984,
	96, 984,
	97, 984,
	98, 984,
	99, 984,
	100, 984,
	101, 984,
	102, 984,
	104, 984,
	105, 984,
	107, 984,
	110, 984,
	111, 984,
	112, 984,
	114, 984,
	116, 984,
	117, 984,
	119, 984,
	120, 984,
	121, 984,
	122, 984,
	123, 984,
	124, 984,
	125, 984,
	126, 984,
	127, 984,
	128, 984,
	129, 984,
	130, 984,
	131, 984,
	137, 984,
	138, 984,
	139, 984,
	140, 984,
	141, 984,
	142, 984,
	144, 984,
	146, 984,
	149, 984,
	150, 984,
	151, 984,
	153, 984,
	154, 984,
	156, 984,
	157, 984,
	159, 984,
	160, 984,
	161, 984,
	162, 984,
	163, 984,
	164, 984,
	165, 984,
	166, 984,
	167, 984,
	168, 984,
	169, 984,
	170, 984,
	172, 984,
	173, 984,
	177, 984,
	178, 984,
	179, 984,
	180, 984,
	182, 984,
	183, 984,
	184, 984,
	185, 984,
	186, 984,
	187, 984,
	188, 984,
	189, 984,
	190, 984,
	192, 984,
	194, 984,
	195, 984,
	196, 984,
	197, 984,
	198, 984,
	199, 984,
	200, 984,
	201, 984,
	202, 984,
	205, 984,
	206, 984,
	207, 984,
	208, 984,
	210, 984,
	211, 984,
	213, 984,
	214, 984,
	215, 984,
	216, 984,
	217, 984,
	218, 984,
	220, 984,
	221, 984,
	224, 984,
	225, 984,
	227, 984,
	228, 984,
	229, 984,
	230, 984,
	231, 984,
	232, 984,
	233, 984,
	234, 984,
	235, 984,
	236, 984,
	237, 984,
	238, 984,
	239, 984,
	240, 984,
	241, 984,
	242, 984,
	243, 984,
	244, 984,
	245, 984,
	246, 984,
	247, 984,
	248, 984,
	249, 984,
	251, 984,
	252, 984,
	253, 984,
	256, 984,
	257, 984,
	258, 984,
	261, 984,
	262, 984,
	263, 984,
	264, 984,
	265, 984,
	266, 984,
	267, 984,
	268, 984,
	269, 984,
	270, 984,
	271, 984,
	272, 984,
	273, 984,
	274, 984,
	276, 984,
	277, 984,
	278, 984,
	279, 984,
	280, 984,
	281, 984,
	283, 984,
	285, 984,
	286, 984,
	287, 984,
	288, 984,
	289, 984,
	290, 984,
	291, 984,
	292, 984,
	293, 984,
	295, 984,
	296, 984,
	297, 984,
	298, 984,
	299, 984,
	301, 984,
	302, 984,
	303, 984,
	304, 984,
	305, 984,
	306, 984,
	307, 984,
	308, 984,
	310, 984,
	311, 984,
	312, 984,
	313, 984,
	314, 984,
	315, 984,
	316, 984,
	317, 984,
	319, 984,
	320, 984,
	321, 984,
	322, 984,
	323, 984,
	324, 984,
	325, 984,
	326, 984,
	328, 984,
	329, 984,
	330, 984,
	331, 984,
	332, 984,
	333, 984,
	334, 984,
	335, 984,
	336, 984,
	337, 984,
	338, 984,
	339, 984,
	340, 984,
	341, 984,
	342, 984,
	343, 984,
	344, 984,
	345, 984,
	346, 984,
	347, 984,
	349, 984,
	350, 984,
	351, 984,
	352, 984,
	353, 984,
	354, 984,
	355, 984,
	356, 984,
	357, 984,
	358, 984,
	359, 984,
	360, 984,
	362, 984,
	363, 984,
	364, 984,
	366, 984,
	367, 984,
	368, 984,
	369, 984,
	370, 984,
	371, 984,
	372, 984,
	373, 984,
	374, 984,
	376, 984,
	377, 984,
	378, 984,
	379, 984,
	382, 984,
	383, 984,
	384, 984,
	385, 984,
	386, 984,
	387, 984,
	388, 984,
	389, 984,
	390, 984,
	392, 984,
	393, 984,
	395, 984,
	396, 984,
	397, 984,
	398, 984,
	399, 984,
	400, 984,
	401, 984,
	402, 984,
	404, 984,
	405, 984,
	406, 984,
	407, 984,
	408, 984,
	409, 984,
	410, 984,
	412, 984,
	413, 984,
	414, 984,
	419, 984,
	420, 984,
	421, 984,
	422, 984,
	423, 984,
	424, 984,
	425, 984,
	433, 984,
	438, 984,
	439, 984,
	440, 984,
	447, 984,
	452, 984,
	-2, 0,
	-1, 541,
	148, 1650,
	380, 1650,
	430, 1650,
	449, 1650,
	-2, 0,
	-1, 542,
	148, 1727,
	380, 1727,
	430, 1727,
	449, 1727,
	-2, 0,
	-1, 543,
	148, 1640,
	380, 1640,
	430, 1640,
	449, 1640,
	-2, 0,
	-1, 545,
	148, 1813,
	380, 1813,
	430, 1813,
	449, 1813,
	-2, 0,
	-1, 547,
	148, 1841,
	380, 1841,
	430, 1841,
	449, 1841,
	-2, 0,
	-1, 554,
	148, 1737,
	380, 1737,
	430, 1737,
	449, 1737,
	-2, 461,
	-1, 571,
	449, 1600,
	451, 1600,
	-2, 639,
	-1, 572,
	449, 1602,
	451, 1602,
	-2, 640,
	-1, 573,
	449, 1601,
	451, 1601,
	-2, 641,
	-1, 574,
	451, 1548,
	-2, 642,
	-1, 717,
	286, 580,
	337, 580,
	-2, 0,
	-1, 718,
	286, 579,
	337, 579,
	-2, 539,
	-1, 720,
	1, 561,
	446, 561,
	448, 561,
	450, 561,
	-2, 0,
	-1, 721,
	1, 638,
	145, 638,
	446, 638,
	448, 638,
	450, 638,
	-2, 0,
	-1, 728,
	1, 582,
	446, 582,
	448, 582,
	450, 582,
	-2, 0,
	-1, 730,
	1, 601,
	446, 601,
	448, 601,
	450, 601,
	-2, 0,
	-1, 731,
	1, 603,
	446, 603,
	448, 603,
	450, 603,
	-2, 0,
	-1, 732,
	1, 606,
	446, 606,
	448, 606,
	450, 606,
	-2, 0,
	-1, 736,
	1, 620,
	446, 620,
	448, 620,
	450, 620,
	-2, 0,
	-1, 737,
	1, 622,
	446, 622,
	448, 622,
	450, 622,
	-2, 0,
	-1, 781,
	132, 988,
	219, 988,
	250, 988,
	-2, 945,
	-1, 796,
	132, 987,
	219, 987,
	250, 987,
	-2, 945,
	-1, 820,
	449, 1599,
	-2, 469,
	-1, 849,
	447, 1591,
	-2, 1582,
	-1, 855,
	5, 1122,
	-2, 1631,
	-1, 856,
	5, 1123,
	-2, 1635,
	-1, 857,
	5, 1124,
	-2, 1634,
	-1, 858,
	5, 1125,
	-2, 1839,
	-1, 859,
	5, 1126,
	-2, 1739,
	-1, 860,
	5, 1127,
	-2, 1805,
	-1, 861,
	5, 1128,
	-2, 1807,
	-1, 862,
	5, 1129,
	-2, 1818,
	-1, 863,
	5, 1130,
	-2, 1808,
	-1, 864,
	5, 1131,
	-2, 1809,
	-1, 865,
	5, 1132,
	-2, 1630,
	-1, 866,
	5, 1133,
	-2, 1852,
	-1, 867,
	5, 1134,
	-2, 1702,
	-1, 868,
	5, 1135,
	-2, 1746,
	-1, 869,
	5, 1136,
	-2, 1748,
	-1, 870,
	5, 1137,
	-2, 1706,
	-1, 871,
	5, 1138,
	447, 1609,
	-2, 1600,
	-1, 872,
	5, 1194,
	447, 1194,
	-2, 1887,
	-1, 877,
	447, 1610,
	-2, 1601,
	-1, 879,
	5, 1142,
	-2, 1885,
	-1, 880,
	5, 1143,
	-2, 1886,
	-1, 881,
	5, 1144,
	-2, 1705,
	-1, 882,
	5, 1145,
	-2, 1898,
	-1, 883,
	5, 1146,
	-2, 1707,
	-1, 884,
	5, 1147,
	-2, 1708,
	-1, 885,
	5, 1148,
	-2, 1709,
	-1, 886,
	5, 1149,
	-2, 1867,
	-1, 887,
	5, 1150,
	-2, 1896,
	-1, 888,
	5, 1151,
	-2, 1685,
	-1, 889,
	5, 1152,
	-2, 1686,
	-1, 890,
	5, 1166,
	-2, 1879,
	-1, 892,
	5, 1141,
	-2, 1875,
	-1, 893,
	5, 1141,
	-2, 1874,
	-1, 894,
	5, 1141,
	-2, 1891,
	-1, 895,
	5, 1158,
	-2, 1869,
	-1, 896,
	5, 1159,
	-2, 1632,
	-1, 897,
	5, 1169,
	-2, 1868,
	-1, 898,
	5, 1171,
	-2, 1907,
	-1, 900,
	5, 1182,
	-2, 1660,
	-1, 901,
	5, 1193,
	-2, 1900,
	-1, 902,
	5, 1185,
	-2, 1901,
	-1, 903,
	5, 1193,
	-2, 1902,
	-1, 904,
	5, 1189,
	-2, 1903,
	-1, 905,
	5, 1109,
	-2, 1715,
	-1, 906,
	5, 1110,
	-2, 1716,
	-1, 907,
	449, 1597,
	-2, 1581,
	-1, 908,
	447, 1927,
	-2, 1598,
	-1, 928,
	5, 1177,
	-2, 1828,
	-1, 945,
	5, 1176,
	-2, 1908,
	-1, 955,
	5, 1178,
	413, 1178,
	-2, 1870,
	-1, 956,
	5, 1179,
	413, 1179,
	-2, 1871,
	-1, 992,
	447, 1609,
	-2, 1600,
	-1, 1021,
	148, 1841,
	380, 1841,
	430, 1841,
	449, 1841,
	-2, 0,
	-1, 1022,
	1, 449,
	450, 449,
	-2, 879,
	-1, 1142,
	301, 1578,
	440, 1578,
	-2, 1577,
	-1, 1165,
	452, 1578,
	-2, 1579,
	-1, 1200,
	292, 670,
	412, 670,
	-2, 230,
	-1, 1220,
	272, 973,
	-2, 787,
	-1, 1229,
	254, 1604,
	-2, 0,
	-1, 1293,
	1, 338,
	446, 338,
	448, 338,
	450, 338,
	-2, 947,
	-1, 1296,
	4, 1906,
	11, 1906,
	12, 1906,
	14, 1906,
	15, 1906,
	16, 1906,
	17, 1906,
	18, 1906,
	19, 1906,
	21, 1906,
	22, 1906,
	23, 1906,
	24, 1906,
	25, 1906,
	27, 1906,
	30, 1906,
	32, 1906,
	34, 1906,
	37, 1906,
	38, 1906,
	39, 1906,
	40, 1906,
	41, 1906,
	42, 1906,
	43, 1906,
	44, 1906,
	45, 1906,
	46, 1906,
	48, 1906,
	49, 1906,
	50, 1906,
	51, 1906,
	52, 1906,
	53, 1906,
	56, 1906,
	57, 1906,
	58, 1906,
	59, 1906,
	61, 1906,
	62, 1906,
	63, 1906,
	66, 1906,
	67, 1906,
	68, 1906,
	69, 1906,
	70, 1906,
	71, 1906,
	72, 1906,
	73, 1906,
	74, 1906,
	75, 1906,
	77, 1906,
	78, 1906,
	79, 1906,
	80, 1906,
	81, 1906,
	83, 1906,
	84, 1906,
	85, 1906,
	93, 1906,
	94, 1906,
	95, 1906,
	96, 1906,
	97, 1906,
	98, 1906,
	99, 1906,
	100, 1906,
	102, 1906,
	104, 1906,
	105, 1906,
	107, 1906,
	110, 1906,
	111, 1906,
	112, 1906,
	114, 1906,
	116, 1906,
	117, 1906,
	119, 1906,
	120, 1906,
	121, 1906,
	122, 1906,
	123, 1906,
	124, 1906,
	125, 1906,
	126, 1906,
	127, 1906,
	128, 1906,
	129, 1906,
	133, 1906,
	134, 1906,
	135, 1906,
	136, 1906,
	137, 1906,
	138, 1906,
	139, 1906,
	140, 1906,
	141, 1906,
	142, 1906,
	143, 1906,
	144, 1906,
	146, 1906,
	149, 1906,
	150, 1906,
	151, 1906,
	153, 1906,
	154, 1906,
	156, 1906,
	157, 1906,
	159, 1906,
	160, 1906,
	161, 1906,
	162, 1906,
	163, 1906,
	164, 1906,
	165, 1906,
	166, 1906,
	167, 1906,
	168, 1906,
	169, 1906,
	170, 1906,
	171, 1906,
	172, 1906,
	173, 1906,
	174, 1906,
	175, 1906,
	176, 1906,
	178, 1906,
	179, 1906,
	180, 1906,
	182, 1906,
	183, 1906,
	184, 1906,
	185, 1906,
	186, 1906,
	187, 1906,
	188, 1906,
	189, 1906,
	190, 1906,
	192, 1906,
	194, 1906,
	195, 1906,
	196, 1906,
	197, 1906,
	198, 1906,
	199, 1906,
	200, 1906,
	201, 1906,
	202, 1906,
	203, 1906,
	204, 1906,
	205, 1906,
	206, 1906,
	207, 1906,
	208, 1906,
	210, 1906,
	211, 1906,
	213, 1906,
	214, 1906,
	215, 1906,
	216, 1906,
	217, 1906,
	218, 1906,
	220, 1906,
	221, 1906,
	224, 1906,
	225, 1906,
	226, 1906,
	227, 1906,
	228, 1906,
	229, 1906,
	230, 1906,
	231, 1906,
	232, 1906,
	233, 1906,
	234, 1906,
	235, 1906,
	236, 1906,
	237, 1906,
	238, 1906,
	239, 1906,
	240, 1906,
	241, 1906,
	244, 1906,
	246, 1906,
	247, 1906,
	248, 1906,
	249, 1906,
	251, 1906,
	252, 1906,
	253, 1906,
	256, 1906,
	257, 1906,
	258, 1906,
	259, 1906,
	261, 1906,
	262, 1906,
	264, 1906,
	266, 1906,
	267, 1906,
	268, 1906,
	269, 1906,
	270, 1906,
	271, 1906,
	272, 1906,
	273, 1906,
	274, 1906,
	276, 1906,
	277, 1906,
	278, 1906,
	279, 1906,
	280, 1906,
	281, 1906,
	283, 1906,
	285, 1906,
	286, 1906,
	287, 1906,
	288, 1906,
	289, 1906,
	290, 1906,
	291, 1906,
	292, 1906,
	293, 1906,
	295, 1906,
	296, 1906,
	297, 1906,
	298, 1906,
	299, 1906,
	300, 1906,
	301, 1906,
	302, 1906,
	303, 1906,
	304, 1906,
	305, 1906,
	306, 1906,
	307, 1906,
	308, 1906,
	310, 1906,
	311, 1906,
	312, 1906,
	313, 1906,
	314, 1906,
	315, 1906,
	316, 1906,
	317, 1906,
	318, 1906,
	319, 1906,
	320, 1906,
	321, 1906,
	322, 1906,
	323, 1906,
	324, 1906,
	325, 1906,
	326, 1906,
	328, 1906,
	329, 1906,
	330, 1906,
	331, 1906,
	332, 1906,
	333, 1906,
	334, 1906,
	335, 1906,
	336, 1906,
	337, 1906,
	339, 1906,
	340, 1906,
	341, 1906,
	342, 1906,
	343, 1906,
	344, 1906,
	345, 1906,
	346, 1906,
	347, 1906,
	349, 1906,
	350, 1906,
	351, 1906,
	352, 1906,
	353, 1906,
	354, 1906,
	355, 1906,
	356, 1906,
	357, 1906,
	358, 1906,
	359, 1906,
	360, 1906,
	362, 1906,
	363, 1906,
	364, 1906,
	366, 1906,
	367, 1906,
	368, 1906,
	369, 1906,
	370, 1906,
	371, 1906,
	372, 1906,
	373, 1906,
	374, 1906,
	376, 1906,
	377, 1906,
	378, 1906,
	379, 1906,
	382, 1906,
	383, 1906,
	384, 1906,
	385, 1906,
	386, 1906,
	388, 1906,
	389, 1906,
	390, 1906,
	392, 1906,
	393, 1906,
	396, 1906,
	397, 1906,
	398, 1906,
	399, 1906,
	400, 1906,
	402, 1906,
	404, 1906,
	405, 1906,
	406, 1906,
	407, 1906,
	408, 1906,
	409, 1906,
	410, 1906,
	412, 1906,
	413, 1906,
	414, 1906,
	419, 1906,
	420, 1906,
	421, 1906,
	422, 1906,
	423, 1906,
	424, 1906,
	425, 1906,
	426, 1906,
	428, 1906,
	429, 1906,
	430, 1906,
	431, 1906,
	432, 1906,
	433, 1906,
	435, 1906,
	436, 1906,
	437, 1906,
	438, 1906,
	439, 1906,
	440, 1906,
	441, 1906,
	442, 1906,
	443, 1906,
	445, 1906,
	448, 1906,
	449, 1906,
	451, 1906,
	452, 1906,
	-2, 0,
	-1, 1299,
	148, 1813,
	380, 1813,
	430, 1813,
	449, 1813,
	-2, 0,
	-1, 1325,
	286, 580,
	337, 580,
	-2, 0,
	-1, 1344,
	1, 575,
	446, 575,
	448, 575,
	450, 575,
	-2, 0,
	-1, 1345,
	1, 592,
	446, 592,
	448, 592,
	450, 592,
	-2, 0,
	-1, 1368,
	1, 1859,
	446, 1859,
	448, 1859,
	449, 1859,
	450, 1859,
	-2, 618,
	-1, 1369,
	1, 1811,
	446, 1811,
	448, 1811,
	449, 1811,
	450, 1811,
	-2, 619,
	-1, 1382,
	1, 874,
	450, 874,
	-2, 879,
	-1, 1387,
	132, 987,
	219, 987,
	250, 987,
	-2, 945,
	-1, 1480,
	118, 949,
	132, 949,
	191, 949,
	219, 949,
	250, 949,
	260, 949,
	394, 949,
	-2, 1350,
	-1, 1533,
	448, 1483,
	-2, 0,
	-1, 1568,
	118, 949,
	132, 949,
	191, 949,
	219, 949,
	250, 949,
	260, 949,
	394, 949,
	-2, 1059,
	-1, 1623,
	447, 1181,
	-2, 1169,
	-1, 1662,
	1, 451,
	450, 451,
	-2, 879,
	-1, 1847,
	1, 577,
	446, 577,
	448, 577,
	450, 577,
	-2, 0,
	-1, 1848,
	1, 594,
	446, 594,
	448, 594,
	450, 594,
	-2, 0,
	-1, 1920,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1230,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1231,
	-1, 1922,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1232,
	-1, 1923,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1233,
	-1, 1924,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1234,
	-1, 1925,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1235,
	-1, 1926,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1236,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1237,
	-1, 1939,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1249,
	-1, 1940,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1250,
	-1, 1941,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	428, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1251,
	-1, 1944,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1256,
	-1, 1950,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1260,
	-1, 1952,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1268,
	-1, 1953,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1269,
	-1, 1954,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1270,
	-1, 1955,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1271,
	-1, 2048,
	5, 1138,
	148, 1494,
	447, 1609,
	-2, 1600,
	-1, 2049,
	148, 1495,
	-2, 1863,
	-1, 2050,
	148, 1496,
	-2, 1736,
	-1, 2051,
	148, 1497,
	-2, 1661,
	-1, 2052,
	148, 1498,
	-2, 1696,
	-1, 2053,
	148, 1499,
	-2, 1734,
	-1, 2054,
	148, 1500,
	-2, 1804,
	-1, 2125,
	1, 1060,
	83, 1060,
	118, 1060,
	132, 1060,
	145, 1060,
	149, 1060,
	155, 1060,
	158, 1060,
	182, 1060,
	191, 1060,
	200, 1060,
	215, 1060,
	219, 1060,
	237, 1060,
	250, 1060,
	254, 1060,
	260, 1060,
	309, 1060,
	311, 1060,
	394, 1060,
	403, 1060,
	416, 1060,
	417, 1060,
	418, 1060,
	427, 1060,
	446, 1060,
	448, 1060,
	450, 1060,
	451, 1060,
	-2, 1059,
	-1, 2130,
	447, 1583,
	-2, 1595,
	-1, 2152,
	447, 1180,
	-2, 1170,
	-1, 2367,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1258,
	-1, 2368,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1262,
	-1, 2374,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1264,
	-1, 2554,
	197, 879,
	283, 879,
	290, 879,
	427, 879,
	-2, 448,
	-1, 2626,
	448, 1553,
	451, 1553,
	-2, 1569,
	-1, 2640,
	272, 973,
	-2, 787,
	-1, 2717,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1266,
	-1, 2724,
	195, 0,
	196, 0,
	244, 0,
	-2, 1285,
	-1, 2787,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1314,
	-1, 2788,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1315,
	-1, 2789,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1316,
	-1, 2793,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1320,
	-1, 2794,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1321,
	-1, 2795,
	14, 0,
	15, 0,
	16, 0,
	428, 0,
	429, 0,
	430, 0,
	-2, 1322,
	-1, 2838,
	447, 1584,
	-2, 1596,
	-1, 2918,
	449, 2009,
	-2, 922,
	-1, 2960,
	195, 0,
	196, 0,
	244, 0,
	-2, 1286,
	-1, 2963,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1289,
	-1, 2964,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1291,
	-1, 3107,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1290,
	-1, 3108,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	170, 0,
	171, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1292,
	-1, 3118,
	195, 0,
	-2, 1323,
	-1, 3208,
	195, 0,
	-2, 1324,
	-1, 3316,
	40, 0,
	170, 0,
	218, 0,
	343, 0,
	425, 0,
	433, 0,
	-2, 1866,
}

const sqlPrivate = 57344

const sqlLast = 70180

var sqlAct = [...]int{

	877, 3148, 3398, 3171, 3062, 3151, 3315, 3325, 2277, 3388,
	3287, 3286, 2627, 3273, 3289, 3326, 1580, 3327, 2286, 2079,
	3137, 3174, 1828, 2755, 3314, 3212, 2181, 2278, 2116, 993,
	3099, 2859, 3076, 1907, 2909, 2904, 3023, 806, 2649, 208,
	1593, 208, 208, 1285, 1146, 208, 208, 208, 208, 208,
	834, 1967, 208, 2571, 797, 2914, 2395, 1395, 2624, 3122,
	573, 2318, 552, 2860, 2657, 1047, 2360, 2393, 2274, 2662,
	2651, 2251, 2529, 1139, 1594, 2516, 2254, 1561, 208, 2503,
	669, 985, 573, 2476, 2309, 1807, 2995, 1789, 899, 2317,
	2117, 1786, 2492, 2311, 2287, 1542, 1778, 2810, 1779, 1706,
	2113, 1028, 2183, 1563, 2235, 1506, 1351, 1904, 3213, 2118,
	1980, 1998, 1715, 1158, 2475, 2120, 2661, 1571, 1733, 816,
	1488, 1739, 1900, 805, 139, 2356, 1035, 1692, 4, 1694,
	1382, 873, 2097, 200, 1543, 2010, 2252, 2534, 1281, 2212,
	32, 1964, 794, 2213, 2625, 1268, 86, 1148, 1294, 1278,
	1155, 2280, 1775, 1214, 2321, 1024, 504, 1992, 980, 959,
	574, 528, 2087, 2076, 3172, 2105, 1981, 146, 2044, 520,
	1552, 208, 208, 1469, 1396, 536, 2173, 147, 977, 569,
	202, 1774, 201, 1292, 575, 1394, 1795, 546, 1244, 614,
	645, 1168, 1705, 1501, 833, 523, 957, 1381, 982, 1478,
	139, 1400, 712, 727, 796, 664, 1226, 2827, 2391, 1809,
	2828, 1809, 1809, 1562, 801, 3426, 531, 1829, 2096, 2279,
	2712, 2669, 1408, 1409, 1995, 2552, 1032, 801, 1451, 1452,
	1453, 3417, 3416, 3397, 2096, 2096, 1746, 2089, 3384, 1032,
	578, 3037, 581, 1742, 3382, 1408, 1409, 3037, 1411, 2230,
	1821, 1457, 2448, 2449, 2668, 3347, 3345, 3342, 2096, 2096,
	3343, 678, 578, 2813, 581, 2448, 2449, 1011, 2096, 3339,
	832, 1411, 3340, 3336, 1410, 3312, 1746, 2141, 1746, 2200,
	849, 3269, 1430, 1408, 1409, 2410, 960, 960, 1996, 3311,
	2411, 3197, 1746, 2448, 2449, 802, 974, 1410, 3308, 3307,
	3268, 1821, 1821, 2145, 1821, 3259, 2813, 782, 3037, 1411,
	1746, 3258, 3252, 176, 3037, 1746, 3246, 781, 3244, 3037,
	3210, 3037, 2088, 2145, 3196, 2463, 3193, 1746, 3165, 3037,
	3164, 1746, 3054, 1746, 3157, 1410, 1006, 1746, 3156, 810,
	3128, 3037, 1746, 1746, 1433, 1434, 1435, 1436, 789, 3109,
	3090, 178, 2145, 2681, 1416, 963, 964, 3059, 1997, 1994,
	2096, 3053, 3036, 176, 2096, 3037, 2962, 2689, 961, 2145,
	1408, 1409, 2928, 2920, 2227, 2921, 2921, 1416, 2172, 1665,
	2833, 1448, 1458, 2834, 2454, 1438, 1439, 1440, 2823, 2816,
	2681, 2824, 2096, 176, 177, 2748, 1411, 2454, 1746, 2688,
	2489, 178, 2689, 2096, 170, 2096, 2261, 1007, 1438, 1439,
	1440, 2487, 171, 2486, 2096, 1416, 2096, 2359, 2394, 1408,
	1409, 2440, 1410, 2423, 2096, 2454, 2424, 2412, 1745, 1446,
	2096, 178, 2307, 148, 2170, 1825, 2158, 1431, 2144, 2096,
	2138, 2145, 1538, 2096, 177, 1411, 1438, 1439, 1440, 2448,
	2449, 1167, 1999, 2132, 170, 2095, 1746, 1353, 2096, 991,
	1431, 1824, 171, 1810, 1825, 1810, 1810, 2464, 2670, 965,
	962, 1410, 2448, 2449, 177, 2466, 2467, 2468, 788, 1430,
	2464, 787, 786, 148, 170, 785, 3012, 2671, 2341, 3332,
	784, 2958, 171, 176, 780, 779, 778, 777, 1431, 776,
	775, 1189, 1416, 1183, 1685, 774, 773, 1177, 2464, 208,
	772, 1437, 771, 148, 770, 769, 1479, 710, 208, 709,
	708, 707, 706, 2974, 2668, 2956, 705, 2922, 1007, 1432,
	704, 178, 2463, 703, 702, 701, 700, 699, 698, 208,
	2088, 1433, 1434, 1435, 1436, 697, 208, 696, 695, 1993,
	694, 1416, 1432, 693, 1449, 692, 691, 690, 689, 2465,
	688, 687, 208, 1050, 208, 208, 1151, 208, 1050, 208,
	1007, 686, 2465, 2150, 177, 685, 2831, 208, 208, 677,
	676, 2454, 1438, 1439, 1440, 636, 635, 594, 1034, 593,
	1432, 1048, 1039, 592, 1171, 584, 1159, 583, 1004, 582,
	2465, 559, 208, 2283, 2454, 558, 2532, 1817, 3313, 1808,
	1880, 557, 556, 148, 540, 198, 208, 197, 1151, 1151,
	208, 208, 196, 208, 195, 194, 2448, 2449, 193, 2466,
	2467, 2468, 192, 191, 1431, 208, 1447, 190, 189, 188,
	187, 186, 185, 208, 1450, 2957, 1421, 1419, 1420, 1412,
	1413, 1414, 1415, 1417, 1418, 184, 2469, 208, 208, 208,
	208, 208, 1151, 1151, 2464, 183, 1188, 1151, 1182, 208,
	1151, 208, 1412, 1413, 1414, 1415, 1417, 1418, 1022, 2450,
	2451, 2452, 2453, 2455, 2456, 182, 2463, 2464, 181, 2459,
	2457, 2458, 2450, 2451, 2452, 2453, 2455, 2456, 1142, 180,
	179, 2417, 1165, 1408, 1409, 2406, 1289, 1161, 1437, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 2267, 1151, 2457, 2458,
	2450, 2451, 2452, 2453, 2455, 2456, 1432, 2239, 1176, 1411,
	1181, 3242, 1187, 1019, 2133, 1509, 208, 1170, 1509, 2124,
	1043, 1508, 1136, 1141, 1508, 1564, 1831, 804, 2035, 1690,
	2033, 208, 1578, 1227, 1227, 1410, 2465, 578, 2454, 581,
	2031, 1169, 1512, 1495, 1490, 1507, 208, 1407, 3203, 2029,
	2027, 1173, 1041, 1231, 995, 3091, 3200, 3147, 3198, 2465,
	2448, 2449, 3016, 3084, 876, 2994, 2993, 2981, 2980, 2979,
	2978, 139, 2972, 1165, 2971, 2970, 1297, 1412, 1413, 1414,
	1415, 1417, 1418, 1272, 1275, 2448, 2449, 973, 2969, 2893,
	2469, 1282, 1830, 802, 1295, 1304, 2848, 2847, 2845, 2837,
	2807, 2806, 1307, 2805, 875, 2732, 176, 1228, 176, 176,
	2728, 2692, 176, 2527, 2483, 1416, 1388, 2474, 1387, 2447,
	2444, 2464, 2443, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 2441, 2430, 2429, 2428, 1783, 2425, 665, 2422,
	2400, 2399, 2448, 2449, 178, 2392, 178, 178, 2308, 2125,
	178, 2003, 1407, 2459, 2457, 2458, 2450, 2451, 2452, 2453,
	2455, 2456, 1490, 58, 1406, 667, 3424, 3396, 2268, 2460,
	2461, 2462, 3395, 1491, 59, 1489, 2459, 2457, 2458, 2450,
	2451, 2452, 2453, 2455, 2456, 3348, 994, 177, 63, 177,
	177, 1477, 2454, 177, 1751, 2757, 1312, 170, 1749, 170,
	170, 3303, 1326, 170, 1386, 171, 3301, 171, 171, 1380,
	3237, 171, 3234, 2465, 1686, 2214, 3233, 2454, 69, 1393,
	3232, 1385, 3228, 2355, 3222, 3192, 148, 3191, 148, 2282,
	1970, 3143, 148, 3120, 1383, 2546, 2509, 3096, 3095, 208,
	3074, 1482, 3071, 988, 3066, 1487, 3011, 2992, 75, 2942,
	2939, 2875, 2874, 782, 1408, 1409, 3083, 85, 2863, 2862,
	2819, 76, 2723, 781, 2682, 208, 2643, 831, 802, 2614,
	1540, 2595, 1549, 1389, 2454, 208, 1050, 208, 208, 208,
	1411, 1403, 1404, 987, 2574, 1151, 573, 208, 208, 1511,
	2573, 573, 208, 1976, 2548, 2488, 2421, 208, 2420, 2405,
	77, 1587, 2383, 1590, 1581, 2248, 1410, 1513, 1657, 1510,
	1502, 1499, 2154, 2153, 2128, 2110, 2094, 2025, 1660, 1473,
	1577, 1541, 1050, 2460, 2461, 2462, 1537, 2266, 1536, 1535,
	2459, 2457, 2458, 2450, 2451, 2452, 2453, 2455, 2456, 1534,
	1600, 1533, 3215, 1546, 1547, 1532, 2062, 1408, 1409, 1531,
	1691, 1530, 176, 1688, 960, 1529, 1527, 2464, 1526, 1659,
	1525, 1524, 1523, 1522, 1681, 1521, 1572, 1503, 1504, 1520,
	1519, 1518, 1517, 1411, 1516, 1515, 1492, 1474, 1625, 1472,
	139, 2574, 1467, 1018, 1009, 1560, 1416, 1001, 3070, 3013,
	178, 1832, 2966, 2844, 2826, 2822, 2409, 2147, 2111, 1410,
	3132, 3015, 2448, 2449, 2843, 1491, 2544, 1470, 802, 78,
	1584, 1573, 1414, 1415, 1417, 1418, 1685, 1438, 1439, 1440,
	1569, 2598, 3235, 1036, 2652, 3089, 3055, 1582, 2829, 1710,
	1663, 2684, 1662, 177, 1685, 1539, 2683, 1038, 1032, 1509,
	1564, 145, 81, 170, 82, 1508, 989, 1151, 208, 2465,
	1023, 171, 1378, 1325, 1050, 2427, 1559, 1684, 1566, 1685,
	1029, 1995, 1829, 176, 2426, 1589, 578, 2365, 581, 1431,
	1656, 578, 148, 581, 2034, 668, 2032, 3201, 116, 3199,
	1676, 1675, 1747, 1591, 1685, 1682, 2030, 1037, 1700, 2452,
	2453, 2455, 2456, 208, 208, 2028, 2026, 2202, 2873, 2216,
	208, 178, 3146, 1352, 1033, 767, 1497, 1671, 1677, 2629,
	208, 2628, 2450, 2451, 2452, 2453, 2455, 2456, 3175, 208,
	3123, 208, 1522, 208, 117, 1996, 1522, 208, 1353, 1780,
	2698, 2609, 972, 1728, 3399, 1730, 149, 2279, 1732, 208,
	991, 1736, 991, 768, 177, 2759, 1030, 2415, 2011, 1784,
	2152, 3333, 1528, 1031, 170, 1505, 1714, 2622, 1771, 1585,
	1597, 1432, 171, 1204, 3344, 3341, 2664, 1767, 2458, 2450,
	2451, 2452, 2453, 2455, 2456, 2855, 3283, 1679, 2905, 1151,
	208, 1151, 2315, 666, 3047, 631, 1151, 1316, 3372, 208,
	3371, 208, 208, 2556, 3251, 1997, 1994, 1202, 1192, 2159,
	761, 1151, 1151, 1868, 208, 1801, 1740, 3334, 1170, 208,
	1792, 1866, 1349, 746, 573, 208, 3421, 208, 3170, 208,
	3166, 208, 2887, 208, 2884, 1029, 800, 1770, 578, 1833,
	581, 208, 1169, 1476, 1735, 208, 763, 208, 1812, 1744,
	759, 1814, 1799, 2558, 1816, 1029, 208, 1695, 1819, 1350,
	2185, 1696, 757, 795, 754, 1038, 2883, 2852, 1695, 2851,
	2404, 2403, 1696, 632, 2402, 208, 1843, 1203, 1626, 2401,
	1760, 208, 1761, 2545, 1672, 2369, 1707, 2232, 1421, 1419,
	1420, 1412, 1413, 1414, 1415, 1417, 1418, 2226, 2223, 1999,
	1032, 1050, 2204, 800, 1038, 2140, 1348, 1680, 1951, 799,
	1384, 1759, 626, 1166, 1704, 1037, 2021, 1794, 2020, 1797,
	2176, 1030, 2275, 2176, 1909, 1309, 2131, 2597, 1031, 1908,
	1237, 2174, 1236, 3104, 2174, 802, 1295, 1708, 1709, 2166,
	1314, 1030, 751, 1884, 1887, 1256, 1697, 2188, 1031, 1600,
	1600, 1835, 1877, 2699, 1037, 1879, 2203, 1697, 1699, 3250,
	1878, 2448, 2449, 1839, 2466, 2467, 2468, 2195, 1846, 1699,
	1198, 3153, 1826, 1905, 1906, 1716, 799, 1019, 801, 1235,
	1834, 1234, 625, 1982, 1983, 999, 1050, 1625, 1625, 1418,
	3330, 1695, 1720, 3305, 1215, 1696, 1993, 1966, 2162, 1391,
	1324, 1982, 2008, 1855, 578, 1573, 581, 1966, 2194, 3043,
	2164, 1017, 1974, 1701, 2012, 1798, 2701, 1972, 1310, 2148,
	1882, 2463, 1847, 2865, 1701, 2700, 1327, 1885, 1344, 208,
	1213, 2338, 1999, 683, 1717, 3363, 2220, 2043, 2137, 2047,
	2047, 2060, 2165, 1982, 2456, 801, 2080, 2082, 998, 2344,
	1881, 2086, 2660, 1050, 208, 2163, 1686, 2214, 782, 2011,
	1886, 782, 782, 208, 1883, 1032, 208, 1212, 1896, 1050,
	1200, 1897, 1898, 1848, 1686, 2214, 1975, 2659, 996, 1345,
	1697, 1347, 2187, 1702, 1377, 1032, 3229, 2129, 634, 633,
	2606, 3371, 1699, 2454, 2739, 1482, 1215, 2130, 2601, 1686,
	2214, 2139, 2007, 2357, 2358, 1702, 1721, 2659, 1727, 802,
	1712, 3331, 798, 2617, 2448, 2449, 1702, 2466, 2467, 2468,
	2557, 2470, 802, 3411, 1686, 1683, 802, 2555, 624, 1353,
	623, 2347, 1978, 2727, 2380, 2592, 1363, 2586, 663, 1500,
	1876, 2542, 2067, 1809, 960, 2469, 2561, 1701, 2005, 208,
	3041, 3362, 2885, 2126, 2588, 2112, 2378, 1710, 627, 2122,
	2123, 2102, 3101, 2263, 2740, 2742, 2224, 1702, 2948, 1597,
	1597, 1722, 1723, 3114, 2463, 2101, 2464, 2590, 2585, 798,
	1718, 1050, 3378, 3294, 3239, 3329, 208, 1466, 2084, 2055,
	2071, 755, 2018, 1867, 208, 2186, 2121, 2019, 1315, 2092,
	2093, 1865, 2023, 2024, 208, 2002, 139, 802, 1719, 2171,
	2419, 2142, 2107, 2108, 3391, 2103, 1255, 208, 2106, 1569,
	1151, 2840, 2589, 801, 765, 2346, 1012, 764, 2943, 1895,
	2950, 755, 208, 1050, 560, 2876, 208, 208, 2175, 1702,
	1698, 1197, 2343, 756, 1511, 755, 2454, 2177, 2149, 3154,
	2866, 1698, 1332, 741, 988, 516, 988, 1600, 1999, 1999,
	2375, 2949, 208, 3100, 208, 3328, 3042, 208, 2465, 1693,
	3370, 2376, 1710, 3368, 2381, 793, 2157, 585, 3181, 511,
	2258, 2207, 208, 3073, 3266, 2249, 3361, 2647, 1311, 208,
	2221, 208, 1724, 208, 987, 1625, 987, 2270, 2469, 208,
	1773, 684, 208, 1548, 208, 752, 208, 1845, 208, 208,
	2160, 208, 1151, 1151, 1151, 2290, 1151, 2206, 2156, 2345,
	208, 208, 2371, 208, 991, 1503, 1504, 566, 1010, 2464,
	208, 1360, 1965, 2234, 1973, 2236, 2199, 1390, 1323, 1005,
	2180, 991, 503, 208, 742, 208, 2327, 2329, 997, 1016,
	1142, 2215, 2217, 2218, 2219, 1725, 2303, 2304, 1948, 2336,
	3102, 2337, 2063, 2189, 2191, 1165, 2229, 208, 208, 208,
	2233, 208, 2197, 2272, 1698, 2895, 1399, 3412, 2460, 2461,
	2462, 2241, 2205, 2243, 1731, 2459, 2457, 2458, 2450, 2451,
	2452, 2453, 2455, 2456, 208, 2222, 1170, 1810, 1711, 1673,
	3389, 2314, 3159, 1398, 2246, 3158, 2292, 3141, 3034, 568,
	2535, 2990, 3406, 2377, 2796, 3264, 578, 1361, 581, 2262,
	2237, 2465, 2379, 3219, 3046, 2328, 2281, 2236, 2281, 2236,
	2330, 3045, 2331, 1670, 3031, 2854, 1466, 3024, 139, 2285,
	3240, 1165, 1165, 2305, 3265, 2648, 2299, 2296, 2569, 2297,
	3022, 2298, 2518, 2565, 2271, 2253, 3026, 989, 2300, 989,
	2250, 2301, 1793, 1295, 2306, 1782, 2342, 2316, 3390, 1702,
	1781, 1755, 2738, 586, 587, 3032, 1873, 1597, 1892, 3274,
	2208, 1666, 1398, 2910, 3077, 743, 2247, 1362, 1946, 1949,
	1397, 2372, 1258, 208, 2098, 3142, 2397, 2398, 1668, 1738,
	3392, 1165, 1962, 562, 1333, 3025, 2349, 2576, 2821, 2408,
	2575, 2407, 2363, 1313, 1669, 741, 2352, 1555, 1840, 1737,
	567, 1399, 2502, 2519, 1960, 2354, 2501, 2136, 2135, 2134,
	512, 2460, 2461, 2462, 2260, 1229, 1945, 793, 2459, 2457,
	2458, 2450, 2451, 2452, 2453, 2455, 2456, 1734, 2797, 2351,
	1558, 2991, 1230, 682, 2798, 799, 3405, 3224, 3063, 2100,
	564, 589, 588, 2517, 2099, 2693, 1243, 1791, 2104, 1397,
	1708, 1709, 3044, 3149, 2067, 2067, 2619, 1893, 3375, 1551,
	2370, 1050, 513, 1556, 3173, 3241, 2490, 744, 2485, 675,
	3139, 2497, 2498, 1241, 3277, 3225, 2996, 561, 2811, 2016,
	208, 3377, 518, 208, 2499, 3346, 742, 802, 3236, 2496,
	208, 590, 591, 208, 208, 1050, 3027, 2209, 2210, 3028,
	514, 3119, 515, 2989, 1050, 745, 3140, 2889, 1956, 2477,
	1375, 208, 1357, 565, 2722, 2414, 1957, 1355, 3324, 1958,
	2522, 2539, 1963, 2525, 563, 1555, 208, 2540, 2442, 2382,
	2536, 3150, 2533, 3278, 3226, 1343, 3030, 2520, 2257, 1864,
	2231, 1947, 2551, 1341, 208, 208, 208, 2201, 3033, 2155,
	208, 1579, 1339, 208, 2067, 2067, 2067, 1576, 1558, 1557,
	208, 208, 208, 208, 208, 2553, 1600, 2531, 1376, 1305,
	2562, 2563, 3034, 2513, 208, 208, 1553, 2494, 2559, 2478,
	2530, 795, 208, 2523, 2524, 2512, 2577, 1337, 2580, 2508,
	2543, 1556, 2507, 2491, 208, 1151, 2340, 208, 3031, 2526,
	1335, 2339, 1600, 1050, 1625, 2521, 2506, 2480, 2481, 2482,
	1050, 2566, 1329, 1554, 2578, 208, 2582, 2583, 208, 208,
	1239, 2333, 1875, 1852, 1658, 2015, 2570, 743, 208, 680,
	681, 1151, 208, 1514, 1151, 1151, 1151, 1242, 2533, 3032,
	1625, 208, 1308, 2537, 2538, 1219, 3271, 208, 3020, 3029,
	753, 2600, 2636, 208, 2632, 208, 1374, 2750, 1356, 2908,
	2554, 1959, 208, 1354, 1240, 673, 674, 2607, 2871, 1288,
	1961, 2869, 2560, 517, 2063, 2063, 2853, 2646, 2631, 2663,
	2511, 1342, 1863, 2630, 2514, 1151, 1151, 1557, 2663, 1340,
	2276, 2265, 2264, 208, 208, 2591, 2244, 208, 1338, 2596,
	1823, 2680, 2654, 2615, 2655, 1822, 1820, 1700, 988, 2593,
	1818, 2594, 208, 2602, 1050, 208, 208, 1050, 208, 2611,
	2666, 2696, 2616, 2549, 2550, 988, 2603, 1770, 2605, 744,
	2604, 1815, 1700, 1336, 208, 2206, 1813, 2650, 1811, 2612,
	991, 2613, 1159, 1802, 1752, 1048, 1334, 2610, 987, 1750,
	1741, 1729, 2674, 2675, 2676, 991, 2677, 2678, 1328, 1726,
	1713, 1703, 1740, 3185, 1551, 987, 1238, 745, 1740, 969,
	2665, 758, 760, 1401, 2063, 2063, 2063, 1050, 2672, 991,
	3027, 1586, 2706, 3028, 2695, 2691, 1597, 3372, 1050, 3297,
	208, 3093, 3092, 970, 2725, 2361, 1689, 2653, 907, 802,
	1194, 139, 2176, 2176, 1600, 2747, 2679, 2176, 3187, 2193,
	2919, 1372, 1373, 2174, 2192, 1710, 2753, 1849, 2190, 1870,
	3030, 3231, 1597, 3205, 2997, 2211, 2196, 2703, 1405, 2228,
	1555, 2198, 3033, 3270, 2734, 2735, 2736, 204, 3243, 506,
	507, 519, 1625, 524, 506, 524, 534, 539, 2760, 2708,
	555, 1165, 2710, 1600, 1600, 1402, 2707, 2899, 204, 2894,
	2067, 2067, 1585, 1558, 2836, 2704, 2362, 1408, 1409, 1600,
	1600, 2284, 2730, 2085, 2808, 971, 672, 1905, 2766, 1661,
	204, 1553, 1592, 208, 2741, 2743, 2744, 3387, 530, 2541,
	3404, 1625, 1625, 1905, 2776, 1479, 1556, 208, 2756, 2842,
	1600, 2762, 2749, 1050, 2745, 2763, 2168, 1625, 1625, 2967,
	2765, 989, 2448, 2449, 1408, 1409, 2168, 2167, 1554, 1410,
	2547, 2830, 2169, 208, 2804, 2022, 2775, 2017, 989, 2800,
	2773, 2838, 1990, 3029, 2841, 2505, 1408, 1409, 1625, 2849,
	2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067,
	2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2737,
	2067, 2801, 1411, 1477, 2236, 2814, 2815, 2812, 208, 506,
	506, 1359, 1318, 2825, 1358, 3413, 1475, 204, 1317, 3216,
	3133, 3131, 139, 3087, 3065, 2877, 3014, 2809, 1410, 2817,
	2818, 2938, 1557, 2927, 2761, 2903, 2892, 2891, 2890, 2868,
	208, 208, 208, 2673, 2886, 2644, 2832, 2642, 2335, 2334,
	2294, 2888, 2269, 2245, 1977, 1862, 1861, 1050, 208, 1805,
	1804, 1803, 1151, 1785, 1597, 1763, 1762, 1758, 1757, 1756,
	2881, 1754, 1753, 1392, 1371, 1370, 2870, 1346, 2872, 208,
	1330, 1267, 1266, 1265, 2857, 1264, 2923, 1263, 1262, 1261,
	2839, 1260, 208, 208, 1151, 1151, 1151, 1259, 208, 208,
	208, 1257, 1252, 208, 208, 2290, 2912, 1251, 1250, 2882,
	208, 1249, 1248, 1597, 1597, 2898, 1211, 1210, 1209, 2934,
	2063, 2063, 2915, 1050, 2504, 1208, 2947, 1207, 2206, 1597,
	1597, 2911, 1206, 2916, 1205, 1199, 1193, 1191, 1190, 1015,
	791, 1014, 741, 944, 854, 2236, 1664, 2902, 2900, 766,
	618, 750, 3152, 1365, 74, 1201, 605, 2906, 2846, 2965,
	1597, 68, 2913, 2867, 793, 2917, 3282, 739, 208, 2584,
	1851, 1331, 2925, 2924, 2961, 1770, 1853, 2930, 2935, 2936,
	2510, 2109, 3263, 2975, 1600, 2929, 2418, 3211, 2952, 2937,
	3113, 2941, 991, 991, 2940, 2014, 1496, 2494, 70, 792,
	2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
	2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2945,
	2063, 842, 1625, 2953, 927, 3021, 2856, 2320, 2319, 809,
	208, 1053, 1674, 742, 848, 1687, 2151, 2046, 1596, 851,
	1050, 1598, 1050, 853, 206, 2901, 3002, 852, 1599, 1498,
	850, 1595, 2259, 2288, 1246, 729, 1678, 1971, 2009, 2413,
	1493, 822, 208, 208, 208, 844, 2006, 2988, 1008, 821,
	3009, 2515, 2658, 2835, 208, 1144, 3082, 1891, 2353, 1888,
	208, 621, 208, 2445, 988, 208, 208, 208, 3017, 3018,
	3040, 1991, 1000, 2068, 208, 208, 1151, 2061, 1050, 988,
	1151, 3050, 3051, 2057, 3039, 1379, 3048, 1468, 3001, 2289,
	3004, 2999, 3000, 3006, 1040, 825, 208, 3010, 1969, 1050,
	1484, 2387, 1151, 988, 987, 3019, 2530, 1220, 1223, 2528,
	2667, 2146, 208, 1899, 1772, 3049, 968, 3067, 3038, 987,
	3007, 2998, 967, 3061, 966, 3288, 3285, 1002, 2946, 3003,
	1667, 2161, 1460, 208, 2633, 838, 672, 1164, 2663, 1050,
	991, 2495, 2694, 987, 1216, 3230, 3079, 1459, 3057, 3097,
	3056, 762, 3221, 1027, 743, 1026, 1025, 1013, 2568, 1301,
	3068, 3094, 3410, 2864, 555, 1050, 175, 1048, 3088, 3081,
	2655, 3078, 3080, 172, 820, 174, 173, 2879, 3060, 2618,
	204, 3086, 204, 204, 1597, 1156, 90, 204, 37, 36,
	35, 17, 115, 3111, 114, 204, 1172, 113, 112, 3075,
	111, 110, 109, 1050, 3103, 108, 1319, 3125, 1770, 107,
	3105, 208, 106, 208, 3005, 1050, 208, 105, 104, 103,
	1196, 2384, 2385, 3121, 208, 3064, 3110, 102, 101, 100,
	3069, 3111, 99, 1600, 1218, 98, 97, 96, 204, 204,
	95, 1156, 94, 1908, 93, 208, 92, 91, 3136, 3126,
	3127, 3085, 34, 204, 790, 551, 744, 208, 548, 50,
	49, 1254, 89, 88, 208, 16, 3135, 989, 33, 1151,
	3177, 1625, 3134, 14, 208, 204, 204, 204, 204, 1156,
	54, 55, 989, 3169, 991, 13, 29, 555, 1600, 204,
	3186, 3155, 991, 3178, 745, 208, 3180, 30, 3129, 2067,
	80, 79, 28, 15, 3190, 991, 989, 3167, 27, 3184,
	25, 26, 3161, 3183, 208, 3176, 11, 3194, 3195, 8,
	208, 2471, 2472, 2473, 3162, 3163, 1625, 7, 10, 12,
	208, 3189, 24, 144, 3188, 143, 2915, 73, 3182, 142,
	72, 141, 2067, 140, 71, 23, 3227, 9, 22, 136,
	3218, 3209, 67, 138, 204, 137, 64, 135, 3204, 134,
	2655, 1600, 3217, 65, 133, 132, 66, 131, 21, 204,
	5, 53, 208, 1151, 3238, 6, 3098, 2697, 208, 83,
	84, 31, 1151, 1151, 539, 62, 61, 60, 20, 3257,
	208, 52, 208, 19, 166, 165, 164, 163, 3130, 1625,
	159, 158, 162, 160, 161, 3245, 3261, 157, 3262, 3249,
	3214, 130, 168, 208, 167, 3267, 155, 3248, 3260, 208,
	208, 3279, 1050, 152, 151, 3255, 3256, 154, 156, 2067,
	208, 3253, 153, 150, 3290, 3280, 169, 3298, 129, 57,
	3300, 128, 3302, 3254, 3291, 127, 126, 3295, 125, 124,
	1908, 56, 3309, 1597, 3310, 3284, 18, 2, 1, 0,
	208, 0, 0, 3292, 0, 0, 0, 0, 0, 0,
	3306, 3335, 3304, 0, 0, 0, 988, 988, 0, 0,
	3320, 3321, 0, 0, 3323, 3322, 0, 0, 0, 0,
	0, 0, 3349, 0, 1588, 3351, 208, 3353, 0, 0,
	0, 3337, 0, 3358, 0, 3359, 0, 0, 1597, 0,
	0, 3350, 0, 3360, 3355, 208, 987, 987, 0, 2063,
	3356, 3357, 2290, 3352, 0, 3354, 0, 0, 0, 0,
	0, 0, 0, 3369, 3367, 3366, 0, 0, 0, 208,
	0, 3373, 3374, 0, 3290, 3381, 0, 3383, 3376, 0,
	0, 0, 3380, 3386, 3385, 3379, 0, 0, 0, 0,
	0, 0, 2063, 0, 0, 0, 0, 0, 0, 0,
	0, 3394, 3393, 0, 3299, 820, 3401, 506, 3400, 820,
	3402, 1597, 0, 0, 3403, 0, 3407, 1134, 0, 0,
	0, 0, 1134, 0, 0, 3414, 0, 3415, 204, 0,
	204, 0, 0, 204, 0, 3408, 3409, 0, 3418, 3419,
	3420, 3422, 3423, 1172, 0, 1156, 204, 0, 0, 0,
	3427, 0, 0, 0, 204, 1172, 524, 2718, 2719, 204,
	1172, 0, 0, 0, 3425, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 2063,
	0, 0, 0, 0, 0, 0, 1743, 0, 0, 0,
	0, 0, 0, 0, 0, 1550, 0, 0, 0, 0,
	2448, 2449, 0, 2466, 2467, 2468, 0, 0, 0, 989,
	989, 0, 0, 0, 987, 0, 0, 0, 0, 2726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2777, 2778, 2779,
	2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789,
	2790, 2791, 2792, 2793, 2794, 2795, 0, 2799, 0, 0,
	2463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 1408, 1409, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 204, 0, 988, 0,
	1827, 0, 0, 63, 0, 0, 988, 0, 0, 0,
	0, 1411, 2454, 0, 0, 0, 0, 0, 0, 988,
	1841, 1842, 0, 0, 0, 808, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 1410, 987, 0,
	0, 204, 204, 0, 0, 1430, 987, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 1790, 987,
	0, 0, 0, 75, 2469, 0, 0, 204, 0, 204,
	0, 204, 85, 0, 0, 506, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1806, 0, 0,
	0, 2721, 0, 0, 0, 2464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 1434, 1435,
	1436, 0, 0, 0, 0, 77, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 1156,
	204, 0, 0, 0, 0, 0, 0, 0, 1438, 1439,
	1440, 0, 555, 0, 0, 655, 0, 204, 0, 0,
	0, 0, 204, 204, 0, 204, 0, 204, 0, 204,
	0, 204, 0, 0, 0, 0, 0, 0, 637, 1869,
	0, 0, 0, 1871, 0, 1872, 0, 2465, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	1431, 989, 0, 0, 0, 0, 0, 2143, 638, 989,
	0, 0, 0, 539, 0, 0, 0, 639, 0, 555,
	0, 0, 989, 0, 78, 0, 0, 0, 0, 0,
	1134, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 0,
	0, 0, 0, 0, 0, 0, 145, 81, 0, 82,
	0, 0, 0, 641, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 1437, 0, 1134, 0, 176, 0,
	642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 1432, 116, 0, 0, 0, 2460, 2461, 2462,
	643, 0, 0, 644, 2459, 2457, 2458, 2450, 2451, 2452,
	2453, 2455, 2456, 0, 0, 0, 178, 0, 0, 1408,
	1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0,
	659, 0, 0, 0, 0, 0, 0, 0, 1444, 117,
	0, 0, 0, 0, 0, 1411, 0, 0, 1457, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 0, 0, 506, 0, 170,
	0, 1410, 0, 0, 0, 0, 0, 171, 0, 1430,
	0, 0, 204, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 506, 0, 0, 0, 0, 0, 148, 204,
	0, 506, 0, 0, 204, 0, 0, 0, 1134, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0,
	0, 646, 0, 0, 0, 0, 808, 0, 0, 2225,
	808, 0, 0, 0, 0, 0, 0, 663, 647, 0,
	0, 1433, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 0, 0, 3118, 0, 0, 0,
	0, 0, 1174, 0, 1178, 662, 1184, 0, 0, 0,
	0, 0, 648, 0, 0, 649, 0, 0, 1448, 1458,
	0, 657, 1438, 1439, 1440, 0, 0, 524, 650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3144,
	0, 0, 0, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1425, 1426, 0, 0, 0, 0, 651, 658, 0,
	0, 2302, 0, 0, 2184, 0, 1446, 652, 0, 0,
	0, 0, 204, 0, 1431, 0, 0, 0, 654, 0,
	0, 0, 204, 653, 0, 0, 0, 0, 0, 1303,
	0, 0, 1456, 0, 661, 204, 1306, 0, 0, 0,
	0, 0, 1479, 0, 0, 656, 0, 1445, 2448, 2449,
	204, 2466, 2467, 2468, 204, 2238, 0, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 3208, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 1172, 0, 0, 204, 63, 0, 1437, 0,
	2448, 2449, 0, 2466, 2467, 2468, 0, 0, 0, 0,
	1790, 0, 0, 0, 0, 0, 1432, 2184, 2463, 506,
	0, 2293, 0, 0, 0, 0, 69, 204, 0, 0,
	204, 0, 204, 0, 204, 1134, 204, 204, 0, 1156,
	0, 1449, 0, 0, 0, 0, 0, 0, 2312, 672,
	0, 2184, 0, 0, 0, 0, 75, 0, 204, 0,
	2463, 0, 0, 0, 0, 85, 0, 0, 0, 76,
	0, 1172, 0, 1172, 0, 0, 0, 1461, 1462, 1463,
	1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	2454, 0, 0, 0, 0, 204, 204, 204, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 1481, 77, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	1134, 0, 204, 1447, 0, 0, 1422, 1423, 1429, 1428,
	1424, 1450, 2454, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 2469, 0, 0, 0, 2984, 0, 0, 2983,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	58, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 59, 118, 0, 0, 2464, 0, 78, 0, 0,
	0, 1172, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 1544, 1544, 1544, 0, 0, 0, 0, 0,
	39, 120, 0, 0, 0, 0, 0, 0, 0, 145,
	81, 0, 82, 38, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2465, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 41, 0, 0, 0, 0,
	42, 0, 0, 668, 0, 75, 116, 0, 121, 0,
	0, 0, 0, 40, 85, 0, 0, 0, 76, 43,
	0, 808, 0, 0, 0, 0, 0, 2465, 204, 178,
	0, 0, 0, 0, 2608, 1134, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 44, 0, 0, 506, 0,
	0, 506, 117, 0, 0, 0, 0, 77, 506, 0,
	0, 506, 506, 0, 149, 0, 0, 204, 0, 0,
	2637, 0, 177, 2639, 2640, 2641, 0, 0, 0, 1172,
	0, 0, 170, 0, 0, 0, 0, 1134, 0, 0,
	171, 0, 0, 0, 1172, 2460, 2461, 2462, 0, 0,
	0, 0, 2459, 2457, 2458, 2450, 2451, 2452, 2453, 2455,
	2456, 148, 2184, 2184, 204, 0, 0, 0, 2184, 0,
	0, 2572, 0, 0, 2686, 2687, 0, 0, 2184, 2572,
	2184, 2572, 2572, 0, 0, 0, 0, 2460, 2461, 2462,
	0, 0, 204, 204, 2459, 2457, 2458, 2450, 2451, 2452,
	2453, 2455, 2456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 1156, 78, 1408, 1409, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 2621, 0, 0, 2623, 2626, 0, 0,
	0, 0, 0, 1411, 0, 0, 204, 48, 145, 81,
	204, 82, 0, 46, 0, 0, 0, 122, 0, 204,
	0, 0, 0, 47, 0, 1156, 0, 0, 0, 1410,
	176, 2184, 0, 506, 0, 0, 0, 0, 0, 0,
	2184, 0, 51, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	0, 204, 1790, 0, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2702, 117, 0, 1156, 204, 0, 204, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 1416,
	0, 177, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2758, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 1889, 0, 1894, 0, 0, 0, 0,
	0, 1901, 0, 0, 0, 0, 0, 0, 1910, 1911,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 0, 1950, 1134, 1952, 1953, 1954, 1955,
	204, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 506, 0, 0, 0, 0, 1979, 0, 0, 0,
	0, 0, 0, 0, 0, 506, 0, 0, 0, 1134,
	0, 1481, 0, 0, 1432, 2004, 0, 0, 1134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1172, 0, 2931, 2932, 2933, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 0, 0, 820, 0, 2059, 0, 2070,
	2072, 2077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2896, 204,
	204, 0, 0, 0, 0, 0, 0, 1134, 0, 0,
	0, 0, 0, 0, 1134, 0, 204, 0, 0, 0,
	0, 0, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
	0, 0, 0, 0, 0, 0, 0, 2184, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2312, 2312, 0, 0, 0, 0, 672, 672, 2184, 0,
	0, 1790, 1790, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	1444, 1134, 0, 205, 0, 3058, 2976, 1411, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 2240, 205, 2242, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 204, 0, 0, 0, 0, 0, 1172, 0,
	204, 0, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 0, 0,
	2184, 2184, 2184, 1433, 1434, 1435, 1436, 63, 0, 0,
	0, 0, 1172, 1416, 0, 0, 0, 0, 2184, 0,
	2572, 0, 0, 1172, 1172, 204, 0, 0, 0, 0,
	0, 0, 204, 204, 0, 0, 0, 69, 0, 0,
	1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 3072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1455, 75, 843, 87,
	2184, 0, 0, 1425, 1426, 0, 85, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 1134, 1446, 0,
	0, 1172, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2367, 2368, 0, 0, 87, 0, 2374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2388, 2389, 0, 2184,
	1437, 2572, 2004, 0, 3138, 0, 0, 0, 0, 0,
	0, 2396, 204, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1134, 0, 555, 0, 0, 0, 2416, 783, 0,
	0, 0, 0, 1449, 0, 2626, 0, 803, 0, 0,
	0, 2431, 204, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 1172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	145, 81, 0, 82, 0, 0, 0, 1134, 0, 2077,
	2077, 2077, 2758, 0, 0, 0, 0, 0, 506, 0,
	0, 0, 176, 0, 1544, 0, 0, 0, 3138, 0,
	0, 0, 2500, 0, 668, 1447, 0, 116, 1422, 1423,
	1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413,
	1414, 1415, 1417, 1418, 58, 0, 0, 0, 2436, 0,
	178, 2437, 0, 0, 0, 59, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 2572, 0, 0, 63,
	0, 0, 0, 117, 0, 0, 0, 0, 1172, 0,
	1172, 0, 0, 808, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 808, 0, 0, 69,
	0, 3275, 0, 170, 0, 0, 0, 1172, 204, 0,
	0, 171, 0, 0, 1134, 0, 1134, 0, 204, 0,
	0, 2587, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 148, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 2758, 0,
	0, 0, 0, 0, 0, 0, 205, 1055, 205, 205,
	1055, 0, 1055, 205, 0, 0, 0, 0, 0, 0,
	0, 205, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 2184, 0, 0, 0, 0, 0,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3138, 0, 2656, 0, 0, 0, 0,
	0, 0, 1055, 1055, 205, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1172, 0, 205,
	0, 0, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 205, 205, 205, 0, 1055, 1055, 0, 1134,
	0, 1055, 0, 0, 1055, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1408, 1409, 0, 0, 0,
	0, 2709, 0, 0, 0, 1901, 0, 0, 0, 0,
	78, 2713, 2714, 0, 0, 2717, 0, 1134, 0, 2720,
	0, 1411, 0, 0, 0, 0, 0, 0, 2724, 1134,
	0, 1055, 0, 0, 0, 0, 0, 2731, 0, 0,
	2500, 0, 145, 81, 0, 82, 0, 1410, 0, 0,
	205, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	820, 2751, 0, 0, 176, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 668, 0, 0, 116,
	2767, 2768, 0, 2769, 2770, 2771, 0, 0, 2772, 0,
	0, 0, 2774, 0, 0, 0, 0, 0, 0, 0,
	0, 2716, 178, 0, 0, 0, 87, 0, 87, 0,
	87, 0, 0, 0, 0, 0, 0, 1433, 1434, 1435,
	1436, 0, 0, 2802, 2803, 117, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 1408, 1409, 177, 0, 0, 0, 0,
	0, 2820, 0, 0, 0, 170, 0, 0, 1438, 1439,
	1440, 0, 0, 171, 0, 1408, 1409, 0, 0, 1411,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1298, 803, 87, 0, 0, 0,
	0, 1411, 0, 87, 0, 1410, 0, 0, 0, 0,
	87, 0, 0, 1430, 2850, 0, 0, 0, 0, 203,
	1431, 0, 0, 0, 0, 0, 0, 1410, 0, 2858,
	2861, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	579, 0, 0, 0, 0, 0, 1134, 0, 0, 0,
	820, 0, 2878, 0, 0, 0, 0, 0, 0, 2715,
	0, 0, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 1435, 1436, 0,
	0, 2373, 0, 0, 0, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 1433, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 1416, 0, 205,
	0, 0, 1432, 0, 0, 1544, 1438, 1439, 1440, 0,
	1055, 0, 205, 205, 0, 0, 2926, 0, 0, 1055,
	205, 0, 0, 0, 783, 205, 0, 0, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 1055, 0, 1431, 0,
	1480, 2954, 2955, 0, 1486, 0, 0, 2959, 2960, 0,
	0, 0, 2963, 2964, 0, 0, 0, 0, 0, 2968,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 2973, 0,
	0, 0, 0, 0, 0, 2977, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 0, 0, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0,
	0, 0, 1437, 0, 0, 0, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 572, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 616, 0, 0,
	0, 0, 1432, 0, 572, 0, 0, 0, 0, 0,
	0, 1055, 205, 0, 0, 0, 0, 598, 1055, 0,
	599, 0, 0, 0, 0, 87, 0, 0, 1565, 0,
	1568, 0, 0, 0, 0, 0, 622, 0, 2861, 0,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 0, 0, 0, 205, 205, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 601, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 205, 0, 205, 602, 0,
	0, 603, 626, 0, 0, 0, 629, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2861, 0, 0, 0, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0,
	0, 0, 3106, 3107, 3108, 0, 0, 0, 0, 0,
	0, 0, 0, 1055, 0, 1055, 0, 0, 0, 0,
	1055, 0, 878, 205, 0, 0, 205, 0, 3116, 3117,
	0, 0, 625, 0, 0, 1055, 1055, 0, 0, 606,
	0, 0, 3124, 205, 0, 0, 0, 0, 205, 205,
	0, 205, 0, 205, 0, 205, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	205, 0, 0, 2861, 0, 0, 0, 0, 0, 0,
	0, 3160, 0, 0, 0, 0, 608, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2861, 0, 0,
	2861, 0, 0, 628, 0, 1055, 0, 0, 0, 0,
	0, 0, 203, 609, 203, 203, 0, 0, 0, 203,
	0, 2861, 2861, 0, 0, 0, 610, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	0, 0, 1408, 1409, 0, 611, 0, 0, 624, 0,
	623, 0, 0, 0, 0, 612, 0, 0, 0, 3220,
	203, 203, 3223, 0, 0, 0, 613, 0, 1411, 0,
	0, 619, 0, 0, 0, 203, 630, 0, 627, 0,
	1055, 0, 617, 0, 0, 0, 0, 803, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 203, 203, 203,
	203, 0, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 2366, 0,
	0, 808, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 1055, 1433, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 0, 1416, 0, 203, 0, 0, 0,
	3319, 3319, 3319, 0, 0, 0, 0, 0, 0, 783,
	0, 203, 783, 783, 0, 0, 0, 0, 0, 3338,
	0, 0, 0, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 1408, 1409, 0, 0, 0, 0, 2861, 0, 2861,
	0, 0, 0, 0, 0, 1051, 0, 0, 1152, 0,
	1051, 0, 3319, 0, 0, 0, 0, 1411, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 803, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 1480, 1055, 0, 0, 1480, 0,
	1152, 1152, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 3319, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 1152, 205, 1055, 0, 1152,
	205, 1437, 1152, 1433, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 978, 1416, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 1568,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 1439, 1440, 0, 0, 1152,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 205, 0, 205, 0,
	205, 0, 205, 205, 0, 0, 1055, 1055, 1055, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1567, 0, 990, 0, 205, 203, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 1567,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	0, 579, 0, 0, 0, 1052, 0, 0, 1153, 0,
	1052, 205, 205, 205, 0, 205, 1421, 1419, 1420, 1412,
	1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1153, 1153, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1153, 1153, 0, 0, 0, 1153,
	0, 0, 1153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 1153,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1419, 1420, 1412, 1413,
	1414, 1415, 1417, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 203, 0, 0, 0, 1051, 0,
	203, 0, 0, 0, 0, 0, 0, 1152, 572, 0,
	0, 0, 0, 572, 0, 1055, 0, 0, 0, 203,
	0, 203, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1051, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 1480,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 579, 203, 0, 203, 0, 203,
	0, 203, 0, 203, 0, 0, 0, 0, 205, 205,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 205, 1055,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 0, 0, 1152,
	0, 0, 0, 0, 0, 0, 1051, 0, 0, 0,
	0, 0, 205, 0, 0, 1055, 205, 0, 1055, 1055,
	1055, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 983, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 978, 0, 0, 0, 1153, 0, 1055,
	1055, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 0,
	205, 1055, 205, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1152, 711, 1152, 741, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1152, 1152, 0, 718, 87, 0, 87,
	0, 1055, 0, 0, 990, 0, 572, 0, 716, 0,
	0, 0, 1055, 0, 0, 0, 0, 0, 0, 0,
	0, 990, 0, 0, 0, 0, 203, 87, 0, 87,
	0, 717, 0, 0, 0, 0, 719, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 725, 726, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 720, 0, 0, 1153,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 803, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 0, 0, 1055, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 722, 723, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 1051, 728,
	0, 0, 0, 0, 0, 0, 724, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 203, 0, 0, 0, 579, 0, 0, 0,
	0, 1153, 0, 1153, 0, 0, 743, 0, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 1153, 1153, 205, 205, 203, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 1055, 205, 0, 0, 0, 1055, 0, 0, 0,
	0, 1051, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 203, 0, 203, 0, 203, 0, 203, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 1055, 1055,
	1055, 0, 0, 737, 0, 0, 0, 87, 0, 0,
	203, 0, 0, 731, 205, 0, 0, 0, 0, 732,
	978, 978, 0, 0, 0, 0, 713, 1055, 744, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 714, 0, 0, 0, 0, 203, 203, 203,
	0, 203, 733, 0, 0, 0, 730, 0, 87, 0,
	748, 749, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 734, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 1052, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1045,
	0, 0, 0, 0, 0, 0, 1163, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 978, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 205, 205,
	1055, 1052, 1055, 0, 1055, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 1152, 1152, 0, 1152, 0,
	0, 0, 0, 1055, 0, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 1055, 1271, 1271, 1271, 1163, 0, 0,
	0, 0, 0, 0, 0, 990, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1055,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 978, 0, 0, 0, 0, 0, 0, 1055,
	978, 0, 0, 1364, 0, 0, 203, 0, 205, 0,
	0, 0, 1153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 203, 0, 0, 0, 0,
	0, 0, 1567, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 1055, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 87, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 87,
	0, 203, 0, 0, 1153, 1153, 1153, 0, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1051, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 205, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 1055, 1055, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 1051, 203, 0,
	0, 0, 0, 0, 0, 0, 1051, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 1055, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1583, 0, 0, 1968, 0,
	0, 0, 0, 0, 0, 0, 0, 1152, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1152, 0, 0, 1152, 1152, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 990, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1152, 1152, 0,
	0, 0, 0, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1051, 0, 0, 1051,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	0, 203, 203, 0, 0, 0, 0, 0, 0, 0,
	1051, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	1765, 0, 0, 0, 0, 0, 0, 1777, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 1247, 1153, 1796, 0,
	1796, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1153, 0, 0, 1153, 1153, 1153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1777, 0, 0, 1837,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1850, 1153, 1153, 0,
	0, 0, 1856, 0, 1857, 0, 1858, 0, 1859, 0,
	1860, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1052, 0, 0, 1052,
	0, 0, 0, 1874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1567, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1051,
	1052, 0, 0, 0, 1152, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 203, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1152, 1152, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1408, 1409, 0, 1441, 1442,
	1443, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1411, 0, 0, 1457, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1410, 0, 0,
	0, 0, 0, 2127, 0, 1430, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 1051, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 1433, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1052,
	0, 0, 0, 0, 1153, 203, 0, 0, 1152, 0,
	1051, 0, 1152, 0, 1448, 1458, 0, 0, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1051, 0, 0, 1152, 0, 1153, 1153, 1153, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1425, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 1052, 0, 0, 0, 0,
	1431, 1051, 0, 0, 0, 0, 0, 0, 0, 1163,
	0, 0, 203, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 1051, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 2256,
	0, 0, 0, 0, 1777, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	203, 0, 0, 0, 1437, 0, 2295, 1051, 0, 1271,
	0, 1271, 0, 1271, 0, 1163, 1163, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2332, 0, 0,
	0, 0, 1052, 0, 1052, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1408,
	1409, 1152, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 2348, 1163, 2350, 0, 1444, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 0,
	1052, 2364, 1153, 0, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 1430,
	0, 1052, 0, 0, 1153, 0, 1427, 0, 0, 1447,
	0, 0, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0,
	0, 0, 2000, 0, 0, 2001, 0, 0, 0, 0,
	0, 1052, 0, 0, 0, 1152, 0, 0, 0, 0,
	0, 0, 0, 0, 1152, 1152, 0, 0, 0, 0,
	0, 1433, 1434, 1435, 1436, 0, 0, 1052, 0, 0,
	0, 1416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1051, 0, 0, 0, 1448, 1458,
	0, 0, 1438, 1439, 1440, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1153, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 2564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 1153, 0, 0, 0, 0,
	0, 2599, 2256, 0, 1153, 1153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2634, 0, 0, 0, 2638,
	0, 0, 0, 0, 0, 0, 0, 0, 2645, 0,
	0, 0, 0, 1447, 0, 0, 1422, 1423, 1429, 1428,
	1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 0, 0, 0, 0, 0, 0, 0, 2982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2705, 0, 1163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 2897, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 2907, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 2944, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 1622,
	444, 447, 448, 449, 1296, 499, 500, 0, 451, 450,
	501, 0, 0, 0, 170, 452, 453, 502, 454, 455,
	456, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1634, 1616, 1623, 1606,
	1644, 1643, 0, 148, 1608, 1607, 0, 0, 0, 0,
	0, 0, 1654, 1655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3052, 0, 0, 0, 0, 0,
	0, 2256, 1645, 0, 1641, 1640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 1636, 1637, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1627,
	1621, 1629, 1631, 1632, 1633, 1628, 0, 1626, 0, 0,
	0, 0, 0, 0, 0, 0, 1650, 1651, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3145, 1642, 0, 0, 0, 1619, 0, 1620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3179, 0, 0, 0, 0, 1635, 0, 0, 0,
	1603, 1601, 1602, 1605, 1604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1611, 1612, 1614, 1615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1630, 1613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1653, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1609,
	0, 1646, 1647, 1648, 1649, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3247,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1617,
	0, 0, 0, 0, 1624, 1652, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 0, 0, 3281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3296, 213, 214,
	215, 216, 217, 1056, 218, 1057, 1058, 1059, 1060, 457,
	1061, 1062, 1063, 1064, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 1065, 225, 226, 227, 228, 229,
	230, 1066, 1067, 231, 462, 463, 464, 1068, 232, 465,
	1069, 1054, 1070, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1071, 242, 0, 243, 244, 245, 1072,
	929, 246, 247, 1073, 1074, 1076, 1075, 1077, 1078, 1079,
	248, 249, 250, 251, 252, 253, 466, 467, 1080, 254,
	1081, 256, 255, 1082, 257, 1083, 1084, 258, 259, 260,
	1085, 261, 1086, 262, 263, 1087, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 1088, 210, 1089,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 1090, 280, 1091, 1092, 930, 281, 282, 1093,
	283, 472, 1094, 473, 284, 1095, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 932, 1096, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 1097, 931,
	296, 477, 298, 297, 299, 300, 301, 478, 1098, 479,
	1099, 303, 933, 934, 304, 305, 306, 935, 307, 308,
	0, 0, 309, 310, 311, 312, 1100, 314, 313, 1101,
	315, 481, 936, 316, 317, 937, 1102, 318, 319, 1103,
	1104, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 938, 332, 333, 335, 334, 1105,
	212, 939, 1106, 482, 483, 336, 337, 1107, 338, 339,
	340, 1108, 1109, 342, 343, 344, 1110, 1111, 345, 484,
	940, 346, 941, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 1112, 354, 355, 486, 356, 487, 357, 1113,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 1114, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1115, 380, 942, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1116, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1117, 407, 387, 388, 408,
	943, 409, 490, 410, 411, 1118, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 1119, 423,
	424, 422, 1120, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1121, 492, 493, 494, 495, 1122, 1123, 432,
	433, 496, 434, 497, 1124, 435, 436, 437, 0, 438,
	439, 1125, 1126, 440, 441, 442, 443, 445, 1127, 446,
	1128, 444, 447, 448, 449, 498, 499, 500, 1129, 451,
	450, 501, 1130, 1131, 1132, 1133, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 0, 0, 0, 0, 0,
	0, 0, 2114, 0, 0, 0, 0, 0, 0, 0,
	2115, 213, 214, 215, 216, 217, 1056, 218, 1057, 1058,
	1059, 1060, 457, 1061, 1062, 1063, 1064, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 1065, 225, 226,
	227, 228, 229, 230, 1066, 1067, 231, 462, 463, 464,
	1068, 232, 465, 1069, 1054, 1070, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 1071, 242, 0, 243,
	244, 245, 1072, 929, 246, 247, 1073, 1074, 1076, 1075,
	1077, 1078, 1079, 248, 249, 250, 251, 252, 253, 466,
	467, 1080, 254, 1081, 256, 255, 1082, 257, 1083, 1084,
	258, 259, 260, 1085, 261, 1086, 262, 263, 1087, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	1088, 210, 1089, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 1090, 280, 1091, 1092, 930,
	281, 282, 1093, 283, 472, 1094, 473, 284, 1095, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	932, 1096, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 1097, 931, 296, 477, 298, 297, 299, 300, 301,
	478, 1098, 479, 1099, 303, 933, 934, 304, 305, 306,
	935, 307, 308, 0, 0, 309, 310, 311, 312, 1100,
	314, 313, 1101, 315, 481, 936, 316, 317, 937, 1102,
	318, 319, 1103, 1104, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 938, 332, 333,
	335, 334, 1105, 212, 939, 1106, 482, 483, 336, 337,
	1107, 338, 339, 340, 1108, 1109, 342, 343, 344, 1110,
	1111, 345, 484, 940, 346, 941, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 1112, 354, 355, 486, 356,
	487, 357, 1113, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 1114, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 1115,
	380, 942, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 1116, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 1117, 407,
	387, 388, 408, 943, 409, 490, 410, 411, 1118, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 1119, 423, 424, 422, 1120, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 1121, 492, 493, 494, 495,
	1122, 1123, 432, 433, 496, 434, 497, 1124, 435, 436,
	437, 0, 438, 439, 1125, 1126, 440, 441, 442, 443,
	445, 1127, 446, 1128, 444, 447, 448, 449, 498, 499,
	500, 1129, 451, 450, 501, 1130, 1131, 1132, 1133, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 1049,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3008, 213, 214, 215, 216,
	217, 1056, 218, 1057, 1058, 1059, 1060, 457, 1061, 1062,
	1063, 1064, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 1065, 225, 226, 227, 228, 229, 230, 1066,
	1067, 231, 462, 463, 464, 1068, 232, 465, 1069, 1054,
	1070, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1071, 242, 0, 243, 244, 245, 1072, 929, 246,
	247, 1073, 1074, 1076, 1075, 1077, 1078, 1079, 248, 249,
	250, 251, 252, 253, 466, 467, 1080, 254, 1081, 256,
	255, 1082, 257, 1083, 1084, 258, 259, 260, 1085, 261,
	1086, 262, 263, 1087, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 1088, 210, 1089, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	1090, 280, 1091, 1092, 930, 281, 282, 1093, 283, 472,
	1094, 473, 284, 1095, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 932, 1096, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 1097, 931, 296, 477,
	298, 297, 299, 300, 301, 478, 1098, 479, 1099, 303,
	933, 934, 304, 305, 306, 935, 307, 308, 0, 0,
	309, 310, 311, 312, 1100, 314, 313, 1101, 315, 481,
	936, 316, 317, 937, 1102, 318, 319, 1103, 1104, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 938, 332, 333, 335, 334, 1105, 212, 939,
	1106, 482, 483, 336, 337, 1107, 338, 339, 340, 1108,
	1109, 342, 343, 344, 1110, 1111, 345, 484, 940, 346,
	941, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	1112, 354, 355, 486, 356, 487, 357, 1113, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 1114,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1115, 380, 942, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1116, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1117, 407, 387, 388, 408, 943, 409,
	490, 410, 411, 1118, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 1119, 423, 424, 422,
	1120, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1121, 492, 493, 494, 495, 1122, 1123, 432, 433, 496,
	434, 497, 1124, 435, 436, 437, 0, 438, 439, 1125,
	1126, 440, 441, 442, 443, 445, 1127, 446, 1128, 444,
	447, 448, 449, 498, 499, 500, 1129, 451, 450, 501,
	1130, 1131, 1132, 1133, 452, 453, 502, 454, 455, 456,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3112, 0, 213, 214, 215,
	216, 217, 1056, 218, 1057, 1058, 1059, 1060, 457, 1061,
	1062, 1063, 1064, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 1065, 225, 226, 227, 228, 229, 230,
	1066, 1067, 231, 462, 463, 464, 1068, 232, 465, 1069,
	1054, 1070, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 1071, 242, 0, 243, 244, 245, 1072, 929,
	246, 247, 1073, 1074, 1076, 1075, 1077, 1078, 1079, 248,
	249, 250, 251, 252, 253, 466, 467, 1080, 254, 1081,
	256, 255, 1082, 257, 1083, 1084, 258, 259, 260, 1085,
	261, 1086, 262, 263, 1087, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 1088, 210, 1089, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 1090, 280, 1091, 1092, 930, 281, 282, 1093, 283,
	472, 1094, 473, 284, 1095, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 932, 1096, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 1097, 931, 296,
	477, 298, 297, 299, 300, 301, 478, 1098, 479, 1099,
	303, 933, 934, 304, 305, 306, 935, 307, 308, 0,
	0, 309, 310, 311, 312, 1100, 314, 313, 1101, 315,
	481, 936, 316, 317, 937, 1102, 318, 319, 1103, 1104,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 938, 332, 333, 335, 334, 1105, 212,
	939, 1106, 482, 483, 336, 337, 1107, 338, 339, 340,
	1108, 1109, 342, 343, 344, 1110, 1111, 345, 484, 940,
	346, 941, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 1112, 354, 355, 486, 356, 487, 357, 1113, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	1114, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 1115, 380, 942, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 1116, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 1117, 407, 387, 388, 408, 943,
	409, 490, 410, 411, 1118, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 1119, 423, 424,
	422, 1120, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 1121, 492, 493, 494, 495, 1122, 1123, 432, 433,
	496, 434, 497, 1124, 435, 436, 437, 0, 438, 439,
	1125, 1126, 440, 441, 442, 443, 445, 1127, 446, 1128,
	444, 447, 448, 449, 498, 499, 500, 1129, 451, 450,
	501, 1130, 1131, 1132, 1133, 452, 453, 502, 454, 455,
	456, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2754, 0, 213, 214,
	215, 216, 217, 1056, 218, 1057, 1058, 1059, 1060, 457,
	1061, 1062, 1063, 1064, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 1065, 225, 226, 227, 228, 229,
	230, 1066, 1067, 231, 462, 463, 464, 1068, 232, 465,
	1069, 1054, 1070, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1071, 242, 0, 243, 244, 245, 1072,
	929, 246, 247, 1073, 1074, 1076, 1075, 1077, 1078, 1079,
	248, 249, 250, 251, 252, 253, 466, 467, 1080, 254,
	1081, 256, 255, 1082, 257, 1083, 1084, 258, 259, 260,
	1085, 261, 1086, 262, 263, 1087, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 1088, 210, 1089,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 1090, 280, 1091, 1092, 930, 281, 282, 1093,
	283, 472, 1094, 473, 284, 1095, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 932, 1096, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 1097, 931,
	296, 477, 298, 297, 299, 300, 301, 478, 1098, 479,
	1099, 303, 933, 934, 304, 305, 306, 935, 307, 308,
	0, 0, 309, 310, 311, 312, 1100, 314, 313, 1101,
	315, 481, 936, 316, 317, 937, 1102, 318, 319, 1103,
	1104, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 938, 332, 333, 335, 334, 1105,
	212, 939, 1106, 482, 483, 336, 337, 1107, 338, 339,
	340, 1108, 1109, 342, 343, 344, 1110, 1111, 345, 484,
	940, 346, 941, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 1112, 354, 355, 486, 356, 487, 357, 1113,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 1114, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1115, 380, 942, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1116, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1117, 407, 387, 388, 408,
	943, 409, 490, 410, 411, 1118, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 1119, 423,
	424, 422, 1120, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1121, 492, 493, 494, 495, 1122, 1123, 432,
	433, 496, 434, 497, 1124, 435, 436, 437, 0, 438,
	439, 1125, 1126, 440, 441, 442, 443, 445, 1127, 446,
	1128, 444, 447, 448, 449, 498, 499, 500, 1129, 451,
	450, 501, 1130, 1131, 1132, 1133, 452, 453, 502, 454,
	455, 456, 1049, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2746, 0, 213,
	214, 215, 216, 217, 1056, 218, 1057, 1058, 1059, 1060,
	457, 1061, 1062, 1063, 1064, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 1065, 225, 226, 227, 228,
	229, 230, 1066, 1067, 231, 462, 463, 464, 1068, 232,
	465, 1069, 1054, 1070, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 1071, 242, 0, 243, 244, 245,
	1072, 929, 246, 247, 1073, 1074, 1076, 1075, 1077, 1078,
	1079, 248, 249, 250, 251, 252, 253, 466, 467, 1080,
	254, 1081, 256, 255, 1082, 257, 1083, 1084, 258, 259,
	260, 1085, 261, 1086, 262, 263, 1087, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 1088, 210,
	1089, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 1090, 280, 1091, 1092, 930, 281, 282,
	1093, 283, 472, 1094, 473, 284, 1095, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 932, 1096,
	480, 294, 0, 0, 0, 211, 293, 295, 302, 1097,
	931, 296, 477, 298, 297, 299, 300, 301, 478, 1098,
	479, 1099, 303, 933, 934, 304, 305, 306, 935, 307,
	308, 0, 0, 309, 310, 311, 312, 1100, 314, 313,
	1101, 315, 481, 936, 316, 317, 937, 1102, 318, 319,
	1103, 1104, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 938, 332, 333, 335, 334,
	1105, 212, 939, 1106, 482, 483, 336, 337, 1107, 338,
	339, 340, 1108, 1109, 342, 343, 344, 1110, 1111, 345,
	484, 940, 346, 941, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 1112, 354, 355, 486, 356, 487, 357,
	1113, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 1114, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 1115, 380, 942,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 1116, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 1117, 407, 387, 388,
	408, 943, 409, 490, 410, 411, 1118, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 1119,
	423, 424, 422, 1120, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 1121, 492, 493, 494, 495, 1122, 1123,
	432, 433, 496, 434, 497, 1124, 435, 436, 437, 0,
	438, 439, 1125, 1126, 440, 441, 442, 443, 445, 1127,
	446, 1128, 444, 447, 448, 449, 498, 499, 500, 1129,
	451, 450, 501, 1130, 1131, 1132, 1133, 452, 453, 502,
	454, 455, 456, 1049, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2620, 0,
	213, 214, 215, 216, 217, 1056, 218, 1057, 1058, 1059,
	1060, 457, 1061, 1062, 1063, 1064, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 1065, 225, 226, 227,
	228, 229, 230, 1066, 1067, 231, 462, 463, 464, 1068,
	232, 465, 1069, 1054, 1070, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 1071, 242, 0, 243, 244,
	245, 1072, 929, 246, 247, 1073, 1074, 1076, 1075, 1077,
	1078, 1079, 248, 249, 250, 251, 252, 253, 466, 467,
	1080, 254, 1081, 256, 255, 1082, 257, 1083, 1084, 258,
	259, 260, 1085, 261, 1086, 262, 263, 1087, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 1088,
	210, 1089, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 1090, 280, 1091, 1092, 930, 281,
	282, 1093, 283, 472, 1094, 473, 284, 1095, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 932,
	1096, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	1097, 931, 296, 477, 298, 297, 299, 300, 301, 478,
	1098, 479, 1099, 303, 933, 934, 304, 305, 306, 935,
	307, 308, 0, 0, 309, 310, 311, 312, 1100, 314,
	313, 1101, 315, 481, 936, 316, 317, 937, 1102, 318,
	319, 1103, 1104, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 938, 332, 333, 335,
	334, 1105, 212, 939, 1106, 482, 483, 336, 337, 1107,
	338, 339, 340, 1108, 1109, 342, 343, 344, 1110, 1111,
	345, 484, 940, 346, 941, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 1112, 354, 355, 486, 356, 487,
	357, 1113, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 1114, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 1115, 380,
	942, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 1116, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 1117, 407, 387,
	388, 408, 943, 409, 490, 410, 411, 1118, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	1119, 423, 424, 422, 1120, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 1121, 492, 493, 494, 495, 1122,
	1123, 432, 433, 496, 434, 497, 1124, 435, 436, 437,
	0, 438, 439, 1125, 1126, 440, 441, 442, 443, 445,
	1127, 446, 1128, 444, 447, 448, 449, 498, 499, 500,
	1129, 451, 450, 501, 1130, 1131, 1132, 1133, 452, 453,
	502, 454, 455, 456, 1049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2013,
	0, 213, 214, 215, 216, 217, 1056, 218, 1057, 1058,
	1059, 1060, 457, 1061, 1062, 1063, 1064, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 1065, 225, 226,
	227, 228, 229, 230, 1066, 1067, 231, 462, 463, 464,
	1068, 232, 465, 1069, 1054, 1070, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 1071, 242, 0, 243,
	244, 245, 1072, 929, 246, 247, 1073, 1074, 1076, 1075,
	1077, 1078, 1079, 248, 249, 250, 251, 252, 253, 466,
	467, 1080, 254, 1081, 256, 255, 1082, 257, 1083, 1084,
	258, 259, 260, 1085, 261, 1086, 262, 263, 1087, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	1088, 210, 1089, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 1090, 280, 1091, 1092, 930,
	281, 282, 1093, 283, 472, 1094, 473, 284, 1095, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	932, 1096, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 1097, 931, 296, 477, 298, 297, 299, 300, 301,
	478, 1098, 479, 1099, 303, 933, 934, 304, 305, 306,
	935, 307, 308, 0, 0, 309, 310, 311, 312, 1100,
	314, 313, 1101, 315, 481, 936, 316, 317, 937, 1102,
	318, 319, 1103, 1104, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 938, 332, 333,
	335, 334, 1105, 212, 939, 1106, 482, 483, 336, 337,
	1107, 338, 339, 340, 1108, 1109, 342, 343, 344, 1110,
	1111, 345, 484, 940, 346, 941, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 1112, 354, 355, 486, 356,
	487, 357, 1113, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 1114, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 1115,
	380, 942, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 1116, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 1117, 407,
	387, 388, 408, 943, 409, 490, 410, 411, 1118, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 1119, 423, 424, 422, 1120, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 1121, 492, 493, 494, 495,
	1122, 1123, 432, 433, 496, 434, 497, 1124, 435, 436,
	437, 0, 438, 439, 1125, 1126, 440, 441, 442, 443,
	445, 1127, 446, 1128, 444, 447, 448, 449, 498, 499,
	500, 1129, 451, 450, 501, 1130, 1131, 1132, 1133, 452,
	453, 502, 454, 455, 456, 1157, 0, 1049, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1748, 0, 0, 0, 213, 214, 215, 216, 217, 1056,
	218, 1057, 1058, 1059, 1060, 457, 1061, 1062, 1063, 1064,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	1065, 225, 226, 227, 228, 229, 230, 1066, 1067, 231,
	462, 463, 464, 1068, 232, 465, 1069, 1054, 1070, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1071,
	242, 0, 243, 244, 245, 1072, 929, 246, 247, 1073,
	1074, 1076, 1075, 1077, 1078, 1079, 248, 249, 250, 251,
	252, 253, 466, 467, 1080, 254, 1081, 256, 255, 1082,
	257, 1083, 1084, 258, 259, 260, 1085, 261, 1086, 262,
	263, 1087, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 1088, 210, 1089, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 1090, 280,
	1091, 1092, 930, 281, 282, 1093, 283, 472, 1094, 473,
	284, 1095, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 932, 1096, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 1097, 931, 296, 477, 298, 297,
	299, 300, 301, 478, 1098, 479, 1099, 303, 933, 934,
	304, 305, 306, 935, 307, 308, 0, 0, 309, 310,
	311, 312, 1100, 314, 313, 1101, 315, 481, 936, 316,
	317, 937, 1102, 318, 319, 1103, 1104, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	938, 332, 333, 335, 334, 1105, 212, 939, 1106, 482,
	483, 336, 337, 1107, 338, 339, 340, 1108, 1109, 342,
	343, 344, 1110, 1111, 345, 484, 940, 346, 941, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 1112, 354,
	355, 486, 356, 487, 357, 1113, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 1114, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 1115, 380, 942, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	1116, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 1117, 407, 387, 388, 408, 943, 409, 490, 410,
	411, 1118, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 1119, 423, 424, 422, 1120, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 1121, 492,
	493, 494, 495, 1122, 1123, 432, 433, 496, 434, 497,
	1124, 435, 436, 437, 0, 438, 439, 1125, 1126, 440,
	441, 442, 443, 445, 1127, 446, 1128, 444, 447, 448,
	449, 498, 499, 500, 1129, 451, 450, 501, 1130, 1131,
	1132, 1133, 452, 453, 502, 454, 455, 456, 1046, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1056, 218, 1057, 1058, 1059, 1060, 457, 1061,
	1062, 1063, 1064, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 1065, 225, 226, 227, 228, 229, 230,
	1066, 1067, 231, 462, 463, 464, 1068, 232, 465, 1069,
	1054, 1070, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 1071, 242, 0, 243, 244, 245, 1072, 929,
	246, 247, 1073, 1074, 1076, 1075, 1077, 1078, 1079, 248,
	249, 250, 251, 252, 253, 466, 467, 1080, 254, 1081,
	256, 255, 1082, 257, 1083, 1084, 258, 259, 260, 1085,
	261, 1086, 262, 263, 1087, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 1088, 210, 1089, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 1090, 280, 1091, 1092, 930, 281, 282, 1093, 283,
	472, 1094, 473, 284, 1095, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 932, 1096, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 1097, 931, 296,
	477, 298, 297, 299, 300, 301, 478, 1098, 479, 1099,
	303, 933, 934, 304, 305, 306, 935, 307, 308, 0,
	0, 309, 310, 311, 312, 1100, 314, 313, 1101, 315,
	481, 936, 316, 317, 937, 1102, 318, 319, 1103, 1104,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 938, 332, 333, 335, 334, 1105, 212,
	939, 1106, 482, 483, 336, 337, 1107, 338, 339, 340,
	1108, 1109, 342, 343, 344, 1110, 1111, 345, 484, 940,
	346, 941, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 1112, 354, 355, 486, 356, 487, 357, 1113, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	1114, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 1115, 380, 942, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 1116, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 1117, 407, 387, 388, 408, 943,
	409, 490, 410, 411, 1118, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 1119, 423, 424,
	422, 1120, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 1121, 492, 493, 494, 495, 1122, 1123, 432, 433,
	496, 434, 497, 1124, 435, 436, 437, 0, 438, 439,
	1125, 1126, 440, 441, 442, 443, 445, 1127, 446, 1128,
	444, 447, 448, 449, 498, 499, 500, 1129, 451, 450,
	501, 1130, 1131, 1132, 1133, 452, 453, 502, 454, 455,
	456, 1049, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 1056, 218, 1057, 1058, 1059, 1060, 457,
	1061, 1062, 1063, 1064, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 1065, 225, 226, 227, 228, 229,
	230, 1066, 1067, 231, 462, 463, 464, 1068, 232, 465,
	1069, 1054, 1070, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1071, 242, 0, 243, 244, 245, 1072,
	929, 246, 247, 1073, 1074, 1076, 1075, 1077, 1078, 1079,
	248, 249, 250, 251, 252, 253, 466, 467, 1080, 254,
	1081, 256, 255, 1082, 257, 1083, 1084, 258, 259, 260,
	1085, 261, 1086, 262, 263, 1087, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 1088, 210, 1089,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 1090, 280, 1091, 1092, 930, 281, 282, 1093,
	283, 472, 1094, 473, 284, 1095, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 932, 1096, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 1097, 931,
	296, 477, 298, 297, 299, 300, 301, 478, 1098, 479,
	1099, 303, 933, 934, 304, 305, 306, 935, 307, 308,
	0, 0, 309, 310, 311, 312, 1100, 314, 313, 1101,
	315, 481, 936, 316, 317, 937, 1102, 318, 319, 1103,
	1104, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 938, 332, 333, 335, 334, 1105,
	212, 939, 1106, 482, 483, 336, 337, 1107, 338, 339,
	340, 1108, 1109, 342, 343, 344, 1110, 1111, 345, 484,
	940, 346, 941, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 1112, 354, 355, 486, 356, 487, 357, 1113,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 1114, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1115, 380, 942, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1116, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1117, 407, 387, 388, 408,
	943, 409, 490, 410, 411, 1118, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 1119, 423,
	424, 422, 1120, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1121, 492, 493, 494, 495, 1122, 1123, 432,
	433, 496, 434, 497, 1124, 435, 436, 437, 0, 438,
	439, 1125, 1126, 440, 441, 442, 443, 445, 1127, 446,
	1128, 444, 447, 448, 449, 498, 499, 500, 1129, 451,
	450, 501, 1130, 1131, 1132, 1133, 452, 453, 502, 454,
	455, 456, 1989, 0, 871, 828, 829, 830, 826, 827,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 1986, 218, 0, 0,
	0, 0, 920, 845, 0, 0, 0, 219, 220, 221,
	458, 886, 865, 897, 855, 896, 895, 0, 225, 857,
	856, 228, 229, 230, 847, 919, 231, 955, 956, 464,
	0, 232, 926, 0, 909, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 929, 246, 247, 912, 910, 911, 916,
	914, 913, 915, 248, 249, 250, 251, 900, 253, 893,
	892, 817, 254, 0, 256, 255, 0, 257, 1987, 0,
	258, 891, 260, 0, 261, 0, 262, 263, 0, 823,
	264, 265, 267, 270, 266, 271, 272, 273, 946, 947,
	836, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	890, 888, 889, 0, 279, 0, 280, 0, 0, 930,
	281, 282, 0, 283, 953, 0, 846, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 921, 922, 925,
	932, 0, 923, 867, 0, 0, 0, 211, 293, 295,
	302, 0, 931, 296, 879, 870, 881, 883, 884, 885,
	880, 0, 872, 0, 303, 933, 934, 304, 305, 306,
	935, 905, 906, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 954, 936, 316, 317, 937, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 859, 329, 938, 332, 333,
	335, 334, 814, 212, 939, 837, 924, 894, 336, 337,
	0, 868, 339, 869, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 940, 346, 941, 948, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 949, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 887, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 942, 381, 382, 383, 384, 824, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	860, 861, 863, 864, 398, 402, 405, 406, 917, 407,
	387, 388, 408, 943, 409, 882, 862, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 928, 416, 417, 418,
	950, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 858, 0, 901, 902, 903, 904,
	0, 0, 432, 433, 951, 434, 952, 835, 435, 436,
	437, 0, 438, 439, 0, 818, 440, 441, 442, 443,
	445, 918, 446, 0, 866, 447, 448, 449, 498, 898,
	945, 1985, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 815, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 811, 812,
	1988, 0, 0, 0, 0, 0, 0, 841, 1984, 0,
	0, 804, 839, 871, 828, 829, 830, 826, 827, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 920, 845, 0, 0, 0, 219, 220, 221, 458,
	886, 865, 897, 855, 896, 895, 0, 225, 857, 856,
	228, 229, 230, 847, 919, 231, 955, 956, 464, 0,
	232, 926, 0, 909, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 929, 246, 247, 912, 910, 911, 916, 914,
	913, 915, 248, 249, 250, 251, 900, 253, 893, 892,
	817, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	891, 260, 0, 261, 0, 262, 263, 0, 823, 264,
	265, 267, 270, 266, 271, 272, 273, 946, 947, 836,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 890,
	888, 889, 0, 279, 0, 280, 0, 0, 930, 281,
	282, 0, 283, 953, 0, 846, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 921, 922, 925, 932,
	0, 923, 867, 0, 0, 0, 211, 293, 295, 302,
	0, 931, 296, 879, 870, 881, 883, 884, 885, 880,
	0, 872, 0, 303, 933, 934, 304, 305, 306, 935,
	905, 906, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 954, 936, 316, 317, 937, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 859, 329, 938, 332, 333, 335,
	334, 814, 212, 939, 837, 924, 894, 336, 337, 0,
	868, 339, 869, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 940, 346, 941, 948, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 949, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	887, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	942, 381, 382, 383, 384, 824, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 176, 403, 404, 860,
	861, 863, 864, 398, 402, 405, 406, 917, 407, 387,
	388, 408, 943, 409, 882, 862, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 928, 416, 417, 418, 950,
	0, 423, 424, 422, 178, 425, 426, 427, 428, 429,
	268, 430, 269, 858, 0, 901, 902, 903, 904, 0,
	0, 432, 433, 951, 434, 952, 835, 435, 436, 437,
	0, 438, 439, 0, 818, 440, 441, 442, 443, 445,
	918, 446, 0, 866, 447, 448, 449, 1296, 898, 945,
	0, 451, 450, 501, 0, 0, 0, 170, 452, 453,
	502, 454, 455, 456, 815, 171, 0, 0, 0, 0,
	0, 0, 813, 0, 0, 0, 0, 811, 812, 871,
	828, 829, 830, 826, 827, 840, 1485, 1483, 0, 0,
	0, 839, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 920, 845, 0,
	0, 0, 219, 220, 221, 458, 886, 865, 897, 855,
	896, 895, 0, 225, 857, 856, 228, 229, 230, 847,
	919, 231, 955, 956, 464, 0, 232, 926, 0, 909,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 912, 910, 911, 916, 914, 913, 915, 248, 249,
	250, 251, 900, 253, 893, 892, 817, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 891, 260, 0, 261,
	0, 262, 263, 0, 823, 264, 265, 267, 270, 266,
	271, 272, 273, 946, 947, 836, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 890, 888, 889, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 953,
	0, 846, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 921, 922, 925, 932, 0, 923, 867, 0,
	0, 0, 211, 293, 295, 302, 0, 931, 296, 879,
	870, 881, 883, 884, 885, 880, 0, 872, 0, 303,
	933, 934, 304, 305, 306, 935, 905, 906, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 954,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	859, 329, 938, 332, 333, 335, 334, 814, 212, 939,
	837, 924, 894, 336, 337, 0, 868, 339, 869, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 948, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 949, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 887, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 824, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 176, 403, 404, 860, 861, 863, 864, 398,
	402, 405, 406, 917, 407, 387, 388, 408, 943, 409,
	882, 862, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 928, 416, 417, 418, 950, 0, 423, 424, 422,
	178, 425, 426, 427, 428, 429, 268, 430, 269, 858,
	0, 901, 902, 903, 904, 0, 0, 432, 433, 951,
	434, 952, 835, 435, 436, 437, 0, 438, 439, 0,
	818, 440, 441, 442, 443, 445, 918, 446, 0, 866,
	447, 448, 449, 1296, 898, 945, 0, 451, 450, 501,
	0, 0, 0, 170, 452, 453, 502, 454, 455, 456,
	815, 171, 0, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 811, 812, 871, 828, 829, 830, 826,
	827, 840, 1485, 2386, 0, 0, 0, 839, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 920, 845, 0, 0, 0, 219, 220,
	221, 458, 886, 865, 897, 855, 896, 895, 0, 225,
	857, 856, 228, 229, 230, 847, 919, 231, 955, 956,
	464, 0, 232, 926, 0, 909, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 929, 246, 247, 912, 910, 911,
	916, 914, 913, 915, 248, 249, 250, 251, 900, 253,
	893, 892, 817, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 891, 260, 0, 261, 0, 262, 263, 0,
	823, 264, 265, 267, 270, 266, 271, 272, 273, 946,
	947, 836, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 890, 888, 889, 0, 279, 0, 280, 0, 0,
	930, 281, 282, 0, 283, 953, 0, 846, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 921, 922,
	925, 932, 0, 923, 867, 0, 0, 0, 211, 293,
	295, 302, 0, 931, 296, 879, 870, 881, 883, 884,
	885, 880, 0, 872, 0, 303, 933, 934, 304, 305,
	306, 935, 905, 906, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 954, 936, 316, 317, 937,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 859, 329, 938, 332,
	333, 335, 334, 814, 212, 939, 837, 924, 894, 336,
	337, 0, 868, 339, 869, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 940, 346, 941, 948, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 949,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 887, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 942, 381, 382, 383, 384, 824, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 176, 403,
	404, 860, 861, 863, 864, 398, 402, 405, 406, 917,
	407, 387, 388, 408, 943, 409, 882, 862, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 928, 416, 417,
	418, 950, 0, 423, 424, 422, 178, 425, 426, 427,
	428, 429, 268, 430, 269, 858, 0, 901, 902, 903,
	904, 0, 0, 432, 433, 951, 434, 952, 835, 435,
	436, 437, 0, 438, 439, 0, 818, 440, 441, 442,
	443, 445, 918, 446, 0, 866, 447, 448, 449, 1296,
	898, 945, 0, 451, 450, 501, 0, 0, 0, 170,
	452, 453, 502, 454, 455, 456, 815, 171, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 811,
	812, 871, 828, 829, 830, 826, 827, 840, 1485, 1483,
	0, 0, 0, 839, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 920,
	845, 0, 0, 0, 219, 220, 221, 458, 886, 865,
	897, 855, 896, 895, 2073, 225, 857, 856, 228, 229,
	230, 847, 919, 231, 955, 956, 464, 0, 232, 926,
	0, 909, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	929, 246, 247, 912, 910, 911, 916, 914, 913, 915,
	248, 249, 250, 251, 900, 253, 893, 892, 817, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 891, 260,
	0, 261, 0, 262, 263, 0, 823, 264, 265, 267,
	270, 266, 271, 272, 273, 946, 947, 836, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 890, 888, 889,
	0, 279, 0, 280, 0, 2078, 930, 281, 282, 0,
	283, 953, 0, 846, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 921, 922, 925, 932, 0, 923,
	867, 0, 0, 0, 211, 293, 295, 302, 0, 931,
	296, 879, 870, 881, 883, 884, 885, 880, 0, 872,
	0, 303, 933, 934, 304, 305, 306, 935, 905, 906,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 2074,
	315, 954, 936, 316, 317, 937, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 859, 329, 938, 332, 333, 335, 334, 814,
	212, 939, 837, 924, 894, 336, 337, 0, 868, 339,
	869, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	940, 346, 941, 948, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 949, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 887, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 942, 381,
	382, 383, 384, 824, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 860, 861, 863,
	864, 398, 402, 405, 406, 917, 407, 387, 388, 408,
	943, 409, 882, 862, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 928, 416, 417, 418, 950, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 858, 0, 901, 902, 903, 904, 0, 2075, 432,
	433, 951, 434, 952, 835, 435, 436, 437, 0, 438,
	439, 0, 818, 440, 441, 442, 443, 445, 918, 446,
	0, 866, 447, 448, 449, 498, 898, 945, 0, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 815, 0, 0, 0, 0, 0, 0, 0,
	813, 0, 0, 0, 0, 811, 812, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 807, 839,
	871, 828, 829, 830, 826, 827, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 920, 845,
	0, 0, 0, 219, 220, 221, 458, 886, 865, 897,
	855, 896, 895, 0, 225, 857, 856, 228, 229, 230,
	847, 919, 231, 955, 956, 464, 0, 232, 926, 0,
	909, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 912, 910, 911, 916, 914, 913, 915, 248,
	249, 250, 251, 900, 253, 893, 892, 817, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 891, 260, 0,
	261, 0, 262, 263, 0, 823, 264, 265, 267, 270,
	266, 271, 272, 273, 946, 947, 836, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 890, 888, 889, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	953, 0, 846, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 921, 922, 925, 932, 0, 923, 867,
	0, 0, 0, 211, 293, 295, 302, 0, 931, 296,
	879, 870, 881, 883, 884, 885, 880, 0, 872, 0,
	303, 933, 934, 304, 305, 306, 935, 905, 906, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	954, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 859, 329, 938, 332, 333, 335, 334, 814, 212,
	939, 837, 924, 894, 336, 337, 0, 868, 339, 869,
	819, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 948, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 949, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 887, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 824, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 860, 861, 863, 864,
	398, 402, 405, 406, 917, 407, 387, 388, 408, 943,
	409, 882, 862, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 928, 416, 417, 418, 950, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	858, 0, 901, 902, 903, 904, 0, 0, 432, 433,
	951, 434, 952, 835, 435, 436, 437, 0, 438, 439,
	0, 818, 440, 441, 442, 443, 445, 918, 446, 0,
	866, 447, 448, 449, 498, 898, 945, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 815, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 811, 812, 871, 828, 829, 830,
	826, 827, 840, 841, 0, 0, 0, 0, 839, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 920, 845, 0, 0, 0, 219,
	220, 221, 458, 886, 865, 897, 855, 896, 895, 0,
	225, 857, 856, 228, 229, 230, 847, 919, 231, 955,
	956, 464, 0, 232, 926, 0, 909, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 3293, 245, 0, 929, 246, 247, 912, 910,
	911, 916, 914, 913, 915, 248, 249, 250, 251, 900,
	253, 893, 892, 817, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 891, 260, 0, 261, 0, 262, 263,
	0, 823, 264, 265, 267, 270, 266, 271, 272, 273,
	946, 947, 836, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 890, 888, 889, 0, 279, 0, 280, 0,
	0, 930, 281, 282, 0, 283, 953, 0, 846, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 921,
	922, 925, 932, 0, 923, 867, 0, 0, 0, 211,
	293, 295, 302, 0, 931, 296, 879, 870, 881, 883,
	884, 885, 880, 0, 872, 0, 303, 933, 934, 304,
	305, 306, 935, 905, 906, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 954, 936, 316, 317,
	937, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 859, 329, 938,
	332, 333, 335, 334, 814, 212, 939, 837, 924, 894,
	336, 337, 0, 868, 339, 869, 819, 0, 342, 343,
	344, 0, 0, 345, 484, 940, 346, 941, 948, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	949, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 887, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 942, 381, 382, 383, 384, 824, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 860, 861, 863, 864, 398, 402, 405, 406,
	917, 407, 387, 388, 408, 943, 409, 882, 862, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 928, 416,
	417, 418, 950, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 858, 0, 901, 902,
	903, 904, 0, 0, 432, 433, 951, 434, 952, 835,
	435, 436, 437, 0, 438, 439, 0, 818, 440, 441,
	442, 443, 445, 918, 446, 0, 866, 447, 448, 449,
	498, 898, 945, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 815, 0, 0,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	811, 812, 871, 828, 829, 830, 826, 827, 840, 841,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	920, 845, 0, 0, 0, 219, 220, 221, 458, 886,
	865, 897, 855, 896, 895, 0, 225, 857, 856, 228,
	229, 230, 847, 919, 231, 955, 956, 464, 0, 232,
	926, 0, 909, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 3168, 245,
	0, 929, 246, 247, 912, 910, 911, 916, 914, 913,
	915, 248, 249, 250, 251, 900, 253, 893, 892, 817,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 891,
	260, 0, 261, 0, 262, 263, 0, 823, 264, 265,
	267, 270, 266, 271, 272, 273, 946, 947, 836, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 890, 888,
	889, 0, 279, 0, 280, 0, 0, 930, 281, 282,
	0, 283, 953, 0, 846, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 921, 922, 925, 932, 0,
	923, 867, 0, 0, 0, 211, 293, 295, 302, 0,
	931, 296, 879, 870, 881, 883, 884, 885, 880, 0,
	872, 0, 303, 933, 934, 304, 305, 306, 935, 905,
	906, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 954, 936, 316, 317, 937, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 859, 329, 938, 332, 333, 335, 334,
	814, 212, 939, 837, 924, 894, 336, 337, 0, 868,
	339, 869, 819, 0, 342, 343, 344, 0, 0, 345,
	484, 940, 346, 941, 948, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 949, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 887,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 942,
	381, 382, 383, 384, 824, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 860, 861,
	863, 864, 398, 402, 405, 406, 917, 407, 387, 388,
	408, 943, 409, 882, 862, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 928, 416, 417, 418, 950, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 858, 0, 901, 902, 903, 904, 0, 0,
	432, 433, 951, 434, 952, 835, 435, 436, 437, 0,
	438, 439, 0, 818, 440, 441, 442, 443, 445, 918,
	446, 0, 866, 447, 448, 449, 498, 898, 945, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 815, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 811, 812, 871, 828,
	829, 830, 826, 827, 840, 841, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 920, 845, 0, 0,
	0, 219, 220, 221, 458, 886, 865, 897, 855, 896,
	895, 0, 225, 857, 856, 228, 229, 230, 847, 919,
	231, 955, 956, 464, 0, 232, 926, 0, 909, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 929, 246, 247,
	912, 910, 911, 916, 914, 913, 915, 248, 249, 250,
	251, 900, 253, 893, 892, 817, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 891, 260, 0, 261, 0,
	262, 263, 0, 823, 264, 265, 267, 270, 266, 271,
	272, 273, 946, 947, 836, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 890, 888, 889, 0, 279, 0,
	280, 0, 0, 930, 281, 282, 0, 283, 953, 0,
	846, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 921, 922, 925, 932, 0, 923, 867, 0, 0,
	0, 211, 293, 295, 302, 0, 931, 296, 879, 870,
	881, 883, 884, 885, 880, 0, 872, 0, 303, 933,
	934, 304, 305, 306, 935, 905, 906, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 954, 936,
	316, 317, 937, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 859,
	329, 938, 332, 333, 335, 334, 814, 2918, 939, 837,
	924, 894, 336, 337, 0, 868, 339, 869, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 940, 346, 941,
	948, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 949, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 887, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 942, 381, 382, 383, 384,
	824, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 860, 861, 863, 864, 398, 402,
	405, 406, 917, 407, 387, 388, 408, 943, 409, 882,
	862, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	928, 416, 417, 418, 950, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 858, 0,
	901, 902, 903, 904, 0, 0, 432, 433, 951, 434,
	952, 835, 435, 436, 437, 0, 438, 439, 0, 818,
	440, 441, 442, 443, 445, 918, 446, 0, 866, 447,
	448, 449, 498, 898, 945, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 815,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 811, 812, 1545, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 839, 871, 828, 829,
	830, 826, 827, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 920, 845, 0, 0, 0,
	219, 220, 221, 458, 886, 865, 897, 855, 896, 895,
	0, 225, 857, 856, 228, 229, 230, 847, 919, 231,
	955, 956, 464, 0, 232, 926, 0, 909, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 929, 246, 247, 912,
	910, 911, 916, 914, 913, 915, 248, 249, 250, 251,
	900, 253, 893, 892, 817, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 891, 260, 0, 261, 0, 262,
	263, 0, 823, 264, 265, 267, 270, 266, 271, 272,
	273, 946, 947, 836, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 890, 888, 889, 0, 279, 0, 280,
	0, 0, 930, 281, 282, 0, 283, 953, 0, 846,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	921, 922, 925, 932, 0, 923, 867, 0, 0, 0,
	211, 293, 295, 302, 0, 931, 296, 879, 870, 881,
	883, 884, 885, 880, 0, 872, 0, 303, 933, 934,
	304, 305, 306, 935, 905, 906, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 954, 936, 316,
	317, 937, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 859, 329,
	938, 332, 333, 335, 334, 814, 212, 939, 837, 924,
	894, 336, 337, 0, 868, 339, 869, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 940, 346, 941, 948,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 949, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 887, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 942, 381, 382, 383, 384, 824,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 860, 861, 863, 864, 398, 402, 405,
	406, 917, 407, 387, 388, 408, 943, 409, 882, 862,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 928,
	416, 417, 418, 950, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 858, 0, 901,
	902, 903, 904, 0, 0, 432, 433, 951, 434, 952,
	835, 435, 436, 437, 0, 438, 439, 0, 818, 440,
	441, 442, 443, 445, 918, 446, 0, 866, 447, 448,
	449, 498, 898, 945, 2733, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 815, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 811, 812, 871, 828, 829, 830, 826, 827, 840,
	841, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 920, 845, 0, 0, 0, 219, 220, 221, 458,
	886, 865, 897, 855, 896, 895, 0, 225, 857, 856,
	228, 229, 230, 847, 919, 231, 955, 956, 464, 0,
	232, 926, 0, 909, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 929, 246, 247, 912, 910, 911, 916, 914,
	913, 915, 248, 249, 250, 251, 900, 253, 893, 892,
	817, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	891, 260, 0, 261, 0, 262, 263, 0, 823, 264,
	265, 267, 270, 266, 271, 272, 273, 946, 947, 836,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 890,
	888, 889, 0, 279, 0, 280, 0, 0, 930, 281,
	282, 0, 283, 953, 0, 846, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 921, 922, 925, 932,
	0, 923, 867, 0, 0, 0, 1903, 293, 295, 302,
	0, 931, 296, 879, 870, 881, 883, 884, 885, 880,
	0, 872, 0, 303, 933, 934, 304, 305, 306, 935,
	905, 906, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 954, 936, 316, 317, 937, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 859, 329, 938, 332, 333, 335,
	334, 814, 212, 939, 837, 924, 894, 336, 337, 0,
	868, 339, 869, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 940, 346, 941, 948, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 949, 356, 487,
	357, 1902, 358, 0, 359, 360, 361, 362, 363, 364,
	887, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	942, 381, 382, 383, 384, 824, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 860,
	861, 863, 864, 398, 402, 405, 406, 917, 407, 387,
	388, 408, 943, 409, 882, 862, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 928, 416, 417, 418, 950,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 858, 0, 901, 902, 903, 904, 0,
	0, 432, 433, 951, 434, 952, 835, 435, 436, 437,
	0, 438, 439, 0, 818, 440, 441, 442, 443, 445,
	918, 446, 0, 866, 447, 448, 449, 498, 898, 945,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 815, 0, 0, 0, 0, 0,
	0, 0, 813, 0, 0, 0, 0, 811, 812, 871,
	828, 829, 830, 826, 827, 840, 841, 0, 0, 0,
	0, 839, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 920, 845, 0,
	0, 0, 219, 220, 221, 458, 886, 865, 897, 855,
	896, 895, 0, 225, 857, 856, 228, 229, 230, 847,
	919, 231, 955, 956, 464, 0, 232, 926, 0, 909,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 912, 910, 911, 916, 914, 913, 915, 248, 249,
	250, 251, 900, 253, 893, 892, 817, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 891, 260, 0, 261,
	0, 262, 263, 0, 823, 264, 265, 267, 270, 266,
	271, 272, 273, 946, 947, 836, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 890, 888, 889, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 953,
	0, 846, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 921, 922, 925, 932, 0, 923, 867, 0,
	0, 0, 211, 293, 295, 302, 0, 931, 296, 879,
	870, 881, 883, 884, 885, 880, 0, 872, 0, 303,
	933, 934, 304, 305, 306, 935, 905, 906, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 954,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	859, 329, 938, 332, 333, 335, 334, 814, 212, 939,
	837, 924, 894, 336, 337, 0, 868, 339, 869, 819,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 948, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 949, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 887, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 824, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 860, 861, 863, 864, 398,
	402, 405, 406, 917, 407, 387, 388, 408, 943, 409,
	882, 862, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 928, 416, 417, 418, 950, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 858,
	0, 901, 902, 903, 904, 0, 0, 432, 433, 951,
	434, 952, 835, 435, 436, 437, 0, 438, 439, 0,
	818, 440, 441, 442, 443, 445, 918, 446, 0, 866,
	447, 448, 449, 498, 898, 945, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	815, 0, 0, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 811, 812, 871, 828, 829, 830, 826,
	827, 840, 841, 0, 0, 0, 0, 839, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 920, 845, 0, 0, 0, 219, 220,
	221, 458, 886, 865, 897, 855, 896, 895, 0, 225,
	857, 856, 228, 229, 230, 847, 919, 231, 955, 956,
	464, 0, 232, 926, 0, 909, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 929, 246, 247, 912, 910, 911,
	916, 914, 913, 915, 248, 249, 250, 251, 900, 253,
	893, 892, 817, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 891, 260, 0, 261, 0, 262, 263, 0,
	823, 264, 265, 267, 270, 266, 271, 272, 273, 946,
	947, 836, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 890, 888, 889, 0, 279, 0, 280, 0, 0,
	930, 281, 282, 0, 283, 953, 0, 846, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 921, 922,
	925, 932, 0, 923, 867, 0, 0, 0, 211, 293,
	295, 302, 0, 931, 296, 879, 870, 881, 883, 884,
	885, 880, 0, 872, 0, 303, 933, 934, 304, 305,
	306, 935, 905, 906, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 954, 936, 316, 317, 937,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 859, 329, 938, 332,
	333, 335, 334, 814, 212, 939, 837, 924, 894, 336,
	337, 0, 868, 339, 869, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 940, 346, 941, 948, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 949,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 887, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 942, 381, 382, 383, 384, 824, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 860, 861, 863, 864, 398, 402, 405, 406, 917,
	407, 387, 388, 408, 943, 409, 882, 862, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 928, 416, 417,
	418, 950, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 858, 0, 901, 902, 903,
	904, 0, 0, 432, 433, 951, 434, 952, 835, 435,
	436, 437, 0, 438, 439, 0, 818, 440, 441, 442,
	443, 445, 918, 446, 0, 866, 447, 448, 449, 498,
	898, 945, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 815, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 811,
	812, 1545, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 839, 871, 828, 829, 830, 826, 827,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 920, 845, 0, 0, 0, 219, 220, 221,
	458, 886, 865, 897, 855, 896, 895, 0, 225, 857,
	856, 228, 229, 230, 847, 919, 231, 955, 956, 464,
	0, 232, 926, 0, 909, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 929, 246, 247, 912, 910, 911, 916,
	914, 913, 915, 248, 249, 250, 251, 900, 253, 893,
	892, 817, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 891, 260, 0, 261, 0, 262, 263, 0, 823,
	264, 265, 267, 270, 266, 271, 272, 273, 946, 947,
	836, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	890, 888, 889, 0, 279, 0, 280, 0, 2078, 930,
	281, 282, 0, 283, 953, 0, 846, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 921, 922, 925,
	932, 0, 923, 867, 0, 0, 0, 211, 293, 295,
	302, 0, 931, 296, 879, 870, 881, 883, 884, 885,
	880, 0, 872, 0, 303, 933, 934, 304, 305, 306,
	935, 905, 906, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 954, 936, 316, 317, 937, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 859, 329, 938, 332, 333,
	335, 334, 814, 212, 939, 837, 924, 894, 336, 337,
	0, 868, 339, 869, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 940, 346, 941, 948, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 949, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 887, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 942, 381, 382, 383, 384, 824, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	860, 861, 863, 864, 398, 402, 405, 406, 917, 407,
	387, 388, 408, 943, 409, 882, 862, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 928, 416, 417, 418,
	950, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 858, 0, 901, 902, 903, 904,
	0, 0, 432, 433, 951, 434, 952, 835, 435, 436,
	437, 0, 438, 439, 0, 818, 440, 441, 442, 443,
	445, 918, 446, 0, 866, 447, 448, 449, 498, 898,
	945, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 815, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 811, 812,
	871, 828, 829, 830, 826, 827, 840, 841, 0, 0,
	0, 0, 839, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 920, 845,
	0, 0, 0, 219, 220, 221, 458, 886, 865, 897,
	855, 896, 895, 0, 225, 857, 856, 228, 229, 230,
	847, 919, 231, 955, 956, 464, 0, 232, 926, 0,
	909, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 912, 910, 911, 916, 914, 913, 915, 248,
	249, 250, 251, 900, 253, 893, 892, 817, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 891, 260, 0,
	261, 0, 262, 263, 0, 823, 264, 265, 267, 270,
	266, 271, 272, 273, 946, 947, 836, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 890, 888, 889, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	953, 0, 846, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 921, 922, 925, 932, 0, 923, 867,
	0, 0, 0, 211, 293, 295, 302, 0, 931, 296,
	879, 870, 881, 883, 884, 885, 880, 0, 872, 0,
	303, 933, 934, 304, 305, 306, 935, 905, 906, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	954, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 859, 329, 938, 332, 333, 335, 334, 814, 212,
	939, 837, 924, 894, 336, 337, 0, 868, 339, 869,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 948, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 949, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 887, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 824, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 860, 861, 863, 864,
	398, 402, 405, 406, 917, 407, 387, 388, 408, 943,
	409, 882, 862, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 928, 416, 417, 418, 950, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	858, 0, 901, 902, 903, 904, 0, 0, 432, 433,
	951, 434, 952, 835, 435, 436, 437, 0, 438, 439,
	0, 818, 440, 441, 442, 443, 445, 918, 446, 0,
	866, 447, 448, 449, 498, 898, 945, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 815, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 811, 812, 0, 0, 0, 0,
	0, 0, 0, 841, 1483, 0, 0, 2083, 839, 871,
	828, 829, 830, 826, 827, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 920, 845, 0,
	0, 0, 219, 220, 221, 458, 886, 865, 897, 855,
	896, 895, 0, 225, 857, 856, 228, 229, 230, 847,
	919, 231, 955, 956, 464, 0, 232, 926, 0, 909,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 912, 910, 911, 916, 914, 913, 915, 248, 249,
	250, 251, 900, 253, 893, 892, 817, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 891, 260, 0, 261,
	0, 262, 263, 0, 823, 264, 265, 267, 270, 266,
	271, 272, 273, 946, 947, 836, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 890, 888, 889, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 953,
	0, 846, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 921, 922, 925, 932, 0, 923, 867, 0,
	0, 0, 211, 293, 295, 302, 0, 931, 296, 879,
	870, 881, 883, 884, 885, 880, 0, 872, 0, 303,
	933, 934, 304, 305, 306, 935, 905, 906, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 954,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	859, 329, 938, 332, 333, 335, 334, 814, 212, 939,
	837, 924, 894, 336, 337, 0, 868, 339, 869, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 948, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 949, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 887, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 824, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 860, 861, 863, 864, 398,
	402, 405, 406, 917, 407, 387, 388, 408, 943, 409,
	882, 862, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 928, 416, 417, 418, 950, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 858,
	0, 901, 902, 903, 904, 0, 0, 432, 433, 951,
	434, 952, 835, 435, 436, 437, 0, 438, 439, 0,
	818, 440, 441, 442, 443, 445, 918, 446, 0, 866,
	447, 448, 449, 498, 898, 945, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	815, 0, 0, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 811, 812, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 2081, 839, 871, 828,
	829, 830, 826, 827, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 920, 845, 0, 0,
	0, 219, 220, 221, 458, 886, 865, 897, 855, 896,
	895, 0, 225, 857, 856, 228, 229, 230, 847, 919,
	231, 955, 956, 464, 0, 232, 926, 0, 909, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 929, 246, 247,
	912, 910, 911, 916, 914, 913, 915, 248, 249, 250,
	251, 900, 253, 893, 892, 817, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 891, 260, 0, 261, 0,
	262, 263, 0, 823, 264, 265, 267, 270, 266, 271,
	272, 273, 946, 947, 836, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 890, 888, 889, 0, 279, 0,
	280, 0, 0, 930, 281, 282, 0, 283, 953, 0,
	846, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 921, 922, 925, 932, 0, 923, 867, 0, 0,
	0, 211, 293, 295, 302, 0, 931, 296, 879, 870,
	881, 883, 884, 885, 880, 0, 872, 0, 303, 933,
	934, 304, 305, 306, 935, 905, 906, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 954, 936,
	316, 317, 937, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 859,
	329, 938, 332, 333, 335, 334, 814, 212, 939, 837,
	924, 894, 336, 337, 0, 868, 339, 869, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 940, 346, 941,
	948, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 949, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 887, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 942, 381, 382, 383, 384,
	824, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 860, 861, 863, 864, 398, 402,
	405, 406, 917, 407, 387, 388, 408, 943, 409, 882,
	862, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	928, 416, 417, 418, 950, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 858, 0,
	901, 902, 903, 904, 0, 0, 432, 433, 951, 434,
	952, 835, 435, 436, 437, 0, 438, 439, 0, 818,
	440, 441, 442, 443, 445, 918, 446, 0, 866, 447,
	448, 449, 498, 898, 945, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 815,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 811, 812, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 2069, 839, 871, 828, 829,
	830, 826, 827, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 920, 845, 0, 0, 0,
	219, 220, 221, 458, 886, 865, 897, 855, 896, 895,
	0, 225, 857, 856, 228, 229, 230, 847, 919, 231,
	955, 956, 464, 0, 232, 926, 0, 909, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 929, 246, 247, 912,
	910, 911, 916, 914, 913, 915, 248, 249, 250, 251,
	900, 253, 893, 892, 817, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 891, 260, 0, 261, 0, 262,
	263, 0, 823, 264, 265, 267, 270, 266, 271, 272,
	273, 946, 947, 836, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 890, 888, 889, 0, 279, 0, 280,
	0, 0, 930, 281, 282, 0, 283, 953, 0, 846,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	921, 922, 925, 932, 0, 923, 867, 0, 0, 0,
	211, 293, 295, 302, 0, 931, 296, 879, 870, 881,
	883, 884, 885, 880, 0, 872, 0, 303, 933, 934,
	304, 305, 306, 935, 905, 906, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 954, 936, 316,
	317, 937, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 859, 329,
	938, 332, 333, 335, 334, 814, 212, 939, 837, 924,
	894, 336, 337, 0, 868, 339, 869, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 940, 346, 941, 948,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 949, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 887, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 942, 381, 382, 383, 384, 824,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 860, 861, 863, 864, 398, 402, 405,
	406, 917, 407, 387, 388, 408, 943, 409, 882, 862,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 928,
	416, 417, 418, 950, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 858, 0, 901,
	902, 903, 904, 0, 0, 432, 433, 951, 434, 952,
	835, 435, 436, 437, 0, 438, 439, 0, 818, 440,
	441, 442, 443, 445, 918, 446, 0, 866, 447, 448,
	449, 498, 898, 945, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 815, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 811, 812, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 2058, 839, 871, 828, 829, 830,
	826, 827, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 920, 845, 0, 0, 0, 219,
	220, 221, 458, 886, 865, 897, 855, 896, 895, 0,
	225, 857, 856, 228, 229, 230, 847, 919, 231, 955,
	956, 464, 0, 232, 926, 0, 909, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 929, 246, 247, 912, 910,
	911, 916, 914, 913, 915, 248, 249, 250, 251, 900,
	253, 893, 892, 817, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 891, 260, 0, 261, 0, 262, 263,
	0, 823, 264, 265, 267, 270, 266, 271, 272, 273,
	946, 947, 836, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 890, 888, 889, 0, 279, 0, 280, 0,
	0, 930, 281, 282, 0, 283, 953, 0, 846, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 921,
	922, 925, 932, 0, 923, 867, 0, 0, 0, 211,
	293, 295, 302, 0, 931, 296, 879, 870, 881, 883,
	884, 885, 880, 0, 872, 0, 303, 933, 934, 304,
	305, 306, 935, 905, 906, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 954, 936, 316, 317,
	937, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 859, 329, 938,
	332, 333, 335, 334, 814, 212, 939, 837, 924, 894,
	336, 337, 0, 868, 339, 869, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 940, 346, 941, 948, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	949, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 887, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 942, 381, 382, 383, 384, 824, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 860, 861, 863, 864, 398, 402, 405, 406,
	917, 407, 387, 388, 408, 943, 409, 882, 862, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 928, 416,
	417, 418, 950, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 858, 0, 901, 902,
	903, 904, 0, 0, 432, 433, 951, 434, 952, 835,
	435, 436, 437, 0, 438, 439, 0, 818, 440, 441,
	442, 443, 445, 918, 446, 0, 866, 447, 448, 449,
	498, 898, 945, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 815, 0, 0,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	811, 812, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 2056, 839, 2048, 828, 829, 830, 826,
	827, 840, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 920, 845, 0, 0, 0, 219, 220,
	221, 458, 886, 865, 897, 855, 896, 895, 0, 225,
	857, 856, 228, 229, 230, 847, 919, 231, 955, 956,
	464, 0, 232, 926, 0, 909, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 929, 246, 247, 912, 910, 911,
	916, 914, 913, 915, 248, 249, 250, 251, 900, 2051,
	893, 892, 817, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 891, 260, 0, 261, 0, 262, 263, 0,
	823, 264, 265, 267, 270, 266, 271, 272, 273, 946,
	947, 836, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 890, 888, 889, 0, 279, 0, 280, 0, 0,
	930, 281, 282, 0, 283, 953, 0, 846, 284, 0,
	285, 286, 287, 2052, 289, 290, 291, 292, 921, 922,
	925, 932, 0, 923, 867, 0, 0, 0, 211, 293,
	295, 302, 0, 931, 296, 879, 870, 881, 883, 884,
	885, 880, 0, 872, 0, 303, 933, 934, 304, 305,
	306, 935, 905, 906, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 954, 936, 316, 317, 937,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 2053, 2050, 330, 859, 329, 938, 332,
	333, 335, 334, 814, 212, 939, 837, 924, 894, 336,
	337, 0, 868, 339, 869, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 940, 346, 941, 948, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 949,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 887, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 942, 381, 382, 383, 384, 824, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 2054, 0, 403,
	404, 860, 861, 863, 864, 398, 402, 405, 406, 917,
	407, 387, 388, 408, 943, 409, 882, 862, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 928, 416, 417,
	418, 950, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 858, 0, 901, 902, 903,
	904, 0, 0, 432, 433, 951, 434, 952, 835, 435,
	436, 437, 0, 438, 439, 0, 818, 440, 441, 442,
	443, 445, 918, 446, 0, 866, 447, 448, 449, 498,
	898, 945, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 2049, 456, 815, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 811,
	812, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 2045, 839, 2048, 828, 829, 830, 826, 827,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 920, 845, 0, 0, 0, 219, 220, 221,
	458, 886, 865, 897, 855, 896, 895, 0, 225, 857,
	856, 228, 229, 230, 847, 919, 231, 955, 956, 464,
	0, 232, 926, 0, 909, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 929, 246, 247, 912, 910, 911, 916,
	914, 913, 915, 248, 249, 250, 251, 900, 2051, 893,
	892, 817, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 891, 260, 0, 261, 0, 262, 263, 0, 823,
	264, 265, 267, 270, 266, 271, 272, 273, 946, 947,
	836, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	890, 888, 889, 0, 279, 0, 280, 0, 0, 930,
	281, 282, 0, 283, 953, 0, 846, 284, 0, 285,
	286, 287, 2052, 289, 290, 291, 292, 921, 922, 925,
	932, 0, 923, 867, 0, 0, 0, 211, 293, 295,
	302, 0, 931, 296, 879, 870, 881, 883, 884, 885,
	880, 0, 872, 0, 303, 933, 934, 304, 305, 306,
	935, 905, 906, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 954, 936, 316, 317, 937, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 2053, 2050, 330, 859, 329, 938, 332, 333,
	335, 334, 814, 212, 939, 837, 924, 894, 336, 337,
	0, 868, 339, 869, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 940, 346, 941, 948, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 949, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 887, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 942, 381, 382, 383, 384, 824, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 2054, 0, 403, 404,
	860, 861, 863, 864, 398, 402, 405, 406, 917, 407,
	387, 388, 408, 943, 409, 882, 862, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 928, 416, 417, 418,
	950, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 858, 0, 901, 902, 903, 904,
	0, 0, 432, 433, 951, 434, 952, 835, 435, 436,
	437, 0, 438, 439, 0, 818, 440, 441, 442, 443,
	445, 918, 446, 0, 866, 447, 448, 449, 498, 898,
	945, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 2049, 456, 815, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 811, 812,
	871, 828, 829, 830, 826, 827, 840, 841, 0, 0,
	0, 0, 839, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 920, 845,
	0, 0, 0, 219, 220, 221, 458, 886, 865, 897,
	855, 896, 895, 0, 225, 857, 856, 228, 229, 230,
	847, 919, 231, 955, 956, 464, 0, 232, 926, 0,
	909, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 912, 910, 911, 916, 914, 913, 915, 248,
	249, 250, 251, 900, 253, 893, 892, 817, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 891, 260, 0,
	261, 0, 262, 263, 0, 823, 264, 265, 267, 270,
	266, 271, 272, 273, 946, 947, 836, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 890, 888, 889, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	953, 0, 846, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 921, 922, 925, 932, 0, 923, 867,
	0, 0, 0, 211, 293, 295, 302, 0, 931, 296,
	879, 870, 881, 883, 884, 885, 880, 0, 872, 0,
	303, 933, 934, 304, 305, 306, 935, 905, 906, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	954, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 859, 329, 938, 332, 333, 335, 334, 814, 212,
	939, 837, 924, 894, 336, 337, 0, 868, 339, 869,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 948, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 949, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 887, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 824, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 860, 861, 863, 864,
	398, 402, 405, 406, 917, 407, 387, 388, 408, 943,
	409, 882, 862, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 928, 416, 417, 418, 950, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	858, 0, 901, 902, 903, 904, 0, 0, 432, 433,
	951, 434, 952, 835, 435, 436, 437, 0, 438, 439,
	0, 818, 440, 441, 442, 443, 445, 918, 446, 0,
	866, 447, 448, 449, 498, 898, 945, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 815, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 811, 812, 0, 0, 0, 0,
	0, 1491, 0, 841, 0, 0, 0, 0, 839, 871,
	828, 829, 830, 826, 827, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 1890, 218, 0, 0, 0, 0, 920, 845, 0,
	0, 0, 219, 220, 221, 458, 886, 865, 897, 855,
	896, 895, 0, 225, 857, 856, 228, 229, 230, 847,
	919, 231, 955, 956, 464, 0, 232, 926, 0, 909,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 912, 910, 911, 916, 914, 913, 915, 248, 249,
	250, 251, 900, 253, 893, 892, 817, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 891, 260, 0, 261,
	0, 262, 263, 0, 823, 264, 265, 267, 270, 266,
	271, 272, 273, 946, 947, 836, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 890, 888, 889, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 953,
	0, 846, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 921, 922, 925, 932, 0, 923, 867, 0,
	0, 0, 211, 293, 295, 302, 0, 931, 296, 879,
	870, 881, 883, 884, 885, 880, 0, 872, 0, 303,
	933, 934, 304, 305, 306, 935, 905, 906, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 954,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	859, 329, 938, 332, 333, 335, 334, 814, 212, 939,
	837, 924, 894, 336, 337, 0, 868, 339, 869, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 948, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 949, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 887, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 824, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 860, 861, 863, 864, 398,
	402, 405, 406, 917, 407, 387, 388, 408, 943, 409,
	882, 862, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 928, 416, 417, 418, 950, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 858,
	0, 901, 902, 903, 904, 0, 0, 432, 433, 951,
	434, 952, 835, 435, 436, 437, 0, 438, 439, 0,
	818, 440, 441, 442, 443, 445, 918, 446, 0, 866,
	447, 448, 449, 498, 898, 945, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	815, 0, 0, 0, 0, 0, 0, 0, 813, 0,
	0, 0, 0, 811, 812, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 1186, 839, 871, 828,
	829, 830, 826, 827, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 920, 845, 0, 0,
	0, 219, 220, 221, 458, 886, 865, 897, 855, 896,
	895, 0, 225, 857, 856, 228, 229, 230, 847, 919,
	231, 955, 956, 464, 0, 232, 926, 0, 909, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 929, 246, 247,
	912, 910, 911, 916, 914, 913, 915, 248, 249, 250,
	251, 900, 253, 893, 892, 817, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 891, 260, 0, 261, 0,
	262, 263, 0, 823, 264, 265, 267, 270, 266, 271,
	272, 273, 946, 947, 836, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 890, 888, 889, 0, 279, 0,
	280, 0, 0, 930, 281, 282, 0, 283, 953, 0,
	846, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1185, 922, 925, 932, 0, 923, 867, 0, 0,
	0, 211, 293, 295, 302, 0, 931, 296, 879, 870,
	881, 883, 884, 885, 880, 0, 872, 0, 303, 933,
	934, 304, 305, 306, 935, 905, 906, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 954, 936,
	316, 317, 937, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 859,
	329, 938, 332, 333, 335, 334, 814, 212, 939, 837,
	924, 894, 336, 337, 0, 868, 339, 869, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 940, 346, 941,
	948, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 949, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 887, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 942, 381, 382, 383, 384,
	824, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 860, 861, 863, 864, 398, 402,
	405, 406, 917, 407, 387, 388, 408, 943, 409, 882,
	862, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	928, 416, 417, 418, 950, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 858, 0,
	901, 902, 903, 904, 0, 0, 432, 433, 951, 434,
	952, 835, 435, 436, 437, 0, 438, 439, 0, 818,
	440, 441, 442, 443, 445, 918, 446, 0, 866, 447,
	448, 449, 498, 898, 945, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 815,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 811, 812, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 1180, 839, 871, 828, 829,
	830, 826, 827, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 920, 845, 0, 0, 0,
	219, 220, 221, 458, 886, 865, 897, 855, 896, 895,
	0, 225, 857, 856, 228, 229, 230, 847, 919, 231,
	955, 956, 464, 0, 232, 926, 0, 909, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 929, 246, 247, 912,
	910, 911, 916, 914, 913, 915, 248, 249, 250, 251,
	900, 253, 893, 892, 817, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 891, 260, 0, 261, 0, 262,
	263, 0, 823, 264, 265, 267, 270, 266, 271, 272,
	273, 946, 947, 836, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 890, 888, 889, 0, 279, 0, 280,
	0, 0, 930, 281, 282, 0, 283, 953, 0, 846,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	1179, 922, 925, 932, 0, 923, 867, 0, 0, 0,
	211, 293, 295, 302, 0, 931, 296, 879, 870, 881,
	883, 884, 885, 880, 0, 872, 0, 303, 933, 934,
	304, 305, 306, 935, 905, 906, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 954, 936, 316,
	317, 937, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 859, 329,
	938, 332, 333, 335, 334, 814, 212, 939, 837, 924,
	894, 336, 337, 0, 868, 339, 869, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 940, 346, 941, 948,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 949, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 887, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 942, 381, 382, 383, 384, 824,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 860, 861, 863, 864, 398, 402, 405,
	406, 917, 407, 387, 388, 408, 943, 409, 882, 862,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 928,
	416, 417, 418, 950, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 858, 0, 901,
	902, 903, 904, 0, 0, 432, 433, 951, 434, 952,
	835, 435, 436, 437, 0, 438, 439, 0, 818, 440,
	441, 442, 443, 445, 918, 446, 0, 866, 447, 448,
	449, 498, 898, 945, 0, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 815, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 811, 812, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 1175, 839, 871, 828, 829, 830,
	826, 827, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 920, 845, 0, 0, 0, 219,
	220, 221, 458, 886, 865, 897, 855, 896, 895, 0,
	225, 857, 856, 228, 229, 230, 847, 919, 231, 955,
	956, 464, 0, 232, 926, 0, 909, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 929, 246, 247, 912, 910,
	911, 916, 914, 913, 915, 248, 249, 250, 251, 900,
	253, 893, 892, 817, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 891, 260, 0, 261, 0, 262, 263,
	0, 823, 264, 265, 267, 270, 266, 271, 272, 273,
	946, 947, 836, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 890, 888, 889, 0, 279, 0, 280, 0,
	0, 930, 281, 282, 0, 283, 953, 0, 846, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 921,
	922, 925, 932, 0, 923, 867, 0, 0, 0, 211,
	293, 295, 302, 0, 931, 296, 879, 870, 881, 883,
	884, 885, 880, 0, 872, 0, 303, 933, 934, 304,
	305, 306, 935, 905, 906, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 954, 936, 316, 317,
	937, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 859, 329, 938,
	332, 333, 335, 334, 814, 212, 939, 837, 924, 894,
	336, 337, 0, 868, 339, 869, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 940, 346, 941, 948, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	949, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 887, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 942, 381, 382, 383, 384, 824, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 860, 861, 863, 864, 398, 402, 405, 406,
	917, 407, 387, 388, 408, 943, 409, 882, 862, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 928, 416,
	417, 418, 950, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 858, 0, 901, 902,
	903, 904, 0, 0, 432, 433, 951, 434, 952, 835,
	435, 436, 437, 0, 438, 439, 0, 818, 440, 441,
	442, 443, 445, 918, 446, 0, 866, 447, 448, 449,
	498, 898, 945, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 815, 0, 0,
	0, 0, 0, 0, 0, 813, 0, 0, 0, 0,
	811, 812, 871, 828, 829, 830, 826, 827, 840, 841,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	920, 845, 0, 0, 0, 219, 220, 221, 458, 886,
	865, 897, 855, 896, 895, 0, 225, 857, 856, 228,
	229, 230, 847, 919, 231, 955, 956, 464, 0, 232,
	926, 0, 909, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 929, 246, 247, 912, 910, 911, 916, 914, 913,
	915, 248, 249, 250, 251, 900, 253, 893, 892, 817,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 891,
	260, 0, 261, 0, 262, 263, 0, 823, 264, 265,
	267, 270, 266, 271, 272, 273, 946, 947, 836, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 890, 888,
	889, 0, 279, 0, 280, 0, 0, 930, 281, 282,
	0, 283, 953, 0, 846, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 921, 922, 925, 932, 0,
	923, 867, 0, 0, 0, 211, 293, 295, 302, 0,
	931, 296, 879, 870, 881, 883, 884, 885, 880, 0,
	872, 0, 303, 933, 934, 304, 305, 306, 935, 905,
	906, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 954, 936, 316, 317, 937, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 859, 329, 938, 332, 333, 335, 334,
	814, 212, 939, 837, 924, 894, 336, 337, 0, 868,
	339, 869, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 940, 346, 941, 948, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 949, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 887,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 942,
	381, 382, 383, 384, 824, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 860, 861,
	863, 864, 398, 402, 405, 406, 917, 407, 387, 388,
	408, 943, 409, 882, 862, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 928, 416, 417, 418, 950, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 858, 0, 901, 902, 903, 904, 0, 0,
	432, 433, 951, 434, 952, 835, 435, 436, 437, 0,
	438, 439, 0, 818, 440, 441, 442, 443, 445, 918,
	446, 0, 866, 447, 448, 449, 498, 898, 945, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 815, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 0, 0, 0, 811, 812, 871, 828,
	829, 830, 826, 827, 840, 841, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 920, 845, 0, 0,
	0, 219, 220, 221, 458, 886, 865, 897, 855, 896,
	895, 0, 225, 857, 856, 228, 229, 230, 847, 919,
	231, 955, 956, 464, 0, 232, 926, 0, 909, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 929, 246, 3318,
	912, 910, 911, 916, 914, 913, 915, 248, 249, 250,
	251, 900, 253, 893, 892, 817, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 891, 260, 0, 261, 0,
	262, 263, 0, 823, 264, 265, 267, 270, 266, 271,
	272, 273, 946, 947, 836, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 890, 888, 889, 0, 279, 0,
	280, 0, 0, 930, 281, 282, 0, 283, 953, 0,
	846, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 921, 922, 925, 932, 0, 923, 867, 0, 0,
	0, 211, 293, 295, 302, 0, 931, 296, 879, 870,
	881, 883, 884, 885, 880, 0, 872, 0, 303, 933,
	934, 304, 305, 306, 935, 905, 906, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 954, 936,
	316, 317, 937, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 859,
	329, 938, 332, 333, 335, 334, 814, 212, 939, 837,
	924, 894, 336, 337, 0, 868, 339, 869, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 940, 346, 941,
	948, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 949, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 887, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 942, 381, 382, 383, 384,
	824, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 860, 861, 863, 864, 398, 402,
	405, 406, 917, 407, 387, 388, 408, 943, 409, 882,
	862, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	928, 416, 417, 418, 950, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 858, 0,
	901, 902, 903, 904, 0, 0, 432, 433, 951, 434,
	952, 835, 435, 436, 437, 0, 3317, 439, 0, 818,
	440, 441, 442, 443, 445, 918, 446, 0, 866, 447,
	448, 449, 498, 898, 945, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 815,
	0, 0, 0, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 811, 812, 871, 828, 829, 830, 826, 827,
	840, 841, 0, 0, 0, 0, 839, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 920, 845, 0, 0, 0, 219, 220, 221,
	3316, 886, 865, 897, 855, 896, 895, 0, 225, 857,
	856, 228, 229, 230, 847, 919, 231, 955, 956, 464,
	0, 232, 926, 0, 909, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 929, 246, 3318, 912, 910, 911, 916,
	914, 913, 915, 248, 249, 250, 251, 900, 253, 893,
	892, 817, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 891, 260, 0, 261, 0, 262, 263, 0, 823,
	264, 265, 267, 270, 266, 271, 272, 273, 946, 947,
	836, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	890, 888, 889, 0, 279, 0, 280, 0, 0, 930,
	281, 282, 0, 283, 953, 0, 846, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 921, 922, 925,
	932, 0, 923, 867, 0, 0, 0, 211, 293, 295,
	302, 0, 931, 296, 879, 870, 881, 883, 884, 885,
	880, 0, 872, 0, 303, 933, 934, 304, 305, 306,
	935, 905, 906, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 954, 936, 316, 317, 937, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 859, 329, 938, 332, 333,
	335, 334, 814, 212, 939, 837, 924, 894, 336, 337,
	0, 868, 339, 869, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 940, 346, 941, 948, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 949, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 887, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 942, 381, 382, 383, 384, 824, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	860, 861, 863, 864, 398, 402, 405, 406, 917, 407,
	387, 388, 408, 943, 409, 882, 862, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 928, 416, 417, 418,
	950, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 858, 0, 901, 902, 903, 904,
	0, 0, 432, 433, 951, 434, 952, 835, 435, 436,
	437, 0, 3317, 439, 0, 818, 440, 441, 442, 443,
	445, 918, 446, 0, 866, 447, 448, 449, 498, 898,
	945, 0, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 815, 0, 0, 0, 0,
	0, 0, 0, 813, 0, 0, 0, 0, 811, 812,
	871, 828, 829, 830, 826, 827, 840, 841, 0, 0,
	0, 0, 839, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 920, 845,
	0, 0, 0, 219, 220, 221, 458, 886, 865, 897,
	855, 896, 895, 0, 225, 857, 856, 228, 229, 230,
	847, 919, 231, 955, 956, 464, 0, 232, 926, 0,
	909, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 912, 910, 911, 916, 914, 913, 915, 248,
	249, 250, 251, 900, 253, 893, 892, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 891, 260, 0,
	261, 0, 262, 263, 0, 823, 264, 265, 267, 270,
	266, 271, 272, 273, 946, 947, 836, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 890, 888, 889, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	953, 0, 846, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 921, 922, 925, 932, 0, 923, 867,
	0, 0, 0, 211, 293, 295, 302, 0, 931, 296,
	879, 870, 881, 883, 884, 885, 880, 0, 872, 0,
	303, 933, 934, 304, 305, 306, 935, 905, 906, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	954, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 859, 329, 938, 332, 333, 335, 334, 0, 212,
	939, 837, 924, 894, 336, 337, 0, 868, 339, 869,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 948, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 949, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 887, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 824, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 860, 861, 863, 864,
	398, 402, 405, 406, 917, 407, 387, 388, 408, 943,
	409, 882, 862, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 928, 416, 417, 418, 950, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	858, 0, 901, 902, 903, 904, 0, 0, 432, 433,
	951, 434, 952, 835, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 918, 446, 0,
	866, 447, 448, 449, 498, 898, 945, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 871, 828, 829, 830, 826, 827, 840, 0, 2066,
	0, 0, 0, 0, 2064, 2065, 0, 0, 213, 214,
	215, 216, 217, 841, 218, 0, 0, 0, 839, 920,
	845, 0, 0, 0, 219, 220, 221, 0, 886, 865,
	897, 855, 896, 895, 0, 225, 857, 856, 228, 229,
	230, 847, 919, 231, 955, 956, 464, 0, 232, 926,
	0, 909, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	929, 246, 3318, 912, 910, 911, 916, 914, 913, 915,
	248, 249, 250, 251, 900, 253, 893, 892, 817, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 891, 260,
	0, 261, 0, 262, 263, 0, 823, 264, 265, 267,
	270, 266, 271, 272, 273, 946, 947, 836, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 890, 888, 889,
	0, 279, 0, 280, 0, 0, 930, 281, 282, 0,
	283, 953, 0, 846, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 921, 922, 925, 0, 0, 923,
	867, 0, 0, 0, 211, 293, 295, 302, 0, 931,
	296, 879, 870, 881, 883, 884, 885, 880, 0, 872,
	0, 303, 0, 0, 304, 305, 306, 935, 905, 906,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 954, 936, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 859, 329, 938, 332, 333, 335, 334, 814,
	212, 0, 837, 924, 894, 336, 337, 0, 868, 339,
	869, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	940, 346, 941, 948, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 949, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 887, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 942, 381,
	382, 383, 384, 824, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 860, 861, 863,
	864, 398, 402, 405, 406, 917, 407, 387, 388, 408,
	0, 409, 882, 862, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 928, 416, 417, 418, 950, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 858, 0, 901, 902, 903, 904, 0, 0, 432,
	433, 951, 434, 952, 835, 435, 436, 437, 0, 3317,
	439, 0, 818, 440, 441, 442, 443, 445, 918, 446,
	0, 866, 447, 448, 449, 498, 898, 945, 0, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 804, 0, 992, 0, 811, 812, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 839,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 919, 231, 462, 463, 464, 0,
	232, 926, 0, 909, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 929, 246, 247, 912, 910, 911, 916, 914,
	913, 915, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 946, 947, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 930, 281,
	282, 0, 283, 953, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 921, 922, 925, 932,
	0, 923, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 931, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 933, 934, 304, 305, 306, 935,
	307, 308, 0, 0, 309, 310, 311, 312, 979, 314,
	313, 0, 315, 954, 936, 316, 317, 937, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 938, 332, 333, 335,
	334, 0, 212, 939, 0, 924, 483, 336, 337, 0,
	338, 339, 340, 0, 984, 342, 343, 344, 0, 0,
	345, 484, 940, 346, 941, 948, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 949, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	942, 381, 382, 383, 384, 489, 986, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 176, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 917, 407, 387,
	388, 408, 943, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 950,
	0, 423, 424, 422, 178, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 951, 434, 952, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	918, 446, 0, 444, 447, 448, 449, 1296, 499, 500,
	0, 451, 450, 501, 992, 0, 0, 170, 452, 453,
	502, 454, 455, 456, 0, 171, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 920, 0, 976, 0, 1570, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 919, 231, 462, 463, 464,
	0, 232, 926, 0, 909, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 929, 246, 247, 912, 910, 911, 916,
	914, 913, 915, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 946, 947,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 930,
	281, 282, 0, 283, 953, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 921, 922, 925,
	932, 0, 923, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 931, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 933, 934, 304, 305, 306,
	935, 307, 308, 0, 0, 309, 310, 311, 312, 979,
	314, 313, 0, 315, 954, 936, 316, 317, 937, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 938, 332, 333,
	335, 334, 0, 212, 939, 0, 924, 483, 336, 337,
	0, 338, 339, 340, 0, 984, 342, 343, 344, 0,
	0, 345, 484, 940, 346, 941, 948, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 949, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 942, 381, 382, 383, 384, 489, 986, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 176, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 917, 407,
	387, 388, 408, 943, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	950, 0, 423, 424, 422, 178, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 951, 434, 952, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 918, 446, 0, 444, 447, 448, 449, 1296, 499,
	500, 0, 451, 450, 501, 0, 0, 0, 170, 452,
	453, 502, 454, 455, 456, 0, 171, 0, 0, 2493,
	0, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 1570, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 920,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 919, 231, 462, 463, 464, 0, 232, 926,
	0, 909, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	929, 246, 247, 912, 910, 911, 916, 914, 913, 915,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 946, 947, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 930, 281, 282, 0,
	283, 953, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 921, 922, 925, 932, 0, 923,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 931,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 933, 934, 304, 305, 306, 935, 307, 308,
	0, 0, 309, 310, 311, 312, 979, 314, 313, 0,
	315, 954, 936, 316, 317, 937, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 938, 332, 333, 335, 334, 0,
	212, 939, 0, 924, 483, 336, 337, 0, 338, 339,
	340, 0, 984, 342, 343, 344, 0, 0, 345, 484,
	940, 346, 941, 948, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 949, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 942, 381,
	382, 383, 384, 489, 986, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 917, 407, 387, 388, 408,
	943, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 950, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 951, 434, 952, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 918, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 0, 975, 0, 992, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 976, 920, 981, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 919, 231, 462, 463,
	464, 0, 232, 926, 0, 909, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 929, 246, 247, 912, 910, 911,
	916, 914, 913, 915, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 946,
	947, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	930, 281, 282, 0, 283, 953, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 921, 922,
	925, 932, 0, 923, 294, 0, 0, 0, 211, 293,
	295, 302, 0, 931, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 933, 934, 304, 305,
	306, 935, 307, 308, 0, 0, 309, 310, 311, 312,
	979, 314, 313, 0, 315, 954, 936, 316, 317, 937,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 938, 332,
	333, 335, 334, 0, 212, 939, 0, 924, 483, 336,
	337, 0, 338, 339, 340, 0, 984, 342, 343, 344,
	0, 0, 345, 484, 940, 346, 941, 948, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 949,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 942, 381, 382, 383, 384, 489, 986, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 917,
	407, 387, 388, 408, 943, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 950, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 951, 434, 952, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 918, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 992, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 920, 0, 976, 0, 981, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 919, 231, 462,
	463, 464, 0, 232, 926, 0, 909, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 929, 246, 247, 912, 910,
	911, 916, 914, 913, 915, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	946, 947, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 930, 281, 282, 0, 283, 953, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 921,
	922, 925, 932, 0, 923, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 931, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 933, 934, 304,
	305, 306, 935, 307, 308, 0, 0, 309, 310, 311,
	312, 979, 314, 313, 0, 315, 954, 936, 316, 317,
	937, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 938,
	332, 333, 335, 334, 0, 212, 939, 0, 924, 483,
	336, 337, 0, 338, 339, 340, 0, 984, 342, 343,
	344, 0, 0, 345, 484, 940, 346, 941, 948, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	949, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 942, 381, 382, 383, 384, 489, 986,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	917, 407, 387, 388, 408, 943, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 950, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 951, 434, 952, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 918, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 992, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 920, 0, 976, 0, 981,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 919, 231,
	462, 463, 464, 0, 232, 926, 0, 909, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 929, 246, 247, 912,
	910, 911, 916, 914, 913, 915, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 946, 947, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 930, 281, 282, 0, 283, 953, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	921, 922, 925, 932, 0, 923, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 931, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 933, 934,
	304, 305, 306, 935, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 954, 936, 316,
	317, 937, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	938, 332, 333, 335, 334, 0, 212, 939, 0, 924,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 940, 346, 941, 948,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 949, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 942, 381, 382, 383, 384, 489,
	986, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 917, 407, 387, 388, 408, 943, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 950, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 951, 434, 952,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 918, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 804, 0,
	1150, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	1472, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	1054, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 932, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 931, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 933, 934, 304, 305, 306, 935, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 938, 332, 333, 335, 334, 0, 0,
	939, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 943,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 1296, 499, 500, 0, 451, 450,
	501, 1293, 0, 1150, 170, 452, 453, 502, 454, 455,
	456, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 148, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 1054, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 929, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 930, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 932,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 931, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 933, 934, 304, 305, 306, 935,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 936, 316, 317, 937, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 938, 332, 333, 335,
	334, 0, 0, 939, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 940, 346, 941, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	942, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 176, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 943, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 178, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 1296, 499, 500,
	0, 451, 450, 501, 0, 0, 0, 170, 452, 453,
	502, 454, 455, 456, 0, 171, 0, 0, 0, 0,
	1150, 1149, 0, 0, 0, 0, 1147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	1054, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 932, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 931, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 933, 934, 304, 305, 306, 935, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 938, 332, 333, 335, 334, 0, 0,
	939, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 943,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 1150, 1149, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 2685, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 1054, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	929, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 930, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 932, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 931,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 933, 934, 304, 305, 306, 935, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 936, 316, 317, 937, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 938, 332, 333, 335, 334, 0,
	0, 939, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	940, 346, 941, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 942, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	943, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 992, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	920, 0, 0, 0, 1300, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 919, 231, 462, 463, 464, 0, 232,
	926, 0, 909, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 929, 246, 247, 912, 910, 911, 916, 914, 913,
	915, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 946, 947, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 930, 281, 282,
	0, 283, 953, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 921, 922, 925, 932, 0,
	923, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	931, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 933, 934, 304, 305, 306, 935, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 954, 936, 316, 317, 937, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 938, 332, 333, 335, 334,
	0, 212, 939, 0, 924, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 940, 346, 941, 948, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 949, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 942,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 917, 407, 387, 388,
	408, 943, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 950, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 951, 434, 952, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 918,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 207,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	207, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 1575, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 207, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 2635, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 207, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 2291, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 679, 0, 571, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 2757, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 577, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 474, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 211, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 576, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 0, 570, 0, 571,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 580, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	577, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	576, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 571, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 580, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 577, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 212, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 1854, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 576, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 571, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 580, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 577, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 576, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 580,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 1322, 0, 1150, 1149, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 1054, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 929, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 1321, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 930, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 932,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 931, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 933, 934, 304, 305, 306, 935,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 936, 316, 317, 937, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 938, 332, 333, 335,
	334, 0, 0, 939, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 940, 346, 941, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 1320, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	942, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 943, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 1291, 0, 1150, 1149, 0, 0,
	0, 0, 1147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 1054, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 929, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 930, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 1290,
	475, 476, 932, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 931, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 933, 934, 304,
	305, 306, 935, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 936, 316, 317,
	937, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 938,
	332, 333, 335, 334, 0, 0, 939, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 940, 346, 941, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 942, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 943, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 1287, 0, 1150,
	1149, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 1054,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 1286, 475, 476, 932, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 931, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	933, 934, 304, 305, 306, 935, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 938, 332, 333, 335, 334, 0, 0, 939,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 943, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	1225, 0, 1150, 1149, 0, 0, 0, 0, 1147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 1054, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 929, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 930, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 1224, 475, 476, 932, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	931, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 933, 934, 304, 305, 306, 935, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 936, 316, 317, 937, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 938, 332, 333, 335, 334,
	0, 0, 939, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 940, 346, 941, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 942,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 943, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 1222, 0, 1150, 1149, 0, 0, 0,
	0, 1147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 1054, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 929, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	930, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1221, 475,
	476, 932, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 931, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 933, 934, 304, 305,
	306, 935, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 936, 316, 317, 937,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 938, 332,
	333, 335, 334, 0, 0, 939, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 940, 346, 941, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 942, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 943, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 1143, 0, 1150, 1149,
	0, 0, 0, 0, 1147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 1054, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 929, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 930, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1145, 475, 476, 932, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 931, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 933,
	934, 304, 305, 306, 935, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 936,
	316, 317, 937, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 938, 332, 333, 335, 334, 0, 0, 939, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 940, 346, 941,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 942, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 943, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 1150,
	1149, 0, 0, 0, 0, 1147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 1054,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 929, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 930, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 932, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 931, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	933, 934, 304, 305, 306, 935, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	936, 316, 317, 937, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 938, 332, 333, 335, 334, 0, 0, 939,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 940, 346,
	941, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 942, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 943, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	1150, 1149, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	1054, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 929,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 930, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 932, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 931, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 933, 934, 304, 305, 306, 935, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 936, 316, 317, 937, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 938, 332, 333, 335, 334, 0, 0,
	939, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 940,
	346, 941, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 942, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 943,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 1150, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 1054, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 929, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 930, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 932, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 931, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 933, 934,
	304, 305, 306, 935, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 936, 316,
	317, 937, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	938, 332, 333, 335, 334, 0, 0, 939, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 940, 346, 941, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 942, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 943, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	2185, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 2182, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 2326, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 2188, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 2323, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 2325, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 2322, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 2187, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 2324, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 207, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 2185, 232, 465,
	0, 0, 2179, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 2182, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 2188, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 2178, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 2187,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 2186, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1366, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 1369, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 1367, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 1368, 450, 501, 1138, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	1140, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 984, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 1135, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 1137, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 984, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 1042, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 1044, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 984, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 533, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 532, 217, 522, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 525, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 526, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 527,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 521, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 522, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 525, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 526, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 527, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 207, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 212, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 984, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 2255, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	1838, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 212, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 207,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	1776, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	1769, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 1768, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 212, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 1764, 0, 207, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1766, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 211, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 1280, 0, 207, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1279, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 212, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 1277,
	0, 207, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 1276, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1274, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 1273, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 212, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 1270, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	1269, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 1245, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 1160, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 1162, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 211, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 207, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 525, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 526, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	527, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 671, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 670, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 510, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 509, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	508, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	2119, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 207, 2313, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 474, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 207, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 2880, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 207,
	2313, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 2310, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 207, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 1844, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 1836, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	553, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 1020, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 554, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	550, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 549, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 1788, 0, 207, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 1787, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 0, 451, 450, 501, 553, 0, 207, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 543, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 474, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	554, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 550, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	1299, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	549, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 0, 451, 450, 501, 1284,
	0, 207, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 1283, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 0, 451,
	450, 501, 1233, 0, 207, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 1232, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 0, 451, 450, 501, 1217, 0, 207, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 0, 451, 450, 501, 1154, 0,
	207, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 553, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 1020, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 554, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 550, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 549, 493, 494, 495, 0,
	0, 432, 1021, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 1003, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 474, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 0, 451, 450,
	501, 553, 0, 207, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	543, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 541, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 474, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	542, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 554, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 544, 385, 0, 386, 390,
	391, 550, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 545, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 549, 493, 494, 495, 0,
	0, 432, 547, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	0, 451, 450, 501, 537, 0, 207, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 474,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 538, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 0, 451, 450, 501, 535, 0, 207,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 474, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 0, 451, 450, 501,
	529, 0, 207, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 505, 0, 207, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 474, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 207, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 207,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 219, 220, 221, 458, 459, 222, 460, 223,
	224, 461, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 462, 463, 464, 0, 232, 465, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 466, 467, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 468, 264, 265, 267, 270, 266,
	271, 272, 273, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 471, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 472,
	0, 473, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 292, 2581, 475, 476, 0, 0, 480, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 0, 296, 477,
	298, 297, 299, 300, 301, 478, 0, 479, 0, 303,
	0, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 481,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 482, 483, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 484, 0, 346,
	0, 485, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 486, 356, 487, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 488, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 489, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	490, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 491, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 492, 493, 494, 495, 0, 0, 432, 433, 496,
	434, 497, 0, 435, 436, 437, 0, 438, 439, 0,
	0, 440, 441, 442, 443, 445, 0, 446, 0, 444,
	447, 448, 449, 498, 499, 500, 207, 451, 450, 501,
	0, 0, 0, 0, 452, 453, 502, 454, 455, 456,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 457, 0, 0, 0, 0, 219,
	220, 221, 458, 459, 222, 460, 223, 224, 461, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 462,
	463, 464, 0, 232, 465, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 466, 467, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 468, 264, 265, 267, 270, 266, 271, 272, 273,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 471, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 472, 0, 473, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 292, 2579,
	475, 476, 0, 0, 480, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 477, 298, 297, 299,
	300, 301, 478, 0, 479, 0, 303, 0, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 481, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 482, 483,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 484, 0, 346, 0, 485, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	486, 356, 487, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 488, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 489, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 490, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 491, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 492, 493,
	494, 495, 0, 0, 432, 433, 496, 434, 497, 0,
	435, 436, 437, 0, 438, 439, 0, 0, 440, 441,
	442, 443, 445, 0, 446, 0, 444, 447, 448, 449,
	498, 499, 500, 207, 451, 450, 501, 0, 0, 0,
	0, 452, 453, 502, 454, 455, 456, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 457, 0, 0, 0, 0, 219, 220, 221, 458,
	459, 222, 460, 223, 224, 461, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 462, 463, 464, 0,
	232, 465, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 466, 467,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 468, 264,
	265, 267, 270, 266, 271, 272, 273, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 471,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 472, 0, 473, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 292, 2567, 475, 476, 0,
	0, 480, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 477, 298, 297, 299, 300, 301, 478,
	0, 479, 0, 303, 0, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 481, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 482, 483, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 484, 0, 346, 0, 485, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 486, 356, 487,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	488, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 489, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 490, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 491,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 492, 493, 494, 495, 0,
	0, 432, 433, 496, 434, 497, 0, 435, 436, 437,
	0, 438, 439, 0, 0, 440, 441, 442, 443, 445,
	0, 446, 0, 444, 447, 448, 449, 498, 499, 500,
	207, 451, 450, 501, 0, 0, 0, 0, 452, 453,
	502, 454, 455, 456, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 457, 0,
	0, 0, 0, 219, 220, 221, 458, 459, 222, 460,
	223, 224, 461, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 462, 463, 464, 0, 232, 465, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 466, 467, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 468, 264, 265, 267, 270,
	266, 271, 272, 273, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 471, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	472, 0, 473, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 292, 2273, 475, 476, 0, 0, 480, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	477, 298, 297, 299, 300, 301, 478, 0, 479, 0,
	303, 0, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	481, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 0,
	0, 0, 482, 483, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 484, 0,
	346, 0, 485, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 486, 356, 487, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 488, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 489, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 490, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 491, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 492, 493, 494, 495, 0, 0, 432, 433,
	496, 434, 497, 0, 435, 436, 437, 0, 438, 439,
	0, 0, 440, 441, 442, 443, 445, 0, 446, 0,
	444, 447, 448, 449, 498, 499, 500, 207, 451, 450,
	501, 0, 0, 0, 0, 452, 453, 502, 454, 455,
	456, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	219, 220, 221, 458, 459, 222, 460, 223, 224, 461,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	462, 463, 464, 0, 232, 465, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 466, 467, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 468, 264, 265, 267, 270, 266, 271, 272,
	273, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 471, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 472, 0, 473,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 292,
	474, 475, 476, 0, 0, 480, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 0, 296, 477, 298, 297,
	299, 300, 301, 478, 0, 479, 0, 303, 0, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 481, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 482,
	483, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 484, 0, 346, 0, 485,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 486, 356, 487, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 488, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 489,
	385, 0, 386, 538, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 490, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 491, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 492,
	493, 494, 495, 0, 0, 432, 433, 496, 434, 497,
	0, 435, 436, 437, 0, 438, 439, 0, 0, 440,
	441, 442, 443, 445, 0, 446, 0, 444, 447, 448,
	449, 498, 499, 500, 207, 451, 450, 501, 0, 0,
	0, 0, 452, 453, 502, 454, 455, 456, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 457, 0, 1800, 0, 0, 219, 220, 221,
	458, 459, 222, 460, 223, 224, 461, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 462, 463, 464,
	0, 232, 465, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 466,
	467, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 468,
	264, 265, 267, 270, 266, 271, 272, 273, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	471, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 472, 0, 473, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 292, 474, 475, 476,
	0, 0, 480, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 477, 298, 297, 299, 300, 301,
	478, 0, 479, 0, 303, 0, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 481, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 482, 483, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 484, 0, 346, 0, 485, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 486, 356,
	487, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 488, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 489, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 0,
	387, 388, 408, 0, 409, 490, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	491, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 492, 493, 494, 495,
	0, 0, 432, 433, 496, 434, 497, 0, 435, 436,
	437, 0, 438, 439, 0, 0, 440, 441, 442, 443,
	445, 0, 446, 0, 444, 447, 448, 449, 498, 499,
	500, 207, 451, 450, 501, 0, 0, 0, 0, 452,
	453, 502, 454, 455, 456, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 457,
	0, 0, 0, 0, 219, 220, 221, 458, 459, 222,
	460, 223, 224, 461, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 462, 463, 464, 0, 232, 465,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 466, 467, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 468, 264, 265, 267,
	270, 266, 271, 272, 273, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 471, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 472, 0, 473, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 292, 1253, 475, 476, 0, 0, 480,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 477, 298, 297, 299, 300, 301, 478, 0, 479,
	0, 303, 0, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 481, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 482, 483, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 484,
	0, 346, 0, 485, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 486, 356, 487, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 488, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 489, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 490, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 491, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 492, 493, 494, 495, 0, 0, 432,
	433, 496, 434, 497, 0, 435, 436, 437, 0, 438,
	439, 0, 0, 440, 441, 442, 443, 445, 0, 446,
	0, 444, 447, 448, 449, 498, 499, 500, 207, 451,
	450, 501, 0, 0, 0, 0, 452, 453, 502, 454,
	455, 456, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 219, 220, 221, 458, 459, 222, 460, 223, 224,
	461, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 462, 463, 464, 0, 232, 465, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 466, 467, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 468, 264, 265, 267, 270, 266, 271,
	272, 273, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 274, 275, 276, 471, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 472, 0,
	473, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	292, 1195, 475, 476, 0, 0, 480, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 477, 298,
	297, 299, 300, 301, 478, 0, 479, 0, 303, 0,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 481, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 0, 0, 0,
	482, 483, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 484, 0, 346, 0,
	485, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 486, 356, 487, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 488, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	489, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 490,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 491, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	492, 493, 494, 495, 0, 0, 432, 433, 496, 434,
	497, 0, 435, 436, 437, 0, 438, 439, 0, 0,
	440, 441, 442, 443, 445, 0, 446, 0, 444, 447,
	448, 449, 498, 499, 500, 207, 451, 450, 501, 0,
	0, 0, 0, 452, 453, 502, 454, 455, 456, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 457, 0, 0, 0, 0, 219, 220,
	221, 458, 459, 222, 460, 223, 224, 461, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 462, 463,
	464, 0, 232, 465, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	466, 467, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	468, 264, 265, 267, 270, 266, 271, 272, 273, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 471, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 472, 0, 473, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 292, 474, 475,
	476, 0, 0, 480, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 477, 298, 297, 299, 300,
	301, 478, 0, 479, 0, 303, 0, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 481, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 482, 483, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 484, 0, 346, 0, 485, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 486,
	356, 487, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 488, 958, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 489, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 490, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 491, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 492, 493, 494,
	495, 0, 0, 432, 433, 496, 434, 497, 0, 435,
	436, 437, 0, 438, 439, 0, 0, 440, 441, 442,
	443, 445, 0, 446, 0, 444, 447, 448, 449, 498,
	499, 500, 207, 451, 450, 501, 0, 0, 0, 0,
	452, 453, 502, 454, 455, 456, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	457, 0, 0, 0, 0, 219, 220, 221, 458, 459,
	222, 460, 223, 224, 461, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 462, 463, 464, 0, 232,
	465, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 466, 467, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 468, 264, 265,
	267, 270, 266, 271, 272, 273, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 471, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 472, 0, 473, 0, 0, 285, 286, 287,
	288, 289, 290, 291, 292, 474, 475, 476, 0, 0,
	480, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 477, 298, 297, 299, 300, 301, 478, 0,
	479, 0, 303, 0, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 481, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 482, 483, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	484, 0, 346, 0, 485, 347, 341, 348, 349, 0,
	351, 352, 353, 0, 354, 355, 486, 356, 487, 357,
	0, 358, 0, 359, 360, 361, 0, 363, 364, 488,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 489, 0, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 490, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 491, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 492, 493, 494, 495, 0, 0,
	432, 433, 496, 434, 497, 0, 435, 436, 437, 0,
	438, 439, 0, 0, 440, 441, 442, 443, 445, 0,
	446, 0, 444, 447, 448, 449, 498, 499, 500, 0,
	451, 450, 501, 0, 0, 0, 0, 452, 453, 502,
	454, 455, 456, 1408, 1409, 0, 1441, 1442, 1443, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 1408,
	1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 1435, 1436, 0,
	0, 1410, 0, 0, 0, 1416, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1425, 1426, 0, 0, 0,
	0, 1433, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	1446, 1416, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 1448, 1458,
	0, 0, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 1437, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 1449, 0, 0, 0, 0, 1411, 1447, 0, 1457,
	1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0,
	0, 0, 1410, 2729, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 1408, 1409, 0, 1441,
	1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429, 1428,
	1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 1433, 1434, 1435, 1436, 0, 0, 1410, 2439,
	0, 0, 1416, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1458, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1425, 1426, 0, 0, 0, 0, 1433, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 1446, 1416, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 1448, 1458, 0, 0, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 1437,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 1408, 1409, 0,
	1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 1449, 0,
	0, 0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429,
	1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414,
	1415, 1417, 1418, 0, 0, 0, 0, 0, 0, 1410,
	2438, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 1411,
	1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450, 0,
	1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 1433,
	1434, 1435, 1436, 0, 0, 1410, 2435, 0, 0, 1416,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1458, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1455, 0, 0, 0, 0, 0, 0, 1425,
	1426, 0, 0, 0, 0, 1433, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 1446, 1416, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1425, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 1437, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 1449, 0, 0, 0, 0,
	1411, 1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450,
	0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
	0, 0, 0, 0, 0, 0, 1410, 2434, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 1411, 1447, 0, 1457,
	1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 1433, 1434, 1435, 1436,
	0, 0, 1410, 2433, 0, 0, 1416, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1458, 0, 0, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1425, 1426, 0, 0,
	0, 0, 1433, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1446, 1416, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 1448,
	1458, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 1437, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 1449, 0, 0, 0, 0, 1411, 1447, 0,
	1457, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419,
	1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0,
	0, 0, 0, 1410, 2001, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 1409, 0,
	1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429,
	1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414,
	1415, 1417, 1418, 1433, 1434, 1435, 1436, 3276, 0, 1410,
	0, 0, 0, 1416, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1425, 1426, 0, 0, 0, 0, 1433,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 1446, 1416,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 1448, 1458, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1455, 0, 0, 0, 0, 0, 0, 1425,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	1437, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 1408, 1409,
	0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 1449,
	0, 0, 0, 0, 1411, 1447, 0, 1457, 1422, 1423,
	1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413,
	1414, 1415, 1417, 1418, 0, 0, 0, 0, 3272, 0,
	1410, 0, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	1411, 1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450,
	0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
	1433, 1434, 1435, 1436, 3207, 0, 1410, 0, 0, 0,
	1416, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1458, 0,
	0, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 1455, 0, 0, 0, 0, 0, 0,
	1425, 1426, 0, 0, 0, 0, 1433, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 1446, 1416, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 1448, 1458, 0, 0, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1425, 1426, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 1437, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 1408, 1409, 0, 1441, 1442,
	1443, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 1449, 0, 0, 0,
	0, 1411, 1447, 0, 1457, 1422, 1423, 1429, 1428, 1424,
	1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417,
	1418, 0, 0, 0, 0, 3206, 0, 1410, 0, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 1411, 1447, 0,
	1457, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419,
	1420, 1412, 1413, 1414, 1415, 1417, 1418, 1433, 1434, 1435,
	1436, 3115, 0, 1410, 0, 0, 0, 1416, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1458, 0, 0, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1425, 1426, 0,
	0, 0, 0, 1433, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 1446, 1416, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1425, 1426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 1437, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 1449, 0, 0, 0, 0, 1411, 1447,
	0, 1457, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0,
	0, 0, 3035, 0, 1410, 0, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 1408, 1409,
	0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 1411, 1447, 0, 1457, 1422, 1423,
	1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413,
	1414, 1415, 1417, 1418, 1433, 1434, 1435, 1436, 2987, 0,
	1410, 0, 0, 0, 1416, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 1455, 0, 0,
	0, 0, 0, 0, 1425, 1426, 0, 0, 0, 0,
	1433, 1434, 1435, 1436, 0, 0, 0, 0, 0, 1446,
	1416, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 1448, 1458, 0,
	0, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 1455, 0, 0, 0, 0, 0, 0,
	1425, 1426, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 1437, 0, 1431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 1408,
	1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	1449, 0, 0, 0, 0, 1411, 1447, 0, 1457, 1422,
	1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412,
	1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0, 2986,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 1408, 1409, 0, 1441, 1442,
	1443, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 1411, 1447, 0, 1457, 1422, 1423, 1429, 1428, 1424,
	1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417,
	1418, 1433, 1434, 1435, 1436, 2985, 0, 1410, 0, 0,
	0, 1416, 0, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1458,
	0, 0, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1425, 1426, 0, 0, 0, 0, 1433, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 1446, 1416, 0, 0,
	0, 0, 0, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 1448, 1458, 0, 0, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1425, 1426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 1437, 0,
	1431, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 1408, 1409, 0, 1441,
	1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 1449, 0, 0,
	0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429, 1428,
	1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 0, 0, 0, 0, 2951, 0, 1410, 0,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 1411, 1447,
	0, 1457, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421,
	1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 1433, 1434,
	1435, 1436, 2764, 0, 1410, 0, 0, 0, 1416, 0,
	0, 0, 1430, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1458, 0, 0, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1425, 1426,
	0, 0, 0, 0, 1433, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 1446, 1416, 3365, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 1455, 0, 0,
	0, 0, 0, 0, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 1437, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 1449, 0, 0, 2361, 0, 1411,
	1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450, 0,
	1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 0,
	0, 2390, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2362, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 1422,
	1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412,
	1413, 1414, 1415, 1417, 1418, 1433, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452,
	1453, 0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 1411, 0,
	0, 1457, 0, 0, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1425, 1426, 0, 0, 0,
	0, 0, 0, 0, 1410, 0, 0, 0, 0, 0,
	1446, 0, 1430, 0, 0, 0, 0, 0, 1431, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 0, 1416, 0, 2478, 0, 0, 2477,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 1454, 1455, 0, 0,
	0, 0, 0, 0, 1425, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2091, 0, 0, 1432,
	0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 1449, 0, 2090, 0, 0, 1411,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1410, 0, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 1408,
	1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 1411, 1447, 0, 1457, 1422,
	1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412,
	1413, 1414, 1415, 1417, 1418, 1433, 1434, 1435, 1436, 0,
	0, 1410, 0, 0, 0, 1416, 0, 0, 0, 1430,
	0, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1425, 1426, 0, 0, 0,
	0, 1433, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	1446, 1416, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 1448, 1458,
	0, 0, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1425, 1426, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 1437, 0, 1431, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 801, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 1449, 0, 0, 0, 0, 1411, 1447, 0, 1457,
	1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0, 0,
	0, 0, 1410, 0, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 1408, 1409, 0, 1441,
	1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429, 1428,
	1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414, 1415,
	1417, 1418, 1433, 1434, 1435, 1436, 0, 0, 1410, 0,
	0, 0, 1416, 0, 0, 0, 1430, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1458, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1425, 1426, 0, 0, 0, 0, 1433, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 1446, 1416, 0,
	0, 0, 0, 2484, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 1448, 1458, 0, 0, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1425, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 1437,
	0, 1431, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2752, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 1408, 1409, 0,
	1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 1449, 0,
	2479, 0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429,
	1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414,
	1415, 1417, 1418, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 1411,
	1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450, 0,
	1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418, 1433,
	1434, 1435, 1436, 0, 0, 1410, 0, 0, 0, 1416,
	0, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1458, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 1455, 0, 0, 0, 0, 0, 0, 1425,
	1426, 0, 0, 0, 0, 1433, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 1446, 1416, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 1448, 1458, 0, 0, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1425, 1426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 1437, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 2446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 1408, 1409, 0, 1441, 1442, 1443,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 1449, 0, 2432, 0, 0,
	1411, 1447, 0, 1457, 1422, 1423, 1429, 1428, 1424, 1450,
	0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
	0, 0, 0, 0, 0, 0, 1410, 0, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 1411, 1447, 0, 1457,
	1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419, 1420,
	1412, 1413, 1414, 1415, 1417, 1418, 1433, 1434, 1435, 1436,
	0, 0, 1410, 0, 0, 0, 1416, 0, 0, 0,
	1430, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1458, 0, 0, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1425, 1426, 0, 0,
	0, 0, 1433, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1446, 1416, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 1448,
	1458, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1425, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 1437, 0, 1431, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 1408, 1409, 0, 1441, 1442, 1443, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 0, 1449, 0, 0, 0, 0, 1411, 1447, 0,
	1457, 1422, 1423, 1429, 1428, 1424, 1450, 0, 1421, 1419,
	1420, 1412, 1413, 1414, 1415, 1417, 1418, 0, 0, 0,
	0, 0, 0, 1410, 0, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 1408, 1409, 0,
	1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1447, 0, 1457, 1422, 1423, 1429,
	1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413, 1414,
	1415, 1417, 1418, 1433, 1434, 1435, 1436, 0, 0, 1410,
	0, 0, 0, 1416, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1458, 0, 0, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1425, 1426, 0, 0, 0, 0, 1433,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 1446, 1416,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 1448, 1458, 0, 0,
	1438, 1439, 1440, 0, 0, 0, 0, 1408, 1409, 0,
	1441, 1442, 1443, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 1454, 1455, 0, 0, 0, 0, 0, 0, 1425,
	1426, 0, 0, 1411, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	1437, 0, 1431, 0, 0, 0, 0, 0, 0, 1410,
	0, 0, 0, 0, 0, 0, 0, 1430, 1432, 0,
	1456, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 1433,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1458, 0, 1449,
	1438, 1439, 1440, 0, 0, 1447, 0, 0, 1422, 1423,
	1429, 1428, 1424, 1450, 0, 1421, 1419, 1420, 1412, 1413,
	1414, 1415, 1417, 1418, 0, 0, 0, 0, 0, 1425,
	1426, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 1422, 1423, 1429, 1428, 1424, 1450,
	0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 1422, 1423, 1429, 1428, 1424, 1450,
	0, 1421, 1419, 1420, 1412, 1413, 1414, 1415, 1417, 1418,
}
var sqlPact = [...]int{

	4383, -1000, -1000, -1000, -1000, -1000, -1000, 250, 249, 238,
	235, 215, 205, 192, 191, 190, -1000, -1000, -1000, 189,
	-1000, -1000, 188, -1000, 187, 183, 182, 178, -1000, 175,
	174, -1000, -1000, -1000, -1000, 172, 167, 165, 49256, 1598,
	58721, 50489, 1763, 2110, 43905, 58308, 43492, 57895, 57482, 164,
	-1000, 57069, 162, 161, 155, -1000, -1000, 151, 1742, 35615,
	149, 147, 145, 1785, 143, 139, -1000, 137, -1000, 6241,
	1200, -1000, 136, 135, -1000, 3753, 856, 50076, 2097, 130,
	129, 35201, 2061, -1000, -1000, 1487, -1000, -1000, 125, 121,
	111, 110, 108, 107, 106, 105, 103, -1000, 100, 98,
	97, 95, 88, 87, 86, 85, 84, 83, 80, 76,
	72, 71, 70, 69, 67, -1000, 7520, 1450, 1372, 1370,
	1358, 1318, 1354, 842, 65, 64, 62, 60, 56, 55,
	-1000, -1000, 50, 49, 47, 46, -1000, 45, 44, 166,
	40, 35, 32, 31, 28, 2728, 2066, 1295, 745, 17516,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62791, 59128, 20, -95, 19, -1000, 2397, 805, 30241, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 459,
	-1000, -1000, -1000, 325, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1493, 660, -1000, -1000, -1000, 56656, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 59128, -1000, 1595,
	-44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 657, -1000,
	1584, 119, 1479, -1000, -1000, -1000, -1000, -1000, 59128, -1000,
	-1000, 2729, 2727, 1519, 656, 56249, -1000, 1168, -1000, 800,
	20145, -1000, 995, -1000, 20145, 323, -1000, -1000, -1000, -1000,
	-1000, 43079, 14466, 42666, 42253, 39374, 55836, 14043, 48849, 1043,
	-1000, -1000, -1000, -1000, -1000, 0, 36836, 59128, -1000, 322,
	-1000, -1000, -1000, -1000, -1000, -1000, 26392, 505, 25943, 501,
	25494, 499, -1000, -1000, -1000, -1000, 2726, 2725, 933, 2724,
	2351, 62384, 1386, 2723, 1277, 998, 871, 2722, 2720, 2715,
	2713, 2706, 2705, 2704, 1212, 55423, 2130, 38951, 38528, 49256,
	49256, 1868, 55010, -1000, -1000, 1122, 1073, -1000, -1000, -1000,
	-1000, 2248, 2101, 2074, 48436, -1000, -1000, 2700, 2699, 2696,
	2695, 2690, 61977, 1361, 2689, 1794, 2685, 2679, 2677, 2676,
	2675, 2673, 2671, 2670, 2669, -1000, 48023, 47610, 47197, 46784,
	54597, 38105, 37682, -1000, -1000, -1000, 31889, 5567, 54184, 32737,
	49256, -1000, -1000, 26828, -14, -1000, -1000, -1000, 2051, -1000,
	26828, -14, -1000, 2127, 1433, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2021, 1305, 2600, 37259, 1508, 1112, 2240,
	2668, 1760, 2228, 2215, 2180, 2171, 2163, 1252, 2665, 1209,
	1221, 2145, 2140, 2599, 1644, 41840, 2663, 2662, 2369, 2138,
	2050, -1000, -1000, -1000, -1000, 1170, -1000, -1000, -1000, -1000,
	44312, -1000, -1000, 983, -1000, -1000, 983, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1040, 61163, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1759, -1000, 1507, -1000, -1000, 2661, 2066, 1781, 2377, 2377,
	2377, 2410, 436, 424, -1000, 166, -1000, -1000, 69179, -1000,
	-1000, 26828, 26828, 26828, 26828, 26828, 1432, -1000, 655, -1000,
	-1000, 682, -1000, 652, 592, -1000, -1000, -1000, -1000, -1000,
	-1000, 650, 2601, -1000, 906, -1000, -1000, -1000, -1000, 2517,
	-1000, 16631, -1000, -1000, -1000, 448, 649, 26828, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 314, 807, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	584, 1369, 583, 583, 583, -1000, -1000, 862, -1000, -1000,
	-1000, 318, 582, 315, 580, -1000, -1000, -1000, -1000, 2118,
	648, 647, -1000, 645, 644, 643, -1000, -1000, -1000, 642,
	638, 636, 635, 634, 633, 631, 629, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 859, -1000, 628, 624, 622, 618,
	614, 612, 602, 601, 599, -1000, -1000, -9, 59128, -1000,
	459, -9, -1000, -1000, 594, -1000, 20581, 20581, 20581, -1000,
	-1000, 1559, 26828, -1000, 2006, -1000, 4154, -239, 734, 31063,
	-1000, 29400, 734, 691, 33555, -1000, 2039, -1000, -1000, 593,
	303, -1000, -1000, 2033, 59128, 14887, 59128, 49256, 49256, -1000,
	2304, 26828, -1000, -1000, 39795, 36429, 59128, 49663, 2478, 10225,
	36429, 59128, 2109, -1000, -1000, -1000, 59128, -1000, 26828, -1000,
	2475, 1148, -72, -1000, -1000, -1000, -1000, -1000, -1000, 1774,
	1783, 972, 1661, 1196, -1000, 20145, 2341, -1000, -1000, -1000,
	300, 14887, -1000, 1478, 2272, 1075, -1000, 1660, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1319, 2271, -1000, 1451,
	2270, 1317, -1000, -1000, 835, 2262, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1593, -1000, -1000, 2371, -1000,
	-1000, 1708, 2261, -209, -1000, -1000, 39795, 36836, -23, -1000,
	-1000, -109, -1000, 13620, 69179, -1000, -1000, -1000, 69179, 799,
	-1000, -1000, 2260, -1000, 69179, 795, -1000, -1000, 2255, -1000,
	-1000, -1000, 2660, -1000, 2659, 1739, 2657, 2656, 2655, -1000,
	1271, 1364, 2654, -1000, 2653, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 46371, 45958, 866, -1000, 1556, -1000, -1000, 45545,
	831, 1738, -1000, -1000, 1733, -1000, 822, -1000, 2651, 53771,
	1900, 831, 1730, -1000, -1000, -1000, -1000, -1000, 49256, -1000,
	49256, -1000, 49256, -1000, 1186, -1000, 61570, -239, -1000, -1000,
	-1000, -1000, -1000, 2254, 2649, 2648, 2647, -1000, 59128, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 158, 2249,
	-1000, -1000, 158, 2247, -1000, 158, 2242, -1000, 156, 2221,
	-1000, -1000, 1600, 2217, -1000, -147, 2216, -1000, -1000, -147,
	2211, -1000, 13, -1000, -1000, -1000, 805, -1000, 31476, 53358,
	39795, 764, 664, 69179, -1000, 39795, 69179, -1000, 45545, -1000,
	52945, 45138, -1000, -1000, 1108, 1827, -1000, -1000, -1000, -1000,
	39795, 39795, -1000, 52532, -1000, 1476, 1246, 2374, 49256, -1000,
	-1000, 2108, -1000, 36022, 49256, -1000, 49256, -1000, 49256, -1000,
	49256, -1000, 49256, -1000, 2644, 2643, -1000, 2167, 1329, 1321,
	59128, -1000, -1000, 2382, 59128, -1000, 59128, -1000, -1000, -1000,
	1769, -1000, -1000, -1000, -1000, 49256, -1000, -1000, -1000, -1000,
	-1000, -1000, 2107, -1000, 1285, -1000, 1105, -1000, -1000, 159,
	-1000, -1000, -72, -1000, 61163, -1000, -1000, 2066, 1781, -1000,
	59128, -1000, -1000, -1000, 2066, 1636, 1860, 25045, 1849, 26828,
	166, -1000, -1000, 166, 166, 19709, -1000, -1000, 10225, 10225,
	14887, 1058, 26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828,
	26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828,
	26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828,
	26828, 26828, 26828, 26828, 26828, 26828, 26828, 1828, 26828, 1038,
	26828, 26828, 26828, 26828, 1904, -1000, -1000, 1481, 503, 1496,
	-1000, 2533, 2533, 2533, 69566, 69566, 566, 2642, 682, -1000,
	26828, -1000, -14, 26828, 15310, -1000, 2554, 1083, -1000, -1000,
	424, 8944, 1681, -1000, 423, 15759, -1000, -1000, -1000, 16631,
	592, 24596, 26828, 853, 69179, 13199, 2117, 1954, -1000, 2549,
	-1000, -1000, 2517, -1000, -1000, -1000, -1000, 2517, 1052, 1050,
	2547, -1000, 2517, 2517, 590, 768, 767, 758, 748, 746,
	26828, 26828, 26828, 26828, 26828, 26828, 26828, 26828, -1000, 24160,
	23711, 23262, 28136, 22813, 26828, 17067, 22364, 21915, 59128, -9,
	2469, 26828, 89, -1000, 67942, -1000, 89, 89, 589, 7,
	69179, 1845, 1845, 30652, 1878, 1465, 1465, 1465, -1000, 588,
	672, 734, 10657, 50896, 1445, 734, 734, 290, 319, 421,
	28989, 2006, 50896, -1000, -1000, 49256, 587, 15310, 14887, 1082,
	5, 285, 1844, 1843, 1842, -1000, 1231, -8, 764, 1035,
	-141, -1000, 3551, -10, -1000, 1084, -1000, -1000, -1000, -1000,
	126, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 857, 586, 585, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584, 1369,
	583, 583, 583, -1000, -1000, -1000, 318, 582, 315, 580,
	-1000, -1000, -1000, -1000, -1000, -1000, 2031, -109, 49663, 777,
	-12, 936, -72, -1000, 983, -1000, 1218, -1000, -1000, -1000,
	-1000, -1000, -1000, 1086, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2588, -1000, 2538, -1000, -1000, 2544, -17, -1000, -1000,
	14887, -1000, -73, 1368, -1000, 41427, 2372, 2368, 2363, 1179,
	-1000, 1125, 2408, 44312, 2424, 66, -1000, 2029, -1000, -1000,
	793, 1101, 1032, 44312, 1451, -1000, 10225, -1000, 1897, 2407,
	1146, 1171, 1146, 1146, 1128, -1000, 44312, 1028, 1404, 39795,
	-1000, 1027, -1000, -77, 2422, 36, -1000, 2022, 1017, -1000,
	-1000, 49256, 14887, 731, -23, 36836, 59128, 278, -1000, 26828,
	-14, 26828, -14, -1000, -1000, 2207, -1000, -1000, -1000, 2641,
	1314, 1788, -1000, -1000, -1000, 578, 1728, 1451, 1723, -1000,
	-1000, 44725, 2020, 59128, 1851, -45, 49256, -1000, -1000, 1401,
	-1000, 2203, 2202, 600, 2640, -1000, 1553, 1722, -1000, -1000,
	-1000, 60756, 1064, 2201, 841, 502, 2467, 502, 34377, -1000,
	59128, -1000, 59128, -1000, -1000, -1000, 2638, -1000, 49256, -1000,
	-1000, 49256, -1000, 49256, -1000, 49256, -1000, 49256, 49256, -1000,
	59128, 39795, 39795, 39795, 5235, 40613, -16, 420, -1000, 52125,
	59128, 899, 41020, -201, 764, 731, -1000, 731, -1000, 49256,
	2106, -1000, -1000, -1000, -1000, -1000, -1000, 2637, 2636, -1000,
	-1000, -1000, 59128, -1000, 59128, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1205, -1000, 2086, -1000, 2081, -1000, 39,
	-1000, -1000, -1000, -1000, -1000, 1464, 49256, 49256, 49256, -1000,
	44312, -1000, -1000, 2066, -1000, -1000, -1000, -1000, -1000, 69179,
	-1000, 496, -1000, -1000, 69179, 1297, 1874, -1000, 1874, -34,
	-1000, 67482, 1817, 49256, -1000, -1000, -1000, -1000, -1000, 763,
	692, 692, 1056, 1056, 1056, 1056, 2555, 272, 234, 4646,
	211, 211, 211, 211, 211, 211, 211, 211, 963, 359,
	359, 963, 963, 963, 963, 963, 359, 359, 359, 211,
	211, 211, 69566, 69490, 6591, 26828, 26828, 1015, 1471, 503,
	5984, 26828, 6760, 6760, 6760, 6760, -1000, 1536, -1000, -1000,
	-1000, -1000, 2011, 575, 28136, 28136, -1000, -1000, -1000, -1000,
	16195, 26828, -1000, -1000, -1000, -1000, 21466, -1000, -1000, 67095,
	-247, 417, -183, -33, -1000, 26828, 26828, 26828, 413, -1000,
	412, -1000, -1000, 1009, -1000, 1004, 1001, 1000, -1000, 572,
	256, 26828, 59128, -1000, 64773, 670, -161, -1000, -21, 1154,
	-1000, 26828, 252, -1000, 1456, 571, 569, 411, -25, 409,
	760, 751, 407, 406, 405, 26828, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69103, 64462, 64386, 64075,
	5150, 63999, 63688, -27, 404, -1000, 2010, -183, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 394, -1000, 392, -1000, 68792,
	-183, 391, 1460, -1000, 28136, 28136, 28136, -1000, 389, -1000,
	67631, -1000, 68716, 21030, 21030, 21030, 386, 68405, 26828, -183,
	-35, -1000, -37, -1000, -1000, 568, -48, 841, 20581, 29827,
	14887, -1000, 841, 841, 26828, -1000, 26828, 1836, -1000, -1000,
	-1000, 1832, 2311, 1845, 30652, -1000, -1000, -1000, -1000, 50896,
	508, 734, 50896, -1000, 2517, 1927, -1000, -1000, -1000, 59128,
	459, -1000, 50896, 50896, 14887, 734, -1000, 385, 33148, -33,
	157, -1000, -1000, 14887, 1915, 1915, 1915, -1000, -1000, 2003,
	59128, 2495, -1000, 1375, -1000, 10225, -1000, 681, 947, -1000,
	2542, 567, -1000, 2517, 2517, 59128, 77, 20145, -1000, 983,
	-1000, -1000, 1244, -1000, 1340, -1000, 987, -1000, -1000, -1000,
	20145, -1000, 1355, 59128, 59128, 49256, -1000, -1000, 1721, 60349,
	1716, 10225, 59128, -1000, -1000, 563, 557, 1815, 1812, 59128,
	59128, 59942, 59535, 59128, 1398, 26828, 1444, 1344, -14, -1000,
	-14, 544, 1034, 49256, 49256, 1307, -1000, -1000, -1000, -1000,
	-1000, 49256, -1000, -1000, 2528, -1000, 1146, -1000, -1000, -1000,
	1146, 1451, 1299, 49256, 39795, 833, 59128, 1406, -14, -1000,
	-14, 542, 14887, 1322, -1000, 1920, -1000, -1000, -1000, 12778,
	69179, -1000, 69179, -1000, 59128, -1000, 865, 59128, 41020, 811,
	2194, -1000, 1451, 2189, 459, -1000, -1000, 33966, -109, 764,
	39795, 49256, -45, 39795, 39795, 39795, 2635, 539, 2633, -1000,
	49256, 2188, 1543, 1713, 2253, 714, 59128, 1473, -1000, 26828,
	1308, -1000, 9826, 878, 59128, 1278, 73, -1000, -1000, -1000,
	38, 59128, -1000, 2631, -1000, -1000, 158, 158, 158, -1000,
	156, 1600, -1000, -147, -147, -1000, -1000, 5235, 764, -61,
	537, -1000, 726, 721, 32316, 39795, -49, -1000, -1000, -1000,
	-1000, -1000, 49256, 59128, 654, 1898, 59128, -1000, 764, -1000,
	-1000, 832, -1000, 1098, -1000, -1000, -109, -109, -1000, 1199,
	1190, 59128, -1000, 14887, 59128, 49256, 14887, 49256, -1000, -1000,
	-1000, -1000, -1000, 1297, -1000, 26828, -1000, -1000, -1000, 19709,
	-1000, -1000, -1000, 49256, -232, 26828, 26828, 5962, 5814, 26828,
	28136, 28136, -1000, 26828, 3574, -1000, -1000, -1000, -1000, -1000,
	1996, 535, 26828, 10225, 3469, 1613, -1000, 382, 63612, 963,
	-1000, 26828, -1000, 377, 19273, -1000, 68018, -46, -46, -1000,
	2584, 1749, 1442, 1443, 1216, 2526, 12357, -183, -53, -1000,
	-1000, 680, -1000, 2172, -1000, 26828, 68329, 11936, -1000, 34788,
	849, 1473, -1000, -1000, 2517, 739, -1000, -1000, -1000, 739,
	-1000, 66784, 10225, 10225, 26828, 26828, -1000, 26828, 26828, 26828,
	-1000, -1000, 26828, -1000, -1000, 1991, 26828, -1000, 10225, 10225,
	28136, 28136, 28136, 28136, 28136, 28136, 28136, 28136, 28136, 28136,
	28136, 28136, 28136, 28136, 28136, 28136, 28136, 28136, 28136, 1816,
	28136, 2531, 2531, 2531, -1000, 2064, 1991, 26828, 26828, 10225,
	375, 373, 372, -1000, 26828, -183, -1000, -1000, 5235, -1000,
	1953, -1000, -188, -1000, 2006, -1000, -1000, 1953, 1953, -59,
	69179, 30652, 30652, -1000, 533, 26828, 1818, -1000, 669, -1000,
	-60, -1000, 50896, -1000, 668, -244, -1000, 718, -1000, -1000,
	-1000, 459, -1000, -1000, -1000, 127, 50896, -1000, -68, -1000,
	2460, 371, 14887, -1000, -1000, -1000, -1000, -1000, -1000, -14,
	-109, 1474, 2559, -1000, 2521, 679, 667, 370, 2517, 369,
	368, -109, 59128, -1000, -72, -1000, -1000, -1000, 26828, -1000,
	-1000, 2367, 999, 997, -1000, 2187, -1000, 1703, -1000, 890,
	-1000, 1310, -1000, 26828, 26828, 532, 531, 1421, 2627, 2182,
	1600, 2179, 1600, -1000, -1000, 796, -1000, 69179, 525, 524,
	-1000, -73, 1365, -1000, -1000, 26828, 26828, 51714, -1000, 2371,
	-1000, 996, -1000, -1000, -1000, 1451, 964, -1000, -1000, 1390,
	-1000, -1000, -1000, -1000, 26828, -1000, -77, 962, 764, 1989,
	-1000, 2626, 2625, 2624, 361, -84, -1000, 2455, 1633, 59128,
	49256, 49256, 2453, 731, -1000, 2517, -1000, -1000, -1000, -1000,
	831, -1000, -1000, 2623, -1000, 895, 14887, 49256, 2170, 1782,
	714, 40206, -1000, 831, 1860, -1000, 69179, -1000, 1278, 18824,
	2365, -75, -1000, 78, -1000, -1000, -1000, 841, 34377, 30652,
	26828, 2621, -76, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 51307, 51307, 39795, 39795, 39795, 764, 59128, 59128, 41020,
	2619, 523, 59128, 59128, 522, -1000, -1000, -1000, 1480, 49256,
	-1000, -1000, 830, -1000, -1000, 1407, 1523, -1000, 1485, 66708,
	-1000, 2390, 14887, 2486, 6760, 26828, 26828, 408, 615, 461,
	6760, 26828, 26828, 10225, 69736, -82, 26828, 26828, -1000, 26828,
	666, 69179, 2534, 26828, 360, 347, 346, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 344, -1000, -1000, -1000, -1000,
	-1000, 69179, 26828, 74, -1000, -1000, -1000, 63198, -1000, 26828,
	342, 341, -1000, -1000, -1000, 340, 339, 9288, 3908, 66397,
	66321, 66010, 69179, 2064, 69179, -1000, -1000, 769, 769, 1111,
	1111, 1111, 1111, 2531, 851, 241, 282, 254, 254, 254,
	438, 794, 794, 254, 254, 254, 1985, 1813, 520, 4157,
	-1000, -1000, 69179, 69179, 338, -1000, -1000, -1000, -183, 337,
	1948, 2406, -1000, 30652, 1948, 1948, -1000, -1000, 2311, 59128,
	69179, 30652, -239, -1000, 2517, -1000, -1000, 1927, -1000, 11090,
	-1000, 14887, -1000, -1000, 33148, -1000, 519, -1000, 37, -1000,
	-1000, -1000, 663, 2614, 676, -1000, 334, -1000, -1000, -109,
	69179, 59128, 59128, 59128, 2159, -1000, 1884, -1000, 65934, -86,
	-1000, 67482, 26828, 59128, -1000, 1418, 1840, 914, -1000, 59128,
	-1000, 59128, -1000, -1000, 59128, 59128, 49256, -87, 69179, -119,
	-1000, 716, -1000, 49256, 49256, 39795, -91, 14887, -1000, 39795,
	-1000, -1000, -1000, 1888, -14, -1000, 2612, 517, 1451, -14,
	-1000, 662, -1000, -1000, 515, 59128, 1539, 513, 14887, 1784,
	714, 40206, -1000, 1064, 1278, -1000, -1000, -129, -1000, 529,
	-14, 59128, 2611, 1473, -1000, -145, 69179, -1000, 715, -1000,
	-98, -1000, -1000, 327, -1000, 2328, 2327, -1000, -1000, 26828,
	511, 510, 59128, 1596, -1000, -1000, -1000, -1000, 14887, 1078,
	-1000, -1000, -1000, 2390, 6760, 6760, 26828, 26828, 26828, 6760,
	69736, -99, -1000, 6760, 6760, -183, -1000, -1000, 68018, -1000,
	-1000, -1000, -1000, 69179, 11515, 1412, -1000, 65623, -1000, -1000,
	-1000, -1000, 26828, 26828, -1000, -1000, -1000, -1000, -1000, 28136,
	1983, 506, 10225, -1000, -1000, 823, 26828, 26828, 2006, 823,
	823, -1000, -108, -1000, 734, -1000, -1000, -1000, 2517, 37,
	-1000, 2609, 14887, 675, -1000, 2608, -1000, -1000, -1000, -1000,
	59128, -1000, 59128, -1000, 14887, 59128, 1969, 1672, -1000, -1000,
	1800, 504, 28136, 49256, 775, 1980, 1400, 26828, -1000, -110,
	-114, 1670, -1000, -1000, 1667, 26828, -1000, 10225, 1600, 1600,
	-118, -120, -1000, 960, 59128, 18388, -1000, -1000, -1000, 958,
	-1000, -147, 1406, 1923, 820, -1000, 41020, 811, -1000, -1000,
	-1000, 26828, -1000, 49256, 26828, 1534, -1000, 714, 40206, -1000,
	2253, -1000, 2284, 59128, 2362, -1000, -1000, -1000, 1860, 503,
	-1000, 764, 500, 498, -122, 26828, 26828, -124, -160, -1000,
	752, 750, -1000, -1000, 49256, -1000, 6760, 6760, 6760, -1000,
	320, -1000, -1000, 1473, 2405, -1000, 65547, 65236, 4199, 28136,
	10225, -128, -1000, 59128, 69179, -183, -1000, -1000, -1000, 50896,
	616, -1000, 2607, -1000, -1000, 2168, -1000, -1000, -1000, 59128,
	1691, -1000, -1000, 26828, 4157, 497, 26828, -1000, -1000, 1886,
	2001, 1888, 495, -1000, -1000, -1000, -1000, 1302, -1000, -1000,
	69179, 2388, -1000, -1000, 493, 489, 485, 712, 1970, -1000,
	483, 811, -1000, 1425, -1000, 1856, 283, 2434, -130, 895,
	-132, 49256, 40206, -1000, 1782, 1071, -136, 59128, 1278, -1000,
	-1000, 39795, 39795, 1400, -137, -143, -1000, 1596, -1000, 59128,
	-1000, 59128, -1000, -1000, 1637, 26828, -1000, -1000, 4199, -148,
	-1000, -170, -1000, 2429, -1000, -1000, -1000, -1000, -1000, 2157,
	65160, 1762, 59128, 64849, 2000, -1000, -1000, 1406, 59128, 49256,
	893, 14887, 1407, 1407, 26828, 17952, 1424, 26828, -1000, 49256,
	-1000, 2325, 1888, -14, 1400, 479, 1400, 474, -1000, 1784,
	1164, -1000, 841, -1000, -1000, -149, -150, 1888, 1400, -1000,
	-1000, -159, -173, 160, 27700, 27700, 27700, -183, -1000, 59128,
	468, 2017, -1000, 1521, 1351, 41, 913, -1000, -1000, 1980,
	-175, 459, -1000, 26828, -1000, -179, -1000, 877, -191, -1000,
	876, -192, -1000, 1967, -1000, -193, 458, -1000, 1406, 820,
	1888, 26828, 1888, 26828, -1000, 34377, -1000, 764, 764, 1406,
	1888, -1000, -1000, -1000, -1000, -1000, 28557, 1517, 1229, 67171,
	-1000, -1000, -1000, -1000, 59128, -1000, 1529, 1526, 1203, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1762, 69179, -1000,
	1407, 1917, -1000, 1407, 1963, -1000, 1423, -1000, 59128, 811,
	-1000, 1406, -204, 1406, -210, -197, -1000, -1000, -1000, 1406,
	2487, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2312, -1000,
	912, 1671, 1671, 1521, -1000, 445, -1000, 440, -1000, -215,
	-1000, 838, 1400, 838, 1400, -1000, -1000, 27264, -1000, 2498,
	-1000, -1000, 1821, -1000, 1980, 26828, 26828, 1580, -1000, 2603,
	1888, -1000, 1888, -1000, -1000, -1000, -1000, -1000, -216, -217,
	-1000, -1000, -1000, -1000, 1406, 1406, 1406, 956, 838, 838,
	-1000, 439, -1000, -1000, 26828, -233, 1406, -1000,
}
var sqlPgo = [...]int{

	0, 3268, 3267, 3266, 3261, 3259, 3258, 3256, 3255, 3251,
	3249, 3248, 3246, 3243, 3242, 3238, 3237, 3234, 3233, 3226,
	3224, 3222, 3221, 3217, 3214, 3213, 3212, 3211, 3210, 3207,
	3206, 3205, 3204, 3203, 3201, 3198, 3197, 3196, 3195, 3191,
	3190, 3189, 3187, 3186, 30, 3185, 3181, 3180, 3178, 3177,
	3176, 3175, 3174, 3173, 3169, 3167, 3166, 3165, 3163, 3162,
	3159, 3158, 3157, 3155, 3154, 3153, 3151, 3150, 3149, 3147,
	3145, 3143, 3142, 3139, 128, 3138, 3137, 3129, 3126, 3121,
	3120, 3118, 3113, 3112, 3111, 3110, 3107, 3096, 3095, 140,
	3091, 3090, 3083, 3078, 3075, 3073, 3072, 3070, 3069, 3068,
	187, 3065, 3062, 3057, 3056, 3054, 3052, 3050, 3047, 3046,
	3045, 3042, 3039, 3038, 3037, 3029, 3028, 3027, 3022, 3019,
	3015, 3012, 3011, 3010, 3008, 3007, 3004, 3002, 202, 137,
	3001, 3000, 2999, 2998, 2996, 2989, 93, 84, 22, 2987,
	80, 146, 177, 5348, 167, 2986, 2985, 2983, 2976, 2973,
	66, 129, 127, 121, 118, 85, 2972, 2968, 68, 38,
	34, 32, 96, 2966, 2965, 2963, 2428, 87, 2962, 2961,
	195, 175, 2957, 987, 2955, 150, 100, 91, 26, 69,
	2954, 108, 20, 2952, 115, 53, 2951, 113, 65, 33,
	6000, 7437, 2947, 73, 206, 76, 133, 182, 180, 184,
	160, 131, 280, 2945, 186, 2944, 138, 149, 2942, 2941,
	2940, 58, 144, 4, 3, 164, 10, 2938, 11, 2936,
	14, 2935, 2934, 2932, 2926, 29, 116, 2924, 56, 54,
	2923, 31, 16, 169, 2921, 162, 2920, 92, 2919, 191,
	152, 145, 19, 166, 2911, 2910, 2908, 2905, 2904, 95,
	18, 94, 2899, 2897, 97, 185, 2895, 64, 136, 71,
	112, 201, 106, 165, 79, 170, 132, 168, 2893, 2887,
	2883, 163, 2882, 2881, 111, 157, 2873, 2871, 203, 35,
	57, 174, 55, 2869, 2868, 125, 2867, 151, 2866, 2863,
	2862, 197, 130, 155, 5, 61, 89, 27, 8, 173,
	110, 77, 75, 2861, 3475, 1066, 339, 2859, 114, 83,
	51, 86, 120, 194, 40, 2858, 2856, 119, 2855, 2851,
	2850, 2849, 135, 2848, 2847, 2846, 109, 90, 103, 2845,
	122, 63, 117, 198, 72, 158, 178, 188, 2844, 134,
	2843, 101, 104, 2842, 148, 183, 74, 2841, 270, 105,
	2840, 193, 2839, 2838, 2837, 2833, 50, 2831, 2829, 88,
	2828, 107, 2827, 2826, 143, 139, 199, 37, 2825, 62,
	28, 2824, 147, 44, 2822, 2299, 43, 0, 6452, 5144,
	6222, 2821, 2834, 2819, 154, 102, 2818, 2817, 2816, 2815,
	36, 13, 7, 9, 17, 15, 824, 784, 2814, 2811,
	81, 98, 123, 2788, 196, 159, 2786, 2785, 2780, 59,
	2777, 25, 2776, 23, 2773, 2772, 24, 6, 2771, 2770,
	179, 2766, 181, 2761, 2760, 2471, 2759, 192, 2757, 99,
	2756, 126, 176, 2753, 2751, 2746, 2745, 190, 2744, 189,
	2743, 12, 21, 1, 2742, 2741, 2740, 153, 2, 2280,
	2739, 2736, 70, 142, 67, 2734, 2733, 141,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	427, 427, 17, 27, 18, 28, 12, 429, 429, 429,
	429, 21, 19, 19, 29, 139, 139, 139, 139, 16,
	16, 24, 24, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 426, 426, 154, 154,
	153, 149, 149, 430, 430, 155, 155, 155, 157, 157,
	33, 33, 87, 87, 87, 140, 80, 80, 80, 80,
	80, 80, 80, 75, 75, 375, 375, 376, 376, 135,
	135, 136, 136, 136, 136, 137, 137, 138, 138, 138,
	47, 35, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 45, 45, 45, 45, 129, 129,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	435, 435, 436, 436, 437, 437, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 438, 438, 438, 438,
	438, 438, 438, 438, 438, 438, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 59, 59, 227, 227, 205, 205, 49, 49, 422,
	422, 240, 240, 343, 343, 61, 61, 62, 62, 62,
	62, 62, 62, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	70, 70, 70, 71, 71, 71, 68, 68, 68, 66,
	66, 66, 65, 65, 65, 69, 69, 69, 67, 67,
	67, 241, 241, 72, 72, 72, 72, 72, 72, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	345, 345, 73, 73, 73, 315, 315, 76, 76, 76,
	272, 272, 77, 77, 77, 77, 77, 78, 78, 78,
	78, 88, 88, 88, 88, 425, 425, 233, 233, 170,
	170, 170, 170, 83, 83, 83, 83, 84, 84, 84,
	85, 85, 134, 134, 94, 94, 94, 94, 94, 93,
	93, 93, 93, 93, 93, 39, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 44, 44, 44, 44,
	44, 96, 96, 431, 431, 98, 95, 95, 95, 97,
	97, 97, 97, 99, 100, 100, 100, 100, 100, 100,
	101, 101, 369, 369, 248, 248, 367, 367, 383, 383,
	368, 368, 209, 209, 209, 209, 209, 210, 210, 210,
	374, 374, 374, 374, 374, 374, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 119, 119, 119, 128, 128,
	128, 128, 128, 128, 128, 121, 121, 121, 111, 111,
	103, 103, 103, 103, 107, 107, 107, 107, 107, 104,
	104, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 105, 105, 105, 105, 114, 114, 114, 114, 278,
	278, 278, 113, 113, 124, 124, 124, 124, 124, 124,
	329, 329, 120, 120, 120, 120, 123, 123, 123, 123,
	262, 262, 117, 117, 117, 118, 118, 118, 122, 122,
	125, 125, 125, 125, 106, 106, 106, 440, 440, 440,
	126, 126, 116, 116, 127, 127, 127, 127, 127, 127,
	127, 115, 115, 115, 428, 428, 109, 423, 423, 420,
	420, 420, 420, 420, 420, 420, 421, 421, 424, 424,
	81, 81, 81, 54, 54, 441, 441, 441, 55, 55,
	442, 442, 442, 439, 439, 439, 439, 439, 439, 439,
	439, 211, 211, 212, 212, 296, 296, 296, 296, 296,
	213, 213, 156, 156, 156, 216, 217, 217, 214, 214,
	215, 215, 215, 219, 219, 218, 221, 221, 220, 295,
	388, 388, 389, 389, 389, 389, 389, 389, 389, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 386,
	386, 386, 387, 384, 384, 385, 385, 385, 385, 443,
	443, 443, 443, 443, 443, 444, 444, 294, 294, 225,
	225, 391, 391, 391, 391, 392, 392, 392, 392, 392,
	395, 394, 393, 393, 393, 393, 393, 325, 325, 325,
	58, 58, 58, 259, 259, 258, 258, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 131, 131, 56, 56, 56, 162, 162, 53, 53,
	53, 446, 446, 57, 57, 57, 447, 447, 60, 60,
	60, 60, 60, 60, 52, 52, 52, 52, 52, 448,
	448, 279, 279, 277, 277, 231, 231, 331, 174, 174,
	150, 150, 150, 20, 22, 22, 15, 15, 30, 30,
	31, 31, 26, 26, 432, 432, 433, 433, 82, 82,
	86, 86, 86, 92, 92, 130, 130, 130, 130, 130,
	130, 130, 34, 34, 34, 34, 46, 46, 46, 46,
	90, 450, 450, 450, 91, 91, 449, 449, 169, 169,
	169, 169, 171, 171, 291, 291, 292, 292, 451, 451,
	293, 293, 293, 293, 164, 163, 165, 165, 51, 51,
	51, 158, 158, 159, 159, 160, 160, 161, 161, 452,
	452, 79, 79, 79, 133, 133, 204, 204, 287, 287,
	287, 226, 226, 179, 179, 290, 290, 288, 288, 288,
	288, 257, 257, 257, 132, 132, 236, 236, 250, 250,
	251, 251, 340, 340, 252, 89, 89, 143, 143, 141,
	141, 141, 141, 141, 141, 453, 453, 142, 142, 142,
	144, 144, 144, 144, 144, 144, 144, 147, 147, 147,
	147, 148, 148, 148, 146, 146, 402, 402, 402, 404,
	404, 405, 401, 401, 403, 403, 445, 445, 261, 261,
	261, 223, 224, 222, 222, 454, 454, 229, 229, 228,
	230, 230, 330, 330, 330, 255, 255, 255, 255, 282,
	282, 280, 280, 281, 281, 283, 283, 284, 284, 284,
	285, 285, 286, 286, 254, 254, 311, 311, 145, 145,
	145, 235, 235, 235, 237, 237, 302, 302, 302, 302,
	302, 303, 303, 301, 301, 301, 301, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 333, 333, 238, 238,
	334, 289, 289, 418, 418, 418, 419, 419, 328, 328,
	335, 335, 335, 335, 335, 335, 326, 326, 327, 327,
	341, 342, 342, 265, 265, 265, 265, 263, 263, 266,
	266, 266, 266, 264, 264, 336, 336, 336, 336, 256,
	256, 337, 337, 337, 338, 297, 298, 298, 346, 346,
	346, 346, 346, 361, 234, 234, 234, 234, 234, 455,
	455, 347, 347, 347, 347, 347, 347, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 351,
	351, 351, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	360, 360, 360, 360, 360, 352, 352, 357, 357, 358,
	358, 358, 353, 354, 359, 359, 359, 359, 456, 456,
	363, 363, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 349, 349, 349, 356, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 273, 273,
	274, 274, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 306, 306, 306,
	306, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 396, 396, 396, 396,
	396, 396, 396, 396, 399, 399, 400, 400, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 406, 406, 407,
	407, 409, 409, 410, 410, 411, 412, 412, 412, 413,
	414, 414, 408, 408, 415, 415, 415, 415, 416, 416,
	417, 417, 417, 417, 417, 317, 317, 318, 318, 324,
	324, 324, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 172, 172,
	172, 172, 172, 246, 246, 244, 244, 244, 247, 247,
	245, 245, 243, 243, 242, 242, 314, 314, 312, 312,
	316, 316, 267, 267, 362, 362, 362, 362, 362, 362,
	362, 268, 268, 268, 276, 269, 269, 270, 270, 270,
	270, 270, 308, 309, 271, 271, 271, 310, 310, 319,
	323, 323, 322, 321, 321, 320, 320, 299, 299, 300,
	300, 253, 253, 457, 457, 249, 249, 339, 339, 339,
	339, 207, 207, 239, 239, 206, 206, 199, 199, 200,
	200, 200, 200, 232, 232, 364, 364, 364, 365, 366,
	313, 189, 188, 176, 177, 187, 186, 185, 175, 178,
	182, 183, 184, 180, 181, 195, 194, 193, 191, 192,
	344, 201, 201, 202, 202, 202, 203, 203, 203, 203,
	173, 173, 196, 196, 197, 198, 198, 190, 190, 190,
	166, 166, 166, 167, 167, 168, 168, 373, 373, 371,
	371, 371, 372, 372, 372, 372, 370, 370, 370, 370,
	370, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 379, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 382, 382,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 5, 5, 2, 5, 3,
	6, 4, 6, 5, 6, 6, 4, 8, 3, 4,
	3, 6, 4, 3, 1, 3, 2, 1, 1, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 6, 4, 9, 7,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 3, 4, 4, 5, 0,
	1, 1, 2, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 6, 3,
	4, 5, 5, 3, 1, 1, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 0,
	1, 3, 3, 2, 2, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 14, 17, 14, 17, 4, 0,
	2, 2, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 2,
	3, 4, 3, 4, 5, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 4, 2,
	5, 3, 2, 0, 1, 3, 3, 5, 1, 1,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 1, 0, 2, 5,
	7, 2, 1, 1, 2, 4, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 4, 1,
	2, 1, 4, 1, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 2, 5, 1, 4, 2, 5, 1,
	4, 3, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 1, 5, 5, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 450, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -130, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -131, -132, -133, 80, 67,
	120, 102, 107, 126, 152, 281, 310, 320, 304, -97,
	-98, 339, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -434, 82,
	-403, -64, -67, -69, -438, 112, 125, 164, 273, -84,
	-85, 306, 308, -41, -40, 121, -141, -143, -95, -96,
	-134, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 342, 388, 39, 351,
	68, 115, 314, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -60, -57, -58, -402,
	-65, -66, -68, -70, -71, 305, -144, -142, 447, 400,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	418, 426, -147, -145, -146, -148, 327, 408, 365, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, -191,
	-196, -197, -198, -190, -166, -379, -382, 4, -377, -380,
	131, 177, 243, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 42, 44, 45, 48, 49, 50, 51, 52,
	53, 56, 61, 66, 67, 68, 69, 70, 75, 72,
	73, 74, 77, 79, 80, 81, 84, 85, 93, 94,
	95, 96, 97, 98, 102, 105, 104, 107, 110, 111,
	112, 114, 116, 117, 120, 121, 124, 122, 371, 373,
	123, 125, 126, 127, 137, 138, 139, 141, 142, 144,
	146, 150, 151, 153, 157, 159, 160, 161, 162, 163,
	164, 165, 166, 178, 173, 179, 183, 186, 185, 187,
	188, 189, 180, 194, 197, 198, 199, 201, 202, 205,
	206, 207, 208, 211, 210, 213, 216, 217, 220, 221,
	224, 225, 227, 228, 231, 229, 232, 230, 233, 236,
	234, 235, 238, 239, 241, 240, 248, 249, 251, 252,
	253, 268, 256, 257, 258, 261, 264, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 281, 283, 285,
	286, 287, 288, 289, 290, 292, 293, 295, 296, 297,
	298, 299, 304, 301, 302, 303, 305, 306, 307, 308,
	310, 312, 313, 314, 315, 317, 319, 340, 341, 353,
	320, 321, 322, 323, 324, 325, 326, 330, 334, 331,
	332, 333, 335, 328, 329, 336, 337, 339, 342, 344,
	346, 347, 350, 351, 352, 354, 357, 358, 359, 355,
	356, 349, 364, 362, 363, 366, 367, 368, 369, 370,
	372, 374, 382, 383, 385, 388, 389, 390, 392, 393,
	396, 397, 398, 399, 404, 400, 402, 405, 406, 407,
	413, 412, 419, 420, 422, 423, 424, 32, 40, 41,
	43, 46, 57, 58, 59, 62, 99, 100, 119, 128,
	129, 140, 154, 156, 167, 168, 169, 184, 190, 192,
	172, 214, 246, 247, 262, 266, 278, 280, 291, 316,
	345, 360, 376, 377, 378, 379, 384, 386, 408, 409,
	410, 414, 421, 254, -184, 2, -166, -166, 281, 26,
	2, 26, 277, 329, 367, 369, 2, 193, 2, -425,
	-233, 2, 26, -170, -166, 82, 152, 327, -184, 2,
	-425, -233, 24, 2, -166, 2, -171, 2, 320, -166,
	450, 77, 221, 61, 316, 336, -100, 383, -99, 376,
	322, -101, -369, 2, 236, -166, 450, 450, 450, 450,
	2, 365, 271, 412, 328, 401, 95, 288, 177, -420,
	2, 4, -380, -377, -200, -199, 365, 95, -198, -190,
	440, -197, 450, 450, 450, 2, 198, 199, 287, 286,
	336, 337, 450, 450, 450, 2, 25, 55, 76, 79,
	101, 127, 147, 150, 259, -435, 228, 268, 285, 322,
	335, 364, 374, 385, -439, 352, 56, 401, -446, 390,
	110, -277, 95, 369, 367, 221, 151, 397, 312, 155,
	395, 105, 183, 399, 398, 450, 450, 25, 55, 64,
	79, 110, 127, 147, 150, -437, 268, 285, 319, 322,
	335, 364, 374, 390, 385, 2, 412, 328, 365, 177,
	95, 401, 312, 284, -74, 2, 447, 29, 339, -140,
	365, 2, -166, 198, 199, 2, 450, 450, -420, 2,
	198, 199, 2, 56, 324, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 2, -128, 336, 352, 161, 38, 61, 26, 66,
	96, 153, 177, 178, 206, 76, 77, -278, 199, -329,
	366, 323, 329, 362, 383, 82, 402, 313, 424, -428,
	122, 4, 95, 236, 338, 376, 221, 70, 370, 371,
	-445, 2, 365, -449, 2, 383, 383, 2, -449, 2,
	-449, 2, -169, 2, 383, 380, -450, 383, 421, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, -142, -144, -143, 450, 450, 450, 450, 450, -128,
	336, 2, 61, 26, -453, 145, -228, -229, 394, 191,
	118, 260, -141, -143, 2, -402, -367, 2, -304, -383,
	-306, 438, 439, 433, 242, 425, -317, 101, 395, 254,
	-382, -307, -319, 119, 316, -247, 8, 9, 5, 6,
	7, -173, -348, -313, -356, 387, 130, 245, -203, 452,
	10, 447, -399, -143, -318, 33, 156, 54, -371, -202,
	-350, -358, -354, -355, -455, 44, 50, 49, 374, 235,
	330, 331, 346, 332, 333, 42, 404, 173, 251, 253,
	185, 4, 192, -201, -190, -396, -397, -377, -378, 184,
	190, 186, 345, 187, 188, 189, 41, 291, 141, 142,
	140, 111, 100, 99, 247, 46, 45, 43, 409, -359,
	97, 376, 377, 378, 379, 201, 202, -166, -379, 64,
	87, 88, 86, 91, 90, 92, 89, 338, 401, 55,
	32, 167, 168, 172, 246, 169, 62, -398, 356, 83,
	149, 182, 170, 195, 196, 200, 215, 218, 237, 244,
	263, 265, 311, 343, -456, 410, 128, 129, 266, 278,
	360, 384, 386, 154, 214, 57, 58, -404, 292, -405,
	-184, -404, 450, 450, 451, 450, -222, -223, -224, 2,
	26, 108, 447, 2, -332, 2, 445, -336, -143, 209,
	-335, 447, -333, -191, 255, -400, 317, -396, -397, -173,
	-190, -202, 4, -225, 447, 449, 95, 365, 65, 2,
	-272, 447, -166, 26, -140, 254, 380, 451, -315, 447,
	254, 148, 257, -166, 2, 2, 340, 2, 447, -100,
	59, 383, -292, 2, -293, -163, -164, -165, -341, 197,
	283, 290, 427, 424, -367, -431, 148, 430, 380, -367,
	-248, 449, 2, -336, 167, -191, 2, -188, -370, 4,
	-377, -380, -378, -381, 64, -379, 26, 28, 29, 30,
	31, 33, 34, 35, 36, 47, 54, 55, 60, 63,
	65, 76, 82, 86, 87, 89, 88, 90, 91, 92,
	101, 103, 106, 108, 109, 113, 115, 118, 130, 132,
	145, 147, 148, 152, 155, 158, 171, 181, 191, 193,
	209, 212, 219, 222, 223, 242, 245, 250, 254, 255,
	259, 260, 275, 282, 294, 309, 327, 338, 348, 361,
	365, 375, 380, 381, 387, 394, 395, 401, 403, 411,
	415, 416, 417, 418, -382, 2, -336, 167, 2, -193,
	167, -336, -196, 2, -375, 167, -373, 10, -372, 5,
	4, -377, -380, -378, 2, -175, -166, 2, -187, -370,
	2, -206, 167, -191, -192, -196, 380, 451, -239, -199,
	-200, -232, -166, 449, -304, 2, -89, 2, -304, 167,
	2, -89, 167, 2, -304, 167, 2, -89, 167, 2,
	2, 2, 385, 2, 79, 167, -166, 365, 94, 2,
	303, -436, 319, 389, 412, 2, 2, 2, 2, 2,
	2, 2, 365, 328, -447, 292, -180, 2, -166, 145,
	-375, 167, 2, -375, 167, 2, -194, -196, -194, 177,
	194, -175, 167, 2, 369, 367, 369, 367, 148, 2,
	193, 2, 193, 2, -337, 2, -338, -191, 2, 2,
	2, 2, 2, 167, -166, 365, 94, 2, 208, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -241, 167,
	2, -191, -241, 167, 2, -241, 167, 2, -207, 167,
	2, -206, -175, 167, 2, -376, 167, 2, -375, -376,
	167, 2, -345, 2, -344, -372, 408, -74, 447, 336,
	447, -375, -191, -304, -89, 148, -304, -89, 145, 2,
	95, 365, -128, 2, 145, 403, 2, 8, 2, -375,
	289, 137, 2, 340, 2, 61, -278, 424, 148, 2,
	2, -423, 2, 254, 148, 2, 148, 2, 148, 2,
	148, 2, 148, 2, 286, 337, 2, 382, 207, 123,
	148, -262, 2, 418, 148, 2, 148, 2, 5, 2,
	197, 283, 353, 2, -191, -440, 2, 365, 412, 328,
	2, 2, 72, 73, 148, 2, 148, 424, 2, -256,
	-336, -291, -292, -291, 380, -171, -453, -228, -229, -128,
	340, 2, 2, -453, -255, -280, -281, 219, 132, 250,
	-261, 26, 108, -261, -261, 48, 448, 448, 11, 12,
	63, 37, 438, 439, 440, 441, 143, 442, 443, 436,
	437, 435, 428, 429, 432, 203, 204, 78, 431, 430,
	71, 226, 318, 133, 134, 135, 136, 300, 174, 175,
	176, 14, 15, 16, 30, 259, 218, 425, 170, 343,
	433, 17, 18, 19, 195, 196, 244, 40, 171, -172,
	-208, -304, -304, -304, -304, -304, 265, 447, -253, -299,
	445, -143, 447, 447, 447, 5, 447, 5, -366, 8,
	-143, -304, -317, 448, -245, 447, -143, -317, -312, 447,
	316, 445, 447, -320, -304, 449, -406, 419, -352, 447,
	280, -351, 447, -351, -351, 413, -349, 447, 426, 420,
	447, -349, 447, 447, 145, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 413, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 451, -404,
	-225, 447, -249, -339, -304, 440, -249, -249, 254, -242,
	-304, 83, -265, 200, 237, 149, 215, 311, 182, -366,
	-74, -301, 452, -328, 426, -143, -333, -190, -143, -335,
	447, -332, -328, 440, -191, 447, 148, 447, 449, 148,
	-232, -370, -175, -191, -201, -202, 107, -242, -375, -420,
	-232, -170, 34, -314, -346, -347, -360, -348, -357, -353,
	-356, 296, 297, 295, 299, 298, 44, 50, 49, 374,
	235, 330, 331, 346, 332, 333, 42, 404, 173, 251,
	253, 185, 4, 43, 409, -359, 192, 184, 190, 186,
	345, 187, 188, 189, 41, 291, 141, 142, 140, 111,
	100, 99, 247, 46, 45, 97, 376, 377, 378, 379,
	201, 202, 410, 356, 57, 58, -420, -232, 145, -369,
	-242, 34, -292, 2, -451, 451, 217, -210, 225, 241,
	160, 255, 422, 248, -374, 5, 4, -313, -325, 101,
	221, -356, 9, 439, -364, 8, 438, -368, -367, 85,
	449, -370, -152, 301, -151, 23, 27, 112, 406, 124,
	-215, 179, 271, 119, 349, -427, -429, 321, 372, 373,
	74, 248, 301, 119, -258, -260, 34, 93, 239, 267,
	51, 165, 230, 231, 351, 414, 119, 301, 418, 119,
	-429, 301, -429, -154, 349, -427, -429, 321, 301, -153,
	-215, 119, 452, -375, -239, 451, 451, -370, 440, 119,
	119, 119, 119, 2, 2, 242, 2, 2, 2, 150,
	-439, -437, 2, 2, 2, -191, 167, -193, 167, 2,
	-196, 412, -227, 254, -422, -240, 365, -191, -162, -401,
	418, 242, 242, 34, 447, 2, -177, 167, 2, -167,
	-166, 177, -401, 242, -337, -204, -191, -204, 339, -184,
	34, -301, 119, 2, 2, 2, -166, -155, 451, 53,
	307, 119, -155, 119, -155, 119, -155, 451, 119, -155,
	119, 451, 119, 119, 448, 451, -345, -375, -138, 418,
	148, 82, 447, -376, -422, -175, 2, -191, 2, 365,
	201, -375, -375, -369, 26, 341, 2, 286, 337, 73,
	-191, -424, 145, -421, 312, -420, -191, -191, -191, -191,
	-191, 2, 2, 145, 2, 382, 2, 382, 2, -166,
	67, -166, -166, 217, -191, 145, 365, 177, 365, -155,
	451, -171, -453, -255, -369, -453, -281, -280, -283, -304,
	26, -286, 139, 238, -304, -306, -142, -142, -142, -230,
	-330, -304, 282, 177, -361, -346, -346, -189, -370, 376,
	-304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
	-304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
	-304, -304, -304, -304, -304, -304, -304, -304, -304, -304,
	-304, -304, -304, -304, -304, 218, 170, 343, 40, 171,
	-304, 380, -304, -304, -304, -304, 234, 242, 245, 387,
	130, 396, 108, 248, -457, 361, 36, -310, -143, -246,
	447, -324, 31, 348, 26, -317, 447, 2, -299, -304,
	-300, -243, -242, -242, 448, 411, 26, 108, 440, 2,
	8, -273, -275, 423, 233, 98, 162, 232, -274, 326,
	448, 451, 34, 448, -304, -243, -316, -312, -242, -323,
	-322, 415, -370, 440, -407, 138, 155, 8, -366, -366,
	376, 376, 8, -366, -366, 447, 448, 2, 448, 2,
	448, 2, 448, 2, 448, 2, -304, -304, -304, -304,
	-304, -304, -304, -242, -267, 2, -362, -242, 4, 423,
	233, 98, 162, 232, 326, -267, 2, -268, 2, -304,
	-242, -269, -305, -306, 438, 439, 433, -317, -270, 2,
	-304, -243, -304, 47, 212, 381, -271, -304, 148, -242,
	-242, 2, -242, 2, -405, 34, -242, -235, 451, 148,
	34, 4, -235, -235, 447, 448, 451, -266, 159, 229,
	224, -266, -332, -265, 200, -263, 263, -263, -263, -418,
	447, 446, -328, -176, 445, 453, -370, -327, -326, 34,
	-184, 261, -328, -328, 449, 448, -327, -191, 447, -242,
	-370, 354, 448, 449, 195, 195, 195, 317, 448, -138,
	380, 418, -74, 256, 448, 451, -234, 33, 445, -275,
	447, -363, 413, 447, 447, 148, -233, -431, 448, 383,
	-293, -209, 290, 347, 302, 334, 363, 9, 8, 8,
	451, -370, 451, -432, 76, 380, 65, -295, 167, 65,
	-384, -178, 76, -385, -166, 60, 395, 282, 147, -432,
	76, -432, 76, 76, 339, 352, 48, -336, 37, -89,
	213, 148, 424, 365, 380, -336, -260, -346, 93, 230,
	231, 48, -365, -364, 439, -365, 48, -365, -365, -365,
	418, -193, -336, 380, 272, -375, 380, 451, 37, -89,
	213, 148, 380, -206, -176, -342, -341, -199, -166, 449,
	-304, -89, -304, -89, 119, 2, -447, 208, 447, -225,
	242, -259, -258, 242, -195, 2, -191, 148, -232, -343,
	193, 451, -240, 272, 119, 119, 447, 116, 288, 2,
	254, 242, -177, 167, -158, 368, 119, -298, -297, 416,
	-287, -89, 447, 101, 34, -287, -250, -251, -340, -252,
	-178, 447, -184, -166, 2, -191, -241, -241, -241, -206,
	-207, -175, -375, -376, -376, -74, -344, 448, 448, -137,
	258, -136, -166, 5, -140, 403, -212, -296, -295, -386,
	-387, -384, 218, 177, 395, 194, 131, -138, -341, -138,
	-342, -342, -191, 145, 2, 2, -232, -232, 336, 145,
	145, 449, -262, 288, 95, 365, 271, 177, -191, -206,
	-191, -336, -453, -284, -364, 447, -285, 316, 317, 451,
	-150, 35, 106, 205, -191, 424, 117, -304, -304, 380,
	-457, 361, -310, 117, -304, 234, 245, 387, 130, 396,
	108, 248, 148, 447, -305, -305, 448, -244, -304, -304,
	446, 455, 448, -454, 451, -228, -304, -242, -242, 448,
	448, 380, 380, 380, 380, 447, 449, -242, -232, 446,
	446, 451, 448, -321, -322, 113, -304, 449, -412, 264,
	447, 447, 448, 448, 451, 448, 424, 424, 448, 448,
	448, -304, 34, 451, 451, 451, 448, 451, 451, 451,
	448, 448, 148, 448, 448, -276, 275, 448, 11, 12,
	438, 439, 440, 441, 143, 442, 443, 436, 437, 435,
	428, 429, 430, 71, 226, 318, 14, 15, 16, 195,
	171, -305, -305, -305, 448, -308, -309, 148, 145, 34,
	-271, -271, -271, 448, 148, -242, 448, 448, 447, 448,
	-298, -339, -237, 2, -332, -186, -370, -298, -298, -242,
	-304, 200, 200, -264, 403, 254, -266, -332, -326, 448,
	-419, -366, -328, -327, -366, -303, -302, 146, 35, 106,
	240, -184, -225, -327, -327, -370, -328, 448, -238, -334,
	-400, -454, 449, -370, -129, 5, 245, -129, -129, 148,
	-232, 24, 276, -346, 445, 446, 8, 8, 447, -366,
	-366, -232, 148, -367, -292, 393, 69, 290, 376, -367,
	-151, 301, -178, -178, -191, 242, -295, 167, -157, 242,
	-346, -185, -166, 447, 447, 205, 205, -178, -185, 167,
	-178, 167, -185, -185, -426, 290, 249, -304, 220, 288,
	243, -152, 301, -89, -89, 447, -431, 403, 107, -191,
	-195, 301, -201, -365, -365, -258, 301, -193, -375, 418,
	-175, -153, -89, -89, 447, -176, -154, 301, -135, 166,
	440, -166, 412, -166, -211, -212, -166, -441, 420, 418,
	119, 119, -225, -205, -191, 445, -138, -375, -191, -375,
	-375, -375, 2, 447, 2, -191, 119, 254, 242, -159,
	114, -452, 430, -175, -229, -228, -304, -257, -290, 309,
	254, -226, -179, -178, 408, -184, -257, -236, 451, 148,
	430, 449, -226, 2, -155, -155, -155, -155, -155, -74,
	-138, 451, 447, 430, 430, 447, -375, -375, 448, 451,
	-191, -177, 177, 177, -183, -167, -138, -42, 418, 365,
	336, 336, -166, -187, -175, -191, -188, -206, -285, -304,
	-330, -191, 452, -304, -304, 117, 117, -304, -305, -305,
	-304, 117, 148, 447, -304, -314, 30, 30, 448, 451,
	-300, -304, 448, 411, -454, -454, -454, 5, 233, 162,
	232, -274, 232, -274, -274, 8, 440, -370, 448, -312,
	115, -304, 375, -370, 440, -413, -181, 447, -166, 416,
	-228, -366, -349, -349, 448, -361, -346, -304, -304, -304,
	-304, -304, -304, -308, -304, -361, -346, -305, -305, -305,
	-305, -305, -305, -305, -305, -305, -305, -305, -305, -305,
	-305, -305, -305, -305, -305, -305, 108, 242, 248, -305,
	-309, -308, -304, -304, -346, 448, 448, 448, -242, -74,
	-254, 155, -342, 451, -254, -254, 448, -332, -332, 447,
	-304, 200, 446, 448, 451, -327, 446, 451, 454, 430,
	-225, 449, -326, 448, 451, -289, 34, 448, -370, -89,
	257, 5, 8, 445, 446, 448, -366, 448, 448, -232,
	-304, 380, 380, 119, 242, 405, -388, -385, -304, -231,
	-331, -304, 447, 447, -149, 112, 339, -433, 2, 119,
	-155, 119, -155, 422, 447, 447, 380, -242, -304, -139,
	101, -369, -429, 380, 380, 272, -242, 380, -138, 148,
	2, 2, 2, 448, 34, 252, -166, -191, -193, 34,
	-342, -366, -162, 2, -279, 403, -176, -191, 119, -160,
	211, -452, -373, -401, -282, -280, -257, -249, 243, 75,
	448, 451, 449, -298, -251, -237, -304, 2, 448, -136,
	-137, -375, -375, -375, -138, -140, -140, -296, 2, 447,
	-177, -167, 447, 258, -191, -262, -217, -216, 271, 248,
	255, 448, -150, -176, -304, -304, 117, 30, 30, -304,
	-304, -314, 448, -304, -304, -242, 446, 5, -304, 448,
	448, 448, 448, -304, 449, -414, -166, -304, 448, 448,
	448, 448, 451, 451, 448, 448, 448, 448, -309, 148,
	108, 248, 447, 448, 448, -311, 158, 48, -332, -311,
	-311, -264, -232, -332, -301, -366, -302, -176, 445, -370,
	-334, 447, 449, 446, 2, 445, 448, -178, -178, -295,
	119, -389, 76, -390, 63, 131, 82, 242, 245, 395,
	282, 60, 101, 294, 34, 448, 448, 451, -150, -231,
	-232, 242, 358, 101, 242, 101, 94, 390, -178, -185,
	-232, -232, -191, 448, 451, 430, -195, -193, -375, 448,
	-176, -376, -213, 180, -89, 2, 447, -225, -259, -89,
	446, 447, -166, 254, 447, -176, -161, 210, -452, -373,
	-158, -257, -288, 447, 254, -89, -179, 2, -229, 430,
	448, 448, 94, 94, -231, 447, 447, -232, -43, -44,
	177, 76, 274, -188, 365, -150, -304, -304, -304, 448,
	-454, -370, 440, -408, 271, 448, -304, -304, -305, 148,
	447, -314, -409, 417, -304, -242, -409, -409, 448, -328,
	-366, 2, 445, 2, -295, -185, -189, -182, -166, 131,
	167, 245, 205, 447, -305, -191, 447, 2, -443, 103,
	181, -294, -444, 81, 359, -331, 448, 448, 245, 245,
	-304, -346, -155, -155, 448, 448, 380, -369, 80, -367,
	380, -214, -215, 171, -442, 418, -211, -441, -231, -191,
	-231, 254, -452, -373, -159, 109, -232, 76, -282, -310,
	-138, 447, 447, 448, -231, -231, 448, 451, 26, 447,
	26, 447, -191, 448, -229, 48, 448, 448, -305, -314,
	448, -410, -411, -181, -327, 446, 2, -390, -182, 242,
	-304, -168, 447, -304, 181, 104, 163, -213, 447, 294,
	-174, 63, 447, 447, 447, 430, 148, 447, -441, 269,
	94, 239, 448, 34, 448, -279, 448, -191, -373, -160,
	398, 243, 448, -185, -257, -376, -376, -294, 448, 448,
	-44, -232, -232, -415, 288, 317, 157, -242, 448, 451,
	34, 119, 448, -391, 227, -166, 448, 104, 163, -214,
	-232, -191, -430, 403, -189, -219, -218, -216, -221, -220,
	-216, -242, -367, 80, 269, -242, -191, 94, -213, -89,
	-294, 447, -294, 447, -161, 339, -297, 448, 448, -213,
	-294, 448, 448, 448, -416, -417, 40, 392, 85, -304,
	-416, -416, -411, -413, 131, -392, -395, -394, 254, 344,
	149, 270, 448, 358, 414, -443, 448, -225, -304, 448,
	451, 408, 448, 451, 408, 448, 148, 448, 447, -214,
	-442, -213, -231, -213, -231, -250, -138, -138, -214, -213,
	-417, 279, 144, 316, 279, 144, -182, -394, 254, -395,
	254, 398, 105, -391, -218, 171, -220, 148, 269, -232,
	-441, -214, 448, -214, 448, -298, -214, 30, -393, 239,
	307, 53, 339, -393, -392, 447, 447, 448, -448, 416,
	-294, -448, -294, -417, 22, 245, 101, -443, -242, -242,
	-156, 53, 307, 2, -213, -213, 448, 448, -214, -214,
	-214, 380, -448, -448, 447, -242, 448, -214,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 339, 340,
	342, 343, 344, 346, 347, 349, 351, 353, 355, 356,
	358, 360, 361, 362, 363, 364, 366, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	416, 0, 845, 847, 849, 851, 27, 28, 0, 0,
	171, 173, 175, 0, 200, 202, 204, 205, 207, -2,
	0, 293, 294, 296, 298, -2, -2, 0, 0, 403,
	405, 0, 0, 425, 426, 0, 935, -2, 419, 421,
	423, 486, 488, 490, 492, 494, 496, 498, 499, 501,
	503, 505, 507, 509, 511, 513, 515, 517, 519, 521,
	523, 525, 527, 529, 531, 533, -2, -2, -2, 0,
	-2, -2, -2, 863, 31, 33, 35, 37, 39, 41,
	59, 256, 257, 259, 261, 263, 266, 267, 269, 974,
	300, 302, 304, 306, 308, 0, -2, 988, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 950, 952, 954, 956, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 341, 345,
	348, 350, 352, 354, 357, 359, 365, 367, 369, 740,
	1578, 1592, 1593, 1594, 1597, 1598, 1599, 1600, 1601, 1602,
	1928, 2008, 2009, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 0, 381, 379, 1572, 382, 1765, 384,
	386, 287, 288, 289, 290, 291, 292, 0, 154, 0,
	396, 390, 395, 397, 399, 400, 401, 402, 376, 374,
	0, 396, 1624, 394, 843, 844, 838, 839, 1798, 873,
	415, -2, -2, -2, 1897, -2, 447, -2, 454, 1900,
	1800, 457, 0, 459, -2, 462, 846, 848, 850, 29,
	30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, -2, -2, -2, -2, 0, 0, 1658, 1549, 1594,
	1552, 1547, 172, 174, 176, 177, 0, 0, 0, 0,
	0, 0, 201, 203, 206, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 0, 669, 791, 792,
	813, 0, 0, 0, 0, 295, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 0, 0, 0, 0,
	0, 0, 0, 234, 333, 334, 0, 975, 0, 0,
	0, 152, 145, 0, 0, 652, 404, 406, 0, 144,
	0, 0, 842, 0, 0, 420, 422, 424, 487, 489,
	491, 493, 495, 497, 500, 502, 504, 506, 508, 510,
	512, 514, 516, 518, 520, 522, 524, 526, 528, 530,
	532, 534, 535, 0, 0, 0, 0, -2, -2, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, -2, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 538, 540, 541, 542, 0, 581, 590, 634, 635,
	0, 782, 976, 875, 853, 866, 875, 855, 856, 857,
	858, 859, 864, 865, 868, 0, 860, 861, 862, 32,
	34, 36, 38, 40, 42, 258, 260, 262, 264, 268,
	270, -2, 948, 949, 301, 303, 305, 307, 309, 407,
	0, 409, 0, 539, 939, 0, -2, 0, 980, 980,
	980, 0, 0, 949, 947, 0, 412, 413, 466, 467,
	1212, 0, 0, 0, 0, 0, 1447, 1296, 0, 468,
	-2, 1327, 1329, 1876, 1897, 1446, 1331, 1332, 1333, 1334,
	1335, 0, 0, 1338, 0, 1340, 1341, 1342, 1343, 0,
	1345, 0, 1349, 1350, 1351, 0, 1881, 1526, 1590, -2,
	1117, 1118, 1119, 1120, 1121, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1586, 0, 1418, 1365, -2, 1611, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1667, -2, -2, -2, -2, -2, -2, -2, 1173,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1911,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 0,
	1865, 1882, 1883, 1888, 1890, 1884, 1873, 1388, -2, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1174, -2, 1877, 1878, 1893, 1894,
	1899, 1904, 1905, 1880, 1889, -2, -2, 966, 1773, 969,
	740, 967, 951, 953, 0, 955, 0, 0, 0, 960,
	983, 981, 0, 1019, 964, 965, 975, 1036, 1059, 0,
	1041, 0, 1059, 1085, 0, 1046, 1793, 1366, 1367, 0,
	1594, 1591, -2, 0, 0, 0, 0, 0, 0, 197,
	377, 0, 383, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 417, 418, 0, 442, 0, 446,
	1872, -2, -2, 450, 876, 880, 881, 882, 883, 0,
	0, 0, 0, 0, 456, 0, 0, 443, 444, 460,
	463, 0, 50, 0, 1882, 1085, 51, 0, 1562, 1616,
	1617, 1618, 1619, 1620, 1911, 1927, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 53, 0, 1882, 56, 0,
	1882, 0, -2, 60, 0, 1882, 155, 156, 1607, 1608,
	1612, 1613, 1614, 1615, 63, 0, 1568, 65, 0, 1565,
	73, 0, 1882, 0, 1546, -2, 0, 0, 644, 1543,
	1548, 645, 1553, 0, 178, 179, 180, 181, 182, 1882,
	184, 185, 0, 187, 188, 1882, 190, 191, 0, 193,
	209, 210, 0, 212, 0, 1882, 0, 0, 0, 218,
	-2, 235, 0, 232, 0, 222, 223, 225, 226, 227,
	228, 229, 0, 0, 0, 797, 274, 272, 1573, 0,
	-2, 1882, 785, 788, 1882, 790, 802, 1576, 0, -2,
	0, 973, 1882, 890, 665, 666, 667, 668, 0, 286,
	0, 903, 0, 905, 0, 925, 1091, 1036, 236, 237,
	238, 239, 240, 1882, 0, 0, 0, 245, 0, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 137, 1882,
	312, 331, 137, 1882, 315, 137, 1882, 318, 137, 1882,
	321, 1541, 137, 1882, 324, 325, 1882, 327, 157, 328,
	1882, 330, 0, -2, 370, 1580, -2, 336, 0, -2,
	0, 169, 0, 650, 651, 0, 840, 841, 0, 427,
	0, 0, 536, 537, 0, 0, 547, 548, 549, 550,
	1771, 1682, 553, 0, 556, -2, 0, 0, 0, 560,
	562, 649, 564, 0, 0, 566, 0, 568, 0, 570,
	0, 572, 0, 574, -2, -2, 583, 0, 0, 0,
	0, 598, 599, 0, 0, 604, 0, 607, 608, 609,
	0, 611, 612, 613, 614, 0, 616, 617, -2, -2,
	621, 623, 0, 629, 0, 633, 0, 543, 544, 137,
	1089, 852, -2, 854, 0, 870, 942, -2, 0, 408,
	0, 411, 946, 940, 945, 997, 998, 0, 0, 0,
	0, 978, 979, 0, 0, 0, 937, 938, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 1456, 1457, 1460, 1461,
	1458, 1459, 1462, 1463, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1466, 1467, 0, 0, 1469, 0, 1471, 0,
	0, 0, 0, 0, 0, 1275, 1277, 1534, 0, 0,
	1468, 1217, 1218, 1219, 1254, 1255, 0, 0, 1328, 1531,
	1530, 1330, 0, 1483, 0, 1337, 0, 1209, 1344, 1559,
	-2, 0, 1447, 1478, 0, 0, 1352, 1353, 1354, 0,
	0, 1483, 0, 0, 1525, 0, 1420, 0, 1153, 0,
	1154, 1155, 0, 1156, 1157, 1170, 1183, 0, 0, 0,
	0, 1187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1175, 0,
	0, 0, 1506, -2, 0, 0, 0, 0, 0, 968,
	0, 0, 1023, 1535, 1539, 1540, 1023, 1023, 0, 0,
	1484, 1082, 1082, 0, 0, 1078, 1078, 1078, 1076, 1053,
	0, 1059, 0, 1069, 0, 1059, 1059, 0, -2, 1041,
	0, 0, 1069, 1086, 1087, 0, 0, 0, 0, 0,
	0, 1595, 0, 0, 0, 1582, 0, 0, 169, 0,
	388, 398, 975, 0, 1486, 1108, 1102, 1111, 1112, 1113,
	1114, 1160, 1161, 1162, 1163, 1164, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, -2, 1171, 1173, 1194, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1166, 0,
	1141, 1141, 1141, 1158, 1159, 1182, 1193, 1185, 1193, 1189,
	1109, 1110, 1176, 1177, 1178, 1179, 0, 392, 0, 0,
	0, 0, -2, 452, 0, 878, 0, 884, 477, 478,
	479, 886, 887, 0, 455, 480, 481, 482, 483, 484,
	485, 0, 757, 0, 759, 1555, 0, 453, 470, 458,
	0, 464, 74, 835, 103, 0, 835, 835, 0, 0,
	124, 0, 0, 0, 0, 0, 92, 99, 80, 81,
	0, 0, 0, 0, 57, 765, 0, 768, 0, 0,
	0, 0, 0, 0, 0, 780, 0, 0, 0, 0,
	91, 0, 86, 76, 0, 0, 94, 101, 0, 128,
	130, 0, 0, 1072, 643, 0, 0, 1595, 1551, 0,
	0, 0, 0, 211, 213, 0, 215, 216, 217, 0,
	796, 0, 224, 221, 265, 740, 1882, 764, 1882, 762,
	1577, 0, 0, 0, 284, 279, 0, 281, 783, 0,
	972, 0, 0, 0, 0, 803, 0, 1882, 808, 1564,
	1603, 1604, 892, 0, 1097, 0, 906, 0, 0, 1092,
	0, 1094, 0, 242, 243, 244, 0, 310, 0, 135,
	136, 0, 313, 0, 316, 0, 319, 0, 0, 322,
	0, 0, 0, 0, 975, 0, 0, 0, 147, 0,
	0, 0, 0, 169, 169, 1072, 429, 1072, 431, 0,
	0, 551, 552, 554, 555, 557, 558, -2, -2, 630,
	559, 563, 0, 637, 1789, 647, 565, 567, 569, 571,
	573, 576, 593, 0, 585, 0, 587, 0, 589, 601,
	600, 602, 605, 610, 615, 0, 0, 0, 0, 781,
	0, 869, 943, 945, 410, 941, 995, 996, 1001, 1005,
	1006, 1009, 1012, 1013, 1003, 1212, 961, 962, 963, 989,
	990, 822, 0, 2008, 1213, 1103, 1214, 1215, 1561, 0,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	-2, -2, -2, -2, -2, -2, -2, -2, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, -2,
	-2, -2, 1252, 1253, -2, 1470, 1472, 0, 1534, 0,
	-2, 0, -2, -2, -2, -2, 1272, 0, 1274, 1279,
	1281, 1283, 0, 0, 0, 0, 1533, 1293, 1517, 1518,
	0, 0, 1449, 1450, 1451, 1278, 0, 1297, 1532, 1529,
	0, 0, 1482, 986, 1356, 0, 0, 0, 0, 1363,
	0, 1560, 1208, 1195, 1196, 1197, 1198, 1199, 1200, 1210,
	1348, 1480, 0, 1479, 0, 0, 0, 1490, 0, 1524,
	1520, 0, 1583, 1589, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 1493, -2, -2,
	-2, -2, -2, -2, -2, 0, 1402, 0, 1404, 1484,
	1503, 0, 0, 1298, 0, 0, 0, 1447, 0, 1407,
	1484, 1511, 0, 0, 0, 0, 0, 1484, 0, 1516,
	0, 1414, 0, 1416, 970, 0, 0, 1097, 0, 0,
	0, 1538, 1097, 1097, 0, 1018, 0, 0, 1079, 1080,
	1081, 0, 0, 1082, 0, 1073, 1077, 1074, 1075, 0,
	0, 1059, 1069, 1033, 0, 0, 1563, 1039, 1068, 0,
	740, 1058, 1069, 1069, 0, -2, 1043, 0, 0, 986,
	-2, 170, 739, 0, 0, 0, 0, 378, 380, 0,
	0, 0, 372, 0, 375, 0, 1098, 1101, 0, 1115,
	0, 0, -2, 0, 0, 0, 0, 0, 445, 0,
	877, 885, 0, 474, 0, 476, 0, 758, 1557, 1556,
	0, 465, 0, 0, 0, 0, 834, 107, 1882, 0,
	139, 0, 0, 724, 1569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 766, 767, 769, 775,
	777, 0, 771, 1558, 0, 772, 0, 774, 776, 778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 1545, 160, 1071, 1544, 1554, 0,
	183, 186, 189, 192, 0, 219, 0, 0, 672, 655,
	0, 760, 763, 0, 740, 795, 1575, 0, 273, 169,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 0, 1882, 894, 900, 0, 988, 1096, 0,
	923, 908, 0, 0, 0, 923, 927, 928, 930, 931,
	0, 0, 1093, 0, 246, 332, 137, 137, 137, 1542,
	137, 137, 158, 326, 329, 335, 371, 975, 169, 167,
	1752, 165, 162, 164, 0, 0, 0, 673, 675, 676,
	677, 678, 0, 1604, 0, 1711, 1604, 142, 169, 278,
	428, 433, 545, 0, 578, 595, 648, 646, 584, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 631, 632,
	636, 1090, 944, 0, 1007, 0, 1004, 1010, 1011, 0,
	992, 820, 821, 0, 0, 0, 0, -2, -2, 0,
	0, 0, 1294, 0, -2, 1273, 1276, 1280, 1282, 1284,
	0, 0, 0, 0, 0, 0, 1473, 0, 1475, 1295,
	1527, 1530, 1445, 0, 0, 985, 986, 986, 986, 1362,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 1488,
	1489, 0, 1355, 0, 1521, 0, 0, 0, 1364, 0,
	0, 0, 1165, 1139, 0, 1193, 1191, 1192, 1186, 1193,
	1190, 0, 0, 0, 0, 0, 1383, 0, 0, 0,
	1387, 1399, 0, 1401, 1403, 0, 0, 1405, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 1302, 1303, 1406, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1412, 0, 1515, 1413, 1415, 975, 1020,
	1015, 1536, 1072, 1022, 1024, 1537, 1566, 1015, 1015, 0,
	1485, 0, 0, 1063, 0, 0, 0, 1065, 0, 1054,
	0, 1056, 1069, 1038, 0, 0, 1031, 0, 1028, 1029,
	1030, 740, 1067, 1040, 1044, 1583, 0, 1088, 0, 1048,
	1051, 0, 0, 1596, 194, 198, 199, 195, 196, 0,
	387, 0, 0, 1487, 0, 1104, 0, 0, 0, 0,
	0, 391, 0, 441, -2, 472, 473, 475, 0, 471,
	104, 835, 0, 0, 826, 0, 109, 1882, 118, 0,
	701, 0, 1567, 0, 0, 0, 0, 837, 0, 1882,
	137, 1882, 137, 120, 123, 0, 127, 125, 0, 0,
	692, 75, 835, 78, 84, 0, 0, 0, 90, 0,
	828, 0, 770, 773, 779, 58, 0, 830, 824, 0,
	823, 129, 79, 85, 0, 832, 77, 0, 169, 0,
	1550, 0, 0, 0, 0, 671, -2, 0, 0, 0,
	0, 0, 0, 1072, 275, 0, 277, 283, 282, 786,
	-2, 789, 798, 0, 800, 812, 0, 0, 0, 896,
	900, 0, 899, 973, 1000, 987, 1095, 901, 923, 0,
	0, 0, 911, 913, 910, 907, 904, 1097, 0, 0,
	0, 0, 0, 241, 311, 314, 317, 320, 323, 337,
	146, 0, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 1604, 1604, 0, 1571, 143, 430, 0, 0,
	586, 588, 601, 624, 625, 687, 0, 628, 0, 0,
	991, 822, 0, 1216, 1257, 0, 0, -2, 0, 0,
	1261, 0, 0, 0, -2, 0, 0, 0, 1474, 1476,
	0, 1529, 1357, 0, 0, 0, 0, 1339, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 0, 1346, 1347, 1448, 1491,
	1519, 1523, 0, 1584, 1588, 1426, 1427, 1431, 1574, 0,
	0, 0, 1184, 1188, 1368, 0, 0, 0, 0, 0,
	0, 0, 1492, 1502, 1504, 1299, 1300, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, -2, -2, -2,
	1317, 1318, 1319, -2, -2, -2, 0, 0, 0, 1505,
	1507, 1508, 1512, 1513, 0, 1409, 1410, 1411, 1514, 0,
	1017, 0, 1021, 0, 1017, 1017, 982, 1061, 0, 0,
	1084, 0, 1036, 1055, 0, 1045, 1034, 0, 1035, 0,
	1066, 0, 1042, 1047, 0, 1050, 0, 1357, -2, 153,
	389, 373, 0, 0, 1106, 1116, 0, 1168, 1172, 393,
	1070, 0, 0, 0, 0, 138, 699, 723, 0, 0,
	815, 822, 0, 0, 111, 0, 0, 0, 119, 0,
	116, 0, 122, 126, 0, 0, 0, 0, 87, 88,
	89, 0, 93, 0, 0, 0, 0, 0, 140, 0,
	214, 794, 220, 681, 0, 656, 0, 740, 764, 0,
	271, 0, 784, 799, 0, 0, 0, 0, 0, 898,
	900, 0, 891, 892, 923, 999, 902, 921, -2, 920,
	0, 0, 0, 988, 929, 926, 932, 933, 0, 166,
	0, 161, 163, 0, 149, 0, 0, 674, 679, 0,
	0, 0, 0, 0, 546, 596, 626, 686, 0, 0,
	1002, 1008, 993, 822, 1259, 1263, 0, 0, 0, 1265,
	-2, 0, 1287, -2, -2, 1477, 1528, 1336, 986, 1358,
	1360, 1361, 1211, 1522, 0, 1433, 1430, 0, 1417, 1140,
	1378, 1379, 0, 0, 1382, 1384, 1385, 1386, 1501, 0,
	0, 0, 0, 1408, 971, 1422, 0, 0, 1025, 1422,
	1422, 1062, 0, 1064, 1059, 1057, 1032, 1026, 0, 1584,
	1049, 0, 0, 1099, 1105, 0, 1167, 105, 106, 108,
	0, 700, 0, 703, 0, 0, 0, 0, 710, 711,
	0, 0, 0, 0, 0, 729, 738, 0, 817, 0,
	0, 0, 113, 132, 0, 0, 836, 0, 137, 137,
	0, 0, 827, 0, 0, 0, 829, 831, 825, 0,
	833, 159, 689, 0, 660, 657, 672, 655, 761, 793,
	276, 0, 811, 0, 0, 0, 888, 900, 0, 893,
	894, 285, 0, 0, 0, 909, 912, 914, 1000, 0,
	168, 169, 0, 0, 0, 0, 0, 0, 432, 434,
	0, 0, 440, 685, 0, 994, 1267, -2, -2, 1288,
	0, 1585, 1587, 988, 0, 1419, 0, 0, -2, 0,
	0, 0, 957, 0, 1016, 1014, 958, 959, 1083, 1069,
	0, 1052, 0, 1107, 110, 0, 704, 705, 1570, 707,
	0, 709, 712, 0, 714, 1606, 0, 718, 725, 730,
	0, 681, 0, 735, 736, 816, 727, 0, 112, 114,
	131, 819, 115, 121, 0, 0, 0, 0, 1652, 96,
	0, 655, 688, 0, 658, 0, 0, 0, 0, 812,
	0, 0, 0, 895, 896, 0, 0, 0, 923, 934,
	148, 0, 0, 738, 0, 0, 722, 0, 436, 0,
	438, 0, 627, 1359, 1437, 0, 1380, 1381, -2, 0,
	1325, 1421, 1423, 0, 1037, 1027, 1100, 702, 706, 0,
	0, 744, 0, 0, 0, 733, 734, 689, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 653, 0,
	661, 0, 681, 0, 738, 0, 738, 0, 897, 898,
	0, 916, 917, 919, 924, 0, 0, 681, 738, 721,
	435, 0, 0, 0, 0, 0, 0, 1432, 1326, 0,
	0, 0, 713, 749, 0, 0, 0, 731, 732, 729,
	0, 740, 117, 0, 818, 0, 693, 0, 0, 696,
	0, 0, 97, 1652, 95, 0, 0, 662, 689, 660,
	681, 0, 681, 0, 889, 0, 918, 169, 169, 689,
	681, 437, 439, 1429, 1434, 1438, -2, 1846, 1655, 0,
	1435, 1436, 1424, 1425, 0, 715, 745, 746, 0, 741,
	742, 743, 1605, 716, 717, 726, 737, 744, 133, 690,
	0, 0, 691, 0, 0, 100, 0, 102, 0, 655,
	659, 689, 0, 689, 0, 1097, 150, 151, 719, 689,
	0, 1440, 1441, 1442, 1443, 1444, 708, 747, 0, 748,
	0, 0, 0, 749, 694, 0, 697, 0, 98, 0,
	654, 809, 738, 809, 738, 915, 720, 0, 750, 0,
	753, 754, 0, 751, 729, 0, 0, 684, 804, 0,
	681, 806, 681, 1439, 752, 755, 756, 728, 0, 0,
	680, 682, 683, 810, 689, 689, 689, 0, 809, 809,
	695, 0, 805, 807, 0, 0, 689, 698,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 436, 3, 442, 437, 3,
	447, 448, 440, 438, 451, 439, 449, 441, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 455, 3,
	428, 430, 429, 432, 452, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 445, 3, 446, 443, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 453, 435, 454, 433,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 431, 57771, 434, 57772, 444, 57773, 450, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1043
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1054
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1056
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1057
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1064
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1133
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1134
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1164
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1169
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1181
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1235
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1239
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1244
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1251
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1255
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1278
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1286
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1293
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1301
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1308
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1316
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1325
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1330
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1336
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1344
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1353
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1365
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1379
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1393
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1398
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1431
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1441
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1466
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1470
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1511
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1521
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1539
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1551
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1559
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1582
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1607
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1621
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1650
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1680
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1721
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1730
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1736
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1741
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1746
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1750
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1769
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1777
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1795
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1799
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1805
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1813
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1817
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = nil
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1847
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1860
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1861
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1862
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1863
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1873
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1881
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1905
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1941
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1949
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1955
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1966
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1971
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1986
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1992
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1997
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2009
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2012
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2013
		{
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2014
		{
			return helpWith(sqllex, "CREATE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create cast")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2021
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2022
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2023
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2025
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2026
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2027
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2028
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2029
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2030
		{
			return unimplemented(sqllex, "create operator")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2031
		{
			return unimplemented(sqllex, "create publication")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2032
		{
			return unimplemented(sqllex, "create rule")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2033
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2034
		{
			return unimplemented(sqllex, "create server")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2040
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2041
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2045
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2048
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2049
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "drop server")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2075
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2076
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2077
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2080
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2081
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2082
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2115
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2120
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2129
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2137
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2157
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2172
		{

			sqlVAL.union.val = nil
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2196
		{
			return helpWith(sqllex, "DELETE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2219
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2220
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2221
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2226
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2227
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2228
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2241
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2244
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2252
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2256
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2259
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2274
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2282
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2305
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2354
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2359
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2382
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2385
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2395
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2402
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "DELETE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2413
		{
			return helpWith(sqllex, "INSERT")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2417
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2420
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2427
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2431
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2453
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2465
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2469
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2486
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2520
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2558
		{
			return helpWith(sqllex, "GRANT")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2578
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2594
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2598
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2626
		{
			return helpWith(sqllex, "RESET")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "RESET")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return helpWith(sqllex, "USE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2672
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2673
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2674
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "USE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2732
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2745
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2773
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2777
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2781
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2792
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2805
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2821
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2850
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2859
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2878
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2885
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2891
		{
			return unimplemented(sqllex, "set from current")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2892
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2900
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2905
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2933
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2986
		{
			sqlVAL.union.val = tree.Low
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2990
		{
			sqlVAL.union.val = tree.Normal
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = tree.High
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3013
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3067
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3069
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.str = "client_encoding"
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.str = "timezone"
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3098
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3103
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3119
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3142
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3187
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3215
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3223
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3231
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3237
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3243
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3255
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3261
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3285
		{
			sqlVAL.union.val = true
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3287
		{
			sqlVAL.union.val = true
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = false
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3309
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3319
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = true
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3327
		{
			sqlVAL.union.val = false
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3340
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3351
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = true
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = false
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3389
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3399
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3403
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3413
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3425
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3430
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3447
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3452
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3496
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3503
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3511
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3521
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3532
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3548
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3556
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3689
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3728
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3732
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3761
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3821
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3834
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3848
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3849
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3850
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3854
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3866
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3879
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3880
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3881
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3895
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3896
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3897
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3898
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3899
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3900
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3901
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3902
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3913
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3923
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3929
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3932
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3936
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3945
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3952
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3957
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3962
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3968
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.str = ""
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3982
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3988
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3995
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4002
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4008
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4028
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4038
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4049
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4111
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4127
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4131
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4135
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4145
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4149
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4153
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4160
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4170
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4204
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4215
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4232
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4242
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4254
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4255
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4256
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4257
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4258
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4259
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4276
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4280
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4318
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4359
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4389
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4393
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4418
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4423
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4427
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4431
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4438
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4439
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4442
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4443
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4446
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4448
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4450
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4453
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4456
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4458
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4471
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4494
		{
			sqlVAL.union.val = nil
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4511
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4516
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4517
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4525
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4533
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4534
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4537
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4538
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4544
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4546
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4548
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4550
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4554
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4570
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4584
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4599
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4613
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4627
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4630
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4631
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4635
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.union.val = false
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = true
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4660
		{
			sqlVAL.union.val = false
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4679
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4690
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = tree.Descending
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4703
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4709
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4720
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4726
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4732
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4740
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4746
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4754
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4760
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4772
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4777
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4778
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4781
		{
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4782
		{
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4790
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4812
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4815
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4823
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4830
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4831
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4832
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4851
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4856
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4866
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4869
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4871
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4874
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4883
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4884
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4885
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4893
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4903
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4904
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4908
		{
			sqlVAL.str = ""
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.str = ""
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4930
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4936
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4940
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4946
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4950
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4963
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4965
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4969
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 888:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5034
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5038
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5042
		{
			sqlVAL.str = ""
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.str = ""
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5062
		{
			sqlVAL.str = ""
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.str = ""
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5077
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5078
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5090
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5097
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5104
		{
			return helpWith(sqllex, "INSERT")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5122
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5126
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5135
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5156
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5180
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5197
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5198
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5206
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 924:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5232
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5243
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5247
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5248
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5272
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5276
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5319
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5356
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5360
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5369
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5370
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5375
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5410
		{
			return helpWith(sqllex, "SELECT")
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5411
		{
			return helpWith(sqllex, "VALUES")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5412
		{
			return helpWith(sqllex, "TABLE")
		}
	case 957:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5461
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5473
		{
			return helpWith(sqllex, "SELECT")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5517
		{
			return helpWith(sqllex, "TABLE")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5529
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5533
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5537
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5559
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5560
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5564
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5568
		{
			sqlVAL.union.val = nil
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5573
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5574
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5578
		{
			sqlVAL.union.val = true
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.union.val = false
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.union.val = false
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = true
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5603
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5604
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5607
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5608
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5642
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5647
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5662
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5671
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5686
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5695
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5701
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5715
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5728
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5732
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5738
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5742
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5743
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5798
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5813
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5835
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5840
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5845
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5851
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5862
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5881
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5919
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5933
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5950
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5952
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5960
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5964
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5980
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6008
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6010
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = nil
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6019
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = true
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = false
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6083
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6096
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6109
		{
			sqlVAL.str = tree.AstFull
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6117
		{
			sqlVAL.str = tree.AstRight
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.str = tree.AstInner
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6127
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6128
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.str = tree.AstHash
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.str = ""
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6183
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6190
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6195
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6213
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6219
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6227
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6256
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6269
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6277
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6278
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6286
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6300
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6302
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6310
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6322
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6323
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6376
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6380
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6388
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6396
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6400
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6408
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = nil
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6458
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6560
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6579
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6585
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6593
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6601
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6607
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = true
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = false
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6657
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6662
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6670
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6672
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6680
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6696
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = true
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = false
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6707
		{
			sqlVAL.union.val = false
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6711
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = tree.Year
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = tree.Month
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
			sqlVAL.union.val = tree.Day
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = tree.Month
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6763
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = nil
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = tree.Second
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6783
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6811
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6818
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6827
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6852
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7137
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7353
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7358
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7367
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7385
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7433
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7444
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7445
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7458
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7469
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7490
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7510
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7583
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7593
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7603
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7613
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7622
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7623
		{
			return unimplemented(sqllex, "treat")
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7644
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7654
		{
			return unimplemented(sqllex, "within group")
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7655
		{
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.str = ""
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7781
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7794
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7868
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = tree.Any
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = tree.Some
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = tree.All
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = tree.Div
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7897
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = tree.LT
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = tree.GT
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = tree.LE
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = tree.GE
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = tree.NE
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = tree.Like
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8228
		{
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8229
		{
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8301
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8309
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8332
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8363
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8375
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8395
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8403
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8568
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8586
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8610
		{
			sqlVAL.str = ""
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
