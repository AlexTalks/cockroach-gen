// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8178

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	420, 57,
	-2, 889,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	165, 726,
	-2, 0,
	-1, 60,
	101, 889,
	171, 889,
	368, 889,
	369, 889,
	-2, 0,
	-1, 74,
	113, 863,
	127, 863,
	179, 863,
	205, 863,
	234, 863,
	242, 863,
	365, 863,
	-2, 852,
	-1, 110,
	195, 543,
	356, 543,
	-2, 0,
	-1, 115,
	4, 891,
	20, 891,
	21, 891,
	22, 891,
	23, 891,
	25, 891,
	30, 891,
	35, 891,
	36, 891,
	37, 891,
	38, 891,
	39, 891,
	40, 891,
	41, 891,
	42, 891,
	43, 891,
	44, 891,
	46, 891,
	47, 891,
	48, 891,
	49, 891,
	50, 891,
	51, 891,
	54, 891,
	55, 891,
	56, 891,
	58, 891,
	59, 891,
	63, 891,
	64, 891,
	65, 891,
	66, 891,
	67, 891,
	69, 891,
	70, 891,
	71, 891,
	72, 891,
	74, 891,
	76, 891,
	77, 891,
	80, 891,
	81, 891,
	82, 891,
	90, 891,
	91, 891,
	92, 891,
	93, 891,
	94, 891,
	95, 891,
	96, 891,
	97, 891,
	99, 891,
	101, 891,
	103, 891,
	106, 891,
	107, 891,
	109, 891,
	110, 891,
	114, 891,
	115, 891,
	116, 891,
	117, 891,
	118, 891,
	119, 891,
	120, 891,
	121, 891,
	122, 891,
	123, 891,
	124, 891,
	132, 891,
	133, 891,
	134, 891,
	135, 891,
	136, 891,
	138, 891,
	140, 891,
	144, 891,
	146, 891,
	147, 891,
	149, 891,
	151, 891,
	152, 891,
	153, 891,
	154, 891,
	155, 891,
	156, 891,
	157, 891,
	158, 891,
	161, 891,
	166, 891,
	167, 891,
	168, 891,
	171, 891,
	172, 891,
	173, 891,
	174, 891,
	175, 891,
	176, 891,
	177, 891,
	178, 891,
	180, 891,
	182, 891,
	185, 891,
	186, 891,
	187, 891,
	189, 891,
	190, 891,
	193, 891,
	194, 891,
	195, 891,
	197, 891,
	198, 891,
	200, 891,
	202, 891,
	203, 891,
	206, 891,
	207, 891,
	210, 891,
	212, 891,
	215, 891,
	216, 891,
	217, 891,
	218, 891,
	219, 891,
	221, 891,
	222, 891,
	223, 891,
	224, 891,
	229, 891,
	230, 891,
	231, 891,
	232, 891,
	233, 891,
	235, 891,
	236, 891,
	238, 891,
	239, 891,
	240, 891,
	243, 891,
	244, 891,
	246, 891,
	248, 891,
	249, 891,
	250, 891,
	251, 891,
	252, 891,
	253, 891,
	254, 891,
	255, 891,
	257, 891,
	258, 891,
	259, 891,
	260, 891,
	261, 891,
	263, 891,
	264, 891,
	265, 891,
	266, 891,
	267, 891,
	268, 891,
	269, 891,
	270, 891,
	272, 891,
	273, 891,
	274, 891,
	275, 891,
	276, 891,
	278, 891,
	279, 891,
	280, 891,
	281, 891,
	282, 891,
	283, 891,
	284, 891,
	286, 891,
	288, 891,
	289, 891,
	290, 891,
	291, 891,
	292, 891,
	293, 891,
	295, 891,
	296, 891,
	297, 891,
	298, 891,
	299, 891,
	300, 891,
	301, 891,
	303, 891,
	304, 891,
	305, 891,
	306, 891,
	307, 891,
	308, 891,
	309, 891,
	310, 891,
	311, 891,
	313, 891,
	314, 891,
	315, 891,
	316, 891,
	318, 891,
	319, 891,
	320, 891,
	321, 891,
	323, 891,
	324, 891,
	325, 891,
	326, 891,
	327, 891,
	328, 891,
	329, 891,
	330, 891,
	331, 891,
	332, 891,
	333, 891,
	334, 891,
	336, 891,
	337, 891,
	339, 891,
	340, 891,
	341, 891,
	342, 891,
	343, 891,
	344, 891,
	345, 891,
	346, 891,
	347, 891,
	348, 891,
	350, 891,
	351, 891,
	352, 891,
	353, 891,
	356, 891,
	357, 891,
	358, 891,
	359, 891,
	361, 891,
	362, 891,
	363, 891,
	364, 891,
	367, 891,
	368, 891,
	369, 891,
	370, 891,
	372, 891,
	374, 891,
	375, 891,
	376, 891,
	377, 891,
	378, 891,
	379, 891,
	382, 891,
	383, 891,
	388, 891,
	389, 891,
	390, 891,
	391, 891,
	392, 891,
	393, 891,
	-2, 0,
	-1, 136,
	113, 862,
	127, 862,
	179, 862,
	205, 862,
	234, 862,
	242, 862,
	365, 862,
	-2, 855,
	-1, 141,
	1, 785,
	185, 785,
	263, 785,
	267, 785,
	419, 785,
	420, 785,
	-2, 0,
	-1, 143,
	1, 785,
	419, 785,
	420, 785,
	-2, 0,
	-1, 144,
	1, 785,
	419, 785,
	420, 785,
	-2, 0,
	-1, 145,
	1, 789,
	419, 789,
	420, 789,
	-2, 0,
	-1, 171,
	4, 898,
	5, 898,
	6, 898,
	7, 898,
	8, 898,
	9, 898,
	20, 898,
	21, 898,
	22, 898,
	23, 898,
	25, 898,
	30, 898,
	31, 898,
	35, 898,
	36, 898,
	37, 898,
	38, 898,
	39, 898,
	40, 898,
	41, 898,
	42, 898,
	43, 898,
	44, 898,
	46, 898,
	47, 898,
	48, 898,
	49, 898,
	50, 898,
	51, 898,
	52, 898,
	53, 898,
	54, 898,
	55, 898,
	56, 898,
	58, 898,
	59, 898,
	61, 898,
	63, 898,
	64, 898,
	65, 898,
	66, 898,
	67, 898,
	69, 898,
	70, 898,
	71, 898,
	72, 898,
	74, 898,
	76, 898,
	77, 898,
	79, 898,
	80, 898,
	81, 898,
	82, 898,
	83, 898,
	84, 898,
	85, 898,
	86, 898,
	87, 898,
	88, 898,
	89, 898,
	90, 898,
	91, 898,
	92, 898,
	93, 898,
	94, 898,
	95, 898,
	96, 898,
	97, 898,
	98, 898,
	99, 898,
	101, 898,
	103, 898,
	106, 898,
	107, 898,
	109, 898,
	110, 898,
	114, 898,
	115, 898,
	116, 898,
	117, 898,
	118, 898,
	119, 898,
	120, 898,
	121, 898,
	122, 898,
	123, 898,
	124, 898,
	125, 898,
	126, 898,
	132, 898,
	133, 898,
	134, 898,
	135, 898,
	136, 898,
	138, 898,
	140, 898,
	143, 898,
	144, 898,
	146, 898,
	147, 898,
	149, 898,
	151, 898,
	152, 898,
	153, 898,
	154, 898,
	155, 898,
	156, 898,
	157, 898,
	158, 898,
	159, 898,
	161, 898,
	166, 898,
	167, 898,
	168, 898,
	170, 898,
	171, 898,
	172, 898,
	173, 898,
	174, 898,
	175, 898,
	176, 898,
	177, 898,
	178, 898,
	180, 898,
	182, 898,
	183, 898,
	184, 898,
	185, 898,
	186, 898,
	187, 898,
	188, 898,
	189, 898,
	190, 898,
	193, 898,
	194, 898,
	195, 898,
	197, 898,
	198, 898,
	200, 898,
	201, 898,
	202, 898,
	203, 898,
	204, 898,
	206, 898,
	207, 898,
	210, 898,
	212, 898,
	213, 898,
	214, 898,
	215, 898,
	216, 898,
	217, 898,
	218, 898,
	219, 898,
	220, 898,
	221, 898,
	222, 898,
	223, 898,
	224, 898,
	225, 898,
	227, 898,
	228, 898,
	229, 898,
	230, 898,
	231, 898,
	232, 898,
	233, 898,
	235, 898,
	236, 898,
	239, 898,
	240, 898,
	243, 898,
	244, 898,
	245, 898,
	246, 898,
	247, 898,
	248, 898,
	249, 898,
	250, 898,
	251, 898,
	252, 898,
	253, 898,
	254, 898,
	255, 898,
	257, 898,
	258, 898,
	259, 898,
	260, 898,
	261, 898,
	263, 898,
	264, 898,
	265, 898,
	266, 898,
	267, 898,
	268, 898,
	269, 898,
	270, 898,
	272, 898,
	273, 898,
	274, 898,
	275, 898,
	276, 898,
	278, 898,
	279, 898,
	280, 898,
	281, 898,
	282, 898,
	283, 898,
	284, 898,
	286, 898,
	287, 898,
	288, 898,
	289, 898,
	290, 898,
	291, 898,
	292, 898,
	293, 898,
	295, 898,
	296, 898,
	297, 898,
	298, 898,
	299, 898,
	300, 898,
	301, 898,
	303, 898,
	304, 898,
	305, 898,
	306, 898,
	307, 898,
	308, 898,
	309, 898,
	310, 898,
	311, 898,
	312, 898,
	313, 898,
	314, 898,
	315, 898,
	316, 898,
	317, 898,
	318, 898,
	319, 898,
	320, 898,
	321, 898,
	323, 898,
	324, 898,
	325, 898,
	326, 898,
	327, 898,
	328, 898,
	329, 898,
	330, 898,
	331, 898,
	332, 898,
	333, 898,
	334, 898,
	336, 898,
	337, 898,
	339, 898,
	340, 898,
	341, 898,
	342, 898,
	343, 898,
	344, 898,
	345, 898,
	346, 898,
	347, 898,
	348, 898,
	350, 898,
	351, 898,
	352, 898,
	353, 898,
	356, 898,
	357, 898,
	358, 898,
	359, 898,
	360, 898,
	361, 898,
	362, 898,
	363, 898,
	364, 898,
	367, 898,
	368, 898,
	369, 898,
	370, 898,
	371, 898,
	372, 898,
	374, 898,
	375, 898,
	376, 898,
	377, 898,
	378, 898,
	379, 898,
	382, 898,
	383, 898,
	388, 898,
	389, 898,
	390, 898,
	391, 898,
	392, 898,
	393, 898,
	394, 898,
	402, 898,
	407, 898,
	408, 898,
	409, 898,
	416, 898,
	422, 898,
	-2, 0,
	-1, 174,
	1, 57,
	420, 57,
	-2, 889,
	-1, 207,
	418, 1462,
	421, 1462,
	-2, 586,
	-1, 208,
	418, 1464,
	421, 1464,
	-2, 587,
	-1, 209,
	418, 1463,
	421, 1463,
	-2, 588,
	-1, 210,
	421, 1404,
	-2, 589,
	-1, 613,
	142, 1577,
	354, 1577,
	399, 1577,
	418, 1577,
	-2, 0,
	-1, 614,
	142, 1500,
	354, 1500,
	399, 1500,
	418, 1500,
	-2, 0,
	-1, 616,
	142, 1650,
	354, 1650,
	399, 1650,
	418, 1650,
	-2, 0,
	-1, 618,
	142, 1679,
	354, 1679,
	399, 1679,
	418, 1679,
	-2, 0,
	-1, 625,
	142, 1582,
	354, 1582,
	399, 1582,
	418, 1582,
	-2, 417,
	-1, 660,
	1, 515,
	415, 515,
	417, 515,
	419, 515,
	420, 515,
	-2, 0,
	-1, 661,
	1, 585,
	139, 585,
	415, 585,
	417, 585,
	419, 585,
	420, 585,
	-2, 0,
	-1, 667,
	1, 529,
	415, 529,
	417, 529,
	419, 529,
	420, 529,
	-2, 0,
	-1, 669,
	1, 533,
	415, 533,
	417, 533,
	419, 533,
	420, 533,
	-2, 0,
	-1, 672,
	1, 544,
	415, 544,
	417, 544,
	419, 544,
	420, 544,
	-2, 0,
	-1, 673,
	1, 550,
	415, 550,
	417, 550,
	419, 550,
	420, 550,
	-2, 0,
	-1, 674,
	1, 553,
	415, 553,
	417, 553,
	419, 553,
	420, 553,
	-2, 0,
	-1, 678,
	1, 567,
	415, 567,
	417, 567,
	419, 567,
	420, 567,
	-2, 0,
	-1, 679,
	1, 569,
	415, 569,
	417, 569,
	419, 569,
	420, 569,
	-2, 0,
	-1, 707,
	127, 902,
	205, 902,
	234, 902,
	-2, 858,
	-1, 715,
	127, 901,
	205, 901,
	234, 901,
	-2, 856,
	-1, 742,
	416, 1752,
	-2, 1181,
	-1, 743,
	416, 1753,
	-2, 1182,
	-1, 772,
	416, 1456,
	-2, 1447,
	-1, 773,
	5, 1037,
	416, 1471,
	-2, 1462,
	-1, 774,
	416, 1472,
	-2, 1463,
	-1, 781,
	5, 1021,
	-2, 1492,
	-1, 782,
	5, 1022,
	-2, 1496,
	-1, 783,
	5, 1023,
	-2, 1495,
	-1, 784,
	5, 1024,
	-2, 1675,
	-1, 785,
	5, 1025,
	-2, 1584,
	-1, 786,
	5, 1026,
	-2, 1643,
	-1, 787,
	5, 1027,
	-2, 1645,
	-1, 788,
	5, 1028,
	-2, 1646,
	-1, 789,
	5, 1029,
	-2, 1647,
	-1, 790,
	5, 1030,
	-2, 1655,
	-1, 791,
	5, 1031,
	-2, 1687,
	-1, 792,
	5, 1032,
	-2, 1554,
	-1, 793,
	5, 1033,
	-2, 1491,
	-1, 794,
	5, 1034,
	-2, 1592,
	-1, 795,
	5, 1035,
	-2, 1593,
	-1, 796,
	5, 1036,
	-2, 1558,
	-1, 797,
	5, 1085,
	416, 1085,
	-2, 1720,
	-1, 815,
	5, 1058,
	-2, 1493,
	-1, 816,
	5, 1076,
	-2, 1520,
	-1, 818,
	5, 1050,
	-2, 1541,
	-1, 819,
	5, 1051,
	-2, 1542,
	-1, 820,
	5, 1042,
	-2, 1557,
	-1, 821,
	5, 1043,
	-2, 1559,
	-1, 822,
	5, 1044,
	-2, 1560,
	-1, 823,
	5, 1045,
	-2, 1561,
	-1, 824,
	5, 1009,
	-2, 1567,
	-1, 825,
	5, 1010,
	-2, 1568,
	-1, 826,
	5, 1073,
	-2, 1665,
	-1, 827,
	5, 1083,
	-2, 1677,
	-1, 828,
	5, 1048,
	-2, 1701,
	-1, 829,
	5, 1075,
	-2, 1702,
	-1, 830,
	5, 1057,
	-2, 1703,
	-1, 831,
	5, 1075,
	-2, 1704,
	-1, 832,
	5, 1075,
	-2, 1705,
	-1, 833,
	5, 1040,
	-2, 1708,
	-1, 834,
	5, 1040,
	-2, 1709,
	-1, 837,
	5, 1065,
	-2, 1713,
	-1, 839,
	5, 1041,
	-2, 1718,
	-1, 840,
	5, 1046,
	-2, 1719,
	-1, 842,
	5, 1040,
	-2, 1723,
	-1, 845,
	5, 1049,
	-2, 1728,
	-1, 846,
	5, 1047,
	-2, 1730,
	-1, 848,
	5, 1077,
	-2, 1732,
	-1, 849,
	5, 1079,
	-2, 1733,
	-1, 850,
	5, 1081,
	-2, 1734,
	-1, 853,
	5, 1072,
	-2, 1738,
	-1, 923,
	416, 1471,
	-2, 1462,
	-1, 940,
	278, 1444,
	409, 1444,
	-2, 1443,
	-1, 1089,
	253, 887,
	-2, 712,
	-1, 1098,
	237, 1466,
	-2, 0,
	-1, 1141,
	1, 284,
	415, 284,
	417, 284,
	419, 284,
	420, 284,
	-2, 861,
	-1, 1144,
	4, 1737,
	10, 1737,
	11, 1737,
	13, 1737,
	14, 1737,
	15, 1737,
	16, 1737,
	17, 1737,
	18, 1737,
	20, 1737,
	21, 1737,
	22, 1737,
	23, 1737,
	25, 1737,
	28, 1737,
	30, 1737,
	32, 1737,
	35, 1737,
	36, 1737,
	37, 1737,
	38, 1737,
	39, 1737,
	40, 1737,
	41, 1737,
	42, 1737,
	43, 1737,
	44, 1737,
	46, 1737,
	47, 1737,
	48, 1737,
	49, 1737,
	50, 1737,
	51, 1737,
	54, 1737,
	55, 1737,
	56, 1737,
	58, 1737,
	59, 1737,
	60, 1737,
	63, 1737,
	64, 1737,
	65, 1737,
	66, 1737,
	67, 1737,
	68, 1737,
	69, 1737,
	70, 1737,
	71, 1737,
	72, 1737,
	74, 1737,
	75, 1737,
	76, 1737,
	77, 1737,
	79, 1737,
	80, 1737,
	81, 1737,
	82, 1737,
	90, 1737,
	91, 1737,
	92, 1737,
	93, 1737,
	94, 1737,
	95, 1737,
	96, 1737,
	97, 1737,
	99, 1737,
	101, 1737,
	103, 1737,
	106, 1737,
	107, 1737,
	109, 1737,
	110, 1737,
	114, 1737,
	115, 1737,
	116, 1737,
	117, 1737,
	118, 1737,
	119, 1737,
	120, 1737,
	121, 1737,
	122, 1737,
	123, 1737,
	124, 1737,
	128, 1737,
	129, 1737,
	130, 1737,
	131, 1737,
	132, 1737,
	133, 1737,
	134, 1737,
	135, 1737,
	136, 1737,
	137, 1737,
	138, 1737,
	140, 1737,
	143, 1737,
	144, 1737,
	146, 1737,
	147, 1737,
	149, 1737,
	151, 1737,
	152, 1737,
	153, 1737,
	154, 1737,
	155, 1737,
	156, 1737,
	157, 1737,
	158, 1737,
	159, 1737,
	160, 1737,
	161, 1737,
	162, 1737,
	163, 1737,
	164, 1737,
	166, 1737,
	167, 1737,
	168, 1737,
	170, 1737,
	171, 1737,
	172, 1737,
	173, 1737,
	174, 1737,
	175, 1737,
	176, 1737,
	177, 1737,
	178, 1737,
	180, 1737,
	182, 1737,
	183, 1737,
	184, 1737,
	185, 1737,
	186, 1737,
	187, 1737,
	188, 1737,
	189, 1737,
	190, 1737,
	191, 1737,
	192, 1737,
	193, 1737,
	194, 1737,
	195, 1737,
	197, 1737,
	198, 1737,
	200, 1737,
	201, 1737,
	202, 1737,
	203, 1737,
	204, 1737,
	206, 1737,
	207, 1737,
	210, 1737,
	211, 1737,
	212, 1737,
	215, 1737,
	216, 1737,
	217, 1737,
	218, 1737,
	219, 1737,
	220, 1737,
	221, 1737,
	222, 1737,
	223, 1737,
	224, 1737,
	227, 1737,
	229, 1737,
	230, 1737,
	231, 1737,
	232, 1737,
	233, 1737,
	235, 1737,
	236, 1737,
	239, 1737,
	240, 1737,
	241, 1737,
	243, 1737,
	244, 1737,
	246, 1737,
	248, 1737,
	249, 1737,
	250, 1737,
	251, 1737,
	252, 1737,
	253, 1737,
	254, 1737,
	255, 1737,
	257, 1737,
	258, 1737,
	259, 1737,
	260, 1737,
	261, 1737,
	263, 1737,
	264, 1737,
	265, 1737,
	266, 1737,
	267, 1737,
	268, 1737,
	269, 1737,
	270, 1737,
	272, 1737,
	273, 1737,
	274, 1737,
	275, 1737,
	276, 1737,
	277, 1737,
	278, 1737,
	279, 1737,
	280, 1737,
	281, 1737,
	282, 1737,
	283, 1737,
	284, 1737,
	286, 1737,
	287, 1737,
	288, 1737,
	289, 1737,
	290, 1737,
	291, 1737,
	292, 1737,
	293, 1737,
	294, 1737,
	295, 1737,
	296, 1737,
	297, 1737,
	298, 1737,
	299, 1737,
	300, 1737,
	301, 1737,
	303, 1737,
	304, 1737,
	305, 1737,
	306, 1737,
	307, 1737,
	308, 1737,
	309, 1737,
	310, 1737,
	311, 1737,
	313, 1737,
	314, 1737,
	315, 1737,
	316, 1737,
	317, 1737,
	318, 1737,
	319, 1737,
	320, 1737,
	321, 1737,
	323, 1737,
	324, 1737,
	325, 1737,
	326, 1737,
	327, 1737,
	328, 1737,
	329, 1737,
	330, 1737,
	331, 1737,
	332, 1737,
	333, 1737,
	334, 1737,
	336, 1737,
	337, 1737,
	339, 1737,
	340, 1737,
	341, 1737,
	342, 1737,
	343, 1737,
	344, 1737,
	345, 1737,
	346, 1737,
	347, 1737,
	348, 1737,
	350, 1737,
	351, 1737,
	352, 1737,
	353, 1737,
	356, 1737,
	357, 1737,
	358, 1737,
	359, 1737,
	361, 1737,
	362, 1737,
	363, 1737,
	364, 1737,
	367, 1737,
	368, 1737,
	369, 1737,
	370, 1737,
	372, 1737,
	374, 1737,
	375, 1737,
	376, 1737,
	377, 1737,
	378, 1737,
	379, 1737,
	382, 1737,
	383, 1737,
	388, 1737,
	389, 1737,
	390, 1737,
	391, 1737,
	392, 1737,
	393, 1737,
	394, 1737,
	395, 1737,
	397, 1737,
	398, 1737,
	399, 1737,
	400, 1737,
	401, 1737,
	402, 1737,
	404, 1737,
	405, 1737,
	406, 1737,
	407, 1737,
	408, 1737,
	409, 1737,
	410, 1737,
	411, 1737,
	412, 1737,
	414, 1737,
	417, 1737,
	418, 1737,
	421, 1737,
	422, 1737,
	-2, 0,
	-1, 1162,
	142, 1650,
	354, 1650,
	399, 1650,
	418, 1650,
	-2, 0,
	-1, 1191,
	142, 1679,
	354, 1679,
	399, 1679,
	418, 1679,
	-2, 0,
	-1, 1192,
	185, 797,
	263, 797,
	267, 797,
	-2, 404,
	-1, 1269,
	127, 901,
	205, 901,
	234, 901,
	-2, 859,
	-1, 1353,
	113, 863,
	127, 863,
	179, 863,
	205, 863,
	234, 863,
	242, 863,
	365, 863,
	-2, 1224,
	-1, 1400,
	417, 1339,
	-2, 0,
	-1, 1408,
	185, 797,
	263, 797,
	267, 797,
	-2, 792,
	-1, 1437,
	417, 1339,
	-2, 0,
	-1, 1445,
	113, 863,
	127, 863,
	179, 863,
	205, 863,
	234, 863,
	242, 863,
	365, 863,
	-2, 968,
	-1, 1646,
	185, 797,
	263, 797,
	267, 797,
	-2, 406,
	-1, 1754,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1120,
	-1, 1755,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1121,
	-1, 1756,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1122,
	-1, 1757,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1123,
	-1, 1758,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1124,
	-1, 1759,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1125,
	-1, 1760,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1126,
	-1, 1761,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1127,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1139,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1140,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	191, 0,
	192, 0,
	397, 0,
	398, 0,
	399, 0,
	400, 0,
	401, 0,
	-2, 1141,
	-1, 1778,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1146,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1148,
	-1, 1786,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1152,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1153,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1154,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1155,
	-1, 1867,
	5, 1037,
	142, 1350,
	416, 1471,
	-2, 1462,
	-1, 1868,
	142, 1351,
	-2, 1697,
	-1, 1869,
	142, 1352,
	-2, 1581,
	-1, 1870,
	142, 1353,
	-2, 1521,
	-1, 1871,
	142, 1354,
	-2, 1549,
	-1, 1872,
	142, 1355,
	-2, 1580,
	-1, 1873,
	142, 1356,
	-2, 1642,
	-1, 1941,
	417, 1339,
	-2, 0,
	-1, 1951,
	1, 969,
	79, 969,
	113, 969,
	127, 969,
	143, 969,
	148, 969,
	150, 969,
	170, 969,
	179, 969,
	188, 969,
	201, 969,
	205, 969,
	220, 969,
	234, 969,
	237, 969,
	242, 969,
	285, 969,
	287, 969,
	365, 969,
	373, 969,
	385, 969,
	386, 969,
	396, 969,
	415, 969,
	417, 969,
	419, 969,
	420, 969,
	421, 969,
	-2, 968,
	-1, 1953,
	416, 1448,
	-2, 1460,
	-1, 2035,
	417, 1409,
	421, 1409,
	-2, 1436,
	-1, 2157,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1147,
	-1, 2158,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1149,
	-1, 2163,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1150,
	-1, 2388,
	253, 887,
	-2, 712,
	-1, 2453,
	185, 797,
	263, 797,
	267, 797,
	-2, 403,
	-1, 2468,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1151,
	-1, 2473,
	183, 0,
	184, 0,
	227, 0,
	-2, 1169,
	-1, 2531,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1199,
	-1, 2532,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1200,
	-1, 2533,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1201,
	-1, 2537,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1205,
	-1, 2538,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1206,
	-1, 2539,
	13, 0,
	14, 0,
	15, 0,
	397, 0,
	398, 0,
	399, 0,
	-2, 1207,
	-1, 2578,
	416, 1449,
	-2, 1461,
	-1, 2692,
	183, 0,
	184, 0,
	227, 0,
	-2, 1170,
	-1, 2695,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1173,
	-1, 2696,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1175,
	-1, 2837,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1174,
	-1, 2838,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	159, 0,
	160, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1176,
	-1, 2847,
	183, 0,
	-2, 1208,
	-1, 2935,
	183, 0,
	-2, 1209,
	-1, 3033,
	38, 0,
	159, 0,
	204, 0,
	317, 0,
	394, 0,
	402, 0,
	-2, 1700,
}

const sqlPrivate = 57344

const sqlLast = 58396

var sqlAct = [...]int{

	774, 1815, 2627, 2875, 3041, 3032, 3095, 2061, 3009, 3008,
	3011, 2995, 3042, 2864, 3043, 2089, 2503, 2828, 771, 2069,
	2939, 3031, 1073, 1131, 2403, 2645, 1741, 770, 2790, 2151,
	2805, 2745, 2640, 2587, 944, 2192, 2190, 716, 2760, 1801,
	740, 209, 1272, 1576, 2650, 2395, 491, 1047, 2851, 2397,
	2037, 2588, 2408, 491, 2425, 2058, 2427, 750, 2033, 1945,
	491, 1435, 959, 491, 1095, 2296, 491, 209, 2254, 491,
	491, 1938, 486, 1416, 1357, 1513, 491, 1163, 1127, 2070,
	2723, 1527, 937, 1528, 491, 2272, 1536, 2018, 1524, 1965,
	2283, 1935, 953, 2554, 1533, 540, 1946, 1727, 2940, 2036,
	1732, 2253, 2147, 2371, 1840, 2589, 1474, 1360, 537, 1813,
	1496, 1671, 2407, 1956, 1490, 1408, 1453, 1948, 1525, 1455,
	724, 130, 1993, 1417, 757, 1822, 1577, 1992, 1798, 2791,
	1814, 1904, 1194, 2019, 73, 1386, 1388, 561, 28, 2313,
	575, 908, 1834, 2034, 946, 1142, 1124, 2063, 1114, 210,
	2040, 1863, 211, 913, 1444, 1927, 1426, 1912, 1273, 603,
	890, 1348, 623, 1271, 1670, 578, 491, 491, 617, 136,
	205, 1134, 765, 715, 1543, 1111, 1051, 534, 137, 1466,
	888, 130, 1407, 588, 652, 2570, 2178, 1277, 2571, 488,
	3122, 2062, 1551, 487, 1921, 1551, 1551, 2090, 491, 491,
	491, 949, 491, 491, 962, 962, 2020, 3116, 3115, 596,
	720, 1921, 1921, 491, 491, 720, 3092, 3089, 3067, 1549,
	2759, 1505, 2759, 2020, 3061, 3060, 1436, 2414, 1921, 1921,
	471, 1563, 3057, 2466, 474, 3054, 3058, 590, 3051, 3055,
	3029, 814, 1505, 3028, 1505, 3027, 3026, 1505, 2557, 1563,
	1563, 2990, 730, 2977, 2970, 2100, 471, 1505, 2759, 2968,
	474, 2966, 2937, 2759, 2921, 2759, 2100, 2911, 2666, 2443,
	2906, 2759, 940, 721, 1505, 960, 1048, 2415, 2904, 2384,
	2066, 956, 2759, 891, 891, 1499, 2894, 1921, 2893, 1054,
	1505, 1448, 1505, 2886, 2885, 130, 2991, 1505, 2759, 2857,
	708, 2839, 2785, 1505, 2781, 2100, 1921, 2758, 1921, 707,
	2694, 2759, 28, 1072, 2100, 2664, 1066, 2183, 2656, 2657,
	1288, 1289, 2657, 2184, 725, 2566, 1331, 1332, 1333, 2567,
	2560, 2477, 2433, 2269, 1921, 1921, 2376, 1921, 568, 930,
	934, 939, 2221, 2092, 1166, 1291, 1921, 892, 1337, 40,
	2220, 2214, 2213, 2118, 1921, 2215, 1921, 1921, 1914, 2924,
	2226, 2227, 1053, 44, 2099, 1052, 1177, 2086, 2100, 2029,
	1290, 1921, 942, 1505, 1837, 1920, 1563, 1505, 1310, 1921,
	2226, 2227, 1567, 894, 1505, 895, 1568, 2557, 1913, 1921,
	1649, 567, 2666, 2008, 2191, 1954, 2376, 2150, 2129, 1504,
	1412, 1817, 471, 1050, 174, 1161, 474, 2416, 1160, 171,
	1159, 1167, 1158, 1157, 1156, 911, 1155, 1154, 2226, 2227,
	569, 2244, 2245, 2246, 1552, 1153, 2417, 1552, 1552, 59,
	571, 1152, 1838, 1151, 60, 1150, 2691, 1149, 1313, 1314,
	1315, 1316, 1148, 1147, 1146, 173, 1145, 1296, 896, 893,
	714, 713, 712, 711, 710, 2226, 2227, 706, 2244, 2245,
	2246, 705, 704, 703, 702, 905, 701, 63, 1071, 1328,
	1338, 1065, 1318, 1319, 1320, 700, 2241, 1668, 699, 698,
	697, 696, 692, 691, 171, 172, 1060, 2232, 690, 650,
	649, 648, 647, 646, 1839, 1836, 645, 644, 643, 642,
	491, 491, 641, 491, 949, 949, 491, 2232, 640, 491,
	639, 568, 491, 2241, 1326, 638, 637, 636, 491, 635,
	173, 1311, 40, 138, 634, 633, 3048, 632, 491, 491,
	491, 491, 491, 949, 949, 631, 44, 630, 629, 628,
	949, 2226, 2227, 627, 612, 2232, 1358, 611, 1167, 610,
	609, 608, 607, 525, 2927, 524, 2414, 1135, 1505, 497,
	172, 2242, 1559, 1855, 567, 1550, 1711, 64, 496, 165,
	495, 491, 477, 476, 475, 1088, 723, 166, 195, 194,
	1841, 2242, 2232, 193, 491, 1085, 192, 1317, 191, 190,
	189, 2247, 188, 569, 139, 66, 187, 67, 2065, 2241,
	186, 1100, 59, 571, 1312, 2248, 491, 60, 185, 184,
	183, 1288, 1289, 171, 171, 171, 171, 491, 1059, 2242,
	1064, 182, 1070, 2459, 1128, 181, 570, 1329, 2247, 110,
	180, 179, 178, 177, 176, 2738, 1291, 1913, 1288, 1289,
	63, 175, 2813, 1944, 2243, 1167, 2226, 2227, 2699, 173,
	173, 173, 173, 2658, 2575, 2309, 2242, 949, 2189, 1113,
	2180, 1290, 2139, 1291, 2243, 2030, 2023, 1853, 2232, 1851,
	1674, 1835, 2096, 1849, 721, 1089, 1092, 1118, 1121, 1452,
	1847, 1443, 1364, 40, 1143, 1208, 1075, 1056, 1290, 172,
	172, 172, 172, 3030, 491, 2105, 1368, 44, 165, 165,
	165, 165, 2243, 1284, 1327, 3013, 166, 166, 166, 166,
	3002, 2931, 1330, 2925, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 1358, 1170, 2097, 2907, 138, 138, 138,
	138, 1175, 2874, 1202, 1192, 2826, 2722, 1206, 1296, 2243,
	64, 568, 2242, 1269, 2721, 1270, 2715, 2711, 2710, 2709,
	1355, 2705, 40, 2704, 2098, 2235, 2236, 2228, 2229, 2230,
	2231, 2233, 2234, 2703, 571, 1296, 44, 139, 66, 2702,
	67, 2677, 2675, 2232, 2237, 2235, 2236, 2228, 2229, 2230,
	2231, 2233, 2234, 2574, 2551, 1189, 171, 1573, 171, 2550,
	1318, 1319, 1320, 2549, 567, 2489, 2135, 2375, 2308, 570,
	2299, 63, 110, 2265, 2379, 2238, 2239, 2240, 2252, 2225,
	2222, 2219, 2237, 2235, 2236, 2228, 2229, 2230, 2231, 2233,
	2234, 2812, 173, 569, 173, 2243, 2218, 2216, 1216, 2197,
	2196, 2179, 59, 571, 1951, 1268, 1284, 60, 1209, 1311,
	538, 1510, 2238, 2239, 2240, 1283, 1508, 904, 3120, 2237,
	2235, 2236, 2228, 2229, 2230, 2231, 2233, 2234, 1361, 1809,
	1351, 2437, 172, 568, 172, 3103, 2226, 2227, 3102, 1074,
	63, 165, 2505, 165, 40, 3021, 171, 1669, 1994, 166,
	3016, 166, 2972, 721, 2963, 491, 2146, 2962, 44, 2958,
	491, 2957, 2951, 2948, 708, 2226, 2227, 2923, 2922, 1803,
	138, 64, 138, 707, 2870, 1423, 1280, 1281, 2849, 2800,
	2795, 1285, 173, 2793, 1414, 2780, 567, 491, 2764, 2720,
	2667, 2643, 1312, 2634, 2633, 2631, 734, 2608, 139, 66,
	2607, 67, 2597, 2596, 2562, 2237, 2235, 2236, 2228, 2229,
	2230, 2231, 2233, 2234, 2472, 569, 2928, 2102, 2439, 171,
	2360, 2344, 172, 2323, 59, 571, 2289, 2322, 2268, 60,
	570, 165, 2206, 110, 2205, 1384, 2202, 1352, 1387, 166,
	64, 1390, 1420, 1421, 2172, 1389, 1394, 2942, 1854, 1397,
	2107, 1941, 1433, 1810, 1932, 173, 1919, 1845, 1519, 1376,
	138, 1375, 63, 2232, 1374, 1373, 1372, 139, 66, 1437,
	67, 1415, 1406, 1405, 1400, 766, 1399, 891, 1292, 1293,
	1294, 1295, 1297, 1298, 1398, 1396, 1434, 2825, 171, 1395,
	1392, 1391, 2232, 1382, 1381, 172, 2226, 2227, 130, 570,
	1380, 1379, 110, 1378, 165, 1292, 1293, 1294, 1295, 1297,
	1298, 1377, 166, 1365, 1411, 2230, 2231, 2233, 2234, 721,
	949, 491, 1361, 1351, 173, 2323, 1473, 962, 1409, 1188,
	1461, 1172, 1139, 138, 2697, 2674, 1442, 2242, 1446, 2569,
	1413, 2565, 2182, 1288, 1289, 491, 962, 491, 491, 1288,
	1289, 1933, 1852, 2435, 1850, 209, 1497, 1349, 1848, 1449,
	2020, 2398, 64, 1668, 172, 1846, 2242, 1467, 1291, 491,
	491, 2818, 1520, 165, 1291, 2926, 491, 1367, 491, 2669,
	491, 166, 2117, 2668, 491, 2226, 2227, 2572, 1532, 139,
	66, 1668, 67, 1290, 1403, 1574, 1668, 1401, 1506, 1290,
	1404, 1205, 138, 1402, 1659, 1658, 1492, 1668, 1665, 1443,
	171, 1566, 1266, 1379, 1183, 2900, 2873, 1514, 1379, 2364,
	2243, 570, 1439, 2232, 110, 2359, 911, 2116, 2355, 2343,
	2260, 2259, 2258, 491, 949, 1996, 209, 491, 491, 2257,
	2156, 1642, 1201, 2606, 949, 1655, 173, 209, 491, 2243,
	886, 491, 491, 1370, 1540, 1837, 2090, 491, 1529, 2445,
	1644, 2354, 1486, 2852, 1538, 2062, 2507, 1632, 3049, 1823,
	1053, 2187, 1516, 1052, 1259, 3059, 1296, 1385, 3056, 962,
	855, 2410, 2583, 887, 3005, 2641, 172, 2093, 533, 491,
	200, 1502, 2976, 3082, 491, 165, 1213, 1503, 1662, 209,
	491, 1547, 491, 166, 491, 504, 491, 2772, 491, 1257,
	471, 2119, 1571, 1838, 474, 3083, 719, 1113, 491, 3050,
	491, 1244, 2455, 1634, 539, 1523, 1245, 880, 491, 491,
	491, 903, 2236, 2228, 2229, 2230, 2231, 2233, 2234, 2436,
	2789, 3119, 882, 1636, 471, 2899, 1468, 2898, 474, 2169,
	1675, 1542, 1258, 2896, 1545, 878, 2895, 491, 2621, 876,
	2616, 962, 2228, 2229, 2230, 2231, 2233, 2234, 873, 2615,
	2167, 532, 2580, 1465, 1696, 1839, 1836, 1646, 2579, 2201,
	1602, 2200, 718, 2199, 2198, 2159, 1714, 2091, 503, 2048,
	1967, 2013, 772, 1703, 1667, 1469, 1470, 2007, 1656, 1958,
	2103, 1189, 1088, 1572, 1899, 1569, 1570, 1663, 1554, 2003,
	2611, 1556, 1705, 1203, 1558, 1984, 1785, 1633, 1561, 1643,
	514, 1410, 1049, 1898, 1897, 471, 1896, 1743, 1355, 474,
	2059, 1708, 1742, 1211, 2975, 962, 471, 1827, 2930, 1672,
	474, 1958, 2458, 2017, 1660, 720, 1709, 1676, 2626, 694,
	1179, 1678, 1957, 1800, 1861, 201, 1077, 1808, 1204, 1449,
	1800, 1841, 2164, 1866, 1866, 2877, 584, 1877, 1879, 1687,
	1884, 2028, 1977, 2165, 1970, 1807, 2405, 2170, 1907, 763,
	1805, 491, 1243, 491, 1681, 1733, 1740, 1911, 471, 602,
	515, 601, 474, 2228, 2229, 2230, 2231, 2233, 2234, 2122,
	3024, 1713, 1287, 2599, 1712, 1187, 1824, 962, 602, 1976,
	1891, 2124, 526, 491, 1546, 491, 523, 708, 1841, 1731,
	708, 708, 491, 962, 2499, 3074, 1723, 491, 202, 1724,
	1725, 1240, 2148, 2149, 1862, 491, 2351, 3105, 518, 1820,
	1180, 2125, 2346, 491, 1886, 1298, 2987, 1823, 1294, 1295,
	1297, 1298, 1835, 2123, 1463, 491, 721, 1710, 949, 1288,
	1289, 721, 1818, 1669, 1994, 3045, 917, 1551, 717, 491,
	962, 2000, 498, 2988, 1950, 491, 491, 1959, 1241, 1811,
	2363, 1485, 3082, 1182, 1291, 1456, 1471, 2234, 1457, 2954,
	491, 1669, 1994, 491, 1953, 1969, 1669, 1994, 2456, 3098,
	891, 1895, 531, 1265, 1707, 2166, 2406, 1669, 1666, 1290,
	1841, 1383, 2168, 2617, 1874, 204, 531, 491, 2050, 491,
	2454, 491, 1456, 1219, 491, 1457, 491, 940, 491, 203,
	491, 491, 1963, 491, 949, 949, 949, 2001, 1939, 949,
	1908, 1971, 1973, 1909, 2004, 491, 764, 2014, 1917, 1918,
	1986, 1463, 721, 909, 2405, 1925, 1929, 1930, 2084, 2085,
	1934, 2015, 508, 1488, 1942, 1943, 199, 1212, 2047, 2834,
	1458, 1446, 1987, 3046, 1981, 530, 1979, 1962, 1995, 1997,
	1998, 1999, 874, 1460, 1985, 501, 1296, 517, 516, 530,
	2756, 2609, 2844, 2902, 884, 1963, 2002, 883, 3073, 1968,
	2010, 197, 1986, 508, 1346, 2204, 491, 1458, 2080, 2600,
	874, 1318, 1319, 1320, 875, 2753, 1796, 2025, 2108, 2027,
	1460, 2878, 2073, 874, 1053, 2082, 501, 2021, 1695, 2005,
	1462, 2335, 1076, 1955, 200, 1456, 2075, 1794, 1457, 911,
	3047, 2095, 1493, 720, 198, 962, 2087, 491, 1949, 2496,
	1963, 2064, 507, 2064, 2161, 491, 2754, 491, 130, 911,
	1311, 1799, 1256, 2068, 471, 2334, 130, 1462, 474, 3106,
	3096, 519, 2077, 1806, 2078, 1928, 2079, 2081, 491, 491,
	491, 1429, 491, 1143, 2088, 695, 1181, 2337, 2094, 1924,
	2447, 2679, 1198, 507, 2112, 2104, 2113, 1680, 533, 1552,
	2670, 491, 583, 478, 1178, 2083, 2106, 2339, 1432, 2686,
	3044, 2497, 533, 528, 1286, 1463, 2130, 1186, 520, 3072,
	1458, 2830, 3081, 1390, 1489, 1397, 1926, 528, 1227, 1790,
	2133, 3097, 2134, 1460, 1387, 3079, 2109, 1791, 2804, 1430,
	1792, 2341, 2802, 1312, 1797, 682, 2111, 2338, 529, 1276,
	2056, 2120, 1463, 2054, 521, 1522, 522, 2141, 504, 1422,
	1176, 3099, 529, 2450, 1165, 729, 494, 1288, 1289, 1647,
	1199, 2835, 2136, 502, 1200, 2175, 2138, 1463, 1454, 2718,
	1462, 532, 1355, 2749, 130, 1220, 2750, 1193, 130, 2368,
	1275, 527, 1291, 2162, 1501, 532, 500, 1841, 2888, 504,
	2887, 2194, 2195, 1495, 3111, 527, 2372, 2868, 499, 1891,
	1891, 2145, 2540, 2829, 502, 2771, 2945, 1290, 2582, 2319,
	2752, 1494, 2770, 2143, 2315, 1431, 1782, 2768, 2057, 2755,
	2055, 1541, 1221, 683, 1531, 1218, 509, 500, 2495, 1459,
	1530, 503, 1526, 1521, 2996, 1253, 1700, 1650, 1491, 499,
	2449, 505, 2646, 1301, 1299, 1300, 1292, 1293, 1294, 1295,
	1297, 1298, 2806, 1719, 2446, 1463, 1654, 2297, 1274, 2869,
	1469, 1470, 1793, 1907, 1907, 1907, 1459, 509, 2267, 1795,
	1275, 2160, 503, 2325, 2324, 1988, 962, 479, 480, 2154,
	2270, 2279, 505, 1677, 1296, 2277, 2278, 1276, 2286, 1891,
	1891, 1891, 491, 2831, 1923, 491, 1922, 2719, 721, 2377,
	718, 2032, 3, 491, 491, 962, 2031, 2186, 491, 1318,
	1319, 1320, 2628, 1254, 2751, 1652, 491, 491, 491, 1099,
	758, 594, 491, 2541, 3110, 491, 2448, 587, 1098, 1653,
	2542, 2306, 491, 491, 491, 491, 491, 1780, 1783, 2769,
	2298, 1720, 1198, 3086, 2767, 491, 2792, 2276, 1274, 2367,
	684, 2724, 491, 1228, 2293, 482, 481, 2555, 1311, 1844,
	1198, 472, 2302, 2303, 491, 949, 489, 2291, 491, 1110,
	1108, 2294, 2316, 510, 962, 2866, 2304, 1255, 491, 1459,
	536, 2801, 1779, 579, 962, 3088, 536, 472, 2288, 579,
	599, 962, 573, 2262, 2263, 2264, 606, 2271, 1989, 1990,
	2848, 483, 484, 491, 626, 491, 2867, 491, 2717, 2345,
	491, 949, 949, 949, 2625, 491, 2255, 491, 2471, 2373,
	1199, 491, 2312, 2424, 1200, 2305, 491, 1963, 491, 566,
	36, 2217, 2300, 2171, 2310, 491, 1088, 2326, 1199, 2329,
	1263, 1312, 1200, 685, 1461, 1250, 2352, 2110, 2292, 2012,
	2320, 491, 491, 2412, 949, 2370, 2340, 2401, 1983, 2400,
	2356, 2256, 2370, 1248, 2321, 2361, 2307, 1843, 1512, 1461,
	1264, 491, 2327, 1173, 2331, 2332, 2347, 928, 2342, 2357,
	2350, 686, 1088, 1694, 2348, 2441, 536, 536, 2349, 2362,
	2137, 2381, 2386, 2132, 924, 1781, 2374, 2378, 1497, 2114,
	491, 565, 35, 1697, 1497, 592, 593, 2358, 727, 1684,
	682, 585, 586, 2399, 1635, 491, 911, 1371, 489, 489,
	489, 3040, 954, 489, 911, 911, 2623, 2430, 911, 1500,
	729, 2409, 2993, 472, 1055, 1238, 2353, 1236, 1582, 2742,
	2409, 962, 2440, 2382, 2604, 2411, 2442, 2418, 1109, 1107,
	962, 2390, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	721, 1891, 1891, 1722, 728, 491, 2274, 1664, 2602, 2581,
	1234, 572, 564, 32, 2281, 2282, 2474, 1210, 2287, 682,
	1262, 196, 2387, 2388, 2389, 1249, 2394, 2434, 2451, 2452,
	2491, 2492, 2493, 917, 1232, 2453, 2392, 917, 683, 729,
	2060, 2457, 2508, 1247, 36, 2052, 2460, 2462, 2464, 2051,
	1424, 2049, 2481, 563, 79, 562, 78, 1230, 130, 1224,
	1693, 2487, 1106, 559, 23, 2432, 560, 24, 2552, 1891,
	1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
	1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 2478, 1891,
	2515, 872, 2483, 491, 1582, 1582, 2046, 2419, 2420, 2421,
	1565, 2422, 2423, 2504, 2498, 2500, 2501, 683, 491, 2510,
	962, 201, 558, 30, 1564, 1237, 35, 1235, 557, 21,
	1438, 1562, 2544, 1560, 909, 2517, 1887, 2519, 2576, 555,
	20, 1557, 556, 19, 1555, 1733, 2511, 545, 15, 1553,
	546, 16, 2594, 1511, 1509, 1498, 2614, 1487, 554, 57,
	1233, 2593, 2568, 1733, 2520, 1484, 2545, 553, 56, 1472,
	2556, 1464, 2620, 2484, 2553, 684, 544, 55, 552, 12,
	1084, 2558, 2559, 2561, 1231, 543, 50, 491, 491, 1475,
	491, 2578, 2624, 1601, 202, 491, 2396, 32, 2548, 130,
	2916, 732, 3083, 962, 2824, 962, 1479, 1229, 949, 1223,
	1518, 2612, 1105, 2823, 2577, 1673, 2635, 1164, 550, 47,
	2918, 2585, 1975, 2618, 2655, 491, 2787, 2619, 551, 48,
	1958, 2659, 2622, 900, 542, 49, 549, 7, 79, 2652,
	78, 1974, 2648, 1278, 684, 877, 879, 1476, 23, 548,
	6, 24, 1958, 2651, 491, 901, 2647, 962, 491, 491,
	962, 491, 2016, 1972, 2573, 2610, 726, 1986, 685, 491,
	489, 1083, 2011, 489, 2630, 2152, 489, 962, 2006, 954,
	2639, 204, 1103, 2637, 2632, 2638, 2629, 1982, 489, 2653,
	2115, 1582, 1963, 2649, 2642, 203, 2644, 30, 489, 489,
	489, 489, 954, 21, 2660, 2688, 686, 2683, 574, 1601,
	1601, 2661, 1480, 2956, 20, 2761, 491, 19, 1222, 2680,
	2671, 2672, 15, 1279, 2676, 16, 2693, 2933, 960, 2678,
	2073, 1048, 199, 57, 2725, 902, 1991, 685, 911, 2684,
	1978, 626, 56, 1282, 2153, 2009, 547, 38, 1640, 1641,
	2681, 55, 1980, 12, 489, 2992, 541, 37, 2798, 2603,
	50, 2605, 1288, 1289, 1288, 1289, 2067, 197, 2689, 2053,
	1481, 1482, 2665, 491, 2045, 686, 1184, 595, 1910, 1477,
	1645, 1575, 2431, 962, 491, 3094, 962, 626, 2564, 1291,
	491, 491, 491, 47, 3109, 1358, 2716, 2226, 2227, 2673,
	200, 1288, 1289, 48, 2127, 2126, 1478, 2502, 491, 49,
	198, 7, 1290, 491, 1290, 491, 2438, 2127, 491, 491,
	491, 491, 491, 2128, 6, 2594, 491, 491, 949, 1876,
	1215, 1833, 962, 2385, 2593, 1214, 949, 2730, 1252, 2762,
	2765, 1251, 2741, 2735, 491, 491, 2732, 2700, 2729, 2727,
	2728, 2494, 2731, 1368, 1366, 2816, 2663, 2737, 949, 2788,
	2594, 1261, 1260, 2799, 489, 1246, 1242, 911, 491, 2593,
	1239, 1225, 2594, 1185, 2733, 2794, 1648, 491, 491, 949,
	949, 2593, 1483, 2766, 885, 2810, 693, 2803, 2876, 680,
	2782, 2333, 2808, 2775, 2776, 2739, 1601, 1963, 1683, 1088,
	1226, 2833, 1685, 2797, 2290, 2401, 2807, 2817, 1931, 2783,
	962, 2986, 2706, 2203, 2938, 2809, 2843, 2274, 2773, 2796,
	2815, 38, 1842, 2786, 1369, 53, 2778, 2590, 753, 2836,
	2740, 37, 2820, 2819, 2743, 1887, 1887, 2854, 2584, 2736,
	1057, 2039, 1061, 2038, 1067, 965, 1657, 491, 2842, 962,
	1963, 775, 1865, 491, 2774, 491, 1734, 962, 491, 1579,
	917, 2779, 777, 1580, 780, 779, 491, 778, 1891, 1581,
	1393, 776, 962, 2409, 2850, 1578, 2884, 1140, 2071, 670,
	917, 2840, 1661, 2863, 1804, 1821, 2855, 2856, 2594, 2185,
	1362, 745, 2897, 1819, 1171, 744, 2295, 2593, 2881, 2784,
	2880, 2404, 2882, 2861, 2814, 1891, 2860, 2811, 1718, 911,
	2144, 1715, 2601, 491, 506, 491, 2223, 1138, 949, 2859,
	2840, 2879, 2594, 491, 2594, 1887, 1887, 1887, 1742, 2594,
	1892, 2593, 1885, 2593, 1881, 1267, 1347, 2903, 2593, 2905,
	2072, 1207, 2413, 1742, 2909, 962, 1169, 909, 2101, 1726,
	2821, 2822, 2914, 1174, 899, 606, 898, 2901, 1963, 2726,
	536, 897, 3010, 491, 3007, 2915, 2913, 909, 2920, 491,
	2651, 2832, 2919, 1651, 2121, 1579, 1579, 491, 1340, 749,
	2275, 1441, 732, 2380, 1081, 924, 732, 489, 2950, 2401,
	2944, 2932, 2929, 1339, 2862, 2858, 881, 2947, 2917, 1891,
	1197, 1196, 1195, 2936, 2943, 2318, 491, 491, 3104, 2890,
	2955, 2598, 3004, 491, 170, 167, 1048, 169, 2967, 168,
	2969, 2366, 82, 34, 949, 33, 109, 108, 2941, 491,
	107, 2953, 2952, 949, 949, 106, 105, 491, 104, 491,
	103, 491, 102, 101, 2961, 2989, 2908, 100, 99, 98,
	97, 2974, 2982, 2971, 2979, 96, 2980, 2981, 2973, 491,
	95, 94, 491, 93, 92, 491, 91, 962, 2964, 90,
	89, 88, 87, 86, 3014, 3015, 85, 3012, 84, 1582,
	3017, 622, 3018, 619, 3020, 81, 80, 31, 26, 2999,
	113, 114, 3001, 3006, 25, 3025, 1341, 1342, 1343, 1344,
	1345, 2594, 491, 2891, 2892, 77, 76, 29, 3019, 1354,
	2593, 2959, 2983, 18, 2984, 3023, 3022, 1363, 11, 3039,
	3037, 472, 3038, 17, 22, 135, 134, 491, 133, 132,
	131, 3064, 14, 3065, 13, 491, 3052, 3000, 1742, 128,
	129, 127, 126, 125, 124, 1055, 2960, 489, 1517, 3071,
	2594, 491, 3069, 3070, 3068, 472, 3063, 123, 10, 2593,
	8, 112, 1579, 9, 3077, 3066, 3080, 3078, 2978, 1537,
	1537, 2827, 2444, 70, 3084, 3085, 489, 3012, 489, 3087,
	489, 71, 27, 43, 536, 42, 3093, 41, 111, 161,
	160, 159, 158, 154, 157, 155, 156, 1887, 1887, 3101,
	3100, 153, 3062, 3090, 3091, 122, 3107, 163, 162, 151,
	3108, 148, 150, 152, 3112, 3113, 1582, 149, 147, 164,
	3114, 121, 1425, 120, 119, 118, 117, 116, 1425, 5,
	2, 1, 3121, 626, 0, 0, 472, 1055, 579, 0,
	2073, 0, 0, 0, 0, 0, 0, 472, 1055, 0,
	0, 954, 489, 3117, 3118, 0, 0, 626, 1418, 1418,
	1418, 3123, 0, 0, 0, 1887, 1887, 1887, 1887, 1887,
	1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
	1887, 1887, 1887, 1887, 1601, 1887, 1429, 0, 1582, 626,
	0, 0, 1429, 0, 489, 0, 0, 0, 0, 472,
	489, 0, 489, 0, 489, 0, 489, 2756, 489, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 1698, 1432,
	1699, 0, 0, 0, 1582, 1582, 0, 0, 489, 489,
	489, 1427, 2753, 0, 0, 2746, 0, 1427, 0, 0,
	0, 0, 1582, 1582, 1430, 0, 0, 917, 2744, 0,
	1430, 0, 0, 2748, 0, 917, 917, 626, 0, 917,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 2754, 0, 0, 0, 1582, 0, 0,
	2285, 0, 0, 2173, 2174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2747, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1601, 0, 0, 1518, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 909, 0, 1431, 0, 0, 0,
	0, 0, 909, 909, 0, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2249, 2250, 2251, 0, 0, 0, 0,
	0, 606, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1601, 0, 0, 0, 0, 924, 0,
	2749, 0, 0, 2750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 0, 536, 2284, 0, 924, 0,
	0, 0, 489, 0, 0, 0, 0, 1966, 0, 1601,
	1601, 0, 0, 0, 0, 489, 0, 2752, 0, 0,
	0, 0, 0, 489, 0, 0, 2755, 1601, 1601, 0,
	0, 0, 0, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 732, 915, 0, 0, 489,
	0, 0, 0, 0, 0, 472, 2022, 0, 0, 0,
	0, 0, 1601, 0, 0, 0, 0, 0, 1582, 0,
	2035, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 1966, 0, 536,
	0, 489, 0, 0, 489, 0, 489, 0, 489, 0,
	489, 489, 0, 954, 0, 1716, 0, 1721, 0, 0,
	0, 2751, 0, 1728, 0, 1966, 0, 0, 0, 0,
	1579, 0, 0, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 0, 1784,
	0, 1786, 1787, 1788, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 579, 0, 0, 0,
	1812, 0, 0, 0, 0, 0, 0, 1354, 0, 917,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1856, 1857,
	1858, 1859, 1860, 0, 208, 2469, 2470, 489, 0, 0,
	0, 0, 0, 0, 1887, 1055, 917, 1055, 0, 1883,
	0, 1894, 0, 0, 932, 0, 1900, 1905, 0, 958,
	208, 0, 0, 0, 0, 0, 917, 0, 489, 489,
	489, 0, 489, 0, 0, 0, 0, 1579, 917, 0,
	0, 1887, 917, 1601, 0, 0, 0, 917, 0, 2226,
	2227, 489, 2244, 2245, 2246, 0, 909, 0, 0, 0,
	0, 0, 0, 2521, 2522, 2523, 2524, 2525, 2526, 2527,
	2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537,
	2538, 2539, 0, 2543, 0, 0, 1582, 0, 0, 0,
	0, 0, 0, 2595, 0, 0, 854, 0, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 2241, 0, 1579,
	0, 0, 0, 2613, 0, 0, 0, 0, 0, 2024,
	0, 2026, 0, 0, 0, 2613, 0, 0, 568, 2613,
	0, 0, 0, 0, 2613, 1887, 0, 0, 1582, 40,
	0, 0, 0, 0, 0, 1579, 1579, 0, 0, 0,
	0, 0, 0, 44, 950, 0, 0, 963, 963, 0,
	0, 0, 0, 1579, 1579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2232, 0, 0, 2226,
	2227, 567, 2244, 2245, 2246, 909, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2690, 1579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	569, 0, 0, 0, 0, 1582, 0, 0, 0, 59,
	571, 0, 2247, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 2241, 0, 0,
	917, 0, 0, 924, 924, 0, 0, 924, 0, 0,
	2242, 0, 536, 0, 0, 536, 0, 63, 0, 0,
	0, 0, 0, 536, 536, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 489, 1966, 2314, 917,
	0, 0, 1966, 0, 0, 2314, 0, 0, 0, 0,
	0, 1601, 1966, 2314, 1966, 2314, 2314, 951, 0, 0,
	964, 964, 0, 0, 0, 489, 2232, 0, 0, 0,
	0, 0, 1517, 0, 917, 0, 1079, 0, 0, 0,
	0, 0, 1097, 0, 489, 0, 917, 909, 954, 0,
	0, 0, 0, 2243, 0, 0, 0, 0, 489, 0,
	0, 0, 0, 1601, 1117, 1117, 1117, 958, 0, 0,
	0, 0, 2247, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 1537, 0, 1537, 2595, 489, 0, 0,
	489, 0, 0, 0, 0, 489, 0, 489, 0, 0,
	2242, 954, 0, 0, 139, 66, 1966, 67, 536, 0,
	2157, 2158, 0, 0, 0, 1966, 2163, 0, 0, 0,
	1168, 2595, 0, 0, 0, 171, 0, 0, 0, 1579,
	0, 2428, 1055, 2595, 0, 2176, 570, 0, 0, 110,
	1601, 0, 0, 0, 0, 0, 0, 0, 2181, 0,
	0, 1055, 0, 0, 2188, 0, 2238, 2239, 2240, 2193,
	0, 173, 917, 2237, 2235, 2236, 2228, 2229, 2230, 2231,
	2233, 2234, 0, 0, 0, 0, 2207, 950, 950, 0,
	2461, 0, 0, 2243, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 489, 917, 0, 917, 0,
	0, 172, 0, 917, 0, 0, 950, 950, 0, 0,
	165, 0, 0, 950, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1905, 1905, 1905, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 1418, 2506, 0, 0, 0, 2595,
	0, 0, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2847, 0, 0, 0, 0, 0, 0, 2613,
	0, 0, 0, 2595, 0, 2595, 2238, 2239, 2240, 0,
	2595, 0, 0, 2237, 2235, 2236, 2228, 2229, 2230, 2231,
	2233, 2234, 0, 917, 0, 0, 0, 0, 2336, 2871,
	0, 0, 0, 0, 0, 1288, 1289, 0, 0, 0,
	951, 951, 0, 0, 0, 0, 0, 924, 0, 0,
	950, 0, 0, 536, 0, 0, 0, 0, 0, 0,
	1291, 0, 0, 0, 1288, 1289, 0, 0, 536, 951,
	951, 0, 0, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 2592, 1290, 0, 0, 0, 1291,
	0, 0, 0, 1310, 0, 917, 0, 1579, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	2613, 0, 0, 2402, 1290, 0, 1441, 0, 0, 0,
	1441, 0, 0, 2935, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1966, 1537, 0,
	1537, 0, 0, 0, 917, 489, 0, 0, 0, 1579,
	0, 0, 0, 1313, 1314, 1315, 1316, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 732, 732, 0,
	0, 0, 0, 1450, 0, 1966, 924, 0, 0, 0,
	732, 0, 2595, 0, 0, 0, 0, 1318, 1319, 1320,
	0, 1296, 0, 951, 0, 0, 0, 2463, 0, 0,
	0, 1728, 0, 0, 1055, 0, 0, 2467, 954, 489,
	2468, 489, 0, 0, 0, 0, 1318, 1319, 1320, 489,
	0, 0, 2473, 0, 0, 0, 1579, 0, 0, 2479,
	0, 2595, 0, 0, 0, 0, 1311, 0, 2485, 0,
	0, 0, 2280, 0, 0, 0, 0, 0, 0, 0,
	0, 2226, 2227, 0, 2244, 2245, 2246, 0, 0, 0,
	0, 2512, 2513, 2514, 0, 1311, 2707, 0, 2516, 2476,
	0, 0, 0, 0, 0, 2518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 2546, 2547, 0, 2241,
	0, 0, 0, 0, 0, 0, 0, 0, 924, 1312,
	0, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1515, 536, 0, 2563, 0, 0, 0,
	1966, 2314, 1966, 0, 0, 0, 0, 0, 1312, 0,
	0, 0, 0, 0, 0, 0, 0, 2592, 1055, 0,
	0, 0, 0, 1966, 1544, 2314, 1544, 0, 1055, 1055,
	489, 1966, 2314, 2586, 0, 0, 489, 489, 2232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2592, 0, 1055, 2035, 0, 0, 0, 0,
	0, 0, 0, 0, 2592, 0, 0, 0, 0, 754,
	74, 0, 0, 0, 0, 0, 0, 0, 1966, 0,
	0, 0, 0, 0, 2247, 0, 0, 2428, 2428, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1638, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	963, 0, 2242, 0, 0, 0, 1418, 0, 0, 0,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 2662, 0, 963,
	74, 0, 2226, 2227, 0, 2244, 2245, 2246, 208, 0,
	1682, 0, 0, 0, 0, 0, 1688, 0, 1689, 0,
	1690, 0, 1691, 0, 1692, 0, 0, 536, 0, 0,
	0, 0, 0, 1966, 0, 2314, 0, 0, 2865, 0,
	0, 0, 0, 0, 1701, 1097, 489, 0, 0, 0,
	2592, 0, 2692, 0, 0, 0, 2695, 2696, 0, 0,
	2241, 0, 0, 0, 0, 2243, 0, 2698, 0, 0,
	709, 2701, 0, 0, 0, 0, 0, 0, 722, 0,
	1441, 0, 0, 0, 2592, 0, 2592, 950, 2708, 208,
	0, 2592, 0, 489, 0, 489, 0, 950, 0, 0,
	208, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 74, 0, 951, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 2232,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 2506, 0, 0, 0, 0, 0, 536,
	0, 0, 208, 0, 0, 0, 0, 2865, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2238, 2239,
	2240, 0, 2763, 0, 0, 2237, 2235, 2236, 2228, 2229,
	2230, 2231, 2233, 2234, 0, 0, 1966, 2314, 0, 0,
	0, 1441, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2242, 0, 0, 0, 0, 0, 2314,
	0, 0, 0, 0, 963, 0, 0, 1055, 0, 1055,
	0, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 1952, 2997,
	951, 0, 1055, 0, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2592, 0, 0, 0, 0, 0, 0,
	0, 2837, 2838, 0, 0, 964, 0, 0, 0, 0,
	0, 0, 2506, 0, 0, 958, 2243, 0, 963, 0,
	0, 0, 0, 2846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2853, 0, 1055, 0, 0,
	0, 0, 2592, 0, 0, 1966, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 2865, 0, 0, 0, 0, 0, 2076, 0, 0,
	1117, 0, 1117, 0, 1117, 1291, 958, 958, 1337, 2226,
	2227, 2889, 2244, 2245, 2246, 0, 0, 964, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 2475, 0, 0,
	1290, 0, 0, 0, 0, 0, 963, 0, 1310, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 2238,
	2239, 2240, 0, 0, 0, 0, 2237, 2235, 2236, 2228,
	2229, 2230, 2231, 2233, 2234, 0, 0, 2241, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 74, 963, 74, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 0, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 2946, 0, 0, 2949, 0, 0, 0, 0, 0,
	0, 0, 0, 2131, 0, 0, 0, 0, 0, 1328,
	1338, 0, 1318, 1319, 1320, 0, 2232, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 0, 950, 950, 950,
	0, 0, 950, 0, 2140, 958, 2142, 0, 0, 0,
	0, 1305, 1306, 964, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 2155, 0, 964,
	0, 1311, 2247, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2242, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 3036, 3036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3053, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	951, 951, 951, 2243, 0, 951, 0, 0, 0, 0,
	0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 709, 0, 1291, 0, 0, 1337,
	0, 0, 0, 0, 0, 3036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 0, 1353, 0,
	0, 1290, 0, 0, 0, 1359, 0, 0, 0, 1310,
	0, 0, 0, 0, 1327, 0, 1307, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2238, 2239, 2240, 0,
	0, 964, 2311, 2237, 2235, 2236, 2228, 2229, 2230, 2231,
	2233, 2234, 0, 0, 0, 0, 0, 0, 0, 1313,
	1314, 1315, 1316, 0, 0, 0, 0, 0, 1296, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 2365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2383, 0, 1326, 0, 0, 0, 963,
	0, 2391, 1311, 2393, 0, 0, 0, 74, 0, 0,
	1440, 0, 0, 0, 1445, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 2465, 0, 0, 0, 0, 0, 963, 1329, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 950, 950, 0, 0, 0,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 950, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 0, 0, 0, 0, 0, 0,
	0, 0, 2712, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 1288, 1289,
	964, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	964, 0, 0, 0, 0, 0, 1324, 964, 0, 0,
	0, 0, 0, 1291, 963, 0, 1337, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 951, 951, 951,
	0, 0, 0, 0, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 0, 0,
	709, 709, 0, 0, 0, 0, 0, 1328, 1338, 0,
	1318, 1319, 1320, 963, 0, 2682, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 2685, 0, 964, 0, 0,
	0, 1334, 1335, 0, 0, 0, 964, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 0, 1802, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 1336, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 963, 0, 963, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 912, 0, 0,
	963, 0, 0, 963, 0, 0, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 1445, 0, 0,
	963, 0, 0, 0, 0, 0, 2777, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 964, 1327, 0, 951, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 0, 0, 74, 0, 74, 0, 0, 0, 2212,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 963,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 964, 0, 74, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 950, 2872, 0, 0, 963, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2910,
	0, 2912, 950, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 74, 0, 964,
	0, 0, 964, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 1324, 0,
	963, 0, 0, 0, 0, 1291, 0, 0, 1337, 0,
	0, 0, 0, 0, 951, 963, 0, 0, 964, 2965,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 951, 1307, 0, 2985, 0, 0,
	0, 0, 0, 1802, 0, 0, 0, 0, 0, 0,
	0, 950, 0, 0, 0, 951, 951, 0, 0, 0,
	0, 3003, 0, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1328,
	1338, 0, 1318, 1319, 1320, 964, 0, 0, 0, 0,
	0, 0, 0, 964, 651, 0, 682, 0, 0, 0,
	0, 0, 0, 1334, 1335, 0, 0, 0, 964, 0,
	0, 1305, 1306, 0, 0, 0, 658, 950, 0, 0,
	0, 0, 0, 0, 1326, 0, 950, 950, 656, 0,
	0, 1311, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 912, 912, 0, 0, 912, 1336, 0, 0,
	657, 0, 0, 0, 951, 659, 0, 0, 0, 687,
	963, 1325, 0, 0, 0, 665, 666, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 683, 660, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1317, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 671, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1329, 661, 0,
	0, 0, 0, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 663, 0,
	951, 0, 0, 0, 0, 74, 0, 0, 0, 951,
	951, 0, 0, 74, 0, 0, 0, 0, 0, 669,
	0, 0, 0, 0, 0, 722, 664, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 668,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	0, 684, 0, 0, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 0, 0, 0, 0, 0, 0,
	0, 2211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 667, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 653, 672, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 673, 0, 0, 0, 688, 689, 0, 0, 0,
	0, 0, 686, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 809, 912, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 808, 219,
	220, 221, 0, 273, 813, 0, 798, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 801, 799,
	800, 805, 803, 802, 804, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 810, 812, 860, 912, 326, 0, 0, 0,
	0, 325, 327, 334, 74, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 811, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 912, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 806, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 847,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 851, 852, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 807, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1802, 256,
	257, 258, 259, 966, 260, 967, 968, 969, 970, 214,
	971, 972, 973, 974, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 975, 267, 268, 269, 270, 271,
	272, 976, 977, 219, 220, 221, 978, 273, 222, 979,
	925, 980, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 981, 283, 0, 284, 285, 982, 856, 286,
	287, 288, 983, 984, 986, 985, 987, 988, 989, 289,
	290, 493, 291, 292, 293, 223, 224, 990, 294, 991,
	295, 992, 296, 993, 994, 297, 298, 995, 299, 300,
	996, 0, 997, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 998, 857, 999, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 1000, 316,
	1001, 1002, 858, 317, 1003, 318, 229, 1004, 230, 1005,
	319, 320, 321, 322, 323, 324, 231, 232, 860, 1006,
	326, 0, 0, 0, 1007, 325, 327, 334, 1008, 859,
	328, 233, 330, 329, 331, 332, 333, 234, 1009, 235,
	1010, 335, 861, 862, 336, 337, 338, 863, 339, 340,
	0, 0, 341, 342, 343, 1011, 345, 344, 1012, 236,
	864, 346, 347, 865, 1013, 348, 349, 1014, 1015, 350,
	0, 351, 927, 926, 352, 353, 355, 356, 354, 866,
	357, 358, 360, 359, 1016, 1017, 867, 1018, 237, 361,
	238, 362, 363, 1019, 364, 365, 1020, 1021, 366, 367,
	1022, 1023, 368, 239, 868, 369, 869, 240, 370, 371,
	372, 373, 374, 375, 376, 1024, 377, 241, 378, 242,
	379, 1025, 380, 381, 382, 383, 384, 243, 385, 386,
	1026, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 1027, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 1028, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 1029, 424, 405, 406, 425, 871, 426, 245, 427,
	428, 1030, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 1031, 439, 440, 1032, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 1033, 247,
	248, 249, 449, 1034, 1035, 450, 451, 250, 251, 1036,
	452, 453, 454, 455, 1037, 1038, 456, 457, 458, 460,
	1039, 461, 1040, 459, 462, 463, 464, 252, 253, 1041,
	1042, 465, 254, 1043, 1044, 1045, 1046, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 1936, 0, 0, 0, 0, 0, 0,
	0, 0, 1937, 256, 257, 258, 259, 966, 260, 967,
	968, 969, 970, 214, 971, 972, 973, 974, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 975, 267,
	268, 269, 270, 271, 272, 976, 977, 219, 220, 221,
	978, 273, 222, 979, 925, 980, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 981, 283, 0, 284,
	285, 982, 856, 286, 287, 288, 983, 984, 986, 985,
	987, 988, 989, 289, 290, 493, 291, 292, 293, 223,
	224, 990, 294, 991, 295, 992, 296, 993, 994, 297,
	298, 995, 299, 300, 996, 0, 997, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 998, 857,
	999, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 1000, 316, 1001, 1002, 858, 317, 1003, 318,
	229, 1004, 230, 1005, 319, 320, 321, 322, 323, 324,
	231, 232, 860, 1006, 326, 0, 0, 0, 1007, 325,
	327, 334, 1008, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 1009, 235, 1010, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 1011,
	345, 344, 1012, 236, 864, 346, 347, 865, 1013, 348,
	349, 1014, 1015, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 1016, 1017,
	867, 1018, 237, 361, 238, 362, 363, 1019, 364, 365,
	1020, 1021, 366, 367, 1022, 1023, 368, 239, 868, 369,
	869, 240, 370, 371, 372, 373, 374, 375, 376, 1024,
	377, 241, 378, 242, 379, 1025, 380, 381, 382, 383,
	384, 243, 385, 386, 1026, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 1027, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 1028, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 1029, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 1030, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 1031, 439,
	440, 1032, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 1033, 247, 248, 249, 449, 1034, 1035, 450,
	451, 250, 251, 1036, 452, 453, 454, 455, 1037, 1038,
	456, 457, 458, 460, 1039, 461, 1040, 459, 462, 463,
	464, 252, 253, 1041, 1042, 465, 254, 1043, 1044, 1045,
	1046, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2734, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2841, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2488, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2480, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2369, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1825, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 256, 257,
	258, 259, 966, 260, 967, 968, 969, 970, 214, 971,
	972, 973, 974, 261, 262, 263, 215, 216, 264, 217,
	265, 266, 218, 975, 267, 268, 269, 270, 271, 272,
	976, 977, 219, 220, 221, 978, 273, 222, 979, 925,
	980, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 981, 283, 0, 284, 285, 982, 856, 286, 287,
	288, 983, 984, 986, 985, 987, 988, 989, 289, 290,
	493, 291, 292, 293, 223, 224, 990, 294, 991, 295,
	992, 296, 993, 994, 297, 298, 995, 299, 300, 996,
	0, 997, 225, 304, 301, 302, 305, 308, 303, 309,
	310, 226, 227, 998, 857, 999, 0, 0, 0, 0,
	311, 312, 228, 313, 314, 0, 315, 1000, 316, 1001,
	1002, 858, 317, 1003, 318, 229, 1004, 230, 1005, 319,
	320, 321, 322, 323, 324, 231, 232, 860, 1006, 326,
	0, 0, 0, 1007, 325, 327, 334, 1008, 859, 328,
	233, 330, 329, 331, 332, 333, 234, 1009, 235, 1010,
	335, 861, 862, 336, 337, 338, 863, 339, 340, 0,
	0, 341, 342, 343, 1011, 345, 344, 1012, 236, 864,
	346, 347, 865, 1013, 348, 349, 1014, 1015, 350, 0,
	351, 927, 926, 352, 353, 355, 356, 354, 866, 357,
	358, 360, 359, 1016, 1017, 867, 1018, 237, 361, 238,
	362, 363, 1019, 364, 365, 1020, 1021, 366, 367, 1022,
	1023, 368, 239, 868, 369, 869, 240, 370, 371, 372,
	373, 374, 375, 376, 1024, 377, 241, 378, 242, 379,
	1025, 380, 381, 382, 383, 384, 243, 385, 386, 1026,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 1027, 399, 870, 400, 401, 402, 403,
	244, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	1028, 420, 421, 415, 417, 418, 419, 416, 422, 423,
	1029, 424, 405, 406, 425, 871, 426, 245, 427, 428,
	1030, 438, 429, 430, 431, 407, 432, 436, 437, 433,
	434, 435, 246, 1031, 439, 440, 1032, 441, 442, 443,
	444, 445, 306, 446, 307, 447, 448, 1033, 247, 248,
	249, 449, 1034, 1035, 450, 451, 250, 251, 1036, 452,
	453, 454, 455, 1037, 1038, 456, 457, 458, 460, 1039,
	461, 1040, 459, 462, 463, 464, 252, 253, 1041, 1042,
	465, 254, 1043, 1044, 1045, 1046, 466, 467, 255, 468,
	469, 470, 1832, 0, 773, 761, 762, 759, 760, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 1829, 260, 0, 0, 0, 0,
	809, 755, 0, 0, 0, 261, 262, 263, 215, 828,
	793, 829, 781, 815, 830, 0, 267, 783, 782, 270,
	271, 272, 756, 808, 831, 832, 221, 0, 273, 813,
	0, 798, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 288, 801, 799, 800, 805, 803, 802, 804,
	289, 290, 493, 291, 816, 293, 833, 834, 741, 294,
	0, 295, 0, 296, 1830, 0, 817, 298, 0, 299,
	300, 0, 0, 0, 746, 304, 301, 302, 305, 308,
	303, 309, 310, 835, 836, 768, 857, 0, 0, 0,
	0, 0, 311, 312, 837, 818, 819, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 838, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 810, 812, 860,
	0, 792, 0, 0, 0, 0, 325, 327, 334, 0,
	859, 328, 839, 796, 820, 821, 822, 823, 840, 0,
	797, 0, 335, 861, 862, 336, 337, 338, 863, 824,
	825, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	841, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 743, 742, 352, 353, 355, 785, 354,
	866, 357, 358, 360, 359, 738, 0, 867, 769, 811,
	361, 842, 362, 363, 0, 794, 795, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 843, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 844, 378,
	242, 379, 0, 380, 381, 382, 383, 384, 845, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 747, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 786, 787, 788, 789, 416,
	422, 423, 806, 424, 405, 406, 425, 871, 426, 846,
	790, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	826, 433, 434, 435, 847, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 784, 448, 0,
	848, 849, 850, 827, 0, 0, 450, 451, 851, 852,
	767, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 807, 461, 0, 791, 462, 463, 464, 252, 853,
	1828, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 739, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 735, 736, 1831,
	0, 0, 0, 0, 0, 0, 748, 1826, 0, 0,
	0, 723, 751, 773, 761, 762, 759, 760, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 171, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 173, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 1144, 853, 0,
	0, 465, 254, 0, 0, 0, 165, 466, 467, 255,
	468, 469, 470, 739, 166, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 773, 761,
	762, 759, 760, 752, 0, 1356, 0, 0, 0, 0,
	0, 751, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 171, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 173, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 1144, 853, 0, 0, 465, 254, 0, 0,
	0, 165, 466, 467, 255, 468, 469, 470, 739, 166,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 773, 761, 762, 759, 760, 752, 0,
	1356, 0, 0, 0, 0, 0, 751, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 1901, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 1906, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 1902, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 1903, 450, 451, 851, 852, 767,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 773, 761,
	762, 759, 760, 752, 0, 748, 0, 0, 0, 0,
	0, 751, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	2654, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 739, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 1419, 773, 761, 762, 759, 760, 752,
	748, 0, 0, 0, 0, 0, 751, 0, 0, 0,
	256, 257, 258, 259, 0, 260, 0, 0, 0, 0,
	809, 755, 0, 0, 0, 261, 262, 263, 215, 828,
	793, 829, 781, 815, 830, 0, 267, 783, 782, 270,
	271, 272, 756, 808, 831, 832, 221, 0, 273, 813,
	0, 798, 0, 274, 275, 276, 277, 278, 0, 280,
	281, 282, 279, 0, 283, 0, 284, 285, 0, 856,
	286, 287, 288, 801, 799, 800, 805, 803, 802, 804,
	289, 290, 493, 291, 816, 293, 833, 834, 741, 294,
	0, 295, 0, 296, 0, 0, 817, 298, 0, 299,
	300, 0, 0, 0, 746, 304, 301, 302, 305, 308,
	303, 309, 310, 835, 836, 768, 857, 0, 0, 0,
	0, 0, 311, 312, 837, 818, 819, 0, 315, 0,
	316, 0, 0, 858, 317, 0, 318, 838, 0, 230,
	0, 319, 320, 321, 322, 323, 324, 810, 812, 860,
	0, 792, 0, 0, 0, 1730, 325, 327, 334, 0,
	859, 328, 839, 796, 820, 821, 822, 823, 840, 0,
	797, 0, 335, 861, 862, 336, 337, 338, 863, 824,
	825, 0, 0, 341, 342, 343, 0, 345, 344, 0,
	841, 864, 346, 347, 865, 0, 348, 349, 0, 0,
	350, 0, 351, 743, 742, 352, 353, 355, 785, 354,
	866, 357, 358, 360, 359, 738, 0, 867, 769, 811,
	361, 842, 362, 363, 0, 794, 795, 0, 0, 366,
	367, 0, 0, 368, 239, 868, 369, 869, 843, 370,
	371, 372, 373, 374, 375, 376, 0, 377, 844, 378,
	242, 379, 1729, 380, 381, 382, 383, 384, 845, 385,
	386, 0, 387, 388, 389, 390, 391, 0, 393, 394,
	392, 395, 396, 397, 398, 0, 399, 870, 400, 401,
	402, 403, 747, 404, 0, 408, 409, 410, 411, 412,
	413, 414, 0, 420, 421, 786, 787, 788, 789, 416,
	422, 423, 806, 424, 405, 406, 425, 871, 426, 846,
	790, 428, 0, 438, 429, 430, 431, 407, 432, 436,
	826, 433, 434, 435, 847, 0, 439, 440, 0, 441,
	442, 443, 444, 445, 306, 446, 307, 784, 448, 0,
	848, 849, 850, 827, 0, 0, 450, 451, 851, 852,
	767, 452, 453, 454, 455, 0, 0, 456, 457, 458,
	460, 807, 461, 0, 791, 462, 463, 464, 252, 853,
	0, 0, 465, 254, 0, 0, 0, 0, 466, 467,
	255, 468, 469, 470, 739, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 735, 736, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 731, 751, 773, 761, 762, 759, 760, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 733, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 773, 761,
	762, 759, 760, 752, 0, 748, 0, 0, 0, 0,
	0, 751, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 2490, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 739, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 773, 761, 762, 759, 760, 752, 0,
	748, 0, 0, 0, 0, 0, 751, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 733, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	2301, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 773, 761, 762,
	759, 760, 752, 0, 748, 0, 0, 0, 0, 0,
	751, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 1419, 773, 761, 762, 759, 760, 752, 748,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 809,
	755, 0, 0, 0, 261, 262, 263, 215, 828, 793,
	829, 781, 815, 830, 0, 267, 783, 782, 270, 271,
	272, 756, 808, 831, 832, 221, 0, 273, 813, 0,
	798, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 801, 799, 800, 805, 803, 802, 804, 289,
	290, 493, 291, 816, 293, 833, 834, 741, 294, 0,
	295, 0, 296, 0, 0, 817, 298, 0, 299, 300,
	0, 0, 0, 746, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 768, 857, 0, 0, 0, 0,
	0, 311, 312, 837, 818, 819, 0, 315, 0, 316,
	0, 1906, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 810, 812, 860, 0,
	792, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 839, 796, 820, 821, 822, 823, 840, 0, 797,
	0, 335, 861, 862, 336, 337, 338, 863, 824, 825,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 743, 742, 352, 353, 355, 785, 354, 866,
	357, 358, 360, 359, 738, 0, 867, 769, 811, 361,
	842, 362, 363, 0, 794, 795, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 845, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 747, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 786, 787, 788, 789, 416, 422,
	423, 806, 424, 405, 406, 425, 871, 426, 846, 790,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 826,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 784, 448, 0, 848,
	849, 850, 827, 0, 0, 450, 451, 851, 852, 767,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	807, 461, 0, 791, 462, 463, 464, 252, 853, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 739, 0, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 735, 736, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	1940, 751, 773, 761, 762, 759, 760, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 1893,
	751, 773, 761, 762, 759, 760, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 809, 755, 0,
	0, 0, 261, 262, 263, 215, 828, 793, 829, 781,
	815, 830, 0, 267, 783, 782, 270, 271, 272, 756,
	808, 831, 832, 221, 0, 273, 813, 0, 798, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	801, 799, 800, 805, 803, 802, 804, 289, 290, 493,
	291, 816, 293, 833, 834, 741, 294, 0, 295, 0,
	296, 0, 0, 817, 298, 0, 299, 300, 0, 0,
	0, 746, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 768, 857, 0, 0, 0, 0, 0, 311,
	312, 837, 818, 819, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 810, 812, 860, 0, 792, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 839,
	796, 820, 821, 822, 823, 840, 0, 797, 0, 335,
	861, 862, 336, 337, 338, 863, 824, 825, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	743, 742, 352, 353, 355, 785, 354, 866, 357, 358,
	360, 359, 738, 0, 867, 769, 811, 361, 842, 362,
	363, 0, 794, 795, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 845, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 747,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 786, 787, 788, 789, 416, 422, 423, 806,
	424, 405, 406, 425, 871, 426, 846, 790, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 826, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 784, 448, 0, 848, 849, 850,
	827, 0, 0, 450, 451, 851, 852, 767, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 807, 461,
	0, 791, 462, 463, 464, 252, 853, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 739, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 735, 736, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 1882, 751,
	773, 761, 762, 759, 760, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	0, 260, 0, 0, 0, 0, 809, 755, 0, 0,
	0, 261, 262, 263, 215, 828, 793, 829, 781, 815,
	830, 0, 267, 783, 782, 270, 271, 272, 756, 808,
	831, 832, 221, 0, 273, 813, 0, 798, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 856, 286, 287, 288, 801,
	799, 800, 805, 803, 802, 804, 289, 290, 493, 291,
	816, 293, 833, 834, 741, 294, 0, 295, 0, 296,
	0, 0, 817, 298, 0, 299, 300, 0, 0, 0,
	746, 304, 301, 302, 305, 308, 303, 309, 310, 835,
	836, 768, 857, 0, 0, 0, 0, 0, 311, 312,
	837, 818, 819, 0, 315, 0, 316, 0, 0, 858,
	317, 0, 318, 838, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 810, 812, 860, 0, 792, 0, 0,
	0, 0, 325, 327, 334, 0, 859, 328, 839, 796,
	820, 821, 822, 823, 840, 0, 797, 0, 335, 861,
	862, 336, 337, 338, 863, 824, 825, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 841, 864, 346, 347,
	865, 0, 348, 349, 0, 0, 350, 0, 351, 743,
	742, 352, 353, 355, 785, 354, 866, 357, 358, 360,
	359, 738, 0, 867, 769, 811, 361, 842, 362, 363,
	0, 794, 795, 0, 0, 366, 367, 0, 0, 368,
	239, 868, 369, 869, 843, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 844, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 845, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 870, 400, 401, 402, 403, 747, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 786, 787, 788, 789, 416, 422, 423, 806, 424,
	405, 406, 425, 871, 426, 846, 790, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 826, 433, 434, 435,
	847, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 784, 448, 0, 848, 849, 850, 827,
	0, 0, 450, 451, 851, 852, 767, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 807, 461, 0,
	791, 462, 463, 464, 252, 853, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	739, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 735, 736, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 1880, 751, 773,
	761, 762, 759, 760, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 809, 755, 0, 0, 0,
	261, 262, 263, 215, 828, 793, 829, 781, 815, 830,
	0, 267, 783, 782, 270, 271, 272, 756, 808, 831,
	832, 221, 0, 273, 813, 0, 798, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 801, 799,
	800, 805, 803, 802, 804, 289, 290, 493, 291, 816,
	293, 833, 834, 741, 294, 0, 295, 0, 296, 0,
	0, 817, 298, 0, 299, 300, 0, 0, 0, 746,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	768, 857, 0, 0, 0, 0, 0, 311, 312, 837,
	818, 819, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 810, 812, 860, 0, 792, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 839, 796, 820,
	821, 822, 823, 840, 0, 797, 0, 335, 861, 862,
	336, 337, 338, 863, 824, 825, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 743, 742,
	352, 353, 355, 785, 354, 866, 357, 358, 360, 359,
	738, 0, 867, 769, 811, 361, 842, 362, 363, 0,
	794, 795, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 845, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 747, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	786, 787, 788, 789, 416, 422, 423, 806, 424, 405,
	406, 425, 871, 426, 846, 790, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 826, 433, 434, 435, 847,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 784, 448, 0, 848, 849, 850, 827, 0,
	0, 450, 451, 851, 852, 767, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 807, 461, 0, 791,
	462, 463, 464, 252, 853, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 739,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 735, 736, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 1878, 751, 773, 761,
	762, 759, 760, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 810, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 739, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 1875, 751, 1867, 761, 762,
	759, 760, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 1870, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 1871, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 1872, 1869,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 1873, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 1868, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 1864, 751, 1867, 761, 762, 759,
	760, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 0, 260, 0, 0,
	0, 0, 809, 755, 0, 0, 0, 261, 262, 263,
	215, 828, 793, 829, 781, 815, 830, 0, 267, 783,
	782, 270, 271, 272, 756, 808, 831, 832, 221, 0,
	273, 813, 0, 798, 0, 274, 275, 276, 277, 278,
	0, 280, 281, 282, 279, 0, 283, 0, 284, 285,
	0, 856, 286, 287, 288, 801, 799, 800, 805, 803,
	802, 804, 289, 290, 493, 291, 816, 1870, 833, 834,
	741, 294, 0, 295, 0, 296, 0, 0, 817, 298,
	0, 299, 300, 0, 0, 0, 746, 304, 301, 302,
	305, 308, 303, 309, 310, 835, 836, 768, 857, 0,
	0, 0, 0, 0, 311, 312, 837, 818, 819, 0,
	315, 0, 316, 0, 0, 858, 317, 0, 318, 838,
	0, 230, 0, 319, 320, 1871, 322, 323, 324, 810,
	812, 860, 0, 792, 0, 0, 0, 0, 325, 327,
	334, 0, 859, 328, 839, 796, 820, 821, 822, 823,
	840, 0, 797, 0, 335, 861, 862, 336, 337, 338,
	863, 824, 825, 0, 0, 341, 342, 343, 0, 345,
	344, 0, 841, 864, 346, 347, 865, 0, 348, 349,
	0, 0, 350, 0, 351, 743, 742, 1872, 1869, 355,
	785, 354, 866, 357, 358, 360, 359, 738, 0, 867,
	769, 811, 361, 842, 362, 363, 0, 794, 795, 0,
	0, 366, 367, 0, 0, 368, 239, 868, 369, 869,
	843, 370, 371, 372, 373, 374, 375, 376, 0, 377,
	844, 378, 242, 379, 0, 380, 381, 382, 383, 384,
	845, 385, 386, 0, 387, 388, 389, 390, 391, 0,
	393, 394, 392, 395, 396, 397, 398, 0, 399, 870,
	400, 401, 402, 403, 747, 404, 0, 408, 409, 410,
	411, 412, 413, 1873, 0, 420, 421, 786, 787, 788,
	789, 416, 422, 423, 806, 424, 405, 406, 425, 871,
	426, 846, 790, 428, 0, 438, 429, 430, 431, 407,
	432, 436, 826, 433, 434, 435, 847, 0, 439, 440,
	0, 441, 442, 443, 444, 445, 306, 446, 307, 784,
	448, 0, 848, 849, 850, 827, 0, 0, 450, 451,
	851, 852, 767, 452, 453, 454, 455, 0, 0, 456,
	457, 458, 460, 807, 461, 0, 791, 462, 463, 464,
	252, 853, 0, 0, 465, 254, 0, 0, 0, 0,
	466, 467, 255, 468, 1868, 470, 739, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 735,
	736, 773, 761, 762, 759, 760, 752, 0, 748, 0,
	0, 0, 0, 0, 751, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 809, 755, 0,
	0, 0, 261, 262, 263, 215, 828, 793, 829, 781,
	815, 830, 0, 267, 783, 782, 270, 271, 272, 756,
	808, 831, 832, 221, 0, 273, 813, 0, 798, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	801, 799, 800, 805, 803, 802, 804, 289, 290, 493,
	291, 816, 293, 833, 834, 741, 294, 0, 295, 0,
	296, 0, 0, 817, 298, 0, 299, 300, 0, 0,
	0, 746, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 768, 857, 0, 0, 0, 0, 0, 311,
	312, 837, 818, 819, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 810, 812, 860, 0, 792, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 839,
	796, 820, 821, 822, 823, 840, 0, 797, 0, 335,
	861, 862, 336, 337, 338, 863, 824, 825, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	743, 742, 352, 353, 355, 785, 354, 866, 357, 358,
	360, 359, 738, 0, 867, 769, 811, 361, 842, 362,
	363, 0, 794, 795, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 845, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 747,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 786, 787, 788, 789, 416, 422, 423, 806,
	424, 405, 406, 425, 871, 426, 846, 790, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 826, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 784, 448, 0, 848, 849, 850,
	827, 0, 0, 450, 451, 851, 852, 767, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 807, 461,
	0, 791, 462, 463, 464, 252, 853, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 739, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 0, 0, 735, 736, 0, 0, 0, 0,
	0, 1361, 0, 748, 0, 0, 0, 0, 0, 751,
	773, 761, 762, 759, 760, 752, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	1717, 260, 0, 0, 0, 0, 809, 755, 0, 0,
	0, 261, 262, 263, 215, 828, 793, 829, 781, 815,
	830, 0, 267, 783, 782, 270, 271, 272, 756, 808,
	831, 832, 221, 0, 273, 813, 0, 798, 0, 274,
	275, 276, 277, 278, 0, 280, 281, 282, 279, 0,
	283, 0, 284, 285, 0, 856, 286, 287, 288, 801,
	799, 800, 805, 803, 802, 804, 289, 290, 493, 291,
	816, 293, 833, 834, 741, 294, 0, 295, 0, 296,
	0, 0, 817, 298, 0, 299, 300, 0, 0, 0,
	746, 304, 301, 302, 305, 308, 303, 309, 310, 835,
	836, 768, 857, 0, 0, 0, 0, 0, 311, 312,
	837, 818, 819, 0, 315, 0, 316, 0, 0, 858,
	317, 0, 318, 838, 0, 230, 0, 319, 320, 321,
	322, 323, 324, 810, 812, 860, 0, 792, 0, 0,
	0, 0, 325, 327, 334, 0, 859, 328, 839, 796,
	820, 821, 822, 823, 840, 0, 797, 0, 335, 861,
	862, 336, 337, 338, 863, 824, 825, 0, 0, 341,
	342, 343, 0, 345, 344, 0, 841, 864, 346, 347,
	865, 0, 348, 349, 0, 0, 350, 0, 351, 743,
	742, 352, 353, 355, 785, 354, 866, 357, 358, 360,
	359, 738, 0, 867, 769, 811, 361, 842, 362, 363,
	0, 794, 795, 0, 0, 366, 367, 0, 0, 368,
	239, 868, 369, 869, 843, 370, 371, 372, 373, 374,
	375, 376, 0, 377, 844, 378, 242, 379, 0, 380,
	381, 382, 383, 384, 845, 385, 386, 0, 387, 388,
	389, 390, 391, 0, 393, 394, 392, 395, 396, 397,
	398, 0, 399, 870, 400, 401, 402, 403, 747, 404,
	0, 408, 409, 410, 411, 412, 413, 414, 0, 420,
	421, 786, 787, 788, 789, 416, 422, 423, 806, 424,
	405, 406, 425, 871, 426, 846, 790, 428, 0, 438,
	429, 430, 431, 407, 432, 436, 826, 433, 434, 435,
	847, 0, 439, 440, 0, 441, 442, 443, 444, 445,
	306, 446, 307, 784, 448, 0, 848, 849, 850, 827,
	0, 0, 450, 451, 851, 852, 767, 452, 453, 454,
	455, 0, 0, 456, 457, 458, 460, 807, 461, 0,
	791, 462, 463, 464, 252, 853, 0, 0, 465, 254,
	0, 0, 0, 0, 466, 467, 255, 468, 469, 470,
	739, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 735, 736, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 1069, 751, 773,
	761, 762, 759, 760, 752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 809, 755, 0, 0, 0,
	261, 262, 263, 215, 828, 793, 829, 781, 815, 830,
	0, 267, 783, 782, 270, 271, 272, 756, 808, 831,
	832, 221, 0, 273, 813, 0, 798, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 801, 799,
	800, 805, 803, 802, 804, 289, 290, 493, 291, 816,
	293, 833, 834, 741, 294, 0, 295, 0, 296, 0,
	0, 817, 298, 0, 299, 300, 0, 0, 0, 746,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	768, 857, 0, 0, 0, 0, 0, 311, 312, 837,
	818, 819, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1068, 812, 860, 0, 792, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 839, 796, 820,
	821, 822, 823, 840, 0, 797, 0, 335, 861, 862,
	336, 337, 338, 863, 824, 825, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 743, 742,
	352, 353, 355, 785, 354, 866, 357, 358, 360, 359,
	738, 0, 867, 769, 811, 361, 842, 362, 363, 0,
	794, 795, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 845, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 747, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	786, 787, 788, 789, 416, 422, 423, 806, 424, 405,
	406, 425, 871, 426, 846, 790, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 826, 433, 434, 435, 847,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 784, 448, 0, 848, 849, 850, 827, 0,
	0, 450, 451, 851, 852, 767, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 807, 461, 0, 791,
	462, 463, 464, 252, 853, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 739,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 735, 736, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 1063, 751, 773, 761,
	762, 759, 760, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 0, 260,
	0, 0, 0, 0, 809, 755, 0, 0, 0, 261,
	262, 263, 215, 828, 793, 829, 781, 815, 830, 0,
	267, 783, 782, 270, 271, 272, 756, 808, 831, 832,
	221, 0, 273, 813, 0, 798, 0, 274, 275, 276,
	277, 278, 0, 280, 281, 282, 279, 0, 283, 0,
	284, 285, 0, 856, 286, 287, 288, 801, 799, 800,
	805, 803, 802, 804, 289, 290, 493, 291, 816, 293,
	833, 834, 741, 294, 0, 295, 0, 296, 0, 0,
	817, 298, 0, 299, 300, 0, 0, 0, 746, 304,
	301, 302, 305, 308, 303, 309, 310, 835, 836, 768,
	857, 0, 0, 0, 0, 0, 311, 312, 837, 818,
	819, 0, 315, 0, 316, 0, 0, 858, 317, 0,
	318, 838, 0, 230, 0, 319, 320, 321, 322, 323,
	324, 1062, 812, 860, 0, 792, 0, 0, 0, 0,
	325, 327, 334, 0, 859, 328, 839, 796, 820, 821,
	822, 823, 840, 0, 797, 0, 335, 861, 862, 336,
	337, 338, 863, 824, 825, 0, 0, 341, 342, 343,
	0, 345, 344, 0, 841, 864, 346, 347, 865, 0,
	348, 349, 0, 0, 350, 0, 351, 743, 742, 352,
	353, 355, 785, 354, 866, 357, 358, 360, 359, 738,
	0, 867, 769, 811, 361, 842, 362, 363, 0, 794,
	795, 0, 0, 366, 367, 0, 0, 368, 239, 868,
	369, 869, 843, 370, 371, 372, 373, 374, 375, 376,
	0, 377, 844, 378, 242, 379, 0, 380, 381, 382,
	383, 384, 845, 385, 386, 0, 387, 388, 389, 390,
	391, 0, 393, 394, 392, 395, 396, 397, 398, 0,
	399, 870, 400, 401, 402, 403, 747, 404, 0, 408,
	409, 410, 411, 412, 413, 414, 0, 420, 421, 786,
	787, 788, 789, 416, 422, 423, 806, 424, 405, 406,
	425, 871, 426, 846, 790, 428, 0, 438, 429, 430,
	431, 407, 432, 436, 826, 433, 434, 435, 847, 0,
	439, 440, 0, 441, 442, 443, 444, 445, 306, 446,
	307, 784, 448, 0, 848, 849, 850, 827, 0, 0,
	450, 451, 851, 852, 767, 452, 453, 454, 455, 0,
	0, 456, 457, 458, 460, 807, 461, 0, 791, 462,
	463, 464, 252, 853, 0, 0, 465, 254, 0, 0,
	0, 0, 466, 467, 255, 468, 469, 470, 739, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 735, 736, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 1058, 751, 773, 761, 762,
	759, 760, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 773, 761, 762, 759, 760, 752, 0, 748,
	0, 0, 0, 0, 0, 751, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 215, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	288, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 454, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 773, 761, 762,
	759, 760, 752, 0, 748, 0, 0, 0, 0, 0,
	751, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 3035, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 3034, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 739, 0, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	735, 736, 773, 761, 762, 759, 760, 752, 0, 748,
	0, 0, 0, 0, 0, 751, 0, 0, 256, 257,
	258, 259, 0, 260, 0, 0, 0, 0, 809, 755,
	0, 0, 0, 261, 262, 263, 3033, 828, 793, 829,
	781, 815, 830, 0, 267, 783, 782, 270, 271, 272,
	756, 808, 831, 832, 221, 0, 273, 813, 0, 798,
	0, 274, 275, 276, 277, 278, 0, 280, 281, 282,
	279, 0, 283, 0, 284, 285, 0, 856, 286, 287,
	3035, 801, 799, 800, 805, 803, 802, 804, 289, 290,
	493, 291, 816, 293, 833, 834, 741, 294, 0, 295,
	0, 296, 0, 0, 817, 298, 0, 299, 300, 0,
	0, 0, 746, 304, 301, 302, 305, 308, 303, 309,
	310, 835, 836, 768, 857, 0, 0, 0, 0, 0,
	311, 312, 837, 818, 819, 0, 315, 0, 316, 0,
	0, 858, 317, 0, 318, 838, 0, 230, 0, 319,
	320, 321, 322, 323, 324, 810, 812, 860, 0, 792,
	0, 0, 0, 0, 325, 327, 334, 0, 859, 328,
	839, 796, 820, 821, 822, 823, 840, 0, 797, 0,
	335, 861, 862, 336, 337, 338, 863, 824, 825, 0,
	0, 341, 342, 343, 0, 345, 344, 0, 841, 864,
	346, 347, 865, 0, 348, 349, 0, 0, 350, 0,
	351, 743, 742, 352, 353, 355, 785, 354, 866, 357,
	358, 360, 359, 738, 0, 867, 769, 811, 361, 842,
	362, 363, 0, 794, 795, 0, 0, 366, 367, 0,
	0, 368, 239, 868, 369, 869, 843, 370, 371, 372,
	373, 374, 375, 376, 0, 377, 844, 378, 242, 379,
	0, 380, 381, 382, 383, 384, 845, 385, 386, 0,
	387, 388, 389, 390, 391, 0, 393, 394, 392, 395,
	396, 397, 398, 0, 399, 870, 400, 401, 402, 403,
	747, 404, 0, 408, 409, 410, 411, 412, 413, 414,
	0, 420, 421, 786, 787, 788, 789, 416, 422, 423,
	806, 424, 405, 406, 425, 871, 426, 846, 790, 428,
	0, 438, 429, 430, 431, 407, 432, 436, 826, 433,
	434, 435, 847, 0, 439, 440, 0, 441, 442, 443,
	444, 445, 306, 446, 307, 784, 448, 0, 848, 849,
	850, 827, 0, 0, 450, 451, 851, 852, 767, 452,
	453, 3034, 455, 0, 0, 456, 457, 458, 460, 807,
	461, 0, 791, 462, 463, 464, 252, 853, 0, 0,
	465, 254, 0, 0, 0, 0, 466, 467, 255, 468,
	469, 470, 739, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 735, 736, 773, 761, 762,
	759, 760, 752, 0, 748, 0, 0, 0, 0, 0,
	751, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 809, 755, 0, 0, 0, 261, 262,
	263, 215, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 0, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 860, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 861, 862, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 927, 926, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 0, 0,
	867, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	871, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 773, 761, 762,
	759, 760, 752, 0, 0, 1890, 0, 0, 0, 0,
	1888, 1889, 0, 256, 257, 258, 259, 0, 260, 748,
	0, 0, 0, 809, 755, 751, 0, 0, 261, 262,
	263, 0, 828, 793, 829, 781, 815, 830, 0, 267,
	783, 782, 270, 271, 272, 756, 808, 831, 832, 221,
	0, 273, 813, 0, 798, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 3035, 801, 799, 800, 805,
	803, 802, 804, 289, 290, 493, 291, 816, 293, 833,
	834, 741, 294, 0, 295, 0, 296, 0, 0, 817,
	298, 0, 299, 300, 0, 0, 0, 746, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 768, 857,
	0, 0, 0, 0, 0, 311, 312, 837, 818, 819,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	810, 812, 0, 0, 792, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 839, 796, 820, 821, 822,
	823, 840, 0, 797, 0, 335, 0, 0, 336, 337,
	338, 863, 824, 825, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 841, 864, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 743, 742, 352, 353,
	355, 785, 354, 866, 357, 358, 360, 359, 738, 0,
	0, 769, 811, 361, 842, 362, 363, 0, 794, 795,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 845, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 747, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 786, 787,
	788, 789, 416, 422, 423, 806, 424, 405, 406, 425,
	0, 426, 846, 790, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 826, 433, 434, 435, 847, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	784, 448, 0, 848, 849, 850, 827, 0, 0, 450,
	451, 851, 852, 767, 452, 453, 3034, 455, 0, 0,
	456, 457, 458, 460, 807, 461, 0, 791, 462, 463,
	464, 252, 853, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 723, 0, 923, 0, 0, 0, 0,
	735, 736, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 256, 257, 258, 259, 751, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 918, 919, 0, 921, 920,
	922, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 835, 836, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 838, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 910, 345, 344,
	0, 841, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 916,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 843,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 844,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 171, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 847, 0, 439, 440, 173,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 851,
	852, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 1144,
	253, 0, 0, 465, 254, 0, 0, 923, 165, 466,
	467, 255, 468, 469, 470, 0, 166, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 907, 0, 1447, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 925, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 0, 918, 919, 0,
	921, 920, 922, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 835, 836, 0, 857,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	838, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 860, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 910,
	345, 344, 0, 841, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 0, 0,
	867, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 916, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 843, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 844, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 171, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 847, 0, 439,
	440, 173, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 851, 852, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 1144, 253, 0, 0, 465, 254, 2273, 0, 923,
	165, 466, 467, 255, 468, 469, 470, 0, 166, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 907, 0, 1447,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 925, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 0, 918,
	919, 0, 921, 920, 922, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 835, 836,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 838, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 860, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 910, 345, 344, 0, 841, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 916, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 843, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 844, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 847,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 851, 852, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 906,
	0, 923, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 907,
	0, 914, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 918, 919, 0, 921, 920, 922, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	835, 836, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 838, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 910, 345, 344, 0, 841, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 916, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 843, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 844, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 847, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 851, 852, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 923, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 907, 0, 914, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	925, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 0, 918, 919, 0, 921, 920, 922, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 835, 836, 0, 857, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 838, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 860, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 861, 862, 336, 337, 338, 863, 339, 340,
	0, 0, 341, 342, 343, 910, 345, 344, 0, 841,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 927, 926, 352, 353, 355, 356, 354, 866,
	357, 358, 360, 359, 0, 0, 867, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 916, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 843, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 844, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 871, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 847, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 851, 852, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 0, 0, 923, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 907, 0, 914, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 918, 919, 0, 921, 920,
	922, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 835, 836, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 838, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 841, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 843,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 844,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 847, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 851,
	852, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1141, 0, 948, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 1351, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 925, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 857,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 860, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 0, 0,
	867, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 171, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 173, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 1144, 253, 0, 0, 465, 254, 723, 0, 490,
	165, 466, 467, 255, 468, 469, 470, 0, 166, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 138,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 171, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 173, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 1144, 253, 0, 0, 465, 254, 0,
	0, 0, 165, 466, 467, 255, 468, 469, 470, 0,
	166, 773, 761, 762, 759, 760, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 138, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 828, 793, 829, 781,
	815, 830, 0, 267, 783, 782, 270, 271, 272, 0,
	0, 831, 832, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 816, 293, 833, 834, 0, 294, 0, 295, 0,
	296, 0, 0, 817, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 768, 857, 0, 0, 0, 0, 0, 311,
	312, 837, 818, 819, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 0, 792, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 839,
	796, 820, 821, 822, 823, 840, 0, 797, 0, 335,
	861, 862, 336, 337, 338, 863, 824, 825, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 785, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 769, 237, 361, 842, 362,
	363, 0, 794, 795, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 845, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 786, 787, 788, 789, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 846, 790, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 826, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 784, 448, 0, 848, 849, 850,
	827, 0, 0, 450, 451, 250, 251, 767, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 791, 462, 463, 464, 252, 853, 490, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 2074,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 2505, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 1217, 0, 948, 947, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 1451, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	925, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 857, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 860, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 861, 862, 336, 337, 338, 863, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 927, 926, 352, 353, 355, 356, 354, 866,
	357, 358, 360, 359, 0, 0, 867, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 871, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 1137, 0, 948, 947, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1136, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 1133, 0, 948, 947, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 925, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 856, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 857,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 858, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	1132, 232, 860, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 859, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 861, 862, 336, 337,
	338, 863, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 864, 346, 347, 865, 0, 348,
	349, 0, 0, 350, 0, 351, 927, 926, 352, 353,
	355, 356, 354, 866, 357, 358, 360, 359, 0, 0,
	867, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 868, 369,
	869, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	870, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	871, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 1094, 0, 948,
	947, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 925, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1093, 232, 860, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 1091,
	0, 948, 947, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1090, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 941, 0, 948, 947, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	925, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 856, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 857, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 858, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 943, 232, 860, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 859,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 861, 862, 336, 337, 338, 863, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	864, 346, 347, 865, 0, 348, 349, 0, 0, 350,
	0, 351, 927, 926, 352, 353, 355, 356, 354, 866,
	357, 358, 360, 359, 0, 0, 867, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 868, 369, 869, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 870, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 871, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 948,
	947, 465, 254, 0, 945, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 925, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 856, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 857, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 858, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 860, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 859, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 861, 862,
	336, 337, 338, 863, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 864, 346, 347, 865,
	0, 348, 349, 0, 0, 350, 0, 351, 927, 926,
	352, 353, 355, 356, 354, 866, 357, 358, 360, 359,
	0, 0, 867, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	868, 369, 869, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 870, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 871, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 948, 947, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 925, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	856, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 857, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 858, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	860, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 859, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 861, 862, 336, 337, 338, 863,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 864, 346, 347, 865, 0, 348, 349, 0,
	0, 350, 0, 351, 927, 926, 352, 353, 355, 356,
	354, 866, 357, 358, 360, 359, 0, 0, 867, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 868, 369, 869, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 870, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 871, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 948, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 925, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 856, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 857, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	858, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 860, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 859, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	861, 862, 336, 337, 338, 863, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 864, 346,
	347, 865, 0, 348, 349, 0, 0, 350, 0, 351,
	927, 926, 352, 353, 355, 356, 354, 866, 357, 358,
	360, 359, 0, 0, 867, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 868, 369, 869, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 870, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 871, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 591, 0, 207, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 213, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 212, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 206, 0, 207, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 473, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 213, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 212,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 207, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	473, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 213,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 1686, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 212, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 207, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 473, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 213, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 212, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 490, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 473, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 473, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 1967, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 1964, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 2044, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 1970, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	2042, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 2041, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 1969, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 2043, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 1967, 273,
	222, 0, 0, 1961, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 1964, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 1970, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1960, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 1969, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 1968, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 598, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 597, 577, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 580, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 581, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 582, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 576, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 577,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 580, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	581, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 582, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 580,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 581, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 582, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1112, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 916, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 936, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 938, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 916, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 933,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 935, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 916, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 929, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 931, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 916, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 513, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 512, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 511, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 1947,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 490, 2429, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 490, 2429, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 2426,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 916, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1706,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1704, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1702, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 1679, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1639, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1637, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 624, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 1190,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 625, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	621, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 620, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1535, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1534, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 624,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 1190, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 625, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 621, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 620, 248, 249,
	449, 0, 0, 450, 1191, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 624, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 614, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 625, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 621, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 1162,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 620,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1130, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1129, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1126, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	1125, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1123, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1122, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1120,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1119, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1116, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 1115, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 1104,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 1102,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 1101, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 1096, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 1087, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1086, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 1082, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 1078, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 1080, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 955,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 957, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 952, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 0,
	0, 465, 254, 624, 0, 490, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 614,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 231, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 613, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	625, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 615, 404, 0, 408, 409, 621, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 616, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 620, 248, 249, 449, 0, 0, 450, 618, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 0, 0, 465, 254, 604, 0, 490, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 605, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 600, 0, 490,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 0, 0, 465, 254, 589,
	0, 490, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 0, 0, 465,
	254, 535, 0, 490, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 408, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 424, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 2330, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 2328, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 385, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 490, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	2317, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 373, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 383,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 404, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 490, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 0, 0, 256,
	257, 258, 259, 0, 260, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 261, 262, 263, 215, 216, 264,
	217, 265, 266, 218, 0, 267, 268, 269, 270, 271,
	272, 0, 0, 219, 220, 221, 0, 273, 222, 0,
	0, 0, 274, 275, 276, 277, 278, 0, 280, 281,
	282, 279, 0, 283, 0, 284, 285, 0, 0, 286,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 289,
	290, 493, 291, 292, 293, 223, 224, 0, 294, 0,
	295, 0, 296, 0, 0, 297, 298, 0, 299, 300,
	0, 0, 0, 225, 304, 301, 302, 305, 308, 303,
	309, 310, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 311, 312, 228, 313, 314, 0, 315, 0, 316,
	0, 0, 0, 317, 0, 318, 229, 0, 230, 0,
	319, 320, 321, 322, 323, 324, 231, 232, 0, 0,
	326, 0, 0, 0, 0, 325, 327, 334, 0, 0,
	328, 233, 330, 329, 331, 332, 333, 234, 0, 235,
	0, 335, 0, 0, 336, 337, 338, 0, 339, 340,
	0, 0, 341, 342, 343, 0, 345, 344, 0, 236,
	0, 346, 347, 0, 0, 348, 349, 0, 0, 350,
	0, 351, 0, 0, 352, 353, 355, 356, 354, 0,
	357, 358, 360, 359, 0, 0, 0, 0, 237, 361,
	238, 362, 363, 0, 364, 365, 0, 0, 366, 367,
	0, 0, 368, 239, 0, 369, 0, 240, 370, 371,
	372, 373, 374, 375, 376, 0, 377, 241, 378, 242,
	379, 0, 380, 381, 382, 383, 384, 243, 385, 386,
	0, 387, 388, 389, 390, 391, 0, 393, 394, 392,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 244, 404, 0, 605, 409, 410, 411, 412, 413,
	414, 0, 420, 421, 415, 417, 418, 419, 416, 422,
	423, 0, 424, 405, 406, 425, 0, 426, 245, 427,
	428, 0, 438, 429, 430, 431, 407, 432, 436, 437,
	433, 434, 435, 246, 0, 439, 440, 0, 441, 442,
	443, 444, 445, 306, 446, 307, 447, 448, 0, 247,
	248, 249, 449, 0, 0, 450, 451, 250, 251, 0,
	452, 453, 454, 455, 0, 0, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 252, 253, 490,
	0, 465, 254, 0, 0, 0, 0, 466, 467, 255,
	468, 469, 470, 0, 0, 256, 257, 258, 259, 0,
	260, 0, 0, 0, 0, 214, 0, 1548, 0, 0,
	261, 262, 263, 215, 216, 264, 217, 265, 266, 218,
	0, 267, 268, 269, 270, 271, 272, 0, 0, 219,
	220, 221, 0, 273, 222, 0, 0, 0, 274, 275,
	276, 277, 278, 0, 280, 281, 282, 279, 0, 283,
	0, 284, 285, 0, 0, 286, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 289, 290, 493, 291, 292,
	293, 223, 224, 0, 294, 0, 295, 0, 296, 0,
	0, 297, 298, 0, 299, 300, 0, 0, 0, 225,
	304, 301, 302, 305, 308, 303, 309, 310, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 311, 312, 228,
	313, 314, 0, 315, 0, 316, 0, 0, 0, 317,
	0, 318, 229, 0, 230, 0, 319, 320, 321, 322,
	323, 324, 231, 232, 0, 0, 326, 0, 0, 0,
	0, 325, 327, 334, 0, 0, 328, 233, 330, 329,
	331, 332, 333, 234, 0, 235, 0, 335, 0, 0,
	336, 337, 338, 0, 339, 340, 0, 0, 341, 342,
	343, 0, 345, 344, 0, 236, 0, 346, 347, 0,
	0, 348, 349, 0, 0, 350, 0, 351, 0, 0,
	352, 353, 355, 356, 354, 0, 357, 358, 360, 359,
	0, 0, 0, 0, 237, 361, 238, 362, 363, 0,
	364, 365, 0, 0, 366, 367, 0, 0, 368, 239,
	0, 369, 0, 240, 370, 371, 372, 373, 374, 375,
	376, 0, 377, 241, 378, 242, 379, 0, 380, 381,
	382, 383, 384, 243, 385, 386, 0, 387, 388, 389,
	390, 391, 0, 393, 394, 392, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 244, 404, 0,
	408, 409, 410, 411, 412, 413, 414, 0, 420, 421,
	415, 417, 418, 419, 416, 422, 423, 0, 0, 405,
	406, 425, 0, 426, 245, 427, 428, 0, 438, 429,
	430, 431, 407, 432, 436, 437, 433, 434, 435, 246,
	0, 439, 440, 0, 441, 442, 443, 444, 445, 306,
	446, 307, 447, 448, 0, 247, 248, 249, 449, 0,
	0, 450, 451, 250, 251, 0, 452, 453, 454, 455,
	0, 0, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 252, 253, 490, 0, 465, 254, 0,
	0, 0, 0, 466, 467, 255, 468, 469, 470, 0,
	0, 256, 257, 258, 259, 0, 260, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 261, 262, 263, 215,
	216, 264, 217, 265, 266, 218, 0, 267, 268, 269,
	270, 271, 272, 0, 0, 219, 220, 221, 0, 273,
	222, 0, 0, 0, 274, 275, 276, 277, 278, 0,
	280, 281, 282, 279, 0, 283, 0, 284, 285, 0,
	0, 286, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 289, 290, 493, 291, 292, 293, 223, 224, 0,
	294, 0, 295, 0, 296, 0, 0, 297, 298, 0,
	299, 300, 0, 0, 0, 225, 304, 301, 302, 305,
	308, 303, 309, 310, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 311, 312, 228, 313, 314, 0, 315,
	0, 316, 0, 0, 0, 317, 0, 318, 229, 0,
	230, 0, 319, 320, 321, 322, 323, 324, 1539, 232,
	0, 0, 326, 0, 0, 0, 0, 325, 327, 334,
	0, 0, 328, 233, 330, 329, 331, 332, 333, 234,
	0, 235, 0, 335, 0, 0, 336, 337, 338, 0,
	339, 340, 0, 0, 341, 342, 343, 0, 345, 344,
	0, 236, 0, 346, 347, 0, 0, 348, 349, 0,
	0, 350, 0, 351, 0, 0, 352, 353, 355, 356,
	354, 0, 357, 358, 360, 359, 0, 0, 0, 0,
	237, 361, 238, 362, 363, 0, 364, 365, 0, 0,
	366, 367, 0, 0, 368, 239, 0, 369, 0, 240,
	370, 371, 372, 373, 374, 375, 376, 0, 377, 241,
	378, 242, 379, 0, 380, 381, 382, 383, 384, 243,
	385, 386, 0, 387, 388, 389, 390, 391, 0, 393,
	394, 392, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 244, 404, 0, 408, 409, 410, 411,
	412, 413, 414, 0, 420, 421, 415, 417, 418, 419,
	416, 422, 423, 0, 424, 405, 406, 425, 0, 426,
	245, 427, 428, 0, 438, 429, 430, 431, 407, 432,
	436, 437, 433, 434, 435, 246, 0, 439, 440, 0,
	441, 442, 443, 444, 445, 306, 446, 307, 447, 448,
	0, 247, 248, 249, 449, 0, 0, 450, 451, 250,
	251, 0, 452, 453, 454, 455, 0, 0, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 252,
	253, 490, 0, 465, 254, 0, 0, 0, 0, 466,
	467, 255, 468, 469, 470, 0, 0, 256, 257, 258,
	259, 0, 260, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 261, 262, 263, 215, 216, 264, 217, 265,
	266, 218, 0, 267, 268, 269, 270, 271, 272, 0,
	0, 219, 220, 221, 0, 273, 222, 0, 0, 0,
	274, 275, 276, 277, 278, 0, 280, 281, 282, 279,
	0, 283, 0, 284, 285, 0, 0, 286, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 289, 290, 493,
	291, 292, 293, 223, 224, 0, 294, 0, 295, 0,
	296, 0, 0, 297, 298, 0, 299, 300, 0, 0,
	0, 225, 304, 301, 302, 305, 308, 303, 309, 310,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 311,
	312, 228, 313, 314, 0, 315, 0, 316, 0, 0,
	0, 317, 0, 318, 229, 0, 230, 0, 319, 320,
	321, 322, 323, 324, 231, 232, 0, 0, 326, 0,
	0, 0, 0, 325, 327, 334, 0, 0, 328, 233,
	330, 329, 331, 332, 333, 234, 0, 235, 0, 335,
	0, 0, 336, 337, 338, 0, 339, 340, 0, 0,
	341, 342, 343, 0, 345, 344, 0, 236, 0, 346,
	347, 0, 0, 348, 349, 0, 0, 350, 0, 351,
	0, 0, 352, 353, 355, 356, 354, 0, 357, 358,
	360, 359, 0, 0, 0, 0, 237, 361, 238, 362,
	363, 0, 364, 365, 0, 0, 366, 367, 0, 0,
	368, 239, 0, 369, 0, 240, 370, 371, 372, 373,
	374, 375, 376, 0, 377, 241, 378, 242, 379, 0,
	380, 381, 382, 383, 384, 243, 889, 386, 0, 387,
	388, 389, 390, 391, 0, 393, 394, 392, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 244,
	404, 0, 408, 409, 410, 411, 412, 413, 414, 0,
	420, 421, 415, 417, 418, 419, 416, 422, 423, 0,
	424, 405, 406, 425, 0, 426, 245, 427, 428, 0,
	438, 429, 430, 431, 407, 432, 436, 437, 433, 434,
	435, 246, 0, 439, 440, 0, 441, 442, 443, 444,
	445, 306, 446, 307, 447, 448, 0, 247, 248, 249,
	449, 0, 0, 450, 451, 250, 251, 0, 452, 453,
	454, 455, 0, 0, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 252, 253, 490, 0, 465,
	254, 0, 0, 0, 0, 466, 467, 255, 468, 469,
	470, 0, 0, 256, 257, 258, 259, 0, 260, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 261, 262,
	263, 215, 216, 264, 217, 265, 266, 218, 0, 267,
	268, 269, 270, 271, 272, 0, 0, 219, 220, 221,
	0, 273, 222, 0, 0, 0, 274, 275, 276, 277,
	278, 0, 280, 281, 282, 279, 0, 283, 0, 284,
	285, 0, 0, 286, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 289, 290, 493, 291, 292, 293, 223,
	224, 0, 294, 0, 295, 0, 296, 0, 0, 297,
	298, 0, 299, 300, 0, 0, 0, 225, 304, 301,
	302, 305, 308, 303, 309, 310, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 311, 312, 228, 313, 314,
	0, 315, 0, 316, 0, 0, 0, 317, 0, 318,
	229, 0, 230, 0, 319, 320, 321, 322, 323, 324,
	231, 232, 0, 0, 326, 0, 0, 0, 0, 325,
	327, 334, 0, 0, 328, 233, 330, 329, 331, 332,
	333, 234, 0, 235, 0, 335, 0, 0, 336, 337,
	338, 0, 339, 340, 0, 0, 341, 342, 343, 0,
	345, 344, 0, 236, 0, 346, 347, 0, 0, 348,
	349, 0, 0, 350, 0, 351, 0, 0, 352, 353,
	355, 356, 354, 0, 357, 358, 360, 359, 0, 0,
	0, 0, 237, 361, 238, 362, 363, 0, 364, 365,
	0, 0, 366, 367, 0, 0, 368, 239, 0, 369,
	0, 240, 370, 371, 372, 0, 374, 375, 376, 0,
	377, 241, 378, 242, 379, 0, 380, 381, 382, 0,
	384, 243, 385, 386, 0, 387, 388, 389, 390, 391,
	0, 393, 394, 392, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 244, 0, 0, 408, 409,
	410, 411, 412, 413, 414, 0, 420, 421, 415, 417,
	418, 419, 416, 422, 423, 0, 424, 405, 406, 425,
	0, 426, 245, 427, 428, 0, 438, 429, 430, 431,
	407, 432, 436, 437, 433, 434, 435, 246, 0, 439,
	440, 0, 441, 442, 443, 444, 445, 306, 446, 307,
	447, 448, 0, 247, 248, 249, 449, 0, 0, 450,
	451, 250, 251, 0, 452, 453, 454, 455, 0, 0,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 252, 253, 0, 0, 465, 254, 0, 0, 0,
	0, 466, 467, 255, 468, 469, 470, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 1324, 0, 1310, 0, 0, 0, 0,
	1291, 0, 1307, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1328, 1338, 0, 1318,
	1319, 1320, 0, 1313, 1314, 1315, 1316, 0, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	0, 1326, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 1336, 0, 1305, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 1291, 0, 0, 1337,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 1290, 0, 0, 0, 0, 0, 0, 2210, 1310,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 0,
	0, 0, 0, 0, 0, 0, 2209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1314, 1315, 1316, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	1328, 1338, 0, 1318, 1319, 1320, 1324, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 1326, 1310, 0, 0, 0,
	0, 0, 1311, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 1328, 1338, 0,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 0, 1317, 0, 0, 2998, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 1329, 0, 0, 1291, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 1313, 1314, 1315, 1316, 2994, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 1324, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 1326, 1310, 0,
	0, 0, 0, 0, 1311, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 1328,
	1338, 0, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 1317, 0, 0,
	2934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 1329, 0, 0,
	1291, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 1313, 1314, 1315, 1316, 2883, 0, 0,
	0, 0, 1296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332,
	1333, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	1324, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 0,
	0, 0, 1290, 0, 0, 0, 0, 0, 0, 1326,
	1310, 0, 0, 0, 0, 0, 1311, 1307, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1313, 1314, 1315, 1316, 0, 0, 0, 0, 0, 1296,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 1334, 1335, 0, 0, 0,
	0, 0, 0, 1305, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 1317,
	0, 0, 2845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 1329,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 0, 1310, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 1302,
	1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292,
	1293, 1294, 1295, 1297, 1298, 1313, 1314, 1315, 1316, 2757,
	0, 0, 0, 0, 1296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323,
	1331, 1332, 1333, 0, 0, 0, 1328, 1338, 0, 1318,
	1319, 1320, 1324, 0, 0, 0, 0, 0, 0, 1291,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 1326, 1310, 0, 0, 0, 0, 0, 1311, 1307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1314, 1315, 1316, 0, 0, 0, 0,
	0, 1296, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 1328, 1338, 0, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 1334, 1335, 0,
	0, 0, 0, 0, 0, 1305, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 1317, 0, 0, 2714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1312, 1288,
	1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 1329, 0, 0, 1291, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1290,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299,
	1300, 1292, 1293, 1294, 1295, 1297, 1298, 1313, 1314, 1315,
	1316, 2713, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 1289, 0, 1321,
	1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1328, 1338,
	0, 1318, 1319, 1320, 1324, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 1334, 1335, 0, 0, 0, 0, 0, 0,
	1305, 1306, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 1326, 1310, 0, 0, 0, 0, 0,
	1311, 1307, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 1314, 1315, 1316, 0, 0,
	0, 0, 0, 1296, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1312, 0, 1328, 1338, 0, 1318, 1319,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 1334,
	1335, 0, 0, 0, 0, 0, 0, 1305, 1306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308,
	1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295,
	1297, 1298, 0, 1317, 0, 0, 2687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1312, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 1329, 0, 0, 1291, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0,
	1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1313,
	1314, 1315, 1316, 2509, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	1328, 1338, 0, 1318, 1319, 1320, 1324, 0, 0, 0,
	0, 0, 0, 1291, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 1326, 1310, 0, 0, 0,
	0, 0, 1311, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1313, 1314, 1315, 1316,
	0, 0, 0, 0, 0, 1296, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 1328, 1338, 0,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1329, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 0, 1317, 0, 0, 2482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1312, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 1329, 0, 0, 1291, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 1313, 1314, 1315, 1316, 1816, 0, 0, 0, 0,
	1296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 1324, 0,
	0, 0, 0, 0, 0, 1291, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 1326, 1310, 0,
	0, 0, 0, 0, 1311, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 3076, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 1328,
	1338, 0, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1329, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 3075,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 1317, 2177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 1329, 0, 0,
	1291, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1290, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	2152, 0, 1291, 0, 1327, 1337, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 1313, 1314, 1315, 1316, 1290, 0, 0,
	0, 0, 1296, 0, 2256, 1310, 0, 2255, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2153,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 1326,
	0, 0, 0, 0, 1296, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 1328, 1338, 0, 1318,
	1319, 1320, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 1317, 0, 0, 0, 0, 0, 1311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1916, 0, 0,
	0, 1312, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1329, 1915, 0, 0, 1291, 1327,
	0, 1337, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	1291, 1327, 0, 1337, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 1313, 1314, 1315, 1316, 1290, 0, 0, 0, 0,
	1296, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 1313, 1314, 1315, 1316, 1326, 0, 0,
	0, 0, 1296, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	1317, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 720, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 1329, 0, 0, 1291, 0, 1327, 1337, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 0, 0, 0,
	1290, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 1313, 1314,
	1315, 1316, 0, 0, 0, 0, 0, 1296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 1289, 0,
	1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0, 1328,
	1338, 0, 1318, 1319, 1320, 1324, 0, 0, 0, 0,
	0, 0, 1291, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 1305, 1306, 0, 0, 0, 0, 1290, 0, 0,
	0, 0, 0, 0, 1326, 1310, 0, 0, 0, 0,
	0, 1311, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1314, 1315, 1316, 0,
	0, 0, 0, 0, 1296, 0, 0, 1317, 0, 2266,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1312, 0, 1328, 1338, 0, 1318,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	1334, 1335, 0, 0, 0, 0, 0, 0, 1305, 1306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 1311, 2486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1312, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1329, 2261, 0, 0, 1291, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1290, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 1288, 1289, 0, 1321, 1322,
	1323, 1331, 1332, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	1291, 1327, 0, 1337, 1302, 1303, 1309, 1308, 1304, 1330,
	0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298,
	0, 1313, 1314, 1315, 1316, 1290, 0, 0, 0, 0,
	1296, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	1307, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 1313, 1314, 1315, 1316, 1326, 0, 0,
	0, 0, 1296, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 1328, 1338, 0, 1318, 1319, 1320,
	0, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1334, 1335,
	0, 0, 0, 0, 0, 0, 1305, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	1317, 0, 0, 0, 0, 0, 1311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 1329, 2208, 0, 0, 1291, 1327, 0, 1337,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 0, 0, 0, 0,
	0, 1290, 0, 0, 0, 0, 0, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 1307, 0, 0, 0,
	0, 0, 0, 1288, 1289, 0, 1321, 1322, 1323, 1331,
	1332, 1333, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 1291, 1327,
	0, 1337, 1302, 1303, 1309, 1308, 1304, 1330, 0, 1301,
	1299, 1300, 1292, 1293, 1294, 1295, 1297, 1298, 0, 1313,
	1314, 1315, 1316, 1290, 0, 0, 0, 0, 1296, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1328, 1338, 0, 1318, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1334, 1335, 0, 0, 0, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 1313, 1314, 1315, 1316, 1326, 0, 0, 0, 0,
	1296, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 1328, 1338, 0, 1318, 1319, 1320, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1334, 1335, 0, 0,
	0, 0, 0, 0, 1305, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 1317, 0,
	0, 0, 0, 0, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 0, 0, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 1288, 1289,
	0, 1321, 1322, 1323, 1331, 1332, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	1329, 0, 0, 1291, 0, 1327, 1337, 0, 1302, 1303,
	1309, 1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293,
	1294, 1295, 1297, 1298, 0, 0, 0, 0, 1290, 0,
	0, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	1288, 1289, 0, 1321, 1322, 1323, 1331, 1332, 1333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 0, 1327, 1337, 0,
	1302, 1303, 1309, 1308, 1304, 1330, 0, 1301, 1299, 1300,
	1292, 1293, 1294, 1295, 1297, 1298, 1313, 1314, 1315, 1316,
	1290, 0, 0, 0, 0, 1296, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 1338, 0,
	1318, 1319, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 1305,
	1306, 0, 0, 0, 0, 0, 0, 0, 1313, 1314,
	1315, 1316, 1326, 0, 0, 0, 0, 1296, 0, 1311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 1328,
	1338, 0, 1318, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1334, 1335, 146, 0, 0, 0, 0,
	39, 1305, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 141, 0, 1326, 1317, 0, 0, 0, 0,
	0, 1311, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 1312, 0, 0, 0, 0, 1336, 0, 46,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 51, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 54, 0,
	0, 0, 58, 0, 0, 0, 144, 1317, 0, 0,
	0, 59, 72, 0, 0, 0, 60, 61, 0, 0,
	0, 0, 0, 0, 1312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 1329, 0, 63,
	0, 0, 1327, 0, 0, 1302, 1303, 1309, 1308, 1304,
	1330, 0, 1301, 1299, 1300, 1292, 1293, 1294, 1295, 1297,
	1298, 0, 1599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1610, 1595, 1600,
	1583, 1620, 1619, 0, 0, 1585, 1584, 0, 0, 0,
	0, 0, 1629, 1628, 1327, 0, 0, 1302, 1303, 1309,
	1308, 1304, 1330, 0, 1301, 1299, 1300, 1292, 1293, 1294,
	1295, 1297, 1298, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 1621, 0, 1617, 1616, 0, 0, 0, 0,
	0, 0, 0, 0, 1615, 75, 139, 66, 0, 67,
	0, 68, 0, 0, 0, 145, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 1614, 1612, 1613, 0, 0, 0, 83, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 1594,
	0, 0, 0, 173, 0, 0, 0, 0, 0, 0,
	1603, 1598, 1604, 1605, 1606, 1607, 1608, 0, 1602, 0,
	0, 0, 0, 0, 0, 0, 115, 1626, 1627, 0,
	0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 0, 0, 0, 1587, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	0, 0, 0, 1596, 1597, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 4, 0, 0, 0, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1611, 0, 0, 0,
	1737, 1735, 1736, 1739, 1738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1610, 1595, 1600, 1583, 1620,
	1619, 0, 0, 1585, 1584, 0, 0, 0, 0, 0,
	1629, 1628, 0, 1588, 1589, 1590, 1591, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1609, 1592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1621, 0, 1617, 1616, 0, 1586, 0, 0, 1622, 1623,
	1624, 1625, 1615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1593, 0, 0, 0, 0, 1630, 0, 0,
	1614, 1612, 1613, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1594, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1603, 1598,
	1604, 1605, 1606, 1607, 1608, 0, 1602, 0, 0, 0,
	0, 0, 0, 0, 0, 1626, 1627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1618, 0, 0,
	0, 1596, 1597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1588, 1589, 1590, 1591, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1609, 1592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1586, 0, 0, 1622, 1623, 1624, 1625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1593, 0, 0, 0, 0, 1630,
}
var sqlPact = [...]int{

	57595, -1000, -16, -1000, -1000, -1000, 222, -1000, -1000, -1000,
	-1000, 215, 214, 213, -1000, 212, 211, 206, 202, 191,
	190, 189, 181, 177, 173, 171, 170, -1000, -1000, 169,
	-1000, -1000, -1000, -1000, 167, 164, 160, -1000, 159, 2219,
	31311, 155, 154, 153, 1731, 48805, 1559, 151, 149, -1000,
	140, 1500, 36241, 1249, 1444, -1000, 136, 134, 1440, 48429,
	838, 2030, 33955, 1394, 1965, 48047, 30929, 1959, 33573, 47665,
	-1000, -1000, 1122, -1000, -1000, 47283, 133, 132, 131, 130,
	128, -1000, 125, 46901, 124, 120, 119, 118, 116, 108,
	106, 105, -1000, 100, 98, 97, 96, 91, 89, 83,
	80, 79, 78, 77, 74, 73, 72, 71, 70, -1000,
	6482, 69, 64, 63, -1000, 1377, 62, 61, 60, 59,
	56, -1000, -1000, 47, 45, 44, 43, 42, 38, -1000,
	107, 35, 34, 33, 32, 31, -1000, 1133, 574, 2146,
	13399, 1296, 1287, 1283, 1255, 1270, 823, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51437, 48805, 30, -36, 29,
	-1000, 2421, 845, 24007, 57595, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 35859, 35477, 35095,
	29419, 46519, 46137, 10548, 10548, 998, -1000, -1000, -1000, -1000,
	-1000, -18, 32439, 48805, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 269, -1000, -1000, -1000, -1000, -1000, -1000, 20453,
	484, 20034, 314, 19615, 311, 453, -1000, -1000, -1000, 268,
	-1000, -1000, -1000, -1000, 1324, -1000, -1000, -1000, -1000, 45755,
	45373, 2261, 44991, 29027, 28635, 44609, 1803, 1794, 44227, -1000,
	-1000, 43845, -1000, -1000, 2260, 2008, 2007, 34713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43469, 43087, 42705,
	42323, 41941, 28243, 27851, 646, -1000, -1000, -1000, -1000, 25153,
	-1000, -1000, -1000, -1000, -1000, 27, -1000, 25, 24, -1000,
	23, 18, 16, 14, 12, 6, -2, -3, -1000, -5,
	-6, -1000, -7, -9, -1000, -11, -14, 1541, 1293, 1454,
	41559, 1103, 2327, -1000, 1557, -10, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 48805, -1000, 20858, 312, -1000, 645, -1000,
	1971, -1000, 20858, 312, -1000, 1553, 224, 1495, -1000, -1000,
	-1000, 1378, 1120, -1000, -1000, 48805, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2661, 1433, 643, 41177, -1000, 1815, -1000,
	779, 14209, -1000, 989, -1000, 14209, 267, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2215, 1224, 2618, 27459, 1551, 2450, 2257,
	2659, 1756, 2255, 2232, 2208, 2175, 2173, 2658, 1197, 2654,
	1056, 900, 2653, 2101, 2083, 2626, 1690, 901, 2650, 2649,
	2078, 1968, -1000, -1000, -1000, -1000, 1140, -1000, -1000, -1000,
	-1000, -1000, -1000, 37745, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1133, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1693, 2409, 2409, 2409,
	2487, 428, 419, -1000, 107, -1000, 1771, -1000, 1430, -1000,
	-1000, -1000, 57073, -1000, -1000, 20858, 20858, 20858, 20858, 20858,
	1387, -1000, -1000, -1000, 673, -1000, 637, 551, 11764, -1000,
	-1000, 2578, -1000, -1000, -1000, 444, 20858, -1000, 264, -1000,
	-1000, -1000, -1000, 627, 2639, -1000, 691, -1000, -1000, -1000,
	795, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2018, 580,
	579, -1000, 578, 575, 573, -1000, -1000, -1000, 625, 617,
	615, 614, 608, 607, -1000, -1000, -1000, 1281, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 825,
	-1000, 825, 825, 559, 559, 605, 604, 560, 603, -1000,
	-1000, 599, 559, 598, 590, -1000, -1000, 588, 738, -1000,
	735, 587, 586, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1537, -1000, -1000, 1537, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 997, 50309, -1000, -1000, -1000, -21, 48805,
	-1000, 453, -21, -1000, -1000, 585, -1000, 15033, 15033, 15033,
	-1000, -1000, 1552, 20858, -1000, 3039, -1000, 716, -196, 583,
	24771, 744, 744, -1000, 23243, 680, 27067, -1000, 580, 579,
	578, 575, 573, -1000, 261, -1000, -1000, -1000, -1000, -1000,
	1530, 2247, 980, -1000, 1238, 2245, -1000, 2347, 2241, 1233,
	-1000, -1000, 805, 2233, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1476, -1000, -1000, 1555, 2231, -137, 2052,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1592, -1000, 29795,
	32439, -22, -1000, -1000, -37, -1000, 10158, 57073, -1000, -1000,
	-1000, 57073, 732, -1000, -1000, 2230, -1000, 57073, 727, -1000,
	-1000, 2229, -1000, 1966, 48805, 10548, 48805, 48805, -1000, 572,
	1648, 1548, -1000, -1000, 32063, 2347, 1647, -1000, -1000, 801,
	1645, -1000, -1000, 1639, -1000, 453, -1000, -1000, 40795, 51061,
	801, 1636, -1000, -1000, -1000, 37745, -1000, 48805, -1000, 48805,
	-1000, 1131, -1000, 50685, 144, 2225, -1000, -1000, 144, 2220,
	-1000, 144, 2217, -1000, 141, 2209, -1000, -1000, 1446, 2207,
	-1000, -45, 2200, -1000, -1000, -45, 2186, -1000, -1000, 20858,
	-35, -1000, -1000, -1000, 845, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 40413, 29795, -1000, 32063, 48805, 34331, 709, 57073,
	-1000, 2539, 58016, 29795, 57073, -1000, 32063, 48805, 2015, -1000,
	40031, 39649, 2469, 778, -1000, -1000, 48805, -1000, 20858, -1000,
	2538, 1797, -31, -1000, -1000, -1000, -1000, -1000, 1674, 1745,
	937, 1130, -1000, 14209, 14209, 2323, -1000, 252, 10548, -1000,
	-1000, 1039, 1734, -1000, -1000, -1000, -1000, -1000, 39267, -1000,
	-1000, -1000, 1412, 48805, -1000, -1000, 2010, -1000, 31687, 48805,
	-1000, 48805, -1000, 48805, -1000, 48805, -1000, 48805, -1000, -1000,
	-1000, -1000, -1000, 2121, 1302, 2004, -1000, 48805, -1000, 48805,
	-1000, -1000, -1000, 1673, -1000, -1000, -1000, 38891, 38509, 38127,
	-1000, -1000, 1196, -1000, 1038, -1000, -1000, 145, -1000, -1000,
	1693, -1000, 1545, 1783, 19196, 1760, 20858, 107, -1000, -1000,
	107, 107, 12980, -1000, -1000, -1000, 48805, -1000, 57768, 58016,
	10548, 1007, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858,
	20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858,
	20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858, 20858,
	20858, 20858, 20858, 20858, 20858, 20858, 20858, 1818, 20858, 992,
	20858, 20858, 20858, 20858, 1542, -1000, -1000, 1356, 483, 1381,
	-1000, 2581, 2581, 2581, 57430, 57430, 567, 673, -1000, 20858,
	-1000, 312, 20858, 419, 54798, -20, 11359, -1000, -1000, -1000,
	-1000, 18777, 815, 57073, 9768, 10940, -1000, 2614, 1090, 1975,
	1851, 571, 678, 671, 667, 665, 561, 20858, 20858, 20858,
	20858, 20858, 20858, -1000, -1000, -1000, -1000, -1000, -1000, 2578,
	-1000, 18372, 17953, -1000, 2612, 17534, 17115, -1000, 16696, 22073,
	16277, 1006, 1004, 1003, 984, 20858, 12169, -1000, -31, -1000,
	50309, -1000, 48805, -21, 2536, 20858, 216, -1000, 55863, -1000,
	216, 216, 570, -42, 57073, 1748, 1746, 24389, 1568, 1460,
	1460, 1460, -1000, 568, 666, 744, 7409, 15858, 565, 744,
	744, 225, 36617, 1435, 36617, 286, 417, 22861, 3039, -1000,
	-1000, 48805, 10548, -26, 1309, -1000, 33191, 2380, 2358, 2339,
	1126, -1000, 1076, 2484, 37745, 2507, 312, 2406, 1956, -1000,
	-1000, 991, 37745, 2347, -1000, 58016, -1000, 1825, 2480, 1086,
	1119, 1086, 1086, 1114, 37745, 985, 1321, 29795, 2397, 973,
	-28, 2500, 312, 2391, 1947, 967, -1000, -1000, 48805, 10548,
	2381, 1035, 694, -22, 32439, 48805, 248, -1000, 20858, 312,
	20858, 312, 1073, -48, 247, 1763, 1758, 225, -1000, 32815,
	2532, 2182, 48805, 965, -1000, 2347, 2137, -1000, 1295, -1000,
	2135, 2131, 2527, 1546, 1635, -1000, -1000, -1000, 1543, 1633,
	1019, 2126, 810, 182, 2524, 182, 26303, -1000, 48805, -1000,
	48805, -1000, -1000, 48805, -1000, 48805, -1000, 48805, -1000, 48805,
	48805, -1000, 48805, 29795, 29795, 29795, -50, 3743, 30547, 799,
	963, -44, -1000, 844, 32815, 647, -53, -1000, 916, -1000,
	-1000, -1000, 279, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	825, 564, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 560, 1281, 559, 559, 559, -1000,
	-1000, -1000, 738, -1000, 735, -1000, -1000, -1000, 825, 825,
	-1000, -1000, -190, 1945, -37, 34331, 694, -1000, 694, -1000,
	2000, -1000, 2410, 758, -64, 884, -31, -1000, 1537, -1000,
	1162, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2638, -1000, 2587, -1000, -1000, 2606,
	-23, -1000, -23, -1000, 10548, -1000, 48805, 1994, -1000, -1000,
	-1000, -1000, -1000, -1000, 48805, -1000, 48805, -1000, -1000, -1000,
	-1000, -1000, -1000, 486, -1000, 1991, -1000, 3743, 244, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 48805, 48805, 48805,
	-1000, 37745, -1000, -1000, -1000, -1000, 57073, -1000, 470, -1000,
	-1000, 57073, 1170, 1761, -1000, 1761, -24, -1000, 55577, 1726,
	48805, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 777, 1069, 1069, 1063, 1063, 1063, 1063,
	2544, 4254, 628, 1787, 310, 310, 310, 310, 310, 310,
	310, 310, 1479, 601, 601, 1479, 1479, 1479, 1479, 1479,
	601, 601, 601, 310, 310, 310, 57430, 57358, 4225, 20858,
	20858, 961, 1349, 483, 4225, 20858, 4225, 4225, 4225, 4225,
	-1000, 1175, -1000, -1000, -1000, -1000, 1931, 558, 22073, 22073,
	-1000, -1000, -1000, 11764, 20858, -1000, -1000, -1000, -1000, 551,
	20858, -1000, 55083, -239, 414, -134, 242, 20858, 657, -98,
	-1000, 1093, -1000, 20858, 240, -1000, -1000, -27, 20858, 20858,
	20858, 413, -1000, 412, -1000, 960, -1000, 959, 957, 955,
	-1000, 550, 1389, 548, 546, 20858, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57001, 52235, 52197, 6310,
	5738, -65, -66, 410, -1000, 1929, -134, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 409, -1000, 394, -67, -1000, -75,
	-1000, 393, -1000, 56715, -134, 392, 445, -1000, 22073, 22073,
	22073, -1000, 391, -1000, 55505, -1000, 776, 769, 768, 767,
	56643, 15439, 15439, 15439, 386, 56357, 20858, -134, -1000, -1000,
	542, -84, 810, 15033, 23625, 10548, -1000, 810, 810, 20858,
	-1000, 20858, 24389, 24389, 3033, 1740, 24389, -1000, -1000, -1000,
	-1000, 36617, 539, 744, 36617, -1000, 2578, 1757, -1000, 383,
	-1000, 14628, 36617, 36617, 10548, -1000, -1000, 48805, 453, -1000,
	-1000, 744, 381, 237, 1643, 48805, 48805, 48805, -1000, -1000,
	1629, 49933, 1624, 58016, 48805, -1000, -1000, 541, 537, 1721,
	1720, 48805, 48805, 49557, 49181, 48805, 1428, 20858, 1511, 1493,
	312, -1000, 766, 535, 48805, 1194, -1000, -1000, -1000, -1000,
	-1000, 48805, -1000, -1000, 2600, -1000, 1086, -1000, -1000, -1000,
	1086, 2347, 1188, 48805, 29795, 804, 765, 48805, 1329, 312,
	-1000, 762, 534, 10548, 1232, -1000, 756, 48805, 1833, -1000,
	1587, -1000, -1000, 9378, 57073, -1000, 57073, -1000, -1000, -1000,
	10548, 1831, 1831, 380, -25, -1000, -1000, -1000, -1000, -1000,
	-1000, 1774, 48805, 639, 48805, 312, 48805, 137, 2619, 48805,
	29795, 29795, 29795, 312, 48805, 2122, 48805, 2112, 2276, 692,
	48805, 1431, 20858, 1299, -1000, 25535, 833, 48805, 1121, 135,
	-1000, -1000, -1000, 8, 48805, -1000, -1000, 144, 144, 144,
	-1000, 141, 1446, -1000, -45, -45, -1000, -1000, -1000, 1921,
	37369, 48805, 2549, 29795, -85, -1000, 849, 947, 930, -1000,
	58016, -1000, 669, 854, -1000, 2599, 532, 2578, -1000, 799,
	48805, 127, -1000, 802, 1628, -1000, 14209, 14209, -1000, 1537,
	-1000, -1000, 1186, -1000, 1261, -1000, -1000, -1000, -1000, 14209,
	-1000, -1000, 1034, -37, -37, -1000, -1000, 313, -1000, 48805,
	-1000, -1000, -1000, -1000, 1170, -1000, 20858, -1000, -1000, -1000,
	12980, -1000, -1000, -1000, 48805, -189, 20858, 4225, 4225, 20858,
	22073, 22073, -1000, 4225, -1000, -1000, -1000, -1000, -1000, 1916,
	528, 20858, 58016, 5009, 4441, -86, 1479, -1000, 20858, -1000,
	8988, 54661, -1000, -1000, 638, 2252, -1000, 20858, 56220, 8598,
	378, 13804, -1000, 55935, -32, -32, -1000, 2636, 1652, 1526,
	1239, 1147, 2590, -1000, 26685, 811, 1431, 54376, 57768, 58016,
	20858, 20858, 20858, -1000, -1000, 2578, -1000, 20858, -1000, -1000,
	-1000, -1000, -1000, 1914, 20858, -1000, 57768, 58016, 22073, 22073,
	22073, 22073, 22073, 22073, 22073, 22073, 22073, 22073, 22073, 22073,
	22073, 22073, 22073, 22073, 22073, 22073, 22073, 1738, 22073, 2577,
	2577, 2577, -1000, 1962, 1914, 20858, 20858, -1000, -1000, -1000,
	-1000, 58016, 376, 372, 367, -1000, 20858, -134, 647, -1000,
	1849, -1000, -173, -1000, 3039, -1000, -1000, 1849, 1849, -87,
	57073, -1000, 3033, -1000, 518, 20858, 24389, -1000, 656, -1000,
	-92, -1000, 36617, -1000, 654, -236, -1000, 718, -1000, 744,
	366, -1000, -1000, -1000, 236, 453, -1000, 36617, -1000, 10548,
	-1000, -1000, 954, 948, -1000, 2095, -1000, 1623, -1000, 837,
	-1000, 1263, 20858, 6865, 517, 516, 1326, -1000, 2094, 1446,
	2070, 1446, -1000, -1000, 782, -1000, 57073, 514, 511, -1000,
	-26, 1267, -1000, 25927, 20858, -1000, 945, -1000, -1000, -1000,
	2347, 936, -1000, -1000, 1290, 25927, -1000, -1000, -1000, 25927,
	20858, -1000, -28, 934, 25927, 2049, 799, 1912, 1041, -1000,
	-1000, -1000, -1000, -1000, -1000, 1784, 32815, 48805, 509, 48805,
	508, -1000, -1000, 507, 48805, 694, 2347, -1000, 801, -1000,
	-1000, 842, 10548, 505, 10548, 1684, 692, 30171, -1000, 801,
	1783, -1000, 57073, -1000, 1121, 12574, 2342, -99, -1000, 235,
	-1000, -1000, -1000, 810, 26303, 24389, 20858, 2644, -102, -1000,
	-1000, -1000, -1000, -1000, 312, -29, 504, -1000, 714, 710,
	-37, 1491, 2327, 2327, -1000, 2582, -1000, 650, 355, 2578,
	354, -1000, -37, 48805, -1000, 1481, 10548, 48805, 48805, 10548,
	48805, -1000, -1000, -31, -1000, -1000, -1000, -1000, 48805, -1000,
	-1000, -1000, 1501, 54239, -1000, 2432, 10548, 2542, 4225, 3809,
	408, 20858, 58016, 4980, -107, 20858, 20858, -1000, 649, 57073,
	-1000, -1000, -1000, -1000, -1000, 57073, 20858, 230, -1000, 2632,
	20858, 352, 346, 336, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 334, -1000, -1000, 51813, -1000, 20858, 332, -1000,
	331, 330, 5301, 53954, 53817, 329, 57073, 1962, 57073, -1000,
	-1000, 636, 636, 1105, 1105, 1105, 1105, 2577, 856, 885,
	350, 531, 531, 531, 370, 1016, 1016, 531, 531, 531,
	1906, 1705, 503, 3679, -1000, -1000, 57073, 57073, 327, -1000,
	-1000, -1000, -134, 319, 1841, 2478, -1000, 24389, 1841, 1841,
	-1000, -1000, 48805, 57073, -1000, -196, -1000, 2578, -1000, -1000,
	1757, -1000, 7813, 36617, 744, 10548, -1000, -1000, 217, 48805,
	48805, 48805, 2065, -1000, 3165, -1000, 53532, -110, -1000, 2445,
	2445, 20858, 225, -1000, -1000, 502, 6865, 48805, -1000, 1759,
	1754, 875, 48805, -1000, 48805, -1000, -1000, 48805, 48805, 48805,
	48805, 48805, -1000, 499, -113, 48805, 48805, 29795, -1000, -1000,
	-115, 10548, -1000, 2345, -1000, 29795, 920, 1329, 1826, -1000,
	497, 6865, 494, 48805, 32815, 2516, -1000, 799, -1000, -1000,
	493, 1877, 1535, 6865, 1531, 1695, 692, 30171, -1000, 1019,
	1121, -1000, -1000, -33, -1000, 405, 312, 48805, 2643, 1431,
	-1000, -34, 57073, -1000, 702, -1000, 36993, 36993, 29795, 29795,
	-1000, 2312, 2303, 602, -1000, -1000, 318, -1000, -37, 1678,
	-1000, -1000, 1347, 1569, -1000, -1000, -1000, -1000, -1000, 2432,
	20858, 20858, 4980, -116, -1000, 4225, 4225, -1000, 57073, 8208,
	-1000, 55935, -1000, -1000, -1000, -1000, 1370, -1000, 53395, -1000,
	-1000, -1000, 20858, -1000, -1000, -1000, -1000, 22073, 1898, 492,
	58016, -1000, -1000, 807, 20858, 20858, 3039, 807, 807, -118,
	744, -1000, -1000, -1000, 2578, -1000, 36617, 217, 10548, -1000,
	-1000, -1000, 48805, -1000, 48805, -1000, 10548, 48805, 1889, 1609,
	-1000, -1000, 1706, 488, 22073, 48805, 730, -1000, 1318, 6865,
	2432, 10548, 2432, 53110, 10940, -123, -124, 1602, -1000, 1600,
	20858, -1000, 58016, 1446, 1446, -129, -131, -1000, 932, 929,
	20858, 923, -1000, -1000, -1000, 921, -1000, 752, -45, 25927,
	-1000, -1000, 1373, 6865, -139, 6865, -147, 309, 312, -1000,
	6865, -1000, 48805, -150, 48805, -1000, 692, 30171, -1000, 2276,
	-1000, 2285, 48805, 2337, -1000, -1000, -1000, 1783, 483, -1000,
	-153, -1000, -1000, 482, 481, -1000, -1000, -62, -1000, 689,
	530, -1000, -1000, -1000, 10548, 1030, -1000, 4225, 4225, -1000,
	-1000, -1000, 294, 1431, 2471, -1000, 52973, 4662, 22073, 58016,
	-155, -1000, 48805, 57073, -134, -1000, -1000, -1000, 36617, 562,
	-1000, -1000, 1588, -1000, -1000, -1000, 48805, 1621, -1000, -1000,
	20858, 3679, 477, 20858, -1000, 1784, 476, -1000, -1000, -1000,
	-1000, -1000, -1000, 2445, -27, -1000, 1248, -1000, -1000, 57073,
	2443, -1000, -1000, 475, 473, 48805, 48805, -32, 471, 468,
	25927, -1000, 48805, -156, 1318, -158, -1000, 1784, -1000, -163,
	842, -1000, 466, 30171, -1000, 1684, 996, -164, 48805, 1121,
	-1000, -1000, 29795, 29795, 1678, -1000, 48805, -1000, 48805, -1000,
	48805, -1000, 1210, 20858, -1000, 4662, -166, -1000, -125, -1000,
	2513, -1000, -1000, -1000, -1000, 2058, 52688, 1662, 48805, 52551,
	1329, 48805, 2432, 293, 48805, 841, 10548, 1347, 1347, -1000,
	-1000, 288, 20858, 20858, -1000, 464, -1000, 1784, 1318, 1329,
	1318, 459, 6865, -1000, 1695, 1117, -1000, 810, -1000, -1000,
	-171, -172, -1000, -174, -177, -1000, 276, 21668, 21668, -134,
	-1000, 48805, 456, 2035, -1000, 1503, 1352, 109, 866, -1000,
	-179, -1000, -1000, 453, -1000, 20858, -1000, -182, -1000, 830,
	-185, -1000, 827, 2632, -192, -193, 48805, 1329, 1784, -1000,
	1784, 6865, -199, -1000, 26303, -1000, 799, 799, -1000, -1000,
	-1000, -1000, -1000, 22463, 1490, 1163, 55220, -1000, -1000, -1000,
	48805, -1000, 1528, 1515, 1144, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1662, 57073, -1000, 1347, 1823, -1000, 1347, 1883,
	-1000, -1000, -200, -1000, 1329, 1329, -201, -1000, -194, -1000,
	-1000, 2547, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2291,
	-1000, 855, 1478, 1478, 1503, -1000, 452, -1000, 449, 1416,
	-1000, -1000, 1318, -1000, 21263, -1000, 2563, -1000, -1000, 1736,
	-1000, -1000, 20858, 20858, -1000, -1000, -1000, 1784, -1000, -1000,
	-1000, -1000, -209, -210, 1329, 1329, 917, -1000, -1000, 432,
	20858, -227, 1329, -1000,
}
var sqlPgo = [...]int{

	0, 3121, 3120, 1942, 3119, 2546, 3117, 3116, 3115, 3114,
	3113, 2536, 3111, 3109, 3108, 3107, 3103, 3102, 3101, 3099,
	3098, 3097, 3095, 3091, 3086, 3085, 3084, 3083, 3082, 3081,
	3080, 3079, 2439, 3078, 2426, 3077, 3075, 3073, 3072, 3071,
	3063, 3062, 3061, 17, 3053, 3051, 3050, 3048, 2424, 3047,
	3034, 2418, 3033, 3032, 2408, 3031, 3030, 3029, 2375, 2368,
	3024, 3022, 2366, 3020, 3019, 2357, 3018, 2348, 3016, 3015,
	2340, 3014, 95, 108, 3013, 2337, 3008, 3003, 2332, 2329,
	2318, 2997, 2312, 2996, 2995, 2266, 2263, 2984, 137, 2981,
	2980, 2978, 2977, 2255, 2253, 2976, 2975, 2973, 168, 2971,
	2212, 2968, 2966, 2963, 2962, 2961, 2960, 2959, 2956, 2954,
	2953, 2951, 2950, 2945, 2940, 2939, 2938, 2937, 2933, 2932,
	2930, 2928, 2926, 2925, 2920, 2917, 2916, 184, 103, 2915,
	2913, 2141, 2069, 2912, 2911, 56, 54, 15, 77, 134,
	178, 4609, 169, 2909, 2907, 2905, 2904, 2902, 2901, 29,
	119, 116, 110, 114, 2900, 219, 2898, 2895, 55, 45,
	25, 30, 81, 2892, 2891, 2890, 1960, 86, 2887, 2886,
	165, 159, 2883, 1409, 38, 92, 91, 94, 105, 52,
	2874, 98, 13, 2873, 117, 139, 2870, 62, 47, 26,
	3456, 82, 64, 72, 193, 189, 152, 149, 124, 1322,
	2869, 174, 78, 146, 2868, 2864, 2863, 58, 143, 2,
	28, 129, 8, 2861, 9, 2854, 10, 2852, 2851, 2846,
	2844, 22, 112, 35, 37, 2839, 33, 75, 140, 2838,
	157, 2832, 85, 176, 148, 1, 130, 2831, 73, 19,
	79, 2830, 2826, 93, 163, 2825, 24, 118, 88, 106,
	187, 155, 90, 156, 151, 2824, 2822, 2820, 131, 2807,
	142, 104, 2806, 2804, 113, 32, 2802, 42, 158, 44,
	2801, 2800, 102, 2798, 147, 2797, 2791, 182, 115, 132,
	3, 50, 99, 7, 161, 109, 61, 65, 2786, 2250,
	1474, 926, 57, 2785, 101, 68, 39, 80, 107, 172,
	43, 2784, 2783, 40, 2781, 2780, 2779, 125, 2775, 2774,
	2772, 96, 59, 154, 2769, 97, 51, 291, 153, 141,
	175, 123, 2768, 133, 87, 145, 2767, 126, 2765, 1576,
	2761, 136, 2760, 2759, 2757, 2755, 1005, 2754, 2753, 2752,
	1210, 2746, 100, 2742, 135, 122, 127, 74, 111, 164,
	162, 71, 2741, 144, 34, 2736, 171, 23, 0, 3736,
	3593, 2735, 150, 89, 2733, 2731, 2728, 2724, 31, 11,
	4, 6, 14, 12, 27, 18, 241, 2718, 2717, 83,
	120, 2715, 180, 160, 2714, 2712, 2706, 48, 2704, 20,
	2703, 16, 2702, 2701, 21, 5, 2698, 2694, 170, 2692,
	2690, 2688, 2498, 2681, 179, 2679, 2678, 2676, 2291, 2674,
	2666, 49, 36, 128,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 404, 404, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 151,
	151, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 403,
	403, 153, 153, 152, 148, 148, 155, 155, 155, 157,
	157, 154, 154, 147, 147, 32, 32, 86, 86, 86,
	138, 79, 79, 79, 74, 74, 356, 356, 357, 357,
	134, 134, 135, 135, 135, 135, 136, 136, 137, 137,
	137, 46, 34, 34, 34, 34, 34, 34, 34, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 37,
	37, 37, 37, 37, 37, 44, 44, 128, 128, 47,
	47, 47, 47, 47, 47, 47, 47, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 58, 58, 56, 59, 59, 60, 60, 60, 60,
	60, 60, 61, 61, 61, 61, 61, 61, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 68, 68,
	68, 69, 69, 69, 66, 66, 66, 64, 64, 64,
	63, 63, 63, 67, 67, 67, 65, 65, 65, 234,
	234, 70, 70, 70, 70, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 73, 73, 73, 73, 73, 73, 73, 73, 326,
	326, 71, 71, 301, 301, 75, 75, 259, 259, 76,
	76, 76, 76, 76, 77, 77, 77, 77, 87, 87,
	87, 87, 402, 402, 228, 228, 170, 170, 170, 170,
	82, 82, 82, 82, 83, 83, 83, 84, 84, 133,
	133, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 38, 38, 38, 39, 39, 40, 40, 41, 41,
	42, 42, 43, 43, 43, 43, 43, 94, 94, 94,
	96, 93, 93, 93, 95, 95, 95, 95, 97, 97,
	98, 98, 98, 98, 98, 98, 99, 99, 350, 350,
	237, 237, 348, 348, 349, 349, 205, 205, 205, 205,
	205, 206, 206, 206, 355, 355, 355, 355, 355, 355,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 118, 118, 118, 127, 127, 127, 127, 127, 127,
	127, 120, 120, 120, 111, 111, 101, 101, 107, 107,
	107, 107, 107, 102, 102, 108, 108, 110, 110, 112,
	112, 112, 112, 112, 112, 103, 103, 103, 103, 114,
	114, 114, 114, 113, 113, 123, 123, 123, 123, 123,
	123, 123, 314, 314, 119, 119, 119, 119, 122, 122,
	122, 122, 117, 117, 117, 121, 121, 124, 124, 124,
	124, 104, 104, 105, 105, 106, 106, 125, 125, 116,
	116, 126, 126, 126, 126, 126, 126, 126, 115, 115,
	115, 405, 405, 109, 400, 400, 398, 398, 398, 398,
	398, 398, 398, 399, 399, 401, 401, 80, 80, 80,
	52, 52, 53, 53, 207, 207, 208, 208, 282, 282,
	282, 282, 209, 209, 156, 156, 156, 212, 213, 213,
	210, 210, 211, 211, 211, 215, 215, 214, 217, 217,
	216, 281, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 364, 364, 364, 365, 362, 362, 363, 363, 363,
	363, 406, 406, 280, 280, 221, 221, 369, 369, 369,
	369, 370, 370, 370, 370, 370, 373, 372, 371, 371,
	371, 371, 371, 310, 310, 310, 57, 57, 57, 248,
	248, 247, 247, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 130, 130, 54, 54,
	54, 162, 162, 51, 51, 51, 55, 55, 50, 50,
	50, 50, 50, 265, 265, 263, 263, 226, 226, 316,
	316, 316, 174, 174, 149, 149, 149, 20, 22, 22,
	16, 16, 16, 16, 16, 16, 29, 29, 30, 30,
	26, 26, 264, 264, 266, 266, 81, 81, 85, 85,
	85, 91, 91, 129, 129, 129, 129, 129, 129, 129,
	33, 33, 33, 33, 45, 45, 45, 45, 89, 409,
	409, 409, 90, 90, 408, 408, 169, 169, 169, 169,
	171, 171, 277, 277, 278, 278, 410, 410, 279, 279,
	279, 164, 163, 165, 165, 49, 49, 49, 158, 158,
	159, 159, 160, 160, 161, 161, 411, 411, 78, 78,
	78, 132, 132, 201, 201, 274, 274, 274, 222, 222,
	179, 179, 276, 276, 275, 275, 275, 246, 246, 246,
	131, 131, 231, 231, 239, 239, 240, 240, 322, 322,
	241, 88, 88, 141, 141, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 142, 142, 142, 142, 142, 142,
	142, 145, 145, 145, 145, 146, 146, 146, 144, 144,
	380, 380, 380, 382, 382, 383, 379, 379, 381, 381,
	407, 407, 250, 250, 250, 219, 220, 218, 218, 412,
	412, 224, 224, 223, 225, 225, 315, 315, 315, 244,
	244, 244, 244, 269, 269, 267, 267, 268, 268, 270,
	270, 271, 271, 271, 272, 272, 273, 273, 243, 243,
	297, 297, 143, 143, 143, 230, 230, 230, 232, 232,
	287, 287, 287, 288, 288, 286, 286, 286, 286, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 396, 396, 396, 397, 397, 313, 313, 318,
	318, 318, 318, 318, 318, 311, 311, 312, 312, 323,
	324, 324, 253, 253, 253, 253, 251, 251, 252, 252,
	319, 319, 319, 319, 245, 245, 320, 320, 320, 283,
	283, 327, 327, 327, 342, 342, 229, 229, 229, 337,
	337, 328, 328, 328, 328, 328, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 331, 331,
	331, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 341,
	341, 341, 341, 341, 332, 332, 338, 339, 333, 334,
	340, 340, 340, 340, 344, 344, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 336, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	261, 261, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 291, 291, 291, 291, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 374, 374,
	374, 374, 374, 374, 374, 374, 377, 377, 378, 378,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 384, 384, 385, 385, 387,
	387, 388, 388, 389, 390, 390, 390, 391, 392, 392,
	386, 386, 393, 393, 393, 394, 394, 395, 395, 395,
	395, 395, 303, 303, 309, 309, 309, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 172, 172, 172, 172, 172, 236, 236,
	235, 235, 300, 300, 298, 298, 302, 302, 254, 254,
	343, 343, 343, 343, 343, 343, 343, 255, 255, 255,
	262, 256, 256, 257, 257, 257, 257, 257, 294, 295,
	258, 258, 258, 296, 296, 304, 308, 308, 307, 306,
	306, 305, 305, 284, 284, 285, 285, 242, 242, 413,
	413, 238, 238, 321, 321, 321, 321, 203, 203, 233,
	233, 202, 202, 196, 196, 197, 197, 197, 197, 227,
	227, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 345, 345, 345, 346, 347, 299, 189, 188,
	176, 177, 187, 186, 185, 175, 178, 182, 183, 184,
	180, 181, 192, 191, 190, 325, 198, 198, 199, 199,
	199, 200, 200, 200, 200, 173, 173, 193, 193, 194,
	195, 195, 166, 166, 166, 167, 167, 168, 168, 354,
	354, 352, 352, 352, 353, 353, 353, 353, 351, 351,
	351, 351, 351, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 5, 6, 2,
	1, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 3, 1, 2, 1, 2,
	1, 7, 3, 8, 8, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	3, 5, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	3, 1, 1, 3, 5, 4, 6, 4, 3, 0,
	1, 3, 2, 4, 2, 4, 1, 6, 6, 3,
	5, 3, 2, 6, 3, 3, 4, 4, 3, 3,
	1, 3, 2, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 5,
	6, 5, 1, 0, 2, 3, 3, 3, 6, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 2, 3, 2,
	3, 7, 7, 8, 10, 7, 4, 5, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 13, 16,
	9, 12, 4, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 6, 7, 3, 4, 3, 4, 3, 4, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 5, 2, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 1, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 2, 2, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 419, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 50, 76, 64, -54, -51, -48,
	-58, 78, 99, -381, 103, -62, -65, -67, 107, 116,
	121, 122, 145, 154, 254, 261, 282, 284, 286, 295,
	-40, -39, 117, -139, -141, 280, -83, -84, -93, -94,
	-95, -96, -133, 313, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	316, -33, -45, -90, -89, 361, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-380, -63, -64, -66, -68, -69, -142, -140, 416, 281,
	370, 37, 325, 65, 111, 290, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 387, 395, -145, -143, -144,
	-146, 302, 378, 338, 420, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 2, 338, 381, 303,
	371, 92, 165, 266, 252, -398, 2, 4, -360, -358,
	-197, -196, 338, 92, 30, 38, 39, 41, 44, 54,
	55, 56, 59, 96, 97, 114, 123, 124, 134, 147,
	149, 157, 158, 172, 178, 180, 200, 229, 231, 244,
	248, 258, 260, 268, 292, 319, 334, 350, 351, 352,
	358, 359, 378, 379, 383, 390, 20, 21, 22, 23,
	25, 35, 36, 37, 40, 42, 43, 46, 47, 48,
	49, 50, 51, 58, 63, 64, 65, 66, 67, 72,
	69, 70, 71, 74, 76, 77, 80, 81, 82, 90,
	91, 93, 94, 95, 99, 101, 103, 106, 107, 109,
	110, 116, 117, 120, 115, 118, 344, 346, 119, 121,
	122, 132, 133, 135, 136, 138, 140, 144, 146, 151,
	152, 153, 154, 155, 156, 166, 161, 167, 171, 174,
	173, 175, 176, 177, 168, 182, 185, 186, 187, 189,
	190, 193, 194, 195, 198, 197, 202, 203, 206, 207,
	210, 212, 215, 216, 219, 217, 218, 221, 222, 224,
	223, 230, 232, 233, 235, 236, 239, 240, 243, 246,
	249, 250, 251, 252, 253, 254, 255, 257, 259, 261,
	263, 264, 265, 266, 267, 269, 270, 272, 273, 274,
	275, 276, 280, 278, 279, 281, 282, 283, 284, 286,
	288, 289, 290, 291, 293, 314, 315, 327, 295, 296,
	297, 298, 299, 300, 301, 305, 309, 306, 307, 308,
	303, 304, 310, 311, 313, 316, 318, 320, 321, 324,
	325, 326, 328, 331, 332, 333, 329, 330, 323, 336,
	337, 339, 340, 341, 342, 343, 345, 347, 348, 353,
	356, 357, 361, 362, 363, 364, 367, 368, 369, 374,
	370, 372, 375, 376, 377, 382, 388, 389, 391, 392,
	393, -195, -166, 409, -194, 419, 419, 419, 2, 186,
	187, 265, 264, 310, 311, -190, -193, -194, -195, -166,
	4, -358, -360, 92, 237, 419, 419, 419, 2, 338,
	326, 115, 303, 371, 288, 381, -263, 182, 92, 366,
	-166, 261, 24, 2, 101, 171, 369, 368, 24, 257,
	304, 340, 342, 2, 419, 419, 2, 381, 303, 338,
	165, 92, 371, 288, -184, 2, -166, -73, 2, 416,
	-72, -5, -48, -58, -62, -75, -70, -11, -32, -34,
	-54, -51, -59, -65, -67, -79, -78, -80, -82, -86,
	-85, -88, -93, -94, -100, -131, -132, 78, 25, 107,
	313, 117, 181, 2, -402, -228, 2, 24, -170, -166,
	78, 145, 302, 338, 2, 186, 187, 2, -184, 2,
	-398, 2, 186, 187, 2, -402, -228, 23, 2, -166,
	2, 299, 316, -171, 2, 295, -166, 419, 419, 419,
	419, 419, 419, 207, 58, 292, 310, -98, 357, -97,
	350, 297, -99, -350, 2, 219, -166, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 2, -127, 310, 326, 152, 36, 58, 24, 63,
	93, 146, 165, 166, 194, 73, 74, 264, 207, 187,
	-314, 119, 311, 339, 298, 336, 357, 78, 372, 289,
	-405, 118, 4, 92, 219, 312, 350, 67, 343, 344,
	419, 419, 419, -407, 2, 338, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, -140, -142, -141,
	419, 419, 419, 419, 419, -223, -224, 365, 179, 113,
	242, -139, -141, 2, -380, -127, 310, 2, 58, 24,
	-348, 2, -289, 237, -291, 407, 408, 402, 225, 394,
	-303, 98, 214, 213, -293, -304, 114, 292, 416, -200,
	-292, 422, 9, -377, -141, 31, 52, -198, -166, 7,
	8, 5, 6, -173, -329, -299, -336, 360, 125, 228,
	-374, -375, -199, 4, -358, -352, -330, -339, -334, -335,
	-337, 42, 48, 47, 347, 218, 305, 306, 307, 308,
	320, 374, 161, 40, 235, 236, 173, 180, 61, 84,
	85, 83, 88, 87, 89, 86, 312, 371, 53, 30,
	157, 229, 158, 59, -376, 43, 94, 106, 135, 136,
	174, 175, 176, 177, 189, 190, 330, 353, 39, 41,
	44, 54, 55, 96, 97, 123, 124, 134, 147, 172,
	178, 200, 231, 248, 258, 268, 319, 334, 350, 351,
	352, 358, 359, 379, -359, -340, 79, 126, 143, 170,
	159, 183, 184, 188, 201, 204, 220, 227, 245, 247,
	287, 317, -408, 2, 357, 357, 2, -408, 2, -408,
	2, -169, 2, 357, 354, -409, 357, 390, -382, 269,
	-383, -184, -382, 419, 419, 421, 419, -218, -219, -220,
	2, 24, 104, 416, 2, -317, 2, 414, -319, -173,
	196, -376, -141, -318, 416, -190, 238, -199, 84, 85,
	88, 87, 89, 4, -166, 61, 214, 213, -3, 2,
	-319, 157, -190, 2, -319, 157, 2, -191, 157, -319,
	-193, 2, -356, 157, -354, 9, -353, 5, 4, -358,
	-360, -359, 2, -175, -166, 2, -202, 157, -190, -187,
	-351, 4, -358, -360, -359, -361, 24, 26, 27, 28,
	29, 31, 32, 33, 34, 45, 52, 53, 57, 60,
	62, 73, 78, 83, 84, 86, 85, 87, 88, 89,
	98, 100, 102, 104, 105, 108, 111, 113, 125, 127,
	139, 141, 142, 145, 148, 150, 160, 165, 169, 179,
	181, 196, 199, 205, 208, 209, 225, 226, 228, 234,
	237, 238, 241, 242, 256, 262, 271, 285, 302, 312,
	322, 335, 338, 349, 354, 355, 360, 365, 366, 371,
	373, 380, 381, 384, 385, 386, 387, -188, -351, 354,
	421, -233, -196, -197, -227, -166, 418, -289, 2, -88,
	2, -289, 157, 2, -88, 157, 2, -289, 157, 2,
	-88, 157, 2, -221, 416, 418, 338, 62, 2, -190,
	157, -180, 2, -166, 109, -191, 157, 2, -193, -356,
	157, 2, -356, 157, 2, -192, 2, -190, 165, 165,
	-175, 157, 2, -166, 24, 142, 2, 181, 2, 181,
	2, -320, 2, -319, -234, 157, 2, -190, -234, 157,
	2, -234, 157, 2, -203, 157, 2, -202, -175, 157,
	2, -357, 157, 2, -356, -357, 157, 2, -259, 416,
	-326, 2, -325, -353, 378, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 310, -138, 80, 237, 354, 421, -190, -289,
	-88, -301, 416, 142, -289, -88, 237, 142, 239, 2,
	92, 338, 393, 24, -166, 2, 314, 2, 416, -98,
	56, 357, -278, 2, -279, -163, -164, -165, 185, 263,
	267, 393, -348, 354, 399, 142, -348, -237, 418, -127,
	2, 139, 373, 2, 7, 2, -356, 2, 314, 2,
	264, 311, 58, 142, 2, 2, -400, 2, 237, 142,
	2, 142, 2, 142, 2, 142, 2, 142, 2, 2,
	264, 311, 2, 356, 195, 356, 2, 142, 2, 142,
	2, 5, 2, 185, 263, 327, 2, 338, 381, 303,
	2, 2, 142, 2, 142, 393, 2, -245, -319, -223,
	-224, -244, -267, -268, 205, 127, 234, -250, 24, 104,
	-250, -250, 46, 417, 417, -127, 314, 2, 10, 11,
	60, 35, 407, 408, 409, 410, 137, 411, 412, 405,
	406, 404, 397, 398, 401, 191, 192, 75, 400, 399,
	68, 211, 294, 128, 129, 130, 131, 277, 162, 163,
	164, 13, 14, 15, 28, 241, 204, 394, 159, 317,
	402, 16, 17, 18, 183, 184, 227, 38, 160, -172,
	-204, -289, -289, -289, -289, -289, 247, -242, -284, 414,
	-141, 416, 416, -141, -289, -235, 416, -347, 7, -141,
	-298, 414, -305, -289, 418, 416, 5, 416, 5, -384,
	388, 139, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 260, -344, 382, -344, -344, -331, 416,
	-331, 416, 416, -332, 416, 416, 416, -331, 416, 416,
	416, 389, 395, 389, 395, 416, 416, -277, -278, -277,
	354, -171, 421, -382, -221, 416, -238, -321, -289, 409,
	-238, -238, 237, -235, -289, 79, -253, 188, 220, 143,
	201, 287, 170, -347, -73, -286, 422, 416, -173, -376,
	-141, -166, -313, 395, -313, -141, -318, 416, -317, 409,
	-190, 416, 418, -151, 278, -150, 22, 25, 107, 376,
	120, -211, 167, 252, 114, 323, -404, 117, 296, 345,
	346, 278, 114, -247, -249, 32, 90, 222, 249, 49,
	155, 213, 214, 325, 114, 278, 387, 114, 117, 278,
	-153, 323, -404, 117, 296, 278, -152, -211, 114, 422,
	117, 232, -356, -233, 421, 421, -351, 409, 114, 114,
	114, 114, 142, -227, -351, -190, -198, -166, -199, 416,
	-221, 225, 237, -398, -248, -247, 225, -162, -379, 387,
	225, 225, -221, -177, 157, 2, -167, -166, -177, 157,
	-379, 225, -320, -201, -190, -201, 313, -184, 32, -155,
	421, 51, 283, 114, -155, 114, -155, 114, -155, 421,
	114, -155, 114, 421, 114, 114, -235, 417, 421, -356,
	-398, -227, -170, 78, 416, 32, -300, -327, -328, -329,
	-338, -333, -336, 42, 48, 47, 347, 218, 305, 306,
	307, 308, 320, 374, 161, 40, 235, 236, 173, 4,
	41, -340, 180, 172, 174, 175, 176, 177, 178, 319,
	39, 268, 135, 136, 134, 106, 97, 96, 231, 44,
	43, 94, 350, 351, 352, 353, 189, 190, 55, 54,
	379, 330, -357, -398, -227, 139, -175, 2, -190, 2,
	69, 70, 393, -350, -235, 32, -278, 2, -410, 421,
	203, -206, 210, 224, 151, 238, 391, -355, 5, 4,
	-299, -310, 98, 207, -336, 8, 408, -345, 7, 407,
	-349, -348, -349, 82, 418, -351, 338, 189, -350, 24,
	315, 2, -190, -401, 139, -399, 288, -398, -190, -190,
	-190, -190, -190, 139, 2, 356, 2, 139, -166, -166,
	203, -190, 2, -192, 2, -191, 2, 338, 165, 338,
	-155, 421, -244, -268, -267, -270, -289, 24, -273, 133,
	221, -289, -291, -140, -140, -140, -225, -315, -289, 262,
	165, -350, -342, -327, -341, 273, 274, 272, 276, 275,
	-327, -189, -351, 350, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, 204,
	159, 317, 38, 160, -289, 354, -289, -289, -289, -289,
	217, 225, 228, 360, 125, 367, 104, 232, -413, 335,
	34, -296, -141, 416, -309, 29, 322, 24, -303, 292,
	416, -284, -289, -285, -236, -235, 417, 421, -236, -302,
	-298, -308, -307, 384, -351, 409, 417, -235, 380, 24,
	104, 409, 2, 7, -260, 392, 216, 95, 153, 215,
	-261, 301, -385, 132, 148, 416, 417, 2, 417, 2,
	417, 2, 417, 2, 417, 2, -289, -289, -289, -289,
	-289, -235, -347, -254, 2, -343, -235, 4, 392, 216,
	95, 153, 215, 301, -254, 2, 7, -235, 2, -235,
	2, -255, 2, -289, -235, -256, -290, -291, 407, 408,
	402, -303, -257, 2, -289, -236, 350, 350, 350, 350,
	-289, 45, 199, 355, -258, -289, 142, -235, -171, -383,
	32, -235, -230, 421, 142, 32, 4, -230, -230, 416,
	417, 421, 188, 188, -317, -253, 188, -251, 245, -251,
	-251, -396, 416, 415, -313, -176, 414, 423, -351, -236,
	2, 416, -313, -313, 418, -312, -311, 32, -184, 243,
	-312, 417, -190, -351, 421, 354, -264, 73, 62, -281,
	157, 62, -362, -178, 73, -363, -166, 57, 366, 262,
	141, -264, 73, -264, 73, 73, 313, 326, 46, -319,
	35, -88, 71, 142, 354, -319, -249, -327, 90, 213,
	214, 46, -346, -345, 408, -346, 46, -346, -346, -346,
	387, -191, -319, 354, 253, -356, 71, 354, 421, 35,
	-88, 71, 142, 354, -202, -176, 71, 338, -324, -323,
	396, -196, -166, 418, -289, -88, -289, -88, 328, 417,
	418, 183, 183, -207, -208, -166, -282, -281, -364, -365,
	-362, 182, 165, 366, 126, 32, 114, -227, 354, 114,
	253, 114, 114, 32, 237, 225, 237, 225, -158, 341,
	114, -283, 385, -274, -88, 416, 98, 32, -274, -239,
	-240, -322, -241, -178, 416, -184, -190, -234, -234, -234,
	-202, -203, -175, -356, -357, -357, 417, -73, -325, -137,
	387, 354, 387, 373, -208, -72, 25, 78, 107, 417,
	421, -229, 31, 414, -260, 416, -344, 416, -137, -323,
	142, -228, -324, -324, 139, 70, 399, 354, 417, 357,
	-279, -205, 267, 321, 279, 309, 8, 7, 7, 421,
	-351, -190, 139, -227, -227, 310, -73, 139, -73, 418,
	-190, -202, -190, -319, -271, -345, 416, -272, 292, 293,
	421, -149, 33, 102, 193, -190, 393, -289, -289, 354,
	-413, 335, -296, -289, 217, 228, 360, 125, 367, 104,
	232, 142, 416, -290, -290, -235, -289, 415, 425, 417,
	418, -289, 415, 415, 421, -306, -307, 108, -289, 418,
	-412, 421, -223, -289, -235, -235, 417, 417, 354, 354,
	354, 354, 416, -390, 246, 416, 416, -289, 32, 421,
	421, 421, 421, 417, 417, 421, 417, 142, 417, 417,
	417, 417, 417, -262, 256, 417, 10, 11, 407, 408,
	409, 410, 137, 411, 412, 405, 406, 404, 397, 398,
	399, 68, 211, 294, 13, 14, 15, 183, 160, -290,
	-290, -290, 417, -294, -295, 142, 139, 393, 393, 393,
	393, 32, -258, -258, -258, 417, 142, -235, 416, 417,
	-283, -321, -232, 2, -317, -186, -351, -283, -283, -235,
	-289, -317, -317, -252, 373, 237, 188, -317, -311, 417,
	-397, -347, -313, -312, -347, -288, -287, 140, 223, 417,
	-236, 2, -312, -312, -351, -184, -221, -313, 417, 418,
	-150, -190, -178, -185, -166, 225, -281, 157, -157, 225,
	-327, -185, 416, 416, 193, 193, -178, -185, 157, -178,
	157, -185, -185, -403, 267, 233, -289, 206, 266, 226,
	-151, 278, -88, 393, 416, -192, 278, -198, -346, -346,
	-247, 278, -191, -356, 387, 393, -175, -152, -88, 393,
	416, -176, -153, 278, 393, -190, -134, 156, 232, 409,
	-351, -128, 5, 228, -128, 417, 421, 165, -177, 165,
	-183, -167, -88, -190, 142, 4, -191, -356, -356, -356,
	-88, -190, 114, -190, 114, -159, 110, -411, 399, -175,
	-224, -223, -289, -246, -276, 285, 237, -222, -179, -178,
	378, -184, -246, -231, 421, 142, 399, 418, -222, -155,
	-155, -155, -155, -155, 142, -136, 240, -135, -166, 5,
	-227, 23, -356, 417, -327, 414, 415, 7, 7, 416,
	-347, -137, -227, 142, -41, 387, 266, 92, 338, 252,
	165, -348, -348, -278, 364, 66, 267, -348, 338, 310,
	-73, -166, -272, -289, -315, -190, 422, -289, -289, -290,
	-290, 142, 416, -289, -300, 28, 28, 417, -285, -289,
	409, -351, 417, -298, 111, -289, 349, -351, 409, 417,
	380, -412, -412, -412, 5, 216, 153, 215, -261, 215,
	-261, -261, 7, -391, -181, 416, -166, 385, -223, 417,
	-342, -327, -289, -289, -289, -347, -289, -294, -289, -342,
	-327, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	104, 225, 232, -290, -295, -294, -289, -289, -327, 417,
	417, 417, -235, -72, -243, 148, -324, 421, -243, -243,
	417, -252, 416, -289, -317, 415, 417, 421, -312, 415,
	421, 424, 399, -313, 417, 418, -221, -311, -351, 354,
	354, 114, 225, 375, -366, -363, -289, -226, -316, -178,
	-378, 416, -166, -374, -375, -173, 416, 416, -148, 107,
	313, -266, 114, -155, 114, -155, 391, 416, 416, 354,
	-264, 73, -292, -173, -235, 354, 354, 253, -292, -292,
	-235, 354, -292, 117, -137, 142, 337, -209, 168, -282,
	-167, 416, -177, 416, 416, -221, -190, -324, -248, -162,
	-265, 373, -176, 416, -176, -160, 198, -411, -354, -379,
	-269, -267, -246, -238, 226, 72, 417, 421, 418, -283,
	-240, -232, -289, 2, 417, -88, 421, 416, 399, 399,
	239, -138, -138, 7, 415, 417, -347, 417, -227, 240,
	-187, -175, -190, -188, -202, -190, 238, 417, -149, -176,
	28, 28, -289, -300, 417, -289, -289, 415, -289, 418,
	5, -289, 417, 417, 417, 417, -392, -166, -289, 417,
	417, 417, 421, 417, 417, 417, -295, 142, 104, 232,
	416, 417, 417, -297, 150, 46, -317, -297, -297, -227,
	-286, -347, -287, -176, 414, -312, -313, -351, 418, -178,
	-185, -281, 114, -367, 73, -368, 60, 126, 78, 225,
	228, 366, 262, 57, 98, 271, 32, 417, 417, 421,
	-174, 60, -174, -289, 416, -226, -227, 225, 98, 225,
	98, 91, 362, -178, -185, -227, -227, -190, -178, -185,
	416, 417, -192, -191, -356, 417, -176, 71, -357, 350,
	-210, -211, 160, 416, -226, 416, -227, -207, 32, -137,
	416, 144, 237, -226, 237, -161, 197, -411, -354, -158,
	-246, -275, 416, 237, -88, -179, 2, -224, 399, -135,
	-136, -356, -356, 91, 91, 415, 417, -42, -43, 165,
	73, 255, -213, -212, 252, 232, -149, -289, -289, 417,
	-351, 409, -412, -386, 252, 417, -289, -290, 142, 416,
	-300, -387, 386, -289, -235, -387, -387, 417, -313, -347,
	-312, -281, -185, -189, -182, -166, 126, 157, 228, 193,
	416, -290, -190, 416, 2, -280, -406, 77, 333, -316,
	-149, -189, -149, 417, -235, 417, 417, 228, 228, -289,
	-327, -155, -155, 417, 417, 354, 354, -235, 354, 354,
	393, -292, 250, -226, 417, -226, 417, 417, -88, -226,
	-190, 417, -190, -411, -354, -159, 105, -227, 73, -269,
	-296, 417, 416, 416, 421, 24, 416, 24, 416, -188,
	338, 417, -224, 46, 417, -290, -300, 417, -388, -389,
	-181, -312, 415, -368, -182, 225, -289, -168, 416, -289,
	-209, 416, -174, -412, 271, -154, 60, 416, 416, -178,
	-185, -412, 416, 416, -292, -190, 417, -280, 417, -209,
	417, -265, 416, -354, -160, 368, 226, 417, -185, -246,
	-357, -357, -43, -227, -227, -190, -393, 266, 293, -235,
	417, 421, 32, 114, 417, -369, 212, -166, 417, -210,
	-227, -149, 417, -190, -147, 373, -189, -215, -214, -212,
	-217, -216, -212, 417, -235, -235, 416, -209, -280, -210,
	-280, 416, -226, -161, 313, -283, 417, 417, 417, 417,
	417, -394, -395, 38, 363, 82, -289, -394, -389, -391,
	126, -370, -373, -372, 237, 143, 251, 318, 417, 332,
	383, 417, -221, -289, 417, 421, 378, 417, 421, 378,
	417, 417, -227, -210, -209, -209, -226, 417, -239, -137,
	-137, -395, 259, 138, 292, 259, 138, -182, -372, 237,
	-373, 237, 368, 101, -369, -214, 160, -216, 142, 417,
	-210, -210, 417, -283, 28, -371, 222, 283, 51, 313,
	-371, -370, 416, 416, -156, 51, 283, -280, -395, 21,
	228, 98, -235, -235, -209, 417, 417, -210, -210, 354,
	416, -235, 417, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 182, 184, 186, 0, 0, 0, 209, 211, 213,
	214, -2, 0, 0, 0, 242, 243, 245, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	381, 382, 0, 851, -2, 0, 360, 362, 371, 373,
	375, 377, 378, 0, 440, 442, 444, 446, 448, 450,
	452, 454, 456, 457, 459, 461, 463, 465, 467, 469,
	471, 473, 475, 477, 479, 481, 483, 485, 487, 489,
	-2, 763, 765, 767, 769, -2, 62, 64, 66, 68,
	70, 72, 87, 217, 219, 221, 223, 226, 228, 230,
	888, 248, 250, 252, 254, 256, -2, 902, 0, 0,
	0, -2, 0, -2, -2, -2, 781, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 864, 866, 868,
	870, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, -2, -2, -2,
	-2, 0, 0, 1518, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597,
	1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1405, 1459, 1408, 1403, 183, 185, 187, 188, 0,
	0, 0, 0, 0, 0, 666, 1444, 1457, 1458, 1459,
	1462, 1463, 1464, 1518, 0, 210, 212, 215, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	339, 1607, 341, 343, 0, 0, 0, 0, 236, 237,
	238, 239, 240, 241, 244, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 338, 336, 1439, 281, 282, 0,
	321, 322, 323, 324, 325, 326, 328, 285, 287, 289,
	290, 292, 294, 296, 298, 300, 302, 304, 306, 307,
	309, 311, 312, 314, 316, 317, 319, 726, 0, 0,
	0, 0, 0, 165, 0, 353, 347, 352, 354, 356,
	357, 358, 359, 0, 163, 0, 0, 599, 334, 332,
	0, 159, 0, 0, 760, 0, 353, 1486, 351, 761,
	762, 0, 0, 756, 757, 1636, 791, 361, 363, 372,
	374, 376, 379, -2, -2, 1729, -2, 402, -2, 410,
	1732, 1638, 413, 0, 415, -2, 418, 441, 443, 445,
	447, 449, 451, 453, 455, 458, 460, 462, 464, 466,
	468, 470, 472, 474, 476, 478, 480, 482, 484, 486,
	488, 490, 491, 0, 0, 0, 0, 0, 495, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 494, 496, 497, 498, 0, 542, 581, 582,
	764, 766, 768, 0, 707, 890, 63, 65, 67, 69,
	71, 218, 220, 222, 224, 227, 229, -2, 862, 863,
	249, 251, 253, 255, 257, -2, 0, 894, 894, 894,
	0, 0, 863, 861, 0, 364, 0, 366, 0, 495,
	369, 370, 422, 423, 1102, 0, 0, 0, 0, 0,
	1227, 1180, -2, -2, 1212, 1214, 1710, 1729, 0, 1216,
	1217, 0, 1219, 1223, 1224, 0, 1382, 1451, 1446, 1411,
	1412, 1413, 1414, 0, 0, 1417, 0, 1419, 1420, 1421,
	1286, 1237, -2, -2, -2, 1455, 1016, 1017, 1018, 1019,
	1020, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1741, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 0, 1699,
	1716, 1722, 1717, 1707, 1256, -2, -2, 1525, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1711, 1712, -2, 1714, -2,
	-2, 1721, -2, 1725, 1726, -2, -2, 1731, -2, -2,
	-2, 1735, 1736, -2, 1473, 1069, 1742, 1743, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1754, 1755, 1756, 1757,
	1758, 1759, 793, 771, 784, 793, 773, 774, 775, 776,
	777, 782, 783, 786, 0, 778, 779, 780, 880, 1613,
	883, 666, 881, 865, 867, 0, 869, 0, 0, 0,
	874, 897, 895, 0, 933, 878, 879, 889, 948, 0,
	0, 968, 968, 959, 0, 990, 0, 1456, 0, 0,
	0, 0, 0, -2, 1459, 1741, 1752, 1753, 2, 79,
	0, 1716, 990, 81, 0, 1716, 84, 0, 1716, 0,
	-2, 88, 0, 1716, 166, 167, 1469, 1470, 1474, 1475,
	1476, 1477, 91, 0, 1435, 99, 0, 1716, 1402, 0,
	1432, 1478, 1479, 1480, 1481, 1482, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 0, 1429, 0,
	0, 591, 1399, 1404, 592, 1409, 0, 189, 190, 191,
	192, 193, 1716, 195, 196, 0, 198, 199, 1716, 201,
	202, 0, 204, 0, 0, 0, 0, 0, 225, 666,
	1716, 0, 232, 1440, 0, 690, 1716, 688, 1443, -2,
	1716, 710, 713, 1716, 715, 666, 717, 1442, -2, 1466,
	887, 1716, 807, 340, 342, 0, 235, 0, 820, 0,
	822, 0, 841, 996, 148, 1716, 260, 279, 148, 1716,
	263, 148, 1716, 266, 148, 1716, 269, 1397, 148, 1716,
	272, 273, 1716, 275, 168, 276, 1716, 278, 335, 0,
	0, -2, 329, 1445, -2, 327, 286, 288, 291, 293,
	295, 297, 299, 301, 303, 305, 308, 310, 313, 315,
	318, 320, -2, 0, 160, 0, 0, 0, 0, 597,
	598, 0, 0, 0, 758, 759, 0, 0, 0, 383,
	0, 0, 0, 0, 790, 380, 0, 399, 0, 401,
	1706, -2, -2, 405, 794, 798, 799, 800, 0, 0,
	0, 0, 412, 0, 0, 0, 416, 419, 0, 492,
	493, 0, 0, 503, 504, 505, 506, 507, 0, 510,
	531, 546, 0, 0, 514, 516, 596, 518, 0, 0,
	520, 0, 522, 0, 524, 0, 526, 0, 528, 530,
	532, 547, 534, 0, 0, 0, 545, 0, 551, 0,
	554, 555, 556, 0, 558, 559, 560, 0, 0, 0,
	568, 570, 0, 580, 0, 499, 500, 148, 994, -2,
	0, 857, 911, 912, 0, 0, 0, 0, 892, 893,
	0, 0, 0, 853, 854, 365, 0, 368, 0, 0,
	0, 0, 1317, 1318, 1319, 1320, 1321, 1322, 1325, 1326,
	1323, 1324, 1327, 1328, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1331, 1332, 0, 0, 1334, 0, 1336, 0,
	0, 0, 0, 0, 0, 1159, 1161, 1390, 0, 0,
	1333, 1107, 1108, 1109, 1144, 1145, 0, 1213, 1387, 1386,
	1215, 0, 1339, -2, 1340, 0, 0, 1218, 1426, 1225,
	1226, 1339, 0, 1381, 0, 0, 1416, 0, 1099, 1288,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 1067, 1074, 1071, 1070, 1055, 0,
	1054, 0, 0, 1052, 0, 0, 0, 1056, 0, 1362,
	-2, 0, 0, 0, 0, 0, 0, 770, -2, 772,
	0, 788, 0, 882, 0, 0, 937, 1391, 1395, 1396,
	937, 937, 0, 0, 1340, 0, 0, 0, 0, 987,
	987, 987, 985, 962, 0, 968, 0, -2, 0, 968,
	968, 0, 978, 0, 978, -2, 959, 0, 0, 991,
	992, 0, 0, 100, 753, 119, 0, 753, 753, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 115, 107,
	108, 0, 0, 85, 691, 0, 694, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 117, 0, 141, 143, 0, 0,
	0, 0, 981, 590, 0, 0, 1460, 1407, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 1446, 1447, 605,
	0, 0, 0, 0, 686, 689, 0, 708, 0, 886,
	0, 0, 0, 0, 1716, 722, 1431, 1465, 0, 1716,
	809, 0, 1000, 0, 823, 0, 0, 997, 0, 258,
	0, 146, 147, 0, 261, 0, 264, 0, 267, 0,
	0, 270, 0, 0, 0, 0, 0, 889, 0, 180,
	0, 345, 355, 0, 0, 889, 0, 1342, 1008, 1011,
	1012, 1013, 1099, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1075, 1069, 1085, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1065, 0, 1040, 1040, 1040, 1057,
	1058, 1076, 1077, 1079, 1081, 1083, 1009, 1010, 1075, 1075,
	1072, 1073, 180, 0, 349, 0, 981, 385, 981, 387,
	0, 576, 0, 0, 0, 0, -2, 407, 0, 796,
	0, 801, 431, 432, 433, 803, 804, 411, 434, 435,
	436, 437, 438, 439, 0, 683, 0, 685, 1422, 0,
	408, 424, 409, 414, 0, 420, 0, 0, 508, 509,
	511, 512, 513, 517, 0, 584, 1628, 594, 519, 521,
	523, 525, 527, 889, 536, 0, 538, 889, 549, 552,
	557, 561, 562, 563, 564, 565, 566, 0, 0, 0,
	706, 0, 860, 909, 910, 915, 919, 920, 923, 926,
	927, 917, 1102, 875, 876, 877, 903, 904, 736, 0,
	0, 367, 1103, 1004, 1005, 1059, 1060, 1061, 1062, 1063,
	1104, 1105, 1428, 0, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, -2, -2, -2, -2, -2, -2,
	-2, -2, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, -2, -2, -2, 1142, 1143, -2, 1335,
	1337, 0, 1390, 0, -2, 0, -2, -2, -2, -2,
	1156, 0, 1158, 1163, 1165, 1167, 0, 0, 0, 0,
	1389, 1177, 1373, 0, 0, 1314, 1315, 1316, 1162, 0,
	0, 1388, 1385, 0, 0, 1338, 1222, 0, 0, 0,
	1346, 1380, 1376, 0, 1448, 1454, 1228, 900, 0, 0,
	0, 0, 1235, 0, 1427, 1086, 1087, 1088, 1089, 1090,
	1091, 1100, 1296, 0, 0, 0, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 0, 1349, -2, -2, -2,
	-2, -2, -2, -2, 0, 1270, 0, 0, 1282, 0,
	1284, 0, 1272, 1340, 1359, 0, 0, 1183, 0, 0,
	0, 1227, 0, 1275, 1340, 1367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 1372, 787, 884,
	0, 0, 1000, 0, 0, 0, 1394, 1000, 1000, 0,
	932, 0, 0, 0, 0, 0, 0, 982, 986, 983,
	984, 0, 0, 968, 978, 945, 0, 0, 1430, 0,
	953, -2, 978, 978, 0, 955, 977, 0, 666, 967,
	957, -2, 0, -2, 0, 0, 0, 0, 752, 121,
	1716, 0, 150, 0, 0, 656, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 692, 693, 695, 701,
	703, 0, 697, 1425, 0, 698, 0, 700, 702, 704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 1401, 0, 0, 171, 980,
	0, 1400, 1410, 0, 194, 197, 200, 203, 181, 665,
	0, 0, 0, 0, 604, -2, 606, 608, 609, 610,
	611, 1563, 1466, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 817,
	0, 902, 0, 839, 825, 0, 0, 0, 839, 843,
	844, 846, 847, 0, 0, 998, 280, 148, 148, 148,
	1398, 148, 148, 169, 274, 277, 337, 283, 330, 0,
	0, 0, 0, 0, 0, 331, 0, 0, 0, 333,
	0, 1001, 1003, 0, 1014, 0, 1067, 0, 157, 180,
	0, 0, 384, 389, 0, 577, 0, 0, 400, 0,
	795, 802, 0, 428, 0, 430, 684, 1424, 1423, 0,
	421, 501, 0, 595, 593, 535, 539, 889, 541, 0,
	578, 579, 583, 995, 0, 921, 0, 918, 924, 925,
	0, 906, 734, 735, 0, 0, 0, -2, -2, 0,
	0, 0, 1178, -2, 1157, 1160, 1164, 1166, 1168, 0,
	0, 0, 0, 0, 0, 0, 1179, 1383, 1386, 1312,
	0, 1341, 1344, 1345, 0, 0, 1377, 0, 0, 0,
	0, 0, 899, 900, 900, 900, 1234, 0, 0, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1255, 1038, 0, 1267, 0, 1269, 1064,
	1281, 1283, 1271, 0, 0, 1273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1186,
	1187, 1188, 1274, 1365, 1366, 0, 0, 1078, 1080, 1082,
	1084, 0, 0, 0, 0, 1280, 0, 1371, 889, 934,
	929, 1392, 981, 936, 938, 1393, 1433, 929, 929, 0,
	1341, 970, 0, 972, 0, 0, 0, 974, 0, 963,
	0, 965, 978, 950, 0, 0, 943, 0, 942, 968,
	0, 954, 956, 958, 1448, 666, 976, 0, 993, 0,
	120, 740, 0, 0, 1434, 0, 123, 1716, 131, 0,
	633, 0, 0, 0, 0, 0, 755, 132, 1716, 148,
	1716, 148, 133, 136, 0, 140, 138, 0, 0, 624,
	101, 753, 104, 0, 0, 746, 0, 696, 699, 705,
	86, 0, 748, 738, 0, 0, 737, 142, 105, 0,
	0, 750, 103, 0, 0, 0, 180, 0, 0, 1406,
	1461, 205, 207, 208, 206, 613, 0, 1466, 0, 1466,
	0, 1438, 602, 666, 0, 981, 690, 711, -2, 714,
	716, 724, 0, 0, 0, 813, 817, 0, 816, 887,
	914, 901, 999, 818, 839, 0, 0, 0, 828, 830,
	827, 824, 821, 1000, 0, 0, 0, 0, 0, 259,
	262, 265, 268, 271, 0, 178, 1595, 176, 173, 175,
	344, 0, 0, 0, 1343, 0, 1006, 0, 0, 0,
	0, 158, 348, 0, 386, 0, 0, 0, 0, 0,
	0, 397, 398, -2, 426, 427, 429, 425, 0, 537,
	540, 548, 0, 0, 905, 736, 0, 1106, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 1374, 0, 1385,
	1220, 1221, 1313, 1347, 1375, 1379, 0, 1449, 1453, 1229,
	0, 0, 0, 0, 1418, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 0, 1294, 1295, 1299, 1441, 0, 0, 1240,
	0, 0, 0, 0, 0, 0, 1348, 1358, 1360, 1184,
	1185, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, -2, -2, -2, 1202, 1203, 1204, -2, -2, -2,
	0, 0, 0, 1361, 1363, 1364, 1368, 1369, 0, 1277,
	1278, 1279, 1370, 0, 931, 0, 935, 0, 931, 931,
	896, 971, 0, 989, 973, 948, 964, 0, 961, 946,
	0, 947, 0, 978, 968, 0, 975, 960, -2, 0,
	0, 0, 0, 149, 631, 655, 0, 0, 727, 733,
	733, 0, 1436, 1238, 1239, 0, 0, 0, 125, 0,
	0, 0, 0, 129, 0, 135, 139, 0, 0, 0,
	0, 0, 112, 0, 0, 0, 0, 0, 111, 114,
	0, 0, 110, 0, 155, 0, 0, 621, 0, 607,
	0, 0, 0, 0, 605, 0, 231, 180, 687, 709,
	0, 0, 0, 0, 0, 815, 817, 0, 808, 809,
	839, 913, 819, 837, 838, 836, 0, 0, 0, 902,
	845, 842, 848, 849, 0, 164, 0, 0, 0, 0,
	346, 0, 0, 0, 1007, 1015, 0, 1068, 350, 0,
	571, 572, 619, 0, 575, 502, 916, 922, 907, 736,
	0, 0, -2, 0, 1171, -2, -2, 1384, 1378, 0,
	1415, 900, 1230, 1232, 1233, 1101, 1301, 1298, 0, 1285,
	1250, 1251, 0, 1253, 1254, 1039, 1357, 0, 0, 0,
	0, 1276, 885, 1290, 0, 0, 939, 1290, 1290, 0,
	968, 966, 944, 940, 0, 951, 978, 1449, 0, 742,
	744, 122, 0, 632, 0, 635, 0, 0, 0, 0,
	642, 643, 0, 0, 0, 0, 0, 657, 664, 0,
	736, 0, 736, 0, 0, 0, 0, 0, 145, 0,
	0, 754, 0, 148, 148, 0, 0, 741, 0, 0,
	0, 0, 747, 749, 739, 0, 751, 0, 170, 0,
	600, 620, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 723, 0, 0, 0, 805, 817, 0, 810, 811,
	234, 0, 0, 0, 826, 829, 831, 914, 0, 177,
	0, 172, 174, 0, 0, 1002, 1066, 388, 390, 0,
	0, 396, 573, 618, 0, 0, 908, -2, -2, 1172,
	1450, 1452, 0, 902, 0, 1287, 0, -2, 0, 0,
	0, 871, 0, 930, 928, 872, 873, 988, 978, 0,
	952, 124, 0, 636, 637, 1437, 639, 0, 641, 644,
	0, 646, 1468, 0, 650, 613, 0, 661, 662, 728,
	729, 732, 730, 733, 900, 659, 0, 126, 127, 144,
	152, 128, 134, 0, 0, 0, 0, 900, 0, 0,
	0, 979, 0, 0, 664, 0, 654, 613, 603, 0,
	724, 720, 0, 0, 812, 813, 0, 0, 0, 839,
	850, 179, 0, 0, 0, 392, 0, 394, 0, 617,
	0, 1231, 1304, 0, 1252, -2, 0, 1210, 1289, 1291,
	0, 949, 941, 634, 638, 0, 0, 670, 0, 0,
	621, 0, 736, 0, 0, 154, 0, 0, 0, 743,
	745, 0, 0, 0, 113, 0, 653, 613, 664, 621,
	664, 0, 0, 814, 815, 0, 833, 1000, 835, 840,
	0, 0, 391, 0, 0, 574, 0, 0, 0, 1300,
	1211, 0, 0, 0, 645, 675, 0, 0, 0, 658,
	0, 731, 1229, 666, 130, 0, 151, 0, 625, 0,
	0, 628, 0, 0, 0, 0, 0, 621, 613, 601,
	613, 0, 0, 806, 0, 834, 180, 180, 393, 395,
	1297, 1302, 1305, -2, 1682, 1515, 0, 1303, 1292, 1293,
	0, 647, 671, 672, 0, 667, 668, 669, 1467, 648,
	649, 663, 670, 153, 622, 0, 0, 623, 0, 0,
	116, 118, 0, 651, 621, 621, 0, 721, 1000, 161,
	162, 0, 1307, 1308, 1309, 1310, 1311, 640, 673, 0,
	674, 0, 0, 0, 675, 626, 0, 629, 0, 616,
	652, 718, 664, 832, 0, 676, 0, 679, 680, 0,
	677, 660, 0, 0, 612, 614, 615, 613, 1306, 678,
	681, 682, 0, 0, 621, 621, 0, 719, 627, 0,
	0, 0, 621, 630,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 405, 3, 411, 406, 3,
	416, 417, 409, 407, 421, 408, 418, 410, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 425, 420,
	397, 399, 398, 401, 422, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 414, 3, 415, 412, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 423, 404, 424, 402,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 400,
	57740, 403, 57741, 413, 57742, 419, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1006
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1012
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1018
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1027
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1029
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1034
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1035
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1036
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1038
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1039
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1041
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1042
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1043
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1044
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1048
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1052
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1064
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1144
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1148
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1152
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1163
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1175
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1204
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1208
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1214
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1218
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1224
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1236
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1247
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1254
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1264
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1274
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1284
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1309
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1313
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1319
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1329
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1345
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1369
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1372
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1392
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1402
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1421
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1449
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1472
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1476
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1482
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1486
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1496
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1500
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1505
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1506
		{
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1509
		{
			return unimplemented(sqllex, "alter using")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1510
		{
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1534
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1537
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1567
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1571
		{
			sqlVAL.str = "CSV"
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1602
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1605
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1625
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1629
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1633
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1639
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1649
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1653
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1663
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1667
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1671
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1677
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1687
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1691
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1694
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1710
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1711
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1712
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1713
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1731
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1736
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1763
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1765
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1769
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1772
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1782
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1805
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1808
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1812
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1817
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1823
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1824
		{
			sqlVAL.str = ""
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1833
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1834
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1836
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1837
		{
			return helpWith(sqllex, "CREATE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1840
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1841
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1842
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1847
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1858
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1865
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1869
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1891
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1901
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1924
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1925
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1926
		{
			return helpWith(sqllex, "DROP")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1929
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1930
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1931
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1932
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1933
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1941
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1948
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1956
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1960
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1963
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1975
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1978
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2009
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2024
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2032
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2036
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2039
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2047
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2058
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2095
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2098
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2102
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2103
		{
			return helpWith(sqllex, "DELETE")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2104
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2105
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2107
		{
			return helpWith(sqllex, "INSERT")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2108
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2110
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2111
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2113
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2116
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2117
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2119
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2120
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2128
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2129
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2162
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2172
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2184
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2188
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2202
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2213
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2244
		{
			return helpWith(sqllex, "GRANT")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2268
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2272
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2275
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2280
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2284
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2295
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2313
		{
			return helpWith(sqllex, "RESET")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2314
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2329
		{
			return helpWith(sqllex, "RESET")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2340
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2354
		{
			return helpWith(sqllex, "USE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2358
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2359
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2360
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2361
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2362
		{
			return helpWith(sqllex, "USE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2363
		{
			return unimplemented(sqllex, "set local")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2379
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2394
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2397
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2415
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2423
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2427
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2431
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2437
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2441
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2447
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2451
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2455
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2481
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2531
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2536
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2544
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2556
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2563
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2569
		{
			return unimplemented(sqllex, "set from current")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2570
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2578
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2583
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2590
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2594
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2600
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2611
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2617
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2627
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2631
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2635
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2639
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2643
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2649
		{
			sqlVAL.union.val = tree.Low
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = tree.Normal
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2657
		{
			sqlVAL.union.val = tree.High
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2668
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2672
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2681
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2697
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2698
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2699
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2700
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2701
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2702
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2703
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2704
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2706
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2707
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2708
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2709
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2710
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2711
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2712
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2713
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2714
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2715
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2716
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2717
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2718
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2720
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2721
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{
			return helpWith(sqllex, "SHOW")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2730
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2732
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.str = "client_encoding"
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.str = "timezone"
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2747
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2761
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2765
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2779
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2795
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2808
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2812
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2817
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2855
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2863
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2871
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2874
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2876
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2884
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2892
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2895
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2897
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2900
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2927
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2958
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2964
		{
			sqlVAL.union.val = true
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2965
		{
			sqlVAL.union.val = false
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2978
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2982
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3034
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3046
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3051
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3056
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3060
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3071
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3082
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3089
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3092
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3103
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3111
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3118
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3123
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3128
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3143
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3150
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3171
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3174
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3182
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3189
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3194
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3314
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3318
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3322
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3361
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3365
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3370
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3374
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3383
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3390
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3394
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3406
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3415
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3418
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3466
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3505
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3511
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3521
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3527
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3541
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3548
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3553
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3564
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3571
		{
			sqlVAL.str = ""
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3578
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 622:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3598
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3604
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 627:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3624
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 630:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3645
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3660
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3666
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3670
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3674
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3678
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3682
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3686
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3690
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3708
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3712
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3716
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3720
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3724
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3728
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3732
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3744
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3748
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 651:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3755
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3799
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3837
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3861
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3865
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3871
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3880
		{
			return unimplemented(sqllex, "match full")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3881
		{
			return unimplemented(sqllex, "match partial")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3882
		{
			return unimplemented(sqllex, "match simple")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3883
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3890
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3894
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3898
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3902
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3906
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3912
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3918
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3926
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3930
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3934
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3942
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3952
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3956
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3974
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3982
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3990
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3997
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4001
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4004
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4005
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4006
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4009
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4011
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4013
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4015
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4016
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4019
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4021
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4030
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4033
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4045
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4048
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4052
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4056
		{
			sqlVAL.union.val = nil
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4066
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4073
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4088
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4133
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4151
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4156
		{
			sqlVAL.union.val = true
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4160
		{
			sqlVAL.union.val = false
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4166
		{
			sqlVAL.union.val = true
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4170
		{
			sqlVAL.union.val = false
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4189
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4192
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4193
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4196
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4197
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4201
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.Descending
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4215
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4222
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4226
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4232
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4236
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4240
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4244
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4248
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4250
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4254
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4258
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4268
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4274
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4278
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4284
		{
			sqlVAL.union.val = true
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4288
		{
			sqlVAL.union.val = false
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4293
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4294
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4305
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4327
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4338
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4343
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4344
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4360
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4363
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4368
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4381
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4386
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4395
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4396
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4397
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4412
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4415
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4416
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4420
		{
			sqlVAL.str = ""
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4424
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4428
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4432
		{
			sqlVAL.str = ""
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4442
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4448
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4452
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4458
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4462
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4475
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4477
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4481
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4495
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4501
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4507
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4511
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 805:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4521
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4541
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4545
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4549
		{
			sqlVAL.str = ""
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4559
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.str = ""
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.str = ""
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4584
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4585
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4597
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4604
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4611
		{
			return helpWith(sqllex, "INSERT")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4622
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4629
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4647
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4651
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4655
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4661
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4665
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4685
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4689
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4693
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4699
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4703
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4705
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4711
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4716
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4720
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 840:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4737
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4748
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4752
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4753
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4777
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4824
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4830
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4834
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4849
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4853
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4857
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4865
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4869
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4876
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4911
		{
			return helpWith(sqllex, "SELECT")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4912
		{
			return helpWith(sqllex, "VALUES")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4913
		{
			return helpWith(sqllex, "TABLE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4948
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4962
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4974
		{
			return helpWith(sqllex, "SELECT")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4978
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4987
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4996
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5011
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5018
		{
			return helpWith(sqllex, "TABLE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5030
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5033
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5034
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 885:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5048
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5056
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5057
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5061
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5064
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5067
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5068
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5072
		{
			sqlVAL.union.val = true
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5076
		{
			sqlVAL.union.val = false
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = false
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5086
		{
			sqlVAL.union.val = true
		}
	case 896:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5092
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5097
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5098
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5101
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5102
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5106
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5110
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5116
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5122
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5132
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5140
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5149
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5169
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5173
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5188
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5202
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5215
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5226
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5229
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5230
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5247
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5251
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5257
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5280
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5283
		{
			return helpWith(sqllex, "VALUES")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5285
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5297
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5300
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5308
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5318
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5322
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5328
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5334
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5339
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5362
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5370
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5374
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5401
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5415
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5422
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5423
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5424
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5426
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5429
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5434
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5436
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5440
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = nil
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5466
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5467
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5471
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = true
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = false
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5505
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5509
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5513
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5517
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5521
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5525
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5535
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5542
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5548
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5561
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5565
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5573
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5579
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5580
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5595
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5600
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5601
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5602
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5603
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5607
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5624
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5638
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5642
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5654
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5668
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5677
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5692
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5699
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5701
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5718
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5727
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5745
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5749
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5757
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5761
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5773
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5781
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5785
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5789
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5801
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5805
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5809
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5829
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5833
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5837
		{
			sqlVAL.union.val = nil
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5844
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5848
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5856
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5864
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5868
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5872
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5888
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5898
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5920
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5940
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5944
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5948
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5952
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5956
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5962
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5972
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5983
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6001
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6015
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6019
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6024
		{
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6025
		{
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6030
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6034
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6042
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6050
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6054
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6073
		{
			sqlVAL.union.val = tree.Year
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6077
		{
			sqlVAL.union.val = tree.Month
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6081
		{
			sqlVAL.union.val = tree.Day
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6085
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6093
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6099
		{
			sqlVAL.union.val = tree.Month
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6103
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6111
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6115
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6127
		{
			sqlVAL.union.val = nil
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6133
		{
			sqlVAL.union.val = tree.Second
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6136
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6160
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6164
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6168
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6171
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6180
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6184
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6188
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6192
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6196
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6200
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6252
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6264
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6280
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6296
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6300
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6399
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6465
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6482
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6486
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6490
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6613
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6627
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6676
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), Star: true}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6715
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6730
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6731
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6744
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6755
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6762
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6771
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6772
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6776
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6830
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6845
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6848
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6853
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6858
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6863
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6865
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6868
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6870
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6873
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6875
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6878
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6880
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6883
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6885
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6892
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6893
		{
			return unimplemented(sqllex, "treat")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6903
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6914
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6919
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6924
		{
			return unimplemented(sqllex, "within group")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6925
		{
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6940
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6944
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6960
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6968
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6976
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.str = ""
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7022
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7023
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7024
		{
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7027
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7028
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7034
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7035
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7036
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7037
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7038
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7059
		{
			sqlVAL.union.val = tree.Any
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = tree.Some
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7067
		{
			sqlVAL.union.val = tree.All
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7072
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7074
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = tree.Div
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7078
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7080
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7082
		{
			sqlVAL.union.val = tree.LT
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = tree.GT
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7084
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = tree.LE
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7086
		{
			sqlVAL.union.val = tree.GE
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = tree.NE
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7091
		{
			sqlVAL.union.val = tree.Like
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7094
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7106
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7112
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7122
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7156
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7203
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7228
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7232
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7236
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7242
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7248
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7254
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7258
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7262
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7306
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7310
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7317
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7334
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7350
		{
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7389
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7399
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7416
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7473
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7484
		{
			return unimplemented(sqllex, "func const")
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7493
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7495
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7499
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7503
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7523
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7534
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7544
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7677
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7736
		{
			sqlVAL.str = ""
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7742
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
