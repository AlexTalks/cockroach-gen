// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:641
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10375

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1128,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	195, 955,
	207, 955,
	222, 250,
	315, 250,
	324, 757,
	352, 250,
	361, 757,
	397, 757,
	421, 250,
	446, 757,
	-2, 0,
	-1, 78,
	222, 254,
	-2, 0,
	-1, 79,
	114, 1128,
	201, 1128,
	431, 1128,
	432, 1128,
	-2, 0,
	-1, 91,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1073,
	-1, 123,
	134, 666,
	221, 666,
	318, 646,
	366, 646,
	414, 666,
	-2, 0,
	-1, 124,
	4, 1130,
	21, 1130,
	22, 1130,
	23, 1130,
	24, 1130,
	25, 1130,
	27, 1130,
	28, 1130,
	34, 1130,
	39, 1130,
	40, 1130,
	41, 1130,
	42, 1130,
	43, 1130,
	44, 1130,
	45, 1130,
	47, 1130,
	48, 1130,
	49, 1130,
	51, 1130,
	52, 1130,
	53, 1130,
	54, 1130,
	55, 1130,
	58, 1130,
	59, 1130,
	60, 1130,
	61, 1130,
	63, 1130,
	64, 1130,
	65, 1130,
	69, 1130,
	70, 1130,
	71, 1130,
	72, 1130,
	73, 1130,
	74, 1130,
	75, 1130,
	78, 1130,
	79, 1130,
	80, 1130,
	81, 1130,
	83, 1130,
	85, 1130,
	86, 1130,
	87, 1130,
	89, 1130,
	91, 1130,
	92, 1130,
	100, 1130,
	101, 1130,
	102, 1130,
	103, 1130,
	105, 1130,
	106, 1130,
	107, 1130,
	109, 1130,
	110, 1130,
	111, 1130,
	113, 1130,
	114, 1130,
	116, 1130,
	119, 1130,
	120, 1130,
	121, 1130,
	123, 1130,
	125, 1130,
	126, 1130,
	128, 1130,
	129, 1130,
	130, 1130,
	131, 1130,
	132, 1130,
	133, 1130,
	134, 1130,
	135, 1130,
	136, 1130,
	137, 1130,
	138, 1130,
	139, 1130,
	140, 1130,
	141, 1130,
	143, 1130,
	149, 1130,
	150, 1130,
	151, 1130,
	152, 1130,
	156, 1130,
	158, 1130,
	162, 1130,
	163, 1130,
	164, 1130,
	165, 1130,
	166, 1130,
	167, 1130,
	169, 1130,
	170, 1130,
	172, 1130,
	173, 1130,
	175, 1130,
	176, 1130,
	177, 1130,
	178, 1130,
	179, 1130,
	180, 1130,
	181, 1130,
	182, 1130,
	183, 1130,
	185, 1130,
	186, 1130,
	188, 1130,
	189, 1130,
	190, 1130,
	191, 1130,
	195, 1130,
	196, 1130,
	197, 1130,
	198, 1130,
	201, 1130,
	202, 1130,
	203, 1130,
	205, 1130,
	207, 1130,
	209, 1130,
	211, 1130,
	212, 1130,
	213, 1130,
	215, 1130,
	219, 1130,
	220, 1130,
	221, 1130,
	222, 1130,
	223, 1130,
	225, 1130,
	226, 1130,
	228, 1130,
	229, 1130,
	231, 1130,
	232, 1130,
	235, 1130,
	236, 1130,
	237, 1130,
	240, 1130,
	241, 1130,
	242, 1130,
	243, 1130,
	245, 1130,
	246, 1130,
	247, 1130,
	248, 1130,
	249, 1130,
	250, 1130,
	251, 1130,
	252, 1130,
	253, 1130,
	254, 1130,
	255, 1130,
	257, 1130,
	259, 1130,
	260, 1130,
	261, 1130,
	262, 1130,
	263, 1130,
	265, 1130,
	267, 1130,
	269, 1130,
	271, 1130,
	272, 1130,
	273, 1130,
	274, 1130,
	275, 1130,
	278, 1130,
	281, 1130,
	282, 1130,
	283, 1130,
	284, 1130,
	287, 1130,
	288, 1130,
	289, 1130,
	291, 1130,
	293, 1130,
	294, 1130,
	295, 1130,
	296, 1130,
	297, 1130,
	298, 1130,
	299, 1130,
	300, 1130,
	301, 1130,
	302, 1130,
	304, 1130,
	305, 1130,
	306, 1130,
	307, 1130,
	308, 1130,
	309, 1130,
	310, 1130,
	311, 1130,
	312, 1130,
	314, 1130,
	316, 1130,
	317, 1130,
	318, 1130,
	319, 1130,
	320, 1130,
	321, 1130,
	322, 1130,
	323, 1130,
	324, 1130,
	325, 1130,
	332, 1130,
	334, 1130,
	335, 1130,
	336, 1130,
	337, 1130,
	338, 1130,
	339, 1130,
	340, 1130,
	341, 1130,
	343, 1130,
	345, 1130,
	346, 1130,
	347, 1130,
	348, 1130,
	349, 1130,
	350, 1130,
	352, 1130,
	353, 1130,
	354, 1130,
	355, 1130,
	356, 1130,
	357, 1130,
	358, 1130,
	359, 1130,
	361, 1130,
	362, 1130,
	363, 1130,
	364, 1130,
	365, 1130,
	366, 1130,
	368, 1130,
	369, 1130,
	370, 1130,
	371, 1130,
	372, 1130,
	374, 1130,
	375, 1130,
	376, 1130,
	378, 1130,
	380, 1130,
	381, 1130,
	382, 1130,
	383, 1130,
	384, 1130,
	385, 1130,
	386, 1130,
	387, 1130,
	388, 1130,
	389, 1130,
	390, 1130,
	391, 1130,
	392, 1130,
	394, 1130,
	395, 1130,
	396, 1130,
	398, 1130,
	399, 1130,
	400, 1130,
	401, 1130,
	402, 1130,
	403, 1130,
	404, 1130,
	406, 1130,
	407, 1130,
	408, 1130,
	409, 1130,
	410, 1130,
	412, 1130,
	414, 1130,
	415, 1130,
	416, 1130,
	417, 1130,
	418, 1130,
	420, 1130,
	421, 1130,
	422, 1130,
	424, 1130,
	425, 1130,
	428, 1130,
	429, 1130,
	430, 1130,
	431, 1130,
	432, 1130,
	433, 1130,
	434, 1130,
	436, 1130,
	439, 1130,
	440, 1130,
	441, 1130,
	442, 1130,
	443, 1130,
	444, 1130,
	446, 1130,
	447, 1130,
	448, 1130,
	453, 1130,
	454, 1130,
	455, 1130,
	456, 1130,
	457, 1130,
	458, 1130,
	-2, 0,
	-1, 125,
	1, 1007,
	211, 1007,
	314, 1007,
	322, 1007,
	461, 1007,
	484, 1007,
	-2, 0,
	-1, 127,
	1, 1007,
	484, 1007,
	-2, 0,
	-1, 128,
	1, 1007,
	484, 1007,
	-2, 0,
	-1, 129,
	1, 1007,
	411, 1007,
	484, 1007,
	-2, 0,
	-1, 154,
	127, 1101,
	144, 1101,
	157, 1101,
	204, 1101,
	234, 1101,
	276, 1101,
	286, 1101,
	426, 1101,
	-2, 1076,
	-1, 187,
	4, 1137,
	5, 1137,
	6, 1137,
	7, 1137,
	8, 1137,
	9, 1137,
	10, 1137,
	21, 1137,
	22, 1137,
	23, 1137,
	24, 1137,
	25, 1137,
	27, 1137,
	28, 1137,
	34, 1137,
	35, 1137,
	39, 1137,
	40, 1137,
	41, 1137,
	42, 1137,
	43, 1137,
	44, 1137,
	45, 1137,
	47, 1137,
	48, 1137,
	49, 1137,
	51, 1137,
	52, 1137,
	53, 1137,
	54, 1137,
	55, 1137,
	56, 1137,
	57, 1137,
	58, 1137,
	59, 1137,
	60, 1137,
	61, 1137,
	63, 1137,
	64, 1137,
	65, 1137,
	67, 1137,
	69, 1137,
	70, 1137,
	71, 1137,
	72, 1137,
	73, 1137,
	74, 1137,
	75, 1137,
	78, 1137,
	79, 1137,
	80, 1137,
	81, 1137,
	83, 1137,
	85, 1137,
	86, 1137,
	87, 1137,
	89, 1137,
	90, 1137,
	91, 1137,
	92, 1137,
	93, 1137,
	94, 1137,
	95, 1137,
	96, 1137,
	97, 1137,
	98, 1137,
	99, 1137,
	100, 1137,
	101, 1137,
	102, 1137,
	103, 1137,
	104, 1137,
	105, 1137,
	106, 1137,
	107, 1137,
	108, 1137,
	109, 1137,
	110, 1137,
	111, 1137,
	113, 1137,
	114, 1137,
	116, 1137,
	119, 1137,
	120, 1137,
	121, 1137,
	123, 1137,
	125, 1137,
	126, 1137,
	128, 1137,
	129, 1137,
	130, 1137,
	131, 1137,
	132, 1137,
	133, 1137,
	134, 1137,
	135, 1137,
	136, 1137,
	137, 1137,
	138, 1137,
	139, 1137,
	140, 1137,
	141, 1137,
	142, 1137,
	143, 1137,
	149, 1137,
	150, 1137,
	151, 1137,
	152, 1137,
	156, 1137,
	158, 1137,
	161, 1137,
	162, 1137,
	163, 1137,
	164, 1137,
	165, 1137,
	166, 1137,
	167, 1137,
	169, 1137,
	170, 1137,
	172, 1137,
	173, 1137,
	175, 1137,
	176, 1137,
	177, 1137,
	178, 1137,
	179, 1137,
	180, 1137,
	181, 1137,
	182, 1137,
	183, 1137,
	184, 1137,
	185, 1137,
	186, 1137,
	188, 1137,
	189, 1137,
	190, 1137,
	191, 1137,
	195, 1137,
	196, 1137,
	197, 1137,
	198, 1137,
	200, 1137,
	201, 1137,
	202, 1137,
	203, 1137,
	205, 1137,
	207, 1137,
	208, 1137,
	209, 1137,
	210, 1137,
	211, 1137,
	212, 1137,
	213, 1137,
	214, 1137,
	215, 1137,
	219, 1137,
	220, 1137,
	221, 1137,
	222, 1137,
	223, 1137,
	225, 1137,
	226, 1137,
	228, 1137,
	229, 1137,
	230, 1137,
	231, 1137,
	232, 1137,
	233, 1137,
	235, 1137,
	236, 1137,
	237, 1137,
	238, 1137,
	239, 1137,
	240, 1137,
	241, 1137,
	242, 1137,
	243, 1137,
	245, 1137,
	246, 1137,
	247, 1137,
	248, 1137,
	249, 1137,
	250, 1137,
	251, 1137,
	252, 1137,
	253, 1137,
	254, 1137,
	255, 1137,
	257, 1137,
	258, 1137,
	259, 1137,
	260, 1137,
	261, 1137,
	262, 1137,
	263, 1137,
	264, 1137,
	265, 1137,
	266, 1137,
	267, 1137,
	268, 1137,
	269, 1137,
	270, 1137,
	271, 1137,
	272, 1137,
	273, 1137,
	274, 1137,
	275, 1137,
	278, 1137,
	282, 1137,
	283, 1137,
	284, 1137,
	287, 1137,
	288, 1137,
	289, 1137,
	290, 1137,
	291, 1137,
	292, 1137,
	293, 1137,
	294, 1137,
	295, 1137,
	296, 1137,
	297, 1137,
	298, 1137,
	299, 1137,
	300, 1137,
	301, 1137,
	302, 1137,
	304, 1137,
	305, 1137,
	306, 1137,
	307, 1137,
	308, 1137,
	309, 1137,
	310, 1137,
	311, 1137,
	312, 1137,
	314, 1137,
	316, 1137,
	317, 1137,
	318, 1137,
	319, 1137,
	320, 1137,
	321, 1137,
	322, 1137,
	323, 1137,
	324, 1137,
	325, 1137,
	332, 1137,
	334, 1137,
	335, 1137,
	336, 1137,
	337, 1137,
	338, 1137,
	339, 1137,
	340, 1137,
	341, 1137,
	343, 1137,
	344, 1137,
	345, 1137,
	346, 1137,
	347, 1137,
	348, 1137,
	349, 1137,
	350, 1137,
	352, 1137,
	353, 1137,
	354, 1137,
	355, 1137,
	356, 1137,
	357, 1137,
	358, 1137,
	359, 1137,
	361, 1137,
	362, 1137,
	363, 1137,
	364, 1137,
	365, 1137,
	366, 1137,
	367, 1137,
	368, 1137,
	369, 1137,
	370, 1137,
	371, 1137,
	372, 1137,
	373, 1137,
	374, 1137,
	375, 1137,
	376, 1137,
	378, 1137,
	380, 1137,
	381, 1137,
	382, 1137,
	383, 1137,
	384, 1137,
	385, 1137,
	386, 1137,
	387, 1137,
	388, 1137,
	389, 1137,
	390, 1137,
	391, 1137,
	392, 1137,
	394, 1137,
	395, 1137,
	396, 1137,
	398, 1137,
	399, 1137,
	400, 1137,
	401, 1137,
	402, 1137,
	403, 1137,
	404, 1137,
	406, 1137,
	407, 1137,
	408, 1137,
	409, 1137,
	410, 1137,
	412, 1137,
	414, 1137,
	415, 1137,
	416, 1137,
	417, 1137,
	418, 1137,
	419, 1137,
	420, 1137,
	421, 1137,
	422, 1137,
	424, 1137,
	425, 1137,
	427, 1137,
	428, 1137,
	429, 1137,
	430, 1137,
	431, 1137,
	432, 1137,
	433, 1137,
	434, 1137,
	435, 1137,
	436, 1137,
	439, 1137,
	440, 1137,
	441, 1137,
	442, 1137,
	443, 1137,
	444, 1137,
	446, 1137,
	447, 1137,
	448, 1137,
	453, 1137,
	454, 1137,
	455, 1137,
	456, 1137,
	457, 1137,
	458, 1137,
	459, 1137,
	465, 1137,
	472, 1137,
	473, 1137,
	474, 1137,
	481, 1137,
	485, 1137,
	-2, 0,
	-1, 566,
	160, 1835,
	411, 1835,
	464, 1835,
	483, 1835,
	-2, 0,
	-1, 567,
	160, 1914,
	411, 1914,
	464, 1914,
	483, 1914,
	-2, 0,
	-1, 568,
	160, 1823,
	411, 1823,
	464, 1823,
	483, 1823,
	-2, 0,
	-1, 570,
	160, 2003,
	411, 2003,
	464, 2003,
	483, 2003,
	-2, 0,
	-1, 572,
	160, 2032,
	411, 2032,
	464, 2032,
	483, 2032,
	-2, 0,
	-1, 579,
	160, 1929,
	411, 1929,
	464, 1929,
	483, 1929,
	-2, 504,
	-1, 607,
	483, 1779,
	486, 1779,
	-2, 719,
	-1, 608,
	483, 1781,
	486, 1781,
	-2, 720,
	-1, 609,
	483, 1780,
	486, 1780,
	-2, 721,
	-1, 610,
	486, 1714,
	-2, 722,
	-1, 652,
	446, 935,
	-2, 758,
	-1, 691,
	4, 953,
	21, 953,
	22, 953,
	23, 953,
	24, 953,
	25, 953,
	27, 953,
	28, 953,
	34, 953,
	39, 953,
	40, 953,
	41, 953,
	42, 953,
	43, 953,
	44, 953,
	45, 953,
	47, 953,
	48, 953,
	49, 953,
	51, 953,
	52, 953,
	53, 953,
	54, 953,
	55, 953,
	58, 953,
	59, 953,
	60, 953,
	61, 953,
	63, 953,
	64, 953,
	65, 953,
	69, 953,
	70, 953,
	71, 953,
	72, 953,
	73, 953,
	74, 953,
	75, 953,
	78, 953,
	79, 953,
	80, 953,
	81, 953,
	83, 953,
	85, 953,
	86, 953,
	87, 953,
	89, 953,
	91, 953,
	92, 953,
	100, 953,
	101, 953,
	102, 953,
	103, 953,
	105, 953,
	106, 953,
	107, 953,
	109, 953,
	110, 953,
	111, 953,
	113, 953,
	114, 953,
	116, 953,
	119, 953,
	120, 953,
	121, 953,
	123, 953,
	125, 953,
	126, 953,
	128, 953,
	129, 953,
	130, 953,
	131, 953,
	132, 953,
	133, 953,
	134, 953,
	135, 953,
	136, 953,
	137, 953,
	138, 953,
	139, 953,
	140, 953,
	141, 953,
	143, 953,
	149, 953,
	150, 953,
	151, 953,
	152, 953,
	156, 953,
	158, 953,
	162, 953,
	163, 953,
	164, 953,
	165, 953,
	166, 953,
	167, 953,
	169, 953,
	170, 953,
	172, 953,
	173, 953,
	175, 953,
	176, 953,
	177, 953,
	178, 953,
	179, 953,
	180, 953,
	181, 953,
	182, 953,
	183, 953,
	185, 953,
	186, 953,
	188, 953,
	189, 953,
	190, 953,
	191, 953,
	195, 953,
	196, 953,
	197, 953,
	198, 953,
	201, 953,
	202, 953,
	203, 953,
	205, 953,
	207, 953,
	209, 953,
	211, 953,
	212, 953,
	213, 953,
	215, 953,
	219, 953,
	220, 953,
	221, 953,
	222, 953,
	223, 953,
	225, 953,
	226, 953,
	228, 953,
	229, 953,
	231, 953,
	232, 953,
	235, 953,
	236, 953,
	237, 953,
	240, 953,
	241, 953,
	242, 953,
	243, 953,
	245, 953,
	246, 953,
	247, 953,
	248, 953,
	249, 953,
	250, 953,
	251, 953,
	252, 953,
	253, 953,
	254, 953,
	255, 953,
	257, 953,
	259, 953,
	260, 953,
	261, 953,
	262, 953,
	263, 953,
	265, 953,
	267, 953,
	269, 953,
	271, 953,
	272, 953,
	273, 953,
	274, 953,
	275, 953,
	278, 953,
	282, 953,
	283, 953,
	284, 953,
	287, 953,
	288, 953,
	289, 953,
	291, 953,
	293, 953,
	294, 953,
	295, 953,
	296, 953,
	297, 953,
	298, 953,
	299, 953,
	300, 953,
	301, 953,
	302, 953,
	304, 953,
	305, 953,
	306, 953,
	307, 953,
	308, 953,
	309, 953,
	310, 953,
	311, 953,
	312, 953,
	314, 953,
	316, 953,
	317, 953,
	318, 953,
	319, 953,
	320, 953,
	321, 953,
	322, 953,
	323, 953,
	324, 953,
	325, 953,
	332, 953,
	334, 953,
	335, 953,
	336, 953,
	337, 953,
	338, 953,
	339, 953,
	340, 953,
	341, 953,
	343, 953,
	345, 953,
	346, 953,
	347, 953,
	348, 953,
	349, 953,
	350, 953,
	352, 953,
	353, 953,
	354, 953,
	355, 953,
	356, 953,
	357, 953,
	358, 953,
	359, 953,
	361, 953,
	362, 953,
	363, 953,
	364, 953,
	365, 953,
	366, 953,
	368, 953,
	369, 953,
	370, 953,
	371, 953,
	372, 953,
	374, 953,
	375, 953,
	376, 953,
	378, 953,
	380, 953,
	381, 953,
	382, 953,
	383, 953,
	384, 953,
	385, 953,
	386, 953,
	387, 953,
	388, 953,
	389, 953,
	390, 953,
	391, 953,
	392, 953,
	394, 953,
	395, 953,
	396, 953,
	398, 953,
	399, 953,
	400, 953,
	401, 953,
	402, 953,
	403, 953,
	404, 953,
	406, 953,
	407, 953,
	408, 953,
	409, 953,
	410, 953,
	412, 953,
	414, 953,
	415, 953,
	416, 953,
	417, 953,
	418, 953,
	420, 953,
	421, 953,
	422, 953,
	424, 953,
	425, 953,
	428, 953,
	429, 953,
	430, 953,
	431, 953,
	432, 953,
	433, 953,
	434, 953,
	436, 953,
	439, 953,
	440, 953,
	441, 953,
	442, 953,
	443, 953,
	444, 953,
	446, 953,
	447, 953,
	448, 953,
	453, 953,
	454, 953,
	455, 953,
	456, 953,
	457, 953,
	458, 953,
	-2, 0,
	-1, 755,
	318, 647,
	366, 647,
	-2, 0,
	-1, 756,
	318, 646,
	366, 646,
	-2, 594,
	-1, 760,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 761,
	1, 718,
	157, 718,
	480, 718,
	482, 718,
	484, 718,
	-2, 0,
	-1, 769,
	1, 650,
	480, 650,
	482, 650,
	484, 650,
	-2, 0,
	-1, 772,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 773,
	1, 678,
	480, 678,
	482, 678,
	484, 678,
	-2, 0,
	-1, 774,
	1, 681,
	480, 681,
	482, 681,
	484, 681,
	-2, 0,
	-1, 779,
	1, 697,
	480, 697,
	482, 697,
	484, 697,
	-2, 0,
	-1, 780,
	1, 699,
	480, 699,
	482, 699,
	484, 699,
	-2, 0,
	-1, 823,
	144, 1139,
	157, 1139,
	234, 1139,
	276, 1139,
	-2, 1080,
	-1, 836,
	144, 1138,
	157, 1138,
	234, 1138,
	276, 1138,
	-2, 1077,
	-1, 860,
	483, 1778,
	-2, 512,
	-1, 888,
	5, 1770,
	481, 1768,
	-2, 1759,
	-1, 896,
	5, 1791,
	481, 1788,
	-2, 1779,
	-1, 897,
	5, 1792,
	481, 1789,
	-2, 1780,
	-1, 905,
	483, 1776,
	-2, 1758,
	-1, 906,
	481, 2110,
	-2, 1777,
	-1, 929,
	481, 2109,
	-2, 1793,
	-1, 930,
	5, 1300,
	-2, 2080,
	-1, 931,
	5, 1301,
	-2, 2081,
	-1, 932,
	5, 1302,
	-2, 2095,
	-1, 933,
	5, 1303,
	-2, 2060,
	-1, 934,
	5, 1304,
	-2, 2093,
	-1, 935,
	5, 1312,
	-2, 2072,
	-1, 936,
	5, 1299,
	-2, 2068,
	-1, 937,
	5, 1299,
	-2, 2067,
	-1, 938,
	5, 1299,
	-2, 2086,
	-1, 939,
	5, 1310,
	-2, 2062,
	-1, 940,
	5, 1315,
	-2, 2061,
	-1, 941,
	5, 1317,
	-2, 2105,
	-1, 944,
	5, 1339,
	-2, 2098,
	-1, 945,
	5, 1331,
	-2, 2099,
	-1, 946,
	5, 1339,
	-2, 2100,
	-1, 947,
	5, 1335,
	-2, 2101,
	-1, 948,
	5, 1286,
	-2, 2073,
	-1, 949,
	5, 1287,
	-2, 2074,
	-1, 976,
	5, 1322,
	-2, 2106,
	-1, 977,
	5, 1323,
	-2, 2096,
	-1, 978,
	5, 1324,
	447, 1324,
	-2, 2063,
	-1, 979,
	5, 1325,
	447, 1325,
	-2, 2064,
	-1, 1016,
	481, 1788,
	-2, 1779,
	-1, 1017,
	481, 1789,
	-2, 1780,
	-1, 1046,
	160, 2032,
	411, 2032,
	464, 2032,
	483, 2032,
	-2, 0,
	-1, 1049,
	1, 490,
	484, 490,
	-2, 1015,
	-1, 1174,
	334, 1754,
	474, 1754,
	-2, 1752,
	-1, 1186,
	485, 1754,
	-2, 1755,
	-1, 1187,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 1235,
	324, 757,
	446, 757,
	-2, 249,
	-1, 1258,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 1264,
	4, 953,
	21, 953,
	22, 953,
	23, 953,
	24, 953,
	25, 953,
	27, 953,
	28, 953,
	34, 953,
	39, 953,
	40, 953,
	41, 953,
	42, 953,
	43, 953,
	44, 953,
	45, 953,
	47, 953,
	48, 953,
	49, 953,
	51, 953,
	52, 953,
	53, 953,
	54, 953,
	55, 953,
	58, 953,
	59, 953,
	60, 953,
	61, 953,
	63, 953,
	64, 953,
	65, 953,
	69, 953,
	70, 953,
	71, 953,
	72, 953,
	73, 953,
	74, 953,
	75, 953,
	78, 953,
	79, 953,
	80, 953,
	81, 953,
	83, 953,
	85, 953,
	86, 953,
	87, 953,
	89, 953,
	91, 953,
	92, 953,
	100, 953,
	101, 953,
	102, 953,
	103, 953,
	105, 953,
	106, 953,
	107, 953,
	109, 953,
	110, 953,
	111, 953,
	113, 953,
	114, 953,
	116, 953,
	119, 953,
	120, 953,
	121, 953,
	123, 953,
	125, 953,
	126, 953,
	128, 953,
	129, 953,
	130, 953,
	131, 953,
	132, 953,
	133, 953,
	134, 953,
	135, 953,
	136, 953,
	137, 953,
	138, 953,
	139, 953,
	140, 953,
	141, 953,
	149, 953,
	150, 953,
	151, 953,
	152, 953,
	156, 953,
	158, 953,
	162, 953,
	163, 953,
	164, 953,
	165, 953,
	166, 953,
	167, 953,
	169, 953,
	170, 953,
	172, 953,
	173, 953,
	175, 953,
	176, 953,
	177, 953,
	178, 953,
	179, 953,
	180, 953,
	181, 953,
	182, 953,
	183, 953,
	185, 953,
	186, 953,
	188, 953,
	189, 953,
	190, 953,
	191, 953,
	196, 953,
	197, 953,
	198, 953,
	201, 953,
	202, 953,
	203, 953,
	205, 953,
	207, 953,
	209, 953,
	211, 953,
	212, 953,
	213, 953,
	215, 953,
	219, 953,
	220, 953,
	221, 953,
	222, 953,
	223, 953,
	225, 953,
	226, 953,
	228, 953,
	229, 953,
	231, 953,
	232, 953,
	235, 953,
	236, 953,
	237, 953,
	240, 953,
	241, 953,
	242, 953,
	243, 953,
	245, 953,
	246, 953,
	247, 953,
	248, 953,
	249, 953,
	250, 953,
	251, 953,
	252, 953,
	253, 953,
	254, 953,
	255, 953,
	257, 953,
	259, 953,
	260, 953,
	261, 953,
	262, 953,
	263, 953,
	265, 953,
	269, 953,
	271, 953,
	272, 953,
	273, 953,
	274, 953,
	275, 953,
	278, 953,
	280, 953,
	282, 953,
	283, 953,
	284, 953,
	287, 953,
	288, 953,
	289, 953,
	291, 953,
	293, 953,
	294, 953,
	295, 953,
	296, 953,
	297, 953,
	298, 953,
	299, 953,
	300, 953,
	301, 953,
	302, 953,
	304, 953,
	305, 953,
	306, 953,
	307, 953,
	308, 953,
	309, 953,
	310, 953,
	311, 953,
	312, 953,
	314, 953,
	316, 953,
	317, 953,
	318, 953,
	319, 953,
	320, 953,
	321, 953,
	322, 953,
	323, 953,
	324, 953,
	325, 953,
	332, 953,
	334, 953,
	335, 953,
	336, 953,
	337, 953,
	338, 953,
	339, 953,
	340, 953,
	341, 953,
	343, 953,
	345, 953,
	346, 953,
	347, 953,
	348, 953,
	349, 953,
	350, 953,
	352, 953,
	353, 953,
	354, 953,
	355, 953,
	356, 953,
	357, 953,
	358, 953,
	359, 953,
	361, 953,
	362, 953,
	363, 953,
	364, 953,
	365, 953,
	366, 953,
	368, 953,
	369, 953,
	370, 953,
	371, 953,
	372, 953,
	374, 953,
	375, 953,
	376, 953,
	378, 953,
	380, 953,
	381, 953,
	382, 953,
	383, 953,
	384, 953,
	385, 953,
	386, 953,
	387, 953,
	388, 953,
	389, 953,
	390, 953,
	391, 953,
	392, 953,
	394, 953,
	395, 953,
	396, 953,
	398, 953,
	399, 953,
	400, 953,
	401, 953,
	402, 953,
	403, 953,
	404, 953,
	406, 953,
	407, 953,
	408, 953,
	409, 953,
	410, 953,
	412, 953,
	414, 953,
	415, 953,
	416, 953,
	417, 953,
	418, 953,
	420, 953,
	421, 953,
	422, 953,
	424, 953,
	425, 953,
	428, 953,
	429, 953,
	430, 953,
	431, 953,
	432, 953,
	433, 953,
	434, 953,
	436, 953,
	439, 953,
	440, 953,
	441, 953,
	442, 953,
	443, 953,
	444, 953,
	446, 953,
	447, 953,
	448, 953,
	453, 953,
	454, 953,
	455, 953,
	456, 953,
	457, 953,
	458, 953,
	-2, 0,
	-1, 1326,
	1, 365,
	480, 365,
	482, 365,
	484, 365,
	-2, 1100,
	-1, 1329,
	4, 2104,
	11, 2104,
	12, 2104,
	14, 2104,
	15, 2104,
	16, 2104,
	17, 2104,
	18, 2104,
	19, 2104,
	21, 2104,
	22, 2104,
	23, 2104,
	24, 2104,
	25, 2104,
	27, 2104,
	28, 2104,
	31, 2104,
	32, 2104,
	34, 2104,
	36, 2104,
	39, 2104,
	40, 2104,
	41, 2104,
	42, 2104,
	43, 2104,
	44, 2104,
	45, 2104,
	47, 2104,
	48, 2104,
	49, 2104,
	51, 2104,
	52, 2104,
	53, 2104,
	54, 2104,
	55, 2104,
	58, 2104,
	59, 2104,
	60, 2104,
	61, 2104,
	63, 2104,
	64, 2104,
	65, 2104,
	66, 2104,
	69, 2104,
	70, 2104,
	71, 2104,
	72, 2104,
	73, 2104,
	74, 2104,
	75, 2104,
	76, 2104,
	78, 2104,
	79, 2104,
	80, 2104,
	81, 2104,
	83, 2104,
	84, 2104,
	85, 2104,
	86, 2104,
	87, 2104,
	89, 2104,
	90, 2104,
	91, 2104,
	92, 2104,
	100, 2104,
	101, 2104,
	102, 2104,
	103, 2104,
	105, 2104,
	106, 2104,
	107, 2104,
	109, 2104,
	110, 2104,
	111, 2104,
	113, 2104,
	114, 2104,
	116, 2104,
	119, 2104,
	120, 2104,
	121, 2104,
	123, 2104,
	125, 2104,
	126, 2104,
	128, 2104,
	129, 2104,
	130, 2104,
	131, 2104,
	132, 2104,
	133, 2104,
	134, 2104,
	135, 2104,
	136, 2104,
	137, 2104,
	138, 2104,
	139, 2104,
	140, 2104,
	141, 2104,
	145, 2104,
	146, 2104,
	147, 2104,
	148, 2104,
	149, 2104,
	150, 2104,
	151, 2104,
	152, 2104,
	155, 2104,
	156, 2104,
	158, 2104,
	161, 2104,
	162, 2104,
	163, 2104,
	164, 2104,
	165, 2104,
	166, 2104,
	167, 2104,
	169, 2104,
	170, 2104,
	172, 2104,
	173, 2104,
	175, 2104,
	176, 2104,
	177, 2104,
	178, 2104,
	179, 2104,
	180, 2104,
	181, 2104,
	182, 2104,
	183, 2104,
	184, 2104,
	185, 2104,
	186, 2104,
	187, 2104,
	188, 2104,
	189, 2104,
	190, 2104,
	191, 2104,
	193, 2104,
	194, 2104,
	196, 2104,
	197, 2104,
	198, 2104,
	200, 2104,
	201, 2104,
	202, 2104,
	203, 2104,
	205, 2104,
	207, 2104,
	208, 2104,
	209, 2104,
	210, 2104,
	211, 2104,
	212, 2104,
	213, 2104,
	214, 2104,
	215, 2104,
	217, 2104,
	218, 2104,
	219, 2104,
	220, 2104,
	221, 2104,
	222, 2104,
	223, 2104,
	225, 2104,
	226, 2104,
	228, 2104,
	229, 2104,
	230, 2104,
	231, 2104,
	232, 2104,
	233, 2104,
	235, 2104,
	236, 2104,
	237, 2104,
	240, 2104,
	241, 2104,
	242, 2104,
	243, 2104,
	244, 2104,
	245, 2104,
	246, 2104,
	247, 2104,
	248, 2104,
	249, 2104,
	250, 2104,
	251, 2104,
	252, 2104,
	253, 2104,
	254, 2104,
	255, 2104,
	257, 2104,
	258, 2104,
	259, 2104,
	260, 2104,
	261, 2104,
	262, 2104,
	263, 2104,
	265, 2104,
	268, 2104,
	269, 2104,
	271, 2104,
	272, 2104,
	273, 2104,
	274, 2104,
	275, 2104,
	278, 2104,
	282, 2104,
	283, 2104,
	284, 2104,
	285, 2104,
	287, 2104,
	288, 2104,
	289, 2104,
	291, 2104,
	293, 2104,
	294, 2104,
	295, 2104,
	296, 2104,
	297, 2104,
	298, 2104,
	299, 2104,
	300, 2104,
	301, 2104,
	302, 2104,
	304, 2104,
	305, 2104,
	306, 2104,
	307, 2104,
	308, 2104,
	309, 2104,
	310, 2104,
	311, 2104,
	312, 2104,
	314, 2104,
	316, 2104,
	317, 2104,
	318, 2104,
	319, 2104,
	320, 2104,
	321, 2104,
	322, 2104,
	323, 2104,
	324, 2104,
	325, 2104,
	332, 2104,
	333, 2104,
	334, 2104,
	335, 2104,
	336, 2104,
	337, 2104,
	338, 2104,
	339, 2104,
	340, 2104,
	341, 2104,
	343, 2104,
	344, 2104,
	345, 2104,
	346, 2104,
	347, 2104,
	348, 2104,
	349, 2104,
	350, 2104,
	351, 2104,
	352, 2104,
	353, 2104,
	354, 2104,
	355, 2104,
	356, 2104,
	357, 2104,
	358, 2104,
	359, 2104,
	361, 2104,
	362, 2104,
	363, 2104,
	364, 2104,
	365, 2104,
	366, 2104,
	368, 2104,
	369, 2104,
	370, 2104,
	371, 2104,
	372, 2104,
	373, 2104,
	374, 2104,
	375, 2104,
	376, 2104,
	378, 2104,
	380, 2104,
	381, 2104,
	382, 2104,
	383, 2104,
	384, 2104,
	385, 2104,
	386, 2104,
	387, 2104,
	388, 2104,
	389, 2104,
	390, 2104,
	391, 2104,
	392, 2104,
	394, 2104,
	395, 2104,
	396, 2104,
	398, 2104,
	399, 2104,
	400, 2104,
	401, 2104,
	402, 2104,
	403, 2104,
	404, 2104,
	406, 2104,
	407, 2104,
	408, 2104,
	409, 2104,
	410, 2104,
	412, 2104,
	414, 2104,
	415, 2104,
	416, 2104,
	417, 2104,
	418, 2104,
	420, 2104,
	421, 2104,
	422, 2104,
	424, 2104,
	425, 2104,
	428, 2104,
	429, 2104,
	430, 2104,
	431, 2104,
	432, 2104,
	433, 2104,
	434, 2104,
	436, 2104,
	439, 2104,
	440, 2104,
	441, 2104,
	442, 2104,
	443, 2104,
	444, 2104,
	446, 2104,
	447, 2104,
	448, 2104,
	453, 2104,
	454, 2104,
	455, 2104,
	456, 2104,
	457, 2104,
	458, 2104,
	459, 2104,
	460, 2104,
	462, 2104,
	463, 2104,
	464, 2104,
	465, 2104,
	466, 2104,
	467, 2104,
	469, 2104,
	470, 2104,
	471, 2104,
	472, 2104,
	473, 2104,
	474, 2104,
	475, 2104,
	476, 2104,
	477, 2104,
	479, 2104,
	482, 2104,
	483, 2104,
	485, 2104,
	486, 2104,
	-2, 0,
	-1, 1334,
	160, 2003,
	411, 2003,
	464, 2003,
	483, 2003,
	-2, 0,
	-1, 1366,
	318, 647,
	366, 647,
	-2, 0,
	-1, 1390,
	1, 642,
	480, 642,
	482, 642,
	484, 642,
	-2, 0,
	-1, 1391,
	1, 667,
	480, 667,
	482, 667,
	484, 667,
	-2, 0,
	-1, 1392,
	1, 649,
	480, 649,
	482, 649,
	484, 649,
	-2, 0,
	-1, 1394,
	1, 653,
	480, 653,
	482, 653,
	484, 653,
	-2, 0,
	-1, 1421,
	1, 2052,
	480, 2052,
	482, 2052,
	483, 2052,
	484, 2052,
	-2, 695,
	-1, 1422,
	1, 2000,
	480, 2000,
	482, 2000,
	483, 2000,
	484, 2000,
	-2, 696,
	-1, 1437,
	1, 1010,
	484, 1010,
	-2, 1015,
	-1, 1440,
	144, 1138,
	157, 1138,
	234, 1138,
	276, 1138,
	-2, 1081,
	-1, 1533,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1498,
	-1, 1593,
	482, 1648,
	-2, 0,
	-1, 1628,
	127, 1102,
	144, 1102,
	157, 1102,
	204, 1102,
	234, 1102,
	276, 1102,
	286, 1102,
	426, 1102,
	-2, 1217,
	-1, 1674,
	481, 1327,
	-2, 1315,
	-1, 1707,
	1, 492,
	484, 492,
	-2, 1015,
	-1, 1909,
	1, 644,
	480, 644,
	482, 644,
	484, 644,
	-2, 0,
	-1, 1910,
	1, 669,
	480, 669,
	482, 669,
	484, 669,
	-2, 0,
	-1, 1982,
	349, 1163,
	350, 1163,
	-2, 1360,
	-1, 2013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1378,
	-1, 2014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1379,
	-1, 2015,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1380,
	-1, 2016,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1381,
	-1, 2017,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1382,
	-1, 2018,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1383,
	-1, 2019,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1384,
	-1, 2020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1385,
	-1, 2032,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1397,
	-1, 2033,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1398,
	-1, 2034,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1399,
	-1, 2037,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1404,
	-1, 2043,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1408,
	-1, 2045,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1416,
	-1, 2046,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1417,
	-1, 2047,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1418,
	-1, 2048,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1419,
	-1, 2160,
	5, 1791,
	160, 1659,
	481, 1788,
	-2, 1779,
	-1, 2161,
	160, 1660,
	-2, 2056,
	-1, 2162,
	160, 1661,
	-2, 1928,
	-1, 2163,
	160, 1662,
	-2, 1846,
	-1, 2164,
	160, 1663,
	-2, 1885,
	-1, 2165,
	160, 1664,
	-2, 1923,
	-1, 2166,
	160, 1665,
	-2, 1998,
	-1, 2167,
	160, 1666,
	-2, 1481,
	-1, 2236,
	1, 1218,
	2, 1218,
	90, 1218,
	127, 1218,
	144, 1218,
	157, 1218,
	161, 1218,
	171, 1218,
	174, 1218,
	200, 1218,
	204, 1218,
	214, 1218,
	230, 1218,
	234, 1218,
	258, 1218,
	276, 1218,
	280, 1218,
	286, 1218,
	342, 1218,
	344, 1218,
	426, 1218,
	437, 1218,
	450, 1218,
	451, 1218,
	452, 1218,
	461, 1218,
	480, 1218,
	482, 1218,
	484, 1218,
	486, 1218,
	-2, 1217,
	-1, 2249,
	481, 1760,
	-2, 1774,
	-1, 2272,
	481, 1326,
	-2, 1316,
	-1, 2374,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 2528,
	281, 1166,
	-2, 2094,
	-1, 2529,
	281, 1167,
	-2, 1987,
	-1, 2533,
	349, 1725,
	350, 1725,
	-2, 1479,
	-1, 2534,
	349, 1729,
	350, 1729,
	-2, 1480,
	-1, 2535,
	349, 1726,
	350, 1726,
	-2, 1479,
	-1, 2536,
	349, 1730,
	350, 1730,
	-2, 1480,
	-1, 2549,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1406,
	-1, 2550,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1410,
	-1, 2556,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1412,
	-1, 2750,
	211, 1015,
	314, 1015,
	322, 1015,
	461, 1015,
	-2, 489,
	-1, 2849,
	1, 932,
	480, 932,
	482, 932,
	484, 932,
	-2, 1126,
	-1, 2939,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1414,
	-1, 2946,
	208, 0,
	210, 0,
	268, 0,
	-2, 1433,
	-1, 3012,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1462,
	-1, 3013,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1463,
	-1, 3014,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1464,
	-1, 3018,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1468,
	-1, 3019,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1469,
	-1, 3020,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1470,
	-1, 3064,
	481, 1761,
	-2, 1775,
	-1, 3158,
	483, 2210,
	-2, 1059,
	-1, 3209,
	208, 0,
	210, 0,
	268, 0,
	-2, 1434,
	-1, 3212,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1437,
	-1, 3213,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1439,
	-1, 3385,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1438,
	-1, 3386,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1440,
	-1, 3396,
	208, 0,
	-2, 1471,
	-1, 3524,
	208, 0,
	-2, 1472,
	-1, 3659,
	44, 0,
	184, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 2059,
}

const sqlPrivate = 57344

const sqlLast = 87682

var sqlAct = [...]int{

	219, 3456, 3792, 3658, 3425, 3669, 3545, 2680, 3561, 3428,
	3758, 3625, 3635, 3622, 2835, 3606, 2304, 3670, 3086, 3671,
	3414, 2681, 2428, 3319, 3463, 1019, 2978, 3712, 1206, 3528,
	1883, 3192, 3348, 3343, 3657, 846, 3374, 2000, 2864, 1190,
	2767, 3150, 3472, 3332, 1321, 1799, 3274, 861, 211, 837,
	2060, 3493, 3353, 2363, 2857, 3131, 2931, 1662, 2831, 1758,
	1449, 1078, 2461, 1873, 3087, 609, 1634, 1663, 2542, 2859,
	2417, 2192, 2400, 2463, 3400, 2391, 2403, 577, 1009, 2723,
	2703, 3246, 1171, 2666, 2695, 609, 2686, 3191, 2452, 1374,
	701, 2471, 2454, 1603, 2460, 1767, 2684, 2412, 2414, 2429,
	1795, 2306, 2229, 3035, 1794, 1798, 3529, 1579, 2577, 1997,
	2073, 2104, 2228, 899, 1541, 2665, 1179, 2375, 2226, 2102,
	845, 147, 1993, 1871, 1251, 2365, 2470, 2401, 4, 892,
	1783, 3457, 2231, 1062, 942, 1745, 2729, 2526, 1743, 2210,
	2093, 1437, 1604, 1981, 2057, 1964, 1790, 890, 1962, 2189,
	1733, 1342, 1305, 2340, 2833, 1327, 2422, 1000, 897, 1828,
	35, 1315, 1051, 1256, 545, 1623, 610, 2464, 213, 212,
	611, 2296, 1192, 2096, 1574, 1003, 531, 2218, 982, 2156,
	553, 90, 2074, 1613, 2146, 1450, 1525, 1963, 1451, 1827,
	1017, 1965, 154, 605, 2200, 677, 1341, 155, 561, 571,
	147, 652, 1203, 1757, 1325, 1986, 2341, 873, 695, 40,
	548, 39, 37, 556, 28, 26, 24, 1005, 1456, 750,
	1436, 980, 767, 2573, 1464, 1465, 1261, 1497, 1498, 1499,
	1507, 1508, 1509, 614, 617, 3049, 2682, 3050, 1279, 1620,
	999, 1848, 1864, 1864, 1500, 1495, 2874, 3810, 2748, 841,
	1864, 2209, 1467, 614, 617, 3796, 3795, 1513, 3774, 2209,
	2209, 3772, 3289, 3768, 836, 3289, 1059, 1804, 1176, 841,
	2638, 2639, 2873, 2656, 2657, 2658, 997, 3695, 712, 1466,
	3693, 3696, 3691, 3688, 2209, 2209, 2209, 3689, 3685, 1486,
	3207, 3039, 3686, 2202, 3680, 888, 3655, 1483, 1804, 3654,
	1804, 3653, 3650, 1804, 3649, 1876, 1876, 3644, 1876, 3642,
	1393, 3289, 3620, 3289, 983, 983, 3289, 3600, 3594, 3593,
	3588, 2264, 2209, 2209, 3289, 3587, 3581, 3526, 3507, 3289,
	1804, 2264, 1804, 3504, 1036, 2653, 3601, 3289, 842, 3465,
	824, 3510, 3445, 3466, 3444, 823, 1804, 3436, 1804, 3435,
	3406, 1804, 3387, 3289, 1804, 986, 2264, 987, 1489, 1490,
	1491, 1492, 3372, 3361, 3039, 3316, 1876, 2888, 1472, 2209,
	3307, 3288, 3211, 831, 2209, 3289, 2264, 3166, 3160, 3129,
	1862, 2904, 2904, 3130, 3059, 3057, 3042, 2962, 3060, 3058,
	2209, 1804, 2958, 2201, 2903, 2895, 2209, 1504, 2904, 2896,
	1514, 2679, 1876, 1031, 984, 2209, 1494, 1496, 2677, 2676,
	2260, 1224, 2209, 2209, 2644, 2629, 2627, 1059, 2619, 2630,
	2628, 1510, 2620, 1511, 2617, 2588, 130, 2586, 2209, 2209,
	1481, 1482, 63, 2587, 1464, 1465, 2450, 2449, 3308, 2377,
	1879, 1879, 1891, 1876, 1804, 1804, 1502, 64, 125, 2209,
	2280, 2896, 2263, 2354, 2209, 1495, 2264, 1487, 1762, 68,
	2258, 2251, 1467, 187, 2209, 1804, 2208, 2659, 58, 2576,
	2209, 2295, 1878, 1713, 1863, 42, 1879, 127, 1032, 2888,
	2397, 1512, 2541, 1803, 2099, 1015, 2293, 1599, 1202, 1466,
	3115, 41, 2934, 73, 2912, 1621, 1793, 2245, 1501, 2875,
	189, 1376, 2244, 2654, 2243, 2242, 2241, 988, 985, 830,
	187, 829, 828, 827, 826, 44, 59, 822, 2876, 3262,
	1212, 45, 1464, 1465, 821, 820, 78, 1865, 1865, 128,
	819, 818, 2506, 1532, 817, 1865, 43, 89, 816, 815,
	814, 813, 79, 86, 812, 188, 1493, 189, 811, 810,
	1467, 809, 748, 747, 746, 181, 745, 2100, 744, 743,
	742, 741, 1218, 182, 1488, 740, 739, 738, 737, 2425,
	2129, 736, 2873, 46, 1032, 735, 897, 1466, 1472, 734,
	897, 733, 732, 731, 156, 730, 1505, 3676, 729, 1223,
	728, 80, 188, 727, 726, 1081, 725, 724, 723, 1081,
	722, 1195, 721, 710, 709, 1195, 668, 629, 628, 620,
	2655, 1061, 619, 618, 591, 1066, 1494, 1496, 1055, 2201,
	583, 582, 581, 897, 565, 897, 209, 897, 208, 2101,
	2098, 156, 207, 206, 1543, 205, 204, 203, 202, 201,
	200, 1464, 1465, 199, 198, 1174, 197, 196, 1186, 195,
	194, 193, 192, 191, 1195, 190, 3223, 2115, 3070, 3053,
	1032, 2905, 1495, 1182, 2726, 2599, 1472, 1487, 187, 1467,
	2113, 3656, 1503, 2442, 1863, 1478, 1479, 1485, 1506, 1484,
	1480, 1957, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 2582, 2381, 2268, 1195, 3232, 1466, 2252, 1195, 3231,
	2235, 1741, 1195, 1262, 1262, 189, 81, 897, 1647, 1552,
	2409, 1208, 1195, 1079, 1049, 897, 47, 1180, 1582, 1068,
	1582, 2650, 2651, 2652, 1581, 1886, 1581, 1624, 2649, 2647,
	2648, 2640, 2641, 2642, 2643, 2645, 2646, 60, 2103, 1021,
	1217, 3513, 50, 153, 84, 1585, 85, 1580, 48, 1463,
	188, 1074, 129, 1168, 1173, 1195, 1198, 1395, 49, 3568,
	181, 3519, 3362, 3357, 1544, 187, 1542, 2899, 182, 187,
	1044, 897, 3267, 53, 1488, 3245, 3511, 123, 3244, 1205,
	3424, 614, 617, 1204, 1211, 1472, 1216, 126, 1222, 156,
	1464, 1465, 3238, 3237, 3236, 3229, 3228, 1885, 3227, 3222,
	3219, 3218, 189, 3128, 3074, 3135, 189, 3073, 1346, 3072,
	3063, 1495, 1464, 1465, 3032, 3031, 3030, 2954, 1467, 147,
	147, 187, 2950, 1494, 1496, 124, 2721, 1330, 1332, 2673,
	2664, 2637, 2634, 1495, 2633, 2631, 2097, 2626, 2625, 157,
	1467, 1055, 1309, 1312, 1055, 1466, 2624, 188, 2621, 2618,
	2598, 188, 897, 897, 897, 897, 897, 181, 189, 2581,
	2276, 181, 1403, 3113, 2574, 182, 2451, 1466, 1340, 182,
	1328, 2236, 1550, 1441, 1487, 2086, 1345, 1486, 187, 842,
	895, 897, 1263, 1463, 1543, 1839, 156, 897, 1462, 3,
	156, 696, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 3805, 3767, 188, 996, 2410, 894, 2359, 1282, 3766,
	3705, 1464, 1465, 181, 1809, 189, 63, 3703, 699, 698,
	187, 182, 3694, 1020, 2980, 3560, 1266, 2638, 2639, 1807,
	1394, 64, 1440, 3556, 1472, 3553, 2638, 2639, 3552, 1467,
	3551, 3544, 2424, 68, 1532, 1531, 1489, 1490, 1491, 1492,
	1435, 3538, 3508, 3492, 3491, 2063, 1472, 189, 3479, 3476,
	188, 1318, 3441, 844, 3356, 3420, 1466, 3398, 3382, 3381,
	181, 1351, 1494, 1496, 3369, 3368, 3336, 73, 182, 1367,
	3261, 1488, 3243, 1468, 1469, 1470, 1471, 1473, 1474, 3181,
	897, 897, 897, 2327, 1494, 1496, 897, 3178, 3104, 156,
	3103, 3090, 188, 1017, 3089, 1017, 3530, 2718, 3134, 1601,
	78, 3045, 181, 2945, 1529, 2906, 2069, 2889, 2851, 1438,
	182, 89, 1081, 1487, 2815, 1446, 79, 86, 897, 1445,
	2794, 609, 2770, 2769, 2743, 1679, 609, 2678, 824, 187,
	2603, 156, 2602, 823, 897, 1487, 2597, 2565, 1195, 1649,
	2128, 871, 1442, 2770, 1584, 1472, 2741, 2390, 1459, 1460,
	1659, 1588, 842, 897, 1587, 1702, 2408, 1610, 1586, 1081,
	1012, 2644, 1583, 79, 1186, 80, 189, 1575, 1573, 2274,
	2644, 1464, 1465, 2273, 1607, 1608, 2247, 1710, 2240, 1655,
	2207, 1631, 1055, 2111, 1646, 1602, 1011, 1597, 1739, 1657,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1596, 1467,
	1595, 3339, 1576, 1577, 983, 1705, 1594, 1593, 1887, 1704,
	1592, 188, 1591, 1590, 1589, 187, 1570, 147, 1569, 1568,
	1488, 181, 1567, 1566, 1493, 1565, 1466, 2114, 1564, 182,
	1650, 1563, 1562, 1561, 1560, 1559, 1558, 1557, 1673, 3263,
	2112, 1556, 1488, 1545, 1653, 1530, 1528, 1523, 1043, 1034,
	156, 1027, 189, 3215, 3069, 3056, 3048, 1638, 2585, 1676,
	2238, 1632, 3409, 3265, 3068, 2266, 1544, 2638, 2639, 2739,
	1629, 1526, 1667, 1642, 3764, 3757, 842, 1742, 1707, 3554,
	81, 1732, 3310, 2860, 1065, 3468, 3514, 3467, 3360, 614,
	617, 1195, 1195, 1600, 614, 617, 1751, 188, 1732, 1081,
	3309, 3051, 2891, 1063, 3473, 2890, 1641, 181, 1640, 1639,
	1626, 1637, 1636, 1635, 1658, 182, 1582, 153, 84, 1701,
	85, 3512, 1581, 1624, 2797, 2345, 1780, 856, 1732, 1782,
	1622, 1013, 1787, 1660, 1433, 1800, 156, 1064, 1059, 187,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 700, 2623, 3423,
	2175, 123, 2622, 1059, 2547, 1565, 1735, 1730, 1725, 2329,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 3138,
	1565, 1060, 1719, 1554, 1762, 1366, 189, 3102, 1059, 807,
	2837, 1651, 2836, 1404, 1375, 1884, 187, 3464, 1015, 1766,
	1015, 2591, 3681, 3668, 1835, 1376, 1796, 1056, 123, 124,
	3118, 3106, 2910, 3401, 1791, 3793, 2682, 2829, 2982, 2094,
	1654, 187, 2272, 157, 1598, 1578, 1836, 1805, 1239, 808,
	1840, 188, 1195, 189, 1195, 3690, 1195, 3677, 1832, 3687,
	2869, 181, 3081, 3546, 1195, 3344, 3618, 1195, 1551, 182,
	1724, 1723, 3535, 1801, 1732, 1734, 2773, 3097, 189, 2458,
	1195, 1195, 1195, 1837, 1186, 1708, 2421, 1845, 1972, 1205,
	697, 614, 617, 1204, 1470, 1471, 1473, 1474, 188, 2822,
	609, 2638, 2639, 995, 3728, 2926, 1786, 3729, 181, 1901,
	2642, 2643, 2645, 2646, 2752, 3678, 182, 2640, 2641, 2642,
	2643, 2645, 2646, 188, 3299, 1802, 1227, 2281, 3580, 1970,
	1057, 1050, 805, 181, 1853, 803, 801, 156, 1058, 799,
	796, 182, 1355, 3802, 3454, 3447, 1842, 1943, 1941, 1889,
	3120, 3117, 1819, 3116, 2299, 3078, 2299, 1818, 3077, 664,
	2596, 1905, 156, 2595, 2594, 2593, 2551, 1890, 2297, 2361,
	2297, 1402, 2353, 897, 1727, 897, 2352, 1720, 790, 2418,
	2332, 2259, 897, 2044, 1065, 1679, 1679, 1081, 1439, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 1328, 897, 1328, 897, 897, 897,
	897, 1974, 1847, 842, 1282, 842, 1850, 1064, 1850, 1851,
	1971, 1961, 1855, 1856, 1401, 2644, 665, 897, 2740, 1065,
	897, 897, 1998, 1999, 1044, 2099, 1880, 1894, 1881, 897,
	1892, 1237, 1201, 897, 2754, 897, 897, 1474, 614, 617,
	840, 1729, 2142, 1081, 2141, 2796, 2366, 1059, 1759, 897,
	897, 897, 897, 1972, 897, 897, 897, 897, 897, 897,
	897, 897, 3579, 1923, 1056, 2002, 2288, 1353, 1673, 1673,
	1969, 2911, 1064, 1728, 1755, 2001, 1272, 1270, 1271, 1269,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 1676,
	1676, 2075, 2076, 897, 1970, 1985, 1760, 1761, 2100, 1955,
	1238, 1400, 1667, 1667, 2654, 1017, 2075, 2091, 1895, 2267,
	1056, 1293, 1081, 1899, 3380, 793, 1246, 839, 2094, 1960,
	2250, 1017, 2320, 1959, 1756, 1973, 1966, 2059, 1958, 1464,
	1465, 1762, 2137, 2646, 1416, 1954, 3752, 897, 1081, 824,
	1233, 1817, 824, 824, 1989, 2342, 2343, 1990, 1991, 2090,
	1495, 2159, 2159, 2173, 3311, 2075, 1968, 1467, 2193, 2195,
	1916, 2106, 2342, 2343, 2199, 2223, 2067, 1057, 1642, 1368,
	2101, 2098, 2349, 2065, 3430, 1058, 2059, 2139, 2524, 2331,
	1867, 2539, 2140, 1869, 1466, 2143, 1951, 2144, 2145, 1874,
	1432, 2215, 2342, 2343, 3728, 1412, 2638, 2639, 2368, 841,
	842, 2071, 1195, 3295, 1913, 1971, 1348, 1631, 2248, 3647,
	842, 2655, 1746, 1057, 842, 3753, 1747, 2088, 2367, 2369,
	2319, 1058, 983, 785, 2917, 1852, 2562, 589, 1953, 1908,
	3761, 2916, 1081, 1376, 1376, 2237, 2751, 3093, 2503, 1444,
	2103, 1710, 1909, 2214, 2041, 835, 667, 666, 1055, 1024,
	1042, 2560, 1364, 1917, 3674, 1390, 2249, 2372, 1257, 1679,
	2168, 2653, 2509, 2155, 3741, 1969, 2184, 3105, 2197, 2298,
	2531, 2532, 147, 1472, 217, 3432, 2222, 3740, 2227, 2103,
	2261, 2233, 2234, 1022, 1081, 2220, 2221, 2538, 1195, 2216,
	1910, 1584, 2205, 2206, 1399, 1255, 1629, 850, 897, 2300,
	897, 719, 842, 1391, 3755, 1956, 1349, 3776, 1736, 1737,
	1748, 1494, 1496, 2257, 1059, 797, 3379, 1174, 797, 797,
	588, 786, 798, 797, 1750, 2308, 2335, 3717, 2279, 1942,
	1940, 1186, 2640, 2641, 2642, 2643, 2645, 2646, 3197, 838,
	2644, 2275, 543, 1413, 3196, 2394, 2362, 1354, 2971, 1753,
	2294, 2350, 2334, 1576, 1577, 2512, 2866, 1235, 2278, 2432,
	1059, 3293, 1487, 3788, 2557, 2282, 538, 1195, 1195, 2808,
	1195, 1762, 1673, 1012, 2802, 1012, 1025, 2097, 662, 2558,
	661, 2330, 1195, 2563, 2039, 1789, 1752, 2042, 1950, 1864,
	3675, 3084, 3547, 1676, 1779, 2472, 2373, 2378, 1753, 1011,
	1015, 1011, 2322, 3598, 2303, 1788, 1667, 1292, 2326, 2313,
	2316, 2474, 2446, 2333, 2477, 2478, 1015, 2344, 2346, 2347,
	2348, 2867, 2311, 2483, 2484, 2485, 2351, 1257, 897, 2654,
	1952, 1784, 860, 2038, 2818, 3759, 1232, 2358, 1764, 2493,
	1746, 2494, 2968, 2753, 1747, 694, 1414, 1746, 2737, 1571,
	3754, 1747, 3376, 1760, 1761, 1915, 1186, 2103, 2511, 2383,
	1205, 2385, 614, 617, 2379, 2784, 2457, 3673, 897, 1488,
	3328, 2491, 2388, 3737, 897, 897, 787, 2434, 3431, 2398,
	2508, 1785, 2553, 2866, 3094, 3294, 3716, 1753, 2476, 147,
	1186, 2479, 1186, 2480, 2488, 3286, 2416, 2447, 2427, 2423,
	2638, 2639, 2423, 2299, 2495, 2514, 2497, 2516, 2499, 2438,
	794, 2439, 2783, 2440, 2969, 3760, 1415, 2314, 1753, 2066,
	590, 3282, 587, 2790, 2507, 2448, 3193, 3392, 2559, 897,
	897, 2058, 2459, 2475, 3698, 897, 2655, 2561, 1748, 1522,
	2601, 3699, 1328, 3762, 1013, 1748, 1013, 3630, 897, 897,
	3596, 2786, 1750, 3559, 897, 897, 1612, 2510, 2219, 1750,
	897, 3777, 2085, 2055, 2232, 3375, 2284, 3283, 841, 897,
	897, 897, 1912, 2040, 3338, 897, 2310, 1411, 1023, 2286,
	3597, 1612, 2788, 2554, 3187, 897, 788, 2501, 2053, 3065,
	1468, 1469, 1470, 1471, 1473, 1474, 2521, 1907, 2520, 1037,
	720, 1350, 897, 3198, 2584, 2519, 1443, 2287, 1535, 2530,
	2928, 2525, 1540, 2522, 1752, 1378, 2575, 1041, 1985, 1363,
	1365, 1752, 2285, 2103, 3562, 1781, 789, 1616, 3672, 1749,
	3727, 2540, 3725, 3576, 2444, 2787, 3478, 3286, 3148, 3715,
	3329, 2579, 2580, 2853, 2644, 539, 2583, 1826, 3789, 1609,
	3133, 1035, 1616, 1030, 2649, 2647, 2648, 2640, 2641, 2642,
	2643, 2645, 2646, 3282, 530, 1454, 1619, 3275, 897, 897,
	897, 3194, 3377, 1988, 1865, 2490, 2552, 897, 897, 897,
	1614, 3241, 897, 3273, 2496, 1763, 2498, 1721, 2500, 3277,
	2309, 1619, 897, 1017, 1081, 2932, 1617, 1616, 897, 1453,
	897, 2049, 540, 2689, 2690, 1614, 2730, 3438, 1017, 3283,
	3437, 3418, 2050, 2517, 3534, 1753, 2051, 3782, 3149, 1718,
	2056, 1617, 1753, 2590, 1615, 3278, 1081, 3080, 2854, 3279,
	3298, 2848, 3697, 2654, 2765, 842, 1619, 3297, 1017, 541,
	2761, 542, 2441, 1081, 3276, 2402, 2697, 2711, 2315, 1615,
	2217, 2757, 1453, 2675, 2392, 1679, 1846, 2967, 1744, 1081,
	1838, 1831, 1813, 3607, 3563, 1448, 1617, 2929, 1453, 2691,
	897, 2727, 3281, 3021, 1947, 3151, 1714, 3349, 2735, 3199,
	2389, 2701, 1295, 1900, 897, 3284, 1716, 2336, 2725, 1452,
	1352, 3462, 785, 1978, 2699, 1679, 2747, 2720, 3460, 3419,
	2776, 2772, 2771, 2758, 2759, 2749, 2545, 2523, 1717, 716,
	1618, 897, 2688, 708, 835, 1392, 2724, 1055, 1522, 2755,
	2774, 3047, 2738, 2778, 2694, 2700, 2670, 2671, 2672, 2693,
	2709, 1454, 2717, 2705, 2683, 1618, 2712, 2713, 3242, 2256,
	2655, 2255, 1452, 2211, 2714, 2775, 2698, 2254, 2780, 2781,
	860, 3200, 1081, 2710, 860, 2762, 2253, 1749, 1452, 2396,
	3426, 2728, 2766, 1195, 1749, 2052, 1278, 3278, 1673, 1165,
	1186, 3279, 1081, 1165, 2054, 2744, 2745, 2742, 2746, 3781,
	1618, 2732, 2733, 2734, 1454, 2799, 3280, 1195, 1264, 1676,
	786, 1835, 2715, 1379, 2716, 3296, 2824, 2834, 1195, 2801,
	1265, 1979, 1667, 2696, 1276, 2816, 718, 839, 1673, 3540,
	2213, 2706, 1017, 2750, 3281, 2212, 2842, 1751, 2862, 2847,
	3320, 2756, 3022, 3564, 2900, 2809, 1844, 3284, 2376, 1676,
	3023, 2472, 3366, 3734, 3458, 2337, 2338, 3610, 3615, 3604,
	2472, 3541, 1667, 3247, 1751, 3036, 2110, 3427, 1195, 1195,
	3736, 2789, 3692, 2795, 2704, 3555, 2871, 3416, 1430, 2804,
	2648, 2640, 2641, 2642, 2643, 2645, 2646, 1939, 2807, 2823,
	1428, 2731, 2887, 3397, 2791, 2792, 1791, 3240, 2793, 2708,
	2819, 1186, 1186, 2817, 1791, 1012, 2826, 2334, 1015, 2805,
	2728, 2811, 3365, 2806, 3417, 2667, 2882, 2907, 2944, 1081,
	2908, 1012, 1081, 1015, 2855, 621, 2812, 2813, 2863, 3611,
	2814, 1011, 1408, 3542, 2845, 2825, 2632, 1406, 1389, 714,
	715, 1387, 1385, 706, 707, 1383, 2564, 1011, 3280, 1381,
	2393, 1373, 897, 1015, 2360, 1371, 1274, 2328, 897, 897,
	2277, 2868, 897, 897, 897, 787, 897, 1648, 1645, 2870,
	2877, 1186, 1431, 1343, 2898, 897, 1679, 2883, 2902, 2707,
	147, 147, 2668, 2922, 897, 2925, 2923, 897, 2885, 2886,
	1277, 2924, 1448, 1081, 2505, 2504, 2913, 2482, 2914, 1967,
	2915, 1949, 897, 1920, 1703, 1555, 1347, 1250, 2109, 3667,
	1081, 3315, 3603, 3306, 3347, 2964, 842, 3271, 3713, 3147,
	1679, 1679, 897, 897, 3143, 897, 897, 897, 1275, 3100,
	717, 3098, 2810, 2947, 3079, 2919, 1429, 1180, 2956, 2957,
	1079, 2846, 1938, 897, 795, 1654, 2838, 897, 1427, 1679,
	1679, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	897, 897, 897, 897, 897, 897, 897, 897, 897, 897,
	3485, 897, 2443, 2927, 2930, 788, 1013, 3729, 897, 897,
	1679, 2419, 833, 2858, 785, 897, 2407, 1998, 2986, 1673,
	1407, 2399, 1013, 897, 2952, 1405, 1388, 2386, 2861, 1386,
	1384, 1877, 1875, 1382, 1017, 1017, 835, 1380, 897, 1372,
	1676, 2960, 2963, 1370, 1273, 789, 1998, 3001, 2979, 2974,
	1870, 1868, 2983, 1667, 2970, 2972, 2973, 1015, 2976, 2985,
	1866, 1857, 1810, 1673, 1673, 622, 623, 1081, 1808, 2993,
	1797, 1792, 2992, 2994, 834, 1778, 3052, 3029, 1765, 1754,
	2995, 992, 2996, 1457, 1676, 1676, 3033, 1656, 3000, 3025,
	2543, 2998, 1673, 1673, 592, 897, 3638, 1667, 1667, 3371,
	2068, 3364, 800, 802, 804, 993, 3363, 2473, 1740, 1229,
	897, 897, 786, 1676, 1676, 2299, 1535, 3075, 2920, 3487,
	3043, 3044, 3026, 1673, 2299, 2318, 1667, 1667, 1762, 2297,
	3038, 3159, 1317, 3040, 3041, 897, 897, 1911, 2317, 147,
	1425, 1426, 1937, 600, 1676, 3502, 1165, 3034, 1843, 1316,
	1936, 1918, 3637, 3300, 3549, 1369, 897, 1667, 3054, 2879,
	2880, 2881, 3521, 1195, 3248, 2884, 1195, 2339, 2544, 3055,
	2180, 625, 624, 2321, 1458, 1679, 1461, 544, 3730, 1464,
	1465, 3723, 1711, 1464, 1465, 3064, 3756, 860, 2357, 2355,
	3494, 2325, 2323, 1165, 597, 3071, 994, 3124, 3112, 3114,
	1195, 2356, 3495, 3602, 2324, 3572, 3107, 897, 2736, 3083,
	3123, 1467, 3569, 3455, 3111, 1017, 897, 653, 626, 627,
	3161, 3142, 693, 1317, 1317, 3139, 555, 3119, 3496, 3132,
	2432, 1195, 1195, 1195, 1466, 1835, 3062, 2426, 1466, 3153,
	2198, 1706, 2766, 2334, 3156, 1661, 3126, 1195, 3140, 3780,
	2638, 2639, 3155, 1081, 1464, 1465, 2291, 2292, 2289, 2290,
	3571, 2472, 1532, 602, 3173, 1357, 3220, 787, 3152, 3141,
	2105, 1356, 3067, 2291, 2289, 1081, 2138, 1410, 897, 897,
	1409, 3216, 3498, 3066, 897, 897, 1679, 599, 1673, 897,
	897, 3185, 897, 2975, 3144, 1549, 897, 1548, 3497, 3799,
	3157, 3769, 3154, 3742, 3531, 3451, 3410, 897, 905, 1676,
	3408, 3163, 3335, 3162, 3264, 3499, 2154, 2150, 3169, 3184,
	975, 3168, 1667, 897, 3165, 3174, 3175, 3145, 3202, 1015,
	1015, 3176, 3127, 1165, 3182, 3125, 3183, 3179, 3096, 3180,
	3091, 2878, 3201, 3210, 2852, 2850, 2487, 2486, 3190, 2436,
	215, 3195, 533, 534, 1768, 549, 533, 549, 559, 564,
	2411, 2387, 580, 3214, 2270, 2638, 2639, 586, 2269, 2070,
	1935, 1772, 1934, 215, 1933, 832, 1932, 788, 1860, 1859,
	1017, 1858, 1841, 1821, 1820, 1816, 2148, 1815, 1017, 705,
	594, 1814, 1081, 215, 1081, 1812, 1811, 1424, 1423, 1673,
	1304, 1017, 1303, 2152, 2153, 2151, 1302, 1301, 1300, 3186,
	1299, 1081, 598, 1298, 3253, 1297, 1296, 789, 1769, 1294,
	1676, 1289, 3239, 1012, 1288, 1287, 1286, 1285, 1245, 1244,
	897, 1243, 1242, 1667, 3268, 3269, 1241, 601, 1012, 1240,
	1234, 1228, 1226, 1225, 1072, 3256, 1071, 1070, 3291, 1011,
	1069, 1040, 1039, 596, 1712, 3301, 1081, 2147, 2149, 3292,
	806, 1081, 3250, 3251, 1011, 3259, 3249, 792, 1012, 3252,
	3255, 3429, 3303, 3304, 3254, 3285, 1418, 77, 1236, 2724,
	3260, 3302, 3270, 640, 72, 3095, 648, 3321, 1081, 593,
	533, 533, 3318, 1195, 1011, 3617, 2782, 3290, 215, 3099,
	2364, 3101, 3500, 1919, 1377, 1921, 1835, 3501, 1773, 2644,
	1015, 2719, 3258, 2239, 3317, 3595, 3224, 2600, 3527, 897,
	3391, 2108, 1553, 74, 881, 927, 3327, 603, 3326, 3266,
	3272, 3082, 3351, 3313, 1081, 2462, 3324, 3367, 595, 3323,
	3314, 3345, 1665, 1666, 3322, 849, 897, 897, 897, 1084,
	3370, 3359, 3337, 1722, 3340, 2180, 3354, 887, 1738, 1731,
	3342, 3350, 2271, 2158, 1081, 3352, 1774, 1775, 904, 901,
	1668, 897, 897, 1670, 903, 902, 1669, 1572, 1770, 900,
	1664, 897, 2395, 2430, 1679, 1281, 771, 1726, 897, 897,
	2064, 1165, 2092, 2589, 1013, 3378, 1546, 862, 2654, 883,
	2089, 1033, 1982, 1081, 3167, 872, 2702, 3388, 2865, 1013,
	3061, 3383, 1771, 3355, 1977, 656, 1081, 2635, 2095, 1026,
	2181, 2174, 2170, 2420, 897, 1434, 1524, 2431, 1067, 865,
	897, 2062, 1537, 3330, 2569, 2180, 2180, 1987, 897, 1013,
	1679, 3399, 1012, 3341, 2872, 2722, 2265, 897, 3634, 1992,
	897, 1825, 1079, 3413, 3412, 991, 897, 990, 2566, 2567,
	3403, 3358, 989, 3624, 3407, 3404, 3405, 3621, 1011, 1324,
	3177, 2832, 1715, 2283, 3411, 1015, 1516, 1165, 2839, 877,
	1185, 2687, 3389, 1015, 2901, 3450, 1247, 3434, 1081, 3461,
	585, 1195, 3470, 2834, 3433, 3548, 1015, 1673, 889, 1515,
	1776, 2371, 2370, 3537, 1054, 2655, 1053, 3440, 3475, 897,
	897, 1052, 3452, 2764, 3787, 3092, 186, 3459, 1676, 2537,
	1455, 3389, 897, 897, 3474, 3486, 3448, 3505, 3506, 1447,
	3482, 1667, 3484, 3490, 2001, 3469, 183, 185, 897, 1679,
	2176, 3480, 184, 3509, 3331, 3109, 1165, 3483, 19, 18,
	17, 3489, 3488, 1673, 94, 2180, 2180, 2180, 3503, 3481,
	3354, 897, 38, 16, 897, 122, 1777, 121, 120, 1186,
	119, 118, 1165, 117, 1676, 116, 111, 3533, 2661, 2662,
	2663, 3520, 897, 115, 3516, 114, 113, 1667, 112, 110,
	109, 108, 3543, 3517, 3518, 107, 3525, 106, 105, 3532,
	3550, 104, 103, 102, 101, 100, 99, 98, 897, 897,
	97, 3558, 96, 1013, 95, 576, 573, 897, 52, 51,
	897, 93, 1195, 2649, 2647, 2648, 2640, 2641, 2642, 2643,
	2645, 2646, 1195, 1195, 92, 3573, 15, 36, 3575, 13,
	56, 57, 12, 31, 1028, 32, 83, 82, 30, 1195,
	3565, 3586, 1673, 14, 3570, 3566, 3567, 3474, 29, 27,
	10, 3577, 897, 8, 7, 3578, 1165, 3583, 3582, 33,
	1633, 11, 1038, 1676, 152, 151, 3584, 3585, 150, 580,
	76, 3591, 149, 3592, 148, 3612, 1667, 3590, 75, 25,
	1081, 9, 144, 3589, 897, 897, 3471, 897, 3137, 71,
	146, 145, 215, 143, 215, 215, 1177, 3632, 215, 3614,
	142, 141, 69, 3613, 1012, 1012, 140, 3636, 1165, 139,
	70, 215, 1207, 3623, 3626, 138, 23, 3619, 5, 55,
	3628, 6, 3639, 3599, 3652, 3373, 3651, 897, 897, 897,
	1011, 1011, 2909, 3648, 87, 1231, 88, 34, 3643, 67,
	66, 3646, 65, 22, 54, 21, 3557, 3679, 1249, 897,
	1254, 176, 175, 215, 215, 3627, 1177, 3684, 3631, 3666,
	174, 3665, 3663, 3664, 173, 168, 215, 167, 172, 170,
	169, 3700, 3682, 1291, 171, 166, 178, 177, 180, 3702,
	164, 160, 159, 163, 3704, 165, 162, 215, 215, 215,
	897, 1177, 3710, 3714, 2432, 3701, 2638, 2639, 2001, 580,
	3706, 215, 215, 161, 158, 3709, 179, 62, 137, 136,
	3707, 3708, 3442, 3443, 3711, 135, 705, 134, 3722, 3726,
	3724, 3720, 3721, 133, 132, 131, 61, 20, 3731, 2,
	3733, 3735, 1, 0, 897, 0, 897, 0, 3732, 3739,
	3744, 3750, 3745, 3636, 3749, 3743, 0, 0, 3623, 0,
	0, 3626, 3746, 3738, 3748, 0, 0, 0, 3747, 0,
	3640, 0, 0, 3641, 3751, 0, 0, 3765, 0, 0,
	3763, 0, 0, 0, 0, 1013, 1013, 215, 0, 3773,
	0, 0, 3770, 3775, 0, 1012, 0, 897, 897, 0,
	3778, 215, 0, 0, 0, 897, 0, 897, 897, 3771,
	3784, 0, 0, 3790, 0, 0, 0, 0, 0, 3791,
	0, 1011, 0, 0, 3794, 2527, 0, 0, 0, 0,
	2180, 2180, 0, 3797, 0, 0, 0, 3801, 0, 0,
	0, 3798, 3804, 0, 0, 3806, 897, 3807, 0, 3809,
	2644, 0, 3811, 2940, 2941, 0, 0, 0, 3800, 0,
	0, 0, 3803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3785, 3786,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2176, 2176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3808, 2180, 2180,
	2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180, 2180,
	2180, 2180, 2180, 2180, 2180, 2180, 2180, 0, 2180, 2654,
	0, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010,
	3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020,
	1012, 3024, 0, 0, 0, 0, 1013, 0, 1012, 63,
	1187, 0, 0, 0, 1199, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 64, 0, 1011, 0, 0, 0,
	533, 0, 0, 0, 1011, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	0, 215, 0, 215, 0, 0, 0, 215, 0, 0,
	0, 0, 0, 1258, 0, 2176, 2176, 2176, 1165, 1207,
	73, 1177, 215, 0, 215, 0, 0, 0, 0, 215,
	1207, 549, 0, 0, 215, 1207, 2655, 0, 0, 0,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 0, 0, 78, 1464, 1465, 0, 0, 0, 0,
	0, 1336, 0, 0, 89, 0, 0, 1165, 0, 79,
	86, 1199, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 1467, 1165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 860, 1466,
	0, 0, 0, 0, 1358, 0, 0, 0, 80, 1486,
	0, 1013, 0, 0, 0, 0, 0, 1483, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2647, 2648, 2640, 2641, 2642,
	2643, 2645, 2646, 0, 0, 0, 0, 0, 0, 3205,
	0, 0, 0, 0, 1611, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 0, 1165, 0, 1472, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2262, 0, 0, 0, 0, 0,
	1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 1494, 1496, 0, 0,
	0, 1495, 0, 0, 0, 215, 0, 0, 1467, 215,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 84, 215, 85, 215, 1466, 215, 0, 0, 0,
	533, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 187, 1483, 1861, 0, 0, 0, 0, 0,
	700, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 1165, 0, 0, 189,
	0, 0, 848, 580, 0, 2943, 0, 705, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 1177, 215,
	0, 0, 124, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 580, 0, 1472, 0, 157, 0, 0, 215,
	0, 0, 0, 0, 188, 0, 1493, 0, 215, 215,
	0, 215, 0, 215, 181, 215, 0, 215, 0, 0,
	2176, 2176, 182, 0, 1488, 0, 0, 1165, 0, 0,
	0, 1944, 1494, 1496, 1945, 0, 1946, 0, 0, 0,
	0, 0, 0, 156, 1165, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2176, 2176,
	2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2176,
	2176, 2176, 2176, 2176, 2176, 2176, 2176, 0, 2176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2180, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1165, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 2180, 0, 0, 0, 1464, 1465, 0, 0, 0,
	1488, 1199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3421, 0, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 215, 0, 0, 0, 0, 0, 0,
	1486, 0, 533, 0, 0, 0, 0, 0, 1483, 215,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 0, 215, 0, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 2180, 0, 1467, 0, 0,
	2938, 0, 1513, 0, 0, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 3524, 1489,
	1490, 1491, 1492, 0, 1466, 1882, 0, 0, 0, 1472,
	0, 0, 549, 1199, 1486, 0, 1893, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 1902,
	1903, 1904, 0, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 0, 0, 0, 2180, 2180, 1494, 1496, 0,
	0, 0, 0, 0, 0, 2307, 0, 0, 0, 1165,
	848, 0, 0, 215, 848, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 215, 0, 0,
	0, 0, 0, 1472, 1007, 0, 0, 0, 1487, 0,
	0, 215, 0, 0, 0, 0, 0, 1209, 0, 1213,
	0, 1219, 215, 2380, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 1207, 210, 0, 215, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 2415, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 2307, 0, 533, 0, 0, 2435, 0, 0, 0,
	0, 1502, 215, 0, 0, 215, 1165, 215, 1165, 215,
	0, 0, 1487, 63, 1177, 0, 0, 1493, 0, 0,
	0, 1339, 0, 2455, 705, 1165, 2307, 2307, 64, 1344,
	0, 0, 0, 0, 0, 1488, 0, 0, 215, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 1177, 215, 0, 0, 1207,
	0, 1207, 0, 0, 1177, 0, 1177, 0, 1177, 0,
	1165, 0, 0, 0, 73, 1165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1396, 0, 0, 0, 215,
	215, 215, 215, 1177, 215, 0, 215, 0, 0, 0,
	0, 1493, 1165, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 1488,
	0, 0, 0, 79, 86, 0, 0, 215, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 1165, 0,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 1517, 1518, 1519, 1520,
	1521, 0, 80, 0, 0, 0, 0, 0, 1165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1534, 0, 0, 0, 0,
	0, 1547, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1165, 2176, 0,
	0, 0, 0, 0, 1207, 0, 0, 1503, 0, 0,
	1165, 0, 0, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2176, 0, 0, 860, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 2374, 0, 0,
	1513, 0, 1165, 0, 1605, 1605, 1605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 153, 84, 0, 85, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 215, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 215, 0, 123, 0,
	0, 533, 0, 0, 0, 0, 533, 0, 0, 533,
	0, 0, 533, 533, 0, 2176, 2445, 848, 533, 0,
	0, 0, 0, 189, 0, 0, 215, 0, 0, 0,
	0, 1199, 0, 0, 0, 0, 0, 0, 1207, 0,
	0, 1489, 1490, 1491, 1492, 0, 124, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 1207, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 2307, 2307, 215, 181, 0,
	1504, 2307, 0, 1514, 2768, 0, 182, 0, 0, 1494,
	1496, 0, 2307, 2768, 0, 2307, 2768, 2768, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 215,
	215, 215, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 215, 1177, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 1165, 0, 0, 0, 0, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 0, 0, 0, 1184, 2828, 0, 0, 2830, 2307,
	0, 0, 215, 0, 0, 0, 215, 0, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2415, 0, 0, 1177, 0,
	215, 0, 0, 2307, 0, 533, 0, 0, 0, 0,
	0, 0, 2307, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 215, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 2415, 0, 1488, 2415, 0,
	0, 0, 0, 1308, 1308, 1308, 2638, 2639, 0, 2656,
	2657, 2658, 0, 0, 0, 0, 0, 1337, 1338, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2918, 0, 0, 1177, 215,
	0, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2653, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2638, 2639, 0, 2656,
	2657, 2658, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 3206, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	2981, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2644, 2653, 0, 0, 0, 0, 0, 1976, 0, 1980,
	0, 0, 0, 0, 0, 0, 1994, 0, 0, 0,
	0, 0, 0, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 0, 2043,
	0, 2045, 2046, 2047, 2048, 0, 0, 0, 0, 0,
	0, 0, 215, 215, 0, 0, 0, 0, 0, 0,
	2644, 2072, 0, 0, 0, 0, 0, 0, 0, 2654,
	0, 0, 0, 1534, 533, 533, 0, 2087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2820, 2117, 2120, 2123, 2126, 0, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 0, 0, 1207, 0, 0,
	0, 0, 0, 2659, 0, 0, 2843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2172, 2849, 2183, 2185,
	2190, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2654,
	0, 0, 1495, 1643, 0, 580, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 0,
	1184, 0, 0, 0, 0, 0, 2655, 2893, 2894, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 1486, 215, 0, 0,
	0, 0, 0, 0, 1483, 215, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 1464, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2307, 215, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1467, 2937, 2455, 2455, 0,
	0, 0, 0, 705, 705, 2307, 2655, 0, 2415, 2415,
	0, 0, 705, 2307, 0, 1489, 1490, 1491, 1492, 0,
	215, 0, 1466, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 2650, 2651, 2652,
	1483, 0, 0, 0, 2649, 2647, 2648, 2640, 2641, 2642,
	2643, 2645, 2646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2555, 0, 0, 0, 0, 1481, 1482, 3225,
	0, 0, 2382, 0, 2384, 0, 0, 0, 687, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1487, 0, 0, 2650, 2651, 2652,
	0, 669, 0, 0, 2649, 2647, 2648, 2640, 2641, 2642,
	2643, 2645, 2646, 0, 0, 0, 0, 0, 0, 0,
	0, 1823, 0, 0, 0, 1830, 0, 0, 215, 1494,
	1496, 0, 0, 670, 1207, 0, 215, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 1283, 215,
	1849, 0, 1849, 1481, 1482, 0, 0, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 2307, 2307, 2307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 692, 1207,
	1487, 0, 0, 1493, 0, 0, 0, 2307, 0, 2768,
	1184, 0, 1207, 1207, 215, 673, 0, 0, 0, 0,
	0, 1488, 2502, 0, 0, 215, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 2307,
	0, 0, 1830, 3333, 0, 1897, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 675, 0, 215, 676, 0,
	0, 0, 0, 0, 0, 1914, 0, 602, 1517, 1518,
	0, 0, 0, 0, 0, 1924, 0, 1926, 0, 1928,
	0, 1930, 0, 1931, 0, 0, 0, 0, 0, 1493,
	1207, 691, 3121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 1948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2549, 2550, 0, 0, 0, 0, 2556,
	0, 0, 0, 906, 0, 0, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 2570, 2571,
	0, 0, 0, 0, 2087, 0, 0, 0, 0, 0,
	3170, 3171, 3172, 2578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 2592,
	2307, 0, 2768, 0, 0, 3415, 0, 0, 0, 0,
	0, 678, 0, 215, 0, 0, 2604, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 679, 0, 0, 0, 580, 216, 0,
	0, 0, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 3415, 0, 0,
	0, 601, 0, 0, 0, 2307, 0, 0, 680, 0,
	0, 681, 0, 3477, 0, 0, 0, 689, 0, 0,
	682, 0, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 2190, 2190, 2190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1605, 0, 215, 215,
	0, 0, 683, 690, 2692, 0, 0, 0, 0, 0,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2981, 0, 0, 686, 0, 1464, 1465, 0, 685, 0,
	0, 0, 0, 0, 0, 3415, 0, 0, 0, 0,
	0, 603, 0, 0, 0, 0, 1495, 0, 0, 2246,
	0, 0, 688, 1467, 1464, 1465, 0, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 1495, 0, 0, 0, 0,
	1466, 0, 1467, 0, 0, 3333, 0, 1513, 848, 0,
	1486, 0, 0, 0, 0, 0, 0, 215, 1483, 0,
	0, 0, 0, 0, 0, 0, 2768, 0, 0, 1466,
	0, 0, 0, 0, 0, 2785, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 1207, 0, 1207, 0, 0, 0, 0, 0, 0,
	2548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3608, 0, 1489,
	1490, 1491, 1492, 1207, 0, 0, 215, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 2307,
	0, 2638, 2639, 0, 2656, 2657, 2658, 0, 1489, 1490,
	1491, 1492, 0, 0, 0, 215, 0, 1184, 1472, 0,
	0, 2949, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	2981, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 1481, 1482, 0, 1830, 0, 1494, 1496, 1495, 0,
	0, 2406, 0, 0, 0, 1467, 2653, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 1487, 0,
	1481, 1482, 0, 0, 0, 0, 2307, 0, 2437, 0,
	0, 1308, 1466, 1308, 0, 1308, 1502, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 3415, 1487, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2481, 0, 0, 0, 0, 0,
	0, 1512, 0, 1207, 0, 2307, 0, 0, 0, 0,
	2489, 0, 2492, 0, 0, 2644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1994, 0, 0, 0,
	0, 0, 2935, 2936, 0, 0, 2939, 1493, 0, 0,
	2942, 1489, 1490, 1491, 1492, 2513, 1184, 2515, 1184, 2946,
	2518, 1472, 0, 0, 0, 1488, 0, 0, 2953, 0,
	0, 2692, 0, 0, 0, 0, 1493, 0, 2659, 0,
	0, 0, 0, 0, 0, 0, 2965, 0, 0, 0,
	0, 0, 0, 1308, 1488, 0, 0, 0, 0, 1494,
	1496, 2546, 0, 0, 0, 0, 2987, 2988, 0, 2989,
	2990, 2991, 0, 0, 2654, 0, 1505, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 2997, 0, 0,
	0, 2999, 0, 0, 0, 0, 0, 216, 1085, 216,
	216, 0, 1085, 216, 1085, 0, 0, 0, 1085, 0,
	1487, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 3027, 3028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3037, 0, 0,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 3046, 0, 0, 0, 0, 1085, 216, 216,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 216, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 2655, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 216, 216, 216, 0, 0, 1085, 0, 1493,
	0, 1085, 0, 1500, 1495, 1085, 216, 216, 0, 3076,
	0, 1467, 0, 0, 0, 1085, 1513, 1488, 2638, 2639,
	0, 2656, 2657, 2658, 3085, 3088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	3108, 0, 0, 0, 0, 0, 1483, 0, 1085, 0,
	0, 0, 0, 0, 2638, 2639, 0, 2656, 2657, 2658,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 2653, 2948, 0, 0, 0, 0, 0,
	0, 0, 2650, 2651, 2652, 0, 216, 0, 0, 2649,
	2647, 2648, 2640, 2641, 2642, 2643, 2645, 2646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 1605, 0, 0, 0, 0, 0, 1472, 0, 2653,
	3164, 0, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 2638,
	2639, 0, 2656, 2657, 2658, 0, 1504, 0, 0, 1514,
	0, 0, 2644, 2760, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 3203, 3204, 2660, 2798, 2800, 2406, 3208, 3209,
	0, 0, 0, 3212, 3213, 1502, 0, 0, 2644, 0,
	3217, 0, 0, 0, 2653, 2659, 1487, 0, 0, 0,
	0, 3221, 0, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3226, 0, 0,
	1512, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 2654, 0, 0, 68, 0, 0, 1501, 2840, 0,
	0, 2659, 2844, 0, 0, 0, 0, 882, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 2644, 0, 0, 0, 2654, 0, 0,
	0, 0, 0, 0, 0, 1493, 893, 1184, 1184, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 1488, 0, 1085, 0, 216, 216, 216,
	2897, 0, 89, 0, 216, 0, 0, 79, 86, 216,
	0, 0, 0, 0, 3088, 1505, 2659, 91, 214, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 2655, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 1085, 0, 0, 2921, 0, 1184, 0, 0,
	0, 0, 2654, 0, 0, 0, 80, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 2655, 0, 0, 0, 0, 0,
	2933, 0, 0, 0, 0, 825, 0, 0, 64, 0,
	0, 0, 0, 0, 843, 0, 0, 0, 0, 0,
	68, 1503, 0, 3088, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 2613, 0, 0, 1001, 2614, 0,
	3384, 3385, 3386, 0, 73, 0, 0, 0, 0, 2650,
	2651, 2652, 0, 0, 0, 0, 2649, 2647, 2648, 2640,
	2641, 2642, 2643, 2645, 2646, 3394, 3395, 0, 0, 2655,
	0, 0, 0, 0, 0, 0, 1014, 78, 0, 0,
	0, 81, 3402, 0, 1085, 1085, 216, 0, 89, 0,
	0, 0, 1085, 79, 86, 2650, 2651, 2652, 0, 0,
	0, 0, 2649, 2647, 2648, 2640, 2641, 2642, 2643, 2645,
	2646, 0, 0, 0, 0, 0, 0, 0, 153, 84,
	0, 85, 0, 0, 3088, 0, 0, 0, 0, 0,
	216, 0, 3439, 0, 216, 0, 0, 0, 0, 216,
	187, 3446, 80, 0, 848, 0, 0, 0, 700, 0,
	3453, 0, 123, 0, 0, 0, 0, 216, 0, 216,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	2650, 2651, 2652, 0, 0, 0, 0, 2649, 2647, 2648,
	2640, 2641, 2642, 2643, 2645, 2646, 0, 0, 0, 216,
	124, 0, 0, 3088, 3088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 1085, 0, 1085, 0, 1085,
	0, 0, 188, 0, 0, 0, 0, 1085, 0, 0,
	1085, 216, 181, 0, 216, 0, 0, 0, 0, 0,
	182, 0, 0, 1085, 1085, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 3536, 0, 81, 3539, 0,
	0, 1333, 0, 216, 216, 0, 216, 0, 216, 0,
	216, 0, 216, 0, 2406, 0, 3088, 0, 0, 0,
	0, 0, 0, 3136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 84, 0, 85, 3146, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 3088, 0, 0, 3088, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 189, 0, 0, 3188, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	157, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3662, 3662, 3662, 0, 0, 1085, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3683, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 91, 0, 91, 0, 0, 0, 0,
	214, 0, 214, 214, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 0, 3662, 0, 0, 0, 0, 615,
	0, 0, 0, 0, 630, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 216, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 3088, 0,
	3088, 214, 214, 0, 0, 843, 91, 91, 0, 0,
	3305, 0, 0, 0, 214, 91, 0, 0, 0, 632,
	650, 2406, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 214, 214, 0, 0,
	0, 0, 0, 0, 633, 0, 0, 634, 2406, 214,
	214, 3662, 3779, 3346, 0, 1085, 0, 0, 0, 3783,
	0, 0, 0, 0, 657, 0, 0, 0, 0, 0,
	635, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 655, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 749, 0, 785, 216, 0,
	0, 636, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 637, 216, 0, 638, 214, 0, 0, 0, 659,
	0, 0, 0, 602, 768, 754, 216, 1085, 0, 214,
	0, 1085, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 755, 0, 0,
	0, 0, 758, 0, 0, 0, 0, 791, 0, 0,
	0, 1527, 0, 216, 0, 765, 766, 0, 0, 0,
	216, 778, 0, 0, 929, 0, 0, 0, 1533, 3422,
	0, 0, 1539, 0, 0, 786, 760, 0, 0, 658,
	0, 0, 0, 0, 0, 0, 0, 216, 641, 0,
	216, 0, 216, 0, 216, 0, 0, 0, 0, 0,
	1085, 1085, 0, 1085, 0, 0, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 642, 0, 216,
	0, 216, 761, 0, 0, 0, 0, 0, 0, 0,
	753, 0, 0, 0, 0, 0, 0, 0, 0, 643,
	0, 0, 0, 0, 3515, 1184, 0, 0, 762, 763,
	0, 0, 0, 0, 216, 216, 216, 216, 0, 216,
	0, 216, 0, 0, 0, 770, 769, 601, 0, 0,
	1625, 0, 1628, 764, 91, 0, 0, 651, 0, 0,
	0, 0, 0, 0, 0, 0, 644, 0, 0, 0,
	790, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 649, 0, 0, 0, 1627,
	787, 1014, 0, 0, 0, 214, 0, 0, 645, 0,
	0, 662, 0, 661, 0, 0, 646, 0, 0, 0,
	214, 1627, 214, 0, 1018, 0, 0, 615, 0, 647,
	0, 0, 615, 3574, 654, 0, 0, 0, 0, 663,
	0, 660, 759, 0, 0, 0, 0, 603, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 0, 782, 783, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 780,
	0, 0, 0, 0, 0, 0, 776, 0, 0, 773,
	0, 0, 3616, 0, 0, 774, 0, 0, 751, 0,
	788, 0, 0, 0, 3633, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 3645, 0, 0, 0, 0, 0, 775, 0, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 0, 0,
	789, 0, 0, 0, 0, 0, 0, 0, 777, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 615,
	0, 781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 1085, 214, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	0, 843, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 216, 216, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 0, 216, 214, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 214, 0, 0,
	0, 0, 0, 0, 0, 1085, 615, 214, 0, 214,
	0, 214, 0, 214, 0, 214, 0, 216, 0, 0,
	1085, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 825, 214, 0, 825, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 1018, 0, 1018, 216, 216, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1085, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 1533, 0, 0, 0,
	1533, 0, 1085, 0, 216, 1085, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 1018, 0, 0, 0, 1018, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1628, 1018,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 91, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 91, 0, 91, 0,
	0, 0, 0, 0, 0, 214, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	615, 0, 0, 0, 0, 0, 91, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 1085,
	0, 0, 0, 216, 0, 0, 214, 0, 0, 0,
	0, 0, 216, 214, 0, 0, 91, 1018, 0, 1018,
	216, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 1085, 0, 0, 1018, 0, 0, 0,
	214, 0, 0, 214, 0, 214, 0, 214, 0, 1680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 1085, 1085, 1085, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 214, 0, 0, 0,
	1085, 0, 0, 1018, 0, 216, 1085, 0, 0, 0,
	0, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 214, 214,
	214, 0, 214, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	2061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 1018, 0, 0, 0,
	0, 0, 0, 1018, 0, 1085, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	216, 216, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	0, 1085, 216, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 0, 0, 1018, 0, 1018, 0,
	1018, 0, 0, 0, 0, 1001, 0, 0, 1018, 0,
	0, 1018, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 1018, 1018, 1018, 0, 0, 1014,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 91, 91, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 1680,
	1680, 1018, 0, 0, 0, 0, 1082, 0, 0, 0,
	1082, 0, 1196, 91, 91, 0, 1196, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 214, 214,
	0, 0, 0, 0, 0, 0, 1627, 0, 0, 0,
	0, 1085, 0, 0, 1085, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, 0, 0, 0, 0,
	0, 0, 0, 216, 216, 0, 0, 0, 0, 1001,
	0, 0, 843, 0, 0, 0, 0, 1018, 0, 0,
	214, 0, 0, 0, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1196, 0, 91, 91, 1196,
	0, 0, 0, 1196, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 214,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 214, 0, 0, 1018, 1196, 0, 0, 0,
	0, 0, 216, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 1085, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 214, 0, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 1083, 0, 1197, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 214, 1085, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	216, 0, 0, 0, 0, 0, 1018, 1197, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1466, 1197, 0, 0,
	0, 1197, 0, 0, 0, 1197, 1486, 0, 1018, 0,
	0, 0, 1018, 0, 1483, 1197, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1014, 1014, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 1018, 1018, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 1082, 1504, 0, 0, 1514, 0, 0,
	0, 0, 608, 1494, 1496, 0, 0, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 1196,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 1001, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 214, 0,
	0, 0, 1196, 1196, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 0, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 1018, 1018, 0,
	0, 0, 0, 1196, 1014, 1196, 0, 1196, 0, 0,
	0, 0, 1018, 0, 0, 1196, 0, 1627, 1196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1196, 1196, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 1018, 0, 0,
	91, 608, 0, 0, 0, 0, 0, 0, 0, 1680,
	91, 0, 214, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 214, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 1197, 1197, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 1680,
	214, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 1018, 0, 0,
	0, 0, 0, 1467, 0, 0, 1018, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 1197, 1018, 1197, 1483, 1197,
	0, 0, 0, 0, 1082, 0, 0, 1197, 0, 0,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 1197, 1197, 1197, 0, 0, 0, 0,
	0, 0, 1018, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2061, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 1082,
	0, 1514, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 214, 214, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	1083, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	1680, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 1018, 1487, 0,
	0, 0, 0, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 1680, 1680, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 1680, 214, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 1082, 0, 1493, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 91, 1018, 1018,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 1083, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 1196,
	0, 1196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 1197, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 3609, 1018, 0, 0,
	1018, 0, 0, 0, 0, 1083, 0, 0, 0, 1680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 1197, 0, 0, 0, 1018, 1018, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1018, 0, 0, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1680, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	1197, 1197, 0, 1197, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 1197, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 1018, 0, 1018, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	1018, 0, 0, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 1504, 0, 1082, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 1018, 0, 0, 0, 1510, 1018, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 1680, 0,
	0, 0, 0, 0, 1196, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 0,
	1018, 1493, 0, 0, 0, 0, 0, 0, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 1488,
	0, 0, 0, 0, 1680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1196,
	1196, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 1018, 0, 0, 1018, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1680, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	2083, 0, 0, 0, 2084, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 1500, 1495, 0,
	0, 0, 0, 0, 1082, 1467, 1197, 0, 0, 0,
	1513, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1018, 0, 0, 0,
	1197, 0, 1466, 0, 0, 0, 1018, 1018, 0, 0,
	0, 1197, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1197, 1197, 0, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 1083, 0, 0, 1082, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1196, 0, 0, 1196, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1196, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 1196, 1196, 1196, 1513, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1196, 0,
	0, 0, 0, 0, 1082, 0, 0, 1466, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 1082, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 1503, 1472, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 3230, 0, 0, 1504, 1197, 0, 1514, 1197,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 1082, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 1082, 1197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 1197, 1197, 1197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 1512,
	1197, 0, 1082, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 1082,
	0, 0, 0, 0, 1196, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 1493, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1505, 1082, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 1083, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1083,
	1504, 0, 0, 1514, 1083, 0, 0, 2951, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	0, 0, 1196, 0, 1510, 0, 1511, 0, 0, 0,
	0, 1083, 0, 1481, 1482, 0, 1197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1493,
	0, 0, 0, 1196, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 1196, 1196, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 1197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 2616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1197, 1197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 1083, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 2224, 0, 0, 0,
	0, 0, 0, 0, 2225, 224, 225, 226, 227, 228,
	1086, 229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091,
	1092, 1093, 1094, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 1095, 237, 238, 239, 240, 241,
	1096, 1097, 242, 484, 485, 486, 1098, 243, 244, 487,
	1099, 1166, 1100, 245, 246, 247, 248, 249, 250, 251,
	0, 1101, 253, 254, 255, 252, 1102, 256, 0, 257,
	258, 259, 1103, 260, 959, 261, 262, 1104, 1105, 1107,
	1106, 1108, 1109, 1110, 263, 264, 265, 266, 0, 267,
	488, 489, 1111, 271, 268, 269, 1112, 272, 270, 1113,
	273, 1114, 1115, 274, 275, 276, 1116, 277, 1117, 278,
	279, 1118, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 1119, 221, 1120, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 1121, 296, 1122, 1123, 960, 297, 298, 494, 495,
	299, 300, 1124, 301, 496, 1125, 497, 302, 1126, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 962, 308,
	309, 1127, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 1128, 961, 316, 501, 502, 1129, 503,
	1130, 318, 963, 504, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 1131, 329,
	328, 1132, 330, 505, 966, 331, 332, 967, 1133, 333,
	334, 335, 1134, 1135, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	1136, 223, 970, 358, 1137, 506, 359, 507, 361, 362,
	1138, 0, 363, 0, 1139, 1140, 365, 366, 367, 1141,
	1142, 368, 369, 508, 971, 370, 972, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 1143, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 1144, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	1145, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 1146, 403, 973, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 1147, 421, 422, 420, 423, 424,
	425, 1148, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 1149, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 1150, 443, 444,
	442, 1151, 445, 446, 447, 448, 449, 286, 450, 1152,
	451, 519, 520, 521, 522, 1153, 458, 1154, 452, 453,
	523, 454, 524, 1155, 455, 456, 457, 0, 459, 460,
	1156, 1157, 461, 462, 463, 465, 466, 464, 467, 1158,
	468, 1159, 0, 469, 470, 471, 525, 526, 527, 1160,
	473, 472, 528, 1161, 1162, 1163, 1164, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 2959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2961,
	224, 225, 226, 227, 228, 1086, 229, 230, 1087, 1088,
	1089, 0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 1095,
	237, 238, 239, 240, 241, 1096, 1097, 242, 484, 485,
	486, 1098, 243, 244, 487, 1099, 1166, 1100, 245, 246,
	247, 248, 249, 250, 251, 0, 1101, 253, 254, 255,
	252, 1102, 256, 0, 257, 258, 259, 1103, 260, 959,
	261, 262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263,
	264, 265, 266, 0, 267, 488, 489, 1111, 271, 268,
	269, 1112, 272, 270, 1113, 273, 1114, 1115, 274, 275,
	276, 1116, 277, 1117, 278, 279, 1118, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 1119, 221, 1120, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 1121, 296, 1122, 1123,
	960, 297, 298, 494, 495, 299, 300, 1124, 301, 496,
	1125, 497, 302, 1126, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 962, 308, 309, 1127, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 1128, 961,
	316, 501, 502, 1129, 503, 1130, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 1131, 329, 328, 1132, 330, 505, 966,
	331, 332, 967, 1133, 333, 334, 335, 1134, 1135, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 1136, 223, 970, 358, 1137,
	506, 359, 507, 361, 362, 1138, 0, 363, 0, 1139,
	1140, 365, 366, 367, 1141, 1142, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 1143, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 1144, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 1145, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 1146, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 1147,
	421, 422, 420, 423, 424, 425, 1148, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 1149, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 1150, 443, 444, 442, 1151, 445, 446, 447,
	448, 449, 286, 450, 1152, 451, 519, 520, 521, 522,
	1153, 458, 1154, 452, 453, 523, 454, 524, 1155, 455,
	456, 457, 0, 459, 460, 1156, 1157, 461, 462, 463,
	465, 466, 464, 467, 1158, 468, 1159, 0, 469, 470,
	471, 525, 526, 527, 1160, 473, 472, 528, 1161, 1162,
	1163, 1164, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3257, 224,
	225, 226, 227, 228, 1086, 229, 230, 1087, 1088, 1089,
	0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 1095, 237,
	238, 239, 240, 241, 1096, 1097, 242, 484, 485, 486,
	1098, 243, 244, 487, 1099, 1166, 1100, 245, 246, 247,
	248, 249, 250, 251, 0, 1101, 253, 254, 255, 252,
	1102, 256, 0, 257, 258, 259, 1103, 260, 959, 261,
	262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264,
	265, 266, 0, 267, 488, 489, 1111, 271, 268, 269,
	1112, 272, 270, 1113, 273, 1114, 1115, 274, 275, 276,
	1116, 277, 1117, 278, 279, 1118, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	1119, 221, 1120, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 1121, 296, 1122, 1123, 960,
	297, 298, 494, 495, 299, 300, 1124, 301, 496, 1125,
	497, 302, 1126, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 1127, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 1128, 961, 316,
	501, 502, 1129, 503, 1130, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1131, 329, 328, 1132, 330, 505, 966, 331,
	332, 967, 1133, 333, 334, 335, 1134, 1135, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 1136, 223, 970, 358, 1137, 506,
	359, 507, 361, 362, 1138, 0, 363, 0, 1139, 1140,
	365, 366, 367, 1141, 1142, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 1143, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 1144, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 1145, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1146, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1147, 421,
	422, 420, 423, 424, 425, 1148, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 1149, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 1150, 443, 444, 442, 1151, 445, 446, 447, 448,
	449, 286, 450, 1152, 451, 519, 520, 521, 522, 1153,
	458, 1154, 452, 453, 523, 454, 524, 1155, 455, 456,
	457, 0, 459, 460, 1156, 1157, 461, 462, 463, 465,
	466, 464, 467, 1158, 468, 1159, 0, 469, 470, 471,
	525, 526, 527, 1160, 473, 472, 528, 1161, 1162, 1163,
	1164, 474, 475, 529, 476, 477, 478, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3390, 0, 224, 225, 226, 227, 228, 1086,
	229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092,
	1093, 1094, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 1095, 237, 238, 239, 240, 241, 1096,
	1097, 242, 484, 485, 486, 1098, 243, 244, 487, 1099,
	1166, 1100, 245, 246, 247, 248, 249, 250, 251, 0,
	1101, 253, 254, 255, 252, 1102, 256, 0, 257, 258,
	259, 1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106,
	1108, 1109, 1110, 263, 264, 265, 266, 0, 267, 488,
	489, 1111, 271, 268, 269, 1112, 272, 270, 1113, 273,
	1114, 1115, 274, 275, 276, 1116, 277, 1117, 278, 279,
	1118, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 1119, 221, 1120, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	1121, 296, 1122, 1123, 960, 297, 298, 494, 495, 299,
	300, 1124, 301, 496, 1125, 497, 302, 1126, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	1127, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 1128, 961, 316, 501, 502, 1129, 503, 1130,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1131, 329, 328,
	1132, 330, 505, 966, 331, 332, 967, 1133, 333, 334,
	335, 1134, 1135, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 1136,
	223, 970, 358, 1137, 506, 359, 507, 361, 362, 1138,
	0, 363, 0, 1139, 1140, 365, 366, 367, 1141, 1142,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 1143, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 1144, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 1145,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1146, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1147, 421, 422, 420, 423, 424, 425,
	1148, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 1149, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 286, 450, 1152, 451,
	519, 520, 521, 522, 1153, 458, 1154, 452, 453, 523,
	454, 524, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 465, 466, 464, 467, 1158, 468,
	1159, 0, 469, 470, 471, 525, 526, 527, 1160, 473,
	472, 528, 1161, 1162, 1163, 1164, 474, 475, 529, 476,
	477, 478, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3312, 0, 224,
	225, 226, 227, 228, 1086, 229, 230, 1087, 1088, 1089,
	0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 1095, 237,
	238, 239, 240, 241, 1096, 1097, 242, 484, 485, 486,
	1098, 243, 244, 487, 1099, 1166, 1100, 245, 246, 247,
	248, 249, 250, 251, 0, 1101, 253, 254, 255, 252,
	1102, 256, 0, 257, 258, 259, 1103, 260, 959, 261,
	262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264,
	265, 266, 0, 267, 488, 489, 1111, 271, 268, 269,
	1112, 272, 270, 1113, 273, 1114, 1115, 274, 275, 276,
	1116, 277, 1117, 278, 279, 1118, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	1119, 221, 1120, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 1121, 296, 1122, 1123, 960,
	297, 298, 494, 495, 299, 300, 1124, 301, 496, 1125,
	497, 302, 1126, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 1127, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 1128, 961, 316,
	501, 502, 1129, 503, 1130, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1131, 329, 328, 1132, 330, 505, 966, 331,
	332, 967, 1133, 333, 334, 335, 1134, 1135, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 1136, 223, 970, 358, 1137, 506,
	359, 507, 361, 362, 1138, 0, 363, 0, 1139, 1140,
	365, 366, 367, 1141, 1142, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 1143, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 1144, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 1145, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1146, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1147, 421,
	422, 420, 423, 424, 425, 1148, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 1149, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 1150, 443, 444, 442, 1151, 445, 446, 447, 448,
	449, 286, 450, 1152, 451, 519, 520, 521, 522, 1153,
	458, 1154, 452, 453, 523, 454, 524, 1155, 455, 456,
	457, 0, 459, 460, 1156, 1157, 461, 462, 463, 465,
	466, 464, 467, 1158, 468, 1159, 0, 469, 470, 471,
	525, 526, 527, 1160, 473, 472, 528, 1161, 1162, 1163,
	1164, 474, 475, 529, 476, 477, 478, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3189, 0, 224, 225, 226, 227, 228, 1086,
	229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092,
	1093, 1094, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 1095, 237, 238, 239, 240, 241, 1096,
	1097, 242, 484, 485, 486, 1098, 243, 244, 487, 1099,
	1166, 1100, 245, 246, 247, 248, 249, 250, 251, 0,
	1101, 253, 254, 255, 252, 1102, 256, 0, 257, 258,
	259, 1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106,
	1108, 1109, 1110, 263, 264, 265, 266, 0, 267, 488,
	489, 1111, 271, 268, 269, 1112, 272, 270, 1113, 273,
	1114, 1115, 274, 275, 276, 1116, 277, 1117, 278, 279,
	1118, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 1119, 221, 1120, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	1121, 296, 1122, 1123, 960, 297, 298, 494, 495, 299,
	300, 1124, 301, 496, 1125, 497, 302, 1126, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	1127, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 1128, 961, 316, 501, 502, 1129, 503, 1130,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1131, 329, 328,
	1132, 330, 505, 966, 331, 332, 967, 1133, 333, 334,
	335, 1134, 1135, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 1136,
	223, 970, 358, 1137, 506, 359, 507, 361, 362, 1138,
	0, 363, 0, 1139, 1140, 365, 366, 367, 1141, 1142,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 1143, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 1144, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 1145,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1146, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1147, 421, 422, 420, 423, 424, 425,
	1148, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 1149, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 286, 450, 1152, 451,
	519, 520, 521, 522, 1153, 458, 1154, 452, 453, 523,
	454, 524, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 465, 466, 464, 467, 1158, 468,
	1159, 0, 469, 470, 471, 525, 526, 527, 1160, 473,
	472, 528, 1161, 1162, 1163, 1164, 474, 475, 529, 476,
	477, 478, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2977, 0, 224,
	225, 226, 227, 228, 1086, 229, 230, 1087, 1088, 1089,
	0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 1095, 237,
	238, 239, 240, 241, 1096, 1097, 242, 484, 485, 486,
	1098, 243, 244, 487, 1099, 1166, 1100, 245, 246, 247,
	248, 249, 250, 251, 0, 1101, 253, 254, 255, 252,
	1102, 256, 0, 257, 258, 259, 1103, 260, 959, 261,
	262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264,
	265, 266, 0, 267, 488, 489, 1111, 271, 268, 269,
	1112, 272, 270, 1113, 273, 1114, 1115, 274, 275, 276,
	1116, 277, 1117, 278, 279, 1118, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	1119, 221, 1120, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 1121, 296, 1122, 1123, 960,
	297, 298, 494, 495, 299, 300, 1124, 301, 496, 1125,
	497, 302, 1126, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 1127, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 1128, 961, 316,
	501, 502, 1129, 503, 1130, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1131, 329, 328, 1132, 330, 505, 966, 331,
	332, 967, 1133, 333, 334, 335, 1134, 1135, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 1136, 223, 970, 358, 1137, 506,
	359, 507, 361, 362, 1138, 0, 363, 0, 1139, 1140,
	365, 366, 367, 1141, 1142, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 1143, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 1144, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 1145, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1146, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1147, 421,
	422, 420, 423, 424, 425, 1148, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 1149, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 1150, 443, 444, 442, 1151, 445, 446, 447, 448,
	449, 286, 450, 1152, 451, 519, 520, 521, 522, 1153,
	458, 1154, 452, 453, 523, 454, 524, 1155, 455, 456,
	457, 0, 459, 460, 1156, 1157, 461, 462, 463, 465,
	466, 464, 467, 1158, 468, 1159, 0, 469, 470, 471,
	525, 526, 527, 1160, 473, 472, 528, 1161, 1162, 1163,
	1164, 474, 475, 529, 476, 477, 478, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2827, 0, 224, 225, 226, 227, 228, 1086,
	229, 230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092,
	1093, 1094, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 1095, 237, 238, 239, 240, 241, 1096,
	1097, 242, 484, 485, 486, 1098, 243, 244, 487, 1099,
	1166, 1100, 245, 246, 247, 248, 249, 250, 251, 0,
	1101, 253, 254, 255, 252, 1102, 256, 0, 257, 258,
	259, 1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106,
	1108, 1109, 1110, 263, 264, 265, 266, 0, 267, 488,
	489, 1111, 271, 268, 269, 1112, 272, 270, 1113, 273,
	1114, 1115, 274, 275, 276, 1116, 277, 1117, 278, 279,
	1118, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 1119, 221, 1120, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	1121, 296, 1122, 1123, 960, 297, 298, 494, 495, 299,
	300, 1124, 301, 496, 1125, 497, 302, 1126, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	1127, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 1128, 961, 316, 501, 502, 1129, 503, 1130,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1131, 329, 328,
	1132, 330, 505, 966, 331, 332, 967, 1133, 333, 334,
	335, 1134, 1135, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 1136,
	223, 970, 358, 1137, 506, 359, 507, 361, 362, 1138,
	0, 363, 0, 1139, 1140, 365, 366, 367, 1141, 1142,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 1143, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 1144, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 1145,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 1146, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 1147, 421, 422, 420, 423, 424, 425,
	1148, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 1149, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 1150, 443, 444, 442,
	1151, 445, 446, 447, 448, 449, 286, 450, 1152, 451,
	519, 520, 521, 522, 1153, 458, 1154, 452, 453, 523,
	454, 524, 1155, 455, 456, 457, 0, 459, 460, 1156,
	1157, 461, 462, 463, 465, 466, 464, 467, 1158, 468,
	1159, 0, 469, 470, 471, 525, 526, 527, 1160, 473,
	472, 528, 1161, 1162, 1163, 1164, 474, 475, 529, 476,
	477, 478, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2107, 0, 224,
	225, 226, 227, 228, 1086, 229, 230, 1087, 1088, 1089,
	0, 1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 1095, 237,
	238, 239, 240, 241, 1096, 1097, 242, 484, 485, 486,
	1098, 243, 244, 487, 1099, 1166, 1100, 245, 246, 247,
	248, 249, 250, 251, 0, 1101, 253, 254, 255, 252,
	1102, 256, 0, 257, 258, 259, 1103, 260, 959, 261,
	262, 1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264,
	265, 266, 0, 267, 488, 489, 1111, 271, 268, 269,
	1112, 272, 270, 1113, 273, 1114, 1115, 274, 275, 276,
	1116, 277, 1117, 278, 279, 1118, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	1119, 221, 1120, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 1121, 296, 1122, 1123, 960,
	297, 298, 494, 495, 299, 300, 1124, 301, 496, 1125,
	497, 302, 1126, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 1127, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 1128, 961, 316,
	501, 502, 1129, 503, 1130, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1131, 329, 328, 1132, 330, 505, 966, 331,
	332, 967, 1133, 333, 334, 335, 1134, 1135, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 1136, 223, 970, 358, 1137, 506,
	359, 507, 361, 362, 1138, 0, 363, 0, 1139, 1140,
	365, 366, 367, 1141, 1142, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 1143, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 1144, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 1145, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	1146, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 1147, 421,
	422, 420, 423, 424, 425, 1148, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 1149, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 1150, 443, 444, 442, 1151, 445, 446, 447, 448,
	449, 286, 450, 1152, 451, 519, 520, 521, 522, 1153,
	458, 1154, 452, 453, 523, 454, 524, 1155, 455, 456,
	457, 0, 459, 460, 1156, 1157, 461, 462, 463, 465,
	466, 464, 467, 1158, 468, 1159, 0, 469, 470, 471,
	525, 526, 527, 1160, 473, 472, 528, 1161, 1162, 1163,
	1164, 474, 475, 529, 476, 477, 478, 1178, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1806, 0, 0, 0, 224, 225, 226, 227,
	228, 1086, 229, 230, 1087, 1088, 1089, 0, 1090, 479,
	1091, 1092, 1093, 1094, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 1095, 237, 238, 239, 240,
	241, 1096, 1097, 242, 484, 485, 486, 1098, 243, 244,
	487, 1099, 1166, 1100, 245, 246, 247, 248, 249, 250,
	251, 0, 1101, 253, 254, 255, 252, 1102, 256, 0,
	257, 258, 259, 1103, 260, 959, 261, 262, 1104, 1105,
	1107, 1106, 1108, 1109, 1110, 263, 264, 265, 266, 0,
	267, 488, 489, 1111, 271, 268, 269, 1112, 272, 270,
	1113, 273, 1114, 1115, 274, 275, 276, 1116, 277, 1117,
	278, 279, 1118, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 1119, 221, 1120,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 1121, 296, 1122, 1123, 960, 297, 298, 494,
	495, 299, 300, 1124, 301, 496, 1125, 497, 302, 1126,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 962,
	308, 309, 1127, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 1128, 961, 316, 501, 502, 1129,
	503, 1130, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 1131,
	329, 328, 1132, 330, 505, 966, 331, 332, 967, 1133,
	333, 334, 335, 1134, 1135, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 1136, 223, 970, 358, 1137, 506, 359, 507, 361,
	362, 1138, 0, 363, 0, 1139, 1140, 365, 366, 367,
	1141, 1142, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 1143, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 1144, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 1145, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 1146, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 1147, 421, 422, 420, 423,
	424, 425, 1148, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 1149, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 1150, 443,
	444, 442, 1151, 445, 446, 447, 448, 449, 286, 450,
	1152, 451, 519, 520, 521, 522, 1153, 458, 1154, 452,
	453, 523, 454, 524, 1155, 455, 456, 457, 0, 459,
	460, 1156, 1157, 461, 462, 463, 465, 466, 464, 467,
	1158, 468, 1159, 0, 469, 470, 471, 525, 526, 527,
	1160, 473, 472, 528, 1161, 1162, 1163, 1164, 474, 475,
	529, 476, 477, 478, 1077, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 1086, 229,
	230, 1087, 1088, 1089, 0, 1090, 479, 1091, 1092, 1093,
	1094, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 1095, 237, 238, 239, 240, 241, 1096, 1097,
	242, 484, 485, 486, 1098, 243, 244, 487, 1099, 1166,
	1100, 245, 246, 247, 248, 249, 250, 251, 0, 1101,
	253, 254, 255, 252, 1102, 256, 0, 257, 258, 259,
	1103, 260, 959, 261, 262, 1104, 1105, 1107, 1106, 1108,
	1109, 1110, 263, 264, 265, 266, 0, 267, 488, 489,
	1111, 271, 268, 269, 1112, 272, 270, 1113, 273, 1114,
	1115, 274, 275, 276, 1116, 277, 1117, 278, 279, 1118,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 1119, 221, 1120, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 1121,
	296, 1122, 1123, 960, 297, 298, 494, 495, 299, 300,
	1124, 301, 496, 1125, 497, 302, 1126, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 1127,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 1128, 961, 316, 501, 502, 1129, 503, 1130, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1131, 329, 328, 1132,
	330, 505, 966, 331, 332, 967, 1133, 333, 334, 335,
	1134, 1135, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 1136, 223,
	970, 358, 1137, 506, 359, 507, 361, 362, 1138, 0,
	363, 0, 1139, 1140, 365, 366, 367, 1141, 1142, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 1143, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 1144, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 1145, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 1146, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 1147, 421, 422, 420, 423, 424, 425, 1148,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 1149, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 1150, 443, 444, 442, 1151,
	445, 446, 447, 448, 449, 286, 450, 1152, 451, 519,
	520, 521, 522, 1153, 458, 1154, 452, 453, 523, 454,
	524, 1155, 455, 456, 457, 0, 459, 460, 1156, 1157,
	461, 462, 463, 465, 466, 464, 467, 1158, 468, 1159,
	0, 469, 470, 471, 525, 526, 527, 1160, 473, 472,
	528, 1161, 1162, 1163, 1164, 474, 475, 529, 476, 477,
	478, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 1086, 229, 230, 1087, 1088, 1089, 0,
	1090, 479, 1091, 1092, 1093, 1094, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 1095, 237, 238,
	239, 240, 241, 1096, 1097, 242, 484, 485, 486, 1098,
	243, 244, 487, 1099, 1166, 1100, 245, 246, 247, 248,
	249, 250, 251, 0, 1101, 253, 254, 255, 252, 1102,
	256, 0, 257, 258, 259, 1103, 260, 959, 261, 262,
	1104, 1105, 1107, 1106, 1108, 1109, 1110, 263, 264, 265,
	266, 0, 267, 488, 489, 1111, 271, 268, 269, 1112,
	272, 270, 1113, 273, 1114, 1115, 274, 275, 276, 1116,
	277, 1117, 278, 279, 1118, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 1119,
	221, 1120, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 1121, 296, 1122, 1123, 960, 297,
	298, 494, 495, 299, 300, 1124, 301, 496, 1125, 497,
	302, 1126, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 1127, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 1128, 961, 316, 501,
	502, 1129, 503, 1130, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1131, 329, 328, 1132, 330, 505, 966, 331, 332,
	967, 1133, 333, 334, 335, 1134, 1135, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 1136, 223, 970, 358, 1137, 506, 359,
	507, 361, 362, 1138, 0, 363, 0, 1139, 1140, 365,
	366, 367, 1141, 1142, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	1143, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	1144, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 1145, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 1146,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 1147, 421, 422,
	420, 423, 424, 425, 1148, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 1149, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	1150, 443, 444, 442, 1151, 445, 446, 447, 448, 449,
	286, 450, 1152, 451, 519, 520, 521, 522, 1153, 458,
	1154, 452, 453, 523, 454, 524, 1155, 455, 456, 457,
	0, 459, 460, 1156, 1157, 461, 462, 463, 465, 466,
	464, 467, 1158, 468, 1159, 0, 469, 470, 471, 525,
	526, 527, 1160, 473, 472, 528, 1161, 1162, 1163, 1164,
	474, 475, 529, 476, 477, 478, 2082, 0, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	2079, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 2080, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 2078,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 2081, 0,
	0, 0, 0, 0, 0, 880, 2077, 0, 844, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 187, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 189, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 1329, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 181, 474,
	475, 529, 476, 477, 478, 855, 182, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 1538, 1536, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 187, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 189, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 1329, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 181, 474,
	475, 529, 476, 477, 478, 855, 182, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 1538, 2568, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 187, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 189, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 1329, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 181, 474,
	475, 529, 476, 477, 478, 855, 182, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	896, 868, 869, 870, 866, 867, 879, 1538, 1536, 0,
	0, 878, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 2186, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 2191, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 2187, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 2188,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	2127, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	2125, 0, 2124, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 2122, 0, 2121, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 2119, 0, 2118, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 2116, 0, 1398, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 1397, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	847, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 859, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 3629, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 859, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 3449, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 859, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 896, 868, 869, 870, 866, 867, 879, 880,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 3158, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 1606, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 0, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 2955, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 1996, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 1995, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	859, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 896, 868, 869, 870, 866, 867,
	879, 880, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 1606, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 0, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 2191, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 1536, 0, 2196, 878, 896, 868,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 880, 0, 0, 2194, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	2182, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 2171, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	921, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 2169, 878, 2160, 2167, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 2163, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	2164, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 2165, 2162, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 2166, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 2161,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 2157, 878, 2160, 2167,
	869, 870, 866, 867, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 2163,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 2164, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 2165, 2162, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 2166, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 2161, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 896, 868,
	869, 870, 866, 867, 879, 880, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 884,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 933,
	0, 940, 236, 939, 0, 237, 238, 239, 240, 241,
	886, 919, 242, 978, 979, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 943, 267,
	937, 936, 857, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 928, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 863, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 875, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 935, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 948, 949,
	299, 300, 0, 301, 957, 0, 885, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 930, 931, 0, 891,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	854, 223, 970, 358, 876, 924, 359, 938, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 934, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 864, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	932, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 977, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 944, 945, 946, 947, 0, 458, 0, 452, 453,
	955, 454, 956, 874, 455, 456, 457, 0, 459, 460,
	0, 858, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 941, 976, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 855, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 1544, 0, 880, 0, 0, 0, 878,
	896, 868, 869, 870, 866, 867, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 1975, 229, 230, 0, 0, 0, 0, 0,
	920, 884, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 933, 0, 940, 236, 939, 0, 237, 238, 239,
	240, 241, 886, 919, 242, 978, 979, 486, 0, 243,
	244, 926, 0, 907, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 959, 261, 262, 910,
	908, 909, 916, 912, 911, 915, 263, 264, 265, 266,
	943, 267, 937, 936, 857, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 928, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 863, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 950, 951, 875, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 935, 0,
	0, 0, 295, 0, 296, 0, 0, 960, 297, 298,
	948, 949, 299, 300, 0, 301, 957, 0, 885, 302,
	0, 303, 304, 305, 306, 307, 921, 922, 925, 360,
	962, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 961, 316, 930, 931,
	0, 891, 0, 318, 963, 923, 964, 319, 320, 321,
	965, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 958, 966, 331, 332, 967,
	0, 333, 334, 335, 914, 913, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 968, 352, 353, 356, 357, 355,
	969, 354, 854, 223, 970, 358, 876, 924, 359, 938,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 971, 370, 972, 952,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 953, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 934,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	973, 404, 405, 406, 407, 864, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 917, 426, 410, 411, 427, 428, 974,
	429, 430, 932, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 977, 437, 438, 439, 440, 954, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 944, 945, 946, 947, 0, 458, 0,
	452, 453, 955, 454, 956, 874, 455, 456, 457, 0,
	459, 460, 0, 858, 461, 462, 463, 465, 466, 464,
	467, 918, 468, 0, 0, 469, 470, 471, 525, 941,
	976, 0, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 855, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 0,
	1221, 878, 896, 868, 869, 870, 866, 867, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 920, 884, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 933, 0, 940, 236, 939, 0, 237,
	238, 239, 240, 241, 886, 919, 242, 978, 979, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 943, 267, 937, 936, 857, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 928, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 863, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	875, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	935, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 948, 949, 299, 300, 0, 301, 957, 0,
	885, 302, 0, 303, 304, 305, 306, 307, 1220, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	930, 931, 0, 891, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 854, 223, 970, 358, 876, 924,
	359, 938, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 934, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 864, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 932, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 977, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 944, 945, 946, 947, 0,
	458, 0, 452, 453, 955, 454, 956, 874, 455, 456,
	457, 0, 459, 460, 0, 858, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 941, 976, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 855, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 880,
	0, 0, 1215, 878, 896, 868, 869, 870, 866, 867,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 920, 884, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 933, 0, 940, 236, 939,
	0, 237, 238, 239, 240, 241, 886, 919, 242, 978,
	979, 486, 0, 243, 244, 926, 0, 907, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 910, 908, 909, 916, 912, 911, 915,
	263, 264, 265, 266, 943, 267, 937, 936, 857, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	863, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	950, 951, 875, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 935, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 948, 949, 299, 300, 0, 301,
	957, 0, 885, 302, 0, 303, 304, 305, 306, 307,
	1214, 922, 925, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	961, 316, 930, 931, 0, 891, 0, 318, 963, 923,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 958,
	966, 331, 332, 967, 0, 333, 334, 335, 914, 913,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 854, 223, 970, 358,
	876, 924, 359, 938, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	971, 370, 972, 952, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 953, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 934, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 864,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 917, 426, 410,
	411, 427, 428, 974, 429, 430, 932, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 977, 437, 438,
	439, 440, 954, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 944, 945, 946,
	947, 0, 458, 0, 452, 453, 955, 454, 956, 874,
	455, 456, 457, 0, 459, 460, 0, 858, 461, 462,
	463, 465, 466, 464, 467, 918, 468, 0, 0, 469,
	470, 471, 525, 941, 976, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 855,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 880, 0, 0, 1210, 878, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 3661, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 3660, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 3659, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 3661, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 3660, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	2535, 2536, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	2533, 2534, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 851, 852, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 855, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 1983, 1984, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 2179, 0, 0,
	0, 0, 0, 0, 2177, 2178, 896, 868, 869, 870,
	866, 867, 879, 880, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 2528, 2529, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 896, 868, 869, 870, 866, 867, 879, 0, 0,
	0, 0, 0, 0, 1736, 1737, 0, 0, 224, 225,
	226, 227, 228, 880, 229, 230, 0, 878, 0, 0,
	0, 920, 884, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 933, 0, 940, 236, 939, 0, 237, 238,
	239, 240, 241, 0, 919, 242, 978, 979, 486, 0,
	243, 244, 926, 0, 907, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	910, 908, 909, 916, 912, 911, 915, 263, 264, 265,
	266, 943, 267, 937, 936, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 928, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 950, 951, 875,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 935,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 948, 949, 299, 300, 0, 301, 957, 0, 885,
	302, 0, 303, 304, 305, 306, 307, 921, 922, 925,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 961, 316, 930,
	931, 0, 891, 0, 318, 963, 923, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 958, 966, 331, 332,
	967, 0, 333, 334, 335, 914, 913, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 223, 970, 358, 876, 924, 359,
	938, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	952, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 953, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	934, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 864, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 917, 426, 410, 411, 427, 428,
	974, 429, 430, 932, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 977, 437, 438, 439, 440, 954,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 944, 945, 946, 947, 0, 458,
	0, 452, 453, 955, 454, 956, 874, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 918, 468, 0, 0, 469, 470, 471, 525,
	941, 976, 0, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 896, 868, 869, 870,
	866, 867, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 880, 229,
	230, 0, 878, 0, 0, 0, 920, 884, 0, 0,
	0, 231, 233, 232, 234, 235, 0, 933, 0, 940,
	236, 939, 0, 237, 238, 239, 240, 241, 886, 919,
	242, 978, 979, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 3661, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 943, 267, 937, 936,
	857, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 928, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 863, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 875, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 935, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 948, 949, 299, 300,
	0, 301, 957, 0, 885, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 930, 931, 0, 891, 0, 318,
	0, 923, 0, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 958, 966, 331, 332, 0, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 854, 223,
	0, 358, 876, 924, 359, 938, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 934, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 864, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 0, 429, 430, 932, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 977,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 944,
	945, 946, 947, 0, 458, 0, 452, 453, 955, 454,
	956, 874, 455, 456, 457, 0, 3660, 460, 0, 858,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 941, 976, 0, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 1016, 0, 0, 851, 852, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 0, 0, 878, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 919, 242, 484, 485, 486, 0,
	243, 244, 926, 0, 907, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	910, 908, 909, 916, 912, 911, 915, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 950, 951, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 957, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 921, 922, 925,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 923, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 1002, 329, 328, 0, 330, 958, 966, 331, 332,
	967, 0, 333, 334, 335, 914, 913, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 223, 970, 358, 0, 924, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 1008, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	952, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 953, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 1010, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 187, 421, 422,
	420, 423, 424, 425, 917, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 954,
	0, 443, 444, 442, 189, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 955, 454, 956, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 918, 468, 0, 0, 469, 470, 471, 1329,
	526, 527, 0, 473, 472, 528, 0, 1016, 0, 181,
	474, 475, 529, 476, 477, 478, 0, 182, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 1006, 920, 1630, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	919, 242, 484, 485, 486, 0, 243, 244, 926, 0,
	907, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 910, 908, 909, 916,
	912, 911, 915, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 950, 951, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 957, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 921, 922, 925, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 923, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 1002, 329, 328,
	0, 330, 958, 966, 331, 332, 967, 0, 333, 334,
	335, 914, 913, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	223, 970, 358, 0, 924, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 1008, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 952, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 953, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 1010, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 187, 421, 422, 420, 423, 424, 425,
	917, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 954, 0, 443, 444, 442,
	189, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 955,
	454, 956, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 918, 468,
	0, 0, 469, 470, 471, 1329, 526, 527, 0, 473,
	472, 528, 0, 0, 0, 181, 474, 475, 529, 476,
	477, 478, 0, 182, 0, 0, 2685, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 0, 1630, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 919, 242, 484, 485, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 957, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 1002, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 223, 970, 358, 0, 924, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 1008, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 1010, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	955, 454, 956, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 998, 0, 1016, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 1006, 0, 1004, 920, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 919,
	242, 484, 485, 486, 0, 243, 244, 926, 0, 907,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 910, 908, 909, 916, 912,
	911, 915, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 950, 951, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 957, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 921, 922, 925, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 923, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 1002, 329, 328, 0,
	330, 958, 966, 331, 332, 967, 0, 333, 334, 335,
	914, 913, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 223,
	970, 358, 0, 924, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 1008, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 952, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	953, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 1010, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 917,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 954, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 955, 454,
	956, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 918, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 1016, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 1006, 920, 1004, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 919, 242, 484, 485, 486,
	0, 243, 244, 926, 0, 907, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 910, 908, 909, 916, 912, 911, 915, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 950, 951,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 957, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 921, 922,
	925, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 923, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 1002, 329, 328, 0, 330, 958, 966, 331,
	332, 967, 0, 333, 334, 335, 914, 913, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 223, 970, 358, 0, 924,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 1008,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 952, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 953, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 1010, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 917, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	954, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 955, 454, 956, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 918, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 1016, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 1006, 920, 1004,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 919, 242, 484, 485, 486, 0, 243, 244, 926,
	0, 907, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 910, 908, 909,
	916, 912, 911, 915, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 950, 951, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 957, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 921, 922, 925, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 923, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 958, 966, 331, 332, 967, 0, 333,
	334, 335, 914, 913, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 223, 970, 358, 0, 924, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 952, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 953, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 1010, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 917, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 954, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	955, 454, 956, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 918,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 844, 0, 1194, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 1528, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 1166,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 959, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 960, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 962, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 961, 316, 501, 502, 0, 503, 0, 318,
	963, 504, 964, 319, 320, 321, 965, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 966, 331, 332, 967, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	968, 352, 353, 356, 357, 355, 969, 354, 0, 0,
	970, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 971, 370, 972, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 973, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 187, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 974, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 189,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 1329, 526, 527, 0, 473, 472,
	528, 0, 0, 0, 181, 474, 475, 529, 476, 477,
	478, 0, 182, 0, 0, 1326, 0, 1194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 187, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	189, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 1329, 526, 527, 0, 473,
	472, 528, 0, 0, 0, 181, 474, 475, 529, 476,
	477, 478, 0, 182, 0, 0, 0, 0, 1194, 1193,
	0, 0, 0, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 1166, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 504, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 966, 331, 332, 967, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 0, 970, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 1194, 1193, 0, 0, 0, 0, 1191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 2892, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 1166, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 959,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	960, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 962, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 961,
	316, 501, 502, 0, 503, 0, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 966,
	331, 332, 967, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 0, 0, 970, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 1194, 1193,
	0, 0, 0, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	1200, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 1166, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 504, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 966, 331, 332, 967, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 0, 970, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1016, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 920, 0, 1335, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 919, 242, 484, 485,
	486, 0, 243, 244, 926, 0, 907, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 959,
	261, 262, 910, 908, 909, 916, 912, 911, 915, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 950,
	951, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	960, 297, 298, 494, 495, 299, 300, 0, 301, 957,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 921,
	922, 925, 360, 962, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 961,
	316, 501, 502, 0, 503, 0, 318, 963, 923, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 958, 966,
	331, 332, 967, 0, 333, 334, 335, 914, 913, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 0, 223, 970, 358, 0,
	924, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 971,
	370, 972, 952, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 953, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 917, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 954, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 955, 454, 956, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 918, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 844, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 187, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 189, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 1329, 526,
	527, 0, 473, 472, 528, 218, 0, 0, 181, 474,
	475, 529, 476, 477, 478, 0, 182, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 156, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	0, 1280, 0, 218, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 1644, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 1284, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 2841,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	1284, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 218, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 2433, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 218, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 2980, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 0, 713, 0, 607, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 1888, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 613, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	711, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 612, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 0,
	606, 0, 607, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 616, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	613, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 612, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 604,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 1194, 1193, 0,
	0, 0, 0, 1191, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 3122, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 1194, 1193, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 2821, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 607, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 613, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 1922, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 612, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 607, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 616, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 613, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 612, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 1362,
	0, 1194, 1193, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 1166, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 959, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 1361, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 960, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 962, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 961, 316, 501,
	502, 0, 503, 0, 318, 963, 504, 964, 319, 320,
	321, 965, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 966, 331, 332,
	967, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 968, 352, 353, 356, 357,
	355, 969, 354, 0, 0, 970, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 971, 370, 972,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 1360, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 973, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 1359, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	974, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 1323, 0, 1194, 1193,
	0, 0, 0, 0, 1191, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 1166, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 1322, 499, 500, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 504, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 966, 331, 332, 967, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 0, 970, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 1260, 0, 1194, 1193, 0, 0, 0,
	0, 1191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 1166, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 959, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 960, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1259, 499, 500, 360, 962, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 961, 316, 501, 502, 0, 503, 0, 318, 963,
	504, 964, 319, 320, 321, 965, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 966, 331, 332, 967, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 968,
	352, 353, 356, 357, 355, 969, 354, 0, 0, 970,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 971, 370, 972, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 973, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 974, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	1189, 0, 1194, 1193, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 1166, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 959, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 960,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1188, 499,
	500, 360, 962, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 961, 316,
	501, 502, 0, 503, 0, 318, 963, 504, 964, 319,
	320, 321, 965, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 966, 331,
	332, 967, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 968, 352, 353, 356,
	357, 355, 969, 354, 0, 0, 970, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 971, 370,
	972, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 973, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 974, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 1194, 1193, 0,
	0, 0, 0, 1191, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	1166, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 959, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 960, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 962, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 961, 316, 501, 502, 0, 503, 0,
	318, 963, 504, 964, 319, 320, 321, 965, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 966, 331, 332, 967, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 968, 352, 353, 356, 357, 355, 969, 354, 0,
	0, 970, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 971, 370, 972, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 973, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 974, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1194, 1193, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 616, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 1166, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 959,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 1709, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	960, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 962, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 961,
	316, 501, 502, 0, 503, 0, 318, 963, 504, 964,
	319, 320, 321, 965, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 966,
	331, 332, 967, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 968, 352, 353,
	356, 357, 355, 969, 354, 0, 0, 970, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 971,
	370, 972, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 973, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 974, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 1194, 1193,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 1166, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 959, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 960, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 962, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 961, 316, 501, 502, 0, 503,
	0, 318, 963, 504, 964, 319, 320, 321, 965, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 966, 331, 332, 967, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 968, 352, 353, 356, 357, 355, 969, 354,
	0, 0, 970, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 971, 370, 972, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 973, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 974, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 1194,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 1166, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 959, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 960, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 962,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 961, 316, 501, 502, 0,
	503, 0, 318, 963, 504, 964, 319, 320, 321, 965,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 966, 331, 332, 967, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 968, 352, 353, 356, 357, 355, 969,
	354, 0, 0, 970, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 971, 370, 972, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 973,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 974, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 2308, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 2305, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 2312, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 2469,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 2311, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 2466, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 2468, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 2465,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 2310,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 2467, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 2308,
	243, 244, 487, 0, 0, 2302, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 2305,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 2312, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 2311, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 2301, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	2310, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 2309, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1419, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 1422, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 1420, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	1421, 472, 528, 1170, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1172, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 1008, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1167, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1169, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 1008,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1073, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1075, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 1008, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 558, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 557, 228, 547, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	550, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	551, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 552, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 546, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 547, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 550, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 551, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 552,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 2803, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 1008, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	2405, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 2404, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1898, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 221, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	222, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 223, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 221,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 222, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 223, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 1829, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1834, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 1833, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 1822, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 221, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	1824, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 222, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 223, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 1314,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	221, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 1313, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 222, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 223, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1311, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 1310, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 1307, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 1306, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	1181, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 221, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 1183, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 222, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 223, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 221, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 222, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 223, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 550, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 551, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	552, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 1929, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 221, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 222, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 223, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 1927, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 221, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 222, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 223,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 1925, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 221, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 222, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	223, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 221, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 1872, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 222,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 223, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 704, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 703, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 702, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 2469, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 3325, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 537, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 536, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	535, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 218, 3334,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 218, 2456, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 3110, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 2230, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	218, 2456, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	2453, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 1906, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 0, 473, 472, 528, 1896, 0, 218, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 413, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 0,
	473, 472, 528, 578, 0, 218, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 1047, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 1045, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 579, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 575, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 1048, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 574, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 0, 473, 472, 528,
	578, 0, 218, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 568, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 579, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 575, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 1334, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 574, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 0, 473, 472, 528, 1320, 0, 218,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 1319, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 426, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	0, 473, 472, 528, 1268, 0, 218, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 1267, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 1253, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 1252,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 1248, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 1175, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 578, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	1047, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 1045, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 579, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 575, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 1048, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 574, 520, 521,
	522, 0, 458, 0, 452, 1046, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 1029, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 498, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 584, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 498, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 0, 473, 472,
	528, 578, 0, 218, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 568, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 566, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 567, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 579, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 569, 408,
	0, 409, 413, 414, 575, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 570, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 574, 520, 521, 522,
	0, 458, 0, 452, 572, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 0, 473, 472, 528, 562, 0,
	218, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 498, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 563,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 0, 473, 472, 528, 560, 0, 218, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 498, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 0, 473,
	472, 528, 554, 0, 218, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	498, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 0, 473, 472, 528, 532,
	0, 218, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 498, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 392, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 302, 0, 303, 304, 305, 306, 307, 2856,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 374, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 389,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 408,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 218, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 479, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 480, 481, 0, 482, 236, 483,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 484,
	485, 486, 0, 243, 244, 487, 0, 0, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 0, 267, 488, 489, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	275, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	490, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	491, 492, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 493, 0, 0, 0, 295, 0, 296, 0,
	0, 0, 297, 298, 494, 495, 299, 300, 0, 301,
	496, 0, 497, 302, 0, 303, 304, 305, 306, 307,
	2779, 499, 500, 360, 0, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	0, 316, 501, 502, 0, 503, 0, 318, 0, 504,
	0, 319, 320, 321, 0, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 505,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 0, 352,
	353, 356, 357, 355, 0, 354, 0, 0, 0, 358,
	0, 506, 359, 507, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 508,
	0, 370, 0, 509, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 510, 511, 512, 381,
	513, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 514, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 515,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 0, 429, 430, 516, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 517, 437, 438,
	439, 440, 518, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 519, 520, 521,
	522, 0, 458, 0, 452, 453, 523, 454, 524, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 525, 526, 527, 218, 473, 472, 528, 0,
	0, 0, 0, 474, 475, 529, 476, 477, 478, 0,
	0, 0, 224, 225, 226, 227, 228, 0, 229, 230,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	231, 233, 232, 234, 235, 480, 481, 0, 482, 236,
	483, 0, 237, 238, 239, 240, 241, 0, 0, 242,
	484, 485, 486, 0, 243, 244, 487, 0, 0, 0,
	245, 246, 247, 248, 249, 250, 251, 0, 0, 253,
	254, 255, 252, 0, 256, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 0, 0, 0, 0, 0,
	0, 263, 264, 265, 266, 0, 267, 488, 489, 0,
	271, 268, 269, 0, 272, 270, 0, 273, 0, 0,
	274, 275, 276, 0, 277, 0, 278, 279, 0, 280,
	281, 490, 282, 283, 285, 287, 284, 288, 289, 290,
	291, 491, 492, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 294, 493, 0, 0, 0, 295, 0, 296,
	0, 0, 0, 297, 298, 494, 495, 299, 300, 0,
	301, 496, 0, 497, 302, 0, 303, 304, 305, 306,
	307, 2777, 499, 500, 360, 0, 308, 309, 0, 310,
	311, 312, 313, 0, 0, 0, 0, 314, 315, 317,
	0, 0, 316, 501, 502, 0, 503, 0, 318, 0,
	504, 0, 319, 320, 321, 0, 322, 0, 0, 0,
	323, 324, 325, 326, 327, 0, 329, 328, 0, 330,
	505, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	0, 336, 337, 338, 339, 0, 340, 341, 343, 345,
	342, 344, 349, 346, 347, 348, 351, 0, 350, 0,
	352, 353, 356, 357, 355, 0, 354, 0, 0, 0,
	358, 0, 506, 359, 507, 361, 362, 0, 0, 363,
	0, 0, 0, 365, 366, 367, 0, 0, 368, 369,
	508, 0, 370, 0, 509, 371, 364, 372, 373, 374,
	375, 376, 377, 378, 0, 379, 380, 510, 511, 512,
	381, 513, 382, 383, 0, 384, 0, 385, 386, 387,
	388, 389, 390, 391, 514, 392, 393, 0, 0, 0,
	0, 0, 0, 394, 0, 396, 397, 398, 395, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	515, 408, 0, 409, 413, 414, 415, 416, 417, 418,
	419, 0, 421, 422, 420, 423, 424, 425, 0, 426,
	410, 411, 427, 428, 0, 429, 430, 516, 0, 431,
	0, 432, 433, 434, 435, 412, 436, 441, 517, 437,
	438, 439, 440, 518, 0, 443, 444, 442, 0, 445,
	446, 447, 448, 449, 286, 450, 0, 451, 519, 520,
	521, 522, 0, 458, 0, 452, 453, 523, 454, 524,
	0, 455, 456, 457, 0, 459, 460, 0, 0, 461,
	462, 463, 465, 466, 464, 467, 0, 468, 0, 0,
	469, 470, 471, 525, 526, 527, 218, 473, 472, 528,
	0, 0, 0, 0, 474, 475, 529, 476, 477, 478,
	0, 0, 0, 224, 225, 226, 227, 228, 0, 229,
	230, 0, 0, 0, 0, 0, 479, 0, 0, 0,
	0, 231, 233, 232, 234, 235, 480, 481, 0, 482,
	236, 483, 0, 237, 238, 239, 240, 241, 0, 0,
	242, 484, 485, 486, 0, 243, 244, 487, 0, 0,
	0, 245, 246, 247, 248, 249, 250, 251, 0, 0,
	253, 254, 255, 252, 0, 256, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 265, 266, 0, 267, 488, 489,
	0, 271, 268, 269, 0, 272, 270, 0, 273, 0,
	0, 274, 275, 276, 0, 277, 0, 278, 279, 0,
	280, 281, 490, 282, 283, 285, 287, 284, 288, 289,
	290, 291, 491, 492, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 294, 493, 0, 0, 0, 295, 0,
	296, 0, 0, 0, 297, 298, 494, 495, 299, 300,
	0, 301, 496, 0, 497, 302, 0, 303, 304, 305,
	306, 307, 2763, 499, 500, 360, 0, 308, 309, 0,
	310, 311, 312, 313, 0, 0, 0, 0, 314, 315,
	317, 0, 0, 316, 501, 502, 0, 503, 0, 318,
	0, 504, 0, 319, 320, 321, 0, 322, 0, 0,
	0, 323, 324, 325, 326, 327, 0, 329, 328, 0,
	330, 505, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 336, 337, 338, 339, 0, 340, 341, 343,
	345, 342, 344, 349, 346, 347, 348, 351, 0, 350,
	0, 352, 353, 356, 357, 355, 0, 354, 0, 0,
	0, 358, 0, 506, 359, 507, 361, 362, 0, 0,
	363, 0, 0, 0, 365, 366, 367, 0, 0, 368,
	369, 508, 0, 370, 0, 509, 371, 364, 372, 373,
	374, 375, 376, 377, 378, 0, 379, 380, 510, 511,
	512, 381, 513, 382, 383, 0, 384, 0, 385, 386,
	387, 388, 389, 390, 391, 514, 392, 393, 0, 0,
	0, 0, 0, 0, 394, 0, 396, 397, 398, 395,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 515, 408, 0, 409, 413, 414, 415, 416, 417,
	418, 419, 0, 421, 422, 420, 423, 424, 425, 0,
	426, 410, 411, 427, 428, 0, 429, 430, 516, 0,
	431, 0, 432, 433, 434, 435, 412, 436, 441, 517,
	437, 438, 439, 440, 518, 0, 443, 444, 442, 0,
	445, 446, 447, 448, 449, 286, 450, 0, 451, 519,
	520, 521, 522, 0, 458, 0, 452, 453, 523, 454,
	524, 0, 455, 456, 457, 0, 459, 460, 0, 0,
	461, 462, 463, 465, 466, 464, 467, 0, 468, 0,
	0, 469, 470, 471, 525, 526, 527, 218, 473, 472,
	528, 0, 0, 0, 0, 474, 475, 529, 476, 477,
	478, 0, 0, 0, 224, 225, 226, 227, 228, 0,
	229, 230, 0, 0, 0, 0, 0, 479, 0, 0,
	0, 0, 231, 233, 232, 234, 235, 480, 481, 0,
	482, 236, 483, 0, 237, 238, 239, 240, 241, 0,
	0, 242, 484, 485, 486, 0, 243, 244, 487, 0,
	0, 0, 245, 246, 247, 248, 249, 250, 251, 0,
	0, 253, 254, 255, 252, 0, 256, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 265, 266, 0, 267, 488,
	489, 0, 271, 268, 269, 0, 272, 270, 0, 273,
	0, 0, 274, 275, 276, 0, 277, 0, 278, 279,
	0, 280, 281, 490, 282, 283, 285, 287, 284, 288,
	289, 290, 291, 491, 492, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 294, 493, 0, 0, 0, 295,
	0, 296, 0, 0, 0, 297, 298, 494, 495, 299,
	300, 0, 301, 496, 0, 497, 302, 0, 303, 304,
	305, 306, 307, 2413, 499, 500, 360, 0, 308, 309,
	0, 310, 311, 312, 313, 0, 0, 0, 0, 314,
	315, 317, 0, 0, 316, 501, 502, 0, 503, 0,
	318, 0, 504, 0, 319, 320, 321, 0, 322, 0,
	0, 0, 323, 324, 325, 326, 327, 0, 329, 328,
	0, 330, 505, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 0, 336, 337, 338, 339, 0, 340, 341,
	343, 345, 342, 344, 349, 346, 347, 348, 351, 0,
	350, 0, 352, 353, 356, 357, 355, 0, 354, 0,
	0, 0, 358, 0, 506, 359, 507, 361, 362, 0,
	0, 363, 0, 0, 0, 365, 366, 367, 0, 0,
	368, 369, 508, 0, 370, 0, 509, 371, 364, 372,
	373, 374, 375, 376, 377, 378, 0, 379, 380, 510,
	511, 512, 381, 513, 382, 383, 0, 384, 0, 385,
	386, 387, 388, 389, 390, 391, 514, 392, 393, 0,
	0, 0, 0, 0, 0, 394, 0, 396, 397, 398,
	395, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 515, 408, 0, 409, 413, 414, 415, 416,
	417, 418, 419, 0, 421, 422, 420, 423, 424, 425,
	0, 426, 410, 411, 427, 428, 0, 429, 430, 516,
	0, 431, 0, 432, 433, 434, 435, 412, 436, 441,
	517, 437, 438, 439, 440, 518, 0, 443, 444, 442,
	0, 445, 446, 447, 448, 449, 286, 450, 0, 451,
	519, 520, 521, 522, 0, 458, 0, 452, 453, 523,
	454, 524, 0, 455, 456, 457, 0, 459, 460, 0,
	0, 461, 462, 463, 465, 466, 464, 467, 0, 468,
	0, 0, 469, 470, 471, 525, 526, 527, 218, 473,
	472, 528, 0, 0, 0, 0, 474, 475, 529, 476,
	477, 478, 0, 0, 0, 224, 225, 226, 227, 228,
	0, 229, 230, 0, 0, 0, 0, 0, 479, 0,
	0, 0, 0, 231, 233, 232, 234, 235, 480, 481,
	0, 482, 236, 483, 0, 237, 238, 239, 240, 241,
	0, 0, 242, 484, 485, 486, 0, 243, 244, 487,
	0, 0, 0, 245, 246, 247, 248, 249, 250, 251,
	0, 0, 253, 254, 255, 252, 0, 256, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 0, 0,
	0, 0, 0, 0, 263, 264, 265, 266, 0, 267,
	488, 489, 0, 271, 268, 269, 0, 272, 270, 0,
	273, 0, 0, 274, 275, 276, 0, 277, 0, 278,
	279, 0, 280, 281, 490, 282, 283, 285, 287, 284,
	288, 289, 290, 291, 491, 492, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 294, 493, 0, 0, 0,
	295, 0, 296, 0, 0, 0, 297, 298, 494, 495,
	299, 300, 0, 301, 496, 0, 497, 302, 0, 303,
	304, 305, 306, 307, 498, 499, 500, 360, 0, 308,
	309, 0, 310, 311, 312, 313, 0, 0, 0, 0,
	314, 315, 317, 0, 0, 316, 501, 502, 0, 503,
	0, 318, 0, 504, 0, 319, 320, 321, 0, 322,
	0, 0, 0, 323, 324, 325, 326, 327, 0, 329,
	328, 0, 330, 505, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 0, 336, 337, 338, 339, 0, 340,
	341, 343, 345, 342, 344, 349, 346, 347, 348, 351,
	0, 350, 0, 352, 353, 356, 357, 355, 0, 354,
	0, 0, 0, 358, 0, 506, 359, 507, 361, 362,
	0, 0, 363, 0, 0, 0, 365, 366, 367, 0,
	0, 368, 369, 508, 0, 370, 0, 509, 371, 364,
	372, 373, 374, 375, 376, 377, 378, 0, 379, 380,
	510, 511, 512, 381, 513, 382, 383, 0, 384, 0,
	385, 386, 387, 388, 389, 390, 391, 514, 392, 393,
	0, 0, 0, 0, 0, 0, 394, 0, 396, 397,
	398, 395, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 515, 408, 0, 409, 563, 414, 415,
	416, 417, 418, 419, 0, 421, 422, 420, 423, 424,
	425, 0, 426, 410, 411, 427, 428, 0, 429, 430,
	516, 0, 431, 0, 432, 433, 434, 435, 412, 436,
	441, 517, 437, 438, 439, 440, 518, 0, 443, 444,
	442, 0, 445, 446, 447, 448, 449, 286, 450, 0,
	451, 519, 520, 521, 522, 0, 458, 0, 452, 453,
	523, 454, 524, 0, 455, 456, 457, 0, 459, 460,
	0, 0, 461, 462, 463, 465, 466, 464, 467, 0,
	468, 0, 0, 469, 470, 471, 525, 526, 527, 218,
	473, 472, 528, 0, 0, 0, 0, 474, 475, 529,
	476, 477, 478, 0, 0, 0, 224, 225, 226, 227,
	228, 0, 229, 230, 0, 0, 0, 0, 0, 479,
	0, 1854, 0, 0, 231, 233, 232, 234, 235, 480,
	481, 0, 482, 236, 483, 0, 237, 238, 239, 240,
	241, 0, 0, 242, 484, 485, 486, 0, 243, 244,
	487, 0, 0, 0, 245, 246, 247, 248, 249, 250,
	251, 0, 0, 253, 254, 255, 252, 0, 256, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 0,
	0, 0, 0, 0, 0, 263, 264, 265, 266, 0,
	267, 488, 489, 0, 271, 268, 269, 0, 272, 270,
	0, 273, 0, 0, 274, 275, 276, 0, 277, 0,
	278, 279, 0, 280, 281, 490, 282, 283, 285, 287,
	284, 288, 289, 290, 291, 491, 492, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 294, 493, 0, 0,
	0, 295, 0, 296, 0, 0, 0, 297, 298, 494,
	495, 299, 300, 0, 301, 496, 0, 497, 302, 0,
	303, 304, 305, 306, 307, 498, 499, 500, 360, 0,
	308, 309, 0, 310, 311, 312, 313, 0, 0, 0,
	0, 314, 315, 317, 0, 0, 316, 501, 502, 0,
	503, 0, 318, 0, 504, 0, 319, 320, 321, 0,
	322, 0, 0, 0, 323, 324, 325, 326, 327, 0,
	329, 328, 0, 330, 505, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 0, 336, 337, 338, 339, 0,
	340, 341, 343, 345, 342, 344, 349, 346, 347, 348,
	351, 0, 350, 0, 352, 353, 356, 357, 355, 0,
	354, 0, 0, 0, 358, 0, 506, 359, 507, 361,
	362, 0, 0, 363, 0, 0, 0, 365, 366, 367,
	0, 0, 368, 369, 508, 0, 370, 0, 509, 371,
	364, 372, 373, 374, 375, 376, 377, 378, 0, 379,
	380, 510, 511, 512, 381, 513, 382, 383, 0, 384,
	0, 385, 386, 387, 388, 389, 390, 391, 514, 392,
	393, 0, 0, 0, 0, 0, 0, 394, 0, 396,
	397, 398, 395, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 515, 408, 0, 409, 413, 414,
	415, 416, 417, 418, 419, 0, 421, 422, 420, 423,
	424, 425, 0, 0, 410, 411, 427, 428, 0, 429,
	430, 516, 0, 431, 0, 432, 433, 434, 435, 412,
	436, 441, 517, 437, 438, 439, 440, 518, 0, 443,
	444, 442, 0, 445, 446, 447, 448, 449, 286, 450,
	0, 451, 519, 520, 521, 522, 0, 458, 0, 452,
	453, 523, 454, 524, 0, 455, 456, 457, 0, 459,
	460, 0, 0, 461, 462, 463, 465, 466, 464, 467,
	0, 468, 0, 0, 469, 470, 471, 525, 526, 527,
	218, 473, 472, 528, 0, 0, 0, 0, 474, 475,
	529, 476, 477, 478, 0, 0, 0, 224, 225, 226,
	227, 228, 0, 229, 230, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 231, 233, 232, 234, 235,
	480, 481, 0, 482, 236, 483, 0, 237, 238, 239,
	240, 241, 0, 0, 242, 484, 485, 486, 0, 243,
	244, 487, 0, 0, 0, 245, 246, 247, 248, 249,
	250, 251, 0, 0, 253, 254, 255, 252, 0, 256,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 265, 266,
	0, 267, 488, 489, 0, 271, 268, 269, 0, 272,
	270, 0, 273, 0, 0, 274, 275, 276, 0, 277,
	0, 278, 279, 0, 280, 281, 490, 282, 283, 285,
	287, 284, 288, 289, 290, 291, 491, 492, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 294, 493, 0,
	0, 0, 295, 0, 296, 0, 0, 0, 297, 298,
	494, 495, 299, 300, 0, 301, 496, 0, 497, 302,
	0, 303, 304, 305, 306, 307, 1290, 499, 500, 360,
	0, 308, 309, 0, 310, 311, 312, 313, 0, 0,
	0, 0, 314, 315, 317, 0, 0, 316, 501, 502,
	0, 503, 0, 318, 0, 504, 0, 319, 320, 321,
	0, 322, 0, 0, 0, 323, 324, 325, 326, 327,
	0, 329, 328, 0, 330, 505, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 0, 336, 337, 338, 339,
	0, 340, 341, 343, 345, 342, 344, 349, 346, 347,
	348, 351, 0, 350, 0, 352, 353, 356, 357, 355,
	0, 354, 0, 0, 0, 358, 0, 506, 359, 507,
	361, 362, 0, 0, 363, 0, 0, 0, 365, 366,
	367, 0, 0, 368, 369, 508, 0, 370, 0, 509,
	371, 364, 372, 373, 374, 375, 376, 377, 378, 0,
	379, 380, 510, 511, 512, 381, 513, 382, 383, 0,
	384, 0, 385, 386, 387, 388, 389, 390, 391, 514,
	392, 393, 0, 0, 0, 0, 0, 0, 394, 0,
	396, 397, 398, 395, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 515, 408, 0, 409, 413,
	414, 415, 416, 417, 418, 419, 0, 421, 422, 420,
	423, 424, 425, 0, 426, 410, 411, 427, 428, 0,
	429, 430, 516, 0, 431, 0, 432, 433, 434, 435,
	412, 436, 441, 517, 437, 438, 439, 440, 518, 0,
	443, 444, 442, 0, 445, 446, 447, 448, 449, 286,
	450, 0, 451, 519, 520, 521, 522, 0, 458, 0,
	452, 453, 523, 454, 524, 0, 455, 456, 457, 0,
	459, 460, 0, 0, 461, 462, 463, 465, 466, 464,
	467, 0, 468, 0, 0, 469, 470, 471, 525, 526,
	527, 218, 473, 472, 528, 0, 0, 0, 0, 474,
	475, 529, 476, 477, 478, 0, 0, 0, 224, 225,
	226, 227, 228, 0, 229, 230, 0, 0, 0, 0,
	0, 479, 0, 0, 0, 0, 231, 233, 232, 234,
	235, 480, 481, 0, 482, 236, 483, 0, 237, 238,
	239, 240, 241, 0, 0, 242, 484, 485, 486, 0,
	243, 244, 487, 0, 0, 0, 245, 246, 247, 248,
	249, 250, 251, 0, 0, 253, 254, 255, 252, 0,
	256, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 265,
	266, 0, 267, 488, 489, 0, 271, 268, 269, 0,
	272, 270, 0, 273, 0, 0, 274, 275, 276, 0,
	277, 0, 278, 279, 0, 280, 281, 490, 282, 283,
	285, 287, 284, 288, 289, 290, 291, 491, 492, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 294, 493,
	0, 0, 0, 295, 0, 296, 0, 0, 0, 297,
	298, 494, 495, 299, 300, 0, 301, 496, 0, 497,
	302, 0, 303, 304, 305, 306, 307, 1230, 499, 500,
	360, 0, 308, 309, 0, 310, 311, 312, 313, 0,
	0, 0, 0, 314, 315, 317, 0, 0, 316, 501,
	502, 0, 503, 0, 318, 0, 504, 0, 319, 320,
	321, 0, 322, 0, 0, 0, 323, 324, 325, 326,
	327, 0, 329, 328, 0, 330, 505, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 0, 336, 337, 338,
	339, 0, 340, 341, 343, 345, 342, 344, 349, 346,
	347, 348, 351, 0, 350, 0, 352, 353, 356, 357,
	355, 0, 354, 0, 0, 0, 358, 0, 506, 359,
	507, 361, 362, 0, 0, 363, 0, 0, 0, 365,
	366, 367, 0, 0, 368, 369, 508, 0, 370, 0,
	509, 371, 364, 372, 373, 374, 375, 376, 377, 378,
	0, 379, 380, 510, 511, 512, 381, 513, 382, 383,
	0, 384, 0, 385, 386, 387, 388, 389, 390, 391,
	514, 392, 393, 0, 0, 0, 0, 0, 0, 394,
	0, 396, 397, 398, 395, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 515, 408, 0, 409,
	413, 414, 415, 416, 417, 418, 419, 0, 421, 422,
	420, 423, 424, 425, 0, 426, 410, 411, 427, 428,
	0, 429, 430, 516, 0, 431, 0, 432, 433, 434,
	435, 412, 436, 441, 517, 437, 438, 439, 440, 518,
	0, 443, 444, 442, 0, 445, 446, 447, 448, 449,
	286, 450, 0, 451, 519, 520, 521, 522, 0, 458,
	0, 452, 453, 523, 454, 524, 0, 455, 456, 457,
	0, 459, 460, 0, 0, 461, 462, 463, 465, 466,
	464, 467, 0, 468, 0, 0, 469, 470, 471, 525,
	526, 527, 218, 473, 472, 528, 0, 0, 0, 0,
	474, 475, 529, 476, 477, 478, 0, 0, 0, 224,
	225, 226, 227, 228, 0, 229, 230, 0, 0, 0,
	0, 0, 479, 0, 0, 0, 0, 231, 233, 232,
	234, 235, 480, 481, 0, 482, 236, 483, 0, 237,
	238, 239, 240, 241, 0, 0, 242, 484, 485, 486,
	0, 243, 244, 487, 0, 0, 0, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 253, 254, 255, 252,
	0, 256, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 266, 0, 267, 488, 489, 0, 271, 268, 269,
	0, 272, 270, 0, 273, 0, 0, 274, 275, 276,
	0, 277, 0, 278, 279, 0, 280, 281, 490, 282,
	283, 285, 287, 284, 288, 289, 290, 291, 491, 492,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 294,
	493, 0, 0, 0, 295, 0, 296, 0, 0, 0,
	297, 298, 494, 495, 299, 300, 0, 301, 496, 0,
	497, 302, 0, 303, 304, 305, 306, 307, 498, 499,
	500, 360, 0, 308, 309, 0, 310, 311, 312, 313,
	0, 0, 0, 0, 314, 315, 317, 0, 0, 316,
	501, 502, 0, 503, 0, 318, 0, 504, 0, 319,
	320, 321, 0, 322, 0, 0, 0, 323, 324, 325,
	326, 327, 0, 329, 328, 0, 330, 505, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 0, 336, 337,
	338, 339, 0, 340, 341, 343, 345, 342, 344, 349,
	346, 347, 348, 351, 0, 350, 0, 352, 353, 356,
	357, 355, 0, 354, 0, 0, 0, 358, 0, 506,
	359, 507, 361, 362, 0, 0, 363, 0, 0, 0,
	365, 366, 367, 0, 0, 368, 369, 508, 0, 370,
	0, 509, 371, 364, 372, 373, 374, 375, 376, 377,
	378, 0, 379, 380, 510, 511, 512, 381, 513, 382,
	383, 0, 384, 0, 385, 386, 387, 388, 389, 390,
	391, 514, 981, 393, 0, 0, 0, 0, 0, 0,
	394, 0, 396, 397, 398, 395, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 515, 408, 0,
	409, 413, 414, 415, 416, 417, 418, 419, 0, 421,
	422, 420, 423, 424, 425, 0, 426, 410, 411, 427,
	428, 0, 429, 430, 516, 0, 431, 0, 432, 433,
	434, 435, 412, 436, 441, 517, 437, 438, 439, 440,
	518, 0, 443, 444, 442, 0, 445, 446, 447, 448,
	449, 286, 450, 0, 451, 519, 520, 521, 522, 0,
	458, 0, 452, 453, 523, 454, 524, 0, 455, 456,
	457, 0, 459, 460, 0, 0, 461, 462, 463, 465,
	466, 464, 467, 0, 468, 0, 0, 469, 470, 471,
	525, 526, 527, 218, 473, 472, 528, 0, 0, 0,
	0, 474, 475, 529, 476, 477, 478, 0, 0, 0,
	224, 225, 226, 227, 228, 0, 229, 230, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 231, 233,
	232, 234, 235, 480, 481, 0, 482, 236, 483, 0,
	237, 238, 239, 240, 241, 0, 0, 242, 484, 485,
	486, 0, 243, 244, 487, 0, 0, 0, 245, 246,
	247, 248, 249, 250, 251, 0, 0, 253, 254, 255,
	252, 0, 256, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 265, 266, 0, 267, 488, 489, 0, 271, 268,
	269, 0, 272, 270, 0, 273, 0, 0, 274, 275,
	276, 0, 277, 0, 278, 279, 0, 280, 281, 490,
	282, 283, 285, 287, 284, 288, 289, 290, 291, 491,
	492, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	294, 493, 0, 0, 0, 295, 0, 296, 0, 0,
	0, 297, 298, 494, 495, 299, 300, 0, 301, 496,
	0, 497, 0, 0, 303, 304, 305, 306, 307, 498,
	499, 500, 360, 0, 308, 309, 0, 310, 311, 312,
	313, 0, 0, 0, 0, 314, 315, 317, 0, 0,
	316, 501, 502, 0, 503, 0, 318, 0, 504, 0,
	319, 320, 321, 0, 322, 0, 0, 0, 323, 324,
	325, 326, 327, 0, 329, 328, 0, 330, 505, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 336,
	337, 338, 339, 0, 340, 341, 343, 345, 342, 344,
	349, 346, 347, 348, 351, 0, 350, 0, 352, 353,
	356, 357, 355, 0, 354, 0, 0, 0, 358, 0,
	506, 359, 507, 361, 362, 0, 0, 363, 0, 0,
	0, 365, 366, 367, 0, 0, 368, 369, 508, 0,
	370, 0, 509, 371, 364, 372, 373, 0, 375, 376,
	377, 378, 0, 379, 380, 510, 511, 512, 381, 513,
	382, 383, 0, 384, 0, 385, 386, 387, 388, 0,
	390, 391, 514, 392, 393, 0, 0, 0, 0, 0,
	0, 394, 0, 396, 397, 398, 395, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 515, 0,
	0, 409, 413, 414, 415, 416, 417, 418, 419, 0,
	421, 422, 420, 423, 424, 425, 0, 426, 410, 411,
	427, 428, 0, 429, 430, 516, 0, 431, 0, 432,
	433, 434, 435, 412, 436, 441, 517, 437, 438, 439,
	440, 518, 0, 443, 444, 442, 0, 445, 446, 447,
	448, 449, 286, 450, 0, 451, 519, 520, 521, 522,
	0, 458, 0, 452, 453, 523, 454, 524, 0, 455,
	456, 457, 0, 459, 460, 0, 0, 461, 462, 463,
	465, 466, 464, 467, 0, 468, 0, 0, 469, 470,
	471, 525, 526, 527, 1678, 473, 472, 528, 0, 0,
	0, 0, 474, 475, 529, 476, 477, 478, 0, 0,
	0, 224, 225, 226, 227, 228, 0, 229, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 231,
	233, 232, 234, 235, 0, 1684, 0, 1674, 236, 1690,
	0, 237, 238, 239, 240, 241, 0, 0, 242, 1699,
	1700, 0, 0, 243, 244, 0, 0, 1166, 0, 245,
	246, 247, 248, 249, 250, 251, 0, 0, 253, 254,
	255, 252, 0, 256, 0, 257, 258, 259, 0, 260,
	959, 261, 262, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 265, 266, 943, 267, 1688, 1687, 0, 271,
	268, 269, 0, 272, 270, 0, 273, 0, 0, 274,
	928, 276, 0, 277, 0, 278, 279, 0, 280, 281,
	0, 282, 283, 285, 287, 284, 288, 289, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 294, 1686, 0, 0, 0, 295, 0, 296, 0,
	0, 960, 297, 298, 1695, 1696, 299, 300, 0, 301,
	0, 0, 0, 302, 0, 303, 304, 305, 306, 307,
	0, 0, 0, 360, 962, 308, 309, 0, 310, 311,
	312, 313, 0, 0, 0, 0, 314, 315, 317, 0,
	961, 316, 1681, 1682, 0, 1677, 0, 318, 963, 0,
	964, 319, 320, 321, 965, 322, 0, 0, 0, 323,
	324, 325, 326, 327, 0, 329, 328, 0, 330, 0,
	966, 331, 332, 967, 0, 333, 334, 335, 0, 0,
	336, 337, 338, 339, 0, 340, 341, 343, 345, 342,
	344, 349, 346, 347, 348, 351, 0, 350, 968, 352,
	353, 356, 357, 355, 969, 354, 0, 0, 970, 358,
	0, 0, 359, 1689, 361, 362, 0, 0, 363, 0,
	0, 0, 365, 366, 367, 0, 0, 368, 369, 0,
	971, 370, 972, 0, 371, 364, 372, 373, 374, 375,
	376, 377, 378, 0, 379, 380, 1671, 1672, 0, 381,
	0, 382, 383, 0, 384, 0, 385, 386, 387, 388,
	389, 390, 391, 1685, 392, 393, 0, 0, 0, 0,
	0, 0, 394, 0, 396, 397, 398, 395, 399, 400,
	401, 402, 0, 403, 973, 404, 405, 406, 407, 0,
	408, 0, 409, 413, 414, 415, 416, 417, 418, 419,
	0, 421, 422, 420, 423, 424, 425, 0, 426, 410,
	411, 427, 428, 974, 429, 430, 1683, 0, 431, 0,
	432, 433, 434, 435, 412, 436, 441, 1698, 437, 438,
	439, 440, 0, 0, 443, 444, 442, 0, 445, 446,
	447, 448, 449, 286, 450, 0, 451, 1691, 1692, 1693,
	1694, 0, 458, 0, 452, 453, 0, 454, 0, 0,
	455, 456, 457, 0, 459, 460, 0, 0, 461, 462,
	463, 465, 466, 464, 467, 0, 468, 0, 0, 469,
	470, 471, 0, 1675, 1697, 0, 473, 472, 0, 0,
	0, 0, 0, 474, 475, 0, 476, 477, 478, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 1486, 0, 0, 0, 0, 0,
	1467, 0, 1483, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 1489, 1490, 1491, 1492,
	0, 1494, 1496, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 1502, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 1500, 1495, 1493, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 2615, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 0, 0, 1504, 0, 2612, 1514, 0,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 1500, 1495, 0, 1487, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 1500, 1495, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 1488, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 1466, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 1504, 0, 0, 1514, 0,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 0, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 1487, 0, 0, 0, 0,
	1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512,
	0, 0, 0, 0, 0, 0, 0, 2611, 0, 0,
	1504, 0, 0, 1514, 0, 0, 1501, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502,
	0, 0, 0, 0, 1493, 0, 0, 1500, 1495, 0,
	1487, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 1505, 0, 0, 0, 0, 0,
	0, 1501, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	1503, 1472, 0, 1478, 1479, 1485, 1506, 1484, 1480, 1505,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 2610, 0, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 0, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1512, 0, 0, 0, 0, 0,
	0, 0, 2084, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 1495, 0, 0, 0, 0, 1493,
	0, 1467, 0, 0, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1466, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 1486, 1505,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 1500,
	1495, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 1504, 0, 3605, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	1510, 0, 1511, 1472, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1514, 1487, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	1512, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 1493, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 1505, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 0, 0, 3523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1504, 0,
	3522, 1514, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 1487, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	1500, 1495, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 1488, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 1466, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 1489, 1490, 1491, 1492, 1487, 0,
	0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 1512, 0, 0, 0, 3393, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 1501,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0,
	0, 0, 1502, 0, 0, 0, 0, 1493, 0, 0,
	1500, 1495, 0, 1487, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 1513, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 1505, 0, 0,
	0, 0, 0, 0, 1501, 1486, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 1489, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 1503, 1472, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 1505, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 3287, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 1514, 0, 0, 0,
	0, 0, 1494, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 1511,
	0, 0, 0, 0, 0, 0, 1481, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1487, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 1512, 0, 0,
	0, 3235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 0,
	0, 0, 1493, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1466, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508,
	1509, 1486, 1505, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 1500, 1495, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 1513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 1503, 0,
	0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475,
	1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 1504,
	0, 3234, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	0, 0, 0, 0, 0, 0, 1489, 1490, 1491, 1492,
	0, 0, 0, 1510, 0, 1511, 1472, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 1514, 1487,
	0, 0, 0, 0, 1494, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 1511, 0, 1512, 0, 0, 0, 0, 1481, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 1493, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 1505, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 0, 0, 0, 3233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0,
	1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0,
	0, 1504, 0, 2984, 1514, 0, 0, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 1487, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 1513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 1500, 1495, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 1488, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 1466, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 1504, 0, 0, 1514, 0, 0, 0, 0, 0,
	1494, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1502, 0, 0, 0, 0, 0, 0, 1489, 1490, 1491,
	1492, 1487, 0, 0, 0, 0, 1503, 1472, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 1512, 0, 0, 0, 2608,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 1501, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 1464, 1465, 0, 1497, 1498, 1499, 1507,
	1508, 1509, 0, 0, 0, 1502, 0, 0, 0, 0,
	1493, 0, 0, 1500, 1495, 0, 1487, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 1513, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	1505, 0, 0, 0, 0, 0, 0, 1501, 1486, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 1489, 1490, 1491,
	1492, 0, 0, 0, 0, 0, 1503, 1472, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 1505, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0, 2607,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1514,
	0, 0, 0, 0, 0, 1494, 1496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 0, 0, 0, 0, 0, 0, 1481,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	1512, 0, 0, 0, 2606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	1465, 0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 0, 0, 1493, 0, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 1486, 1505, 0, 0, 0, 0,
	0, 0, 1483, 0, 0, 1500, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484, 1480,
	0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474,
	0, 0, 1504, 0, 2605, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 1510, 0, 1511, 1472,
	3719, 0, 0, 0, 0, 1481, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 1487, 0, 0, 0, 0, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 1511, 0, 1512, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3718, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 1500, 1495, 0, 0, 0, 0, 2543, 0, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 1466, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 1486, 0, 2572, 0,
	0, 0, 0, 0, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 2544, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 1464, 1465,
	0, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 1495,
	0, 0, 0, 0, 1504, 0, 1467, 1514, 0, 0,
	0, 1513, 0, 1494, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 1466, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 1502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1472, 0, 2668, 0, 0, 2667, 0, 0,
	2204, 0, 0, 0, 0, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 1504, 0, 1493, 1514, 0, 0, 1500, 1495, 0,
	1494, 1496, 2203, 0, 0, 1467, 0, 0, 0, 0,
	1513, 1488, 0, 0, 0, 1510, 0, 1511, 0, 0,
	0, 0, 0, 0, 1481, 1482, 0, 0, 0, 0,
	0, 0, 1466, 1505, 0, 0, 0, 0, 0, 0,
	1502, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 1503,
	0, 1472, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 0, 0, 0, 1488, 1494,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	1505, 0, 0, 1481, 1482, 0, 0, 1464, 1465, 0,
	1497, 1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 1500, 1495, 0,
	1487, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1512, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 1486, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 0, 0, 0, 1503, 0, 0, 1478,
	1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468,
	1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 1489, 1490, 1491, 1492, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 0, 0,
	1504, 0, 0, 1514, 0, 0, 1500, 1495, 0, 1494,
	1496, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 1510, 0, 1511, 0, 0, 0,
	0, 0, 0, 1481, 1482, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 1502,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	1487, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1501, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 0, 1488, 1494, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 1505,
	0, 0, 1481, 1482, 0, 0, 1464, 1465, 0, 1497,
	1498, 1499, 1507, 1508, 1509, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 1500, 1495, 0, 1487,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1486, 0, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 0, 0, 0, 1503, 0, 0, 1478, 1479,
	1485, 1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469,
	1470, 1471, 1473, 1474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 0,
	1489, 1490, 1491, 1492, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 2674, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 0, 1514, 0, 0, 0, 0, 0, 1494, 1496,
	2966, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 1511, 0, 0, 0, 0,
	0, 0, 1481, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 1465, 0, 1497, 1498, 1499, 1507, 1508, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1500, 1495, 0, 0, 0, 2669, 0, 1493, 1467,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1465, 1488, 1497, 1498, 1499,
	1507, 1508, 1509, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 1500, 1495, 1486, 0, 1505, 0,
	0, 0, 1467, 0, 1483, 0, 0, 1513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 1478, 1479, 1485,
	1506, 1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470,
	1471, 1473, 1474, 0, 1504, 0, 0, 1514, 1489, 1490,
	1491, 1492, 0, 1494, 1496, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	1511, 0, 0, 0, 0, 0, 0, 1481, 1482, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	1514, 0, 0, 1502, 0, 0, 1494, 1496, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 1510, 0, 1511, 0, 0, 0, 0, 0, 0,
	1481, 1482, 0, 0, 0, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 1502, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 1487, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2636, 0, 0, 1464,
	1465, 1488, 1497, 1498, 1499, 1507, 1508, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	1495, 0, 0, 1505, 2609, 0, 1493, 1467, 0, 0,
	0, 0, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 1505, 0, 0, 0,
	0, 0, 1483, 0, 0, 1464, 1465, 0, 1497, 1498,
	1499, 1507, 1508, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 1495, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 1513, 1503,
	0, 0, 1478, 1479, 1485, 1506, 1484, 1480, 0, 1477,
	1475, 1476, 1468, 1469, 1470, 1471, 1473, 1474, 0, 0,
	1466, 0, 0, 1489, 1490, 1491, 1492, 0, 0, 0,
	1486, 0, 0, 1472, 0, 0, 0, 0, 1483, 0,
	0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506, 1484,
	1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471, 1473,
	1474, 0, 1504, 0, 0, 1514, 0, 0, 0, 0,
	0, 1494, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 1511, 0,
	0, 0, 0, 0, 0, 1481, 1482, 0, 0, 1489,
	1490, 1491, 1492, 0, 0, 0, 0, 0, 0, 1472,
	0, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1514, 0, 0, 0, 0, 1512, 1494, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 1501, 1511, 0, 0, 0, 0, 0,
	0, 1481, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1503, 0, 0,
	1478, 1479, 1485, 1506, 1484, 1480, 0, 1477, 1475, 1476,
	1468, 1469, 1470, 1471, 1473, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1503, 0, 0, 1478, 1479, 1485, 1506,
	1484, 1480, 0, 1477, 1475, 1476, 1468, 1469, 1470, 1471,
	1473, 1474,
}
var sqlPact = [...]int{

	405, -1000, -1000, -1000, -1000, -1000, -1000, 171, 169, 168,
	167, 166, 165, 163, 162, -1000, -1000, -1000, -1000, -1000,
	-1000, 160, -1000, -1000, 159, -1000, 156, 155, 154, 153,
	-1000, 152, 151, 149, -1000, -1000, -1000, -1000, 148, 144,
	142, 62209, 1894, 75547, 65749, 1850, 56869, 75100, 56422, 74653,
	74206, 140, -1000, 73759, 138, 137, 136, -1000, 73312, -1000,
	1635, -1000, 130, 2752, 47458, 129, 128, 125, 2513, 124,
	-1000, 123, -1000, 7812, 1325, -1000, 122, -1000, 5956, 889,
	64861, 2321, 120, 119, 47010, 2317, 2414, -1000, -1000, 1753,
	-1000, -1000, 118, 116, 114, 113, 112, 110, 109, 106,
	104, -1000, 101, 99, 98, 97, 95, 91, 87, -1000,
	84, 83, 82, 81, 77, 76, 75, 74, 72, 70,
	69, 68, -1000, 7943, 1623, 1418, 1417, 1414, 1413, 1410,
	874, 67, 65, 64, 60, 57, 56, 55, -1000, 54,
	50, 47, 46, 41, -1000, 40, 33, 150, 30, 29,
	28, 27, 25, 2670, -1000, 1423, 961, 23358, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 80398, 75988, 24, -129, 23, -1000, 2739, 902, 39392,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	442, -1000, -1000, -1000, 256, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1691, 680, -1000, -1000, -1000, 72871, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1883, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 678, -1000, 1881, 174, 1826, -1000, -1000,
	-1000, -1000, -1000, 75988, -1000, -1000, 3110, 3109, 1758, 677,
	72430, -1000, 1409, -1000, 823, 26190, -1000, 1053, -1000, 26190,
	236, -1000, -1000, -1000, -1000, -1000, -1000, 3108, 3105, 3104,
	3102, -1000, -1000, 55975, 17662, 55528, 55081, 71983, 17205, 61768,
	51078, -1000, -1000, -1000, 42109, 1131, -1000, -1000, -1000, -1000,
	-1000, 2, 51974, 75988, -1000, 228, -1000, -1000, -1000, -1000,
	-1000, -1000, 32902, 518, 32420, 560, 31938, 409, -1000, -1000,
	-1000, 3101, 3100, 989, 3099, 2684, 79957, 1549, 3098, 1531,
	1189, 882, 3097, 3094, 3090, 3089, 3087, 3086, 1229, 71536,
	2440, 71089, 1444, 50621, 62209, 62209, 2203, 70642, 1188, 1187,
	-1000, -1000, -1000, -1000, 2544, 2412, 2374, 44349, -1000, 3085,
	3084, 3083, 3082, 3079, 79516, 1520, 3077, 2070, 3074, 3073,
	3071, 3068, 3066, 3065, 3064, 3060, 3058, -1000, 61321, 60874,
	60427, 2807, 70195, 50164, -1000, -1000, -1000, 41193, 7266, 7090,
	69748, 42564, 62209, 62209, -1000, -1000, 33372, 103, -1000, -1000,
	-1000, 42109, 2403, -1000, 33372, 103, -1000, 75988, -1000, 2439,
	1714, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2298, 1420, 2923, 49707, 1760, 1221, 2751, 2543, 2539,
	1292, 2123, 2537, 2533, 2530, 2529, 2526, 1447, 2112, 308,
	22876, 1390, 1291, 2525, 2520, 2935, 1703, 1642, 54634, 3056,
	3055, 2722, 2478, 2466, 2402, -1000, -1000, -1000, -1000, 1242,
	-1000, -1000, 57751, -1000, -1000, 1096, -1000, -1000, 1096, -1000,
	-1000, -1000, -1000, -1000, 1057, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1423, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1729, -1000, 1747, -1000, -1000, 2118, 2717, 2717,
	2717, 2784, 406, 401, -1000, 150, -1000, -1000, 87204, -1000,
	-1000, 33372, 33372, 33372, 33372, 33372, 1757, -1000, 676, -1000,
	-1000, 702, -1000, 675, 533, -1000, -1000, -1000, -1000, -1000,
	-1000, 674, -1000, -1000, -1000, -1000, -1000, -1000, 2914, -1000,
	19996, -1000, -1000, -1000, 285, 672, 33372, -1000, -1000, 2952,
	2950, 867, -1000, 226, 830, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2438, 670, 666,
	-1000, 665, 664, 663, 662, 661, -1000, -1000, -1000, 660,
	657, 654, 652, 651, 648, 647, 645, -1000, 1649, -1000,
	-1000, -1000, -1000, -1000, -1000, 597, 596, 596, 596, -1000,
	878, -1000, -1000, -1000, 266, 591, 264, 587, 583, 580,
	643, 642, 641, 639, 636, 635, 629, 627, 616, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 877, -1000, -1000, -1000, -1000,
	1, 75988, -1000, 442, 1, -1000, -1000, 614, -1000, 26660,
	26660, 26660, -1000, -1000, 1879, 33372, -1000, 2001, -1000, 10,
	10, 773, 40284, -1000, 38483, 773, 936, 709, 43901, -1000,
	2398, -1000, -1000, 613, 225, -1000, -1000, -1000, -1000, 2397,
	75988, 18117, 75988, 62209, 62209, 62209, 2631, 33372, -1000, -1000,
	49250, 75988, 62650, 2869, 81280, 49250, 75988, 2437, -1000, -1000,
	-1000, 75988, -1000, 33372, -1000, 2865, 1363, 52419, 2802, -13,
	-1000, -1000, -1000, -1000, -1000, -1000, 2054, 2053, 1001, 1923,
	1346, -1000, 26190, 2676, -1000, -1000, -1000, 218, 18117, -1000,
	-1000, -1000, -1000, -1000, 1934, 2609, 1204, -1000, 1921, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1614, 2608,
	-1000, 2978, 2605, 1570, -1000, -1000, 1801, -1000, -1000, 2708,
	-1000, -1000, 1561, 2601, 11, -1000, -1000, 854, 2600, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 787, -1000,
	51533, 42109, 51974, -3, -1000, -1000, -41, -1000, 16748, 87204,
	-1000, -1000, -1000, 87204, 799, -1000, -1000, 2598, -1000, 87204,
	784, -1000, -1000, 2592, -1000, -1000, -1000, 3054, -1000, 3053,
	2006, 3049, 3045, 3043, -1000, 1489, 1640, 3042, -1000, 3041,
	-1000, -1000, -1000, -1000, -1000, -1000, 59980, 1877, -1000, -1000,
	59086, -1000, 2005, -1000, -1000, 59533, 880, -1000, 854, 2004,
	-1000, 849, -1000, 3040, 2806, 2241, 854, 2000, -1000, -1000,
	-1000, -1000, -1000, 45231, -1000, 45231, -1000, 45231, -1000, 1367,
	-1000, 79075, 10, 10, 2914, -1000, -1000, -1000, -1000, -1000,
	2591, 3039, 3037, 3036, -1000, 75988, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 188, 2590, -1000, -1000, 188,
	2581, -1000, 188, 2580, -1000, 64414, -1000, -1000, 1844, 2562,
	-1000, -84, 2561, -1000, -1000, -10, -1000, -1000, -1000, 902,
	-1000, 40732, -1000, 40732, 69301, 51533, 843, 637, 46562, 87204,
	-1000, -44, -1000, 42109, 87204, -1000, 51533, 59086, -1000, 68854,
	58645, -1000, -1000, 1226, 2078, -1000, -1000, -1000, 843, 51533,
	51533, 51533, -1000, 68407, -1000, -1000, 1737, 1434, 2718, 1712,
	62209, -1000, 1568, -1000, -1000, -1000, 2741, 2436, -1000, 48809,
	63973, -1000, 63532, -1000, 63091, -1000, 62209, -1000, 62209, -1000,
	3034, 3032, 3030, -1000, 3028, 2735, 87204, 2727, -1000, 2475,
	1426, 1425, 75988, -1000, -1000, 75988, -1000, 75988, -1000, -1000,
	-1000, -1000, -1000, 2052, -1000, -1000, -1000, -1000, 62209, -1000,
	-1000, -1000, -1000, -1000, -1000, 2434, -1000, 1501, -1000, 1543,
	-1000, 1212, -1000, -1000, 195, -1000, -1000, -13, -1000, 78634,
	-1000, 2118, -1000, 75988, -1000, 2065, 2425, 2432, 1344, 1899,
	2134, -1000, 31456, 2152, 35722, 1909, 150, -1000, -1000, 150,
	150, 25720, -1000, -1000, 81280, 81280, 18117, 1168, 33372, 33372,
	33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372,
	33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372,
	33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372, 33372,
	33372, 33372, 33372, 1710, 33372, 1052, 33372, 33372, 33372, 33372,
	1956, -1000, -1000, 1648, 474, 1650, -1000, 2903, 2903, 2903,
	6393, 6393, 535, 3027, 702, -1000, 33372, -1000, 103, 33372,
	18574, -1000, -1000, 401, 10978, 2036, -1000, 393, 19056, -1000,
	-1000, -1000, 19996, 533, 30974, 33372, 870, 87204, -1000, -1000,
	1430, 2922, 16293, 2448, 2285, 612, 668, 655, 22394, 21912,
	21430, 20948, 568, 33372, 33372, 33372, 33372, 33372, 33372, 33372,
	33372, -1000, -1000, 2928, -1000, 2922, -1000, -1000, -1000, -1000,
	2922, 1147, 1145, 2922, -1000, 2922, 2922, 2811, 2811, 30504,
	30022, 29540, 36192, 29058, 33372, 20466, 28576, 28094, -1000, 75988,
	1, 2864, 33372, 133, -1000, 85916, -1000, 133, 133, 609,
	-16, 87204, 2178, 2178, 39838, 2046, 1778, 1778, 1778, -1000,
	773, 12627, 773, 67521, 1787, 773, 773, 217, 267, 389,
	38037, 2001, 67521, 690, 607, 22, 21, 20, -1000, -1000,
	18, 13, -1000, -1000, 62209, 605, 18574, 18117, 1245, -21,
	214, 2158, 2149, 2143, -1000, 2141, 1473, -22, 1050, -42,
	-1000, 3902, -30, -1000, 1140, 210, -1000, -1000, -1000, -1000,
	-1000, 3026, 3022, -1000, 875, 602, 598, 379, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, 596, 596, 596,
	-1000, 266, 591, 264, 587, 583, 580, -1000, -1000, -1000,
	-1000, 2390, -41, 62650, 783, -32, 992, -13, -1000, -1000,
	-1000, 52419, 1096, -1000, 1754, -1000, -1000, -1000, -1000, -1000,
	-1000, 1181, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 867,
	-1000, -1000, -1000, -1000, -1000, -1000, 2910, 2908, 0, -1000,
	-1000, 18117, -1000, -15, 1368, -1000, 54187, 1945, 2716, 2703,
	1362, -1000, 1249, 2781, 57751, 2813, 2825, 765, -1000, 2387,
	-1000, -1000, 811, 1494, 1049, 57751, 2978, -1000, 81280, -1000,
	2197, 2775, 1200, 1183, 1200, 1200, 1230, -1000, 57751, 1045,
	-1000, 1041, -1000, -33, 2810, 2822, 679, -1000, 2384, 1038,
	-1000, -1000, 62209, 18117, -1000, 1467, -1000, 51533, 2247, -1000,
	-43, 787, -3, 51974, 75988, 209, -1000, 33372, 103, 33372,
	103, -1000, -1000, 2557, -1000, -1000, -1000, 3019, 1613, 2068,
	-1000, -1000, -1000, 576, 1998, 2380, 75988, 2163, -6, 62209,
	-1000, 2551, 2978, 1989, -1000, -1000, 58198, -1000, 2546, 585,
	3018, -1000, 78193, -1000, 2715, 1059, 2541, 929, 461, 2861,
	-1000, 461, 45672, -1000, 75988, -1000, -1000, 75988, -1000, -1000,
	-1000, 3007, -1000, 62209, -1000, -1000, 62209, -1000, 62209, -1000,
	62209, 187, 2532, -1000, -1000, 75988, 51533, 51533, 4816, 53305,
	-45, -46, 384, -1000, 67966, 75988, 922, 53746, 75988, 2666,
	843, 42109, -44, 843, 843, 787, -1000, 787, -1000, 62209,
	2430, -1000, 843, 843, 843, -1000, -1000, -1000, -1000, 3005,
	3004, -1000, -1000, -1000, 853, 62209, 75988, 62209, -1000, -1000,
	75988, -1000, 75988, -1000, 853, 75988, 853, 75988, 853, 75988,
	-1000, -1000, -1000, -1000, -1000, -1000, 103, 33372, 1383, -1000,
	2428, -1000, 2427, -1000, 49, -1000, -1000, -1000, -1000, 1670,
	62209, 62209, 62209, 62209, 75988, 62209, -1000, 57751, -1000, 2065,
	2425, -1000, -1000, -1000, -1000, -1000, -1000, 1149, 1842, -1000,
	2098, -1000, 1317, -1000, -1000, -1000, 87204, 36662, -1000, -1000,
	87204, 1431, -1000, 35252, 34782, -1000, -1000, 1422, 62209, 2213,
	-1000, 2213, -4, -1000, 85610, 2097, 62209, -1000, -1000, -1000,
	-1000, -1000, 806, 900, 900, 1070, 1070, 1070, 1070, 2832,
	779, 1628, 630, 4598, 4598, 801, 801, 801, 801, 801,
	4598, 423, 511, 511, 423, 423, 423, 423, 423, 511,
	511, 511, 4598, 4598, 4598, 6393, 9750, 6364, 33372, 33372,
	1035, 1599, 474, 5816, 33372, 6556, 6556, 6556, 6556, -1000,
	1619, -1000, -1000, -1000, -1000, 2376, 566, 36192, 36192, -1000,
	-1000, -1000, -1000, 19526, 33372, -1000, -1000, -1000, -1000, 27612,
	-1000, -1000, 85208, -266, 382, -201, -17, -1000, 33372, 33372,
	33372, 377, -1000, 208, 33372, 75988, -1000, 82376, 688, -53,
	-1000, -57, 1179, -1000, 33372, -1000, -1000, 1034, -1000, 1033,
	1032, 1029, -1000, 565, 368, -1000, 182, -1000, 1759, 561,
	559, 33372, -1000, -1000, -1000, -1000, -1000, 84912, -1000, -1000,
	84702, -1000, -1000, 84607, -1000, -1000, 84397, -1000, -1000, -1000,
	87128, 82281, 82071, 81771, 6862, 81728, 12056, -58, 367, -64,
	366, 804, 800, 364, 356, 355, -66, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -67, 353, -1000, 2366, -201,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 352, -1000,
	350, -1000, 86833, -201, 349, 6897, -1000, 36192, 36192, 36192,
	-1000, 348, -1000, 85757, -1000, 86790, 27142, 27142, 27142, 347,
	86495, 33372, -201, -73, -1000, -74, -1000, -1000, 556, -81,
	866, 26660, 38944, 18117, -1000, 866, 866, 33372, -1000, 33372,
	2125, -1000, -1000, -1000, 2120, 1976, 2178, 39838, -1000, -1000,
	-1000, -1000, 67521, -1000, 2914, 2306, -1000, 67521, -1000, -1000,
	75988, 442, -1000, 67521, 67521, 18117, 773, -1000, 773, 67521,
	525, -1000, -1000, -1000, -1000, -1000, 344, 43009, -17, 181,
	843, -1000, 18117, 2211, 2211, 2211, 2211, -1000, -1000, 75988,
	2844, -1000, 1654, -1000, 81280, -1000, 700, 1048, 18117, -1000,
	-1000, 553, -1000, 2922, 2922, -1000, 2922, 75988, 88, 26190,
	-1000, 1096, -1000, -1000, 1321, -1000, 1631, -1000, 1137, -1000,
	-1000, -1000, -1000, 26190, -1000, 1927, 75988, 75988, 62209, -1000,
	-1000, 1984, 77752, 1978, 81280, 75988, -1000, -1000, 552, 551,
	2093, 2092, 919, 75988, 75988, 2091, 77311, 76870, 75988, 1700,
	33372, 1825, 1699, 103, 103, -1000, -1000, 103, 549, 1118,
	62209, 62209, 62209, 1550, -1000, -1000, -1000, -1000, -1000, 57310,
	-1000, -1000, 2926, 2925, -1000, 1200, -1000, -1000, -1000, 1200,
	2978, 1545, 62209, 75988, 1730, 103, 103, -1000, -1000, 103,
	543, 18117, 1610, -1000, 1467, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48368, 946, 854, 843, 2365, -1000, 2247, -1000,
	-1000, 15838, 87204, -1000, 87204, -1000, 75988, -1000, 871, 75988,
	53746, 838, 2506, 44790, -41, 843, 51533, 62209, -6, 75988,
	-1000, 2978, 2501, 442, 1975, -1000, -1000, 51533, 3003, 537,
	3002, -1000, 1873, 1972, -1000, -1000, 76429, 2550, 729, 75988,
	866, 39838, 1651, -1000, 43456, 898, 75988, 1524, 86, -1000,
	-1000, -1000, 35, 75988, -1000, 2999, -1000, -1000, 188, 188,
	188, -1000, 62209, 62209, 1844, -1000, -84, -1000, -1000, 4816,
	4816, 843, -7, 536, -1000, 751, 748, 41654, 51533, -87,
	-1000, -1000, -1000, -1000, -1000, 62209, 75988, 572, 2239, 75988,
	-88, -1000, 178, 534, -1000, -1000, 843, 2350, -1000, -1000,
	860, -1000, 1184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9, -41, -41, -1000, 853, -1000, 853, -1000,
	853, -1000, 87204, -1000, 1376, 1369, 75988, -1000, 18117, 75988,
	62209, 18117, 62209, 2424, 2418, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 954, -1000, 1431, 1839, -1000, 533, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2037, -1000,
	-12, 25720, 1933, -1000, -1000, 62209, 7, 33372, 33372, 5730,
	4514, 33372, 36192, 36192, -1000, 33372, 4179, -1000, -1000, -1000,
	-1000, -1000, 2348, 532, 33372, 81280, 6943, 6520, -1000, 340,
	11761, 423, -1000, 33372, -1000, 335, 25250, -1000, 86126, -37,
	-90, -1000, 13094, -201, -95, -1000, -1000, 697, -1000, 2481,
	-1000, 33372, 86285, 2016, 1774, 1608, 1391, 2922, 2948, 15383,
	-1000, 46117, 868, 1792, 84101, -1000, -1000, -1000, -1000, 81280,
	81280, 33372, 33372, -1000, 33372, 33372, 33372, -1000, -1000, -1000,
	2922, 772, -1000, -1000, -1000, 772, -1000, -1000, 2922, -1000,
	2922, -1000, 33372, -1000, -1000, 2345, 33372, -1000, 81280, 81280,
	36192, 36192, 36192, 36192, 36192, 36192, 36192, 36192, 36192, 36192,
	36192, 36192, 36192, 36192, 36192, 36192, 36192, 36192, 36192, 2166,
	36192, 2899, 2899, 2899, -1000, 2415, 2345, 33372, 33372, 81280,
	334, 333, 332, -1000, 33372, -201, -1000, -1000, 4816, -1000,
	2284, -1000, 33372, -1000, -195, -1000, 2001, -1000, -1000, 2284,
	2284, -96, 87204, 39838, 39838, -1000, 530, 33372, 2117, -1000,
	-1000, 686, -251, -1000, 747, -1000, -1000, -1000, -1000, -1000,
	442, -1000, -1000, -1000, 176, 67521, 67521, 685, -1000, -97,
	-1000, -1000, -98, -1000, 2860, 328, 18117, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -41, 1816, 2938, -1000, 2924,
	695, 684, 175, 2922, 327, 325, 322, -41, 75988, -1000,
	-13, -1000, -1000, -1000, 33372, -1000, -1000, 2707, 1027, 1024,
	-1000, 2494, -1000, 1971, -1000, 903, -1000, 1773, -1000, 33372,
	33372, 523, 520, 2998, 1626, 2996, 920, 2491, 1844, 2489,
	1844, -1000, -1000, 831, -1000, 87204, 519, 517, -1000, -15,
	1366, 859, -1000, -1000, 33372, 33372, 67080, -1000, 378, 2708,
	5, -1000, 1022, -1000, -1000, -1000, -1000, 2978, 1020, -1000,
	-1000, -1000, 858, -1000, -1000, 33372, -1000, -33, 1019, -1000,
	-1000, -1000, 47913, -1000, -1000, 51533, 843, -1000, 2993, 62209,
	2990, 321, -103, -35, 81280, 2853, 1882, 527, 62209, 827,
	-1000, 2914, -1000, -1000, -1000, -1000, 62209, 2845, 2484, 854,
	-1000, 2985, -1000, 62209, 2479, 1868, 1962, 2059, 729, 52864,
	-1000, 854, 1792, -122, -1000, 1524, 24768, 2710, -104, -1000,
	-1000, -1000, 866, 45672, 39838, 33372, 2982, -105, -1000, -1000,
	-1000, -1000, -1000, 187, -1000, -1000, -1000, -1000, 66639, 66639,
	51533, 51533, 51533, 843, 75988, 75988, 53746, -1000, 516, 75988,
	75988, 508, -1000, 75988, 75988, 2977, 51533, -1000, 103, -1000,
	1810, 62209, 14928, -1000, -1000, -1000, -1000, -1000, 853, -1000,
	-1000, 1738, 1907, 1738, 1505, 1499, -1000, 1832, -1000, -1000,
	-1000, -1000, 2138, 2713, 18117, 2828, 6556, 33372, 33372, 4013,
	5515, 259, 6556, 33372, 33372, 81280, 5086, -110, 33372, 33372,
	-1000, 33372, 683, 87204, 2936, 33372, 319, 318, -1000, -1000,
	-1000, 2918, -1000, -1000, -1000, 87204, 33372, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 317, -1000, 173, -1000, -1000, -1000,
	80839, -1000, 33372, 316, -1000, 314, 313, 11456, 213, 84045,
	83749, 83539, 312, -1000, -1000, 311, 310, 87204, 2415, 87204,
	-1000, -1000, 916, 916, 1166, 1166, 1166, 1166, 2899, 1999,
	1370, 3655, 1695, 1695, 1695, 3014, 925, 925, 1695, 1695,
	1695, 2327, 2074, 501, 7028, -1000, -1000, 87204, 87204, 296,
	-1000, -1000, -1000, -201, 293, 2279, 2772, 87204, -1000, 39838,
	2279, 2279, -1000, -1000, 1976, 75988, 87204, 39838, -1000, 2306,
	-1000, 13559, -1000, 18117, -1000, -1000, -1000, -1000, 2914, -1000,
	43009, -1000, 499, -1000, 36, -1000, -1000, 669, 2972, 694,
	18117, 290, -1000, -1000, -1000, -41, 87204, 75988, 75988, 75988,
	2477, -1000, 2111, -1000, 919, 83444, -111, -1000, 85610, 33372,
	75988, -1000, -1000, 1605, 2139, 982, -1000, 2744, 75988, -1000,
	75988, -1000, -1000, 75988, 75988, 62209, 2467, -112, 87204, -48,
	-1000, 746, -1000, 1190, -1000, 14473, 62209, 62209, 2465, -117,
	18117, -1000, -1000, -84, -1000, -1000, 442, -1000, 2232, -1000,
	65302, 1837, 103, -1000, 66194, 2970, 495, -1000, 1800, -1000,
	631, 2978, 103, 62209, -1000, -1000, 908, 18117, 62209, 2474,
	2062, 729, 52864, -1000, 1059, 2134, -1000, -93, -1000, 483,
	103, 1792, -1000, -122, 87204, -1000, 734, -1000, -1000, -119,
	-1000, -1000, 280, -1000, 2665, 2660, -1000, 2313, 33372, 494,
	493, 75988, 2658, -1000, -1000, -120, -1000, 1880, -1000, -1000,
	-1000, -1000, -1000, 18117, 1429, -1000, 488, 487, -1000, -1000,
	-1000, -1000, 2713, 6556, 6556, 33372, 33372, 33372, 6556, 5086,
	-130, -1000, 6556, 6556, -201, -1000, -1000, 86126, -1000, -1000,
	-1000, 87204, -1000, 14018, 1739, -1000, 83234, -1000, -1000, -1000,
	33372, 33372, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36192, 2323, 486, 81280, -1000, -1000, 862, 33372, 33372, 2001,
	862, 862, -1000, -132, -1000, -1000, -1000, 2914, 36, -1000,
	-1000, 2968, 18117, 693, -1000, 2964, -1000, -1000, -1000, -1000,
	-1000, 75988, -1000, 75988, -1000, 18117, 75988, 2324, 1951, -1000,
	-1000, 2090, 484, 36192, 62209, 778, -1000, 2258, 1597, 33372,
	1933, -133, -135, 1950, -1000, -1000, 1947, 33372, -1000, 81280,
	481, 1844, 1844, -138, -140, -1000, 33372, 1014, 75988, 24298,
	-1000, 2963, 2708, -1000, -1000, 33372, 1013, -1000, 2837, 1730,
	2257, -1000, -1000, -1000, -1000, 2089, -1000, -1000, 75988, 2082,
	845, -143, -1000, 733, 731, -1000, 53746, 838, 802, -1000,
	-1000, -1000, 442, 478, 75988, 1866, 477, 18117, -1000, 729,
	52864, -1000, 2550, 1524, -1000, 2542, 75988, 2697, -1000, 2134,
	474, -1000, 843, 473, 472, 2779, 2779, -149, 33372, 33372,
	-154, 471, 843, -145, -1000, 750, 715, -1000, -1000, 62209,
	62209, 33372, 33372, -1000, 6556, 6556, 6556, -1000, 279, -1000,
	-1000, 1792, 2770, -1000, 82938, 82882, 5435, 36192, 81280, -155,
	-1000, 75988, 87204, -201, -1000, -1000, -1000, 526, -1000, 2962,
	-1000, -1000, 1969, -1000, -1000, -1000, 75988, 1958, -1000, 915,
	33372, 7028, 470, 33372, -1000, -1000, 2220, 2338, 2232, 460,
	-1000, -1000, -1000, -1000, -1000, 906, 1576, -1000, -1000, 87204,
	2748, 33372, -1000, -1000, 459, 457, 87204, 454, 725, 2305,
	-1000, -1000, -1000, 87204, 452, 103, 838, -1000, 1767, 1837,
	444, -1000, -1000, 1854, 2173, -1000, 66194, 37117, 37117, 277,
	2836, 802, -1000, 2911, -1000, 2829, 33372, -1000, 62209, 33372,
	1863, 52864, -1000, 2059, -1000, 1141, -156, 75988, 1524, -1000,
	-1000, 51533, 51533, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 906, -157, -162, -1000, 51533, -1000,
	1880, -1000, 75988, -1000, 75988, -1000, -1000, -163, -164, -1000,
	1740, 33372, -1000, -1000, 5435, -165, -1000, -150, -1000, 2827,
	-1000, -1000, -1000, -1000, 2472, 2274, 82586, 2028, 75988, 10374,
	2334, -1000, -1000, 1730, 75988, 2232, 2273, 62209, 909, 18117,
	-170, 1738, 1738, 33372, 23828, 1761, 33372, -1000, 1854, 62209,
	75988, -1000, 2740, -1000, 2655, -1000, -1000, -1000, 2232, 103,
	-1000, -1000, 103, -173, 908, -175, 62209, -1000, 2062, 1351,
	-1000, 866, -1000, -1000, -178, -180, 1597, 906, -1000, -181,
	-1000, -183, -186, -1000, -1000, 189, 34312, 34312, 34312, -201,
	-1000, 75988, 443, 2456, 851, -1000, 1858, 1603, 105, 947,
	-1000, -1000, 2258, -188, -1000, 850, 442, -1000, 33372, -1000,
	906, -194, -1000, 897, -199, -1000, 893, -200, -1000, 2302,
	-1000, -202, -1000, 441, -205, -1000, -1000, 1930, -1000, 1730,
	845, -1000, 906, 436, 1597, 429, -1000, 45672, -1000, 843,
	843, 2232, 1597, 843, -1000, -1000, -1000, 2480, -1000, 37572,
	1840, 1488, 85264, 2480, 2480, -1000, -1000, 75988, 2793, -1000,
	1862, 1860, 1273, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2790, 2028, 87204, 2232, -1000, 1738, 2256, -1000, 1738,
	2300, -1000, 1687, -1000, 75988, -1000, 75988, 1437, 1424, 2961,
	838, 1854, 1597, 33372, 2232, 33372, -214, -1000, -1000, 1730,
	2232, -1000, -1000, 1554, 2815, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 721, -1000, 2553, -1000, 953, 1685, 1685,
	720, 1858, -1000, -1000, 428, -1000, 421, -1000, -219, -1000,
	-1000, 2959, -1000, 1854, -1000, 2232, -221, 1730, -224, -1000,
	-1000, 1730, 1468, -1000, -1000, 1783, 33842, 33372, -1000, 2887,
	-1000, -1000, 2119, -1000, 33372, 2258, 33372, 33372, 1818, -1000,
	-1000, 1730, 906, 865, 1597, -1000, -1000, -1000, -1000, 87204,
	-1000, -1000, -1000, 87204, -1000, -226, -227, -1000, -1000, -1000,
	865, 1597, -1000, 2957, 2232, 1730, 1012, -1000, 2232, -1000,
	1730, -1000, 420, 1730, 865, 33372, 865, -1000, -235, -1000,
	1730, -1000,
}
var sqlPgo = [...]int{

	0, 3702, 3699, 3697, 3696, 3695, 3694, 3693, 3687, 3685,
	3679, 3678, 3677, 3676, 3674, 3673, 3656, 3655, 3653, 3652,
	3651, 3650, 3648, 3647, 3646, 3645, 3644, 3640, 3639, 3638,
	3637, 3635, 3634, 3630, 3622, 3621, 3615, 3614, 3613, 3612,
	3610, 3609, 3607, 3606, 3604, 3602, 3595, 36, 3591, 3589,
	3588, 3586, 3585, 3580, 3579, 3576, 3572, 3571, 3570, 3563,
	3561, 3560, 3559, 3558, 3556, 42, 3552, 216, 3551, 3549,
	3548, 3544, 3542, 3540, 3538, 3535, 3534, 215, 3531, 128,
	3530, 3529, 3524, 3523, 3520, 214, 3519, 3518, 3513, 3508,
	3507, 3506, 3505, 3503, 151, 196, 3502, 160, 3501, 3500,
	3499, 3497, 3496, 3494, 3481, 3479, 3478, 3476, 199, 3475,
	212, 3474, 3472, 3470, 3467, 3466, 3465, 3464, 3463, 3462,
	3461, 3458, 3457, 3455, 3451, 3450, 3449, 3448, 3446, 3445,
	3443, 3436, 3435, 3433, 3431, 3430, 3428, 3427, 3425, 219,
	136, 3423, 3422, 211, 209, 3414, 3410, 3409, 3408, 117,
	92, 88, 30, 3405, 90, 43, 3404, 14, 181, 197,
	7157, 192, 3402, 3397, 3396, 191, 145, 3389, 188, 3380,
	3379, 3376, 3375, 68, 56, 135, 138, 146, 130, 380,
	3374, 3373, 70, 54, 41, 32, 3371, 3366, 3364, 2968,
	98, 3363, 210, 198, 125, 3362, 3361, 3359, 1051, 3358,
	3355, 3350, 268, 53, 97, 16, 91, 3346, 106, 20,
	3344, 132, 40, 3341, 116, 61, 37, 7196, 4754, 3340,
	82, 226, 76, 48, 169, 168, 124, 170, 166, 129,
	295, 3339, 241, 3338, 63, 123, 3336, 3333, 3332, 58,
	154, 75, 3331, 3330, 51, 8, 23, 1, 131, 31,
	87, 13, 3327, 11, 3323, 3322, 3317, 3315, 25, 126,
	3311, 108, 49, 3309, 18, 3308, 28, 164, 3306, 194,
	96, 3305, 3304, 202, 159, 152, 3297, 71, 182, 3294,
	3292, 3291, 3289, 3288, 93, 22, 99, 3287, 3286, 103,
	187, 148, 3285, 38, 3283, 127, 72, 95, 218, 89,
	177, 84, 183, 139, 179, 3282, 3281, 3280, 149, 3279,
	3278, 173, 119, 3277, 3275, 161, 222, 33, 60, 185,
	52, 143, 137, 3274, 156, 3273, 3270, 3268, 220, 141,
	162, 6, 9, 62, 94, 21, 7, 186, 110, 239,
	80, 3266, 4144, 1260, 1807, 47, 3265, 115, 83, 50,
	81, 114, 207, 57, 3261, 3260, 1237, 3259, 3257, 3256,
	3253, 140, 3252, 3250, 3247, 102, 112, 165, 3246, 122,
	64, 12, 86, 240, 217, 79, 175, 157, 238, 3245,
	142, 3243, 45, 105, 3242, 155, 204, 67, 3240, 147,
	107, 3239, 174, 3237, 3236, 3235, 3234, 3233, 3230, 3229,
	134, 184, 109, 3228, 3223, 3222, 206, 150, 3219, 205,
	111, 153, 66, 35, 3218, 77, 118, 3217, 113, 172,
	39, 3213, 3329, 44, 0, 9123, 8034, 6193, 8911, 3209,
	1784, 3205, 3203, 3202, 167, 101, 3199, 3196, 3195, 73,
	3191, 55, 3190, 3188, 46, 3186, 15, 5, 10, 19,
	17, 906, 880, 3185, 3184, 78, 100, 120, 3183, 221,
	178, 3182, 3181, 3180, 74, 3178, 29, 3177, 26, 3176,
	3175, 34, 3, 27, 3173, 3171, 193, 3165, 189, 3164,
	3163, 2837, 104, 3160, 3156, 203, 59, 3155, 201, 3146,
	2803, 133, 171, 3145, 3144, 3143, 3138, 195, 3137, 3136,
	24, 3135, 4, 3131, 3127, 163, 2, 2634, 3120, 3114,
	69, 2980, 144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	485, 485, 19, 30, 20, 31, 13, 486, 486, 486,
	486, 24, 21, 32, 22, 22, 22, 22, 22, 153,
	153, 153, 153, 18, 18, 26, 26, 176, 176, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 484, 484, 178, 178, 177, 172, 172, 487, 487,
	179, 179, 179, 181, 181, 36, 36, 36, 93, 93,
	93, 94, 94, 95, 95, 154, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 81, 81, 422, 422, 423,
	423, 149, 149, 150, 150, 150, 150, 151, 151, 152,
	152, 152, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	140, 140, 51, 51, 51, 51, 51, 51, 51, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 495,
	495, 496, 496, 497, 497, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 260, 260, 233, 233, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 478, 478, 274,
	274, 384, 384, 67, 67, 294, 294, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 75, 75,
	75, 76, 76, 76, 74, 74, 74, 72, 72, 72,
	71, 71, 71, 73, 73, 73, 275, 275, 77, 77,
	77, 77, 77, 77, 77, 77, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 386, 386, 78, 78, 78, 354, 354, 82, 82,
	82, 309, 309, 83, 83, 83, 83, 83, 84, 84,
	84, 84, 96, 96, 96, 96, 481, 481, 267, 267,
	192, 192, 192, 192, 89, 89, 89, 89, 90, 90,
	90, 91, 91, 145, 145, 102, 102, 102, 102, 102,
	101, 101, 101, 101, 101, 101, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 46, 46, 47, 47, 47,
	47, 47, 104, 104, 491, 491, 106, 103, 103, 103,
	105, 105, 105, 105, 107, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 415, 415, 283, 283, 413,
	413, 431, 431, 414, 414, 237, 237, 237, 237, 237,
	238, 238, 238, 421, 421, 421, 421, 421, 421, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 146, 146, 147, 148, 148, 148, 148,
	129, 129, 129, 139, 139, 139, 139, 139, 139, 139,
	132, 132, 132, 119, 119, 111, 111, 111, 111, 111,
	115, 115, 115, 115, 115, 115, 115, 115, 112, 112,
	121, 121, 121, 121, 121, 116, 116, 118, 118, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 113, 113,
	113, 113, 123, 123, 123, 123, 316, 316, 316, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 135,
	135, 135, 135, 135, 135, 368, 368, 130, 130, 130,
	130, 134, 134, 134, 134, 299, 299, 127, 127, 127,
	128, 128, 128, 133, 133, 131, 131, 136, 136, 136,
	136, 114, 114, 114, 499, 499, 499, 137, 137, 126,
	126, 138, 138, 138, 138, 138, 138, 138, 138, 125,
	125, 125, 124, 124, 124, 124, 117, 479, 479, 476,
	476, 476, 476, 476, 476, 476, 477, 477, 480, 480,
	87, 87, 87, 57, 57, 57, 58, 58, 157, 157,
	157, 157, 245, 245, 245, 245, 155, 155, 156, 156,
	59, 59, 500, 500, 500, 488, 488, 488, 489, 489,
	489, 489, 489, 489, 239, 239, 240, 240, 334, 334,
	334, 334, 334, 243, 243, 243, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 246, 246, 180, 180, 180,
	249, 250, 250, 247, 247, 248, 248, 248, 252, 252,
	251, 254, 254, 253, 333, 440, 440, 442, 442, 442,
	442, 442, 442, 442, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 501, 438, 438, 438, 439,
	434, 434, 435, 435, 435, 435, 435, 241, 241, 242,
	242, 242, 242, 436, 437, 265, 265, 371, 441, 441,
	443, 443, 445, 502, 502, 502, 502, 502, 502, 503,
	503, 503, 332, 332, 331, 331, 258, 258, 446, 446,
	446, 446, 447, 447, 447, 447, 447, 450, 449, 448,
	448, 448, 448, 448, 61, 61, 61, 296, 296, 295,
	295, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 142, 142, 195, 195,
	56, 56, 56, 12, 12, 12, 490, 490, 490, 60,
	60, 60, 60, 194, 194, 194, 194, 194, 194, 483,
	483, 482, 482, 196, 196, 505, 505, 66, 66, 66,
	66, 66, 66, 55, 55, 55, 55, 55, 506, 506,
	317, 317, 315, 315, 314, 314, 264, 264, 370, 200,
	200, 173, 173, 173, 23, 17, 17, 33, 33, 34,
	34, 29, 29, 492, 492, 493, 493, 88, 88, 92,
	92, 92, 100, 100, 141, 141, 141, 141, 141, 141,
	141, 37, 37, 37, 37, 49, 49, 49, 49, 98,
	508, 508, 508, 99, 99, 99, 507, 507, 193, 193,
	328, 328, 329, 329, 509, 509, 330, 330, 330, 330,
	187, 186, 188, 188, 54, 54, 54, 182, 182, 183,
	183, 184, 184, 185, 185, 510, 510, 85, 85, 85,
	144, 144, 232, 232, 232, 324, 324, 324, 259, 259,
	206, 206, 327, 327, 325, 325, 325, 325, 293, 293,
	293, 143, 143, 272, 272, 285, 285, 286, 286, 381,
	381, 287, 97, 97, 160, 160, 158, 158, 158, 158,
	158, 158, 158, 158, 165, 165, 166, 166, 167, 167,
	168, 169, 169, 169, 169, 276, 276, 170, 170, 170,
	159, 159, 159, 161, 161, 161, 161, 161, 161, 161,
	164, 164, 164, 164, 171, 171, 171, 163, 163, 457,
	457, 457, 459, 459, 460, 456, 456, 458, 458, 504,
	504, 298, 298, 298, 256, 257, 255, 255, 262, 262,
	261, 263, 263, 369, 369, 369, 174, 174, 174, 290,
	290, 290, 290, 291, 291, 320, 320, 318, 318, 318,
	318, 319, 319, 321, 321, 321, 322, 322, 323, 323,
	289, 289, 350, 350, 162, 162, 162, 269, 269, 269,
	270, 270, 340, 340, 340, 340, 340, 340, 341, 341,
	339, 339, 339, 339, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 373, 374, 374, 271, 271, 375, 326,
	326, 474, 474, 474, 475, 475, 367, 367, 376, 376,
	376, 376, 376, 376, 365, 365, 366, 366, 382, 383,
	383, 302, 302, 302, 302, 300, 300, 303, 303, 303,
	303, 301, 301, 377, 377, 377, 377, 292, 292, 378,
	378, 378, 378, 379, 335, 336, 336, 387, 387, 387,
	387, 402, 268, 268, 268, 268, 268, 433, 432, 432,
	388, 388, 388, 388, 388, 388, 388, 388, 401, 401,
	401, 401, 401, 401, 401, 401, 403, 403, 403, 403,
	403, 403, 389, 389, 389, 389, 389, 392, 392, 392,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 393, 393, 398, 398, 399, 399, 399, 394, 395,
	400, 400, 400, 400, 511, 511, 405, 405, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 390, 390, 390,
	397, 397, 397, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 310, 310, 312, 312,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 344, 344, 344, 344, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 451, 451, 451, 451, 451, 451,
	451, 451, 346, 346, 454, 454, 455, 455, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 461, 461, 462,
	462, 464, 464, 465, 465, 466, 467, 467, 467, 468,
	469, 469, 463, 463, 470, 470, 470, 470, 471, 471,
	472, 472, 472, 472, 472, 473, 473, 473, 473, 473,
	356, 356, 357, 357, 363, 363, 363, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 197, 197, 197, 197, 197, 281, 281,
	279, 279, 279, 282, 282, 280, 280, 278, 278, 277,
	277, 353, 353, 351, 351, 355, 355, 304, 304, 404,
	404, 404, 404, 404, 404, 404, 404, 305, 305, 305,
	313, 306, 306, 307, 307, 307, 307, 307, 347, 348,
	308, 308, 308, 349, 349, 358, 362, 362, 361, 360,
	360, 359, 359, 337, 337, 338, 338, 288, 288, 512,
	512, 284, 284, 380, 380, 380, 380, 235, 235, 273,
	273, 234, 234, 227, 227, 228, 228, 228, 228, 266,
	266, 364, 364, 406, 406, 407, 407, 408, 408, 409,
	409, 410, 411, 412, 352, 352, 216, 215, 203, 204,
	214, 213, 212, 202, 205, 209, 210, 211, 207, 208,
	222, 221, 220, 226, 218, 219, 385, 201, 229, 229,
	230, 230, 230, 231, 231, 231, 231, 198, 198, 199,
	199, 223, 223, 224, 225, 225, 217, 217, 217, 189,
	189, 189, 190, 190, 191, 191, 420, 420, 417, 417,
	417, 418, 418, 418, 419, 419, 419, 419, 416, 416,
	416, 416, 416, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 425,
	425, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 427, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 430,
	430,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 5, 7, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 3, 6, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 3, 3,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 2, 1, 3, 3, 3, 3,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 4, 5, 5, 5, 3,
	4, 4, 3, 4, 4, 3, 4, 4, 5, 3,
	5, 5, 5, 7, 3, 3, 3, 4, 3, 5,
	3, 6, 5, 6, 3, 5, 6, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 3,
	2, 4, 3, 3, 5, 4, 3, 5, 3, 5,
	4, 6, 4, 6, 4, 1, 0, 3, 4, 4,
	5, 7, 5, 3, 3, 2, 0, 4, 2, 3,
	4, 2, 3, 3, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 10,
	10, 3, 5, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 3, 6, 3, 11, 14, 0, 2,
	4, 3, 0, 4, 5, 4, 3, 3, 1, 3,
	10, 13, 0, 2, 3, 1, 1, 0, 1, 2,
	2, 2, 2, 1, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	2, 1, 0, 1, 0, 9, 9, 3, 1, 3,
	7, 1, 3, 11, 3, 2, 0, 3, 1, 2,
	2, 3, 2, 6, 2, 1, 1, 2, 8, 4,
	2, 5, 5, 5, 2, 1, 9, 10, 6, 5,
	3, 1, 5, 8, 7, 11, 3, 3, 0, 2,
	4, 3, 3, 1, 5, 1, 3, 1, 2, 0,
	1, 2, 2, 0, 1, 3, 3, 2, 2, 1,
	1, 1, 4, 0, 6, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 1, 4, 2, 2, 2,
	4, 7, 3, 4, 6, 3, 1, 1, 1, 8,
	10, 11, 5, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 3, 0, 1, 6, 7, 6,
	5, 3, 4, 16, 19, 15, 18, 4, 0, 2,
	2, 0, 1, 0, 1, 0, 1, 3, 3, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 0, 2, 4, 2, 1, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 1, 2, 4, 4,
	2, 3, 5, 5, 1, 3, 1, 0, 1, 2,
	3, 2, 4, 2, 3, 0, 2, 0, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 3, 4, 5, 2, 2, 0, 2,
	2, 1, 1, 1, 0, 1, 0, 2, 2, 5,
	4, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 4, 4, 3, 4, 1, 5,
	3, 4, 5, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 2, 1, 0, 2, 5, 7,
	2, 1, 2, 4, 3, 5, 0, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	6, 6, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 1, 1, 1, 1, 1,
	1, 2, 1, 5, 5, 6, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 2, 2, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 3, 3, 3, 0, 1, 4,
	2, 2, 2, 2, 2, 3, 2, 2, 3, 0,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 1, 1, 1, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 484, -79, -50, -48, -82, -83, -68,
	-84, -78, -96, -100, -88, -102, -141, -146, -147, -148,
	-3, -36, -38, -51, -67, -69, -77, -86, -85, -87,
	-89, -93, -92, -81, -42, -97, -101, -110, -142, -143,
	-144, 86, 70, 131, 110, 116, 168, 311, 343, 353,
	337, -105, -106, 368, -37, -49, -99, -98, 63, 111,
	332, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -494, 88, -458, -70, -73, -498, 121, 137,
	186, 301, -90, -91, 339, 341, 138, -44, -43, 132,
	-158, -160, -103, -104, -145, -111, -112, -113, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -131, -127, -128, -129, -130, -132, -133, -134, -135,
	-136, -137, -138, 372, 420, 43, 382, 72, 124, 347,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -457, -71, -72,
	-74, -75, -76, 338, -161, -159, 481, 434, -14, -19,
	-20, -15, -16, -18, -21, -17, -25, -30, -31, -27,
	-28, -26, -29, -32, -33, -34, -35, -23, -24, -13,
	-22, 452, 460, -164, -162, -163, -171, 360, 442, 397,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	-218, -223, -224, -225, -217, -189, -427, -430, 4, -424,
	-428, 143, 195, 267, 21, 22, 23, 24, 25, 27,
	28, 39, 41, 40, 42, 43, 48, 51, 52, 53,
	54, 55, 58, 63, 64, 69, 70, 71, 72, 73,
	74, 75, 81, 78, 79, 80, 83, 85, 86, 87,
	89, 91, 92, 100, 101, 102, 103, 105, 110, 111,
	114, 109, 113, 116, 119, 120, 121, 123, 125, 126,
	128, 129, 131, 132, 135, 133, 403, 134, 136, 137,
	138, 139, 149, 150, 151, 156, 158, 162, 163, 166,
	167, 169, 173, 175, 176, 177, 178, 179, 185, 186,
	188, 189, 190, 191, 196, 197, 201, 198, 207, 211,
	212, 213, 215, 219, 220, 221, 222, 223, 226, 225,
	228, 231, 232, 235, 236, 237, 240, 241, 242, 243,
	245, 246, 249, 247, 250, 248, 252, 253, 254, 251,
	257, 255, 259, 260, 265, 263, 261, 262, 269, 272,
	183, 274, 275, 278, 295, 282, 283, 284, 287, 288,
	291, 294, 296, 297, 298, 299, 300, 301, 302, 304,
	305, 309, 311, 312, 314, 316, 317, 318, 319, 320,
	321, 322, 324, 325, 332, 337, 334, 335, 336, 338,
	339, 340, 341, 343, 345, 346, 347, 348, 350, 352,
	369, 370, 384, 353, 354, 355, 356, 357, 358, 359,
	363, 361, 362, 364, 365, 366, 368, 371, 372, 374,
	375, 378, 380, 381, 382, 383, 385, 388, 389, 390,
	391, 386, 396, 394, 395, 398, 399, 400, 401, 402,
	404, 406, 414, 415, 417, 420, 421, 422, 412, 424,
	425, 428, 429, 430, 433, 431, 432, 434, 436, 439,
	440, 441, 447, 446, 453, 454, 456, 457, 458, 34,
	44, 45, 47, 49, 59, 60, 61, 65, 106, 107,
	130, 140, 141, 152, 164, 165, 170, 172, 180, 181,
	182, 202, 203, 205, 209, 229, 271, 273, 289, 293,
	306, 307, 308, 310, 323, 349, 376, 387, 392, 407,
	408, 409, 410, 416, 418, 442, 443, 444, 448, 455,
	280, -211, 2, -189, -189, 311, 26, 2, 26, 305,
	362, 399, 401, 2, -481, -267, 2, 26, -192, -189,
	88, 168, 360, -211, 2, -481, -267, 24, 2, -189,
	2, -193, 2, 353, -189, 484, 83, 237, 64, 349,
	365, -108, 415, -107, 407, 355, -109, -415, 2, 257,
	-189, 484, 484, 484, 26, -201, -189, 397, 195, 102,
	395, 484, 2, 397, 298, 446, 361, 102, 320, 195,
	-490, 345, 171, 435, 411, -476, 2, 4, -428, -424,
	-228, -227, 397, 102, -225, -217, 474, -224, 484, 484,
	484, 2, 212, 213, 319, 318, 365, 366, 484, 484,
	2, 25, 57, 82, 85, 108, 139, 159, 162, 285,
	-495, 246, 295, 317, 364, 396, 404, 417, -489, 383,
	58, 355, -488, -490, 422, 119, -314, 102, 237, 167,
	429, 401, 399, 427, 114, 201, 432, 431, 484, 25,
	57, 67, 85, 119, 139, 159, 162, -497, 295, 317,
	352, 355, 364, 396, 404, 422, 417, 2, 446, 361,
	397, 195, 102, -490, 315, -79, 2, 481, 30, 29,
	368, -154, 397, 206, 2, -189, 212, 213, 2, 484,
	484, 160, -476, 2, 212, 213, 2, 206, 2, 58,
	357, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 2,
	-139, 365, 383, 177, 42, 64, 26, 316, 69, 299,
	103, 169, 195, 196, 220, 82, 83, -316, 41, 213,
	212, -368, 398, 356, 362, 394, 353, 415, 88, 436,
	346, 458, 320, 321, 133, 4, 102, 257, 367, 407,
	237, 74, -504, 2, 397, -507, 2, 415, 415, 2,
	-507, 2, -507, 2, -507, 2, -508, 415, 455, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, -159, -161, -160, 484, 484, 484, 484,
	484, -139, 365, 2, 64, 26, -261, -262, 426, 204,
	127, 286, -158, -160, 2, -457, -413, 2, -342, -431,
	-344, 472, 473, 465, 266, 459, -356, 108, 427, 280,
	-430, -345, -358, 130, 349, -282, 8, 9, 5, 6,
	7, -198, -346, -352, 419, 142, 270, -231, 485, 10,
	481, -454, -160, -357, 35, 172, 56, -417, -230, -199,
	-389, 205, -229, -217, -451, -452, 4, -424, -425, -418,
	-391, -399, -395, -396, -403, -189, -427, 67, 94, 95,
	93, 98, 97, 239, 238, 99, 96, 367, 435, 57,
	34, 180, 181, 209, 271, 182, 65, -453, 120, -426,
	202, 203, 376, 45, 323, 152, 107, 106, 273, 49,
	47, 443, -400, 104, 407, 408, 409, 410, 164, 165,
	140, 141, 293, 308, 392, 416, 418, 170, 229, 90,
	161, 200, 184, 208, 210, 214, 230, 233, 258, 264,
	268, 290, 292, 344, 373, -511, 444, 387, 59, 60,
	-459, 324, -460, -211, -459, 484, 484, 486, 484, -255,
	-256, -257, 2, 26, 117, 481, 2, -372, 2, -373,
	-377, -160, 224, -376, 481, -374, 479, -218, 281, -455,
	350, -451, -452, -198, -217, -230, 4, -424, -426, -258,
	481, 483, 102, 397, 68, 195, -309, 481, -189, 26,
	280, 411, 486, -354, 481, 280, 160, 283, -189, 2,
	2, 369, 2, 481, -108, 61, 415, 40, 365, -329,
	2, -330, -186, -187, -188, -382, 211, 314, 322, 461,
	458, -413, -491, 160, 464, 411, -413, -283, 483, 2,
	2, 2, 2, 2, -377, 180, -218, 2, -215, -416,
	4, -424, -428, -425, -429, -427, 26, 29, 30, 31,
	33, 35, 36, 37, 38, 50, 56, 57, 62, 66,
	68, 77, 82, 88, 93, 94, 96, 95, 97, 98,
	99, 108, 112, 115, 117, 118, 122, 124, 127, 142,
	144, 157, 159, 160, 168, 171, 174, 187, 199, 204,
	206, 224, 227, 234, 238, 239, 266, 270, 276, 280,
	281, 285, 286, 303, 313, 326, 342, 360, 367, 379,
	393, 397, 405, 411, 413, 419, 426, 427, 435, 437,
	445, 449, 450, 451, 452, -430, 67, 2, -377, 180,
	2, -220, 180, -377, -223, 2, -202, -189, 2, -214,
	-416, 2, -234, 180, -218, -219, -223, -422, 180, 2,
	-420, 10, -419, 5, 4, -424, -428, -425, -94, -422,
	481, 411, 486, -273, -227, -228, -266, -189, 483, -342,
	2, -97, 2, -342, 180, 2, -97, 180, 2, -342,
	180, 2, -97, 180, 2, 2, 2, 417, 2, 85,
	180, -189, 397, 101, 2, 336, -496, 352, 421, 446,
	2, 2, 2, 2, 2, 2, 397, -207, 2, -189,
	157, -226, 180, 2, -189, 361, -505, 324, -422, 180,
	2, -221, -223, -221, 195, 207, -202, 180, 2, 401,
	399, 401, 399, 160, 2, 206, 2, 206, 2, -378,
	2, -379, -373, -218, 479, 2, 2, 2, 2, 2,
	180, -189, 397, 101, 2, 222, 2, 2, 2, 2,
	2, 2, 2, 2, 2, -275, 180, 2, -218, -275,
	180, 2, -275, 180, 2, -315, 2, 77, -202, 180,
	2, -423, 180, 2, -422, -386, 2, -385, -419, 442,
	-79, 481, -79, 481, 365, 481, -422, -218, -218, -342,
	-97, -95, -94, 160, -342, -97, -154, 157, 2, 102,
	397, -139, 2, 157, 437, 2, 8, 2, -422, 356,
	321, 149, 2, 369, 2, 370, 64, -316, 458, 64,
	160, 2, 160, 2, -299, 2, 452, -479, 2, 280,
	160, 2, 160, 2, 160, 2, 160, 2, 160, 2,
	318, 366, 213, 2, -97, 449, -342, 449, 2, 414,
	221, 134, 160, -299, 2, 160, 2, 160, 2, 5,
	2, 384, 2, 211, 314, 384, 2, -218, -499, 2,
	397, 446, 361, 2, 2, 78, 79, 160, 2, 160,
	2, 160, 458, 2, -292, -377, -328, -329, -328, 411,
	-261, -262, -139, 369, 2, -165, -290, -167, 157, -318,
	-319, -168, 234, 144, 276, -169, -298, 26, 117, -298,
	-298, 52, 482, 482, 11, 12, 66, 39, 472, 473,
	474, 475, 155, 476, 477, 470, 471, 469, 462, 463,
	467, 217, 218, 84, 466, 464, 76, 244, 351, 145,
	146, 147, 148, 333, 193, 32, 194, 14, 15, 16,
	31, 285, 233, 459, 184, 373, 465, 17, 18, 19,
	208, 210, 268, 44, 187, -197, -236, -342, -342, -342,
	-342, -342, 292, 481, -288, -337, 479, -160, 481, 481,
	481, -412, 8, -160, -342, -356, 482, -280, 481, -160,
	-356, -351, 481, 349, 479, 481, -359, -342, 5, 5,
	5, 481, 483, -461, 453, 157, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	481, 310, -393, 481, -392, 481, -392, -392, 447, -390,
	481, 460, 454, 481, -390, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 447, 486,
	-459, -258, 481, -284, -380, -342, 474, -284, -284, 280,
	-277, -342, 90, -302, 214, 258, 161, 230, 344, 200,
	-339, 485, -339, -367, 460, -160, -374, -217, -160, -376,
	481, -372, -367, -80, -412, -67, -77, -85, -97, -110,
	-143, -144, 474, -218, 481, 160, 481, 483, 160, -266,
	-416, -202, -218, -229, -230, -234, 116, -277, -476, -266,
	-192, 36, -353, -387, -388, -433, -432, -389, -398, -394,
	-397, 306, 307, -418, 47, 443, -400, 205, 4, -424,
	-426, 202, 203, 376, 45, 323, 152, 107, 106, 273,
	49, 407, 408, 409, 410, 164, 165, 444, 387, 59,
	60, -476, -266, 157, -415, -277, 36, -329, 2, 108,
	-420, 40, -509, 486, 232, -238, 243, 265, 176, 281,
	456, 274, -421, 5, 4, -352, -364, 108, 237, 205,
	-406, -408, 8, -407, 9, -409, 472, 473, -414, -413,
	92, 483, -416, -176, 334, -175, 23, 27, 121, 440,
	135, -248, 197, 298, 130, 380, 430, -485, -486, 354,
	402, 403, 80, 274, 334, 130, -295, -297, 36, 100,
	260, 294, 53, 190, 248, 249, 382, 448, 130, 334,
	-486, 334, -486, -178, 380, 430, -485, -486, 354, 334,
	-177, -248, 130, 485, -482, -456, 452, 130, -383, -382,
	-423, -94, -273, 486, 486, -416, 474, 130, 130, 130,
	130, 2, 2, 266, 2, 2, 2, 162, -488, -497,
	2, 2, 2, -218, 180, -260, 280, -478, -274, 397,
	-218, 266, -220, 180, 2, -223, 446, -482, 266, 36,
	481, 2, -315, 2, 195, -456, 266, -378, -232, -218,
	-373, -232, 368, -211, 36, -339, -339, 130, 2, 2,
	2, -189, -179, 486, 55, 340, 130, -179, 130, -179,
	130, -235, 180, -234, -179, 130, 486, 130, 482, 486,
	-386, -386, -422, -152, 452, 160, 88, 481, 481, -154,
	-383, 486, -95, -422, -478, -202, 2, -218, 2, 397,
	215, -152, -422, -422, -422, -415, 26, 370, 2, 318,
	366, 79, 370, 2, -218, 397, 102, 195, 70, -480,
	157, -477, 345, -476, -218, 102, -218, 102, -218, 102,
	-218, -218, 2, 2, 2, 2, 75, 75, 157, 2,
	414, 2, 414, 2, -189, -189, -189, 232, -218, 157,
	397, 195, 397, 195, 102, 397, -179, 486, -193, -165,
	-290, -415, -291, -290, -166, -165, -168, 157, 322, 431,
	260, 371, 219, -319, -318, 26, -342, -323, 151, 259,
	-342, -321, -344, 472, 473, -407, -409, -276, 274, -159,
	-159, -159, -263, -369, -342, 313, 195, -402, -387, -387,
	-216, -416, 407, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, -342, -342,
	-342, -342, -342, -342, -342, -342, -342, -342, 233, 184,
	373, 44, 187, -342, 411, -342, -342, -342, -342, 255,
	266, 270, 419, 142, 428, 117, 274, -512, 393, 38,
	-349, -160, -281, 481, -363, 33, 379, 26, -356, 481,
	2, -337, -342, -338, -278, -277, -277, 482, 445, 26,
	117, 474, 2, 482, 486, 36, 482, -342, -278, -355,
	-351, -277, -362, -361, 449, -310, -311, 457, 251, 105,
	178, 250, -312, 359, -410, 8, -416, 474, -462, 150,
	171, 481, 482, 2, 482, 2, 482, -342, 2, 482,
	-342, 2, 482, -342, 2, 482, -342, 2, 482, 2,
	-342, -342, -342, -342, -342, -342, -342, -277, 8, -410,
	-410, 407, 407, -410, -410, -410, -401, 306, 235, 307,
	166, 254, 252, 253, 165, -401, -304, 2, -404, -277,
	4, 457, 251, 105, 178, 250, 359, 5, -304, 2,
	-305, 2, -342, -277, -306, -343, -344, 472, 473, 465,
	-356, -307, 2, -342, -278, -342, 50, 227, 413, -308,
	-342, 160, -277, -277, 2, -277, 2, -460, 36, -277,
	-269, 486, 160, 36, 4, -269, -269, 481, 482, 486,
	-303, 175, 247, 242, -303, -372, -302, 214, -300, 290,
	-300, -300, -367, -203, 479, 487, -416, -367, -366, -365,
	36, -211, 287, -367, -367, 483, 482, -366, 480, -474,
	481, 484, 484, 484, 484, 484, -218, 481, -277, -416,
	385, 482, 483, 208, 208, 208, 208, 350, 482, 411,
	452, -79, 282, 482, 486, -268, 35, 479, 483, 2,
	2, -405, 447, 481, 481, -311, 481, 160, -267, -491,
	482, 415, -330, -237, 322, 378, 335, 363, 395, 8,
	9, 8, 9, 486, -416, 486, -492, 82, 411, 68,
	-333, 180, 68, -434, -205, 82, -435, -189, 62, 427,
	313, 159, 128, -492, 82, 313, -492, 82, 82, 368,
	383, 52, -377, 39, 39, 26, -97, 228, 160, 458,
	397, 195, 411, -377, -297, -387, 100, 248, 249, 52,
	-411, -406, 472, 473, -411, 52, -411, -411, -411, 452,
	-220, -377, 411, 411, 486, 39, 39, 26, -97, 228,
	160, 411, -234, -203, -483, -194, 89, 261, 241, 262,
	-195, -196, 300, 439, -422, -149, 191, 482, -383, -227,
	-189, 483, -342, -97, -342, -97, 130, 2, -505, 222,
	481, -241, 266, 160, -266, -384, 206, 486, -274, 130,
	-296, -295, 266, -222, 180, 2, -218, 130, 481, 125,
	320, 2, -204, 180, -190, -189, -315, -182, 400, 130,
	-294, 437, -324, -97, 481, 108, 36, -324, -285, -286,
	-381, -287, -205, 481, -211, -189, 2, -218, -275, -275,
	-275, -179, 486, 130, -202, -422, -423, -79, -385, 482,
	482, 482, -151, 284, -150, -189, 5, -154, 437, -240,
	-334, -333, -438, -439, -434, 233, 195, 427, 207, 143,
	-259, -206, -205, 101, -152, -94, -383, -152, -152, -383,
	-383, -218, 157, -152, -152, -152, 2, 2, -299, -218,
	-202, -234, -218, -266, -266, -299, -202, -299, -202, -299,
	-202, -97, -342, 365, 157, 157, 483, -299, 320, 102,
	397, 298, 195, -218, -234, -218, -234, -202, -218, -377,
	-291, -166, 281, 219, 371, -321, -322, -344, 349, 350,
	-322, 349, 350, 8, 9, 8, 9, -170, 375, 269,
	-275, 486, -173, 37, 115, 219, -218, 458, 126, -342,
	-342, 411, -512, 393, -349, 126, -342, 255, 270, 419,
	142, 428, 117, 274, 160, 481, -343, -343, 482, -279,
	-342, -342, 480, 489, 482, -262, 486, -261, -342, -277,
	-277, 482, 483, -277, -266, 480, 480, 486, 482, -360,
	-361, 122, -342, 411, 411, 411, 411, 481, 482, 483,
	-467, 291, 481, 481, -342, 482, 482, 482, 482, 36,
	486, 486, 486, 482, 486, 486, 486, 482, 482, 482,
	486, 482, 458, 458, 482, 482, 482, 482, 486, 482,
	486, 482, 160, 482, 482, -313, 303, 482, 11, 12,
	472, 473, 474, 475, 155, 476, 477, 470, 471, 469,
	462, 463, 464, 76, 244, 351, 14, 15, 16, 208,
	187, -343, -343, -343, 482, -347, -348, 160, 157, 36,
	-308, -308, -308, 482, 160, -277, 482, 482, 481, 482,
	-336, -335, 450, -380, -270, 2, -372, -213, -416, -336,
	-336, -277, -342, 214, 214, -301, 437, 280, -303, -372,
	-366, -412, -341, -340, 158, 37, 115, 263, 183, -366,
	-211, -258, -366, -366, -416, -367, -367, -365, 482, -475,
	-412, 482, -271, -375, -455, -262, 483, -152, -416, -140,
	5, 270, -140, -140, -140, -266, 24, 304, -387, 479,
	480, 8, -416, 481, -410, -410, -410, -266, 160, -413,
	-329, 425, 73, 322, 407, -413, -175, 334, -205, -205,
	-218, 266, -333, 180, -181, 266, -387, -212, -189, 481,
	481, 219, 219, 437, -205, -212, 219, 180, -205, 180,
	-212, -212, -484, 322, 275, -342, 236, 320, 267, -176,
	334, -97, -97, -97, 481, -491, 437, 116, -218, -234,
	-218, -222, 334, 264, -229, -411, -411, -295, 334, -220,
	-202, -177, -97, -97, -97, 481, -203, -178, 334, -194,
	-422, 270, 433, -482, -152, 160, -149, 474, -189, 446,
	-189, -239, -242, -240, -205, -157, 454, 452, 130, -233,
	-218, 479, -152, -422, -218, -226, 130, -258, 266, -422,
	2, 481, 2, 280, 266, -204, 180, -183, 123, -510,
	464, -202, -336, -270, -293, -327, 342, 280, -259, 442,
	-211, -293, -272, 486, 160, 464, 483, -259, 2, -179,
	-179, -179, -234, -235, -179, -79, -79, -152, 486, 481,
	464, 464, 481, -422, -422, 482, 486, -218, -204, 195,
	195, -210, -190, 482, 486, 483, 481, -152, 160, -45,
	452, 397, 485, -299, -299, -299, 365, 365, -189, -214,
	-202, -218, -215, -234, 157, 157, 431, -322, 281, 240,
	-369, -174, 272, -218, 485, -342, -342, 126, 126, -342,
	-343, -343, -342, 126, 160, 481, -342, -353, 31, 31,
	482, 486, -338, -342, 482, 445, -262, -262, 482, 474,
	-416, 485, 482, -351, 124, -342, 405, 251, 178, 250,
	-312, 250, -312, -312, -410, 5, -416, 474, -468, -208,
	481, -189, 450, -261, 482, -402, -387, -342, -342, -342,
	-342, -342, -410, -390, -390, -410, -410, -342, -347, -342,
	-402, -387, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, -343, -343, -343, -343, -343, -343, -343, -343, -343,
	-343, 117, 266, 274, -343, -348, -347, -342, -342, -387,
	482, 482, 482, -277, -79, -289, 171, -342, -383, 486,
	-289, -289, 482, -372, -372, 481, -342, 214, 480, 486,
	488, 464, -258, 483, -365, -366, 480, 482, 486, 482,
	486, -326, 36, 482, -416, 283, 5, 8, 479, 480,
	483, -410, 482, 482, 482, -266, -342, 411, 411, 130,
	266, 439, -440, -435, 128, -342, -264, -370, -342, 481,
	481, 2, -172, 121, 368, -493, 2, 437, 130, -179,
	130, -179, 456, 481, 481, 411, 452, -277, -342, -153,
	108, -415, -486, 485, -486, 485, 411, 411, 452, -277,
	411, -422, 270, -423, -152, 2, -222, 2, 482, 482,
	486, -441, 36, 278, 481, 278, -218, -63, 452, -382,
	-412, -220, 36, 130, -482, 2, -218, 130, 280, 266,
	-184, 226, -510, -420, -456, -262, -293, -284, 267, 81,
	482, -336, -286, -270, -342, 2, 482, -179, -150, -151,
	-422, -422, -422, -152, -154, -154, -334, -243, 481, -204,
	-190, 481, -154, -206, 2, -423, -97, 284, -218, 474,
	-299, -250, -249, 298, 274, -250, 349, 349, 281, 151,
	223, -173, -203, -342, -342, 126, 31, 31, -342, -342,
	-353, 482, -342, -342, -277, 480, 5, -342, 482, 482,
	8, -342, 482, 483, -469, -189, -342, 482, 482, 482,
	486, 486, 482, 482, 482, 482, 482, 482, 482, -348,
	160, 117, 274, 481, 482, 482, -350, 174, 52, -372,
	-350, -350, -301, -266, -372, -340, -203, 479, -416, -412,
	-375, 481, 483, 480, 2, 479, -416, 482, -205, -205,
	-333, 130, -442, 82, -444, 66, 143, 88, 266, 270,
	427, 313, 62, 108, 326, -501, 36, 482, 482, 486,
	-173, -264, -266, 266, 390, 108, 266, 108, 101, 422,
	69, -205, -212, -266, -266, -218, 136, 482, 486, 464,
	2, 474, 474, -222, -220, 136, 482, -203, -258, -246,
	198, -205, -439, -436, -437, 313, -443, -445, 143, 313,
	-97, -156, -155, -189, 5, 2, 481, -241, 284, 480,
	-296, -97, -222, -317, 437, -203, -218, 130, -185, 225,
	-510, -420, -182, -320, -318, -325, 481, 280, -97, -262,
	464, 482, 482, 101, 101, 189, 129, -264, 481, 481,
	-266, 101, 482, -46, -47, 195, 82, 302, -215, 397,
	195, 481, 481, -173, -342, -342, -342, 482, -262, -416,
	474, -463, 298, 482, -342, -342, -343, 160, 481, -353,
	-464, 451, -342, -277, -464, -464, 482, -412, 2, 479,
	2, -333, -212, -216, -209, -189, 143, 180, 270, 219,
	481, -343, -218, 481, 2, -502, 112, 199, -332, -503,
	87, 391, 188, -370, -174, 482, 482, 270, 270, -342,
	-387, 481, -179, -179, 482, 482, -342, 411, -415, 86,
	-413, 2, -486, -342, 411, 36, -247, -248, 187, -441,
	219, -209, 219, -500, 452, 482, 486, 464, 464, -239,
	-157, -64, -65, 412, -382, -258, 481, -189, 280, 481,
	-203, -510, -420, -183, -293, 118, -266, 82, -320, -349,
	-152, 481, 481, -244, 71, 83, 109, 179, 163, 196,
	383, 388, 26, -244, 482, -264, -264, 482, 481, -152,
	486, 26, 481, 26, 481, -218, -234, -277, -277, 482,
	-262, 52, 482, 482, -343, -353, 482, -465, -466, -208,
	480, 2, -444, -209, 266, 437, -342, -191, 481, -342,
	199, 113, 185, -246, 481, -331, 437, 326, -200, 66,
	-264, 481, 481, 481, 464, 160, 481, -97, -157, 296,
	481, -245, 280, 101, 260, -155, -345, -345, 482, 36,
	-65, 9, 36, -264, -218, -264, 280, -420, -184, 431,
	267, 482, -212, -293, -423, -423, -331, 482, 482, -423,
	-47, -266, -266, 482, 482, -470, 320, 350, 173, -277,
	482, 486, 36, 130, 175, 482, -446, 245, -189, 482,
	113, 185, -247, -266, -246, 175, -218, -487, 437, -216,
	482, -252, -251, -249, -254, -253, -249, -277, -413, 86,
	296, -277, -245, -218, -265, -371, -205, 72, 101, -246,
	-97, -97, 482, -317, 482, -218, -185, 368, -335, 482,
	482, -332, -331, 482, 482, 482, 482, -471, -472, 44,
	424, 92, -342, -471, -471, -466, -468, 143, 452, -447,
	-450, -449, 280, 374, 161, 297, 482, 390, 448, -502,
	482, 452, -258, -342, -331, 482, 486, 442, 482, 486,
	442, 482, 160, 482, 481, 482, 486, 312, 114, 121,
	-247, -500, -331, 481, -332, 481, -285, -152, -152, -246,
	-332, -152, -473, 128, -472, 309, 156, 349, 309, 156,
	-473, -473, -209, 48, -449, 280, -450, 280, 431, 114,
	48, -446, -246, -251, 187, -253, 160, 296, -266, -371,
	350, 350, 2, -157, -245, -332, -264, -246, -264, -336,
	-247, -246, 92, 171, 406, 260, 31, 464, -448, 260,
	340, 55, 368, -448, 464, -447, 481, 481, 482, 2,
	-245, -246, 482, -247, 482, -247, 349, 288, -472, -342,
	22, 270, 108, -342, -502, -277, -277, -180, 55, 340,
	-247, -331, -506, 450, -332, 482, 482, -506, -332, 2,
	-246, -247, 411, -246, -247, 481, -247, -506, -277, -506,
	482, -247,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	366, 367, 369, 370, 371, 373, 374, 376, 378, 380,
	382, 383, 385, 387, 389, 390, 391, 392, 393, 395,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 455, 457, 0, 984, 986, 988, 990, 0, 585,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 444, 446, 0, 0, 0, 466, 467, 0,
	1072, -2, 460, 462, 464, 529, 531, 533, 535, 537,
	539, 541, 542, 544, 546, 548, 550, 552, 554, 556,
	557, 559, 561, 563, 565, 567, 569, 571, 573, 575,
	577, 579, 581, -2, -2, -2, 0, -2, -2, -2,
	1002, 32, 34, 36, 38, 40, 42, 44, 275, 276,
	278, 280, 282, 284, 287, 288, 290, 1127, 328, 330,
	332, 334, 336, 0, -2, 1139, 0, 0, 46, 47,
	48, 49, 50, 51, 52, 53, 69, 70, 71, 72,
	73, 74, 75, 76, 57, 59, 60, 64, 65, 67,
	55, 0, 0, 1103, 1105, 1107, 1109, -2, 0, 0,
	7, 9, 11, 13, 15, 17, 19, 21, 368, 372,
	375, 377, 379, 381, 384, 386, 388, 394, 396, 398,
	867, 1754, 1771, 1772, 1773, 1776, 1777, 1778, 1779, 1780,
	1781, 2128, 2209, 2210, 1803, 1804, 1805, 1806, 1807, 1808,
	1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	0, 422, 420, 1747, 423, 1961, 425, 427, 317, 318,
	319, 320, 321, 322, 0, 437, 431, 436, 438, 440,
	441, 442, 443, 417, 415, 0, 437, 1806, 435, 982,
	983, 977, 978, 1992, 1009, 456, -2, -2, -2, 2094,
	-2, 488, -2, 495, 2098, 1994, 500, 0, 502, -2,
	505, 985, 987, 989, 583, 584, 1757, 0, 0, 0,
	0, 30, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 917, 918, 0, 0, 157, -2, -2, -2,
	-2, 0, 0, 1844, 1715, 1773, 1718, 1713, 194, 196,
	198, 199, 0, 0, 0, 0, 0, 0, 223, 226,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	763, 755, 756, 954, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 253, 358, 359, 0, 1128, 1128,
	0, 0, 0, 0, 174, 165, 0, 0, 732, 445,
	447, 0, 0, 160, 0, 0, 981, 0, 176, 0,
	0, 461, 463, 465, 530, 532, 534, 536, 538, 540,
	543, 545, 547, 549, 551, 553, 555, 558, 560, 562,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	590, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, -2, -2, -2, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 593, 595, 596, 597, 0,
	648, 665, 0, 907, 1129, 1011, 992, 1006, 1011, 994,
	995, 996, 997, 998, 1003, 1005, 999, 1000, 1001, 33,
	35, 37, 39, 41, 43, 45, 277, 279, 281, 283,
	285, 289, 291, -2, 1101, 1102, 329, 331, 333, 335,
	337, 448, 0, 450, 0, 594, -2, 0, 1133, 1133,
	1133, 0, 0, 1102, 1100, 0, 453, 454, 509, 510,
	1360, 0, 0, 0, 0, 0, 1612, 1444, 0, 511,
	-2, 1475, 1477, 2069, 2094, 1611, 1479, 1480, 1481, 1482,
	1483, 0, 1485, 1486, 1487, 1488, 1489, 1490, 0, 1492,
	0, 1497, 1498, 1499, 0, 2076, 1692, 1767, -2, 0,
	0, 2082, 1763, 0, 1578, 1515, -2, -2, 1790, 1769,
	1292, 1293, 1294, 1295, 1296, -2, -2, 2111, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 0,
	2058, 2077, 2078, 2083, 2085, 2079, 2066, 1540, 1854, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1319, 1328, -2, -2, -2, -2, -2, -2,
	2070, 2071, 2088, 2091, 2097, 2102, 2103, 2075, 2084, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, 2127, 1320, -2, -2, -2, -2,
	1119, 1971, 1122, 867, 1120, 1104, 1106, 0, 1108, 0,
	0, 0, 1113, 1136, 1134, 0, 1175, 1117, 1118, 1193,
	1193, 1217, 0, 1198, 0, 1217, 1128, 1243, 0, 1204,
	1987, 1516, 1517, 0, 1773, 1768, -2, -2, 2109, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 424, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 458,
	459, 0, 483, 0, 487, 2065, -2, 1812, 2003, -2,
	491, 1012, 1016, 1017, 1018, 1019, 0, 0, 0, 0,
	0, 497, 0, 0, 484, 485, 503, 506, 0, 586,
	587, 588, 589, 54, 0, 2077, 1243, 56, 0, 1737,
	1798, 1799, 1800, 1801, 1802, 2110, 2129, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
	2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152,
	2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2111, 58, 0, 2077,
	61, 0, 2077, 0, -2, 66, 0, 1743, 68, 0,
	1740, 77, 0, 2077, 0, 1712, -2, -2, 2077, 915,
	177, 178, 1786, 1787, 1794, 1795, 1796, 1797, 1230, 161,
	0, 0, 0, 724, 1709, 1714, 725, 1719, 0, 200,
	201, 202, 203, 204, 2077, 206, 207, 0, 209, 210,
	2077, 212, 213, 0, 215, 229, 230, 0, 232, 0,
	2077, 0, 0, 0, 238, -2, 254, 0, 251, 0,
	242, 243, 245, 246, 247, 248, 0, 295, 293, 1748,
	0, 733, 2077, 735, 1753, 0, 0, 936, -2, 2077,
	912, 941, 1751, 0, -2, 0, 1126, 2077, 1026, 759,
	760, 761, 762, 0, 314, 0, 1039, 0, 1041, 0,
	1062, 1249, 1193, 1193, 0, 255, 256, 257, 258, 259,
	2077, 0, 0, 0, 264, 0, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 152, 2077, 340, 356, 152,
	2077, 343, 152, 2077, 346, 0, 349, 952, 152, 2077,
	352, 353, 2077, 355, 179, 0, -2, 411, 1756, -2,
	361, 0, 362, 0, -2, 0, 191, 0, 0, 730,
	731, 1230, 163, 0, 979, 980, 0, 0, 468, 0,
	0, 591, 592, 0, 0, 602, 603, 604, 191, 1995,
	1969, 1871, 609, 0, 612, 615, -2, 0, 0, 0,
	0, 619, 0, 624, 625, 626, 0, 729, 628, 0,
	0, 630, 0, 634, 0, 637, 0, 639, 0, 641,
	-2, -2, -2, 652, -2, 0, 656, 0, 658, 0,
	0, 0, 0, 673, 674, 0, 679, 0, 682, 683,
	684, 685, 686, 0, 688, 689, 690, 691, 0, 693,
	694, -2, -2, 698, 700, 0, 707, 0, 711, 0,
	715, 0, 598, 599, 152, 1247, 991, -2, 993, 0,
	-2, 0, 449, 0, 452, 1154, 1087, 1084, 0, 1151,
	1152, 1088, 0, 0, 0, 1095, 0, 1131, 1132, 0,
	0, 0, 1074, 1075, 0, 0, 0, 0, 1617, 1618,
	1619, 1620, 1621, 1622, 1625, 1626, 1623, 1624, 1627, 1628,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1631, 1632,
	0, 0, 1634, 0, 1636, 0, 0, 0, 0, 0,
	0, 1423, 1425, 1700, 0, 0, 1633, 1365, 1366, 1367,
	1402, 1403, 0, 0, 1476, 1697, 1696, 1478, 0, 1648,
	0, 1491, 1733, -2, 0, 1612, 1643, 0, 0, 1500,
	1501, 1502, 0, 0, 1648, 0, 0, 1691, 1512, 1513,
	1357, 0, 0, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 1305, 0, 1307, 0, 1308, 1309, 1316, 1329,
	0, 0, 0, 0, 1333, 0, 0, 0, 0, 0,
	0, 0, 1672, -2, 0, 0, 0, 0, 1321, 0,
	1121, 0, 0, 1179, 1701, 1705, 1706, 1179, 1179, 0,
	0, 1649, 1240, 1240, 0, 0, 1236, 1236, 1236, 1234,
	1217, 0, 1217, 1227, 0, 1217, 1217, 0, -2, 1198,
	0, 0, 1227, 0, 1211, 399, 401, 403, 405, 406,
	407, 409, 1244, 1245, 0, 0, 0, 0, 0, 0,
	1774, 0, 0, 0, 1759, 0, 0, 0, 0, 429,
	439, 1128, 0, 1651, 1266, 1270, 1271, 1272, 1273, 1274,
	1275, 0, 0, 1267, -2, 1317, 1319, 1340, 1791, 1792,
	1793, 1300, 1301, 1302, 1303, 1304, 1312, 1299, 1299, 1299,
	1310, 1339, 1331, 1339, 1335, 1286, 1287, 1322, 1323, 1324,
	1325, 0, 433, 0, 0, 0, 0, -2, 493, 498,
	499, 0, 0, 1014, 0, 1020, 520, 521, 522, 1022,
	1023, 0, 496, 523, 524, 525, 526, 527, 528, 0,
	1721, 1722, 1723, 1724, 1727, 1728, 0, 0, 494, 513,
	501, 0, 507, 78, 974, 117, 0, 974, 974, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 102, 113,
	90, 91, 0, 0, 0, 0, 62, 889, 0, 892,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	101, 0, 96, 80, 0, 0, 0, 103, 115, 0,
	143, 145, 0, 0, 913, 0, 1125, 0, 182, 1229,
	0, 1230, 723, 0, 0, 1774, 1717, 0, 0, 0,
	0, 231, 233, 0, 235, 236, 237, 0, 935, 0,
	244, 241, 286, 838, 2077, 0, 0, 312, 307, 0,
	309, 0, 888, 2077, 886, 1752, 0, 910, 0, 0,
	0, 942, 1783, 947, 953, 1028, 0, 316, 0, 1042,
	1044, 0, 0, 1250, 0, 1252, 1253, 0, 261, 262,
	263, 0, 338, 0, 150, 151, 0, 341, 0, 344,
	0, 152, 2077, 1707, 350, 0, 0, 0, 1128, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	191, 0, 1230, 191, 191, 1230, 470, 1230, 472, 0,
	0, 605, 191, 191, 191, 610, 611, 613, 614, -2,
	-2, 708, 616, 617, 676, 0, 0, 0, 675, 627,
	0, 717, 1983, 727, 676, 1844, 676, 1844, 676, 1844,
	638, 640, 643, 668, 651, 655, 0, 0, 0, 660,
	0, 662, 0, 664, 676, 677, 680, 687, 692, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 1004, 1154,
	1087, 451, 1078, 1153, 1079, 1086, 1089, 0, 0, 1091,
	0, 1093, 0, 1149, 1150, 1157, 1158, 0, 1168, 1169,
	1161, 0, -2, 0, 0, 1164, 1165, 1097, 0, 1114,
	1115, 1116, 1140, 1141, 963, 0, 2209, 1361, 1261, 1362,
	1363, 1736, 0, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, -2, -2, -2, -2, -2, -2, -2,
	-2, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, -2, -2, -2, 1400, 1401, -2, 1635, 1637,
	0, 1700, 0, -2, 0, -2, -2, -2, -2, 1420,
	0, 1422, 1427, 1429, 1431, 0, 0, 0, 0, 1699,
	1441, 1683, 1684, 0, 0, 1614, 1615, 1616, 1426, 0,
	1445, 1698, 1695, 0, 0, 1647, 1139, 1504, 0, 0,
	0, 0, 1511, 1496, 1645, 0, 1644, 0, 0, 0,
	1655, 0, 1690, 1686, 0, 1734, 1356, 1343, 1344, 1345,
	1346, 1347, 1348, 1358, 0, 1731, 1760, 1766, 1588, 0,
	0, 0, 1541, 1542, 1543, 1544, 1545, 0, 1547, 1548,
	0, 1550, 1551, 0, 1553, 1554, 0, 1556, 1557, 1558,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 0, 0, 1560, 0, 1658,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 1562,
	0, 1564, 1649, 1669, 0, 0, 1446, 0, 0, 0,
	1612, 0, 1567, 1649, 1677, 0, 0, 0, 0, 0,
	1649, 0, 1682, 0, 1574, 0, 1576, 1123, 0, 0,
	1256, 0, 0, 0, 1704, 1256, 1256, 0, 1174, 0,
	0, 1237, 1238, 1239, 0, 0, 1240, 0, 1231, 1235,
	1232, 1233, 1227, 1190, 0, 0, 1738, 1227, 1196, 1226,
	0, 867, 1216, 1227, 1227, 0, -2, 1200, 1217, 0,
	0, 400, 402, 404, 408, 410, 0, 0, 1139, -2,
	191, 866, 0, 0, 0, 0, 0, 419, 421, 0,
	0, 413, 0, 416, 0, 1257, 1260, 0, 0, 1276,
	1277, 0, -2, 0, 0, 1341, 0, 0, 0, 0,
	486, 0, 1013, 1021, 0, 517, 0, 519, 0, 1725,
	1729, 1726, 1730, 0, 508, 0, 0, 0, 0, 973,
	121, 2077, 0, 154, 0, 0, 831, 1744, 0, 0,
	0, 0, 1859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 92, 0, 0, 0,
	0, 0, 0, 0, 890, 891, 893, 900, 902, 0,
	896, 1732, 0, 0, 897, 0, 899, 901, 903, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 93, 0,
	0, 0, 0, 1711, 931, 929, 923, 924, 925, 926,
	927, 928, 0, 0, -2, 191, 0, 162, 182, 1710,
	1720, 0, 205, 208, 211, 214, 0, 239, 0, 0,
	765, 738, 0, 0, 294, 191, 0, 0, 308, 0,
	884, 887, 0, 867, 2077, 922, 1750, 0, 0, 0,
	0, 940, 0, 2077, 1739, 1782, 1783, 1030, 1036, 0,
	1256, 0, 1060, 1045, 0, 0, 0, 1060, 1064, 1065,
	1067, 1068, 0, 0, 1251, 0, 265, 357, 152, 152,
	152, 347, 0, 0, 152, 180, 354, 360, 412, 1128,
	1128, 191, 189, 1946, 187, 184, 186, 0, 0, 0,
	766, 768, 769, 770, 771, 0, 1783, 0, 1897, 1783,
	0, 1048, 1050, 0, 158, 164, 191, 0, 306, 469,
	474, 600, 0, 606, 607, 608, 645, 670, 618, 620,
	621, 622, 0, 728, 726, 629, 676, 632, 676, 635,
	676, 654, 657, 659, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 712, 713, 714, 716, 1248,
	1082, 1083, 1085, 0, 1094, 0, 0, 1163, -2, -2,
	1162, 1166, 1167, -2, -2, -2, -2, 1090, 0, 1099,
	1096, 0, 1148, 961, 962, 0, 0, 0, 0, -2,
	-2, 0, 0, 0, 1442, 0, -2, 1421, 1424, 1428,
	1430, 1432, 0, 0, 0, 0, 0, 0, 1638, 0,
	1640, 1443, 1693, 1696, 1610, 0, 0, 1138, 1139, 1139,
	0, 1510, 0, 1646, 0, 1653, 1654, 0, 1503, 0,
	1687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 1546, 1549, 1552, 1555, 0,
	0, 0, 0, 1535, 0, 0, 0, 1539, 1311, 1297,
	0, 1339, 1337, 1338, 1332, 1339, 1336, 1289, 0, 1288,
	0, 1559, 0, 1561, 1563, 0, 0, 1565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 1450, 1451, 1566, 1675, 1676, 0, 0, 0,
	0, 0, 0, 1572, 0, 1681, 1573, 1575, 1128, 1176,
	1171, 1255, 0, 1702, 1230, 1178, 1180, 1703, 1741, 1171,
	1171, 0, 1650, 0, 0, 1221, 0, 0, 0, 1223,
	1194, 0, 0, 1188, 0, 1184, 1185, 1186, 1187, 1195,
	867, 1225, 1197, 1201, 1760, 0, 1227, 0, 1212, 0,
	1214, 1246, 0, 1206, 1209, 0, 0, 192, 1775, 216,
	220, 221, 217, 218, 219, 428, 0, 0, 1652, 0,
	1262, 0, 1268, 0, 0, 0, 0, 432, 0, 482,
	-2, 515, 516, 518, 0, 514, 118, 974, 0, 0,
	965, 0, 123, 2077, 132, 0, 806, 0, 1742, 0,
	0, 0, 0, 0, 976, 0, 0, 2077, 152, 2077,
	152, 135, 138, 0, 142, 140, 0, 0, 797, 79,
	974, 82, 86, 94, 0, 0, 0, 100, 0, 0,
	0, 967, 0, 894, 895, 898, 904, 63, 0, 969,
	964, 144, 84, 88, 95, 0, 971, 81, 0, 930,
	908, 909, 0, 914, 155, 0, 191, 1716, 0, 0,
	0, 0, 0, 764, 849, 0, 0, 0, 0, 300,
	296, 0, 305, 311, 310, 734, 0, 0, 0, -2,
	937, 0, 939, 0, 0, 0, 2077, 1032, 1036, 0,
	1035, 1126, 1139, 315, 1037, 1060, 0, 0, 0, 1047,
	1043, 1040, 1256, 0, 0, 0, 0, 0, 260, 339,
	342, 345, 1708, 152, 351, 363, 364, 166, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 775, 0, 1783,
	1783, 0, 1746, 0, 0, 0, 0, 159, 0, 471,
	0, 0, 0, 631, 633, 636, 661, 663, 676, 701,
	702, 792, 0, 792, 0, 0, 1092, 0, 1160, 1098,
	1142, 1143, 0, 963, 0, 1364, 1405, 0, 0, -2,
	0, 0, 1409, 0, 0, 0, -2, 0, 0, 0,
	1639, 1641, 0, 1695, 1505, 0, 0, 0, 1509, 1493,
	1494, 0, 1613, 1656, 1685, 1689, 0, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 0, 1735, 1761, 1765, 1586, 1587,
	1591, 1749, 0, 0, 1518, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 1334, 0, 0, 1657, 1668, 1670,
	1447, 1448, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
	1460, 1461, -2, -2, -2, 1465, 1466, 1467, -2, -2,
	-2, 0, 0, 0, 1671, 1673, 1674, 1678, 1679, 0,
	1569, 1570, 1571, 1680, 0, 1173, 0, 1254, 1177, 0,
	1173, 1173, 1135, 1219, 0, 0, 1242, 0, 1191, 0,
	1192, 0, 1224, 0, 1199, 1202, 1203, 1213, 0, 1205,
	0, 1208, 0, 1505, -2, 430, 414, 0, 0, 1264,
	0, 0, 1314, 1318, 1342, 434, 1228, 0, 0, 0,
	0, 153, 804, 830, 0, 0, 0, 956, 963, 0,
	0, 836, 125, 0, 0, 0, 133, 0, 0, 130,
	0, 137, 141, 0, 0, 0, 0, 0, 97, 98,
	99, 0, 104, 0, 105, 0, 0, 0, 0, 0,
	0, 933, 934, 181, 156, 234, 867, 240, 786, 837,
	0, 839, 0, 739, 0, 0, 838, 292, 0, 299,
	0, 888, 0, 0, 911, 938, 951, 0, 0, 0,
	1034, 1036, 0, 1027, 1028, 1156, 1038, 1058, -2, 1057,
	0, 1139, 1066, 1063, 1069, 1070, 0, 348, 188, 0,
	183, 185, 0, 169, 0, 0, 767, 772, 0, 0,
	0, 0, 0, 1049, 1051, 0, 175, 0, 601, 623,
	671, 703, 791, 0, 0, 705, 0, 0, 1159, 1146,
	1147, 1144, 963, 1407, 1411, 0, 0, 0, 1413, -2,
	0, 1435, -2, -2, 1642, 1694, 1484, 1139, 1506, 1508,
	1495, 1688, 1359, 0, 1593, 1590, 0, 1577, 1530, 1531,
	0, 0, 1534, 1536, 1537, 1538, 1298, 1291, 1290, 1667,
	0, 0, 0, 0, 1568, 1124, 1582, 0, 0, 1181,
	1582, 1582, 1220, 0, 1222, 1189, 1182, 0, 1761, 1215,
	1207, 0, 0, 1258, 1263, 0, 1269, 1313, 119, 120,
	122, 0, 805, 0, 808, 0, 0, 0, 0, 815,
	816, 0, 0, 0, 0, 0, 825, 853, 863, 0,
	1148, 0, 0, 0, 127, 147, 0, 0, 975, 0,
	0, 152, 152, 0, 0, 966, 0, 0, 0, 0,
	107, 0, 0, 968, 970, 0, 0, 972, 0, 794,
	0, 849, 841, 842, 843, 0, 848, 850, 0, 0,
	752, 0, 748, 0, 0, 741, 765, 738, 0, 297,
	885, 919, 867, 0, 0, 0, 0, 0, 1024, 1036,
	0, 1029, 1030, 1060, 1155, 0, 0, 0, 1046, 1156,
	0, 190, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 473, 475, 0, 0, 481, 790, 0,
	0, 0, 0, 1145, 1415, -2, -2, 1436, 0, 1762,
	1764, 1139, 0, 1579, 0, 0, -2, 0, 0, 0,
	1110, 0, 1172, 1170, 1111, 1112, 1241, 0, 1210, 0,
	1265, 124, 0, 809, 810, 1745, 812, 0, 814, 817,
	0, 820, 1785, 0, 824, 832, 854, 0, 786, 0,
	859, 860, 861, 957, 958, 865, 0, 126, 128, 146,
	960, 0, 129, 136, 0, 0, 83, 0, 0, 1837,
	110, 108, 106, 85, 0, 0, 738, 793, 0, 840,
	0, 851, 852, 742, 0, 740, 0, 0, 0, 0,
	0, 298, 301, 0, 304, 0, 0, 950, 0, 0,
	0, 0, 1031, 1032, 313, 0, 0, 0, 1060, 1071,
	168, 0, 0, 773, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 774, 865, 0, 0, 829, 0, 173,
	0, 477, 0, 479, 0, 704, 706, 0, 0, 1507,
	1597, 0, 1532, 1533, -2, 0, 1473, 1581, 1583, 0,
	1183, 1259, 807, 811, 0, 0, 0, 871, 0, 0,
	0, 857, 858, 794, 0, 786, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 742, 0,
	0, 750, 0, 753, 0, 749, 746, 747, 786, 0,
	302, 303, 0, 0, 951, 0, 0, 1033, 1034, 0,
	1053, 1054, 1056, 1061, 0, 0, 863, 865, 828, 0,
	476, 0, 0, 709, 710, 0, 0, 0, 0, 1592,
	1474, 0, 0, 0, 0, 819, 876, 0, 0, 0,
	855, 856, 853, 0, 834, 0, 867, 131, 0, 959,
	865, 0, 798, 0, 0, 801, 0, 0, 111, 1837,
	109, 0, 736, 0, 0, 845, 847, 0, 754, 794,
	752, 921, 865, 0, 863, 0, 1025, 0, 1055, 191,
	191, 786, 863, 191, 478, 480, 1589, 1609, 1598, -2,
	2038, 1841, 0, 1609, 1609, 1584, 1585, 0, 0, 821,
	872, 873, 0, 868, 869, 870, 1784, 822, 823, 833,
	862, 0, 871, 148, 786, 795, 0, 0, 796, 0,
	0, 114, 0, 116, 0, 844, 0, 0, 0, 0,
	738, 742, 863, 0, 786, 0, 1256, 170, 171, 794,
	786, 172, 1594, 0, 0, 1600, 1601, 1602, 1603, 1604,
	1595, 1596, 813, 0, 874, 0, 875, 0, 0, 0,
	0, 876, 134, 799, 0, 802, 0, 112, 0, 846,
	743, 0, 745, 742, 751, 786, 0, 794, 0, 1052,
	826, 794, 0, 1606, 1607, 0, 0, 0, 877, 0,
	880, 881, 0, 878, 0, 853, 0, 0, 789, 744,
	737, 794, 865, 948, 863, 827, 1605, 1608, 1599, 818,
	879, 882, 883, 864, 835, 0, 0, 785, 787, 788,
	948, 863, 945, 0, 786, 794, 0, 943, 786, 949,
	794, 800, 0, 794, 948, 0, 948, 946, 0, 944,
	794, 803,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 470, 3, 476, 471, 3,
	481, 482, 474, 472, 486, 473, 483, 475, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 489, 3,
	462, 464, 463, 467, 485, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 479, 3, 480, 477, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 487, 469, 488, 465,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 466,
	57805, 468, 57806, 478, 57807, 484, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1146
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1151
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1155
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1156
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1169
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1279
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1294
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1316
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1335
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1367
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1371
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1381
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1411
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1415
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1421
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1429
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1453
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1471
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1490
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1498
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1507
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1512
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1518
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1547
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1557
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1577
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1583
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1609
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1646
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1717
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1727
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1734
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1738
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1753
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1771
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1783
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1791
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1909
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1913
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1916
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1920
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1930
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1940
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1977
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1986
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1992
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2002
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2012
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2016
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2032
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2043
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2089
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2103
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2113
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2127
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2128
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2130
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2172
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2237
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2256
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2276
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2277
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2282
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2303
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2307
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2310
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2314
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2317
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2324
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2337
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2339
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2340
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2346
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2382
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2391
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2410
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2425
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2445
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2453
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2473
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2488
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2515
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2516
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2527
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2529
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2530
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2541
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2547
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2549
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2561
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2635
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2661
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2666
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2698
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2722
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2730
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2745
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "DELETE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2750
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2751
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2752
		{
			return helpWith(sqllex, "INSERT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2760
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2765
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2766
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2767
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "DELETE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2773
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2774
		{
			return helpWith(sqllex, "INSERT")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2780
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2785
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2807
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2815
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2819
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2823
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2840
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2848
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2878
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2881
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2905
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2912
		{
			return helpWith(sqllex, "GRANT")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2948
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2952
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2962
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2980
		{
			return helpWith(sqllex, "RESET")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2981
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2996
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3026
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3027
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3028
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3034
		{
			return helpWith(sqllex, "USE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3065
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3068
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3094
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3205
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3248
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3253
		{
			return unimplemented(sqllex, "set from current")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3267
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3274
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3316
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = tree.Low
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = tree.Normal
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.High
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3371
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3384
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3400
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3401
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3402
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3405
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3408
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3409
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3410
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3413
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3414
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3421
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3422
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3423
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3430
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3431
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3434
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3438
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3443
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3448
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.str = "client_encoding"
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.str = "timezone"
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3494
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3498
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3502
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3521
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3546
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3555
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3563
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3621
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3625
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3628
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3636
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3652
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3660
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3684
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3690
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3693
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3720
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3722
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3725
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = true
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = false
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3750
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3753
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3770
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3778
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3792
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3795
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3797
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3801
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3804
		{
			sqlVAL.union.val = true
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = false
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3816
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3821
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3849
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3852
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = true
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = false
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3867
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3870
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3877
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3884
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3891
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3895
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3905
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3913
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3918
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3923
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3939
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3943
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3956
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3959
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3967
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3974
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3982
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3990
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3998
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4005
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4012
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4016
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4027
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4041
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4050
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4059
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4062
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4066
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4198
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4202
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4206
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4249
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4267
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4322
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4361
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4376
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = nil
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{

			sqlVAL.union.val = nil
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4403
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4408
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4418
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4423
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4428
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4435
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4439
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4455
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4468
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4482
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4483
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = true
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4503
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = false
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4512
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4556
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4567
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4570
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4574
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4580
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4596
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4601
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4606
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.str = ""
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4632
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4639
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, types.IsSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4733
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4737
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4741
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4759
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4771
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4782
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4790
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4804
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4815
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4832
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4855
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4907
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4918
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4945
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4984
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5025
		{
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5026
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5027
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5030
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5048
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5102
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5115
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5127
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5131
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5186
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5195
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5203
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5214
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5219
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5229
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5232
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5234
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5242
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5244
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5246
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5254
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5265
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5275
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5282
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5303
		{
			sqlVAL.union.val = true
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5307
		{

			sqlVAL.union.val = true
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = false
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5322
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5336
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5348
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5359
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5371
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5375
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5383
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5387
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5397
		{
			sqlVAL.union.val = nil
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5412
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5413
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5419
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5421
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5423
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5425
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5429
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5445
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5461
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5478
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5493
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5508
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5511
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5512
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5516
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5531
		{
			sqlVAL.union.val = false
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = true
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = false
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.union.val = true
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = false
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5570
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5593
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = tree.Descending
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5617
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5623
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5631
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5637
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5645
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5651
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5659
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5669
		{
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5672
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5673
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5706
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5717
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5721
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5722
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5723
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5739
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5742
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5744
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5747
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5757
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5760
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5765
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5774
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5775
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5776
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5796
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5797
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5801
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5825
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5838
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5840
		{
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5844
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5849
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5853
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5863
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5869
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5875
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5909
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5913
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.str = ""
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.str = ""
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.str = ""
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5943
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5947
		{
			sqlVAL.str = ""
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5952
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5953
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5979
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5997
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6001
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6010
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6029
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6076
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6077
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6085
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6111
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6123
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6155
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6202
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6208
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6212
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6255
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6261
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6265
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6269
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6305
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6340
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6341
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6342
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6403
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6447
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6463
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6493
		{
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6497
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6501
		{
			sqlVAL.union.val = nil
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6506
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6507
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = true
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = false
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = false
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = true
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6536
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6537
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6567
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6588
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6593
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6605
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6609
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6613
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6622
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6655
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6711
		{
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6715
		{
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6736
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6768
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6770
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6785
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6787
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6807
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6828
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6840
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6859
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6867
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6898
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6908
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6943
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6954
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6984
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7017
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7019
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = nil
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7038
		{
			sqlVAL.union.val = true
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7042
		{
			sqlVAL.union.val = false
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.str = tree.AstFull
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.str = tree.AstRight
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7130
		{
			sqlVAL.str = tree.AstInner
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7136
		{
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7137
		{
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.str = tree.AstHash
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.str = ""
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7199
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7222
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7228
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7234
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7244
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7273
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7286
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7294
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7295
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7313
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7323
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7336
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7340
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7346
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error(fmt.Sprintf("type %q does not exist", sqlDollar[1].str))
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7382
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7389
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7390
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = types.Geography
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7448
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = nil
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7463
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = types.Int2
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = types.Int
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = types.Float4
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = types.Float
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7491
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7499
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7507
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = types.Bool
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = types.Float
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7540
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7546
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7568
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = types.String
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7607
		{
			sqlVAL.union.val = true
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = false
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = types.Date
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7617
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7625
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7639
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7648
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7656
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7673
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = true
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = false
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7685
		{
			sqlVAL.union.val = false
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = types.Interval
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7697
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7781
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = nil
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7826
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7886
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7899
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7903
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7951
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7959
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7979
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7987
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8130
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8164
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8168
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8196
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8338
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8360
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8396
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8417
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8443
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8452
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8467
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8497
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8508
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8509
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8533
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {
					typ, ok, unimp := types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							sqllex.Error(fmt.Sprintf("type %q does not exist", typName))
							return 1
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				return unimplemented(sqllex, "generic-type-name prepended casts")
			}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8587
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8669
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8673
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8707
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8712
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8718
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8721
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8730
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8739
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8748
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8753
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8755
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8758
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8763
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8768
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8770
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8774
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8777
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8778
		{
			return unimplemented(sqllex, "treat")
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8799
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8801
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8804
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8809
		{
			return unimplemented(sqllex, "within group")
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8810
		{
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8818
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8835
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8845
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8861
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8868
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.str = ""
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8904
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8912
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8920
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8934
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8947
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8987
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9003
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9015
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9044
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9056
		{
			sqlVAL.union.val = tree.Any
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9060
		{
			sqlVAL.union.val = tree.Some
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = tree.All
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9069
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9070
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9071
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9072
		{
			sqlVAL.union.val = tree.Div
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9073
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9076
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9077
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9078
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9079
		{
			sqlVAL.union.val = tree.LT
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9080
		{
			sqlVAL.union.val = tree.GT
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9081
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9082
		{
			sqlVAL.union.val = tree.LE
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9083
		{
			sqlVAL.union.val = tree.GE
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9084
		{
			sqlVAL.union.val = tree.NE
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9088
		{
			sqlVAL.union.val = tree.Like
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9089
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9090
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9114
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9118
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9124
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9128
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9132
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9143
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9147
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9153
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9157
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9164
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9180
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9190
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9194
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9200
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9210
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9214
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9237
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9241
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9245
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9251
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9258
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9262
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9279
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9283
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9287
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9291
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9295
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9301
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9307
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9313
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9317
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9321
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9327
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9339
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9346
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9356
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9362
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9366
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9373
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9379
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9383
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9390
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9396
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9405
		{
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9406
		{
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9410
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9420
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9429
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9433
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9437
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9445
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9455
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9478
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9486
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9509
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9518
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9522
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9526
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9530
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9536
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9555
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9559
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9571
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9575
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9584
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9595
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9604
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9612
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9624
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9725
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9732
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9736
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9740
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1764:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9754
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9758
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9762
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9775
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9784
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9802
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9815
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9822
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9847
		{
			sqlVAL.str = ""
		}
	case 1784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9853
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9857
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
