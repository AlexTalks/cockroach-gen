// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:644
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10446

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1140,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	195, 967,
	207, 967,
	222, 250,
	315, 250,
	324, 764,
	352, 250,
	361, 764,
	397, 764,
	421, 250,
	446, 764,
	-2, 0,
	-1, 78,
	222, 254,
	-2, 0,
	-1, 79,
	114, 1140,
	201, 1140,
	431, 1140,
	432, 1140,
	-2, 0,
	-1, 91,
	127, 1114,
	144, 1114,
	157, 1114,
	204, 1114,
	234, 1114,
	276, 1114,
	286, 1114,
	426, 1114,
	-2, 1085,
	-1, 123,
	134, 673,
	221, 673,
	318, 653,
	366, 653,
	414, 673,
	-2, 0,
	-1, 124,
	4, 1142,
	21, 1142,
	22, 1142,
	23, 1142,
	24, 1142,
	25, 1142,
	27, 1142,
	28, 1142,
	34, 1142,
	39, 1142,
	40, 1142,
	41, 1142,
	42, 1142,
	43, 1142,
	44, 1142,
	45, 1142,
	47, 1142,
	48, 1142,
	49, 1142,
	51, 1142,
	52, 1142,
	53, 1142,
	54, 1142,
	55, 1142,
	58, 1142,
	59, 1142,
	60, 1142,
	61, 1142,
	63, 1142,
	64, 1142,
	65, 1142,
	69, 1142,
	70, 1142,
	71, 1142,
	72, 1142,
	73, 1142,
	74, 1142,
	75, 1142,
	78, 1142,
	79, 1142,
	80, 1142,
	81, 1142,
	83, 1142,
	85, 1142,
	86, 1142,
	87, 1142,
	89, 1142,
	91, 1142,
	92, 1142,
	100, 1142,
	101, 1142,
	102, 1142,
	103, 1142,
	105, 1142,
	106, 1142,
	107, 1142,
	109, 1142,
	110, 1142,
	111, 1142,
	113, 1142,
	114, 1142,
	116, 1142,
	119, 1142,
	120, 1142,
	121, 1142,
	123, 1142,
	125, 1142,
	126, 1142,
	128, 1142,
	129, 1142,
	130, 1142,
	131, 1142,
	132, 1142,
	133, 1142,
	134, 1142,
	135, 1142,
	136, 1142,
	137, 1142,
	138, 1142,
	139, 1142,
	140, 1142,
	141, 1142,
	143, 1142,
	149, 1142,
	150, 1142,
	151, 1142,
	152, 1142,
	156, 1142,
	158, 1142,
	162, 1142,
	163, 1142,
	164, 1142,
	165, 1142,
	166, 1142,
	167, 1142,
	169, 1142,
	170, 1142,
	172, 1142,
	173, 1142,
	175, 1142,
	176, 1142,
	177, 1142,
	178, 1142,
	179, 1142,
	180, 1142,
	181, 1142,
	182, 1142,
	183, 1142,
	185, 1142,
	186, 1142,
	188, 1142,
	189, 1142,
	190, 1142,
	191, 1142,
	195, 1142,
	196, 1142,
	197, 1142,
	198, 1142,
	201, 1142,
	202, 1142,
	203, 1142,
	205, 1142,
	207, 1142,
	209, 1142,
	211, 1142,
	212, 1142,
	213, 1142,
	215, 1142,
	219, 1142,
	220, 1142,
	221, 1142,
	222, 1142,
	223, 1142,
	225, 1142,
	226, 1142,
	228, 1142,
	229, 1142,
	231, 1142,
	232, 1142,
	235, 1142,
	236, 1142,
	237, 1142,
	240, 1142,
	241, 1142,
	242, 1142,
	243, 1142,
	245, 1142,
	246, 1142,
	247, 1142,
	248, 1142,
	249, 1142,
	250, 1142,
	251, 1142,
	252, 1142,
	253, 1142,
	254, 1142,
	255, 1142,
	257, 1142,
	259, 1142,
	260, 1142,
	261, 1142,
	262, 1142,
	263, 1142,
	265, 1142,
	267, 1142,
	269, 1142,
	271, 1142,
	272, 1142,
	273, 1142,
	274, 1142,
	275, 1142,
	278, 1142,
	281, 1142,
	282, 1142,
	283, 1142,
	284, 1142,
	287, 1142,
	288, 1142,
	289, 1142,
	291, 1142,
	293, 1142,
	294, 1142,
	295, 1142,
	296, 1142,
	297, 1142,
	298, 1142,
	299, 1142,
	300, 1142,
	301, 1142,
	302, 1142,
	304, 1142,
	305, 1142,
	306, 1142,
	307, 1142,
	308, 1142,
	309, 1142,
	310, 1142,
	311, 1142,
	312, 1142,
	314, 1142,
	316, 1142,
	317, 1142,
	318, 1142,
	319, 1142,
	320, 1142,
	321, 1142,
	322, 1142,
	323, 1142,
	324, 1142,
	325, 1142,
	332, 1142,
	334, 1142,
	335, 1142,
	336, 1142,
	337, 1142,
	338, 1142,
	339, 1142,
	340, 1142,
	341, 1142,
	343, 1142,
	345, 1142,
	346, 1142,
	347, 1142,
	348, 1142,
	349, 1142,
	350, 1142,
	352, 1142,
	353, 1142,
	354, 1142,
	355, 1142,
	356, 1142,
	357, 1142,
	358, 1142,
	359, 1142,
	361, 1142,
	362, 1142,
	363, 1142,
	364, 1142,
	365, 1142,
	366, 1142,
	368, 1142,
	369, 1142,
	370, 1142,
	371, 1142,
	372, 1142,
	374, 1142,
	375, 1142,
	376, 1142,
	378, 1142,
	380, 1142,
	381, 1142,
	382, 1142,
	383, 1142,
	384, 1142,
	385, 1142,
	386, 1142,
	387, 1142,
	388, 1142,
	389, 1142,
	390, 1142,
	391, 1142,
	392, 1142,
	394, 1142,
	395, 1142,
	396, 1142,
	398, 1142,
	399, 1142,
	400, 1142,
	401, 1142,
	402, 1142,
	403, 1142,
	404, 1142,
	406, 1142,
	407, 1142,
	408, 1142,
	409, 1142,
	410, 1142,
	412, 1142,
	414, 1142,
	415, 1142,
	416, 1142,
	417, 1142,
	418, 1142,
	420, 1142,
	421, 1142,
	422, 1142,
	424, 1142,
	425, 1142,
	428, 1142,
	429, 1142,
	430, 1142,
	431, 1142,
	432, 1142,
	433, 1142,
	434, 1142,
	436, 1142,
	439, 1142,
	440, 1142,
	441, 1142,
	442, 1142,
	443, 1142,
	444, 1142,
	446, 1142,
	447, 1142,
	448, 1142,
	453, 1142,
	454, 1142,
	455, 1142,
	456, 1142,
	457, 1142,
	458, 1142,
	-2, 0,
	-1, 125,
	1, 1019,
	211, 1019,
	314, 1019,
	322, 1019,
	461, 1019,
	484, 1019,
	-2, 0,
	-1, 127,
	1, 1019,
	484, 1019,
	-2, 0,
	-1, 128,
	1, 1019,
	484, 1019,
	-2, 0,
	-1, 129,
	1, 1019,
	411, 1019,
	484, 1019,
	-2, 0,
	-1, 155,
	127, 1113,
	144, 1113,
	157, 1113,
	204, 1113,
	234, 1113,
	276, 1113,
	286, 1113,
	426, 1113,
	-2, 1088,
	-1, 188,
	4, 1149,
	5, 1149,
	6, 1149,
	7, 1149,
	8, 1149,
	9, 1149,
	10, 1149,
	21, 1149,
	22, 1149,
	23, 1149,
	24, 1149,
	25, 1149,
	27, 1149,
	28, 1149,
	34, 1149,
	35, 1149,
	39, 1149,
	40, 1149,
	41, 1149,
	42, 1149,
	43, 1149,
	44, 1149,
	45, 1149,
	47, 1149,
	48, 1149,
	49, 1149,
	51, 1149,
	52, 1149,
	53, 1149,
	54, 1149,
	55, 1149,
	56, 1149,
	57, 1149,
	58, 1149,
	59, 1149,
	60, 1149,
	61, 1149,
	63, 1149,
	64, 1149,
	65, 1149,
	67, 1149,
	69, 1149,
	70, 1149,
	71, 1149,
	72, 1149,
	73, 1149,
	74, 1149,
	75, 1149,
	78, 1149,
	79, 1149,
	80, 1149,
	81, 1149,
	83, 1149,
	85, 1149,
	86, 1149,
	87, 1149,
	89, 1149,
	90, 1149,
	91, 1149,
	92, 1149,
	93, 1149,
	94, 1149,
	95, 1149,
	96, 1149,
	97, 1149,
	98, 1149,
	99, 1149,
	100, 1149,
	101, 1149,
	102, 1149,
	103, 1149,
	104, 1149,
	105, 1149,
	106, 1149,
	107, 1149,
	108, 1149,
	109, 1149,
	110, 1149,
	111, 1149,
	113, 1149,
	114, 1149,
	116, 1149,
	119, 1149,
	120, 1149,
	121, 1149,
	123, 1149,
	125, 1149,
	126, 1149,
	128, 1149,
	129, 1149,
	130, 1149,
	131, 1149,
	132, 1149,
	133, 1149,
	134, 1149,
	135, 1149,
	136, 1149,
	137, 1149,
	138, 1149,
	139, 1149,
	140, 1149,
	141, 1149,
	142, 1149,
	143, 1149,
	149, 1149,
	150, 1149,
	151, 1149,
	152, 1149,
	156, 1149,
	158, 1149,
	161, 1149,
	162, 1149,
	163, 1149,
	164, 1149,
	165, 1149,
	166, 1149,
	167, 1149,
	169, 1149,
	170, 1149,
	172, 1149,
	173, 1149,
	175, 1149,
	176, 1149,
	177, 1149,
	178, 1149,
	179, 1149,
	180, 1149,
	181, 1149,
	182, 1149,
	183, 1149,
	184, 1149,
	185, 1149,
	186, 1149,
	188, 1149,
	189, 1149,
	190, 1149,
	191, 1149,
	195, 1149,
	196, 1149,
	197, 1149,
	198, 1149,
	200, 1149,
	201, 1149,
	202, 1149,
	203, 1149,
	205, 1149,
	207, 1149,
	208, 1149,
	209, 1149,
	210, 1149,
	211, 1149,
	212, 1149,
	213, 1149,
	214, 1149,
	215, 1149,
	219, 1149,
	220, 1149,
	221, 1149,
	222, 1149,
	223, 1149,
	225, 1149,
	226, 1149,
	228, 1149,
	229, 1149,
	230, 1149,
	231, 1149,
	232, 1149,
	233, 1149,
	235, 1149,
	236, 1149,
	237, 1149,
	238, 1149,
	239, 1149,
	240, 1149,
	241, 1149,
	242, 1149,
	243, 1149,
	245, 1149,
	246, 1149,
	247, 1149,
	248, 1149,
	249, 1149,
	250, 1149,
	251, 1149,
	252, 1149,
	253, 1149,
	254, 1149,
	255, 1149,
	257, 1149,
	258, 1149,
	259, 1149,
	260, 1149,
	261, 1149,
	262, 1149,
	263, 1149,
	264, 1149,
	265, 1149,
	266, 1149,
	267, 1149,
	268, 1149,
	269, 1149,
	270, 1149,
	271, 1149,
	272, 1149,
	273, 1149,
	274, 1149,
	275, 1149,
	278, 1149,
	282, 1149,
	283, 1149,
	284, 1149,
	287, 1149,
	288, 1149,
	289, 1149,
	290, 1149,
	291, 1149,
	292, 1149,
	293, 1149,
	294, 1149,
	295, 1149,
	296, 1149,
	297, 1149,
	298, 1149,
	299, 1149,
	300, 1149,
	301, 1149,
	302, 1149,
	304, 1149,
	305, 1149,
	306, 1149,
	307, 1149,
	308, 1149,
	309, 1149,
	310, 1149,
	311, 1149,
	312, 1149,
	314, 1149,
	316, 1149,
	317, 1149,
	318, 1149,
	319, 1149,
	320, 1149,
	321, 1149,
	322, 1149,
	323, 1149,
	324, 1149,
	325, 1149,
	332, 1149,
	334, 1149,
	335, 1149,
	336, 1149,
	337, 1149,
	338, 1149,
	339, 1149,
	340, 1149,
	341, 1149,
	343, 1149,
	344, 1149,
	345, 1149,
	346, 1149,
	347, 1149,
	348, 1149,
	349, 1149,
	350, 1149,
	352, 1149,
	353, 1149,
	354, 1149,
	355, 1149,
	356, 1149,
	357, 1149,
	358, 1149,
	359, 1149,
	361, 1149,
	362, 1149,
	363, 1149,
	364, 1149,
	365, 1149,
	366, 1149,
	367, 1149,
	368, 1149,
	369, 1149,
	370, 1149,
	371, 1149,
	372, 1149,
	373, 1149,
	374, 1149,
	375, 1149,
	376, 1149,
	378, 1149,
	380, 1149,
	381, 1149,
	382, 1149,
	383, 1149,
	384, 1149,
	385, 1149,
	386, 1149,
	387, 1149,
	388, 1149,
	389, 1149,
	390, 1149,
	391, 1149,
	392, 1149,
	394, 1149,
	395, 1149,
	396, 1149,
	398, 1149,
	399, 1149,
	400, 1149,
	401, 1149,
	402, 1149,
	403, 1149,
	404, 1149,
	406, 1149,
	407, 1149,
	408, 1149,
	409, 1149,
	410, 1149,
	412, 1149,
	414, 1149,
	415, 1149,
	416, 1149,
	417, 1149,
	418, 1149,
	419, 1149,
	420, 1149,
	421, 1149,
	422, 1149,
	424, 1149,
	425, 1149,
	427, 1149,
	428, 1149,
	429, 1149,
	430, 1149,
	431, 1149,
	432, 1149,
	433, 1149,
	434, 1149,
	435, 1149,
	436, 1149,
	439, 1149,
	440, 1149,
	441, 1149,
	442, 1149,
	443, 1149,
	444, 1149,
	446, 1149,
	447, 1149,
	448, 1149,
	453, 1149,
	454, 1149,
	455, 1149,
	456, 1149,
	457, 1149,
	458, 1149,
	459, 1149,
	465, 1149,
	472, 1149,
	473, 1149,
	474, 1149,
	481, 1149,
	485, 1149,
	-2, 0,
	-1, 567,
	160, 1847,
	411, 1847,
	464, 1847,
	483, 1847,
	-2, 0,
	-1, 568,
	160, 1926,
	411, 1926,
	464, 1926,
	483, 1926,
	-2, 0,
	-1, 569,
	160, 1835,
	411, 1835,
	464, 1835,
	483, 1835,
	-2, 0,
	-1, 571,
	160, 2015,
	411, 2015,
	464, 2015,
	483, 2015,
	-2, 0,
	-1, 573,
	160, 2044,
	411, 2044,
	464, 2044,
	483, 2044,
	-2, 0,
	-1, 580,
	160, 1941,
	411, 1941,
	464, 1941,
	483, 1941,
	-2, 511,
	-1, 608,
	483, 1791,
	486, 1791,
	-2, 726,
	-1, 609,
	483, 1793,
	486, 1793,
	-2, 727,
	-1, 610,
	483, 1792,
	486, 1792,
	-2, 728,
	-1, 611,
	486, 1726,
	-2, 729,
	-1, 653,
	446, 942,
	-2, 765,
	-1, 691,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	58, 965,
	59, 965,
	60, 965,
	61, 965,
	63, 965,
	64, 965,
	65, 965,
	69, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	78, 965,
	79, 965,
	80, 965,
	81, 965,
	83, 965,
	85, 965,
	86, 965,
	87, 965,
	89, 965,
	91, 965,
	92, 965,
	100, 965,
	101, 965,
	102, 965,
	103, 965,
	105, 965,
	106, 965,
	107, 965,
	109, 965,
	110, 965,
	111, 965,
	113, 965,
	114, 965,
	116, 965,
	119, 965,
	120, 965,
	121, 965,
	123, 965,
	125, 965,
	126, 965,
	128, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	143, 965,
	149, 965,
	150, 965,
	151, 965,
	152, 965,
	156, 965,
	158, 965,
	162, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	169, 965,
	170, 965,
	172, 965,
	173, 965,
	175, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	185, 965,
	186, 965,
	188, 965,
	189, 965,
	190, 965,
	191, 965,
	195, 965,
	196, 965,
	197, 965,
	198, 965,
	201, 965,
	202, 965,
	203, 965,
	205, 965,
	207, 965,
	209, 965,
	211, 965,
	212, 965,
	213, 965,
	215, 965,
	219, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	225, 965,
	226, 965,
	228, 965,
	229, 965,
	231, 965,
	232, 965,
	235, 965,
	236, 965,
	237, 965,
	240, 965,
	241, 965,
	242, 965,
	243, 965,
	245, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	257, 965,
	259, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	265, 965,
	267, 965,
	269, 965,
	271, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	278, 965,
	282, 965,
	283, 965,
	284, 965,
	287, 965,
	288, 965,
	289, 965,
	291, 965,
	293, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	304, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	314, 965,
	316, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	332, 965,
	334, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	343, 965,
	345, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	352, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	361, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	368, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	374, 965,
	375, 965,
	376, 965,
	378, 965,
	380, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	394, 965,
	395, 965,
	396, 965,
	398, 965,
	399, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	406, 965,
	407, 965,
	408, 965,
	409, 965,
	410, 965,
	412, 965,
	414, 965,
	415, 965,
	416, 965,
	417, 965,
	418, 965,
	420, 965,
	421, 965,
	422, 965,
	424, 965,
	425, 965,
	428, 965,
	429, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	436, 965,
	439, 965,
	440, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	446, 965,
	447, 965,
	448, 965,
	453, 965,
	454, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	-2, 0,
	-1, 756,
	318, 654,
	366, 654,
	-2, 0,
	-1, 757,
	318, 653,
	366, 653,
	-2, 601,
	-1, 761,
	1, 683,
	480, 683,
	482, 683,
	484, 683,
	-2, 0,
	-1, 762,
	1, 725,
	157, 725,
	480, 725,
	482, 725,
	484, 725,
	-2, 0,
	-1, 770,
	1, 657,
	480, 657,
	482, 657,
	484, 657,
	-2, 0,
	-1, 773,
	1, 683,
	480, 683,
	482, 683,
	484, 683,
	-2, 0,
	-1, 774,
	1, 685,
	480, 685,
	482, 685,
	484, 685,
	-2, 0,
	-1, 775,
	1, 688,
	480, 688,
	482, 688,
	484, 688,
	-2, 0,
	-1, 780,
	1, 704,
	480, 704,
	482, 704,
	484, 704,
	-2, 0,
	-1, 781,
	1, 706,
	480, 706,
	482, 706,
	484, 706,
	-2, 0,
	-1, 825,
	144, 1151,
	157, 1151,
	234, 1151,
	276, 1151,
	-2, 1092,
	-1, 839,
	144, 1150,
	157, 1150,
	234, 1150,
	276, 1150,
	-2, 1089,
	-1, 863,
	483, 1790,
	-2, 519,
	-1, 891,
	5, 1782,
	481, 1780,
	-2, 1771,
	-1, 899,
	5, 1803,
	481, 1800,
	-2, 1791,
	-1, 900,
	5, 1804,
	481, 1801,
	-2, 1792,
	-1, 908,
	483, 1788,
	-2, 1770,
	-1, 909,
	481, 2122,
	-2, 1789,
	-1, 932,
	481, 2121,
	-2, 1805,
	-1, 933,
	5, 1312,
	-2, 2092,
	-1, 934,
	5, 1313,
	-2, 2093,
	-1, 935,
	5, 1314,
	-2, 2107,
	-1, 936,
	5, 1315,
	-2, 2072,
	-1, 937,
	5, 1316,
	-2, 2105,
	-1, 938,
	5, 1324,
	-2, 2084,
	-1, 939,
	5, 1311,
	-2, 2080,
	-1, 940,
	5, 1311,
	-2, 2079,
	-1, 941,
	5, 1311,
	-2, 2098,
	-1, 942,
	5, 1322,
	-2, 2074,
	-1, 943,
	5, 1327,
	-2, 2073,
	-1, 944,
	5, 1329,
	-2, 2117,
	-1, 947,
	5, 1351,
	-2, 2110,
	-1, 948,
	5, 1343,
	-2, 2111,
	-1, 949,
	5, 1351,
	-2, 2112,
	-1, 950,
	5, 1347,
	-2, 2113,
	-1, 951,
	5, 1298,
	-2, 2085,
	-1, 952,
	5, 1299,
	-2, 2086,
	-1, 979,
	5, 1334,
	-2, 2118,
	-1, 980,
	5, 1335,
	-2, 2108,
	-1, 981,
	5, 1336,
	447, 1336,
	-2, 2075,
	-1, 982,
	5, 1337,
	447, 1337,
	-2, 2076,
	-1, 1019,
	481, 1800,
	-2, 1791,
	-1, 1020,
	481, 1801,
	-2, 1792,
	-1, 1049,
	160, 2044,
	411, 2044,
	464, 2044,
	483, 2044,
	-2, 0,
	-1, 1052,
	1, 497,
	484, 497,
	-2, 1027,
	-1, 1177,
	334, 1766,
	474, 1766,
	-2, 1764,
	-1, 1189,
	485, 1766,
	-2, 1767,
	-1, 1190,
	1, 939,
	480, 939,
	482, 939,
	484, 939,
	-2, 1138,
	-1, 1238,
	324, 764,
	446, 764,
	-2, 249,
	-1, 1261,
	1, 939,
	480, 939,
	482, 939,
	484, 939,
	-2, 1138,
	-1, 1268,
	4, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	28, 965,
	34, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	47, 965,
	48, 965,
	49, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	58, 965,
	59, 965,
	60, 965,
	61, 965,
	63, 965,
	64, 965,
	65, 965,
	69, 965,
	70, 965,
	71, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	78, 965,
	79, 965,
	80, 965,
	81, 965,
	83, 965,
	85, 965,
	86, 965,
	87, 965,
	89, 965,
	91, 965,
	92, 965,
	100, 965,
	101, 965,
	102, 965,
	103, 965,
	105, 965,
	106, 965,
	107, 965,
	109, 965,
	110, 965,
	111, 965,
	113, 965,
	114, 965,
	116, 965,
	119, 965,
	120, 965,
	121, 965,
	123, 965,
	125, 965,
	126, 965,
	128, 965,
	129, 965,
	130, 965,
	131, 965,
	132, 965,
	133, 965,
	134, 965,
	135, 965,
	136, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	149, 965,
	150, 965,
	151, 965,
	152, 965,
	156, 965,
	158, 965,
	162, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	169, 965,
	170, 965,
	172, 965,
	173, 965,
	175, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	180, 965,
	181, 965,
	182, 965,
	183, 965,
	185, 965,
	186, 965,
	188, 965,
	189, 965,
	190, 965,
	191, 965,
	196, 965,
	197, 965,
	198, 965,
	201, 965,
	202, 965,
	203, 965,
	205, 965,
	207, 965,
	209, 965,
	211, 965,
	212, 965,
	213, 965,
	215, 965,
	219, 965,
	220, 965,
	221, 965,
	222, 965,
	223, 965,
	225, 965,
	226, 965,
	228, 965,
	229, 965,
	231, 965,
	232, 965,
	235, 965,
	236, 965,
	237, 965,
	240, 965,
	241, 965,
	242, 965,
	243, 965,
	245, 965,
	246, 965,
	247, 965,
	248, 965,
	249, 965,
	250, 965,
	251, 965,
	252, 965,
	253, 965,
	254, 965,
	255, 965,
	257, 965,
	259, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	265, 965,
	269, 965,
	271, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	278, 965,
	280, 965,
	282, 965,
	283, 965,
	284, 965,
	287, 965,
	288, 965,
	289, 965,
	291, 965,
	293, 965,
	294, 965,
	295, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	304, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	314, 965,
	316, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	322, 965,
	323, 965,
	324, 965,
	325, 965,
	332, 965,
	334, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	343, 965,
	345, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	352, 965,
	353, 965,
	354, 965,
	355, 965,
	356, 965,
	357, 965,
	358, 965,
	359, 965,
	361, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	368, 965,
	369, 965,
	370, 965,
	371, 965,
	372, 965,
	374, 965,
	375, 965,
	376, 965,
	378, 965,
	380, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	386, 965,
	387, 965,
	388, 965,
	389, 965,
	390, 965,
	391, 965,
	392, 965,
	394, 965,
	395, 965,
	396, 965,
	398, 965,
	399, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	406, 965,
	407, 965,
	408, 965,
	409, 965,
	410, 965,
	412, 965,
	414, 965,
	415, 965,
	416, 965,
	417, 965,
	418, 965,
	420, 965,
	421, 965,
	422, 965,
	424, 965,
	425, 965,
	428, 965,
	429, 965,
	430, 965,
	431, 965,
	432, 965,
	433, 965,
	434, 965,
	436, 965,
	439, 965,
	440, 965,
	441, 965,
	442, 965,
	443, 965,
	444, 965,
	446, 965,
	447, 965,
	448, 965,
	453, 965,
	454, 965,
	455, 965,
	456, 965,
	457, 965,
	458, 965,
	-2, 0,
	-1, 1333,
	1, 372,
	480, 372,
	482, 372,
	484, 372,
	-2, 1112,
	-1, 1336,
	4, 2116,
	11, 2116,
	12, 2116,
	14, 2116,
	15, 2116,
	16, 2116,
	17, 2116,
	18, 2116,
	19, 2116,
	21, 2116,
	22, 2116,
	23, 2116,
	24, 2116,
	25, 2116,
	27, 2116,
	28, 2116,
	31, 2116,
	32, 2116,
	34, 2116,
	36, 2116,
	39, 2116,
	40, 2116,
	41, 2116,
	42, 2116,
	43, 2116,
	44, 2116,
	45, 2116,
	47, 2116,
	48, 2116,
	49, 2116,
	51, 2116,
	52, 2116,
	53, 2116,
	54, 2116,
	55, 2116,
	58, 2116,
	59, 2116,
	60, 2116,
	61, 2116,
	63, 2116,
	64, 2116,
	65, 2116,
	66, 2116,
	69, 2116,
	70, 2116,
	71, 2116,
	72, 2116,
	73, 2116,
	74, 2116,
	75, 2116,
	76, 2116,
	78, 2116,
	79, 2116,
	80, 2116,
	81, 2116,
	83, 2116,
	84, 2116,
	85, 2116,
	86, 2116,
	87, 2116,
	89, 2116,
	90, 2116,
	91, 2116,
	92, 2116,
	100, 2116,
	101, 2116,
	102, 2116,
	103, 2116,
	105, 2116,
	106, 2116,
	107, 2116,
	109, 2116,
	110, 2116,
	111, 2116,
	113, 2116,
	114, 2116,
	116, 2116,
	119, 2116,
	120, 2116,
	121, 2116,
	123, 2116,
	125, 2116,
	126, 2116,
	128, 2116,
	129, 2116,
	130, 2116,
	131, 2116,
	132, 2116,
	133, 2116,
	134, 2116,
	135, 2116,
	136, 2116,
	137, 2116,
	138, 2116,
	139, 2116,
	140, 2116,
	141, 2116,
	145, 2116,
	146, 2116,
	147, 2116,
	148, 2116,
	149, 2116,
	150, 2116,
	151, 2116,
	152, 2116,
	155, 2116,
	156, 2116,
	158, 2116,
	161, 2116,
	162, 2116,
	163, 2116,
	164, 2116,
	165, 2116,
	166, 2116,
	167, 2116,
	169, 2116,
	170, 2116,
	172, 2116,
	173, 2116,
	175, 2116,
	176, 2116,
	177, 2116,
	178, 2116,
	179, 2116,
	180, 2116,
	181, 2116,
	182, 2116,
	183, 2116,
	184, 2116,
	185, 2116,
	186, 2116,
	187, 2116,
	188, 2116,
	189, 2116,
	190, 2116,
	191, 2116,
	193, 2116,
	194, 2116,
	196, 2116,
	197, 2116,
	198, 2116,
	200, 2116,
	201, 2116,
	202, 2116,
	203, 2116,
	205, 2116,
	207, 2116,
	208, 2116,
	209, 2116,
	210, 2116,
	211, 2116,
	212, 2116,
	213, 2116,
	214, 2116,
	215, 2116,
	217, 2116,
	218, 2116,
	219, 2116,
	220, 2116,
	221, 2116,
	222, 2116,
	223, 2116,
	225, 2116,
	226, 2116,
	228, 2116,
	229, 2116,
	230, 2116,
	231, 2116,
	232, 2116,
	233, 2116,
	235, 2116,
	236, 2116,
	237, 2116,
	240, 2116,
	241, 2116,
	242, 2116,
	243, 2116,
	244, 2116,
	245, 2116,
	246, 2116,
	247, 2116,
	248, 2116,
	249, 2116,
	250, 2116,
	251, 2116,
	252, 2116,
	253, 2116,
	254, 2116,
	255, 2116,
	257, 2116,
	258, 2116,
	259, 2116,
	260, 2116,
	261, 2116,
	262, 2116,
	263, 2116,
	265, 2116,
	268, 2116,
	269, 2116,
	271, 2116,
	272, 2116,
	273, 2116,
	274, 2116,
	275, 2116,
	278, 2116,
	282, 2116,
	283, 2116,
	284, 2116,
	285, 2116,
	287, 2116,
	288, 2116,
	289, 2116,
	291, 2116,
	293, 2116,
	294, 2116,
	295, 2116,
	296, 2116,
	297, 2116,
	298, 2116,
	299, 2116,
	300, 2116,
	301, 2116,
	302, 2116,
	304, 2116,
	305, 2116,
	306, 2116,
	307, 2116,
	308, 2116,
	309, 2116,
	310, 2116,
	311, 2116,
	312, 2116,
	314, 2116,
	316, 2116,
	317, 2116,
	318, 2116,
	319, 2116,
	320, 2116,
	321, 2116,
	322, 2116,
	323, 2116,
	324, 2116,
	325, 2116,
	332, 2116,
	333, 2116,
	334, 2116,
	335, 2116,
	336, 2116,
	337, 2116,
	338, 2116,
	339, 2116,
	340, 2116,
	341, 2116,
	343, 2116,
	344, 2116,
	345, 2116,
	346, 2116,
	347, 2116,
	348, 2116,
	349, 2116,
	350, 2116,
	351, 2116,
	352, 2116,
	353, 2116,
	354, 2116,
	355, 2116,
	356, 2116,
	357, 2116,
	358, 2116,
	359, 2116,
	361, 2116,
	362, 2116,
	363, 2116,
	364, 2116,
	365, 2116,
	366, 2116,
	368, 2116,
	369, 2116,
	370, 2116,
	371, 2116,
	372, 2116,
	373, 2116,
	374, 2116,
	375, 2116,
	376, 2116,
	378, 2116,
	380, 2116,
	381, 2116,
	382, 2116,
	383, 2116,
	384, 2116,
	385, 2116,
	386, 2116,
	387, 2116,
	388, 2116,
	389, 2116,
	390, 2116,
	391, 2116,
	392, 2116,
	394, 2116,
	395, 2116,
	396, 2116,
	398, 2116,
	399, 2116,
	400, 2116,
	401, 2116,
	402, 2116,
	403, 2116,
	404, 2116,
	406, 2116,
	407, 2116,
	408, 2116,
	409, 2116,
	410, 2116,
	412, 2116,
	414, 2116,
	415, 2116,
	416, 2116,
	417, 2116,
	418, 2116,
	420, 2116,
	421, 2116,
	422, 2116,
	424, 2116,
	425, 2116,
	428, 2116,
	429, 2116,
	430, 2116,
	431, 2116,
	432, 2116,
	433, 2116,
	434, 2116,
	436, 2116,
	439, 2116,
	440, 2116,
	441, 2116,
	442, 2116,
	443, 2116,
	444, 2116,
	446, 2116,
	447, 2116,
	448, 2116,
	453, 2116,
	454, 2116,
	455, 2116,
	456, 2116,
	457, 2116,
	458, 2116,
	459, 2116,
	460, 2116,
	462, 2116,
	463, 2116,
	464, 2116,
	465, 2116,
	466, 2116,
	467, 2116,
	469, 2116,
	470, 2116,
	471, 2116,
	472, 2116,
	473, 2116,
	474, 2116,
	475, 2116,
	476, 2116,
	477, 2116,
	479, 2116,
	482, 2116,
	483, 2116,
	485, 2116,
	486, 2116,
	-2, 0,
	-1, 1341,
	160, 2015,
	411, 2015,
	464, 2015,
	483, 2015,
	-2, 0,
	-1, 1373,
	318, 654,
	366, 654,
	-2, 0,
	-1, 1397,
	1, 649,
	480, 649,
	482, 649,
	484, 649,
	-2, 0,
	-1, 1398,
	1, 674,
	480, 674,
	482, 674,
	484, 674,
	-2, 0,
	-1, 1399,
	1, 656,
	480, 656,
	482, 656,
	484, 656,
	-2, 0,
	-1, 1401,
	1, 660,
	480, 660,
	482, 660,
	484, 660,
	-2, 0,
	-1, 1428,
	1, 2064,
	480, 2064,
	482, 2064,
	483, 2064,
	484, 2064,
	-2, 702,
	-1, 1429,
	1, 2012,
	480, 2012,
	482, 2012,
	483, 2012,
	484, 2012,
	-2, 703,
	-1, 1444,
	1, 1022,
	484, 1022,
	-2, 1027,
	-1, 1447,
	144, 1150,
	157, 1150,
	234, 1150,
	276, 1150,
	-2, 1093,
	-1, 1540,
	127, 1114,
	144, 1114,
	157, 1114,
	204, 1114,
	234, 1114,
	276, 1114,
	286, 1114,
	426, 1114,
	-2, 1510,
	-1, 1600,
	482, 1660,
	-2, 0,
	-1, 1635,
	127, 1114,
	144, 1114,
	157, 1114,
	204, 1114,
	234, 1114,
	276, 1114,
	286, 1114,
	426, 1114,
	-2, 1229,
	-1, 1681,
	481, 1339,
	-2, 1327,
	-1, 1714,
	1, 499,
	484, 499,
	-2, 1027,
	-1, 1919,
	1, 651,
	480, 651,
	482, 651,
	484, 651,
	-2, 0,
	-1, 1920,
	1, 676,
	480, 676,
	482, 676,
	484, 676,
	-2, 0,
	-1, 1992,
	349, 1175,
	350, 1175,
	-2, 1372,
	-1, 2023,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1390,
	-1, 2024,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1391,
	-1, 2025,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1392,
	-1, 2026,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1393,
	-1, 2027,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1394,
	-1, 2028,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1395,
	-1, 2029,
	84, 0,
	217, 0,
	218, 0,
	466, 0,
	467, 0,
	-2, 1396,
	-1, 2030,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1397,
	-1, 2042,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1409,
	-1, 2043,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1410,
	-1, 2044,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1411,
	-1, 2047,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1416,
	-1, 2053,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1420,
	-1, 2055,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1428,
	-1, 2056,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1429,
	-1, 2057,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1430,
	-1, 2058,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1431,
	-1, 2170,
	5, 1803,
	160, 1671,
	481, 1800,
	-2, 1791,
	-1, 2171,
	160, 1672,
	-2, 2068,
	-1, 2172,
	160, 1673,
	-2, 1940,
	-1, 2173,
	160, 1674,
	-2, 1858,
	-1, 2174,
	160, 1675,
	-2, 1897,
	-1, 2175,
	160, 1676,
	-2, 1935,
	-1, 2176,
	160, 1677,
	-2, 2010,
	-1, 2177,
	160, 1678,
	-2, 1493,
	-1, 2246,
	1, 1230,
	2, 1230,
	90, 1230,
	127, 1230,
	144, 1230,
	157, 1230,
	161, 1230,
	171, 1230,
	174, 1230,
	200, 1230,
	204, 1230,
	214, 1230,
	230, 1230,
	234, 1230,
	258, 1230,
	276, 1230,
	280, 1230,
	286, 1230,
	342, 1230,
	344, 1230,
	426, 1230,
	437, 1230,
	450, 1230,
	451, 1230,
	452, 1230,
	461, 1230,
	480, 1230,
	482, 1230,
	484, 1230,
	486, 1230,
	-2, 1229,
	-1, 2259,
	481, 1772,
	-2, 1786,
	-1, 2282,
	481, 1338,
	-2, 1328,
	-1, 2384,
	1, 939,
	480, 939,
	482, 939,
	484, 939,
	-2, 1138,
	-1, 2540,
	281, 1178,
	-2, 2106,
	-1, 2541,
	281, 1179,
	-2, 1999,
	-1, 2545,
	349, 1737,
	350, 1737,
	-2, 1491,
	-1, 2546,
	349, 1741,
	350, 1741,
	-2, 1492,
	-1, 2547,
	349, 1738,
	350, 1738,
	-2, 1491,
	-1, 2548,
	349, 1742,
	350, 1742,
	-2, 1492,
	-1, 2561,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1418,
	-1, 2562,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1422,
	-1, 2568,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1424,
	-1, 2762,
	211, 1027,
	314, 1027,
	322, 1027,
	461, 1027,
	-2, 496,
	-1, 2861,
	1, 939,
	480, 939,
	482, 939,
	484, 939,
	-2, 1138,
	-1, 2952,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1426,
	-1, 2959,
	208, 0,
	210, 0,
	268, 0,
	-2, 1445,
	-1, 3025,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1474,
	-1, 3026,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1475,
	-1, 3027,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1476,
	-1, 3031,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1480,
	-1, 3032,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1481,
	-1, 3033,
	14, 0,
	15, 0,
	16, 0,
	462, 0,
	463, 0,
	464, 0,
	-2, 1482,
	-1, 3077,
	481, 1773,
	-2, 1787,
	-1, 3173,
	483, 2222,
	-2, 1071,
	-1, 3224,
	208, 0,
	210, 0,
	268, 0,
	-2, 1446,
	-1, 3227,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1449,
	-1, 3228,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1451,
	-1, 3402,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1450,
	-1, 3403,
	17, 0,
	18, 0,
	19, 0,
	44, 0,
	184, 0,
	187, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 1452,
	-1, 3413,
	208, 0,
	-2, 1483,
	-1, 3542,
	208, 0,
	-2, 1484,
	-1, 3677,
	44, 0,
	184, 0,
	233, 0,
	373, 0,
	459, 0,
	465, 0,
	-2, 2071,
}

const sqlPrivate = 57344

const sqlLast = 88237

var sqlAct = [...]int{

	220, 3579, 3676, 3473, 3810, 3442, 3445, 3563, 3687, 3776,
	3653, 3099, 3640, 2692, 3624, 3643, 3688, 3334, 2847, 3689,
	2438, 3730, 3480, 1893, 3207, 1022, 2991, 3675, 1209, 3546,
	3431, 2693, 3365, 3360, 849, 2010, 2876, 3391, 864, 3165,
	2779, 3347, 1806, 3489, 1328, 3511, 3289, 2070, 2869, 3370,
	2871, 1193, 902, 1456, 2843, 1669, 1765, 2944, 3144, 3100,
	1081, 1641, 2473, 2410, 35, 610, 3417, 2427, 2554, 2475,
	1670, 3261, 2715, 1174, 1012, 1880, 2401, 2413, 2373, 3206,
	578, 2678, 2735, 2483, 2472, 610, 2707, 2314, 2464, 702,
	2202, 2422, 1802, 1869, 2424, 2439, 1381, 2466, 2698, 1801,
	2696, 2316, 1774, 2007, 1610, 3547, 2239, 840, 2238, 3048,
	2538, 2589, 1805, 945, 2236, 2677, 2083, 1586, 1548, 212,
	1182, 2112, 2003, 1065, 1254, 848, 147, 1878, 4, 2375,
	2241, 2385, 1790, 2411, 1752, 3474, 2482, 2220, 1797, 895,
	1750, 1444, 1611, 2067, 2103, 2199, 1740, 1991, 1974, 1327,
	1308, 1972, 1334, 2432, 1630, 1349, 2741, 1324, 2845, 900,
	1003, 1318, 1835, 893, 1259, 611, 612, 546, 214, 213,
	2350, 2476, 1054, 1006, 532, 2106, 1581, 2228, 554, 2306,
	2114, 90, 1195, 1620, 2210, 985, 1532, 2166, 2084, 1457,
	2156, 1020, 155, 1458, 156, 1973, 1975, 1348, 572, 1834,
	562, 678, 1206, 653, 1764, 147, 606, 1996, 696, 2351,
	1332, 876, 40, 549, 39, 37, 557, 28, 26, 24,
	1008, 983, 751, 1443, 768, 3062, 1463, 3063, 1871, 2585,
	1871, 1627, 844, 615, 618, 1283, 1871, 1871, 3828, 3814,
	3813, 2886, 2219, 2219, 2219, 1855, 3792, 3790, 1002, 2694,
	3304, 3304, 3786, 615, 618, 3713, 1811, 3711, 3709, 3714,
	3706, 2219, 2219, 2760, 3707, 3703, 3698, 1539, 839, 3704,
	1811, 3673, 1062, 1471, 1472, 1811, 1504, 1505, 1506, 1514,
	1515, 1516, 3672, 3671, 3668, 2885, 1811, 1886, 1886, 1000,
	844, 713, 3667, 1507, 1502, 3662, 1886, 3052, 3660, 3304,
	3638, 1474, 3304, 3618, 3304, 3612, 1520, 2274, 3611, 2219,
	1062, 3606, 2219, 986, 986, 3304, 3605, 3599, 3544, 3525,
	3304, 1811, 2274, 1811, 2212, 2369, 1179, 3522, 1473, 1471,
	1472, 3304, 3482, 3462, 1039, 1901, 3483, 1811, 1493, 845,
	826, 3461, 825, 3453, 3452, 1811, 1490, 1811, 3304, 3423,
	1502, 2337, 3404, 1811, 2650, 2651, 2274, 1474, 3389, 3378,
	3331, 3322, 1886, 2901, 2219, 2219, 3303, 3226, 3181, 3175,
	3304, 2274, 2917, 2917, 3142, 3072, 3070, 834, 3143, 3073,
	3071, 3055, 2975, 2971, 1473, 2219, 1811, 2219, 2916, 2908,
	2219, 2691, 2917, 2909, 1493, 2219, 79, 2689, 3619, 2688,
	2641, 2219, 1490, 2219, 2642, 987, 2270, 1496, 1497, 1498,
	1499, 2639, 2631, 1034, 2629, 2640, 2632, 1479, 2219, 2600,
	2598, 2462, 3528, 2219, 2461, 1889, 2599, 2387, 1889, 2290,
	2273, 1886, 2219, 2219, 2274, 3052, 2211, 2268, 2261, 1227,
	1811, 2219, 1811, 2218, 3220, 3359, 1511, 2219, 1886, 1521,
	1888, 1221, 1400, 3323, 1889, 1501, 1503, 188, 989, 1811,
	990, 2909, 2364, 1496, 1497, 1498, 1499, 1769, 2305, 1720,
	1517, 1870, 1518, 1479, 2901, 2407, 2553, 1810, 2303, 1488,
	1489, 1606, 1205, 188, 3128, 2947, 1471, 1472, 1035, 2255,
	2588, 2925, 1628, 2109, 190, 1509, 1800, 2887, 2656, 2254,
	1383, 2253, 2252, 2251, 991, 988, 1494, 833, 2650, 2651,
	832, 1501, 1503, 1872, 1474, 1872, 2888, 2139, 831, 830,
	190, 1872, 1872, 188, 829, 828, 824, 823, 697, 822,
	1519, 2518, 3531, 821, 820, 1488, 1489, 819, 818, 189,
	817, 1473, 816, 815, 814, 813, 812, 1508, 811, 182,
	810, 749, 748, 63, 188, 700, 699, 183, 747, 746,
	190, 745, 1494, 744, 743, 189, 2110, 2885, 64, 742,
	741, 740, 2435, 739, 738, 182, 737, 900, 157, 736,
	68, 900, 1215, 183, 735, 734, 733, 2666, 732, 1035,
	731, 190, 730, 729, 728, 1500, 1084, 727, 726, 725,
	1084, 724, 1198, 723, 157, 189, 1198, 3529, 722, 711,
	710, 1064, 669, 1495, 73, 1069, 1058, 1226, 630, 188,
	629, 2650, 2651, 621, 900, 620, 900, 619, 900, 1220,
	1479, 123, 592, 584, 583, 1512, 189, 582, 2111, 2108,
	566, 210, 209, 208, 157, 207, 182, 78, 1539, 206,
	2211, 1500, 2656, 847, 183, 1198, 190, 2418, 89, 2452,
	1035, 1884, 205, 79, 86, 3374, 3277, 1870, 1967, 1495,
	204, 203, 202, 201, 200, 157, 1185, 199, 2125, 198,
	197, 196, 195, 194, 193, 192, 2665, 191, 3238, 1214,
	3083, 1219, 3066, 1225, 2667, 1198, 2918, 2738, 2611, 1198,
	2594, 189, 2391, 1198, 2278, 2650, 2651, 2262, 900, 2245,
	1082, 182, 80, 1198, 1183, 1052, 900, 1177, 2123, 183,
	1189, 1510, 1748, 1631, 1485, 1486, 1492, 1513, 1491, 1487,
	1896, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	157, 2666, 3441, 1654, 3247, 1470, 3694, 2113, 3246, 1559,
	1211, 1071, 1024, 1550, 3674, 1077, 1198, 1171, 1176, 3586,
	3537, 1201, 3379, 3358, 3282, 2656, 3260, 3259, 3253, 3252,
	1047, 1589, 900, 1347, 3251, 1266, 1266, 1588, 3244, 1208,
	1207, 1352, 615, 618, 1491, 1487, 3243, 1484, 1482, 1483,
	1475, 1476, 1477, 1478, 1480, 1481, 3242, 188, 1592, 3148,
	2650, 2651, 1895, 3237, 3234, 1264, 1267, 3233, 1353, 188,
	188, 3141, 3087, 1266, 2660, 2652, 2653, 2654, 2655, 2657,
	2658, 3086, 1471, 1472, 188, 147, 147, 81, 1337, 1339,
	3085, 3076, 2650, 2651, 190, 1401, 3045, 3044, 3043, 1058,
	1312, 1315, 1058, 1502, 2967, 2107, 190, 190, 2667, 2656,
	1474, 2963, 2420, 2733, 2666, 900, 900, 900, 900, 900,
	2685, 190, 2676, 898, 154, 84, 3373, 85, 2912, 2286,
	1410, 2649, 3126, 2646, 2645, 2643, 1589, 1473, 2638, 189,
	845, 1335, 1588, 1551, 900, 1549, 188, 1493, 2637, 182,
	900, 189, 189, 2636, 701, 1490, 2633, 183, 123, 1402,
	2630, 182, 182, 1587, 1557, 2610, 189, 2593, 2586, 183,
	183, 2463, 2246, 2096, 1470, 999, 182, 1286, 157, 1846,
	1469, 1550, 3823, 190, 183, 1816, 3785, 3784, 1814, 3723,
	157, 157, 3721, 1448, 1471, 1472, 3712, 1447, 1023, 2993,
	188, 3578, 3574, 1538, 2656, 2434, 124, 1475, 1476, 1477,
	1478, 1480, 1481, 3571, 1442, 3570, 1496, 1497, 1498, 1499,
	158, 2667, 1474, 1471, 1472, 3569, 1479, 3562, 189, 2652,
	2653, 2654, 2655, 2657, 2658, 1358, 2656, 190, 182, 3556,
	3526, 3510, 1374, 3509, 1502, 1270, 183, 3532, 2073, 1473,
	3497, 1474, 3494, 900, 900, 900, 2753, 2138, 3458, 900,
	3437, 3415, 3147, 3399, 1501, 1503, 1020, 698, 1020, 3398,
	3386, 188, 1608, 2419, 3385, 3351, 3276, 3258, 1473, 1321,
	3196, 3193, 189, 1445, 3117, 1084, 3116, 3103, 1488, 1489,
	3102, 900, 182, 2666, 610, 3058, 1453, 1452, 1686, 610,
	183, 826, 2958, 825, 1536, 2919, 2902, 900, 190, 2862,
	2827, 1198, 1656, 2079, 1015, 1494, 2806, 2782, 1449, 2781,
	2755, 157, 3530, 1666, 2690, 845, 900, 1591, 1709, 1466,
	1467, 2615, 1084, 2614, 1645, 2609, 2577, 2400, 1479, 2661,
	2659, 2660, 2652, 2653, 2654, 2655, 2657, 2658, 1595, 1617,
	1680, 3548, 1058, 189, 1594, 1593, 1590, 1582, 1614, 1615,
	1746, 1580, 1717, 182, 1662, 2284, 1638, 1479, 2283, 2257,
	2250, 183, 2217, 2121, 1653, 986, 1609, 1583, 1584, 1604,
	1603, 1664, 2730, 1897, 1602, 1711, 1601, 1600, 1471, 1472,
	1599, 1598, 157, 1597, 1596, 147, 1577, 1712, 1576, 1657,
	2667, 1575, 1574, 1573, 1500, 1501, 1503, 1572, 1189, 1571,
	1570, 1683, 1569, 1568, 2782, 1567, 1474, 3354, 2124, 1566,
	1565, 1564, 1495, 1639, 1563, 1552, 1537, 1660, 2654, 2655,
	2657, 2658, 1535, 1530, 1046, 2276, 1037, 1030, 3278, 3230,
	3082, 1636, 3069, 1473, 3061, 2597, 1749, 2248, 3426, 845,
	3280, 1714, 3081, 1551, 2751, 3325, 1494, 1533, 2122, 2650,
	2651, 1674, 615, 618, 1198, 1198, 1607, 615, 618, 1649,
	3782, 3775, 1084, 1758, 1068, 3572, 1739, 2872, 3485, 3484,
	3377, 3440, 1648, 3324, 1647, 1646, 1633, 1644, 1643, 1642,
	3064, 2904, 1739, 1731, 1730, 1629, 1787, 1739, 1741, 1789,
	1665, 2809, 1794, 2903, 3151, 1708, 1062, 1739, 1807, 1667,
	3490, 1589, 3115, 1062, 1631, 1411, 1726, 1588, 2661, 2659,
	2660, 2652, 2653, 2654, 2655, 2657, 2658, 1067, 1440, 1894,
	2635, 1742, 2634, 1737, 2559, 1732, 1572, 1491, 1487, 1572,
	1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 2339,
	1769, 2355, 1373, 2652, 2653, 2654, 2655, 2657, 2658, 1062,
	1063, 1561, 808, 1495, 2849, 1382, 2848, 1066, 1773, 1059,
	3481, 2109, 3699, 3686, 1383, 1803, 3131, 3119, 2923, 3418,
	3811, 1798, 2694, 2995, 3695, 2185, 1812, 2104, 2282, 1605,
	3564, 1585, 1839, 3708, 2841, 1843, 1242, 1734, 3705, 1198,
	2881, 1198, 809, 1198, 2603, 3094, 3361, 3636, 3553, 2785,
	2834, 1198, 1658, 3110, 1198, 1753, 2470, 2431, 3746, 1754,
	1808, 1844, 2939, 1852, 1847, 3747, 3314, 1198, 1198, 1198,
	2764, 1208, 1207, 1715, 615, 618, 1240, 1230, 1842, 2291,
	1558, 3598, 3696, 806, 2110, 3820, 1362, 610, 3471, 1911,
	1793, 804, 3464, 3133, 998, 1982, 802, 1477, 1478, 1480,
	1481, 1953, 3130, 1769, 3129, 3091, 1874, 800, 1809, 1876,
	797, 3090, 1060, 1409, 2608, 1881, 1860, 2607, 1883, 1951,
	1061, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	1849, 1727, 2309, 2606, 1736, 1899, 1980, 2605, 1189, 2563,
	1053, 1826, 1825, 2371, 2363, 1241, 2307, 2362, 2342, 2269,
	2309, 1915, 2054, 1755, 1446, 1204, 2111, 2108, 2766, 2152,
	900, 1900, 900, 2151, 2307, 791, 1735, 1757, 2752, 900,
	2012, 2428, 1686, 1686, 1084, 794, 900, 900, 900, 900,
	900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
	900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
	900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
	900, 1984, 900, 1854, 900, 900, 900, 900, 1862, 1863,
	845, 1335, 845, 1335, 1680, 1680, 1286, 1858, 1857, 1759,
	1857, 1971, 3397, 665, 900, 1966, 1068, 900, 900, 843,
	1047, 1360, 2008, 2009, 1408, 3597, 900, 1981, 1902, 1890,
	900, 1891, 900, 900, 1904, 615, 618, 1297, 1068, 1062,
	1084, 1276, 2808, 1275, 1766, 2113, 900, 900, 900, 900,
	1236, 900, 900, 900, 900, 900, 900, 900, 900, 1274,
	1753, 1273, 1059, 2924, 1754, 1683, 1683, 1965, 2011, 1067,
	1762, 1909, 1753, 1933, 1481, 1249, 1754, 900, 900, 900,
	900, 900, 900, 900, 900, 900, 2341, 1979, 1995, 2298,
	900, 1067, 1767, 1768, 2069, 2069, 842, 1824, 2260, 2277,
	666, 1760, 1020, 2330, 1961, 1419, 2536, 2085, 2086, 1084,
	1760, 1407, 1355, 1923, 3106, 1674, 1674, 3665, 1020, 2551,
	1763, 2329, 2085, 2101, 1970, 1969, 1983, 1968, 1976, 1059,
	590, 1471, 1472, 1859, 900, 1084, 826, 1796, 1999, 826,
	826, 2000, 2001, 2107, 2318, 2658, 2802, 3326, 2147, 2930,
	2100, 2104, 1502, 1371, 2116, 2376, 2359, 1795, 1755, 1474,
	2352, 2353, 3746, 1905, 1649, 1060, 1375, 2169, 2169, 2183,
	1755, 2085, 1757, 1061, 2203, 2205, 2352, 2353, 844, 2929,
	2209, 1743, 1744, 1791, 1757, 1383, 1473, 2233, 2650, 2651,
	1918, 2352, 2353, 2515, 2077, 2113, 3759, 845, 2081, 1198,
	2225, 2075, 2763, 3758, 1439, 1767, 1768, 845, 1260, 3692,
	3097, 845, 1356, 544, 3396, 2267, 1638, 986, 2878, 897,
	2098, 1451, 1045, 589, 2258, 2550, 3770, 3794, 2247, 1084,
	1775, 1964, 1060, 1792, 1759, 1383, 3735, 539, 2224, 218,
	1061, 2321, 1058, 2149, 2521, 1258, 1759, 1779, 2150, 2259,
	1717, 2153, 1756, 2154, 2155, 3118, 1686, 720, 3447, 3779,
	2543, 2544, 2232, 3212, 2237, 2178, 2165, 2243, 2244, 2194,
	3211, 3310, 2207, 2308, 147, 1479, 798, 2271, 1982, 2215,
	2216, 1084, 2230, 2231, 798, 1198, 2226, 1238, 2340, 798,
	2820, 1636, 859, 1952, 1776, 900, 2310, 900, 1591, 845,
	799, 1361, 2984, 798, 1406, 3771, 1960, 2378, 1680, 2336,
	1769, 1950, 1062, 1501, 1503, 2289, 2879, 2814, 841, 1980,
	3806, 1786, 1871, 2574, 1963, 1423, 2345, 2377, 2379, 2065,
	668, 667, 2656, 1296, 663, 1760, 662, 2524, 2368, 2360,
	2285, 1919, 2404, 2304, 1397, 3693, 1235, 1760, 2572, 1015,
	795, 1015, 1583, 1584, 2063, 2372, 2344, 3565, 2288, 3449,
	2393, 3107, 2395, 1359, 1494, 786, 2382, 1198, 1198, 1683,
	1198, 2769, 2292, 1771, 853, 1027, 1926, 1260, 2878, 1062,
	2765, 1978, 1198, 1751, 1780, 1177, 695, 838, 1760, 1920,
	2796, 1578, 1398, 2749, 3773, 2320, 1760, 3208, 863, 1189,
	2433, 2388, 2332, 2433, 2486, 2313, 3734, 2489, 2490, 1025,
	1014, 2113, 2458, 2343, 2323, 2326, 2495, 2496, 2497, 1674,
	3409, 2666, 3691, 591, 2830, 588, 2361, 2442, 900, 3308,
	1981, 2354, 2356, 2357, 2358, 3755, 3616, 2795, 2981, 2505,
	2523, 2506, 1781, 1782, 891, 3648, 622, 3343, 874, 2565,
	2068, 3577, 2451, 1529, 1777, 2613, 1208, 2389, 2095, 615,
	618, 2569, 2520, 787, 3777, 2469, 2484, 2059, 900, 1927,
	2398, 1495, 2444, 2229, 900, 900, 2570, 1756, 2060, 2408,
	2575, 1922, 2061, 2503, 1266, 1266, 2066, 1418, 1778, 1756,
	1979, 2513, 2437, 2426, 147, 2488, 1619, 2459, 2491, 844,
	2492, 2500, 1028, 3393, 2448, 2383, 2449, 1357, 2450, 2319,
	2982, 2507, 3795, 2509, 2455, 2511, 540, 2526, 2242, 2528,
	1370, 1372, 2460, 2456, 3353, 2294, 1962, 1189, 2667, 900,
	900, 2519, 2309, 2051, 1420, 900, 2471, 2487, 2296, 2522,
	3772, 3202, 3078, 3716, 3778, 1040, 2324, 2076, 900, 900,
	3717, 3301, 1335, 3309, 900, 900, 721, 3213, 1917, 3733,
	900, 1189, 3448, 1189, 1788, 2941, 2297, 1623, 2534, 900,
	900, 900, 3780, 541, 3580, 900, 1783, 3297, 1385, 3690,
	2566, 2295, 2542, 3614, 1461, 900, 3745, 3146, 1450, 1044,
	1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 3743, 2533,
	3594, 2532, 900, 3800, 2596, 3807, 1626, 1872, 2531, 3496,
	542, 3163, 543, 3615, 1995, 2537, 3392, 3344, 788, 2113,
	1621, 2865, 1833, 3298, 1616, 2571, 1038, 2798, 1033, 2552,
	531, 2062, 3209, 3034, 2573, 1018, 1624, 1421, 1998, 1016,
	2064, 3256, 1784, 1770, 1623, 1728, 2945, 2659, 2660, 2652,
	2653, 2654, 2655, 2657, 2658, 1460, 623, 624, 2800, 3455,
	2591, 2592, 786, 3454, 1622, 2595, 2742, 3435, 900, 900,
	900, 1925, 1988, 2049, 2587, 2564, 2052, 900, 900, 900,
	3552, 3164, 900, 1626, 838, 3093, 2709, 2980, 3625, 2454,
	1725, 2866, 900, 1020, 1084, 3313, 2717, 2227, 900, 1460,
	900, 2860, 3312, 2777, 1026, 2773, 2412, 1422, 1020, 2701,
	2702, 2799, 1455, 1624, 1529, 2402, 3520, 1853, 1845, 1838,
	1820, 3581, 2048, 3394, 2942, 1460, 1084, 2602, 789, 1957,
	1721, 3166, 3366, 2502, 2399, 845, 2346, 3479, 1020, 1299,
	1910, 3715, 2508, 1084, 2510, 1459, 2512, 2723, 3477, 3436,
	1625, 2788, 2784, 2783, 2557, 1686, 2535, 1723, 3214, 1084,
	787, 3512, 626, 625, 2739, 3799, 3060, 2706, 790, 1399,
	900, 2529, 2687, 3513, 2718, 2705, 2713, 2325, 2747, 1724,
	1989, 3293, 3035, 2266, 900, 3294, 717, 1461, 2703, 1459,
	3036, 2265, 2732, 2264, 2221, 1686, 2759, 2263, 3257, 3514,
	3335, 1268, 2406, 1282, 2761, 842, 2711, 1680, 2700, 627,
	628, 900, 2736, 1269, 1058, 1459, 863, 2716, 2767, 3443,
	863, 2712, 2682, 2683, 2684, 2750, 2721, 1625, 3296, 1280,
	3215, 1461, 2724, 2725, 2695, 1168, 2729, 3558, 2913, 1168,
	2726, 3299, 2720, 2708, 2710, 2787, 2737, 1680, 2792, 2793,
	719, 2722, 1084, 3516, 3752, 2774, 1386, 2740, 1851, 2386,
	3311, 2223, 2050, 1198, 3475, 2778, 2222, 3383, 1683, 3515,
	3433, 709, 1084, 2754, 2770, 2771, 3633, 3628, 2803, 2804,
	3582, 2727, 2805, 2728, 2347, 2348, 3517, 1198, 3559, 2836,
	3622, 2786, 3262, 3049, 2790, 2120, 3754, 2811, 1198, 3710,
	2813, 2744, 2745, 2746, 3573, 1437, 3444, 3434, 1683, 2854,
	2824, 2825, 1020, 2762, 2826, 788, 2821, 3414, 1674, 2859,
	2768, 1758, 2719, 3255, 2874, 1435, 2679, 3382, 908, 2957,
	2828, 2743, 1415, 1413, 2921, 1396, 1394, 1392, 2837, 2644,
	1390, 1189, 3295, 2807, 2756, 2757, 2576, 2758, 1758, 3629,
	1198, 1198, 2403, 2801, 2883, 2370, 2338, 2287, 1674, 1388,
	3560, 1949, 1842, 1655, 2835, 1015, 1652, 2900, 2846, 2816,
	216, 1438, 534, 535, 2819, 550, 534, 550, 560, 565,
	1798, 1015, 581, 2823, 2831, 2829, 2740, 587, 1798, 1350,
	3301, 2680, 2920, 216, 2344, 2938, 715, 716, 2867, 1380,
	2838, 1084, 2484, 2937, 1084, 1378, 2817, 1281, 2894, 706,
	2818, 2484, 2875, 216, 2857, 1455, 3297, 2517, 2516, 1278,
	3290, 2494, 2891, 2892, 2893, 789, 2119, 1977, 2896, 1959,
	2897, 1930, 1710, 1279, 900, 1562, 3288, 1354, 1253, 3685,
	900, 900, 3292, 3330, 900, 900, 900, 2882, 900, 3321,
	2911, 2880, 1189, 1189, 718, 3621, 2915, 900, 1686, 3364,
	2889, 2895, 3298, 1436, 2935, 790, 900, 147, 147, 900,
	2898, 2899, 3286, 3518, 3162, 1084, 3156, 3113, 3519, 3111,
	2936, 707, 708, 1434, 900, 2926, 3092, 2927, 2858, 2928,
	1414, 1412, 1084, 1395, 1393, 1391, 845, 3291, 1389, 2850,
	2453, 2429, 1686, 1686, 900, 900, 2417, 900, 900, 900,
	1680, 534, 534, 2960, 2409, 1183, 1948, 1387, 1082, 216,
	2396, 2932, 1887, 796, 1189, 900, 1885, 3731, 2940, 900,
	1882, 1686, 1686, 900, 900, 900, 900, 900, 900, 900,
	900, 900, 900, 900, 900, 900, 900, 900, 900, 900,
	900, 900, 1877, 900, 1680, 1680, 2943, 1379, 1875, 1873,
	900, 900, 1686, 1377, 1864, 1817, 1619, 900, 1815, 1804,
	2822, 1683, 2008, 2999, 1799, 900, 1542, 1277, 2969, 2970,
	1547, 1785, 2965, 1680, 1680, 1772, 1020, 1020, 1761, 2973,
	900, 2977, 2870, 3503, 995, 1464, 1663, 3747, 2976, 2992,
	2555, 2008, 3014, 3656, 3388, 2998, 2989, 2996, 2983, 2985,
	2986, 3381, 3380, 2485, 1680, 1683, 1683, 1747, 996, 1084,
	3293, 1674, 1232, 3505, 3294, 1014, 2309, 1014, 3065, 2328,
	3174, 3006, 3042, 1769, 3013, 3007, 2873, 1623, 1921, 3038,
	2307, 2309, 601, 3011, 1683, 1683, 1947, 900, 1850, 2164,
	2160, 801, 803, 805, 1319, 2327, 1320, 3046, 1432, 1433,
	1946, 3655, 900, 900, 1168, 1674, 1674, 3296, 1928, 3088,
	2987, 3315, 3567, 1376, 3039, 1683, 1626, 3539, 2556, 3263,
	3299, 2349, 2331, 1468, 3056, 3057, 1465, 900, 900, 3051,
	1621, 3053, 3054, 3005, 1674, 1674, 147, 545, 3748, 3047,
	2367, 3008, 3741, 3009, 1718, 863, 1624, 2335, 900, 997,
	2365, 1168, 2333, 2366, 3067, 1198, 654, 3068, 1198, 2158,
	2334, 694, 3620, 1320, 3590, 1674, 3587, 1686, 2933, 1320,
	3472, 3155, 3145, 3077, 1622, 3075, 2162, 2163, 2161, 2436,
	2208, 1713, 3137, 1668, 3774, 2748, 556, 3125, 3127, 1471,
	1472, 3798, 1198, 3589, 1471, 1472, 2650, 2651, 1539, 900,
	3235, 3096, 3136, 2115, 3112, 3080, 3114, 1020, 900, 3124,
	1471, 1472, 2301, 2302, 3152, 2299, 2300, 3120, 3176, 1680,
	2301, 3295, 1474, 1364, 1198, 1198, 1198, 2299, 2148, 1363,
	2157, 2159, 3493, 1417, 3171, 3153, 1416, 2778, 3132, 3139,
	1198, 3167, 2344, 3168, 1473, 3231, 1084, 3160, 3079, 1473,
	3188, 836, 3154, 786, 978, 2988, 3084, 1556, 1555, 3817,
	1625, 3787, 3760, 3549, 3468, 3427, 3425, 3350, 1084, 3279,
	3199, 900, 900, 3180, 3140, 838, 3138, 900, 900, 1686,
	1683, 3157, 900, 900, 3200, 900, 3169, 3109, 3104, 900,
	1018, 1168, 1018, 2442, 1016, 2890, 1016, 2864, 1842, 2863,
	900, 3177, 3170, 3172, 2499, 1031, 3201, 3178, 2498, 3182,
	2446, 3184, 1661, 837, 3191, 2421, 900, 3189, 3190, 3183,
	2397, 3198, 2280, 2279, 3194, 2484, 3197, 2080, 3195, 1945,
	1674, 1680, 1944, 1041, 3225, 3216, 3210, 1943, 1942, 1867,
	581, 1866, 1865, 1848, 1828, 1827, 3217, 1823, 3205, 1822,
	1821, 787, 1819, 1818, 1431, 1430, 1307, 1306, 1305, 1304,
	1303, 1302, 1301, 216, 1300, 216, 216, 1180, 1298, 216,
	1293, 1292, 1291, 1020, 1290, 3229, 1289, 1248, 1247, 1246,
	1245, 1020, 216, 1210, 1244, 1084, 1243, 1084, 1237, 1231,
	1229, 1228, 1683, 1075, 1020, 1074, 1015, 1073, 1072, 1043,
	1042, 1719, 807, 793, 1084, 3446, 1234, 3268, 3300, 1425,
	77, 1015, 1239, 3254, 641, 72, 3108, 649, 3635, 1252,
	2794, 1257, 2374, 900, 216, 216, 1929, 1180, 1384, 1931,
	2731, 2249, 3613, 3239, 3306, 2612, 3545, 216, 3408, 2118,
	1560, 1015, 1674, 74, 1295, 3265, 3266, 884, 930, 1084,
	3342, 3341, 3307, 3274, 1084, 3270, 3287, 216, 216, 216,
	3095, 1180, 216, 3271, 3267, 3318, 3319, 2474, 2736, 3339,
	581, 3264, 216, 216, 3317, 3285, 3275, 3338, 1672, 3269,
	1673, 852, 1087, 1084, 1729, 3333, 890, 706, 1198, 1745,
	3305, 1738, 2281, 2168, 907, 904, 1675, 1677, 3283, 3284,
	906, 3273, 905, 1676, 1579, 903, 788, 1671, 3159, 3158,
	2405, 2440, 1285, 772, 900, 1733, 2074, 2102, 3281, 3316,
	2601, 1553, 865, 886, 3329, 3384, 2099, 3328, 1036, 1084,
	3345, 875, 3332, 3337, 2714, 2877, 3074, 3367, 3355, 3368,
	3356, 900, 900, 900, 3371, 3387, 3352, 3372, 216, 1987,
	657, 3336, 2647, 1168, 3357, 2105, 1029, 3369, 2191, 1084,
	3375, 3362, 216, 1331, 2184, 2180, 900, 900, 2430, 1441,
	1842, 1531, 2441, 1070, 868, 2072, 900, 1544, 2581, 1686,
	1997, 2884, 2734, 900, 900, 2275, 3652, 2002, 1832, 3395,
	994, 993, 992, 3642, 3639, 3192, 2844, 1722, 1084, 2293,
	1523, 2851, 880, 1188, 3376, 2699, 3400, 2914, 1250, 586,
	3566, 1084, 892, 1522, 835, 1015, 789, 2381, 2380, 900,
	3555, 1057, 1056, 1055, 2776, 900, 3805, 3105, 187, 2549,
	1462, 1680, 1454, 900, 3416, 1686, 184, 186, 185, 1168,
	3346, 3122, 900, 1082, 19, 900, 3430, 18, 17, 3429,
	94, 900, 3421, 3422, 3424, 38, 790, 16, 122, 121,
	3405, 120, 2078, 119, 118, 117, 116, 111, 115, 3428,
	114, 113, 112, 3406, 3420, 110, 1992, 109, 1542, 3467,
	108, 1014, 107, 3451, 3450, 1084, 106, 1680, 1198, 105,
	104, 3487, 1683, 103, 3478, 102, 101, 1014, 100, 99,
	98, 97, 96, 3492, 3469, 3457, 900, 900, 1168, 95,
	577, 574, 3406, 2578, 2579, 3476, 3491, 3523, 3524, 900,
	900, 52, 3504, 3508, 3465, 2011, 3486, 3502, 51, 93,
	3459, 3460, 2190, 3527, 1168, 900, 1686, 3499, 3501, 3500,
	92, 15, 1674, 36, 13, 3507, 3506, 56, 1683, 3521,
	3371, 57, 12, 534, 31, 32, 83, 82, 900, 2846,
	30, 900, 14, 3498, 29, 27, 10, 8, 7, 33,
	1640, 11, 152, 151, 216, 153, 216, 150, 76, 900,
	216, 149, 148, 3561, 3551, 75, 25, 9, 1680, 144,
	3568, 3543, 1210, 3534, 1180, 216, 3550, 216, 1674, 3488,
	3150, 71, 216, 1210, 550, 900, 900, 216, 1210, 3535,
	3536, 146, 3576, 581, 2186, 900, 145, 143, 900, 142,
	1198, 141, 69, 140, 139, 70, 3591, 138, 1168, 3593,
	1198, 1198, 23, 2673, 2674, 2675, 3538, 1189, 5, 55,
	6, 3390, 2922, 3584, 3585, 3583, 87, 1198, 88, 1683,
	3604, 3491, 3588, 34, 67, 66, 65, 3575, 22, 54,
	900, 3596, 21, 3601, 177, 176, 3600, 175, 174, 169,
	168, 3595, 173, 171, 3602, 3603, 170, 172, 167, 3609,
	1168, 3610, 179, 178, 181, 3630, 3608, 165, 1084, 1015,
	1015, 3607, 900, 900, 161, 900, 160, 164, 3650, 1674,
	166, 3632, 163, 162, 159, 180, 1018, 62, 137, 136,
	1016, 3631, 135, 134, 3641, 3644, 133, 132, 131, 61,
	20, 2, 1018, 3637, 3657, 1, 1016, 3646, 0, 0,
	0, 3669, 0, 3670, 0, 900, 900, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 3661, 0, 0, 3664,
	3617, 3666, 0, 0, 0, 0, 3697, 900, 0, 0,
	0, 0, 0, 3681, 3682, 0, 3702, 3684, 0, 3683,
	0, 0, 3658, 0, 216, 3659, 0, 0, 0, 0,
	3700, 3718, 3645, 0, 0, 3649, 3654, 0, 3720, 3722,
	0, 0, 0, 0, 0, 0, 0, 3728, 900, 0,
	3732, 3719, 2011, 0, 1471, 1472, 3724, 3727, 0, 0,
	0, 3725, 3726, 0, 0, 3729, 0, 0, 216, 0,
	0, 0, 216, 3738, 3739, 1502, 3744, 216, 3742, 0,
	593, 0, 1474, 0, 0, 3749, 3740, 3751, 0, 0,
	3750, 3762, 900, 3753, 900, 3757, 216, 3763, 216, 3641,
	216, 3768, 3644, 3764, 534, 3766, 0, 3761, 3767, 1473,
	3765, 3756, 0, 0, 0, 0, 3769, 0, 1868, 0,
	1015, 0, 0, 2442, 0, 0, 0, 3781, 3783, 0,
	0, 0, 0, 3788, 0, 0, 0, 216, 0, 3791,
	0, 0, 0, 3793, 0, 900, 900, 3796, 0, 0,
	0, 3789, 0, 900, 0, 900, 900, 0, 0, 3802,
	581, 0, 0, 3808, 706, 0, 0, 0, 3809, 3812,
	2190, 0, 3654, 216, 0, 1180, 216, 0, 0, 0,
	598, 0, 0, 3815, 0, 0, 3816, 3819, 0, 581,
	0, 0, 3822, 0, 900, 3824, 216, 3825, 1479, 3827,
	3818, 0, 3829, 0, 3821, 216, 216, 0, 216, 0,
	216, 0, 216, 0, 216, 1190, 0, 0, 0, 1202,
	0, 0, 0, 0, 0, 0, 0, 0, 1954, 0,
	0, 1955, 0, 1956, 0, 0, 1501, 1503, 0, 0,
	0, 0, 0, 0, 216, 3803, 3804, 0, 0, 603,
	2190, 2190, 2539, 0, 0, 0, 0, 0, 0, 0,
	2953, 2954, 0, 0, 0, 565, 0, 0, 1261, 581,
	0, 0, 0, 600, 2650, 2651, 0, 2668, 2669, 2670,
	0, 0, 1618, 0, 3826, 0, 1015, 1494, 0, 0,
	0, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 1202, 0, 0, 0,
	0, 0, 2186, 2186, 0, 0, 0, 1014, 0, 2665,
	0, 0, 0, 1168, 0, 0, 0, 0, 3015, 3016,
	3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026,
	3027, 3028, 3029, 3030, 3031, 3032, 3033, 1014, 3037, 1365,
	2190, 2190, 2190, 0, 0, 1168, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1168, 0, 1495, 0, 0, 0, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2656, 863,
	0, 0, 0, 602, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 863, 1471, 1472, 0, 0, 0, 597,
	216, 851, 0, 0, 0, 0, 0, 0, 0, 534,
	2672, 0, 2186, 2186, 2186, 1502, 216, 0, 534, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	216, 2671, 0, 0, 0, 594, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1168, 0, 0, 0, 0, 0, 2666, 0, 0,
	0, 0, 0, 604, 1483, 1475, 1476, 1477, 1478, 1480,
	1481, 1168, 0, 0, 596, 0, 0, 0, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1014, 0, 0, 0, 0, 63, 1018, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 1018, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 2317, 68, 0, 0, 0, 0, 1479, 0,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 1018, 0, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 2667, 0, 1501, 1503, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	2390, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1168, 89, 1210, 1168, 0, 216, 79, 86, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 1494, 2425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2317, 0,
	534, 0, 0, 2445, 1661, 0, 0, 0, 0, 216,
	0, 0, 216, 0, 216, 0, 216, 0, 0, 0,
	0, 1180, 0, 216, 216, 80, 0, 0, 0, 0,
	0, 0, 0, 2467, 706, 0, 2317, 2317, 0, 0,
	0, 0, 0, 0, 1168, 2662, 2663, 2664, 216, 0,
	0, 0, 2661, 2659, 2660, 2652, 2653, 2654, 2655, 2657,
	2658, 1168, 0, 0, 216, 1180, 216, 2190, 2190, 1210,
	0, 1210, 0, 0, 1180, 0, 1180, 0, 1180, 0,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	1016, 0, 0, 0, 1495, 0, 0, 0, 0, 216,
	216, 216, 216, 1180, 216, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 1014, 216, 1202, 0,
	81, 0, 0, 0, 0, 216, 0, 0, 0, 2186,
	2186, 0, 0, 0, 0, 2190, 2190, 2190, 2190, 2190,
	2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190, 2190,
	2190, 2190, 2190, 2190, 0, 2190, 0, 154, 84, 851,
	85, 0, 0, 851, 0, 0, 0, 0, 1168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 123, 0, 0, 0, 1475, 1476, 1477, 1478, 1480,
	1481, 0, 0, 0, 0, 0, 1212, 0, 1216, 0,
	1222, 0, 0, 0, 1210, 0, 190, 2186, 2186, 2186,
	2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186, 2186,
	2186, 2186, 2186, 2186, 2186, 2186, 0, 2186, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3413, 0, 158, 0, 0, 1892, 0, 0, 0,
	0, 189, 0, 0, 1202, 0, 0, 1903, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 183,
	1912, 1913, 1914, 0, 0, 0, 0, 0, 0, 0,
	1346, 63, 0, 0, 3438, 0, 1014, 0, 1351, 0,
	157, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 2650, 2651, 0, 2668, 2669, 2670,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	1018, 1018, 0, 0, 1016, 1016, 216, 0, 0, 0,
	0, 534, 73, 0, 1403, 1168, 534, 0, 0, 534,
	0, 0, 534, 534, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 216, 1168, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 1210, 2665,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 79, 86, 0, 0, 0, 1210, 0, 0, 0,
	3542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2317, 2317, 216, 0, 63,
	0, 2317, 0, 0, 2780, 0, 0, 1524, 1525, 1526,
	1527, 1528, 2317, 2780, 64, 2317, 2780, 2780, 0, 0,
	80, 0, 0, 0, 0, 0, 68, 0, 0, 216,
	216, 216, 1014, 0, 0, 0, 1541, 0, 2656, 0,
	1014, 0, 1554, 0, 0, 0, 1471, 1472, 0, 0,
	0, 216, 1180, 1014, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 1168, 0, 1168, 1502, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 1168, 0, 2840, 0, 0, 2842, 2317,
	0, 1018, 216, 78, 0, 1016, 216, 0, 1257, 0,
	0, 1473, 0, 0, 89, 0, 0, 0, 0, 79,
	86, 1493, 0, 0, 0, 2425, 0, 0, 1180, 0,
	216, 0, 0, 2317, 0, 534, 0, 2666, 1168, 0,
	0, 0, 2317, 1168, 0, 81, 0, 0, 0, 0,
	0, 216, 216, 0, 0, 1612, 1612, 1612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 1168, 0, 0, 0, 216, 2425, 0, 0,
	2425, 0, 154, 84, 0, 85, 0, 0, 0, 0,
	1496, 1497, 1498, 1499, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	0, 0, 701, 0, 0, 0, 123, 2931, 1168, 0,
	1180, 216, 0, 216, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1501, 1503,
	0, 190, 0, 0, 2667, 0, 0, 0, 1168, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 909, 124, 0, 0, 1018, 0, 0,
	0, 1016, 0, 0, 0, 1018, 0, 0, 158, 1016,
	0, 0, 0, 81, 0, 0, 189, 1168, 1018, 1494,
	0, 0, 1016, 0, 0, 0, 182, 0, 2384, 0,
	1168, 0, 0, 0, 183, 217, 0, 0, 0, 0,
	0, 0, 2994, 0, 0, 0, 0, 0, 2190, 0,
	154, 84, 0, 85, 0, 157, 0, 0, 217, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 0, 217, 0,
	701, 0, 0, 0, 123, 2662, 2663, 2664, 0, 0,
	0, 2190, 2661, 2659, 2660, 2652, 2653, 2654, 2655, 2657,
	2658, 0, 0, 0, 1168, 0, 0, 0, 1500, 190,
	2457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1202, 1495, 0, 0, 0,
	2186, 0, 124, 0, 216, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	0, 0, 0, 0, 189, 0, 534, 534, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 183, 2186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1210,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2190, 0, 0,
	0, 0, 0, 0, 0, 2650, 2651, 0, 2668, 2669,
	2670, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3222, 0, 581, 0, 0,
	0, 0, 0, 0, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 0, 2190, 2190, 216,
	2665, 0, 0, 0, 0, 0, 0, 216, 0, 2186,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1168, 0, 0,
	0, 0, 863, 0, 2317, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2467, 2467, 0, 0, 0, 0, 706, 706, 2317, 0,
	0, 2425, 2425, 0, 0, 706, 2317, 0, 0, 0,
	0, 0, 1986, 216, 1990, 0, 0, 0, 0, 2656,
	0, 2004, 0, 0, 0, 0, 0, 0, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 0, 2053, 0, 2055, 2056, 2057, 2058,
	0, 0, 2671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3240, 0, 0, 0, 2082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1541, 0,
	0, 0, 2097, 0, 0, 0, 0, 0, 2666, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2127, 2130,
	2133, 2136, 0, 2140, 2141, 2142, 2143, 2144, 2145, 2146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 1210, 0, 216,
	0, 2182, 0, 2193, 2195, 2200, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2317,
	2317, 2317, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 0, 0, 0,
	2317, 0, 2780, 0, 0, 1210, 1210, 216, 0, 0,
	0, 0, 0, 0, 0, 2667, 0, 0, 216, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2317, 0, 0, 0, 3348, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 217, 1088,
	217, 217, 216, 1088, 217, 1088, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 2832, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1210, 0, 0, 0, 0,
	2855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2861, 0, 0, 0, 0, 0, 0, 1088, 217,
	217, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 2662, 2663, 2664, 0,
	0, 0, 0, 2661, 2659, 2660, 2652, 2653, 2654, 2655,
	2657, 2658, 217, 217, 217, 0, 0, 217, 1088, 0,
	0, 0, 1088, 2906, 2907, 0, 1088, 217, 217, 0,
	0, 0, 0, 0, 0, 0, 1088, 2392, 0, 2394,
	0, 0, 0, 0, 0, 2317, 0, 2780, 0, 0,
	3432, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 581, 64, 0, 0, 1471, 1472, 0, 1504,
	1505, 1506, 1514, 1515, 1516, 68, 0, 0, 0, 0,
	0, 0, 3432, 217, 0, 0, 1507, 1502, 0, 0,
	2317, 0, 0, 0, 1474, 0, 0, 217, 0, 1520,
	3495, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 1210, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 216, 216, 0, 0, 1490,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	2514, 0, 0, 89, 0, 0, 0, 2994, 79, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 1525, 0, 0,
	1496, 1497, 1498, 1499, 0, 0, 0, 80, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 1511,
	0, 0, 1521, 0, 2780, 0, 0, 0, 1501, 1503,
	0, 2561, 2562, 0, 0, 0, 0, 2568, 0, 0,
	0, 0, 0, 1517, 0, 1518, 0, 0, 0, 1210,
	0, 1210, 1488, 1489, 0, 0, 2582, 2583, 0, 0,
	0, 0, 2097, 0, 0, 0, 0, 0, 1509, 0,
	0, 2590, 0, 0, 0, 3626, 0, 0, 0, 1494,
	0, 1210, 0, 0, 216, 0, 0, 2604, 0, 0,
	0, 0, 0, 0, 0, 217, 216, 2317, 0, 0,
	0, 0, 81, 1519, 2616, 0, 0, 0, 1088, 0,
	217, 217, 217, 216, 0, 0, 0, 217, 0, 0,
	1508, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 2994, 154,
	84, 0, 85, 0, 0, 0, 0, 0, 3134, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 1500, 701,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 2200,
	2200, 2200, 0, 0, 2317, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 1612, 0, 0, 0, 190, 0,
	0, 0, 2704, 0, 3432, 0, 0, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 3185, 3186, 3187,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1210, 0, 2317, 0, 158, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 2650, 2651, 0, 2668, 2669, 2670, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 3221, 0, 0, 851, 1088, 1088, 217,
	0, 0, 0, 0, 1510, 1088, 0, 1485, 1486, 1492,
	1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 2797, 0, 0, 0, 2625, 0, 1471,
	1472, 2626, 1504, 1505, 1506, 1514, 1515, 1516, 2665, 0,
	0, 0, 0, 217, 0, 0, 0, 217, 0, 1507,
	1502, 0, 217, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 217, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 2656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 1088, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 1088, 217, 0,
	0, 217, 896, 0, 0, 0, 0, 0, 0, 0,
	1088, 1088, 1088, 1496, 1497, 1498, 1499, 0, 0, 0,
	2671, 217, 0, 1479, 0, 0, 0, 0, 0, 0,
	217, 217, 0, 217, 0, 217, 0, 217, 0, 217,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 1521, 2666, 0, 0, 0,
	0, 1501, 1503, 0, 0, 0, 0, 616, 0, 217,
	0, 0, 0, 0, 0, 0, 1517, 0, 1518, 0,
	0, 0, 0, 0, 0, 1488, 1489, 616, 0, 0,
	0, 0, 0, 0, 0, 0, 2004, 0, 0, 0,
	0, 1509, 2948, 2949, 0, 0, 2952, 0, 0, 0,
	2955, 0, 1494, 0, 0, 0, 0, 1088, 0, 2959,
	0, 0, 0, 0, 0, 0, 0, 0, 2966, 0,
	0, 2704, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2978, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2667, 0, 0, 3000, 3001, 0, 3002,
	3003, 3004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3010, 0, 0,
	0, 3012, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 1500, 0, 1088, 2650, 2651, 0, 2668, 2669, 2670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1495,
	0, 0, 3040, 3041, 2962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3050, 0, 0,
	0, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3059, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2665,
	0, 0, 1088, 1010, 2662, 2663, 2664, 0, 0, 0,
	0, 2661, 2659, 2660, 2652, 2653, 2654, 2655, 2657, 2658,
	0, 0, 0, 0, 0, 217, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3089,
	0, 0, 0, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 3098, 3101, 0, 1510, 0, 0,
	1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483,
	1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 2656, 0,
	3121, 0, 0, 0, 3245, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 2650,
	2651, 0, 2668, 2669, 2670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2961,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 2671, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 1612, 0, 0, 0, 0, 0, 0, 0, 217,
	3179, 0, 0, 0, 2665, 0, 0, 2666, 0, 0,
	0, 0, 0, 217, 1088, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 3218, 3219, 0, 0, 0, 0, 3223,
	3224, 0, 0, 0, 3227, 3228, 0, 0, 0, 0,
	0, 3232, 0, 2656, 217, 0, 0, 217, 0, 217,
	0, 217, 3236, 0, 0, 0, 0, 0, 217, 217,
	1088, 1088, 0, 1088, 0, 0, 0, 0, 3241, 0,
	0, 0, 0, 0, 2667, 1088, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2671, 0, 0, 217,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 215,
	215, 0, 2666, 215, 217, 217, 217, 217, 0, 217,
	0, 217, 0, 0, 0, 0, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 3101, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 2662, 2663, 2664, 215, 215,
	0, 0, 2661, 2659, 2660, 2652, 2653, 2654, 2655, 2657,
	2658, 215, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 215, 215, 215, 0, 0, 215, 0, 0, 0,
	1507, 1502, 0, 0, 0, 0, 215, 215, 1474, 2667,
	0, 0, 0, 1520, 0, 0, 0, 0, 885, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 3101, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3401, 3402, 3403, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 0, 3411, 3412,
	0, 0, 0, 0, 0, 0, 215, 0, 91, 0,
	0, 0, 0, 0, 0, 3419, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 1497, 1498, 1499, 0, 1021,
	2662, 2663, 2664, 0, 1479, 0, 0, 2661, 2659, 2660,
	2652, 2653, 2654, 2655, 2657, 2658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3101, 0, 0,
	0, 0, 0, 1511, 0, 3456, 1521, 1088, 0, 0,
	0, 0, 1501, 1503, 3463, 0, 827, 851, 1079, 0,
	0, 0, 0, 3470, 1187, 0, 846, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 1088, 0, 0, 1004,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 3101, 3101,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 1287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 1311, 1311, 1311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 1345, 0,
	3554, 0, 0, 3557, 217, 217, 217, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	0, 3101, 1500, 0, 0, 0, 217, 0, 1634, 0,
	1017, 0, 0, 0, 215, 1088, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 1088, 0, 0, 215,
	1634, 215, 0, 0, 0, 1088, 616, 3101, 0, 0,
	3101, 616, 1512, 0, 0, 0, 0, 217, 0, 0,
	1088, 217, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 1088, 851, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 0,
	0, 2093, 1471, 1472, 0, 2094, 0, 3680, 3680, 3680,
	0, 0, 0, 0, 1088, 0, 217, 1088, 217, 0,
	0, 0, 0, 1502, 0, 0, 0, 0, 0, 3701,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 1473, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	3680, 0, 0, 0, 1021, 1490, 0, 0, 1021, 0,
	1021, 0, 2650, 2651, 1021, 2668, 2669, 2670, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 0, 1088, 215, 0, 0, 0,
	0, 215, 0, 0, 3101, 0, 3101, 2956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 215, 1021, 215, 1650, 1496, 1497, 1498, 1499,
	0, 0, 0, 0, 0, 0, 1479, 2665, 0, 0,
	1659, 0, 1187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3680, 3797, 0,
	0, 215, 0, 1021, 0, 3801, 0, 1021, 0, 0,
	0, 1021, 0, 0, 1501, 1503, 0, 0, 0, 0,
	0, 1021, 0, 91, 0, 91, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 1488, 1489,
	215, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2656, 0, 0, 0,
	215, 0, 1088, 0, 1021, 1494, 0, 0, 0, 616,
	215, 0, 215, 0, 215, 0, 215, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 846, 91, 91,
	0, 0, 0, 0, 0, 0, 0, 91, 215, 2671,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1502, 2666, 0, 0, 0, 0,
	0, 1474, 0, 0, 1500, 0, 0, 0, 1088, 0,
	0, 1088, 0, 0, 0, 217, 0, 0, 0, 91,
	0, 0, 1495, 0, 217, 0, 0, 0, 1473, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 1493, 217,
	0, 0, 0, 0, 0, 1088, 1490, 0, 0, 0,
	0, 0, 0, 1830, 0, 0, 0, 1837, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1088, 1088,
	0, 1287, 0, 1856, 0, 1856, 0, 0, 2951, 0,
	0, 0, 0, 1088, 0, 0, 0, 827, 217, 1088,
	0, 0, 2667, 0, 0, 0, 0, 1496, 1497, 1498,
	1499, 0, 0, 0, 0, 1534, 0, 1479, 0, 0,
	0, 1088, 1187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 1546, 1491, 1487, 0,
	1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0,
	0, 0, 0, 0, 1017, 1501, 1503, 0, 1837, 0,
	0, 1907, 0, 0, 1021, 0, 1021, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	1489, 1924, 0, 1021, 215, 0, 0, 0, 0, 0,
	0, 1934, 0, 1936, 0, 1938, 1687, 1940, 0, 1941,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 1021,
	0, 0, 0, 2662, 2663, 2664, 0, 0, 0, 0,
	2661, 2659, 2660, 2652, 2653, 2654, 2655, 2657, 2658, 1958,
	1021, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	1088, 0, 0, 1471, 1472, 0, 1504, 1505, 1506, 1514,
	1515, 1516, 0, 0, 1632, 0, 1635, 1088, 91, 0,
	0, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 215, 1500, 0, 0, 1473, 0,
	0, 0, 1088, 217, 217, 215, 0, 1088, 1493, 0,
	0, 0, 0, 1495, 0, 0, 1490, 0, 215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 215, 0, 0, 0, 1088, 217, 0, 0,
	0, 1088, 0, 616, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1021, 1021, 0, 0, 0, 0, 0, 215,
	1021, 0, 0, 0, 0, 0, 215, 1496, 1497, 1498,
	1499, 0, 1088, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 215, 0, 215, 0,
	215, 0, 1088, 0, 0, 901, 1511, 215, 215, 1521,
	0, 0, 0, 0, 0, 1501, 1503, 0, 1491, 1487,
	0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 215, 0, 0, 0, 0, 0, 0, 1488,
	1489, 1088, 0, 0, 0, 2256, 0, 609, 215, 0,
	215, 0, 0, 0, 1088, 1509, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 1494, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 215, 215, 215, 1021, 215, 1021,
	215, 1021, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 130, 1021, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 1021, 1021, 1021, 0, 0,
	0, 215, 64, 125, 0, 0, 0, 0, 1088, 215,
	0, 1088, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	42, 0, 127, 0, 0, 1500, 0, 0, 0, 0,
	217, 217, 0, 0, 0, 0, 41, 0, 73, 0,
	0, 0, 0, 1495, 0, 0, 0, 846, 0, 846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 59, 0, 1187, 0, 1512, 45, 0, 0, 0,
	0, 78, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 43, 89, 0, 0, 0, 0, 79, 86, 0,
	1687, 1687, 1021, 0, 0, 0, 0, 0, 0, 0,
	1837, 0, 0, 0, 0, 0, 0, 2416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 1088, 2447, 0, 80, 1311, 0, 1311,
	0, 1311, 0, 1088, 1088, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1485, 1486, 1492, 1513, 1491, 1487,
	1088, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 827, 2493, 0, 827, 827, 0, 1021, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2501,
	0, 2504, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 1088, 0, 0, 0, 1017, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 2525, 1187, 2527, 1187, 217, 2530,
	2071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 0, 846, 0, 0, 1021, 0, 0,
	1634, 81, 0, 0, 1540, 0, 1021, 0, 1540, 0,
	0, 47, 1311, 0, 0, 0, 0, 0, 0, 0,
	2558, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 0, 50, 154, 84,
	0, 85, 0, 48, 0, 0, 0, 129, 0, 0,
	0, 215, 0, 49, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	1004, 0, 126, 215, 215, 215, 0, 1021, 0, 0,
	0, 0, 1634, 0, 0, 0, 1635, 190, 0, 0,
	0, 0, 1471, 1472, 0, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	124, 0, 0, 1502, 0, 0, 0, 91, 0, 0,
	1474, 0, 0, 0, 158, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 1687, 0, 215, 0, 0, 0,
	215, 0, 182, 0, 0, 0, 0, 1473, 0, 0,
	183, 0, 0, 0, 0, 0, 0, 1493, 0, 1021,
	0, 0, 0, 1021, 1017, 1490, 0, 0, 0, 0,
	0, 157, 0, 0, 3, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 215, 0, 1085, 0,
	0, 0, 1085, 0, 1199, 0, 0, 0, 1199, 0,
	0, 0, 0, 0, 0, 0, 0, 2950, 0, 0,
	215, 1086, 0, 91, 0, 1086, 0, 1200, 0, 0,
	0, 1200, 0, 0, 0, 0, 1496, 1497, 1498, 1499,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 91, 0, 0, 1021, 1021, 1199, 1021, 0,
	0, 0, 0, 0, 0, 215, 0, 215, 0, 0,
	1021, 0, 0, 0, 91, 0, 91, 0, 0, 0,
	1200, 0, 0, 0, 1501, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1199, 0, 0,
	215, 1199, 0, 0, 0, 1199, 0, 0, 1488, 1489,
	0, 0, 0, 0, 91, 1199, 0, 91, 1471, 1472,
	1200, 0, 2772, 0, 1200, 0, 0, 0, 1200, 0,
	0, 0, 0, 0, 0, 1494, 0, 0, 1200, 1502,
	0, 0, 0, 0, 0, 0, 1474, 91, 0, 0,
	0, 0, 0, 0, 2810, 2812, 2416, 0, 1199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 1200, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2852, 0, 0,
	0, 2856, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 2567, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 1017, 1017,
	0, 0, 1496, 1497, 1498, 1499, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 1187, 1187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2910, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 1489, 0, 0, 0, 0,
	0, 0, 1540, 0, 0, 0, 2934, 0, 1187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 1491, 1487, 0,
	1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0,
	0, 2946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1021, 1021, 0, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 0, 1021, 0, 0, 0,
	0, 215, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 1085, 0, 1017,
	0, 1021, 0, 0, 0, 0, 609, 0, 0, 0,
	1500, 609, 0, 1687, 0, 0, 0, 1021, 0, 0,
	1086, 0, 0, 1199, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 0,
	0, 1004, 0, 0, 1085, 0, 1200, 0, 0, 0,
	0, 0, 0, 1687, 0, 0, 1004, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 687, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 0, 0, 0, 0,
	1021, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 1491, 1487, 1021, 1484, 1482, 1483, 1475,
	1476, 1477, 1478, 1480, 1481, 0, 1021, 0, 0, 0,
	0, 0, 91, 91, 0, 1017, 91, 0, 671, 0,
	1021, 0, 0, 1017, 0, 0, 1199, 1199, 672, 0,
	0, 0, 0, 0, 1085, 0, 1634, 0, 0, 0,
	0, 0, 0, 0, 91, 91, 673, 0, 91, 1200,
	1200, 0, 0, 0, 0, 0, 0, 1086, 1021, 1021,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2416, 0, 0, 0, 0,
	674, 215, 0, 0, 3149, 0, 0, 0, 0, 0,
	0, 0, 215, 215, 0, 0, 0, 0, 0, 3161,
	675, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	1004, 0, 1021, 846, 0, 0, 0, 0, 0, 215,
	676, 0, 0, 677, 0, 0, 215, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	91, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 0, 3203, 0,
	0, 1199, 0, 1199, 0, 1199, 1687, 0, 0, 0,
	0, 0, 0, 1199, 0, 0, 1199, 0, 0, 0,
	0, 0, 0, 1021, 1200, 0, 1200, 0, 1200, 1199,
	1199, 1199, 0, 0, 0, 0, 1200, 0, 0, 1200,
	1021, 0, 0, 0, 0, 0, 0, 0, 0, 609,
	1687, 1687, 1200, 1200, 1200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 1472, 0, 1687,
	1687, 0, 1514, 1515, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 679, 1502, 0, 0,
	0, 0, 215, 0, 1474, 0, 0, 0, 0, 1520,
	1687, 0, 0, 0, 0, 0, 695, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 1021, 1021, 1085, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 602, 0, 0, 1490,
	0, 0, 0, 681, 0, 0, 682, 0, 0, 1086,
	0, 0, 689, 0, 0, 683, 0, 1021, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3320, 0, 0, 0, 0, 684, 690, 215,
	215, 0, 0, 2416, 0, 685, 0, 0, 0, 91,
	1496, 1497, 1498, 1499, 0, 0, 0, 0, 686, 0,
	1479, 0, 1085, 693, 1004, 1004, 0, 0, 0, 0,
	2416, 0, 0, 0, 0, 0, 604, 3363, 0, 0,
	0, 0, 0, 0, 0, 1086, 0, 688, 0, 1511,
	0, 0, 1521, 0, 0, 0, 0, 0, 1501, 1503,
	0, 0, 0, 1021, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 1471, 1472, 1687, 0, 0, 0, 0,
	0, 0, 1488, 1489, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 1502, 0, 0, 0, 1509, 215,
	1021, 1474, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 0, 0, 1086, 1021, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 1021, 1021, 1021, 0, 0, 0, 1493, 0,
	1086, 0, 0, 0, 0, 0, 1490, 0, 1021, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 3439, 0, 0, 1021, 0, 0, 0,
	215, 1199, 0, 0, 0, 0, 0, 1687, 2560, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 1500, 0,
	0, 0, 0, 0, 1200, 1004, 0, 1496, 1497, 1498,
	1499, 1085, 0, 0, 0, 0, 1495, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 1512, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1501, 1503, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 1199, 0, 0,
	3533, 1187, 0, 0, 0, 0, 0, 0, 0, 1488,
	1489, 1021, 0, 0, 0, 0, 1086, 0, 0, 1021,
	1200, 0, 0, 1021, 0, 1021, 0, 0, 0, 0,
	0, 0, 1021, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 1021, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 0, 0, 0, 0, 0, 0, 1199,
	1199, 0, 1199, 0, 0, 0, 0, 1021, 0, 0,
	0, 0, 1021, 0, 1199, 0, 0, 0, 0, 0,
	3592, 1004, 1200, 1200, 0, 1200, 0, 0, 0, 1004,
	0, 0, 0, 0, 0, 0, 0, 1200, 0, 0,
	0, 1021, 0, 0, 0, 1500, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 3634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 1021, 3663, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1687, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 1487,
	0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 0, 1687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 1472,
	0, 1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 1021, 0, 1507, 1502,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1493, 1687, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2071, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 1496, 1497, 1498, 1499, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 1085, 0, 0, 1021, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 1021, 1021,
	0, 1085, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 1511, 0, 0, 1521, 1021, 0, 0, 0, 0,
	1501, 1503, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 1518, 0, 0,
	0, 0, 0, 0, 1488, 1489, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 1021, 0, 0, 0,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1519, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1199, 0, 0, 0, 0,
	0, 0, 1508, 0, 1085, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1200, 1199,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	1199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1200, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 1200, 0, 0, 91, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1199, 1199, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 1200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 1085, 0, 0, 0,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 1086,
	1507, 1502, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1520, 0, 0, 1510, 0, 0, 1485,
	1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483, 1475,
	1476, 1477, 1478, 1480, 1481, 1473, 0, 0, 0, 0,
	0, 0, 0, 2964, 0, 1493, 0, 1085, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 1497, 1498, 1499, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1521, 0, 0, 0,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 1086, 1471, 1472, 631, 1504, 1505,
	1506, 1514, 1515, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1502, 1519, 0, 0,
	632, 0, 0, 1474, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 633, 651, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 1199, 1490, 0,
	1199, 0, 0, 0, 0, 0, 0, 634, 0, 0,
	635, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	1200, 0, 0, 1200, 0, 0, 0, 658, 0, 0,
	1495, 0, 0, 636, 1199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 1200, 0, 1496,
	1497, 1498, 1499, 0, 637, 0, 1199, 1199, 1199, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1199, 0, 638, 0, 0, 639, 1085, 1200,
	1200, 1200, 660, 0, 0, 0, 603, 0, 1511, 0,
	0, 1521, 0, 0, 0, 1200, 0, 1501, 1503, 0,
	1085, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 0, 1518, 0, 0, 0, 0, 0,
	0, 1488, 1489, 1086, 0, 0, 0, 0, 1510, 0,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 1509, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 1494, 0,
	0, 0, 659, 0, 0, 2628, 0, 0, 0, 0,
	0, 642, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	643, 0, 0, 0, 0, 0, 0, 1085, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 786,
	0, 0, 644, 0, 0, 0, 1085, 1500, 0, 0,
	1086, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 0, 0, 0, 1495, 0, 0, 0, 1086,
	602, 0, 0, 0, 0, 0, 769, 755, 0, 0,
	652, 0, 0, 0, 0, 0, 0, 1512, 0, 645,
	0, 1085, 0, 0, 0, 0, 1085, 0, 0, 756,
	0, 0, 0, 0, 759, 0, 0, 0, 650, 792,
	0, 0, 0, 0, 1086, 0, 0, 766, 767, 1086,
	0, 646, 0, 779, 663, 1085, 662, 0, 0, 647,
	1199, 0, 0, 0, 0, 0, 0, 787, 761, 0,
	0, 0, 648, 0, 0, 0, 0, 655, 1086, 0,
	0, 0, 664, 1200, 661, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 1085, 0, 1510, 0, 0, 1485, 1486, 1492, 1513,
	1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478,
	1480, 1481, 0, 0, 1086, 0, 0, 0, 0, 0,
	2627, 1085, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	763, 764, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 771, 770, 0,
	0, 0, 0, 1085, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 791, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	1199, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 758, 0, 1200, 0, 783, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 777, 0,
	0, 774, 0, 0, 0, 0, 0, 775, 0, 0,
	752, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 776,
	0, 0, 0, 773, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 0, 0, 0, 0, 0, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1199, 0, 0, 0, 0, 0, 0, 0,
	0, 780, 1199, 1199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 0, 0, 0, 1199,
	0, 0, 0, 782, 0, 1200, 1200, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 1089, 230, 231,
	1090, 1091, 1092, 1086, 1093, 480, 1094, 1095, 1096, 1097,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 1098, 238, 239, 240, 241, 242, 1099, 1100, 243,
	485, 486, 487, 1101, 244, 245, 488, 1102, 1169, 1103,
	246, 247, 248, 249, 250, 251, 252, 0, 1104, 254,
	255, 256, 253, 1105, 257, 0, 258, 259, 260, 1106,
	261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111, 1112,
	1113, 264, 265, 266, 267, 0, 268, 489, 490, 1114,
	272, 269, 270, 1115, 273, 271, 1116, 274, 1117, 1118,
	275, 276, 277, 1119, 278, 1120, 279, 280, 1121, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 1122, 222, 1123, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 1124, 297,
	1125, 1126, 963, 298, 299, 495, 496, 300, 301, 1127,
	302, 497, 1128, 498, 303, 1129, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 965, 309, 310, 1130, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	1131, 964, 317, 502, 503, 1132, 504, 1133, 319, 966,
	505, 967, 320, 321, 322, 968, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1134, 330, 329, 1135, 331,
	506, 969, 332, 333, 970, 1136, 334, 335, 336, 1137,
	1138, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 971,
	353, 354, 357, 358, 356, 972, 355, 1139, 224, 973,
	359, 1140, 507, 360, 508, 362, 363, 1141, 0, 364,
	0, 1142, 1143, 366, 367, 368, 1144, 1145, 369, 370,
	509, 974, 371, 975, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 1146, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 1147, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 1148, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 1149, 404, 976, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 1150, 422, 423, 421, 424, 425, 426, 1151, 427,
	411, 412, 428, 429, 977, 430, 431, 517, 0, 432,
	1152, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 1153, 444, 445, 443, 1154, 446,
	447, 448, 449, 450, 287, 451, 1155, 452, 520, 521,
	522, 523, 1156, 459, 1157, 453, 454, 524, 455, 525,
	1158, 456, 457, 458, 0, 460, 461, 1159, 1160, 462,
	463, 464, 466, 467, 465, 468, 1161, 469, 1162, 0,
	470, 471, 472, 526, 527, 528, 1163, 474, 473, 529,
	1164, 1165, 1166, 1167, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	2234, 0, 0, 0, 0, 0, 0, 0, 2235, 225,
	226, 227, 228, 229, 1089, 230, 231, 1090, 1091, 1092,
	0, 1093, 480, 1094, 1095, 1096, 1097, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 1098, 238,
	239, 240, 241, 242, 1099, 1100, 243, 485, 486, 487,
	1101, 244, 245, 488, 1102, 1169, 1103, 246, 247, 248,
	249, 250, 251, 252, 0, 1104, 254, 255, 256, 253,
	1105, 257, 0, 258, 259, 260, 1106, 261, 962, 262,
	263, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 264, 265,
	266, 267, 0, 268, 489, 490, 1114, 272, 269, 270,
	1115, 273, 271, 1116, 274, 1117, 1118, 275, 276, 277,
	1119, 278, 1120, 279, 280, 1121, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	1122, 222, 1123, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 1124, 297, 1125, 1126, 963,
	298, 299, 495, 496, 300, 301, 1127, 302, 497, 1128,
	498, 303, 1129, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 965, 309, 310, 1130, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 1131, 964, 317,
	502, 503, 1132, 504, 1133, 319, 966, 505, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1134, 330, 329, 1135, 331, 506, 969, 332,
	333, 970, 1136, 334, 335, 336, 1137, 1138, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 1139, 224, 973, 359, 1140, 507,
	360, 508, 362, 363, 1141, 0, 364, 0, 1142, 1143,
	366, 367, 368, 1144, 1145, 369, 370, 509, 974, 371,
	975, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 1146, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 1147, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 1148, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	1149, 404, 976, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 1150, 422,
	423, 421, 424, 425, 426, 1151, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 1152, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 1153, 444, 445, 443, 1154, 446, 447, 448, 449,
	450, 287, 451, 1155, 452, 520, 521, 522, 523, 1156,
	459, 1157, 453, 454, 524, 455, 525, 1158, 456, 457,
	458, 0, 460, 461, 1159, 1160, 462, 463, 464, 466,
	467, 465, 468, 1161, 469, 1162, 0, 470, 471, 472,
	526, 527, 528, 1163, 474, 473, 529, 1164, 1165, 1166,
	1167, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 2972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2974, 225, 226, 227, 228, 229, 1089,
	230, 231, 1090, 1091, 1092, 0, 1093, 480, 1094, 1095,
	1096, 1097, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 1098, 238, 239, 240, 241, 242, 1099,
	1100, 243, 485, 486, 487, 1101, 244, 245, 488, 1102,
	1169, 1103, 246, 247, 248, 249, 250, 251, 252, 0,
	1104, 254, 255, 256, 253, 1105, 257, 0, 258, 259,
	260, 1106, 261, 962, 262, 263, 1107, 1108, 1110, 1109,
	1111, 1112, 1113, 264, 265, 266, 267, 0, 268, 489,
	490, 1114, 272, 269, 270, 1115, 273, 271, 1116, 274,
	1117, 1118, 275, 276, 277, 1119, 278, 1120, 279, 280,
	1121, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 1122, 222, 1123, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	1124, 297, 1125, 1126, 963, 298, 299, 495, 496, 300,
	301, 1127, 302, 497, 1128, 498, 303, 1129, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 965, 309, 310,
	1130, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 1131, 964, 317, 502, 503, 1132, 504, 1133,
	319, 966, 505, 967, 320, 321, 322, 968, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 1134, 330, 329,
	1135, 331, 506, 969, 332, 333, 970, 1136, 334, 335,
	336, 1137, 1138, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 971, 353, 354, 357, 358, 356, 972, 355, 1139,
	224, 973, 359, 1140, 507, 360, 508, 362, 363, 1141,
	0, 364, 0, 1142, 1143, 366, 367, 368, 1144, 1145,
	369, 370, 509, 974, 371, 975, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 1146, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 1147, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 1148,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 1149, 404, 976, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 1150, 422, 423, 421, 424, 425, 426,
	1151, 427, 411, 412, 428, 429, 977, 430, 431, 517,
	0, 432, 1152, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 1153, 444, 445, 443,
	1154, 446, 447, 448, 449, 450, 287, 451, 1155, 452,
	520, 521, 522, 523, 1156, 459, 1157, 453, 454, 524,
	455, 525, 1158, 456, 457, 458, 0, 460, 461, 1159,
	1160, 462, 463, 464, 466, 467, 465, 468, 1161, 469,
	1162, 0, 470, 471, 472, 526, 527, 528, 1163, 474,
	473, 529, 1164, 1165, 1166, 1167, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3272, 225, 226, 227, 228, 229, 1089, 230,
	231, 1090, 1091, 1092, 0, 1093, 480, 1094, 1095, 1096,
	1097, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1098, 238, 239, 240, 241, 242, 1099, 1100,
	243, 485, 486, 487, 1101, 244, 245, 488, 1102, 1169,
	1103, 246, 247, 248, 249, 250, 251, 252, 0, 1104,
	254, 255, 256, 253, 1105, 257, 0, 258, 259, 260,
	1106, 261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 264, 265, 266, 267, 0, 268, 489, 490,
	1114, 272, 269, 270, 1115, 273, 271, 1116, 274, 1117,
	1118, 275, 276, 277, 1119, 278, 1120, 279, 280, 1121,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 1122, 222, 1123, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 1124,
	297, 1125, 1126, 963, 298, 299, 495, 496, 300, 301,
	1127, 302, 497, 1128, 498, 303, 1129, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 965, 309, 310, 1130,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 1131, 964, 317, 502, 503, 1132, 504, 1133, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1134, 330, 329, 1135,
	331, 506, 969, 332, 333, 970, 1136, 334, 335, 336,
	1137, 1138, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 1139, 224,
	973, 359, 1140, 507, 360, 508, 362, 363, 1141, 0,
	364, 0, 1142, 1143, 366, 367, 368, 1144, 1145, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 1146, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 1147, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 1148, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 1149, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 1150, 422, 423, 421, 424, 425, 426, 1151,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 1152, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 1153, 444, 445, 443, 1154,
	446, 447, 448, 449, 450, 287, 451, 1155, 452, 520,
	521, 522, 523, 1156, 459, 1157, 453, 454, 524, 455,
	525, 1158, 456, 457, 458, 0, 460, 461, 1159, 1160,
	462, 463, 464, 466, 467, 465, 468, 1161, 469, 1162,
	0, 470, 471, 472, 526, 527, 528, 1163, 474, 473,
	529, 1164, 1165, 1166, 1167, 475, 476, 530, 477, 478,
	479, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3407, 0, 225, 226,
	227, 228, 229, 1089, 230, 231, 1090, 1091, 1092, 0,
	1093, 480, 1094, 1095, 1096, 1097, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1098, 238, 239,
	240, 241, 242, 1099, 1100, 243, 485, 486, 487, 1101,
	244, 245, 488, 1102, 1169, 1103, 246, 247, 248, 249,
	250, 251, 252, 0, 1104, 254, 255, 256, 253, 1105,
	257, 0, 258, 259, 260, 1106, 261, 962, 262, 263,
	1107, 1108, 1110, 1109, 1111, 1112, 1113, 264, 265, 266,
	267, 0, 268, 489, 490, 1114, 272, 269, 270, 1115,
	273, 271, 1116, 274, 1117, 1118, 275, 276, 277, 1119,
	278, 1120, 279, 280, 1121, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1122,
	222, 1123, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1124, 297, 1125, 1126, 963, 298,
	299, 495, 496, 300, 301, 1127, 302, 497, 1128, 498,
	303, 1129, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 1130, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1131, 964, 317, 502,
	503, 1132, 504, 1133, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1134, 330, 329, 1135, 331, 506, 969, 332, 333,
	970, 1136, 334, 335, 336, 1137, 1138, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 1139, 224, 973, 359, 1140, 507, 360,
	508, 362, 363, 1141, 0, 364, 0, 1142, 1143, 366,
	367, 368, 1144, 1145, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1146, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1147, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1148, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1149,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1150, 422, 423,
	421, 424, 425, 426, 1151, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 1152, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1153, 444, 445, 443, 1154, 446, 447, 448, 449, 450,
	287, 451, 1155, 452, 520, 521, 522, 523, 1156, 459,
	1157, 453, 454, 524, 455, 525, 1158, 456, 457, 458,
	0, 460, 461, 1159, 1160, 462, 463, 464, 466, 467,
	465, 468, 1161, 469, 1162, 0, 470, 471, 472, 526,
	527, 528, 1163, 474, 473, 529, 1164, 1165, 1166, 1167,
	475, 476, 530, 477, 478, 479, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3327, 0, 225, 226, 227, 228, 229, 1089, 230,
	231, 1090, 1091, 1092, 0, 1093, 480, 1094, 1095, 1096,
	1097, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1098, 238, 239, 240, 241, 242, 1099, 1100,
	243, 485, 486, 487, 1101, 244, 245, 488, 1102, 1169,
	1103, 246, 247, 248, 249, 250, 251, 252, 0, 1104,
	254, 255, 256, 253, 1105, 257, 0, 258, 259, 260,
	1106, 261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 264, 265, 266, 267, 0, 268, 489, 490,
	1114, 272, 269, 270, 1115, 273, 271, 1116, 274, 1117,
	1118, 275, 276, 277, 1119, 278, 1120, 279, 280, 1121,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 1122, 222, 1123, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 1124,
	297, 1125, 1126, 963, 298, 299, 495, 496, 300, 301,
	1127, 302, 497, 1128, 498, 303, 1129, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 965, 309, 310, 1130,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 1131, 964, 317, 502, 503, 1132, 504, 1133, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1134, 330, 329, 1135,
	331, 506, 969, 332, 333, 970, 1136, 334, 335, 336,
	1137, 1138, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 1139, 224,
	973, 359, 1140, 507, 360, 508, 362, 363, 1141, 0,
	364, 0, 1142, 1143, 366, 367, 368, 1144, 1145, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 1146, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 1147, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 1148, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 1149, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 1150, 422, 423, 421, 424, 425, 426, 1151,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 1152, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 1153, 444, 445, 443, 1154,
	446, 447, 448, 449, 450, 287, 451, 1155, 452, 520,
	521, 522, 523, 1156, 459, 1157, 453, 454, 524, 455,
	525, 1158, 456, 457, 458, 0, 460, 461, 1159, 1160,
	462, 463, 464, 466, 467, 465, 468, 1161, 469, 1162,
	0, 470, 471, 472, 526, 527, 528, 1163, 474, 473,
	529, 1164, 1165, 1166, 1167, 475, 476, 530, 477, 478,
	479, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3204, 0, 225, 226,
	227, 228, 229, 1089, 230, 231, 1090, 1091, 1092, 0,
	1093, 480, 1094, 1095, 1096, 1097, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1098, 238, 239,
	240, 241, 242, 1099, 1100, 243, 485, 486, 487, 1101,
	244, 245, 488, 1102, 1169, 1103, 246, 247, 248, 249,
	250, 251, 252, 0, 1104, 254, 255, 256, 253, 1105,
	257, 0, 258, 259, 260, 1106, 261, 962, 262, 263,
	1107, 1108, 1110, 1109, 1111, 1112, 1113, 264, 265, 266,
	267, 0, 268, 489, 490, 1114, 272, 269, 270, 1115,
	273, 271, 1116, 274, 1117, 1118, 275, 276, 277, 1119,
	278, 1120, 279, 280, 1121, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1122,
	222, 1123, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1124, 297, 1125, 1126, 963, 298,
	299, 495, 496, 300, 301, 1127, 302, 497, 1128, 498,
	303, 1129, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 1130, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1131, 964, 317, 502,
	503, 1132, 504, 1133, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1134, 330, 329, 1135, 331, 506, 969, 332, 333,
	970, 1136, 334, 335, 336, 1137, 1138, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 1139, 224, 973, 359, 1140, 507, 360,
	508, 362, 363, 1141, 0, 364, 0, 1142, 1143, 366,
	367, 368, 1144, 1145, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1146, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1147, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1148, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1149,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1150, 422, 423,
	421, 424, 425, 426, 1151, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 1152, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1153, 444, 445, 443, 1154, 446, 447, 448, 449, 450,
	287, 451, 1155, 452, 520, 521, 522, 523, 1156, 459,
	1157, 453, 454, 524, 455, 525, 1158, 456, 457, 458,
	0, 460, 461, 1159, 1160, 462, 463, 464, 466, 467,
	465, 468, 1161, 469, 1162, 0, 470, 471, 472, 526,
	527, 528, 1163, 474, 473, 529, 1164, 1165, 1166, 1167,
	475, 476, 530, 477, 478, 479, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2990, 0, 225, 226, 227, 228, 229, 1089, 230,
	231, 1090, 1091, 1092, 0, 1093, 480, 1094, 1095, 1096,
	1097, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1098, 238, 239, 240, 241, 242, 1099, 1100,
	243, 485, 486, 487, 1101, 244, 245, 488, 1102, 1169,
	1103, 246, 247, 248, 249, 250, 251, 252, 0, 1104,
	254, 255, 256, 253, 1105, 257, 0, 258, 259, 260,
	1106, 261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 264, 265, 266, 267, 0, 268, 489, 490,
	1114, 272, 269, 270, 1115, 273, 271, 1116, 274, 1117,
	1118, 275, 276, 277, 1119, 278, 1120, 279, 280, 1121,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 1122, 222, 1123, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 1124,
	297, 1125, 1126, 963, 298, 299, 495, 496, 300, 301,
	1127, 302, 497, 1128, 498, 303, 1129, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 965, 309, 310, 1130,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 1131, 964, 317, 502, 503, 1132, 504, 1133, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1134, 330, 329, 1135,
	331, 506, 969, 332, 333, 970, 1136, 334, 335, 336,
	1137, 1138, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 1139, 224,
	973, 359, 1140, 507, 360, 508, 362, 363, 1141, 0,
	364, 0, 1142, 1143, 366, 367, 368, 1144, 1145, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 1146, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 1147, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 1148, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 1149, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 1150, 422, 423, 421, 424, 425, 426, 1151,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 1152, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 1153, 444, 445, 443, 1154,
	446, 447, 448, 449, 450, 287, 451, 1155, 452, 520,
	521, 522, 523, 1156, 459, 1157, 453, 454, 524, 455,
	525, 1158, 456, 457, 458, 0, 460, 461, 1159, 1160,
	462, 463, 464, 466, 467, 465, 468, 1161, 469, 1162,
	0, 470, 471, 472, 526, 527, 528, 1163, 474, 473,
	529, 1164, 1165, 1166, 1167, 475, 476, 530, 477, 478,
	479, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2839, 0, 225, 226,
	227, 228, 229, 1089, 230, 231, 1090, 1091, 1092, 0,
	1093, 480, 1094, 1095, 1096, 1097, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 1098, 238, 239,
	240, 241, 242, 1099, 1100, 243, 485, 486, 487, 1101,
	244, 245, 488, 1102, 1169, 1103, 246, 247, 248, 249,
	250, 251, 252, 0, 1104, 254, 255, 256, 253, 1105,
	257, 0, 258, 259, 260, 1106, 261, 962, 262, 263,
	1107, 1108, 1110, 1109, 1111, 1112, 1113, 264, 265, 266,
	267, 0, 268, 489, 490, 1114, 272, 269, 270, 1115,
	273, 271, 1116, 274, 1117, 1118, 275, 276, 277, 1119,
	278, 1120, 279, 280, 1121, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 1122,
	222, 1123, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 1124, 297, 1125, 1126, 963, 298,
	299, 495, 496, 300, 301, 1127, 302, 497, 1128, 498,
	303, 1129, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 1130, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 1131, 964, 317, 502,
	503, 1132, 504, 1133, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1134, 330, 329, 1135, 331, 506, 969, 332, 333,
	970, 1136, 334, 335, 336, 1137, 1138, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 1139, 224, 973, 359, 1140, 507, 360,
	508, 362, 363, 1141, 0, 364, 0, 1142, 1143, 366,
	367, 368, 1144, 1145, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	1146, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	1147, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 1148, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 1149,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 1150, 422, 423,
	421, 424, 425, 426, 1151, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 1152, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	1153, 444, 445, 443, 1154, 446, 447, 448, 449, 450,
	287, 451, 1155, 452, 520, 521, 522, 523, 1156, 459,
	1157, 453, 454, 524, 455, 525, 1158, 456, 457, 458,
	0, 460, 461, 1159, 1160, 462, 463, 464, 466, 467,
	465, 468, 1161, 469, 1162, 0, 470, 471, 472, 526,
	527, 528, 1163, 474, 473, 529, 1164, 1165, 1166, 1167,
	475, 476, 530, 477, 478, 479, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2117, 0, 225, 226, 227, 228, 229, 1089, 230,
	231, 1090, 1091, 1092, 0, 1093, 480, 1094, 1095, 1096,
	1097, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 1098, 238, 239, 240, 241, 242, 1099, 1100,
	243, 485, 486, 487, 1101, 244, 245, 488, 1102, 1169,
	1103, 246, 247, 248, 249, 250, 251, 252, 0, 1104,
	254, 255, 256, 253, 1105, 257, 0, 258, 259, 260,
	1106, 261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111,
	1112, 1113, 264, 265, 266, 267, 0, 268, 489, 490,
	1114, 272, 269, 270, 1115, 273, 271, 1116, 274, 1117,
	1118, 275, 276, 277, 1119, 278, 1120, 279, 280, 1121,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 1122, 222, 1123, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 1124,
	297, 1125, 1126, 963, 298, 299, 495, 496, 300, 301,
	1127, 302, 497, 1128, 498, 303, 1129, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 965, 309, 310, 1130,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 1131, 964, 317, 502, 503, 1132, 504, 1133, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1134, 330, 329, 1135,
	331, 506, 969, 332, 333, 970, 1136, 334, 335, 336,
	1137, 1138, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 1139, 224,
	973, 359, 1140, 507, 360, 508, 362, 363, 1141, 0,
	364, 0, 1142, 1143, 366, 367, 368, 1144, 1145, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 1146, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 1147, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 1148, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 1149, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 1150, 422, 423, 421, 424, 425, 426, 1151,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 1152, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 1153, 444, 445, 443, 1154,
	446, 447, 448, 449, 450, 287, 451, 1155, 452, 520,
	521, 522, 523, 1156, 459, 1157, 453, 454, 524, 455,
	525, 1158, 456, 457, 458, 0, 460, 461, 1159, 1160,
	462, 463, 464, 466, 467, 465, 468, 1161, 469, 1162,
	0, 470, 471, 472, 526, 527, 528, 1163, 474, 473,
	529, 1164, 1165, 1166, 1167, 475, 476, 530, 477, 478,
	479, 1181, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1813, 0, 0, 0,
	225, 226, 227, 228, 229, 1089, 230, 231, 1090, 1091,
	1092, 0, 1093, 480, 1094, 1095, 1096, 1097, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 1098,
	238, 239, 240, 241, 242, 1099, 1100, 243, 485, 486,
	487, 1101, 244, 245, 488, 1102, 1169, 1103, 246, 247,
	248, 249, 250, 251, 252, 0, 1104, 254, 255, 256,
	253, 1105, 257, 0, 258, 259, 260, 1106, 261, 962,
	262, 263, 1107, 1108, 1110, 1109, 1111, 1112, 1113, 264,
	265, 266, 267, 0, 268, 489, 490, 1114, 272, 269,
	270, 1115, 273, 271, 1116, 274, 1117, 1118, 275, 276,
	277, 1119, 278, 1120, 279, 280, 1121, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 1122, 222, 1123, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 1124, 297, 1125, 1126,
	963, 298, 299, 495, 496, 300, 301, 1127, 302, 497,
	1128, 498, 303, 1129, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 965, 309, 310, 1130, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 1131, 964,
	317, 502, 503, 1132, 504, 1133, 319, 966, 505, 967,
	320, 321, 322, 968, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 1134, 330, 329, 1135, 331, 506, 969,
	332, 333, 970, 1136, 334, 335, 336, 1137, 1138, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 971, 353, 354,
	357, 358, 356, 972, 355, 1139, 224, 973, 359, 1140,
	507, 360, 508, 362, 363, 1141, 0, 364, 0, 1142,
	1143, 366, 367, 368, 1144, 1145, 369, 370, 509, 974,
	371, 975, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 1146, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 1147, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 1148, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 1149, 404, 976, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 1150,
	422, 423, 421, 424, 425, 426, 1151, 427, 411, 412,
	428, 429, 977, 430, 431, 517, 0, 432, 1152, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 1153, 444, 445, 443, 1154, 446, 447, 448,
	449, 450, 287, 451, 1155, 452, 520, 521, 522, 523,
	1156, 459, 1157, 453, 454, 524, 455, 525, 1158, 456,
	457, 458, 0, 460, 461, 1159, 1160, 462, 463, 464,
	466, 467, 465, 468, 1161, 469, 1162, 0, 470, 471,
	472, 526, 527, 528, 1163, 474, 473, 529, 1164, 1165,
	1166, 1167, 475, 476, 530, 477, 478, 479, 1080, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 1089, 230, 231, 1090, 1091, 1092, 0, 1093,
	480, 1094, 1095, 1096, 1097, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 1098, 238, 239, 240,
	241, 242, 1099, 1100, 243, 485, 486, 487, 1101, 244,
	245, 488, 1102, 1169, 1103, 246, 247, 248, 249, 250,
	251, 252, 0, 1104, 254, 255, 256, 253, 1105, 257,
	0, 258, 259, 260, 1106, 261, 962, 262, 263, 1107,
	1108, 1110, 1109, 1111, 1112, 1113, 264, 265, 266, 267,
	0, 268, 489, 490, 1114, 272, 269, 270, 1115, 273,
	271, 1116, 274, 1117, 1118, 275, 276, 277, 1119, 278,
	1120, 279, 280, 1121, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 1122, 222,
	1123, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 1124, 297, 1125, 1126, 963, 298, 299,
	495, 496, 300, 301, 1127, 302, 497, 1128, 498, 303,
	1129, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	965, 309, 310, 1130, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 1131, 964, 317, 502, 503,
	1132, 504, 1133, 319, 966, 505, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	1134, 330, 329, 1135, 331, 506, 969, 332, 333, 970,
	1136, 334, 335, 336, 1137, 1138, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 1139, 224, 973, 359, 1140, 507, 360, 508,
	362, 363, 1141, 0, 364, 0, 1142, 1143, 366, 367,
	368, 1144, 1145, 369, 370, 509, 974, 371, 975, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 1146,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 1147,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 1148, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 1149, 404,
	976, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 1150, 422, 423, 421,
	424, 425, 426, 1151, 427, 411, 412, 428, 429, 977,
	430, 431, 517, 0, 432, 1152, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 1153,
	444, 445, 443, 1154, 446, 447, 448, 449, 450, 287,
	451, 1155, 452, 520, 521, 522, 523, 1156, 459, 1157,
	453, 454, 524, 455, 525, 1158, 456, 457, 458, 0,
	460, 461, 1159, 1160, 462, 463, 464, 466, 467, 465,
	468, 1161, 469, 1162, 0, 470, 471, 472, 526, 527,
	528, 1163, 474, 473, 529, 1164, 1165, 1166, 1167, 475,
	476, 530, 477, 478, 479, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 1089, 230, 231,
	1090, 1091, 1092, 0, 1093, 480, 1094, 1095, 1096, 1097,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 1098, 238, 239, 240, 241, 242, 1099, 1100, 243,
	485, 486, 487, 1101, 244, 245, 488, 1102, 1169, 1103,
	246, 247, 248, 249, 250, 251, 252, 0, 1104, 254,
	255, 256, 253, 1105, 257, 0, 258, 259, 260, 1106,
	261, 962, 262, 263, 1107, 1108, 1110, 1109, 1111, 1112,
	1113, 264, 265, 266, 267, 0, 268, 489, 490, 1114,
	272, 269, 270, 1115, 273, 271, 1116, 274, 1117, 1118,
	275, 276, 277, 1119, 278, 1120, 279, 280, 1121, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 1122, 222, 1123, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 1124, 297,
	1125, 1126, 963, 298, 299, 495, 496, 300, 301, 1127,
	302, 497, 1128, 498, 303, 1129, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 965, 309, 310, 1130, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	1131, 964, 317, 502, 503, 1132, 504, 1133, 319, 966,
	505, 967, 320, 321, 322, 968, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1134, 330, 329, 1135, 331,
	506, 969, 332, 333, 970, 1136, 334, 335, 336, 1137,
	1138, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 971,
	353, 354, 357, 358, 356, 972, 355, 1139, 224, 973,
	359, 1140, 507, 360, 508, 362, 363, 1141, 0, 364,
	0, 1142, 1143, 366, 367, 368, 1144, 1145, 369, 370,
	509, 974, 371, 975, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 1146, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 1147, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 1148, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 1149, 404, 976, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 1150, 422, 423, 421, 424, 425, 426, 1151, 427,
	411, 412, 428, 429, 977, 430, 431, 517, 0, 432,
	1152, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 1153, 444, 445, 443, 1154, 446,
	447, 448, 449, 450, 287, 451, 1155, 452, 520, 521,
	522, 523, 1156, 459, 1157, 453, 454, 524, 455, 525,
	1158, 456, 457, 458, 0, 460, 461, 1159, 1160, 462,
	463, 464, 466, 467, 465, 468, 1161, 469, 1162, 0,
	470, 471, 472, 526, 527, 528, 1163, 474, 473, 529,
	1164, 1165, 1166, 1167, 475, 476, 530, 477, 478, 479,
	2092, 0, 899, 871, 872, 873, 869, 870, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 2089, 230, 231, 0, 0, 0,
	0, 0, 923, 887, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 936, 0, 943, 237, 942, 0, 238,
	239, 240, 241, 242, 889, 922, 243, 981, 982, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 946, 268, 940, 939, 860, 272, 269, 270,
	0, 273, 271, 0, 274, 2090, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 866, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	878, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	938, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 951, 952, 300, 301, 0, 302, 960, 0,
	888, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	933, 934, 0, 894, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 857, 224, 973, 359, 879, 927,
	360, 941, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 937, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 867, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 935, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 980, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 947, 948, 949, 950, 0,
	459, 0, 453, 454, 958, 455, 959, 877, 456, 457,
	458, 0, 460, 461, 0, 861, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 944, 979, 2088, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 858, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 2091, 0, 0, 0, 0, 0, 0, 883,
	2087, 0, 847, 881, 899, 871, 872, 873, 869, 870,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 1336, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 858,
	183, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 899, 871, 872, 873, 869, 870,
	882, 1545, 1543, 0, 0, 881, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 1336, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 858,
	183, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 899, 871, 872, 873, 869, 870,
	882, 1545, 2580, 0, 0, 881, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 1336, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 858,
	183, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 899, 871, 872, 873, 869, 870,
	882, 1545, 1543, 0, 0, 881, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	2196, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	2201, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 2197, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 2198, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 526, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 858,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 2137, 881, 899, 871, 872, 873,
	869, 870, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 883, 2135, 0, 2134, 881, 899, 871,
	872, 873, 869, 870, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 883, 2132, 0, 2131, 881,
	899, 871, 872, 873, 869, 870, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 883, 2129, 0,
	2128, 881, 899, 871, 872, 873, 869, 870, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 923, 887, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 936, 0, 943, 237, 942, 0, 238,
	239, 240, 241, 242, 889, 922, 243, 981, 982, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 946, 268, 940, 939, 860, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 866, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	878, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	938, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 951, 952, 300, 301, 0, 302, 960, 0,
	888, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	933, 934, 0, 894, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 857, 224, 973, 359, 879, 927,
	360, 941, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 937, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 867, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 935, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 980, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 947, 948, 949, 950, 0,
	459, 0, 453, 454, 958, 455, 959, 877, 456, 457,
	458, 0, 460, 461, 0, 861, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 944, 979, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 858, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 883,
	2126, 0, 1405, 881, 899, 871, 872, 873, 869, 870,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 526, 944, 979, 0, 474, 473, 529, 1404,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 858,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 850, 881, 899, 871, 872, 873,
	869, 870, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 862, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 899, 871, 872, 873,
	869, 870, 882, 883, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 3647, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 862, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 899, 871, 872, 873,
	869, 870, 882, 883, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 3466, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 862, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 899, 871, 872, 873,
	869, 870, 882, 883, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 3173,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 1613, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 881, 899, 871,
	872, 873, 869, 870, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 2968,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 899, 871,
	872, 873, 869, 870, 882, 883, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 2006,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 2005, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 899, 871,
	872, 873, 869, 870, 882, 883, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 862, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 899, 871,
	872, 873, 869, 870, 882, 883, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 1613, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 0, 881,
	899, 871, 872, 873, 869, 870, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 2201, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 883, 1543, 0,
	2206, 881, 899, 871, 872, 873, 869, 870, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 923, 887, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 936, 0, 943, 237, 942, 0, 238,
	239, 240, 241, 242, 889, 922, 243, 981, 982, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 946, 268, 940, 939, 860, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 866, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	878, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	938, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 951, 952, 300, 301, 0, 302, 960, 0,
	888, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	933, 934, 0, 894, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 857, 224, 973, 359, 879, 927,
	360, 941, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 937, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 867, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 935, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 980, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 947, 948, 949, 950, 0,
	459, 0, 453, 454, 958, 455, 959, 877, 456, 457,
	458, 0, 460, 461, 0, 861, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 944, 979, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 858, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 0, 2204, 881, 899, 871, 872, 873, 869, 870,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 526, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 858,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 2192, 881, 899, 871, 872, 873,
	869, 870, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 2181, 881, 899, 871,
	872, 873, 869, 870, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 924, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 2179, 881,
	2170, 2177, 872, 873, 869, 870, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 2173, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 2174, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 2175, 2172, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 2176, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 2171, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	2167, 881, 2170, 2177, 872, 873, 869, 870, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 923, 887, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 936, 0, 943, 237, 942, 0, 238,
	239, 240, 241, 242, 889, 922, 243, 981, 982, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 946, 2173, 940, 939, 860, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 866, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	878, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	938, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 951, 952, 300, 301, 0, 302, 960, 0,
	888, 303, 0, 304, 305, 306, 2174, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	933, 934, 0, 894, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 2175, 2172,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 857, 224, 973, 359, 879, 927,
	360, 941, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 937, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 867, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 2176, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 935, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 980, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 947, 948, 949, 950, 0,
	459, 0, 453, 454, 958, 455, 959, 877, 456, 457,
	458, 0, 460, 461, 0, 861, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 944, 979, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 2171, 479, 858, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 899, 871, 872, 873, 869, 870, 882, 883,
	0, 0, 0, 881, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 923, 887, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 936, 0, 943, 237, 942, 0, 238,
	239, 240, 241, 242, 889, 922, 243, 981, 982, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 946, 268, 940, 939, 860, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 866, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	878, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	938, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 951, 952, 300, 301, 0, 302, 960, 0,
	888, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	933, 934, 0, 894, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 857, 224, 973, 359, 879, 927,
	360, 941, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 937, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 867, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 935, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 980, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 947, 948, 949, 950, 0,
	459, 0, 453, 454, 958, 455, 959, 877, 456, 457,
	458, 0, 460, 461, 0, 861, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 944, 979, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 858, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	854, 855, 0, 0, 0, 0, 0, 1551, 0, 883,
	0, 0, 0, 881, 899, 871, 872, 873, 869, 870,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 1985, 230, 231, 0,
	0, 0, 0, 0, 923, 887, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 936, 0, 943, 237, 942,
	0, 238, 239, 240, 241, 242, 889, 922, 243, 981,
	982, 487, 0, 244, 245, 929, 0, 910, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	962, 262, 263, 913, 911, 912, 919, 915, 914, 918,
	264, 265, 266, 267, 946, 268, 940, 939, 860, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	931, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	866, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	953, 954, 878, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 938, 0, 0, 0, 296, 0, 297, 0,
	0, 963, 298, 299, 951, 952, 300, 301, 0, 302,
	960, 0, 888, 303, 0, 304, 305, 306, 307, 308,
	924, 925, 928, 361, 965, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	964, 317, 933, 934, 0, 894, 0, 319, 966, 926,
	967, 320, 321, 322, 968, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 961,
	969, 332, 333, 970, 0, 334, 335, 336, 917, 916,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 971, 353,
	354, 357, 358, 356, 972, 355, 857, 224, 973, 359,
	879, 927, 360, 941, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	974, 371, 975, 955, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 956, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 937, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 976, 405, 406, 407, 408, 867,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 920, 427, 411,
	412, 428, 429, 977, 430, 431, 935, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 980, 438, 439,
	440, 441, 957, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 947, 948, 949,
	950, 0, 459, 0, 453, 454, 958, 455, 959, 877,
	456, 457, 458, 0, 460, 461, 0, 861, 462, 463,
	464, 466, 467, 465, 468, 921, 469, 0, 0, 470,
	471, 472, 526, 944, 979, 0, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 858,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 854, 855, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 1224, 881, 899, 871, 872, 873,
	869, 870, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 923, 887, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 936, 0, 943,
	237, 942, 0, 238, 239, 240, 241, 242, 889, 922,
	243, 981, 982, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 946, 268, 940, 939,
	860, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 931, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 866, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 878, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 938, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 951, 952, 300, 301,
	0, 302, 960, 0, 888, 303, 0, 304, 305, 306,
	307, 308, 1223, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 933, 934, 0, 894, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 857, 224,
	973, 359, 879, 927, 360, 941, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 937, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 867, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 935, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 980,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 947,
	948, 949, 950, 0, 459, 0, 453, 454, 958, 455,
	959, 877, 456, 457, 458, 0, 460, 461, 0, 861,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 944, 979, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 858, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 0, 0, 854, 855, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 1218, 881, 899, 871,
	872, 873, 869, 870, 882, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 923, 887,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 936,
	0, 943, 237, 942, 0, 238, 239, 240, 241, 242,
	889, 922, 243, 981, 982, 487, 0, 244, 245, 929,
	0, 910, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 962, 262, 263, 913, 911, 912,
	919, 915, 914, 918, 264, 265, 266, 267, 946, 268,
	940, 939, 860, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 931, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 866, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 953, 954, 878, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 938, 0, 0, 0,
	296, 0, 297, 0, 0, 963, 298, 299, 951, 952,
	300, 301, 0, 302, 960, 0, 888, 303, 0, 304,
	305, 306, 307, 308, 1217, 925, 928, 361, 965, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 964, 317, 933, 934, 0, 894,
	0, 319, 966, 926, 967, 320, 321, 322, 968, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 961, 969, 332, 333, 970, 0, 334,
	335, 336, 917, 916, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 971, 353, 354, 357, 358, 356, 972, 355,
	857, 224, 973, 359, 879, 927, 360, 941, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 974, 371, 975, 955, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 956, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 937, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 976, 405,
	406, 407, 408, 867, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 920, 427, 411, 412, 428, 429, 977, 430, 431,
	935, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 980, 438, 439, 440, 441, 957, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 947, 948, 949, 950, 0, 459, 0, 453, 454,
	958, 455, 959, 877, 456, 457, 458, 0, 460, 461,
	0, 861, 462, 463, 464, 466, 467, 465, 468, 921,
	469, 0, 0, 470, 471, 472, 526, 944, 979, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 858, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 0, 0, 854, 855, 0, 0,
	0, 0, 0, 0, 0, 883, 0, 0, 1213, 881,
	899, 871, 872, 873, 869, 870, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 3679, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	3678, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	3677, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 3679, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	3678, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 2547, 2548, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 2545, 2546, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 854, 855,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 858, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 0, 0, 1993, 1994,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 0, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 2189, 0, 0, 0, 0, 0, 0, 2187, 2188,
	899, 871, 872, 873, 869, 870, 882, 883, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 0, 224, 973, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 2540, 2541, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 899, 871, 872, 873, 869,
	870, 882, 0, 0, 0, 0, 0, 0, 1743, 1744,
	0, 0, 225, 226, 227, 228, 229, 883, 230, 231,
	0, 881, 0, 0, 0, 923, 887, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 936, 0, 943, 237,
	942, 0, 238, 239, 240, 241, 242, 0, 922, 243,
	981, 982, 487, 0, 244, 245, 929, 0, 910, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 962, 262, 263, 913, 911, 912, 919, 915, 914,
	918, 264, 265, 266, 267, 946, 268, 940, 939, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 931, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 953, 954, 878, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 938, 0, 0, 0, 296, 0, 297,
	0, 0, 963, 298, 299, 951, 952, 300, 301, 0,
	302, 960, 0, 888, 303, 0, 304, 305, 306, 307,
	308, 924, 925, 928, 361, 965, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 964, 317, 933, 934, 0, 894, 0, 319, 966,
	926, 967, 320, 321, 322, 968, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	961, 969, 332, 333, 970, 0, 334, 335, 336, 917,
	916, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 971,
	353, 354, 357, 358, 356, 972, 355, 0, 224, 973,
	359, 879, 927, 360, 941, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 974, 371, 975, 955, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 956,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 937, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 976, 405, 406, 407, 408,
	867, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 920, 427,
	411, 412, 428, 429, 977, 430, 431, 935, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 980, 438,
	439, 440, 441, 957, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 947, 948,
	949, 950, 0, 459, 0, 453, 454, 958, 455, 959,
	877, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 921, 469, 0, 0,
	470, 471, 472, 526, 944, 979, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	899, 871, 872, 873, 869, 870, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 883, 230, 231, 0, 881, 0, 0, 0,
	923, 887, 0, 0, 0, 232, 234, 233, 235, 236,
	0, 936, 0, 943, 237, 942, 0, 238, 239, 240,
	241, 242, 889, 922, 243, 981, 982, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 3679, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	946, 268, 940, 939, 860, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 931, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 866, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 878, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 938, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	951, 952, 300, 301, 0, 302, 960, 0, 888, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 933, 934,
	0, 894, 0, 319, 0, 926, 0, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 961, 969, 332, 333, 0,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 857, 224, 0, 359, 879, 927, 360, 941,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 937,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 867, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 0,
	430, 431, 935, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 980, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 947, 948, 949, 950, 0, 459, 0,
	453, 454, 958, 455, 959, 877, 456, 457, 458, 0,
	3678, 461, 0, 861, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 944,
	979, 0, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 847, 0, 1019, 0, 0, 854, 855,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 881, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 922, 243,
	485, 486, 487, 0, 244, 245, 929, 0, 910, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 962, 262, 263, 913, 911, 912, 919, 915, 914,
	918, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 953, 954, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 963, 298, 299, 495, 496, 300, 301, 0,
	302, 960, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 924, 925, 928, 361, 965, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 964, 317, 502, 503, 0, 504, 0, 319, 966,
	926, 967, 320, 321, 322, 968, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 1005, 330, 329, 0, 331,
	961, 969, 332, 333, 970, 0, 334, 335, 336, 917,
	916, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 971,
	353, 354, 357, 358, 356, 972, 355, 0, 224, 973,
	359, 0, 927, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 1011, 366, 367, 368, 0, 0, 369, 370,
	509, 974, 371, 975, 955, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 956,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 976, 405, 406, 407, 408,
	516, 1013, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 188, 422, 423, 421, 424, 425, 426, 920, 427,
	411, 412, 428, 429, 977, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 957, 0, 444, 445, 443, 190, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 958, 455, 959,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 921, 469, 0, 0,
	470, 471, 472, 1336, 527, 528, 0, 474, 473, 529,
	0, 1019, 0, 182, 475, 476, 530, 477, 478, 479,
	0, 183, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	1009, 923, 1637, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 922, 243, 485, 486, 487, 0,
	244, 245, 929, 0, 910, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 962, 262, 263,
	913, 911, 912, 919, 915, 914, 918, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 953, 954, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 963, 298,
	299, 495, 496, 300, 301, 0, 302, 960, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 924, 925, 928,
	361, 965, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 964, 317, 502,
	503, 0, 504, 0, 319, 966, 926, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 1005, 330, 329, 0, 331, 961, 969, 332, 333,
	970, 0, 334, 335, 336, 917, 916, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 0, 224, 973, 359, 0, 927, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 1011, 366,
	367, 368, 0, 0, 369, 370, 509, 974, 371, 975,
	955, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 956, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 976, 405, 406, 407, 408, 516, 1013, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 188, 422, 423,
	421, 424, 425, 426, 920, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 957,
	0, 444, 445, 443, 190, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 958, 455, 959, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 921, 469, 0, 0, 470, 471, 472, 1336,
	527, 528, 0, 474, 473, 529, 0, 0, 0, 182,
	475, 476, 530, 477, 478, 479, 0, 183, 0, 0,
	2697, 0, 1019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 1637, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 923, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 922, 243, 485, 486, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 960, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 1005, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 224, 973, 359, 0, 927,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 1011,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 1013, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 958, 455, 959, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 0, 1001, 0,
	1019, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 1009, 0, 1007,
	923, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 922, 243, 485, 486, 487, 0, 244,
	245, 929, 0, 910, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 913,
	911, 912, 919, 915, 914, 918, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 953, 954, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	495, 496, 300, 301, 0, 302, 960, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 924, 925, 928, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 964, 317, 502, 503,
	0, 504, 0, 319, 966, 926, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	1005, 330, 329, 0, 331, 961, 969, 332, 333, 970,
	0, 334, 335, 336, 917, 916, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 0, 224, 973, 359, 0, 927, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 1011, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 955,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 956, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 516, 1013, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 920, 427, 411, 412, 428, 429, 977,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 957, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 958, 455, 959, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 921, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 0, 1019, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 1009, 923, 1007, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 922,
	243, 485, 486, 487, 0, 244, 245, 929, 0, 910,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 913, 911, 912, 919, 915,
	914, 918, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 953, 954, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 495, 496, 300, 301,
	0, 302, 960, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 924, 925, 928, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 964, 317, 502, 503, 0, 504, 0, 319,
	966, 926, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 1005, 330, 329, 0,
	331, 961, 969, 332, 333, 970, 0, 334, 335, 336,
	917, 916, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 0, 224,
	973, 359, 0, 927, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 1011, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 955, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	956, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 516, 1013, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 920,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 957, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 958, 455,
	959, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 921, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 1019, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 1009, 923, 1007, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 922, 243, 485, 486, 487,
	0, 244, 245, 929, 0, 910, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 913, 911, 912, 919, 915, 914, 918, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 953, 954,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 960, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 924, 925,
	928, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 926, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 961, 969, 332,
	333, 970, 0, 334, 335, 336, 917, 916, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 224, 973, 359, 0, 927,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 955, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 956, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 1013, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 920, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	957, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 958, 455, 959, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 921, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 0, 847, 0,
	1197, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 1535,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 1169, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 962, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 963, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	965, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 964, 317, 502, 503,
	0, 504, 0, 319, 966, 505, 967, 320, 321, 322,
	968, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 969, 332, 333, 970,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 971, 353, 354, 357, 358, 356,
	972, 355, 0, 0, 973, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 974, 371, 975, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	976, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 188, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 977,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 190, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 1336, 527,
	528, 0, 474, 473, 529, 0, 0, 0, 182, 475,
	476, 530, 477, 478, 479, 0, 183, 0, 0, 1333,
	0, 1197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1169, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 962, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 963, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 964, 317, 502,
	503, 0, 504, 0, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 969, 332, 333,
	970, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 0, 0, 973, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 188, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 190, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 1336,
	527, 528, 0, 474, 473, 529, 0, 0, 0, 182,
	475, 476, 530, 477, 478, 479, 0, 183, 0, 0,
	0, 0, 1197, 1196, 0, 0, 0, 0, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1169, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 505, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 969, 332,
	333, 970, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 0, 973, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 1197, 1196, 0,
	0, 0, 0, 1194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 2905,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	1169, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 962, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 963, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 965, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 964, 317, 502, 503, 0, 504, 0,
	319, 966, 505, 967, 320, 321, 322, 968, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 969, 332, 333, 970, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 971, 353, 354, 357, 358, 356, 972, 355, 0,
	0, 973, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 974, 371, 975, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 976, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 977, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 1197, 1196, 0, 0, 0, 0, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 1203, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1169, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 505, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 969, 332,
	333, 970, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 0, 973, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1019, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 923, 0, 1342,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	922, 243, 485, 486, 487, 0, 244, 245, 929, 0,
	910, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 962, 262, 263, 913, 911, 912, 919,
	915, 914, 918, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 953, 954, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 963, 298, 299, 495, 496, 300,
	301, 0, 302, 960, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 924, 925, 928, 361, 965, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 964, 317, 502, 503, 0, 504, 0,
	319, 966, 926, 967, 320, 321, 322, 968, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 961, 969, 332, 333, 970, 0, 334, 335,
	336, 917, 916, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 971, 353, 354, 357, 358, 356, 972, 355, 0,
	224, 973, 359, 0, 927, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 974, 371, 975, 955, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 956, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 976, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	920, 427, 411, 412, 428, 429, 977, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 957, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 958,
	455, 959, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 921, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 847, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	188, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 190, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 1336, 527, 528, 0, 474, 473, 529, 219,
	0, 0, 182, 475, 476, 530, 477, 478, 479, 0,
	183, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 157, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 1284, 0, 219, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 1651, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 1288, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 2853, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 1288, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 219, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 2443, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	219, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 2993, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 0, 714, 0, 608, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 1898, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 614, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 712, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 613, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 607, 0, 608, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 617, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 614, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 613,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 605, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1197, 1196, 0, 0, 0, 0, 1194, 0, 0,
	0, 0, 0, 0, 0, 0, 617, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1169, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 962, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 963, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 964, 317, 502,
	503, 0, 504, 0, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 969, 332, 333,
	970, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 0, 0, 973, 359, 3135, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 1197, 1196, 0, 0,
	0, 0, 1194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 1169,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 964, 317, 502, 503, 0, 504, 0, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 969, 332, 333, 970, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 0, 0,
	973, 359, 2833, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 608, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 614, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 223, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	224, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 1932, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	613, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 608, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 617, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 614, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 613, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 1369, 0, 1197, 1196, 0, 0, 0,
	0, 1194, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 1169, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 962, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	1368, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 963, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 965, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 964, 317, 502, 503, 0, 504, 0, 319, 966,
	505, 967, 320, 321, 322, 968, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 969, 332, 333, 970, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 971,
	353, 354, 357, 358, 356, 972, 355, 0, 0, 973,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 974, 371, 975, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 1367, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 976, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 1366, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 977, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	1330, 0, 1197, 1196, 0, 0, 0, 0, 1194, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1169, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1329, 500,
	501, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 505, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 969, 332,
	333, 970, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 0, 973, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 1263, 0, 1197,
	1196, 0, 0, 0, 0, 1194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 1169, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 962, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 963, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 1262, 500, 501, 361, 965,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 964, 317, 502, 503, 0,
	504, 0, 319, 966, 505, 967, 320, 321, 322, 968,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 969, 332, 333, 970, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 971, 353, 354, 357, 358, 356, 972,
	355, 0, 0, 973, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 974, 371, 975, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 976,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 977, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 1192, 0, 1197, 1196, 0, 0,
	0, 0, 1194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 1169,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 962, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 963, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1191, 500, 501, 361, 965, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 964, 317, 502, 503, 0, 504, 0, 319,
	966, 505, 967, 320, 321, 322, 968, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 969, 332, 333, 970, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	971, 353, 354, 357, 358, 356, 972, 355, 0, 0,
	973, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 974, 371, 975, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 976, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 977, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 1197, 1196, 0, 0, 0, 0, 1194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 1169, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 962, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 963, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 965, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 964, 317, 502,
	503, 0, 504, 0, 319, 966, 505, 967, 320, 321,
	322, 968, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 969, 332, 333,
	970, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 971, 353, 354, 357, 358,
	356, 972, 355, 0, 0, 973, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 974, 371, 975,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 976, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	977, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1197, 1196, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 617, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	1169, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 962, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 1716, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 222, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 963, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 965, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 964, 317, 502, 503, 0, 504, 0,
	319, 966, 505, 967, 320, 321, 322, 968, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 969, 332, 333, 970, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 971, 353, 354, 357, 358, 356, 972, 355, 0,
	0, 973, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 974, 371, 975, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 976, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 977, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1197, 1196, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 1169, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 964, 317,
	502, 503, 0, 504, 0, 319, 966, 505, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 969, 332,
	333, 970, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 0, 973, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 974, 371,
	975, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 977, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 1197, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 1169, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 962,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	963, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 965, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 964,
	317, 502, 503, 0, 504, 0, 319, 966, 505, 967,
	320, 321, 322, 968, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 969,
	332, 333, 970, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 971, 353, 354,
	357, 358, 356, 972, 355, 0, 0, 973, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 974,
	371, 975, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 976, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 977, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 2318, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 2315, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 2322, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 2481, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 2321,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 2478, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 2480, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 2477, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 2320, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 2479, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 2318, 244, 245, 488, 0, 0, 2312,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 2315, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 2322,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	2321, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 2311, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 2320, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 2319, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1426, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 1429,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 1427, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 1428, 473, 529, 1173, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 1175, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 1011, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 1170, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1172, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 1011, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1076, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 1078,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	1011, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 559, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	558, 229, 548, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 551, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 552, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 553, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 547, 0, 219, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 548,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 551, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 552, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 553, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 2815, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 1011, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 2415, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 2414, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1908, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 1836, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1841,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 1840, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 1829, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 222, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 1831, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 223,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 224, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 1326, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 1325, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	1317, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 222, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 1316, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 223, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 224, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 1314, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 222, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 1313, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	223, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 224, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 1310, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1309, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 1265, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 1184, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 222,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 1186, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 223, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 224, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	222, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 223, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 224, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 551, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 552, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 553, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 1939, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 222, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 223, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 224, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 1937, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 222, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 223, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 224, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 1935, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 222, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 223, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 224, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 222, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 1879, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 223, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 224,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 705, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 704, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 703, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 2481, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 3340, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 538,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 537, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 536, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 219, 3349, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 219, 2468, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 3123, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 2240, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 219, 2468,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 2465, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 1916, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	0, 474, 473, 529, 1906, 0, 219, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 414, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 0, 474, 473,
	529, 579, 0, 219, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 1050,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	1048, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 580, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 576, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 1051, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 575, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 0, 474, 473, 529, 579, 0,
	219, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	569, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 580, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 576, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 1341, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 575, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 0, 474, 473, 529, 1323, 0, 219, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 1322, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 427, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 0, 474,
	473, 529, 1272, 0, 219, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	1271, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 1256,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 1255, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 1251, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 1178, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	579, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 1050, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 1048,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 580, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 576, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 1051, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 575, 521, 522, 523, 0,
	459, 0, 453, 1049, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 1032, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 499,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 585, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	499, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 0, 474, 473, 529, 579,
	0, 219, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 569, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	567, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 568, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 580, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 570, 409, 0, 410,
	414, 415, 576, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 571, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 575, 521, 522, 523, 0, 459,
	0, 453, 573, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 0, 474, 473, 529, 563, 0, 219, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 499, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 564, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 0,
	474, 473, 529, 561, 0, 219, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 499, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 0, 474, 473, 529,
	555, 0, 219, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 499, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 0, 474, 473, 529, 533, 0, 219,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 499, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	393, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	303, 0, 304, 305, 306, 307, 308, 2868, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 390, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 409, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 219, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 481, 482, 0, 483, 237, 484, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 485, 486, 487,
	0, 244, 245, 488, 0, 0, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 0, 268, 489, 490, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 276, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 491, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	494, 0, 0, 0, 296, 0, 297, 0, 0, 0,
	298, 299, 495, 496, 300, 301, 0, 302, 497, 0,
	498, 303, 0, 304, 305, 306, 307, 308, 2791, 500,
	501, 361, 0, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 0, 317,
	502, 503, 0, 504, 0, 319, 0, 505, 0, 320,
	321, 322, 0, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 506, 0, 332,
	333, 0, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 0, 353, 354, 357,
	358, 356, 0, 355, 0, 0, 0, 359, 0, 507,
	360, 508, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 509, 0, 371,
	0, 510, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 511, 512, 513, 382, 514, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 515, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 0, 405, 406, 407, 408, 516, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 0, 430, 431, 517, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 518, 438, 439, 440, 441,
	519, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 520, 521, 522, 523, 0,
	459, 0, 453, 454, 524, 455, 525, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	526, 527, 528, 219, 474, 473, 529, 0, 0, 0,
	0, 475, 476, 530, 477, 478, 479, 0, 0, 0,
	225, 226, 227, 228, 229, 0, 230, 231, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 232, 234,
	233, 235, 236, 481, 482, 0, 483, 237, 484, 0,
	238, 239, 240, 241, 242, 0, 0, 243, 485, 486,
	487, 0, 244, 245, 488, 0, 0, 0, 246, 247,
	248, 249, 250, 251, 252, 0, 0, 254, 255, 256,
	253, 0, 257, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 266, 267, 0, 268, 489, 490, 0, 272, 269,
	270, 0, 273, 271, 0, 274, 0, 0, 275, 276,
	277, 0, 278, 0, 279, 280, 0, 281, 282, 491,
	283, 284, 286, 288, 285, 289, 290, 291, 292, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	295, 494, 0, 0, 0, 296, 0, 297, 0, 0,
	0, 298, 299, 495, 496, 300, 301, 0, 302, 497,
	0, 498, 303, 0, 304, 305, 306, 307, 308, 2789,
	500, 501, 361, 0, 309, 310, 0, 311, 312, 313,
	314, 0, 0, 0, 0, 315, 316, 318, 0, 0,
	317, 502, 503, 0, 504, 0, 319, 0, 505, 0,
	320, 321, 322, 0, 323, 0, 0, 0, 324, 325,
	326, 327, 328, 0, 330, 329, 0, 331, 506, 0,
	332, 333, 0, 0, 334, 335, 336, 0, 0, 337,
	338, 339, 340, 0, 341, 342, 344, 346, 343, 345,
	350, 347, 348, 349, 352, 0, 351, 0, 353, 354,
	357, 358, 356, 0, 355, 0, 0, 0, 359, 0,
	507, 360, 508, 362, 363, 0, 0, 364, 0, 0,
	0, 366, 367, 368, 0, 0, 369, 370, 509, 0,
	371, 0, 510, 372, 365, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 381, 511, 512, 513, 382, 514,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 390,
	391, 392, 515, 393, 394, 0, 0, 0, 0, 0,
	0, 395, 0, 397, 398, 399, 396, 400, 401, 402,
	403, 0, 404, 0, 405, 406, 407, 408, 516, 409,
	0, 410, 414, 415, 416, 417, 418, 419, 420, 0,
	422, 423, 421, 424, 425, 426, 0, 427, 411, 412,
	428, 429, 0, 430, 431, 517, 0, 432, 0, 433,
	434, 435, 436, 413, 437, 442, 518, 438, 439, 440,
	441, 519, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 287, 451, 0, 452, 520, 521, 522, 523,
	0, 459, 0, 453, 454, 524, 455, 525, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 467, 465, 468, 0, 469, 0, 0, 470, 471,
	472, 526, 527, 528, 219, 474, 473, 529, 0, 0,
	0, 0, 475, 476, 530, 477, 478, 479, 0, 0,
	0, 225, 226, 227, 228, 229, 0, 230, 231, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 232,
	234, 233, 235, 236, 481, 482, 0, 483, 237, 484,
	0, 238, 239, 240, 241, 242, 0, 0, 243, 485,
	486, 487, 0, 244, 245, 488, 0, 0, 0, 246,
	247, 248, 249, 250, 251, 252, 0, 0, 254, 255,
	256, 253, 0, 257, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 0, 0, 0, 0, 0, 0,
	264, 265, 266, 267, 0, 268, 489, 490, 0, 272,
	269, 270, 0, 273, 271, 0, 274, 0, 0, 275,
	276, 277, 0, 278, 0, 279, 280, 0, 281, 282,
	491, 283, 284, 286, 288, 285, 289, 290, 291, 292,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 295, 494, 0, 0, 0, 296, 0, 297, 0,
	0, 0, 298, 299, 495, 496, 300, 301, 0, 302,
	497, 0, 498, 303, 0, 304, 305, 306, 307, 308,
	2775, 500, 501, 361, 0, 309, 310, 0, 311, 312,
	313, 314, 0, 0, 0, 0, 315, 316, 318, 0,
	0, 317, 502, 503, 0, 504, 0, 319, 0, 505,
	0, 320, 321, 322, 0, 323, 0, 0, 0, 324,
	325, 326, 327, 328, 0, 330, 329, 0, 331, 506,
	0, 332, 333, 0, 0, 334, 335, 336, 0, 0,
	337, 338, 339, 340, 0, 341, 342, 344, 346, 343,
	345, 350, 347, 348, 349, 352, 0, 351, 0, 353,
	354, 357, 358, 356, 0, 355, 0, 0, 0, 359,
	0, 507, 360, 508, 362, 363, 0, 0, 364, 0,
	0, 0, 366, 367, 368, 0, 0, 369, 370, 509,
	0, 371, 0, 510, 372, 365, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 381, 511, 512, 513, 382,
	514, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	390, 391, 392, 515, 393, 394, 0, 0, 0, 0,
	0, 0, 395, 0, 397, 398, 399, 396, 400, 401,
	402, 403, 0, 404, 0, 405, 406, 407, 408, 516,
	409, 0, 410, 414, 415, 416, 417, 418, 419, 420,
	0, 422, 423, 421, 424, 425, 426, 0, 427, 411,
	412, 428, 429, 0, 430, 431, 517, 0, 432, 0,
	433, 434, 435, 436, 413, 437, 442, 518, 438, 439,
	440, 441, 519, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 287, 451, 0, 452, 520, 521, 522,
	523, 0, 459, 0, 453, 454, 524, 455, 525, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 467, 465, 468, 0, 469, 0, 0, 470,
	471, 472, 526, 527, 528, 219, 474, 473, 529, 0,
	0, 0, 0, 475, 476, 530, 477, 478, 479, 0,
	0, 0, 225, 226, 227, 228, 229, 0, 230, 231,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	232, 234, 233, 235, 236, 481, 482, 0, 483, 237,
	484, 0, 238, 239, 240, 241, 242, 0, 0, 243,
	485, 486, 487, 0, 244, 245, 488, 0, 0, 0,
	246, 247, 248, 249, 250, 251, 252, 0, 0, 254,
	255, 256, 253, 0, 257, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 0, 0, 0, 0, 0,
	0, 264, 265, 266, 267, 0, 268, 489, 490, 0,
	272, 269, 270, 0, 273, 271, 0, 274, 0, 0,
	275, 276, 277, 0, 278, 0, 279, 280, 0, 281,
	282, 491, 283, 284, 286, 288, 285, 289, 290, 291,
	292, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	293, 294, 295, 494, 0, 0, 0, 296, 0, 297,
	0, 0, 0, 298, 299, 495, 496, 300, 301, 0,
	302, 497, 0, 498, 303, 0, 304, 305, 306, 307,
	308, 2423, 500, 501, 361, 0, 309, 310, 0, 311,
	312, 313, 314, 0, 0, 0, 0, 315, 316, 318,
	0, 0, 317, 502, 503, 0, 504, 0, 319, 0,
	505, 0, 320, 321, 322, 0, 323, 0, 0, 0,
	324, 325, 326, 327, 328, 0, 330, 329, 0, 331,
	506, 0, 332, 333, 0, 0, 334, 335, 336, 0,
	0, 337, 338, 339, 340, 0, 341, 342, 344, 346,
	343, 345, 350, 347, 348, 349, 352, 0, 351, 0,
	353, 354, 357, 358, 356, 0, 355, 0, 0, 0,
	359, 0, 507, 360, 508, 362, 363, 0, 0, 364,
	0, 0, 0, 366, 367, 368, 0, 0, 369, 370,
	509, 0, 371, 0, 510, 372, 365, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 381, 511, 512, 513,
	382, 514, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 390, 391, 392, 515, 393, 394, 0, 0, 0,
	0, 0, 0, 395, 0, 397, 398, 399, 396, 400,
	401, 402, 403, 0, 404, 0, 405, 406, 407, 408,
	516, 409, 0, 410, 414, 415, 416, 417, 418, 419,
	420, 0, 422, 423, 421, 424, 425, 426, 0, 427,
	411, 412, 428, 429, 0, 430, 431, 517, 0, 432,
	0, 433, 434, 435, 436, 413, 437, 442, 518, 438,
	439, 440, 441, 519, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 287, 451, 0, 452, 520, 521,
	522, 523, 0, 459, 0, 453, 454, 524, 455, 525,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 466, 467, 465, 468, 0, 469, 0, 0,
	470, 471, 472, 526, 527, 528, 219, 474, 473, 529,
	0, 0, 0, 0, 475, 476, 530, 477, 478, 479,
	0, 0, 0, 225, 226, 227, 228, 229, 0, 230,
	231, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 232, 234, 233, 235, 236, 481, 482, 0, 483,
	237, 484, 0, 238, 239, 240, 241, 242, 0, 0,
	243, 485, 486, 487, 0, 244, 245, 488, 0, 0,
	0, 246, 247, 248, 249, 250, 251, 252, 0, 0,
	254, 255, 256, 253, 0, 257, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 0, 0, 0, 0,
	0, 0, 264, 265, 266, 267, 0, 268, 489, 490,
	0, 272, 269, 270, 0, 273, 271, 0, 274, 0,
	0, 275, 276, 277, 0, 278, 0, 279, 280, 0,
	281, 282, 491, 283, 284, 286, 288, 285, 289, 290,
	291, 292, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 295, 494, 0, 0, 0, 296, 0,
	297, 0, 0, 0, 298, 299, 495, 496, 300, 301,
	0, 302, 497, 0, 498, 303, 0, 304, 305, 306,
	307, 308, 499, 500, 501, 361, 0, 309, 310, 0,
	311, 312, 313, 314, 0, 0, 0, 0, 315, 316,
	318, 0, 0, 317, 502, 503, 0, 504, 0, 319,
	0, 505, 0, 320, 321, 322, 0, 323, 0, 0,
	0, 324, 325, 326, 327, 328, 0, 330, 329, 0,
	331, 506, 0, 332, 333, 0, 0, 334, 335, 336,
	0, 0, 337, 338, 339, 340, 0, 341, 342, 344,
	346, 343, 345, 350, 347, 348, 349, 352, 0, 351,
	0, 353, 354, 357, 358, 356, 0, 355, 0, 0,
	0, 359, 0, 507, 360, 508, 362, 363, 0, 0,
	364, 0, 0, 0, 366, 367, 368, 0, 0, 369,
	370, 509, 0, 371, 0, 510, 372, 365, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 381, 511, 512,
	513, 382, 514, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 515, 393, 394, 0, 0,
	0, 0, 0, 0, 395, 0, 397, 398, 399, 396,
	400, 401, 402, 403, 0, 404, 0, 405, 406, 407,
	408, 516, 409, 0, 410, 564, 415, 416, 417, 418,
	419, 420, 0, 422, 423, 421, 424, 425, 426, 0,
	427, 411, 412, 428, 429, 0, 430, 431, 517, 0,
	432, 0, 433, 434, 435, 436, 413, 437, 442, 518,
	438, 439, 440, 441, 519, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 287, 451, 0, 452, 520,
	521, 522, 523, 0, 459, 0, 453, 454, 524, 455,
	525, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 467, 465, 468, 0, 469, 0,
	0, 470, 471, 472, 526, 527, 528, 219, 474, 473,
	529, 0, 0, 0, 0, 475, 476, 530, 477, 478,
	479, 0, 0, 0, 225, 226, 227, 228, 229, 0,
	230, 231, 0, 0, 0, 0, 0, 480, 0, 1861,
	0, 0, 232, 234, 233, 235, 236, 481, 482, 0,
	483, 237, 484, 0, 238, 239, 240, 241, 242, 0,
	0, 243, 485, 486, 487, 0, 244, 245, 488, 0,
	0, 0, 246, 247, 248, 249, 250, 251, 252, 0,
	0, 254, 255, 256, 253, 0, 257, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 266, 267, 0, 268, 489,
	490, 0, 272, 269, 270, 0, 273, 271, 0, 274,
	0, 0, 275, 276, 277, 0, 278, 0, 279, 280,
	0, 281, 282, 491, 283, 284, 286, 288, 285, 289,
	290, 291, 292, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 295, 494, 0, 0, 0, 296,
	0, 297, 0, 0, 0, 298, 299, 495, 496, 300,
	301, 0, 302, 497, 0, 498, 303, 0, 304, 305,
	306, 307, 308, 499, 500, 501, 361, 0, 309, 310,
	0, 311, 312, 313, 314, 0, 0, 0, 0, 315,
	316, 318, 0, 0, 317, 502, 503, 0, 504, 0,
	319, 0, 505, 0, 320, 321, 322, 0, 323, 0,
	0, 0, 324, 325, 326, 327, 328, 0, 330, 329,
	0, 331, 506, 0, 332, 333, 0, 0, 334, 335,
	336, 0, 0, 337, 338, 339, 340, 0, 341, 342,
	344, 346, 343, 345, 350, 347, 348, 349, 352, 0,
	351, 0, 353, 354, 357, 358, 356, 0, 355, 0,
	0, 0, 359, 0, 507, 360, 508, 362, 363, 0,
	0, 364, 0, 0, 0, 366, 367, 368, 0, 0,
	369, 370, 509, 0, 371, 0, 510, 372, 365, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 381, 511,
	512, 513, 382, 514, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 390, 391, 392, 515, 393, 394, 0,
	0, 0, 0, 0, 0, 395, 0, 397, 398, 399,
	396, 400, 401, 402, 403, 0, 404, 0, 405, 406,
	407, 408, 516, 409, 0, 410, 414, 415, 416, 417,
	418, 419, 420, 0, 422, 423, 421, 424, 425, 426,
	0, 0, 411, 412, 428, 429, 0, 430, 431, 517,
	0, 432, 0, 433, 434, 435, 436, 413, 437, 442,
	518, 438, 439, 440, 441, 519, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 287, 451, 0, 452,
	520, 521, 522, 523, 0, 459, 0, 453, 454, 524,
	455, 525, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 467, 465, 468, 0, 469,
	0, 0, 470, 471, 472, 526, 527, 528, 219, 474,
	473, 529, 0, 0, 0, 0, 475, 476, 530, 477,
	478, 479, 0, 0, 0, 225, 226, 227, 228, 229,
	0, 230, 231, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 232, 234, 233, 235, 236, 481, 482,
	0, 483, 237, 484, 0, 238, 239, 240, 241, 242,
	0, 0, 243, 485, 486, 487, 0, 244, 245, 488,
	0, 0, 0, 246, 247, 248, 249, 250, 251, 252,
	0, 0, 254, 255, 256, 253, 0, 257, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 266, 267, 0, 268,
	489, 490, 0, 272, 269, 270, 0, 273, 271, 0,
	274, 0, 0, 275, 276, 277, 0, 278, 0, 279,
	280, 0, 281, 282, 491, 283, 284, 286, 288, 285,
	289, 290, 291, 292, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 494, 0, 0, 0,
	296, 0, 297, 0, 0, 0, 298, 299, 495, 496,
	300, 301, 0, 302, 497, 0, 498, 303, 0, 304,
	305, 306, 307, 308, 1294, 500, 501, 361, 0, 309,
	310, 0, 311, 312, 313, 314, 0, 0, 0, 0,
	315, 316, 318, 0, 0, 317, 502, 503, 0, 504,
	0, 319, 0, 505, 0, 320, 321, 322, 0, 323,
	0, 0, 0, 324, 325, 326, 327, 328, 0, 330,
	329, 0, 331, 506, 0, 332, 333, 0, 0, 334,
	335, 336, 0, 0, 337, 338, 339, 340, 0, 341,
	342, 344, 346, 343, 345, 350, 347, 348, 349, 352,
	0, 351, 0, 353, 354, 357, 358, 356, 0, 355,
	0, 0, 0, 359, 0, 507, 360, 508, 362, 363,
	0, 0, 364, 0, 0, 0, 366, 367, 368, 0,
	0, 369, 370, 509, 0, 371, 0, 510, 372, 365,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 381,
	511, 512, 513, 382, 514, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 390, 391, 392, 515, 393, 394,
	0, 0, 0, 0, 0, 0, 395, 0, 397, 398,
	399, 396, 400, 401, 402, 403, 0, 404, 0, 405,
	406, 407, 408, 516, 409, 0, 410, 414, 415, 416,
	417, 418, 419, 420, 0, 422, 423, 421, 424, 425,
	426, 0, 427, 411, 412, 428, 429, 0, 430, 431,
	517, 0, 432, 0, 433, 434, 435, 436, 413, 437,
	442, 518, 438, 439, 440, 441, 519, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 287, 451, 0,
	452, 520, 521, 522, 523, 0, 459, 0, 453, 454,
	524, 455, 525, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 467, 465, 468, 0,
	469, 0, 0, 470, 471, 472, 526, 527, 528, 219,
	474, 473, 529, 0, 0, 0, 0, 475, 476, 530,
	477, 478, 479, 0, 0, 0, 225, 226, 227, 228,
	229, 0, 230, 231, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 232, 234, 233, 235, 236, 481,
	482, 0, 483, 237, 484, 0, 238, 239, 240, 241,
	242, 0, 0, 243, 485, 486, 487, 0, 244, 245,
	488, 0, 0, 0, 246, 247, 248, 249, 250, 251,
	252, 0, 0, 254, 255, 256, 253, 0, 257, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 0,
	0, 0, 0, 0, 0, 264, 265, 266, 267, 0,
	268, 489, 490, 0, 272, 269, 270, 0, 273, 271,
	0, 274, 0, 0, 275, 276, 277, 0, 278, 0,
	279, 280, 0, 281, 282, 491, 283, 284, 286, 288,
	285, 289, 290, 291, 292, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 295, 494, 0, 0,
	0, 296, 0, 297, 0, 0, 0, 298, 299, 495,
	496, 300, 301, 0, 302, 497, 0, 498, 303, 0,
	304, 305, 306, 307, 308, 1233, 500, 501, 361, 0,
	309, 310, 0, 311, 312, 313, 314, 0, 0, 0,
	0, 315, 316, 318, 0, 0, 317, 502, 503, 0,
	504, 0, 319, 0, 505, 0, 320, 321, 322, 0,
	323, 0, 0, 0, 324, 325, 326, 327, 328, 0,
	330, 329, 0, 331, 506, 0, 332, 333, 0, 0,
	334, 335, 336, 0, 0, 337, 338, 339, 340, 0,
	341, 342, 344, 346, 343, 345, 350, 347, 348, 349,
	352, 0, 351, 0, 353, 354, 357, 358, 356, 0,
	355, 0, 0, 0, 359, 0, 507, 360, 508, 362,
	363, 0, 0, 364, 0, 0, 0, 366, 367, 368,
	0, 0, 369, 370, 509, 0, 371, 0, 510, 372,
	365, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	381, 511, 512, 513, 382, 514, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 390, 391, 392, 515, 393,
	394, 0, 0, 0, 0, 0, 0, 395, 0, 397,
	398, 399, 396, 400, 401, 402, 403, 0, 404, 0,
	405, 406, 407, 408, 516, 409, 0, 410, 414, 415,
	416, 417, 418, 419, 420, 0, 422, 423, 421, 424,
	425, 426, 0, 427, 411, 412, 428, 429, 0, 430,
	431, 517, 0, 432, 0, 433, 434, 435, 436, 413,
	437, 442, 518, 438, 439, 440, 441, 519, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 287, 451,
	0, 452, 520, 521, 522, 523, 0, 459, 0, 453,
	454, 524, 455, 525, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 467, 465, 468,
	0, 469, 0, 0, 470, 471, 472, 526, 527, 528,
	219, 474, 473, 529, 0, 0, 0, 0, 475, 476,
	530, 477, 478, 479, 0, 0, 0, 225, 226, 227,
	228, 229, 0, 230, 231, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 232, 234, 233, 235, 236,
	481, 482, 0, 483, 237, 484, 0, 238, 239, 240,
	241, 242, 0, 0, 243, 485, 486, 487, 0, 244,
	245, 488, 0, 0, 0, 246, 247, 248, 249, 250,
	251, 252, 0, 0, 254, 255, 256, 253, 0, 257,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 266, 267,
	0, 268, 489, 490, 0, 272, 269, 270, 0, 273,
	271, 0, 274, 0, 0, 275, 276, 277, 0, 278,
	0, 279, 280, 0, 281, 282, 491, 283, 284, 286,
	288, 285, 289, 290, 291, 292, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 295, 494, 0,
	0, 0, 296, 0, 297, 0, 0, 0, 298, 299,
	495, 496, 300, 301, 0, 302, 497, 0, 498, 303,
	0, 304, 305, 306, 307, 308, 499, 500, 501, 361,
	0, 309, 310, 0, 311, 312, 313, 314, 0, 0,
	0, 0, 315, 316, 318, 0, 0, 317, 502, 503,
	0, 504, 0, 319, 0, 505, 0, 320, 321, 322,
	0, 323, 0, 0, 0, 324, 325, 326, 327, 328,
	0, 330, 329, 0, 331, 506, 0, 332, 333, 0,
	0, 334, 335, 336, 0, 0, 337, 338, 339, 340,
	0, 341, 342, 344, 346, 343, 345, 350, 347, 348,
	349, 352, 0, 351, 0, 353, 354, 357, 358, 356,
	0, 355, 0, 0, 0, 359, 0, 507, 360, 508,
	362, 363, 0, 0, 364, 0, 0, 0, 366, 367,
	368, 0, 0, 369, 370, 509, 0, 371, 0, 510,
	372, 365, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 381, 511, 512, 513, 382, 514, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 390, 391, 392, 515,
	984, 394, 0, 0, 0, 0, 0, 0, 395, 0,
	397, 398, 399, 396, 400, 401, 402, 403, 0, 404,
	0, 405, 406, 407, 408, 516, 409, 0, 410, 414,
	415, 416, 417, 418, 419, 420, 0, 422, 423, 421,
	424, 425, 426, 0, 427, 411, 412, 428, 429, 0,
	430, 431, 517, 0, 432, 0, 433, 434, 435, 436,
	413, 437, 442, 518, 438, 439, 440, 441, 519, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 287,
	451, 0, 452, 520, 521, 522, 523, 0, 459, 0,
	453, 454, 524, 455, 525, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 467, 465,
	468, 0, 469, 0, 0, 470, 471, 472, 526, 527,
	528, 219, 474, 473, 529, 0, 0, 0, 0, 475,
	476, 530, 477, 478, 479, 0, 0, 0, 225, 226,
	227, 228, 229, 0, 230, 231, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 232, 234, 233, 235,
	236, 481, 482, 0, 483, 237, 484, 0, 238, 239,
	240, 241, 242, 0, 0, 243, 485, 486, 487, 0,
	244, 245, 488, 0, 0, 0, 246, 247, 248, 249,
	250, 251, 252, 0, 0, 254, 255, 256, 253, 0,
	257, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 266,
	267, 0, 268, 489, 490, 0, 272, 269, 270, 0,
	273, 271, 0, 274, 0, 0, 275, 276, 277, 0,
	278, 0, 279, 280, 0, 281, 282, 491, 283, 284,
	286, 288, 285, 289, 290, 291, 292, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 494,
	0, 0, 0, 296, 0, 297, 0, 0, 0, 298,
	299, 495, 496, 300, 301, 0, 302, 497, 0, 498,
	0, 0, 304, 305, 306, 307, 308, 499, 500, 501,
	361, 0, 309, 310, 0, 311, 312, 313, 314, 0,
	0, 0, 0, 315, 316, 318, 0, 0, 317, 502,
	503, 0, 504, 0, 319, 0, 505, 0, 320, 321,
	322, 0, 323, 0, 0, 0, 324, 325, 326, 327,
	328, 0, 330, 329, 0, 331, 506, 0, 332, 333,
	0, 0, 334, 335, 336, 0, 0, 337, 338, 339,
	340, 0, 341, 342, 344, 346, 343, 345, 350, 347,
	348, 349, 352, 0, 351, 0, 353, 354, 357, 358,
	356, 0, 355, 0, 0, 0, 359, 0, 507, 360,
	508, 362, 363, 0, 0, 364, 0, 0, 0, 366,
	367, 368, 0, 0, 369, 370, 509, 0, 371, 0,
	510, 372, 365, 373, 374, 0, 376, 377, 378, 379,
	0, 380, 381, 511, 512, 513, 382, 514, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 0, 391, 392,
	515, 393, 394, 0, 0, 0, 0, 0, 0, 395,
	0, 397, 398, 399, 396, 400, 401, 402, 403, 0,
	404, 0, 405, 406, 407, 408, 516, 0, 0, 410,
	414, 415, 416, 417, 418, 419, 420, 0, 422, 423,
	421, 424, 425, 426, 0, 427, 411, 412, 428, 429,
	0, 430, 431, 517, 0, 432, 0, 433, 434, 435,
	436, 413, 437, 442, 518, 438, 439, 440, 441, 519,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	287, 451, 0, 452, 520, 521, 522, 523, 0, 459,
	0, 453, 454, 524, 455, 525, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 467,
	465, 468, 0, 469, 0, 0, 470, 471, 472, 526,
	527, 528, 1685, 474, 473, 529, 0, 0, 0, 0,
	475, 476, 530, 477, 478, 479, 0, 0, 0, 225,
	226, 227, 228, 229, 0, 230, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 234, 233,
	235, 236, 0, 1691, 0, 1681, 237, 1697, 0, 238,
	239, 240, 241, 242, 0, 0, 243, 1706, 1707, 0,
	0, 244, 245, 0, 0, 1169, 0, 246, 247, 248,
	249, 250, 251, 252, 0, 0, 254, 255, 256, 253,
	0, 257, 0, 258, 259, 260, 0, 261, 962, 262,
	263, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	266, 267, 946, 268, 1695, 1694, 0, 272, 269, 270,
	0, 273, 271, 0, 274, 0, 0, 275, 931, 277,
	0, 278, 0, 279, 280, 0, 281, 282, 0, 283,
	284, 286, 288, 285, 289, 290, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 295,
	1693, 0, 0, 0, 296, 0, 297, 0, 0, 963,
	298, 299, 1702, 1703, 300, 301, 0, 302, 0, 0,
	0, 303, 0, 304, 305, 306, 307, 308, 0, 0,
	0, 361, 965, 309, 310, 0, 311, 312, 313, 314,
	0, 0, 0, 0, 315, 316, 318, 0, 964, 317,
	1688, 1689, 0, 1684, 0, 319, 966, 0, 967, 320,
	321, 322, 968, 323, 0, 0, 0, 324, 325, 326,
	327, 328, 0, 330, 329, 0, 331, 0, 969, 332,
	333, 970, 0, 334, 335, 336, 0, 0, 337, 338,
	339, 340, 0, 341, 342, 344, 346, 343, 345, 350,
	347, 348, 349, 352, 0, 351, 971, 353, 354, 357,
	358, 356, 972, 355, 0, 0, 973, 359, 0, 0,
	360, 1696, 362, 363, 0, 0, 364, 0, 0, 0,
	366, 367, 368, 0, 0, 369, 370, 0, 974, 371,
	975, 0, 372, 365, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 381, 1678, 1679, 0, 382, 0, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 390, 391,
	392, 1692, 393, 394, 0, 0, 0, 0, 0, 0,
	395, 0, 397, 398, 399, 396, 400, 401, 402, 403,
	0, 404, 976, 405, 406, 407, 408, 0, 409, 0,
	410, 414, 415, 416, 417, 418, 419, 420, 0, 422,
	423, 421, 424, 425, 426, 0, 427, 411, 412, 428,
	429, 977, 430, 431, 1690, 0, 432, 0, 433, 434,
	435, 436, 413, 437, 442, 1705, 438, 439, 440, 441,
	0, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 287, 451, 0, 452, 1698, 1699, 1700, 1701, 0,
	459, 0, 453, 454, 0, 455, 0, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	467, 465, 468, 0, 469, 0, 0, 470, 471, 472,
	0, 1682, 1704, 0, 474, 473, 0, 0, 0, 0,
	0, 475, 476, 0, 477, 478, 479, 1471, 1472, 0,
	1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1502, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 0,
	1507, 1502, 1493, 0, 0, 0, 0, 0, 1474, 0,
	1490, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 1497, 1498, 1499, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 1521, 1496, 1497, 1498, 1499, 0, 1501,
	1503, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 0, 1518, 0, 0, 0,
	0, 0, 0, 1488, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1521, 0, 0, 1509,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	1507, 1502, 1500, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1485, 1486,
	1492, 1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476,
	1477, 1478, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 2624, 0, 1496, 1497, 1498, 1499, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 1510, 0,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 0,
	0, 0, 0, 1511, 0, 2623, 1521, 0, 0, 0,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 0,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	1507, 1502, 0, 1494, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 1508, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 1472, 0, 1504, 1505,
	1506, 1514, 1515, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 1507, 1502, 0, 0, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 1520, 0,
	1495, 0, 0, 0, 1496, 1497, 1498, 1499, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	1473, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 1511, 0, 0, 1521, 0, 0, 0,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 1496,
	1497, 1498, 1499, 1494, 0, 0, 0, 0, 1510, 1479,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 1519, 0, 0,
	0, 0, 0, 0, 0, 2622, 0, 0, 1511, 0,
	0, 1521, 0, 0, 1508, 0, 0, 1501, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 0, 1518, 0, 0, 0, 0, 0,
	0, 1488, 1489, 0, 0, 1471, 1472, 0, 1504, 1505,
	1506, 1514, 1515, 1516, 0, 0, 0, 1509, 0, 0,
	0, 0, 1500, 0, 0, 1507, 1502, 0, 1494, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 1520, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1512, 0, 0, 0, 0, 0, 0, 1508,
	1493, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 1496,
	1497, 1498, 1499, 0, 0, 0, 0, 0, 1510, 1479,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 1512, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 0,
	0, 0, 0, 0, 0, 2094, 0, 0, 1511, 0,
	0, 1521, 0, 0, 0, 0, 0, 1501, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 0, 1518, 0, 0, 0, 0, 0,
	0, 1488, 1489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1494, 0,
	0, 0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513,
	1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478,
	1480, 1481, 1519, 0, 0, 0, 3627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1502, 0, 0, 0, 0, 1500, 0, 1474,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1471, 1472, 0,
	1504, 1505, 1506, 1514, 1515, 1516, 1493, 1512, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 1507, 1502, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 1496, 1497, 1498, 1499, 0,
	0, 0, 0, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513,
	1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478,
	1480, 1481, 0, 0, 1511, 0, 3623, 1521, 0, 0,
	0, 0, 0, 1501, 1503, 0, 0, 0, 0, 0,
	0, 1496, 1497, 1498, 1499, 0, 0, 0, 1517, 0,
	1518, 1479, 0, 0, 0, 0, 0, 1488, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 1521, 1494, 0, 0, 0, 0, 1501,
	1503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 0, 1518, 0, 1519, 0,
	0, 0, 0, 1488, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 1472, 0, 1504, 1505, 1506, 1514,
	1515, 1516, 0, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1502, 0, 0, 0, 0, 1500,
	0, 1474, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 1512,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484,
	1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0,
	0, 0, 3541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 1497, 1498,
	1499, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1485, 1486,
	1492, 1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476,
	1477, 1478, 1480, 1481, 0, 0, 1511, 0, 3540, 1521,
	0, 0, 0, 0, 0, 1501, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 0, 1518, 0, 0, 0, 0, 0, 0, 1488,
	1489, 0, 0, 1471, 1472, 0, 1504, 1505, 1506, 1514,
	1515, 1516, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 1507, 1502, 0, 1494, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 1493, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 1472,
	0, 1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 1507, 1502,
	0, 0, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 1520, 0, 1495, 0, 0, 0, 1496, 1497, 1498,
	1499, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	0, 0, 0, 1473, 0, 1512, 0, 0, 0, 0,
	0, 0, 0, 1493, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 1511, 0, 0, 1521,
	0, 0, 0, 0, 0, 1501, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 0, 1518, 0, 0, 0, 0, 0, 0, 1488,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 1496, 1497, 1498, 1499, 1494, 0, 0, 0,
	0, 1510, 1479, 0, 1485, 1486, 1492, 1513, 1491, 1487,
	0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	1519, 0, 0, 0, 3410, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 1521, 0, 0, 1508, 0, 0,
	1501, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 1518, 0, 0,
	0, 0, 0, 0, 1488, 1489, 0, 0, 1471, 1472,
	0, 1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0,
	1509, 0, 0, 0, 0, 1500, 0, 0, 1507, 1502,
	0, 1494, 0, 0, 0, 0, 1474, 0, 0, 0,
	0, 1520, 0, 1495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1512, 0, 0, 0, 0,
	0, 0, 1508, 1493, 0, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 1496, 1497, 1498, 1499, 0, 0, 0, 0,
	0, 1510, 1479, 0, 1485, 1486, 1492, 1513, 1491, 1487,
	1512, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 0, 0, 3302, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 1521, 0, 0, 0, 0, 0,
	1501, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 1518, 0, 0,
	0, 0, 0, 0, 1488, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 0, 0, 0, 1510, 0, 0, 1485,
	1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483, 1475,
	1476, 1477, 1478, 1480, 1481, 1519, 0, 0, 0, 3250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 1472, 0, 1504, 1505, 1506,
	1514, 1515, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1502, 0, 0, 0, 0,
	1500, 0, 1474, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 1493,
	1512, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	1507, 1502, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1496, 1497,
	1498, 1499, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 1510, 0, 0, 1485,
	1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483, 1475,
	1476, 1477, 1478, 1480, 1481, 0, 0, 1511, 0, 3249,
	1521, 0, 0, 0, 0, 0, 1501, 1503, 0, 0,
	0, 0, 0, 0, 1496, 1497, 1498, 1499, 0, 0,
	0, 1517, 0, 1518, 1479, 0, 0, 0, 0, 0,
	1488, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1521, 1494, 0, 0,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 1519, 0, 0, 0, 0, 1488, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 1508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 1472, 0, 1504,
	1505, 1506, 1514, 1515, 1516, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1502, 0, 0,
	0, 0, 1500, 0, 1474, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1493, 1512, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513, 1491,
	1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480,
	1481, 0, 0, 0, 0, 3248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 1497, 1498, 1499, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 1511,
	0, 2997, 1521, 0, 0, 0, 0, 0, 1501, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 1518, 0, 0, 0, 0,
	0, 0, 1488, 1489, 0, 0, 1471, 1472, 0, 1504,
	1505, 1506, 1514, 1515, 1516, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 0, 0, 1507, 1502, 0, 1494,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 1493, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516,
	0, 0, 0, 0, 0, 0, 0, 0, 1500, 0,
	0, 1507, 1502, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 1520, 0, 1495, 0, 0, 0,
	1496, 1497, 1498, 1499, 0, 0, 0, 0, 0, 0,
	1479, 0, 0, 0, 0, 0, 1473, 0, 1512, 0,
	0, 0, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 1511,
	0, 0, 1521, 0, 0, 0, 0, 0, 1501, 1503,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1517, 0, 1518, 0, 0, 0, 0,
	0, 0, 1488, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1509, 0,
	0, 0, 0, 0, 0, 1496, 1497, 1498, 1499, 1494,
	0, 0, 0, 0, 1510, 1479, 0, 1485, 1486, 1492,
	1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 1519, 0, 0, 0, 2620, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 1521, 0, 0,
	1508, 0, 0, 1501, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 0,
	1518, 0, 0, 0, 0, 0, 0, 1488, 1489, 0,
	0, 1471, 1472, 0, 1504, 1505, 1506, 1514, 1515, 1516,
	0, 0, 0, 1509, 0, 0, 0, 0, 1500, 0,
	0, 1507, 1502, 0, 1494, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 1520, 0, 1495, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1512, 0,
	0, 0, 0, 0, 0, 1508, 1493, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 1496, 1497, 1498, 1499, 0,
	0, 0, 0, 0, 1510, 1479, 0, 1485, 1486, 1492,
	1513, 1491, 1487, 1512, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 0, 0, 0, 0, 2619, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 1521, 0, 0,
	0, 0, 0, 1501, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1517, 0,
	1518, 0, 0, 0, 0, 0, 0, 1488, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 0, 0, 0, 0, 1510,
	0, 0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484,
	1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 1519, 0,
	0, 0, 2618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 1472, 0,
	1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1502, 0,
	0, 0, 0, 1500, 0, 1474, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1495, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1471, 1472, 0, 1504, 1505, 1506, 1514,
	1515, 1516, 1493, 1512, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1507, 1502, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1493, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 1496, 1497, 1498, 1499, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 0, 1510,
	0, 0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484,
	1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0, 0,
	1511, 0, 2617, 1521, 0, 0, 0, 0, 0, 1501,
	1503, 0, 0, 0, 0, 0, 0, 1496, 1497, 1498,
	1499, 0, 0, 0, 1517, 0, 1518, 1479, 3737, 0,
	0, 0, 0, 1488, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1509,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 1521,
	1494, 0, 0, 0, 0, 1501, 1503, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1517, 0, 1518, 0, 1519, 0, 0, 0, 0, 1488,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3736, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1495, 0, 0, 0, 0, 0, 1471,
	1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0, 0,
	0, 0, 0, 0, 0, 1512, 0, 0, 0, 1507,
	1502, 0, 0, 0, 0, 2555, 0, 1474, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1510, 0, 0, 1485, 1486,
	1492, 1513, 1491, 1487, 1473, 1484, 1482, 1483, 1475, 1476,
	1477, 1478, 1480, 1481, 1493, 0, 2584, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 2556, 1485, 1486, 1492, 1513, 1491, 1487,
	0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 1497, 1498, 1499, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 1471, 1472, 0, 1504,
	1505, 1506, 1514, 1515, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1502, 0, 0,
	0, 0, 1511, 0, 1474, 1521, 0, 0, 0, 1520,
	0, 1501, 1503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1517, 0, 1518, 0,
	0, 1473, 0, 0, 0, 1488, 1489, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 1509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 0, 0, 0, 0, 0,
	1496, 1497, 1498, 1499, 0, 0, 0, 0, 0, 0,
	1479, 0, 2680, 0, 0, 2679, 0, 0, 2214, 0,
	0, 0, 0, 0, 0, 1471, 1472, 0, 1504, 1505,
	1506, 1514, 1515, 1516, 0, 0, 0, 0, 0, 1511,
	0, 1500, 1521, 0, 0, 1507, 1502, 0, 1501, 1503,
	2213, 0, 0, 1474, 0, 0, 0, 0, 1520, 1495,
	0, 0, 0, 1517, 0, 1518, 0, 0, 0, 0,
	0, 0, 1488, 1489, 0, 0, 0, 0, 0, 0,
	1473, 1512, 0, 0, 0, 0, 0, 0, 1509, 0,
	1493, 0, 0, 0, 0, 0, 0, 0, 1490, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	1497, 1498, 1499, 0, 0, 0, 0, 1510, 0, 1479,
	1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483,
	1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 1521, 0, 0, 0, 0, 1495, 1501, 1503, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1517, 0, 1518, 0, 0, 0, 1512, 0,
	0, 1488, 1489, 0, 0, 1471, 1472, 0, 1504, 1505,
	1506, 1514, 1515, 1516, 0, 0, 0, 1509, 0, 0,
	0, 0, 0, 0, 0, 1507, 1502, 0, 1494, 0,
	0, 0, 0, 1474, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	1493, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 1510, 0, 0, 1485, 1486, 1492,
	1513, 1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477,
	1478, 1480, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 1496,
	1497, 1498, 1499, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 1512, 0, 0,
	0, 0, 0, 0, 1471, 1472, 0, 1504, 1505, 1506,
	1514, 1515, 1516, 0, 0, 0, 0, 0, 1511, 0,
	0, 1521, 0, 0, 1507, 1502, 0, 1501, 1503, 0,
	0, 0, 1474, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 1517, 0, 1518, 0, 0, 0, 0, 0,
	0, 1488, 1489, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 0, 1509, 0, 1493,
	0, 0, 0, 0, 0, 0, 0, 1490, 1494, 0,
	0, 0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513,
	1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478,
	1480, 1481, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	844, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 1497,
	1498, 1499, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	1521, 0, 0, 0, 0, 1495, 1501, 1503, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 1518, 0, 0, 0, 1512, 0, 0,
	1488, 1489, 0, 0, 1471, 1472, 0, 1504, 1505, 1506,
	1514, 1515, 1516, 0, 0, 0, 1509, 0, 0, 0,
	0, 0, 0, 0, 1507, 1502, 0, 1494, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 1493,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513,
	1491, 1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478,
	1480, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1495, 0, 0, 0, 1496, 1497,
	1498, 1499, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 0, 0, 2686, 0, 0, 1512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	1521, 0, 0, 0, 0, 0, 1501, 1503, 2979, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1517, 0, 1518, 0, 0, 0, 0, 0, 0,
	1488, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1509, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 0,
	0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513, 1491,
	1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480,
	1481, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	1472, 0, 1504, 1505, 1506, 1514, 1515, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1502, 0, 0, 0, 2681, 0, 1500, 1474, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 1472, 1495, 1504, 1505, 1506, 1514, 1515,
	1516, 0, 0, 0, 1473, 0, 0, 0, 0, 0,
	0, 0, 1507, 1502, 1493, 0, 1512, 0, 0, 0,
	1474, 0, 1490, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 1497, 1498, 1499, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 0, 1485, 1486, 1492, 1513, 1491,
	1487, 0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480,
	1481, 0, 1511, 0, 0, 1521, 1496, 1497, 1498, 1499,
	0, 1501, 1503, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1517, 0, 1518, 0,
	0, 0, 0, 0, 0, 1488, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 1521, 0,
	0, 1509, 0, 0, 1501, 1503, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 0, 0, 0, 1517,
	0, 1518, 0, 0, 0, 0, 0, 0, 1488, 1489,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 0, 0, 1509, 0, 0, 0, 0, 0,
	0, 0, 0, 1508, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2648, 0, 0, 1471, 1472, 1495,
	1504, 1505, 1506, 1514, 1515, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1502, 0,
	0, 1512, 2621, 0, 1500, 1474, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 1512, 0, 0, 0, 0, 0,
	1490, 0, 0, 1471, 1472, 0, 1504, 1505, 1506, 1514,
	1515, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1502, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 1520, 1510, 0, 0,
	1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482, 1483,
	1475, 1476, 1477, 1478, 1480, 1481, 0, 0, 1473, 0,
	0, 1496, 1497, 1498, 1499, 0, 0, 0, 1493, 0,
	0, 1479, 0, 0, 0, 0, 1490, 0, 0, 0,
	1510, 0, 0, 1485, 1486, 1492, 1513, 1491, 1487, 0,
	1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0,
	1511, 0, 0, 1521, 0, 0, 0, 0, 0, 1501,
	1503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1517, 0, 1518, 0, 0, 0,
	0, 0, 0, 1488, 1489, 0, 0, 1496, 1497, 1498,
	1499, 0, 0, 0, 0, 0, 0, 1479, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 1471, 1472, 0, 1504, 1505, 1506, 1514, 1515,
	1516, 0, 0, 0, 0, 0, 1511, 0, 0, 1521,
	0, 0, 1507, 1502, 1519, 1501, 1503, 0, 0, 0,
	1474, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	1517, 1508, 1518, 0, 0, 0, 0, 0, 0, 1488,
	1489, 0, 0, 0, 0, 0, 0, 1473, 0, 0,
	0, 0, 0, 0, 0, 1509, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 1490, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 1495, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 0, 0, 0, 1496, 1497, 1498, 1499,
	0, 0, 0, 0, 0, 0, 1479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 1521, 0,
	0, 0, 0, 1495, 1501, 1503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1517,
	0, 1518, 0, 0, 0, 1512, 0, 0, 1488, 1489,
	0, 0, 0, 0, 0, 1510, 0, 0, 1485, 1486,
	1492, 1513, 1491, 1487, 1509, 1484, 1482, 1483, 1475, 1476,
	1477, 1478, 1480, 1481, 0, 1494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1510, 0, 0, 1485, 1486, 1492, 1513, 1491, 1487,
	0, 1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 1472, 1495, 1504, 1505, 1506, 1514, 1515, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 0, 0, 1512, 0, 0, 0, 1474, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 0, 1485, 1486, 1492, 1513, 1491, 1487, 0,
	1484, 1482, 1483, 1475, 1476, 1477, 1478, 1480, 1481, 0,
	0, 0, 0, 0, 1496, 1497, 1498, 1499, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1521, 0, 0, 0,
	0, 0, 1501, 1503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1517, 0, 1518,
	0, 0, 0, 0, 0, 0, 1488, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1510, 0,
	0, 1485, 1486, 1492, 1513, 1491, 1487, 0, 1484, 1482,
	1483, 1475, 1476, 1477, 1478, 1480, 1481,
}
var sqlPact = [...]int{

	8330, -1000, -1000, -1000, -1000, -1000, -1000, 203, 201, 200,
	199, 198, 197, 196, 195, -1000, -1000, -1000, -1000, -1000,
	-1000, 193, -1000, -1000, 190, -1000, 189, 188, 187, 186,
	-1000, 178, 165, 161, -1000, -1000, -1000, -1000, 159, 158,
	157, 62267, 1870, 75605, 65807, 1731, 56033, 75158, 55586, 74711,
	74264, 156, -1000, 73817, 153, 150, 149, -1000, 73370, -1000,
	1548, -1000, 148, 3708, 46622, 143, 141, 139, 1964, 136,
	-1000, 134, -1000, 10995, 1419, -1000, 128, -1000, 9371, 526,
	64919, 2389, 126, 125, 46174, 2304, 2368, -1000, -1000, 1719,
	-1000, -1000, 124, 119, 117, 115, 114, 113, 110, 109,
	108, -1000, 106, 104, 102, 101, 100, 95, 92, -1000,
	90, 89, 87, 86, 85, 80, 79, 77, 75, 74,
	68, 67, -1000, 11305, 1473, 1408, 1405, 1394, 1389, 1381,
	887, 66, 64, 62, 61, 60, 59, 58, -1000, 56,
	54, 53, 50, 49, 45, 43, 42, 163, 41, 40,
	35, 34, 26, 23, 2929, -1000, 1412, 651, 22522, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 80456, 76046, 21, -26, 20, -1000, 2712, 913,
	38556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 457, -1000, -1000, -1000, 269, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1827, 696, -1000, -1000, -1000, 72929, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1868, 2, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 695, -1000, 1866, 174, 1782, -1000,
	-1000, -1000, -1000, -1000, 76046, -1000, -1000, 3078, 3077, 1740,
	693, 72488, -1000, 1438, -1000, 842, 25354, -1000, 1147, -1000,
	25354, 268, -1000, -1000, -1000, -1000, -1000, -1000, 3076, 3075,
	3073, 3071, -1000, -1000, 55139, 16826, 54692, 54245, 72041, 16369,
	61826, 50242, -1000, -1000, -1000, 41273, 1044, -1000, -1000, -1000,
	-1000, -1000, -4, 51138, 76046, -1000, 267, -1000, -1000, -1000,
	-1000, -1000, -1000, 32066, 580, 31584, 449, 31102, 437, -1000,
	-1000, -1000, 3069, 3068, 960, 3067, 2657, 80015, 1469, 3066,
	1471, 1024, 890, 3064, 3062, 3058, 3057, 3056, 3055, 1198,
	71594, 2401, 71147, 1404, 49785, 61379, 62267, 2126, 70700, 1180,
	1162, -1000, -1000, -1000, -1000, 2537, 2347, 2321, 43513, -1000,
	3054, 3052, 3050, 3049, 3048, 79574, 1456, 3046, 2037, 3042,
	3040, 3039, 3038, 3037, 3036, 3035, 3034, -1000, 60932, 60485,
	60038, 2772, 70253, 59591, 49328, -1000, -1000, -1000, 40357, 5731,
	4732, 69806, 41728, 62267, 62267, -1000, -1000, 32536, 194, -1000,
	-1000, -1000, 41273, 2349, -1000, 32536, 194, -1000, 76046, -1000,
	2400, 1630, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1881, 1384, 2901, 48871, 1671, 1228, 2729, 2523,
	2517, 1303, 2096, 2477, 2458, 2455, 2454, 2453, 1546, 2076,
	450, 22040, 1410, 1253, 2451, 2450, 2911, 1623, 1843, 53798,
	3033, 3032, 2700, 2443, 2423, 2331, -1000, -1000, -1000, -1000,
	1266, -1000, -1000, 56915, -1000, -1000, 1098, -1000, -1000, 1098,
	-1000, -1000, -1000, -1000, -1000, 1043, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1412, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2178, -1000, 1739, -1000, -1000,
	2075, 2689, 2689, 2689, 2751, 438, 432, -1000, 163, -1000,
	-1000, 87262, -1000, -1000, 32536, 32536, 32536, 32536, 32536, 1681,
	-1000, 692, -1000, -1000, 718, -1000, 691, 563, -1000, -1000,
	-1000, -1000, -1000, -1000, 685, -1000, -1000, -1000, -1000, -1000,
	-1000, 2870, -1000, 19160, -1000, -1000, -1000, 404, 684, 32536,
	-1000, -1000, 2933, 2932, 899, -1000, 266, 848, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2398, 683, 680, -1000, 679, 678, 674, 672, 671, -1000,
	-1000, -1000, 669, 668, 666, 662, 661, 660, 657, 655,
	-1000, 1601, -1000, -1000, -1000, -1000, -1000, -1000, 620, 616,
	616, 616, -1000, 884, -1000, -1000, -1000, 422, 615, 317,
	614, 613, 607, 653, 652, 650, 649, 646, 645, 643,
	639, 638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 882, -1000,
	-1000, -1000, -1000, -5, 76046, -1000, 457, -5, -1000, -1000,
	635, -1000, 25824, 25824, 25824, -1000, -1000, 1864, 32536, -1000,
	2596, -1000, 7, 7, 794, 39448, -1000, 37647, 794, 259,
	735, 43065, -1000, 2326, -1000, -1000, 633, 260, -1000, -1000,
	-1000, -1000, 2323, 76046, 17281, 76046, 62267, 62267, 62267, 2600,
	32536, -1000, -1000, 48414, 76046, 62708, 2827, 81338, 48414, 76046,
	2395, -1000, -1000, -1000, 76046, -1000, 32536, -1000, 2825, 1371,
	51583, 2784, -17, -1000, -1000, -1000, -1000, -1000, -1000, 2018,
	2034, 975, 1891, 1229, -1000, 25354, 2645, -1000, -1000, -1000,
	239, 17281, -1000, -1000, -1000, -1000, -1000, 1569, 2578, 1210,
	-1000, 1889, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1559, 2575, -1000, 1714, 2571, 1507, -1000, -1000, 1750,
	-1000, -1000, 2673, -1000, -1000, 1323, 2564, 11, -1000, -1000,
	863, 2559, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 785, -1000, 50697, 41273, 51138, -9, -1000, -1000, -27,
	-1000, 15912, 87262, -1000, -1000, -1000, 87262, 798, -1000, -1000,
	2558, -1000, 87262, 795, -1000, -1000, 2555, -1000, -1000, -1000,
	3031, -1000, 3030, 1974, 3028, 3027, 3025, -1000, 1455, 1591,
	3023, -1000, 3022, -1000, -1000, -1000, -1000, -1000, -1000, 59144,
	1862, -1000, -1000, 58250, -1000, 1973, -1000, -1000, 58697, 889,
	-1000, 863, 1972, -1000, 883, -1000, -1000, 3021, 2766, 2183,
	863, 1971, -1000, -1000, -1000, -1000, -1000, 44395, -1000, 44395,
	-1000, 44395, -1000, 1285, -1000, 79133, 7, 7, 2870, -1000,
	-1000, -1000, -1000, -1000, 2554, 3020, 3019, 3017, -1000, 76046,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 181, 2549,
	-1000, -1000, 181, 2548, -1000, 181, 2542, -1000, 64472, -1000,
	-1000, 1787, 2520, -1000, 175, 2516, -1000, -1000, -38, 2512,
	-1000, -1000, -32, -1000, -1000, -1000, 913, -1000, 39896, -1000,
	39896, 69359, 50697, 817, 642, 45726, 87262, -1000, -151, -1000,
	41273, 87262, -1000, 50697, 58250, -1000, 68912, 57809, -1000, -1000,
	1194, 2045, -1000, -1000, -1000, 817, 50697, 50697, 50697, -1000,
	68465, -1000, -1000, 1708, 1543, 2679, 1631, 62267, -1000, 1794,
	-1000, -1000, -1000, 2718, 2394, -1000, 47973, 64031, -1000, 63590,
	-1000, 63149, -1000, 62267, -1000, 62267, -1000, 3016, 3015, 3010,
	-1000, 3007, 2705, 87262, 2691, -1000, 2479, 1417, 1399, 76046,
	-1000, -1000, 76046, -1000, 76046, -1000, -1000, -1000, -1000, -1000,
	2017, -1000, -1000, -1000, -1000, 62267, -1000, -1000, -1000, -1000,
	-1000, -1000, 2392, -1000, 1429, -1000, 1649, -1000, 1190, -1000,
	-1000, 182, -1000, -1000, -17, -1000, 78692, -1000, 2075, -1000,
	76046, -1000, 2031, 2378, 2390, 1579, 1828, 2101, -1000, 30620,
	2041, 34886, 1884, 163, -1000, -1000, 163, 163, 24884, -1000,
	-1000, 81338, 81338, 17281, 1063, 32536, 32536, 32536, 32536, 32536,
	32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536,
	32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536,
	32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536,
	2009, 32536, 1041, 32536, 32536, 32536, 32536, 1732, -1000, -1000,
	1577, 507, 1688, -1000, 2879, 2879, 2879, 87759, 87759, 572,
	3005, 718, -1000, 32536, -1000, 194, 32536, 17738, -1000, -1000,
	432, 7039, 1942, -1000, 431, 18220, -1000, -1000, -1000, 19160,
	563, 30138, 32536, 878, 87262, -1000, -1000, 1206, 2875, 15457,
	2396, 2244, 632, 716, 676, 21558, 21076, 20594, 20112, 515,
	32536, 32536, 32536, 32536, 32536, 32536, 32536, 32536, -1000, -1000,
	2900, -1000, 2875, -1000, -1000, -1000, -1000, 2875, 1056, 1052,
	2875, -1000, 2875, 2875, 2604, 2604, 29668, 29186, 28704, 35356,
	28222, 32536, 19630, 27740, 27258, -1000, 76046, -5, 2824, 32536,
	164, -1000, 85974, -1000, 164, 164, 631, -39, 87262, 2139,
	2139, 39002, 2003, 1703, 1703, 1703, -1000, 794, 11791, 794,
	67579, 1751, 794, 794, 226, 263, 430, 37201, 2596, 67579,
	707, 629, 19, 18, 17, -1000, -1000, 15, 5, -1000,
	-1000, 62267, 628, 17738, 17281, 1233, -44, 224, 2109, 2105,
	2103, -1000, 2095, 1385, -45, 1038, -46, -1000, 4149, -52,
	-1000, 1140, 221, -1000, -1000, -1000, -1000, -1000, 3001, 3000,
	-1000, 881, 627, 624, 388, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 620, 616, 616, 616, -1000, 422, 615,
	317, 614, 613, 607, -1000, -1000, -1000, -1000, 2317, -27,
	62708, 803, -53, 964, -17, -1000, -1000, -1000, 51583, 1098,
	-1000, 1723, -1000, -1000, -1000, -1000, -1000, -1000, 1214, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 899, -1000, -1000, -1000,
	-1000, -1000, -1000, 2887, 2884, -8, -1000, -1000, 17281, -1000,
	-18, 1382, -1000, 53351, 1984, 2693, 2667, 1273, -1000, 1240,
	2750, 56915, 2793, 2801, 123, -1000, 2316, -1000, -1000, 831,
	1411, 1037, 56915, 1714, -1000, 81338, -1000, 2156, 2749, 1208,
	1239, 1208, 1208, 1224, -1000, 56915, 1036, -1000, 1033, -1000,
	-24, 2791, 2794, 97, -1000, 2315, 1032, -1000, -1000, 62267,
	17281, -1000, 1586, -1000, 50697, 2188, -1000, -55, 785, -9,
	51138, 76046, 219, -1000, 32536, 194, 32536, 194, -1000, -1000,
	2510, -1000, -1000, -1000, 2998, 1573, 2032, -1000, -1000, -1000,
	596, 1969, 2312, 76046, 2116, -11, 62267, -1000, 2504, 1714,
	1960, -1000, -1000, 57362, -1000, 2496, 532, 2993, -1000, 78251,
	-1000, 2699, 1071, 2491, 920, 464, 2823, -1000, 464, 44836,
	-1000, 76046, -1000, -1000, 76046, -1000, -1000, -1000, 2988, -1000,
	62267, -1000, -1000, 62267, -1000, 62267, -1000, 62267, 173, 2490,
	-1000, -1000, 76046, -1000, 62267, 62267, 50697, 50697, 4594, 52469,
	-58, -61, 429, -1000, 68024, 76046, 919, 52910, 76046, 2632,
	817, 41273, -151, 817, 817, 785, -1000, 785, -1000, 62267,
	2384, -1000, 817, 817, 817, -1000, -1000, -1000, -1000, 2986,
	2982, -1000, -1000, -1000, 862, 62267, 76046, 62267, -1000, -1000,
	76046, -1000, 76046, -1000, 862, 76046, 862, 76046, 862, 76046,
	-1000, -1000, -1000, -1000, -1000, -1000, 194, 32536, 1348, -1000,
	2381, -1000, 2380, -1000, 48, -1000, -1000, -1000, -1000, 1662,
	62267, 62267, 62267, 62267, 76046, 62267, -1000, 56915, -1000, 2031,
	2378, -1000, -1000, -1000, -1000, -1000, -1000, 1176, 1807, -1000,
	2057, -1000, 1255, -1000, -1000, -1000, 87262, 35826, -1000, -1000,
	87262, 1431, -1000, 34416, 33946, -1000, -1000, 1370, 62267, 2121,
	-1000, 2121, -10, -1000, 85668, 2055, 62267, -1000, -1000, -1000,
	-1000, -1000, 816, 923, 923, 1117, 1117, 1117, 1117, 2863,
	3673, 4053, 1640, 9635, 9635, 4795, 4795, 4795, 4795, 4795,
	9635, 952, 475, 475, 952, 952, 952, 952, 952, 475,
	475, 475, 9635, 9635, 9635, 87759, 87421, 9832, 32536, 32536,
	1028, 1576, 507, 8937, 32536, 811, 811, 811, 811, -1000,
	1726, -1000, -1000, -1000, -1000, 2306, 595, 35356, 35356, -1000,
	-1000, -1000, -1000, 18690, 32536, -1000, -1000, -1000, -1000, 26776,
	-1000, -1000, 85266, -260, 426, -96, 4, -1000, 32536, 32536,
	32536, 425, -1000, 217, 32536, 76046, -1000, 82339, 705, -60,
	-1000, -63, 1222, -1000, 32536, -1000, -1000, 1026, -1000, 1022,
	1006, 1003, -1000, 594, 423, -1000, 215, -1000, 1684, 592,
	590, 32536, -1000, -1000, -1000, -1000, -1000, 84970, -1000, -1000,
	84760, -1000, -1000, 84665, -1000, -1000, 84455, -1000, -1000, -1000,
	87186, 82129, 81829, 81786, 5765, 10984, 10749, -68, 418, -70,
	414, 814, 812, 411, 406, 396, -71, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -82, 393, -1000, 2299, -96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 392, -1000,
	391, -1000, 86891, -96, 389, 3893, -1000, 35356, 35356, 35356,
	-1000, 380, -1000, 85815, -1000, 86848, 26306, 26306, 26306, 378,
	86553, 32536, -96, -83, -1000, -85, -1000, -1000, 583, -91,
	872, 25824, 38108, 17281, -1000, 872, 872, 32536, -1000, 32536,
	2081, -1000, -1000, -1000, 2073, 1926, 2139, 39002, -1000, -1000,
	-1000, -1000, 67579, -1000, 2870, 2179, -1000, 67579, -1000, -1000,
	76046, 457, -1000, 67579, 67579, 17281, 794, -1000, 794, 67579,
	640, -1000, -1000, -1000, -1000, -1000, 371, 42173, 4, 214,
	817, -1000, 17281, 2181, 2181, 2181, 2181, -1000, -1000, 76046,
	2841, -1000, 1609, -1000, 81338, -1000, 715, 988, 17281, -1000,
	-1000, 579, -1000, 2875, 2875, -1000, 2875, 76046, 103, 25354,
	-1000, 1098, -1000, -1000, 1297, -1000, 1578, -1000, 1051, -1000,
	-1000, -1000, -1000, 25354, -1000, 1557, 76046, 76046, 62267, -1000,
	-1000, 1959, 77810, 1957, 81338, 76046, -1000, -1000, 578, 576,
	2054, 2053, 912, 76046, 76046, 2052, 77369, 76928, 76046, 1635,
	32536, 1911, 1332, 194, 194, -1000, -1000, 194, 575, 1125,
	62267, 62267, 62267, 1503, -1000, -1000, -1000, -1000, -1000, 56474,
	-1000, -1000, 2899, 2892, -1000, 1208, -1000, -1000, -1000, 1208,
	1714, 1476, 62267, 76046, 1618, 194, 194, -1000, -1000, 194,
	569, 17281, 1610, -1000, 1586, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47532, 917, 863, 817, 2298, -1000, 2188, -1000,
	-1000, 15002, 87262, -1000, 87262, -1000, 76046, -1000, 888, 76046,
	52910, 852, 2489, 43954, -27, 817, 50697, 62267, -11, 76046,
	-1000, 1714, 2478, 457, 1955, -1000, -1000, 50697, 568, 2977,
	2975, -1000, 1861, 1945, -1000, -1000, 76487, 2589, 753, 76046,
	872, 39002, 1556, -1000, 42620, 898, 76046, 1396, 81, -1000,
	-1000, -1000, 33, 76046, -1000, 2973, -1000, -1000, 181, 181,
	181, -1000, 62267, 62267, 1787, -1000, 175, -1000, -38, -1000,
	-1000, 4594, 4594, 817, -12, 565, -1000, 779, 767, 40818,
	50697, -93, -1000, -1000, -1000, -1000, -1000, 62267, 76046, 673,
	2163, 76046, -94, -1000, 213, 564, -1000, -1000, 817, 2294,
	-1000, -1000, 866, -1000, 1186, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6, -27, -27, -1000, 862, -1000,
	862, -1000, 862, -1000, 87262, -1000, 1334, 1304, 76046, -1000,
	17281, 76046, 62267, 17281, 62267, 2366, 2358, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 931, -1000, 1431, 1804, -1000,
	563, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2004, -1000, -15, 24884, 1894, -1000, -1000, 62267, 0, 32536,
	32536, 8721, 7802, 32536, 35356, 35356, -1000, 32536, 7511, -1000,
	-1000, -1000, -1000, -1000, 2289, 561, 32536, 81338, 6728, 6563,
	-1000, 369, 10337, 952, -1000, 32536, -1000, 362, 24414, -1000,
	86184, -54, -99, -1000, 12258, -96, -100, -1000, -1000, 714,
	-1000, 2587, -1000, 32536, 86343, 1956, 1780, 1572, 1356, 2875,
	2930, 14547, -1000, 45281, 873, 1733, 84159, -1000, -1000, -1000,
	-1000, 81338, 81338, 32536, 32536, -1000, 32536, 32536, 32536, -1000,
	-1000, -1000, 2875, 797, -1000, -1000, -1000, 797, -1000, -1000,
	2875, -1000, 2875, -1000, 32536, -1000, -1000, 2286, 32536, -1000,
	81338, 81338, 35356, 35356, 35356, 35356, 35356, 35356, 35356, 35356,
	35356, 35356, 35356, 35356, 35356, 35356, 35356, 35356, 35356, 35356,
	35356, 2036, 35356, 2865, 2865, 2865, -1000, 2354, 2286, 32536,
	32536, 81338, 356, 355, 354, -1000, 32536, -96, -1000, -1000,
	4594, -1000, 2242, -1000, 32536, -1000, -189, -1000, 2596, -1000,
	-1000, 2242, 2242, -101, 87262, 39002, 39002, -1000, 554, 32536,
	2072, -1000, -1000, 704, -261, -1000, 766, -1000, -1000, -1000,
	-1000, -1000, 457, -1000, -1000, -1000, 209, 67579, 67579, 702,
	-1000, -106, -1000, -1000, -107, -1000, 2819, 349, 17281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -27, 1779, 2923,
	-1000, 2877, 713, 700, 207, 2875, 348, 339, 330, -27,
	76046, -1000, -17, -1000, -1000, -1000, 32536, -1000, -1000, 2678,
	1000, 994, -1000, 2476, -1000, 1939, -1000, 906, -1000, 1602,
	-1000, 32536, 32536, 549, 546, 2966, 1513, 2965, 916, 2469,
	1787, 2467, 1787, -1000, -1000, 796, -1000, 87262, 545, 543,
	-1000, -18, 1364, 865, -1000, -1000, 32536, 32536, 67138, -1000,
	387, 2673, -1, -1000, 993, -1000, -1000, -1000, -1000, 1714,
	991, -1000, -1000, -1000, 864, -1000, -1000, 32536, -1000, -24,
	982, -1000, -1000, -1000, 47077, -1000, -1000, 50697, 817, -1000,
	2954, 62267, 2952, 329, -108, -25, 81338, 2816, 1829, 521,
	62267, 792, -1000, 2870, -1000, -1000, -1000, -1000, 62267, 2815,
	2466, 863, 2922, -1000, -1000, 62267, 2464, 1851, 1935, 2025,
	753, 52028, -1000, 863, 1733, -51, -1000, 1396, 23932, 2669,
	-113, -1000, -1000, -1000, 872, 44836, 39002, 32536, 2951, -114,
	-1000, -1000, -1000, -1000, -1000, 173, -1000, -1000, -1000, -1000,
	-1000, 66697, 66697, 50697, 50697, 50697, 817, 76046, 76046, 52910,
	-1000, 540, 76046, 76046, 539, -1000, 76046, 76046, 2948, 50697,
	-1000, 194, -1000, 1777, 62267, 14092, -1000, -1000, -1000, -1000,
	-1000, 862, -1000, -1000, 1619, 1878, 1619, 1441, 1434, -1000,
	1796, -1000, -1000, -1000, -1000, 2127, 2683, 17281, 2858, 811,
	32536, 32536, 318, 6182, 5224, 811, 32536, 32536, 81338, 8072,
	-115, 32536, 32536, -1000, 32536, 699, 87262, 2920, 32536, 325,
	322, -1000, -1000, -1000, 2872, -1000, -1000, -1000, 87262, 32536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000, 205,
	-1000, -1000, -1000, 80897, -1000, 32536, 314, -1000, 304, 296,
	6238, 262, 84103, 83807, 83597, 292, -1000, -1000, 287, 286,
	87262, 2354, 87262, -1000, -1000, 694, 694, 1188, 1188, 1188,
	1188, 2865, 343, 497, 1697, 610, 610, 610, 789, 821,
	821, 610, 610, 610, 2283, 2044, 536, 7591, -1000, -1000,
	87262, 87262, 285, -1000, -1000, -1000, -96, 284, 2238, 2747,
	87262, -1000, 39002, 2238, 2238, -1000, -1000, 1926, 76046, 87262,
	39002, -1000, 2179, -1000, 12723, -1000, 17281, -1000, -1000, -1000,
	-1000, 2870, -1000, 42173, -1000, 535, -1000, 183, -1000, -1000,
	698, 2947, 711, 17281, 282, -1000, -1000, -1000, -27, 87262,
	76046, 76046, 76046, 2462, -1000, 2474, -1000, 912, 83502, -116,
	-1000, 85668, 32536, 76046, -1000, -1000, 1683, 2114, 944, -1000,
	2722, 76046, -1000, 76046, -1000, -1000, 76046, 76046, 62267, 2433,
	-121, 87262, -33, -1000, 759, -1000, 1193, -1000, 13637, 62267,
	62267, 2427, -122, 17281, -1000, -1000, -38, -1000, -1000, 457,
	-1000, 2122, -1000, 65360, 1824, 194, -1000, 66252, 2945, 534,
	-1000, 1760, -1000, 677, 1714, 194, 62267, -1000, 281, -41,
	-1000, 909, 17281, 62267, 2449, 2027, 753, 52028, -1000, 1071,
	2101, -1000, -50, -1000, 385, 194, 1733, -1000, -51, 87262,
	-1000, 756, -1000, -1000, -123, -1000, -1000, 280, -1000, 2631,
	2630, -1000, 2258, 32536, 533, 529, 76046, 2623, -1000, -1000,
	-124, -1000, 1941, -1000, -1000, -1000, -1000, -1000, 17281, 1337,
	-1000, 528, 522, -1000, -1000, -1000, -1000, 2683, 811, 811,
	32536, 32536, 32536, 811, 8072, -130, -1000, 811, 811, -96,
	-1000, -1000, 86184, -1000, -1000, -1000, 87262, -1000, 13182, 1642,
	-1000, 83292, -1000, -1000, -1000, 32536, 32536, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35356, 2277, 520, 81338, -1000,
	-1000, 868, 32536, 32536, 2596, 868, 868, -1000, -133, -1000,
	-1000, -1000, 2870, 183, -1000, -1000, 2944, 17281, 709, -1000,
	2943, -1000, -1000, -1000, -1000, -1000, 76046, -1000, 76046, -1000,
	17281, 76046, 2247, 1917, -1000, -1000, 2050, 519, 35356, 62267,
	740, -1000, 2227, 1691, 32536, 1894, -138, -139, 1913, -1000,
	-1000, 1909, 32536, -1000, 81338, 517, 1787, 1787, -141, -149,
	-1000, 32536, 981, 76046, 23462, -1000, 2942, 2673, -1000, -1000,
	32536, 977, -1000, 2814, 1618, 2197, -1000, -1000, -1000, -1000,
	2049, -1000, -1000, 76046, 2038, 858, -150, -1000, 755, 754,
	-1000, 52910, 852, 838, -1000, -1000, -1000, 457, -1000, 2907,
	511, 76046, 1849, 509, 17281, -1000, 753, 52028, -1000, 2589,
	1396, -1000, 2595, 76046, 2661, -1000, 2101, 507, -1000, 817,
	502, 500, 2210, 2210, -155, 32536, 32536, -163, 499, 817,
	-64, -1000, 581, 506, -1000, -1000, 62267, 62267, 32536, 32536,
	-1000, 811, 811, 811, -1000, 278, -1000, -1000, 1733, 2745,
	-1000, 82996, 82940, 4643, 35356, 81338, -164, -1000, 76046, 87262,
	-96, -1000, -1000, -1000, 611, -1000, 2941, -1000, -1000, 2035,
	-1000, -1000, -1000, 76046, 1934, -1000, 911, 32536, 7591, 498,
	32536, -1000, -1000, 2158, 2295, 2122, 486, -1000, -1000, -1000,
	-1000, -1000, 893, 1551, -1000, -1000, 87262, 2726, 32536, -1000,
	-1000, 484, 474, 87262, 472, 751, 2264, -1000, -1000, -1000,
	87262, 461, 194, 852, -1000, 1675, 1824, 460, -1000, -1000,
	1814, 2140, -1000, 66252, 36281, 36281, 277, 2810, 838, -1000,
	2864, -1000, 2808, -1000, 32536, -1000, 62267, 32536, 1840, 52028,
	-1000, 2025, -1000, 1114, -165, 76046, 1396, -1000, -1000, 50697,
	50697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 893, -166, -171, -1000, 50697, -1000, 1941, -1000,
	76046, -1000, 76046, -1000, -1000, -174, -177, -1000, 1783, 32536,
	-1000, -1000, 4643, -179, -1000, -88, -1000, 2806, -1000, -1000,
	-1000, -1000, 2445, 2235, 82644, 1963, 76046, 82434, 2284, -1000,
	-1000, 1618, 76046, 2122, 2221, 62267, 910, 17281, -182, 1619,
	1619, 32536, 22992, 1669, 32536, -1000, 1814, 62267, 76046, -1000,
	2709, -1000, 2622, -1000, -1000, -1000, 2122, 194, -1000, -1000,
	194, -184, 909, -187, 62267, -1000, 2027, 1269, -1000, 872,
	-1000, -1000, -190, -198, 1691, 893, -1000, -199, -1000, -200,
	-211, -1000, -1000, 272, 33476, 33476, 33476, -96, -1000, 76046,
	458, 2416, 861, -1000, 1819, 1568, 264, 934, -1000, -1000,
	2227, -216, -1000, 860, 457, -1000, 32536, -1000, 893, -217,
	-1000, 896, -222, -1000, 891, -224, -1000, 2259, -1000, -225,
	-1000, 455, -227, -1000, -1000, 1949, -1000, 1618, 858, -1000,
	893, 451, 1691, 448, -1000, 44836, -1000, 817, 817, 2122,
	1691, 817, -1000, -1000, -1000, 2519, -1000, 36736, 1770, 1407,
	85322, 2519, 2519, -1000, -1000, 76046, 2774, -1000, 1838, 1826,
	1251, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2770,
	1963, 87262, 2122, -1000, 1619, 2187, -1000, 1619, 2256, -1000,
	1659, -1000, 76046, -1000, 76046, 1373, 1366, 2940, 852, 1814,
	1691, 32536, 2122, 32536, -201, -1000, -1000, 1618, 2122, -1000,
	-1000, 1654, 2833, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 747, -1000, 2603, -1000, 927, 1724, 1724, 746, 1819,
	-1000, -1000, 446, -1000, 445, -1000, -230, -1000, -1000, 2939,
	-1000, 1814, -1000, 2122, -235, 1618, -236, -1000, -1000, 1618,
	1398, -1000, -1000, 1744, 33006, 32536, -1000, 2849, -1000, -1000,
	2015, -1000, 32536, 2227, 32536, 32536, 1785, -1000, -1000, 1618,
	893, 870, 1691, -1000, -1000, -1000, -1000, 87262, -1000, -1000,
	-1000, 87262, -1000, -242, -243, -1000, -1000, -1000, 870, 1691,
	-1000, 2937, 2122, 1618, 974, -1000, 2122, -1000, 1618, -1000,
	441, 1618, 870, 32536, 870, -1000, -244, -1000, 1618, -1000,
}
var sqlPgo = [...]int{

	0, 3605, 3601, 3600, 3599, 3598, 3597, 3596, 3593, 3592,
	3589, 3588, 3587, 3585, 3584, 3583, 3582, 3580, 3577, 3576,
	3574, 3567, 3564, 3563, 3562, 3558, 3557, 3556, 3553, 3552,
	3550, 3549, 3548, 3547, 3545, 3544, 3542, 3539, 3538, 3536,
	3535, 3534, 3533, 3528, 3526, 3522, 3521, 37, 3520, 3519,
	3518, 3512, 3507, 3505, 3504, 3503, 3502, 3501, 3499, 3497,
	3496, 3491, 3481, 3480, 3479, 43, 3469, 219, 3467, 3466,
	3465, 3462, 3461, 3458, 3457, 3455, 3453, 3452, 218, 3451,
	128, 3450, 3449, 3448, 3447, 3446, 217, 3445, 3444, 3442,
	3440, 3437, 3436, 3435, 3434, 155, 197, 3432, 64, 3431,
	3427, 3424, 3423, 3421, 3420, 3409, 3408, 3401, 3391, 198,
	3390, 215, 3389, 3382, 3381, 3380, 3379, 3378, 3376, 3375,
	3373, 3370, 3369, 3366, 3362, 3360, 3357, 3355, 3352, 3351,
	3350, 3348, 3347, 3346, 3345, 3344, 3343, 3341, 3339, 3338,
	222, 156, 3337, 3335, 214, 212, 3330, 3328, 3327, 3324,
	131, 97, 88, 23, 3321, 89, 41, 3320, 18, 181,
	194, 7088, 192, 3318, 3317, 3316, 196, 148, 3312, 193,
	3310, 3309, 3308, 3307, 68, 57, 134, 140, 138, 132,
	93, 3306, 3304, 67, 48, 39, 32, 3303, 3302, 3301,
	2448, 94, 3300, 213, 200, 129, 3298, 3297, 3293, 1968,
	3292, 3290, 3289, 326, 78, 91, 87, 83, 3288, 105,
	30, 3287, 130, 40, 3285, 120, 60, 35, 6372, 6643,
	3283, 73, 149, 77, 119, 169, 168, 157, 124, 166,
	165, 139, 1964, 3282, 245, 3281, 75, 127, 3280, 3279,
	3277, 54, 158, 76, 3276, 3275, 45, 1, 17, 3,
	135, 24, 79, 12, 3274, 15, 3273, 3272, 3271, 3270,
	25, 136, 3268, 111, 107, 3267, 11, 3266, 28, 167,
	3265, 184, 100, 3262, 3261, 202, 162, 150, 3260, 90,
	188, 3258, 3257, 3255, 3254, 3253, 104, 20, 95, 3252,
	3251, 109, 195, 151, 3249, 36, 3248, 133, 63, 102,
	226, 96, 177, 86, 183, 137, 187, 3245, 3244, 3238,
	145, 3236, 3235, 175, 121, 3232, 3230, 161, 224, 33,
	53, 189, 49, 147, 110, 3229, 153, 3227, 3216, 3215,
	223, 141, 172, 7, 6, 62, 84, 31, 13, 186,
	116, 231, 72, 3214, 3912, 1325, 1894, 38, 3211, 115,
	81, 47, 71, 118, 211, 55, 3208, 3206, 1812, 3203,
	3202, 3201, 3200, 144, 3197, 3196, 3195, 106, 108, 154,
	3193, 122, 59, 10, 98, 248, 220, 82, 173, 160,
	235, 3192, 142, 3191, 42, 112, 3190, 152, 210, 3189,
	3188, 70, 3187, 163, 117, 3185, 176, 3184, 3183, 3182,
	3180, 3177, 3176, 3175, 113, 190, 103, 3174, 3173, 3172,
	209, 146, 3171, 207, 180, 170, 61, 34, 3169, 80,
	114, 3166, 52, 182, 51, 3164, 3243, 44, 0, 8255,
	6998, 5013, 8232, 3162, 1759, 3161, 3160, 3158, 171, 101,
	3157, 3149, 3147, 69, 3140, 58, 3136, 3131, 46, 3130,
	14, 8, 9, 19, 16, 1739, 863, 3128, 3127, 74,
	92, 125, 3123, 221, 185, 3120, 3119, 3118, 66, 3116,
	29, 3115, 26, 3113, 3112, 27, 2, 21, 3111, 3110,
	206, 3109, 199, 3108, 3106, 2817, 99, 3102, 3100, 204,
	56, 3098, 203, 3097, 2762, 123, 179, 3096, 3095, 3094,
	3092, 201, 3090, 3089, 22, 3088, 5, 3085, 3083, 164,
	4, 2643, 3082, 3081, 50, 2934, 143,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 11, 11, 7, 7, 8,
	8, 8, 35, 35, 9, 9, 9, 10, 10, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	25, 25, 15, 15, 27, 27, 16, 16, 28, 28,
	489, 489, 19, 30, 20, 31, 13, 490, 490, 490,
	490, 24, 21, 32, 22, 22, 22, 22, 22, 154,
	154, 154, 154, 18, 18, 26, 26, 177, 177, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 488, 488, 179, 179, 178, 173, 173, 491, 491,
	180, 180, 180, 182, 182, 36, 36, 36, 94, 94,
	94, 95, 95, 96, 96, 155, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 82, 82, 426, 426, 427,
	427, 150, 150, 151, 151, 151, 151, 152, 152, 153,
	153, 153, 50, 38, 38, 38, 38, 38, 38, 38,
	39, 39, 39, 39, 40, 40, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 48, 48, 48, 48,
	141, 141, 51, 51, 51, 51, 51, 51, 51, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
	498, 498, 498, 498, 498, 498, 498, 498, 498, 499,
	499, 500, 500, 501, 501, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 502, 502, 502, 502, 502, 502,
	502, 502, 502, 502, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 62, 62, 262, 262, 235, 235, 63, 63,
	63, 64, 64, 65, 65, 52, 52, 482, 482, 276,
	276, 386, 386, 67, 67, 296, 296, 68, 68, 68,
	68, 68, 68, 69, 69, 69, 69, 69, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	76, 76, 76, 77, 77, 77, 74, 74, 74, 72,
	72, 72, 71, 71, 71, 75, 75, 75, 227, 227,
	73, 73, 73, 277, 277, 78, 78, 78, 78, 78,
	78, 78, 78, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 388, 388,
	79, 79, 79, 356, 356, 83, 83, 83, 311, 311,
	84, 84, 84, 84, 84, 85, 85, 85, 85, 97,
	97, 97, 97, 485, 485, 269, 269, 193, 193, 193,
	193, 90, 90, 90, 90, 91, 91, 91, 92, 92,
	146, 146, 103, 103, 103, 103, 103, 102, 102, 102,
	102, 102, 102, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 46, 46, 47, 47, 47, 47, 47, 105,
	105, 495, 495, 107, 104, 104, 104, 106, 106, 106,
	106, 108, 109, 109, 109, 109, 109, 109, 109, 109,
	110, 110, 419, 419, 285, 285, 417, 417, 435, 435,
	418, 418, 239, 239, 239, 239, 239, 240, 240, 240,
	425, 425, 425, 425, 425, 425, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	147, 147, 148, 149, 149, 149, 149, 130, 130, 130,
	140, 140, 140, 140, 140, 140, 140, 133, 133, 133,
	120, 120, 112, 112, 112, 112, 112, 116, 116, 116,
	116, 116, 116, 116, 116, 113, 113, 122, 122, 122,
	122, 122, 117, 117, 119, 119, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 114, 114, 114, 114, 124,
	124, 124, 124, 318, 318, 318, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 136, 136, 136, 136,
	136, 136, 370, 370, 131, 131, 131, 131, 135, 135,
	135, 135, 301, 301, 128, 128, 128, 129, 129, 129,
	134, 134, 132, 132, 137, 137, 137, 137, 115, 115,
	115, 503, 503, 503, 138, 138, 127, 127, 139, 139,
	139, 139, 139, 139, 139, 139, 126, 126, 126, 125,
	125, 125, 125, 118, 483, 483, 480, 480, 480, 480,
	480, 480, 480, 481, 481, 484, 484, 88, 88, 88,
	57, 57, 57, 58, 58, 158, 158, 158, 158, 247,
	247, 247, 247, 156, 156, 157, 157, 59, 59, 504,
	504, 504, 492, 492, 492, 493, 493, 493, 493, 493,
	493, 241, 241, 242, 242, 336, 336, 336, 336, 336,
	245, 245, 245, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 248, 248, 181, 181, 181, 251, 252, 252,
	249, 249, 250, 250, 250, 254, 254, 253, 256, 256,
	255, 335, 444, 444, 446, 446, 446, 446, 446, 446,
	446, 448, 448, 448, 448, 448, 448, 448, 448, 448,
	448, 448, 505, 442, 442, 442, 443, 438, 438, 439,
	439, 439, 439, 439, 243, 243, 244, 244, 244, 244,
	440, 441, 267, 267, 373, 445, 445, 447, 447, 449,
	506, 506, 506, 506, 506, 506, 507, 507, 507, 334,
	334, 333, 333, 260, 260, 450, 450, 450, 450, 451,
	451, 451, 451, 451, 454, 453, 452, 452, 452, 452,
	452, 61, 61, 61, 298, 298, 297, 297, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 143, 143, 196, 196, 56, 56, 56,
	12, 12, 12, 494, 494, 494, 60, 60, 60, 60,
	195, 195, 195, 195, 195, 195, 487, 487, 486, 486,
	197, 197, 509, 509, 66, 66, 66, 66, 66, 66,
	66, 389, 389, 390, 390, 55, 55, 55, 55, 55,
	510, 510, 319, 319, 317, 317, 316, 316, 266, 266,
	372, 201, 201, 174, 174, 174, 23, 17, 17, 33,
	33, 34, 34, 29, 29, 496, 496, 497, 497, 89,
	89, 93, 93, 93, 101, 101, 142, 142, 142, 142,
	142, 142, 142, 37, 37, 37, 37, 49, 49, 49,
	49, 99, 512, 512, 512, 100, 100, 100, 511, 511,
	194, 194, 330, 330, 331, 331, 513, 513, 332, 332,
	332, 332, 188, 187, 189, 189, 54, 54, 54, 183,
	183, 184, 184, 185, 185, 186, 186, 514, 514, 86,
	86, 86, 145, 145, 234, 234, 234, 326, 326, 326,
	261, 261, 207, 207, 329, 329, 327, 327, 327, 327,
	295, 295, 295, 144, 144, 274, 274, 287, 287, 288,
	288, 383, 383, 289, 98, 98, 161, 161, 159, 159,
	159, 159, 159, 159, 159, 159, 166, 166, 167, 167,
	168, 168, 169, 170, 170, 170, 170, 278, 278, 171,
	171, 171, 160, 160, 160, 162, 162, 162, 162, 162,
	162, 162, 165, 165, 165, 165, 172, 172, 172, 164,
	164, 461, 461, 461, 463, 463, 464, 460, 460, 462,
	462, 508, 508, 300, 300, 300, 258, 259, 257, 257,
	264, 264, 263, 265, 265, 371, 371, 371, 175, 175,
	175, 292, 292, 292, 292, 293, 293, 322, 322, 320,
	320, 320, 320, 321, 321, 323, 323, 323, 324, 324,
	325, 325, 291, 291, 352, 352, 163, 163, 163, 271,
	271, 271, 272, 272, 342, 342, 342, 342, 342, 342,
	343, 343, 341, 341, 341, 341, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 375, 376, 376, 273, 273,
	377, 328, 328, 478, 478, 478, 479, 479, 369, 369,
	378, 378, 378, 378, 378, 378, 367, 367, 368, 368,
	384, 385, 385, 304, 304, 304, 304, 302, 302, 305,
	305, 305, 305, 303, 303, 379, 379, 379, 379, 294,
	294, 380, 380, 380, 380, 381, 337, 338, 338, 391,
	391, 391, 391, 406, 270, 270, 270, 270, 270, 437,
	436, 436, 392, 392, 392, 392, 392, 392, 392, 392,
	405, 405, 405, 405, 405, 405, 405, 405, 407, 407,
	407, 407, 407, 407, 393, 393, 393, 393, 393, 396,
	396, 396, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 397, 397, 402, 402, 403, 403, 403,
	398, 399, 404, 404, 404, 404, 515, 515, 409, 409,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 394,
	394, 394, 401, 401, 401, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 312, 312,
	314, 314, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 344, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 346, 346, 346,
	346, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 455, 455, 455, 455,
	455, 455, 455, 455, 348, 348, 458, 458, 459, 459,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 465,
	465, 466, 466, 468, 468, 469, 469, 470, 471, 471,
	471, 472, 473, 473, 467, 467, 474, 474, 474, 474,
	475, 475, 476, 476, 476, 476, 476, 477, 477, 477,
	477, 477, 358, 358, 359, 359, 365, 365, 365, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 198, 198, 198, 198, 198,
	283, 283, 281, 281, 281, 284, 284, 282, 282, 280,
	280, 279, 279, 355, 355, 353, 353, 357, 357, 306,
	306, 408, 408, 408, 408, 408, 408, 408, 408, 307,
	307, 307, 315, 308, 308, 309, 309, 309, 309, 309,
	349, 350, 310, 310, 310, 351, 351, 360, 364, 364,
	363, 362, 362, 361, 361, 339, 339, 340, 340, 290,
	290, 516, 516, 286, 286, 382, 382, 382, 382, 237,
	237, 275, 275, 236, 236, 229, 229, 230, 230, 230,
	230, 268, 268, 366, 366, 410, 410, 411, 411, 412,
	412, 413, 413, 414, 415, 416, 354, 354, 217, 216,
	204, 205, 215, 214, 213, 203, 206, 210, 211, 212,
	208, 209, 223, 222, 221, 228, 219, 220, 387, 202,
	231, 231, 232, 232, 232, 233, 233, 233, 233, 199,
	199, 200, 200, 224, 224, 225, 226, 226, 218, 218,
	218, 190, 190, 190, 191, 191, 192, 192, 424, 424,
	421, 421, 421, 422, 422, 422, 423, 423, 423, 423,
	420, 420, 420, 420, 420, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 429, 429, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	431, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 434, 434,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 4, 6, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 10, 3, 6, 4, 3, 1,
	3, 2, 1, 1, 3, 1, 3, 2, 2, 0,
	1, 1, 0, 2, 0, 6, 7, 2, 5, 6,
	2, 1, 3, 1, 3, 1, 6, 4, 9, 7,
	12, 12, 12, 9, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 6, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 6,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 2, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 9, 3, 2, 0, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 5,
	7, 3, 4, 6, 3, 4, 6, 3, 1, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 3,
	6, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 3, 3, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 2, 1, 3, 3, 3, 3, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 4, 5, 5, 5, 3, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	7, 3, 3, 3, 4, 3, 5, 3, 6, 5,
	6, 3, 5, 6, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 3, 3, 4, 3, 3, 3, 3, 4,
	3, 1, 1, 1, 2, 3, 2, 3, 6, 6,
	7, 9, 7, 9, 3, 4, 10, 10, 3, 5,
	5, 5, 3, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	3, 6, 3, 11, 14, 0, 2, 4, 3, 0,
	4, 5, 4, 3, 3, 1, 3, 10, 13, 0,
	2, 3, 1, 1, 0, 1, 2, 2, 2, 2,
	1, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	3, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 8, 4, 2, 5, 5,
	5, 2, 1, 9, 10, 6, 5, 3, 1, 5,
	8, 7, 11, 3, 3, 0, 2, 4, 3, 3,
	1, 5, 1, 3, 1, 2, 0, 1, 2, 2,
	0, 1, 3, 3, 2, 2, 1, 1, 1, 4,
	0, 6, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 2, 2, 4, 7, 3,
	4, 6, 3, 1, 1, 1, 8, 10, 11, 5,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 3, 0, 1, 8, 3, 6, 6, 5, 3,
	4, 1, 0, 1, 3, 16, 19, 15, 18, 4,
	0, 2, 2, 0, 1, 0, 1, 0, 1, 3,
	3, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 4, 2, 1, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 3, 4, 3, 0,
	2, 2, 0, 10, 3, 2, 0, 1, 3, 1,
	1, 3, 3, 5, 1, 1, 3, 3, 1, 2,
	4, 4, 2, 3, 5, 5, 1, 3, 1, 0,
	1, 2, 3, 2, 4, 2, 3, 0, 2, 0,
	2, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 3, 4, 5, 2, 2,
	0, 2, 2, 1, 1, 1, 0, 1, 0, 2,
	2, 5, 4, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 2, 0, 4, 2, 5, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 1, 1,
	1, 3, 2, 4, 4, 0, 4, 4, 3, 4,
	1, 5, 3, 4, 5, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 5, 6, 4, 6, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 1,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 2, 4, 3, 5, 0, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 6, 6, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 1, 1, 1,
	1, 1, 1, 2, 1, 5, 5, 6, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 2, 2, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 3, 3, 4, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 3, 3, 3, 0,
	1, 4, 2, 2, 2, 2, 2, 3, 2, 2,
	3, 0, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 484, -80, -50, -48, -83, -84, -68,
	-85, -79, -97, -101, -89, -103, -142, -147, -148, -149,
	-3, -36, -38, -51, -67, -69, -78, -87, -86, -88,
	-90, -94, -93, -82, -42, -98, -102, -111, -143, -144,
	-145, 86, 70, 131, 110, 116, 168, 311, 343, 353,
	337, -106, -107, 368, -37, -49, -100, -99, 63, 111,
	332, -4, -12, 27, 42, -39, -40, -41, 54, -56,
	-53, -62, -498, 88, -462, -70, -73, -502, 121, 137,
	186, 301, -91, -92, 339, 341, 138, -44, -43, 132,
	-159, -161, -104, -105, -146, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	-127, -132, -128, -129, -130, -131, -133, -134, -135, -136,
	-137, -138, -139, 372, 420, 43, 382, 72, 124, 347,
	21, -5, -6, -7, -8, -9, -10, -11, -52, -54,
	-55, -57, -58, -59, -66, -60, -61, -461, -71, -72,
	-74, -76, -77, -75, 338, -162, -160, 481, 434, -14,
	-19, -20, -15, -16, -18, -21, -17, -25, -30, -31,
	-27, -28, -26, -29, -32, -33, -34, -35, -23, -24,
	-13, -22, 452, 460, -165, -163, -164, -172, 360, 442,
	397, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, -219, -224, -225, -226, -218, -190, -431, -434, 4,
	-428, -432, 143, 195, 267, 21, 22, 23, 24, 25,
	27, 28, 39, 41, 40, 42, 43, 48, 51, 52,
	53, 54, 55, 58, 63, 64, 69, 70, 71, 72,
	73, 74, 75, 81, 78, 79, 80, 83, 85, 86,
	87, 89, 91, 92, 100, 101, 102, 103, 105, 110,
	111, 114, 109, 113, 116, 119, 120, 121, 123, 125,
	126, 128, 129, 131, 132, 135, 133, 403, 134, 136,
	137, 138, 139, 149, 150, 151, 156, 158, 162, 163,
	166, 167, 169, 173, 175, 176, 177, 178, 179, 185,
	186, 188, 189, 190, 191, 196, 197, 201, 198, 207,
	211, 212, 213, 215, 219, 220, 221, 222, 223, 226,
	225, 228, 231, 232, 235, 236, 237, 240, 241, 242,
	243, 245, 246, 249, 247, 250, 248, 252, 253, 254,
	251, 257, 255, 259, 260, 265, 263, 261, 262, 269,
	272, 183, 274, 275, 278, 295, 282, 283, 284, 287,
	288, 291, 294, 296, 297, 298, 299, 300, 301, 302,
	304, 305, 309, 311, 312, 314, 316, 317, 318, 319,
	320, 321, 322, 324, 325, 332, 337, 334, 335, 336,
	338, 339, 340, 341, 343, 345, 346, 347, 348, 350,
	352, 369, 370, 384, 353, 354, 355, 356, 357, 358,
	359, 363, 361, 362, 364, 365, 366, 368, 371, 372,
	374, 375, 378, 380, 381, 382, 383, 385, 388, 389,
	390, 391, 386, 396, 394, 395, 398, 399, 400, 401,
	402, 404, 406, 414, 415, 417, 420, 421, 422, 412,
	424, 425, 428, 429, 430, 433, 431, 432, 434, 436,
	439, 440, 441, 447, 446, 453, 454, 456, 457, 458,
	34, 44, 45, 47, 49, 59, 60, 61, 65, 106,
	107, 130, 140, 141, 152, 164, 165, 170, 172, 180,
	181, 182, 202, 203, 205, 209, 229, 271, 273, 289,
	293, 306, 307, 308, 310, 323, 349, 376, 387, 392,
	407, 408, 409, 410, 416, 418, 442, 443, 444, 448,
	455, 280, -212, 2, -190, -190, 311, 26, 2, 26,
	305, 362, 399, 401, 2, -485, -269, 2, 26, -193,
	-190, 88, 168, 360, -212, 2, -485, -269, 24, 2,
	-190, 2, -194, 2, 353, -190, 484, 83, 237, 64,
	349, 365, -109, 415, -108, 407, 355, -110, -419, 2,
	257, -190, 484, 484, 484, 26, -202, -190, 397, 195,
	102, 395, 484, 2, 397, 298, 446, 361, 102, 320,
	195, -494, 345, 171, 435, 411, -480, 2, 4, -432,
	-428, -230, -229, 397, 102, -226, -218, 474, -225, 484,
	484, 484, 2, 212, 213, 319, 318, 365, 366, 484,
	484, 2, 25, 57, 82, 85, 108, 139, 159, 162,
	285, -499, 246, 295, 317, 364, 396, 404, 417, -493,
	383, 58, 355, -492, -494, 422, 119, -316, 102, 237,
	167, 429, 401, 399, 427, 114, 201, 432, 431, 484,
	25, 57, 67, 85, 119, 139, 159, 162, -501, 295,
	317, 352, 355, 364, 396, 404, 417, 2, 446, 361,
	397, 195, 102, 422, -494, 315, -80, 2, 481, 30,
	29, 368, -155, 397, 206, 2, -190, 212, 213, 2,
	484, 484, 160, -480, 2, 212, 213, 2, 206, 2,
	58, 357, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	2, -140, 365, 383, 177, 42, 64, 26, 316, 69,
	299, 103, 169, 195, 196, 220, 82, 83, -318, 41,
	213, 212, -370, 398, 356, 362, 394, 353, 415, 88,
	436, 346, 458, 320, 321, 133, 4, 102, 257, 367,
	407, 237, 74, -508, 2, 397, -511, 2, 415, 415,
	2, -511, 2, -511, 2, -511, 2, -512, 415, 455,
	484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
	484, 484, 484, 484, 484, -160, -162, -161, 484, 484,
	484, 484, 484, 484, -140, 365, 2, 64, 26, -263,
	-264, 426, 204, 127, 286, -159, -161, 2, -461, -417,
	2, -344, -435, -346, 472, 473, 465, 266, 459, -358,
	108, 427, 280, -434, -347, -360, 130, 349, -284, 8,
	9, 5, 6, 7, -199, -348, -354, 419, 142, 270,
	-233, 485, 10, 481, -458, -161, -359, 35, 172, 56,
	-421, -232, -200, -393, 205, -231, -218, -455, -456, 4,
	-428, -429, -422, -395, -403, -399, -400, -407, -190, -431,
	67, 94, 95, 93, 98, 97, 239, 238, 99, 96,
	367, 435, 57, 34, 180, 181, 209, 271, 182, 65,
	-457, 120, -430, 202, 203, 376, 45, 323, 152, 107,
	106, 273, 49, 47, 443, -404, 104, 407, 408, 409,
	410, 164, 165, 140, 141, 293, 308, 392, 416, 418,
	170, 229, 90, 161, 200, 184, 208, 210, 214, 230,
	233, 258, 264, 268, 290, 292, 344, 373, -515, 444,
	387, 59, 60, -463, 324, -464, -212, -463, 484, 484,
	486, 484, -257, -258, -259, 2, 26, 117, 481, 2,
	-374, 2, -375, -379, -161, 224, -378, 481, -376, 479,
	-219, 281, -459, 350, -455, -456, -199, -218, -232, 4,
	-428, -430, -260, 481, 483, 102, 397, 68, 195, -311,
	481, -190, 26, 280, 411, 486, -356, 481, 280, 160,
	283, -190, 2, 2, 369, 2, 481, -109, 61, 415,
	40, 365, -331, 2, -332, -187, -188, -189, -384, 211,
	314, 322, 461, 458, -417, -495, 160, 464, 411, -417,
	-285, 483, 2, 2, 2, 2, 2, -379, 180, -219,
	2, -216, -420, 4, -428, -432, -429, -433, -431, 26,
	29, 30, 31, 33, 35, 36, 37, 38, 50, 56,
	57, 62, 66, 68, 77, 82, 88, 93, 94, 96,
	95, 97, 98, 99, 108, 112, 115, 117, 118, 122,
	124, 127, 142, 144, 157, 159, 160, 168, 171, 174,
	187, 199, 204, 206, 224, 227, 234, 238, 239, 266,
	270, 276, 280, 281, 285, 286, 303, 313, 326, 342,
	360, 367, 379, 393, 397, 405, 411, 413, 419, 426,
	427, 435, 437, 445, 449, 450, 451, 452, -434, 67,
	2, -379, 180, 2, -221, 180, -379, -224, 2, -203,
	-190, 2, -215, -420, 2, -236, 180, -219, -220, -224,
	-426, 180, 2, -424, 10, -423, 5, 4, -428, -432,
	-429, -95, -426, 481, 411, 486, -275, -229, -230, -268,
	-190, 483, -344, 2, -98, 2, -344, 180, 2, -98,
	180, 2, -344, 180, 2, -98, 180, 2, 2, 2,
	417, 2, 85, 180, -190, 397, 101, 2, 336, -500,
	352, 421, 446, 2, 2, 2, 2, 2, 2, 397,
	-208, 2, -190, 157, -228, 180, 2, -190, 361, -509,
	324, -426, 180, 2, -222, 2, -224, -222, 195, 207,
	-203, 180, 2, 401, 399, 401, 399, 160, 2, 206,
	2, 206, 2, -380, 2, -381, -375, -219, 479, 2,
	2, 2, 2, 2, 180, -190, 397, 101, 2, 222,
	2, 2, 2, 2, 2, 2, 2, 2, -277, 180,
	2, -219, -277, 180, 2, -277, 180, 2, -317, 2,
	77, -203, 180, 2, -227, 180, 2, -222, -427, 180,
	2, -426, -388, 2, -387, -423, 442, -80, 481, -80,
	481, 365, 481, -426, -219, -219, -344, -98, -96, -95,
	160, -344, -98, -155, 157, 2, 102, 397, -140, 2,
	157, 437, 2, 8, 2, -426, 356, 321, 149, 2,
	369, 2, 370, 64, -318, 458, 64, 160, 2, 160,
	2, -301, 2, 452, -483, 2, 280, 160, 2, 160,
	2, 160, 2, 160, 2, 160, 2, 318, 366, 213,
	2, -98, 449, -344, 449, 2, 414, 221, 134, 160,
	-301, 2, 160, 2, 160, 2, 5, 2, 384, 2,
	211, 314, 384, 2, -219, -503, 2, 397, 446, 361,
	2, 2, 78, 79, 160, 2, 160, 2, 160, 458,
	2, -294, -379, -330, -331, -330, 411, -263, -264, -140,
	369, 2, -166, -292, -168, 157, -320, -321, -169, 234,
	144, 276, -170, -300, 26, 117, -300, -300, 52, 482,
	482, 11, 12, 66, 39, 472, 473, 474, 475, 155,
	476, 477, 470, 471, 469, 462, 463, 467, 217, 218,
	84, 466, 464, 76, 244, 351, 145, 146, 147, 148,
	333, 193, 32, 194, 14, 15, 16, 31, 285, 233,
	459, 184, 373, 465, 17, 18, 19, 208, 210, 268,
	44, 187, -198, -238, -344, -344, -344, -344, -344, 292,
	481, -290, -339, 479, -161, 481, 481, 481, -416, 8,
	-161, -344, -358, 482, -282, 481, -161, -358, -353, 481,
	349, 479, 481, -361, -344, 5, 5, 5, 481, 483,
	-465, 453, 157, 481, 481, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 310, -397,
	481, -396, 481, -396, -396, 447, -394, 481, 460, 454,
	481, -394, 481, 481, 481, 481, 481, 481, 481, 481,
	481, 481, 481, 481, 481, 447, 486, -463, -260, 481,
	-286, -382, -344, 474, -286, -286, 280, -279, -344, 90,
	-304, 214, 258, 161, 230, 344, 200, -341, 485, -341,
	-369, 460, -161, -376, -218, -161, -378, 481, -374, -369,
	-81, -416, -67, -78, -86, -98, -111, -144, -145, 474,
	-219, 481, 160, 481, 483, 160, -268, -420, -203, -219,
	-231, -232, -236, 116, -279, -480, -268, -193, 36, -355,
	-391, -392, -437, -436, -393, -402, -398, -401, 306, 307,
	-422, 47, 443, -404, 205, 4, -428, -430, 202, 203,
	376, 45, 323, 152, 107, 106, 273, 49, 407, 408,
	409, 410, 164, 165, 444, 387, 59, 60, -480, -268,
	157, -419, -279, 36, -331, 2, 108, -424, 40, -513,
	486, 232, -240, 243, 265, 176, 281, 456, 274, -425,
	5, 4, -354, -366, 108, 237, 205, -410, -412, 8,
	-411, 9, -413, 472, 473, -418, -417, 92, 483, -420,
	-177, 334, -176, 23, 27, 121, 440, 135, -250, 197,
	298, 130, 380, 430, -489, -490, 354, 402, 403, 80,
	274, 334, 130, -297, -299, 36, 100, 260, 294, 53,
	190, 248, 249, 382, 448, 130, 334, -490, 334, -490,
	-179, 380, 430, -489, -490, 354, 334, -178, -250, 130,
	485, -486, -460, 452, 130, -385, -384, -427, -95, -275,
	486, 486, -420, 474, 130, 130, 130, 130, 2, 2,
	266, 2, 2, 2, 162, -492, -501, 2, 2, 2,
	-219, 180, -262, 280, -482, -276, 397, -219, 266, -221,
	180, 2, -224, 446, -486, 266, 36, 481, 2, -317,
	2, 195, -460, 266, -380, -234, -219, -375, -234, 368,
	-212, 36, -341, -341, 130, 2, 2, 2, -190, -180,
	486, 55, 340, 130, -180, 130, -180, 130, -237, 180,
	-236, -180, 130, -180, 486, 130, 486, 130, 482, 486,
	-388, -388, -426, -153, 452, 160, 88, 481, 481, -155,
	-385, 486, -96, -426, -482, -203, 2, -219, 2, 397,
	215, -153, -426, -426, -426, -419, 26, 370, 2, 318,
	366, 79, 370, 2, -219, 397, 102, 195, 70, -484,
	157, -481, 345, -480, -219, 102, -219, 102, -219, 102,
	-219, -219, 2, 2, 2, 2, 75, 75, 157, 2,
	414, 2, 414, 2, -190, -190, -190, 232, -219, 157,
	397, 195, 397, 195, 102, 397, -180, 486, -194, -166,
	-292, -419, -293, -292, -167, -166, -169, 157, 322, 431,
	260, 371, 219, -321, -320, 26, -344, -325, 151, 259,
	-344, -323, -346, 472, 473, -411, -413, -278, 274, -160,
	-160, -160, -265, -371, -344, 313, 195, -406, -391, -391,
	-217, -420, 407, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, -344, -344,
	-344, -344, -344, -344, -344, -344, -344, -344, 233, 184,
	373, 44, 187, -344, 411, -344, -344, -344, -344, 255,
	266, 270, 419, 142, 428, 117, 274, -516, 393, 38,
	-351, -161, -283, 481, -365, 33, 379, 26, -358, 481,
	2, -339, -344, -340, -280, -279, -279, 482, 445, 26,
	117, 474, 2, 482, 486, 36, 482, -344, -280, -357,
	-353, -279, -364, -363, 449, -312, -313, 457, 251, 105,
	178, 250, -314, 359, -414, 8, -420, 474, -466, 150,
	171, 481, 482, 2, 482, 2, 482, -344, 2, 482,
	-344, 2, 482, -344, 2, 482, -344, 2, 482, 2,
	-344, -344, -344, -344, -344, -344, -344, -279, 8, -414,
	-414, 407, 407, -414, -414, -414, -405, 306, 235, 307,
	166, 254, 252, 253, 165, -405, -306, 2, -408, -279,
	4, 457, 251, 105, 178, 250, 359, 5, -306, 2,
	-307, 2, -344, -279, -308, -345, -346, 472, 473, 465,
	-358, -309, 2, -344, -280, -344, 50, 227, 413, -310,
	-344, 160, -279, -279, 2, -279, 2, -464, 36, -279,
	-271, 486, 160, 36, 4, -271, -271, 481, 482, 486,
	-305, 175, 247, 242, -305, -374, -304, 214, -302, 290,
	-302, -302, -369, -204, 479, 487, -420, -369, -368, -367,
	36, -212, 287, -369, -369, 483, 482, -368, 480, -478,
	481, 484, 484, 484, 484, 484, -219, 481, -279, -420,
	385, 482, 483, 208, 208, 208, 208, 350, 482, 411,
	452, -80, 282, 482, 486, -270, 35, 479, 483, 2,
	2, -409, 447, 481, 481, -313, 481, 160, -269, -495,
	482, 415, -332, -239, 322, 378, 335, 363, 395, 8,
	9, 8, 9, 486, -420, 486, -496, 82, 411, 68,
	-335, 180, 68, -438, -206, 82, -439, -190, 62, 427,
	313, 159, 128, -496, 82, 313, -496, 82, 82, 368,
	383, 52, -379, 39, 39, 26, -98, 228, 160, 458,
	397, 195, 411, -379, -299, -391, 100, 248, 249, 52,
	-415, -410, 472, 473, -415, 52, -415, -415, -415, 452,
	-221, -379, 411, 411, 486, 39, 39, 26, -98, 228,
	160, 411, -236, -204, -487, -195, 89, 261, 241, 262,
	-196, -197, 300, 439, -426, -150, 191, 482, -385, -229,
	-190, 483, -344, -98, -344, -98, 130, 2, -509, 222,
	481, -243, 266, 160, -268, -386, 206, 486, -276, 130,
	-298, -297, 266, -223, 180, 2, -219, 130, 125, 481,
	320, 2, -205, 180, -191, -190, -317, -183, 400, 130,
	-296, 437, -326, -98, 481, 108, 36, -326, -287, -288,
	-383, -289, -206, 481, -212, -190, 2, -219, -277, -277,
	-277, -180, 486, 130, -203, -222, -227, -426, -427, -80,
	-387, 482, 482, 482, -152, 284, -151, -190, 5, -155,
	437, -242, -336, -335, -442, -443, -438, 233, 195, 427,
	207, 143, -261, -207, -206, 101, -153, -95, -385, -153,
	-153, -385, -385, -219, 157, -153, -153, -153, 2, 2,
	-301, -219, -203, -236, -219, -268, -268, -301, -203, -301,
	-203, -301, -203, -98, -344, 365, 157, 157, 483, -301,
	320, 102, 397, 298, 195, -219, -236, -219, -236, -203,
	-219, -379, -293, -167, 281, 219, 371, -323, -324, -346,
	349, 350, -324, 349, 350, 8, 9, 8, 9, -171,
	375, 269, -277, 486, -174, 37, 115, 219, -219, 458,
	126, -344, -344, 411, -516, 393, -351, 126, -344, 255,
	270, 419, 142, 428, 117, 274, 160, 481, -345, -345,
	482, -281, -344, -344, 480, 489, 482, -264, 486, -263,
	-344, -279, -279, 482, 483, -279, -268, 480, 480, 486,
	482, -362, -363, 122, -344, 411, 411, 411, 411, 481,
	482, 483, -471, 291, 481, 481, -344, 482, 482, 482,
	482, 36, 486, 486, 486, 482, 486, 486, 486, 482,
	482, 482, 486, 482, 458, 458, 482, 482, 482, 482,
	486, 482, 486, 482, 160, 482, 482, -315, 303, 482,
	11, 12, 472, 473, 474, 475, 155, 476, 477, 470,
	471, 469, 462, 463, 464, 76, 244, 351, 14, 15,
	16, 208, 187, -345, -345, -345, 482, -349, -350, 160,
	157, 36, -310, -310, -310, 482, 160, -279, 482, 482,
	481, 482, -338, -337, 450, -382, -272, 2, -374, -214,
	-420, -338, -338, -279, -344, 214, 214, -303, 437, 280,
	-305, -374, -368, -416, -343, -342, 158, 37, 115, 263,
	183, -368, -212, -260, -368, -368, -420, -369, -369, -367,
	482, -479, -416, 482, -273, -377, -459, -264, 483, -153,
	-420, -141, 5, 270, -141, -141, -141, -268, 24, 304,
	-391, 479, 480, 8, -420, 481, -414, -414, -414, -268,
	160, -417, -331, 425, 73, 322, 407, -417, -176, 334,
	-206, -206, -219, 266, -335, 180, -182, 266, -391, -213,
	-190, 481, 481, 219, 219, 437, -206, -213, 219, 180,
	-206, 180, -213, -213, -488, 322, 275, -344, 236, 320,
	267, -177, 334, -98, -98, -98, 481, -495, 437, 116,
	-219, -236, -219, -223, 334, 264, -231, -415, -415, -297,
	334, -221, -203, -178, -98, -98, -98, 481, -204, -179,
	334, -195, -426, 270, 433, -486, -153, 160, -150, 474,
	-190, 446, -190, -241, -244, -242, -206, -158, 454, 452,
	130, -235, -219, 479, -153, -426, -219, -228, 130, -260,
	266, -426, 481, 2, 2, 280, 266, -205, 180, -184,
	123, -514, 464, -203, -338, -272, -295, -329, 342, 280,
	-261, 442, -212, -295, -274, 486, 160, 464, 483, -261,
	2, -180, -180, -180, -236, -237, -180, -180, -80, -80,
	-153, 486, 481, 464, 464, 481, -426, -426, 482, 486,
	-219, -205, 195, 195, -211, -191, 482, 486, 483, 481,
	-153, 160, -45, 452, 397, 485, -301, -301, -301, 365,
	365, -190, -215, -203, -219, -216, -236, 157, 157, 431,
	-324, 281, 240, -371, -175, 272, -219, 485, -344, -344,
	126, 126, -344, -345, -345, -344, 126, 160, 481, -344,
	-355, 31, 31, 482, 486, -340, -344, 482, 445, -264,
	-264, 482, 474, -420, 485, 482, -353, 124, -344, 405,
	251, 178, 250, -314, 250, -314, -314, -414, 5, -420,
	474, -472, -209, 481, -190, 450, -263, 482, -406, -391,
	-344, -344, -344, -344, -344, -414, -394, -394, -414, -414,
	-344, -349, -344, -406, -391, -345, -345, -345, -345, -345,
	-345, -345, -345, -345, -345, -345, -345, -345, -345, -345,
	-345, -345, -345, -345, 117, 266, 274, -345, -350, -349,
	-344, -344, -391, 482, 482, 482, -279, -80, -291, 171,
	-344, -385, 486, -291, -291, 482, -374, -374, 481, -344,
	214, 480, 486, 488, 464, -260, 483, -367, -368, 480,
	482, 486, 482, 486, -328, 36, 482, -420, 283, 5,
	8, 479, 480, 483, -414, 482, 482, 482, -268, -344,
	411, 411, 130, 266, 439, -444, -439, 128, -344, -266,
	-372, -344, 481, 481, 2, -173, 121, 368, -497, 2,
	437, 130, -180, 130, -180, 456, 481, 481, 411, 452,
	-279, -344, -154, 108, -419, -490, 485, -490, 485, 411,
	411, 452, -279, 411, -426, 270, -427, -153, 2, -223,
	2, 482, 482, 486, -445, 36, 278, 481, 278, -219,
	-63, 452, -384, -416, -221, 36, 130, -486, -389, -390,
	5, -219, 130, 280, 266, -185, 226, -514, -424, -460,
	-264, -295, -286, 267, 81, 482, -338, -288, -272, -344,
	2, 482, -180, -151, -152, -426, -426, -426, -153, -155,
	-155, -336, -245, 481, -205, -191, 481, -155, -207, 2,
	-427, -98, 284, -219, 474, -301, -252, -251, 298, 274,
	-252, 349, 349, 281, 151, 223, -174, -204, -344, -344,
	126, 31, 31, -344, -344, -355, 482, -344, -344, -279,
	480, 5, -344, 482, 482, 8, -344, 482, 483, -473,
	-190, -344, 482, 482, 482, 486, 486, 482, 482, 482,
	482, 482, 482, 482, -350, 160, 117, 274, 481, 482,
	482, -352, 174, 52, -374, -352, -352, -303, -268, -374,
	-342, -204, 479, -420, -416, -377, 481, 483, 480, 2,
	479, -420, 482, -206, -206, -335, 130, -446, 82, -448,
	66, 143, 88, 266, 270, 427, 313, 62, 108, 326,
	-505, 36, 482, 482, 486, -174, -266, -268, 266, 390,
	108, 266, 108, 101, 422, 69, -206, -213, -268, -268,
	-219, 136, 482, 486, 464, 2, 474, 474, -223, -221,
	136, 482, -204, -260, -248, 198, -206, -443, -440, -441,
	313, -447, -449, 143, 313, -98, -157, -156, -190, 5,
	2, 481, -243, 284, 480, -298, -98, -223, 482, 486,
	-319, 437, -204, -219, 130, -186, 225, -514, -424, -183,
	-322, -320, -327, 481, 280, -98, -264, 464, 482, 482,
	101, 101, 189, 129, -266, 481, 481, -268, 101, 482,
	-46, -47, 195, 82, 302, -216, 397, 195, 481, 481,
	-174, -344, -344, -344, 482, -264, -420, 474, -467, 298,
	482, -344, -344, -345, 160, 481, -355, -468, 451, -344,
	-279, -468, -468, 482, -416, 2, 479, 2, -335, -213,
	-217, -210, -190, 143, 180, 270, 219, 481, -345, -219,
	481, 2, -506, 112, 199, -334, -507, 87, 391, 188,
	-372, -175, 482, 482, 270, 270, -344, -391, 481, -180,
	-180, 482, 482, -344, 411, -419, 86, -417, 2, -490,
	-344, 411, 36, -249, -250, 187, -445, 219, -210, 219,
	-504, 452, 482, 486, 464, 464, -241, -158, -64, -65,
	412, -384, -260, 5, 481, -190, 280, 481, -204, -514,
	-424, -184, -295, 118, -268, 82, -322, -351, -153, 481,
	481, -246, 71, 83, 109, 179, 163, 196, 383, 388,
	26, -246, 482, -266, -266, 482, 481, -153, 486, 26,
	481, 26, 481, -219, -236, -279, -279, 482, -264, 52,
	482, 482, -345, -355, 482, -469, -470, -209, 480, 2,
	-448, -210, 266, 437, -344, -192, 481, -344, 199, 113,
	185, -248, 481, -333, 437, 326, -201, 66, -266, 481,
	481, 481, 464, 160, 481, -98, -158, 296, 481, -247,
	280, 101, 260, -156, -347, -347, 482, 36, -65, 9,
	36, -266, -219, -266, 280, -424, -185, 431, 267, 482,
	-213, -295, -427, -427, -333, 482, 482, -427, -47, -268,
	-268, 482, 482, -474, 320, 350, 173, -279, 482, 486,
	36, 130, 175, 482, -450, 245, -190, 482, 113, 185,
	-249, -268, -248, 175, -219, -491, 437, -217, 482, -254,
	-253, -251, -256, -255, -251, -279, -417, 86, 296, -279,
	-247, -219, -267, -373, -206, 72, 101, -248, -98, -98,
	482, -319, 482, -219, -186, 368, -337, 482, 482, -334,
	-333, 482, 482, 482, 482, -475, -476, 44, 424, 92,
	-344, -475, -475, -470, -472, 143, 452, -451, -454, -453,
	280, 374, 161, 297, 482, 390, 448, -506, 482, 452,
	-260, -344, -333, 482, 486, 442, 482, 486, 442, 482,
	160, 482, 481, 482, 486, 312, 114, 121, -249, -504,
	-333, 481, -334, 481, -287, -153, -153, -248, -334, -153,
	-477, 128, -476, 309, 156, 349, 309, 156, -477, -477,
	-210, 48, -453, 280, -454, 280, 431, 114, 48, -450,
	-248, -253, 187, -255, 160, 296, -268, -373, 350, 350,
	2, -158, -247, -334, -266, -248, -266, -338, -249, -248,
	92, 171, 406, 260, 31, 464, -452, 260, 340, 55,
	368, -452, 464, -451, 481, 481, 482, 2, -247, -248,
	482, -249, 482, -249, 349, 288, -476, -344, 22, 270,
	108, -344, -506, -279, -279, -181, 55, 340, -249, -333,
	-510, 450, -334, 482, 482, -510, -334, 2, -248, -249,
	411, -248, -249, 481, -249, -510, -279, -510, 482, -249,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	373, 374, 376, 377, 378, 380, 381, 383, 385, 387,
	389, 390, 392, 394, 396, 397, 398, 399, 400, 402,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 462, 464, 0, 996, 998, 1000, 1002, 0, 592,
	0, 28, 29, 0, 0, 193, 195, 197, 0, 222,
	224, 225, 227, -2, 0, 323, 324, 326, -2, -2,
	0, 0, 451, 453, 0, 0, 0, 473, 474, 0,
	1084, -2, 467, 469, 471, 536, 538, 540, 542, 544,
	546, 548, 549, 551, 553, 555, 557, 559, 561, 563,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	584, 586, 588, -2, -2, -2, 0, -2, -2, -2,
	1014, 32, 34, 36, 38, 40, 42, 44, 274, 275,
	277, 279, 281, 283, 286, 288, 290, 1139, 328, 330,
	332, 334, 336, 338, 0, -2, 1151, 0, 0, 46,
	47, 48, 49, 50, 51, 52, 53, 69, 70, 71,
	72, 73, 74, 75, 76, 57, 59, 60, 64, 65,
	67, 55, 0, 0, 1115, 1117, 1119, 1121, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 375,
	379, 382, 384, 386, 388, 391, 393, 395, 401, 403,
	405, 874, 1766, 1783, 1784, 1785, 1788, 1789, 1790, 1791,
	1792, 1793, 2140, 2221, 2222, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 0, 429, 427, 1759, 430, 1973, 432, 434, 317,
	318, 319, 320, 321, 322, 0, 444, 438, 443, 445,
	447, 448, 449, 450, 424, 422, 0, 444, 1818, 442,
	994, 995, 989, 990, 2004, 1021, 463, -2, -2, -2,
	2106, -2, 495, -2, 502, 2110, 2006, 507, 0, 509,
	-2, 512, 997, 999, 1001, 590, 591, 1769, 0, 0,
	0, 0, 30, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 924, 925, 0, 0, 157, -2, -2,
	-2, -2, 0, 0, 1856, 1727, 1785, 1730, 1725, 194,
	196, 198, 199, 0, 0, 0, 0, 0, 0, 223,
	226, 228, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 770, 762, 763, 966, 0, 0, 0, 0, 325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
	0, -2, 0, 0, 0, 253, 365, 366, 0, 1140,
	1140, 0, 0, 0, 0, 174, 165, 0, 0, 739,
	452, 454, 0, 0, 160, 0, 0, 993, 0, 176,
	0, 0, 468, 470, 472, 537, 539, 541, 543, 545,
	547, 550, 552, 554, 556, 558, 560, 562, 565, 567,
	569, 571, 573, 575, 577, 579, 581, 583, 585, 587,
	589, 597, 0, 0, 0, 0, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 0, 600, 602, 603, 604,
	0, 655, 672, 0, 914, 1141, 1023, 1004, 1018, 1023,
	1006, 1007, 1008, 1009, 1010, 1015, 1017, 1011, 1012, 1013,
	33, 35, 37, 39, 41, 43, 45, 276, 278, 280,
	282, 284, 287, 289, 291, -2, 1113, 1114, 329, 331,
	333, 335, 337, 339, 455, 0, 457, 0, 601, -2,
	0, 1145, 1145, 1145, 0, 0, 1114, 1112, 0, 460,
	461, 516, 517, 1372, 0, 0, 0, 0, 0, 1624,
	1456, 0, 518, -2, 1487, 1489, 2081, 2106, 1623, 1491,
	1492, 1493, 1494, 1495, 0, 1497, 1498, 1499, 1500, 1501,
	1502, 0, 1504, 0, 1509, 1510, 1511, 0, 2088, 1704,
	1779, -2, 0, 0, 2094, 1775, 0, 1590, 1527, -2,
	-2, 1802, 1781, 1304, 1305, 1306, 1307, 1308, -2, -2,
	2123, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
	1540, 1541, 0, 2070, 2089, 2090, 2095, 2097, 2091, 2078,
	1552, 1866, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1331, 1340, -2, -2, -2,
	-2, -2, -2, 2082, 2083, 2100, 2103, 2109, 2114, 2115,
	2087, 2096, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 1332, -2,
	-2, -2, -2, 1131, 1983, 1134, 874, 1132, 1116, 1118,
	0, 1120, 0, 0, 0, 1125, 1148, 1146, 0, 1187,
	1129, 1130, 1205, 1205, 1229, 0, 1210, 0, 1229, 1140,
	1255, 0, 1216, 1999, 1528, 1529, 0, 1785, 1780, -2,
	-2, 2121, 0, 0, 0, 0, 0, 0, 0, 425,
	0, 431, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 1020, 465, 466, 0, 490, 0, 494, 2077, -2,
	1824, 2015, -2, 498, 1024, 1028, 1029, 1030, 1031, 0,
	0, 0, 0, 0, 504, 0, 0, 491, 492, 510,
	513, 0, 593, 594, 595, 596, 54, 0, 2089, 1255,
	56, 0, 1749, 1810, 1811, 1812, 1813, 1814, 2122, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2123,
	58, 0, 2089, 61, 0, 2089, 0, -2, 66, 0,
	1755, 68, 0, 1752, 77, 0, 2089, 0, 1724, -2,
	-2, 2089, 922, 177, 178, 1798, 1799, 1806, 1807, 1808,
	1809, 1242, 161, 0, 0, 0, 731, 1721, 1726, 732,
	1731, 0, 200, 201, 202, 203, 204, 2089, 206, 207,
	0, 209, 210, 2089, 212, 213, 0, 215, 229, 230,
	0, 232, 0, 2089, 0, 0, 0, 238, -2, 254,
	0, 251, 0, 242, 243, 245, 246, 247, 248, 0,
	295, 293, 1760, 0, 740, 2089, 742, 1765, 0, 0,
	943, -2, 2089, 919, 949, 945, 1763, 0, -2, 0,
	1138, 2089, 1038, 766, 767, 768, 769, 0, 314, 0,
	1051, 0, 1053, 0, 1074, 1261, 1205, 1205, 0, 255,
	256, 257, 258, 259, 2089, 0, 0, 0, 264, 0,
	266, 267, 268, 269, 270, 271, 272, 273, 152, 2089,
	342, 363, 152, 2089, 345, 152, 2089, 348, 0, 351,
	964, 152, 2089, 354, 152, 2089, 357, 358, 360, 2089,
	362, 179, 0, -2, 418, 1768, -2, 368, 0, 369,
	0, -2, 0, 191, 0, 0, 737, 738, 1242, 163,
	0, 991, 992, 0, 0, 475, 0, 0, 598, 599,
	0, 0, 609, 610, 611, 191, 2007, 1981, 1883, 616,
	0, 619, 622, -2, 0, 0, 0, 0, 626, 0,
	631, 632, 633, 0, 736, 635, 0, 0, 637, 0,
	641, 0, 644, 0, 646, 0, 648, -2, -2, -2,
	659, -2, 0, 663, 0, 665, 0, 0, 0, 0,
	680, 681, 0, 686, 0, 689, 690, 691, 692, 693,
	0, 695, 696, 697, 698, 0, 700, 701, -2, -2,
	705, 707, 0, 714, 0, 718, 0, 722, 0, 605,
	606, 152, 1259, 1003, -2, 1005, 0, -2, 0, 456,
	0, 459, 1166, 1099, 1096, 0, 1163, 1164, 1100, 0,
	0, 0, 1107, 0, 1143, 1144, 0, 0, 0, 1086,
	1087, 0, 0, 0, 0, 1629, 1630, 1631, 1632, 1633,
	1634, 1637, 1638, 1635, 1636, 1639, 1640, 0, 0, 0,
	0, 0, 1641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1642, 1643, 1644, 0, 0, 1646,
	0, 1648, 0, 0, 0, 0, 0, 0, 1435, 1437,
	1712, 0, 0, 1645, 1377, 1378, 1379, 1414, 1415, 0,
	0, 1488, 1709, 1708, 1490, 0, 1660, 0, 1503, 1745,
	-2, 0, 1624, 1655, 0, 0, 1512, 1513, 1514, 0,
	0, 1660, 0, 0, 1703, 1524, 1525, 1369, 0, 0,
	1592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1318, 1317,
	0, 1319, 0, 1320, 1321, 1328, 1341, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 1684,
	-2, 0, 0, 0, 0, 1333, 0, 1133, 0, 0,
	1191, 1713, 1717, 1718, 1191, 1191, 0, 0, 1661, 1252,
	1252, 0, 0, 1248, 1248, 1248, 1246, 1229, 0, 1229,
	1239, 0, 1229, 1229, 0, -2, 1210, 0, 0, 1239,
	0, 1223, 406, 408, 410, 412, 413, 414, 416, 1256,
	1257, 0, 0, 0, 0, 0, 0, 1786, 0, 0,
	0, 1771, 0, 0, 0, 0, 436, 446, 1140, 0,
	1663, 1278, 1282, 1283, 1284, 1285, 1286, 1287, 0, 0,
	1279, -2, 1329, 1331, 1352, 1803, 1804, 1805, 1312, 1313,
	1314, 1315, 1316, 1324, 1311, 1311, 1311, 1322, 1351, 1343,
	1351, 1347, 1298, 1299, 1334, 1335, 1336, 1337, 0, 440,
	0, 0, 0, 0, -2, 500, 505, 506, 0, 0,
	1026, 0, 1032, 527, 528, 529, 1034, 1035, 0, 503,
	530, 531, 532, 533, 534, 535, 0, 1733, 1734, 1735,
	1736, 1739, 1740, 0, 0, 501, 520, 508, 0, 514,
	78, 986, 117, 0, 986, 986, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 102, 113, 90, 91, 0,
	0, 0, 0, 62, 896, 0, 899, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 101, 0, 96,
	80, 0, 0, 0, 103, 115, 0, 143, 145, 0,
	0, 920, 0, 1137, 0, 182, 1241, 0, 1242, 730,
	0, 0, 1786, 1729, 0, 0, 0, 0, 231, 233,
	0, 235, 236, 237, 0, 942, 0, 244, 241, 285,
	845, 2089, 0, 0, 312, 307, 0, 309, 0, 895,
	2089, 893, 1764, 0, 917, 0, 0, 0, 950, 1795,
	959, 965, 1040, 0, 316, 0, 1054, 1056, 0, 0,
	1262, 0, 1264, 1265, 0, 261, 262, 263, 0, 340,
	0, 150, 151, 0, 343, 0, 346, 0, 152, 2089,
	1719, 352, 0, 355, 0, 0, 0, 0, 1140, 0,
	0, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	191, 0, 1242, 191, 191, 1242, 477, 1242, 479, 0,
	0, 612, 191, 191, 191, 617, 618, 620, 621, -2,
	-2, 715, 623, 624, 683, 0, 0, 0, 682, 634,
	0, 724, 1995, 734, 683, 1856, 683, 1856, 683, 1856,
	645, 647, 650, 675, 658, 662, 0, 0, 0, 667,
	0, 669, 0, 671, 683, 684, 687, 694, 699, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 1016, 1166,
	1099, 458, 1090, 1165, 1091, 1098, 1101, 0, 0, 1103,
	0, 1105, 0, 1161, 1162, 1169, 1170, 0, 1180, 1181,
	1173, 0, -2, 0, 0, 1176, 1177, 1109, 0, 1126,
	1127, 1128, 1152, 1153, 975, 0, 2221, 1373, 1273, 1374,
	1375, 1748, 0, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, -2, -2, -2, -2, -2, -2, -2,
	-2, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, -2, -2, -2, 1412, 1413, -2, 1647, 1649,
	0, 1712, 0, -2, 0, -2, -2, -2, -2, 1432,
	0, 1434, 1439, 1441, 1443, 0, 0, 0, 0, 1711,
	1453, 1695, 1696, 0, 0, 1626, 1627, 1628, 1438, 0,
	1457, 1710, 1707, 0, 0, 1659, 1151, 1516, 0, 0,
	0, 0, 1523, 1508, 1657, 0, 1656, 0, 0, 0,
	1667, 0, 1702, 1698, 0, 1746, 1368, 1355, 1356, 1357,
	1358, 1359, 1360, 1370, 0, 1743, 1772, 1778, 1600, 0,
	0, 0, 1553, 1554, 1555, 1556, 1557, 0, 1559, 1560,
	0, 1562, 1563, 0, 1565, 1566, 0, 1568, 1569, 1570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 0, 0, 1572, 0, 1670,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 1574,
	0, 1576, 1661, 1681, 0, 0, 1458, 0, 0, 0,
	1624, 0, 1579, 1661, 1689, 0, 0, 0, 0, 0,
	1661, 0, 1694, 0, 1586, 0, 1588, 1135, 0, 0,
	1268, 0, 0, 0, 1716, 1268, 1268, 0, 1186, 0,
	0, 1249, 1250, 1251, 0, 0, 1252, 0, 1243, 1247,
	1244, 1245, 1239, 1202, 0, 0, 1750, 1239, 1208, 1238,
	0, 874, 1228, 1239, 1239, 0, -2, 1212, 1229, 0,
	0, 407, 409, 411, 415, 417, 0, 0, 1151, -2,
	191, 873, 0, 0, 0, 0, 0, 426, 428, 0,
	0, 420, 0, 423, 0, 1269, 1272, 0, 0, 1288,
	1289, 0, -2, 0, 0, 1353, 0, 0, 0, 0,
	493, 0, 1025, 1033, 0, 524, 0, 526, 0, 1737,
	1741, 1738, 1742, 0, 515, 0, 0, 0, 0, 985,
	121, 2089, 0, 154, 0, 0, 838, 1756, 0, 0,
	0, 0, 1871, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 92, 0, 0, 0,
	0, 0, 0, 0, 897, 898, 900, 907, 909, 0,
	903, 1744, 0, 0, 904, 0, 906, 908, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 93, 0,
	0, 0, 0, 1723, 938, 936, 930, 931, 932, 933,
	934, 935, 0, 0, -2, 191, 0, 162, 182, 1722,
	1732, 0, 205, 208, 211, 214, 0, 239, 0, 0,
	772, 745, 0, 0, 294, 191, 0, 0, 308, 0,
	891, 894, 0, 874, 2089, 929, 1762, 0, 0, 0,
	0, 948, 0, 2089, 1751, 1794, 1795, 1042, 1048, 0,
	1268, 0, 1072, 1057, 0, 0, 0, 1072, 1076, 1077,
	1079, 1080, 0, 0, 1263, 0, 265, 364, 152, 152,
	152, 349, 0, 0, 152, 359, 152, 180, 361, 367,
	419, 1140, 1140, 191, 189, 1958, 187, 184, 186, 0,
	0, 0, 773, 775, 776, 777, 778, 0, 1795, 0,
	1909, 1795, 0, 1060, 1062, 0, 158, 164, 191, 0,
	306, 476, 481, 607, 0, 613, 614, 615, 652, 677,
	625, 627, 628, 629, 0, 735, 733, 636, 683, 639,
	683, 642, 683, 661, 664, 666, 0, 0, 0, 679,
	0, 0, 0, 0, 0, 0, 0, 719, 720, 721,
	723, 1260, 1094, 1095, 1097, 0, 1106, 0, 0, 1175,
	-2, -2, 1174, 1178, 1179, -2, -2, -2, -2, 1102,
	0, 1111, 1108, 0, 1160, 973, 974, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1454, 0, -2, 1433,
	1436, 1440, 1442, 1444, 0, 0, 0, 0, 0, 0,
	1650, 0, 1652, 1455, 1705, 1708, 1622, 0, 0, 1150,
	1151, 1151, 0, 1522, 0, 1658, 0, 1665, 1666, 0,
	1515, 0, 1699, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1526, 0, 0, 0, 0, 1558, 1561, 1564,
	1567, 0, 0, 0, 0, 1547, 0, 0, 0, 1551,
	1323, 1309, 0, 1351, 1349, 1350, 1344, 1351, 1348, 1301,
	0, 1300, 0, 1571, 0, 1573, 1575, 0, 0, 1577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1462, 1463, 1578, 1687, 1688, 0,
	0, 0, 0, 0, 0, 1584, 0, 1693, 1585, 1587,
	1140, 1188, 1183, 1267, 0, 1714, 1242, 1190, 1192, 1715,
	1753, 1183, 1183, 0, 1662, 0, 0, 1233, 0, 0,
	0, 1235, 1206, 0, 0, 1200, 0, 1196, 1197, 1198,
	1199, 1207, 874, 1237, 1209, 1213, 1772, 0, 1239, 0,
	1224, 0, 1226, 1258, 0, 1218, 1221, 0, 0, 192,
	1787, 216, 220, 221, 217, 218, 219, 435, 0, 0,
	1664, 0, 1274, 0, 1280, 0, 0, 0, 0, 439,
	0, 489, -2, 522, 523, 525, 0, 521, 118, 986,
	0, 0, 977, 0, 123, 2089, 132, 0, 813, 0,
	1754, 0, 0, 0, 0, 0, 988, 0, 0, 2089,
	152, 2089, 152, 135, 138, 0, 142, 140, 0, 0,
	804, 79, 986, 82, 86, 94, 0, 0, 0, 100,
	0, 0, 0, 979, 0, 901, 902, 905, 911, 63,
	0, 981, 976, 144, 84, 88, 95, 0, 983, 81,
	0, 937, 915, 916, 0, 921, 155, 0, 191, 1728,
	0, 0, 0, 0, 0, 771, 856, 0, 0, 0,
	0, 300, 296, 0, 305, 311, 310, 741, 0, 0,
	0, -2, 952, 946, 947, 0, 0, 0, 2089, 1044,
	1048, 0, 1047, 1138, 1151, 315, 1049, 1072, 0, 0,
	0, 1059, 1055, 1052, 1268, 0, 0, 0, 0, 0,
	260, 341, 344, 347, 1720, 152, 353, 356, 370, 371,
	166, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	782, 0, 1795, 1795, 0, 1758, 0, 0, 0, 0,
	159, 0, 478, 0, 0, 0, 638, 640, 643, 668,
	670, 683, 708, 709, 799, 0, 799, 0, 0, 1104,
	0, 1172, 1110, 1154, 1155, 0, 975, 0, 1376, 1417,
	0, 0, -2, 0, 0, 1421, 0, 0, 0, -2,
	0, 0, 0, 1651, 1653, 0, 1707, 1517, 0, 0,
	0, 1521, 1505, 1506, 0, 1625, 1668, 1697, 1701, 0,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 0, 1747, 1773,
	1777, 1598, 1599, 1603, 1761, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 1346, 0, 0,
	1669, 1680, 1682, 1459, 1460, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, -2, -2, -2, 1477, 1478,
	1479, -2, -2, -2, 0, 0, 0, 1683, 1685, 1686,
	1690, 1691, 0, 1581, 1582, 1583, 1692, 0, 1185, 0,
	1266, 1189, 0, 1185, 1185, 1147, 1231, 0, 0, 1254,
	0, 1203, 0, 1204, 0, 1236, 0, 1211, 1214, 1215,
	1225, 0, 1217, 0, 1220, 0, 1517, -2, 437, 421,
	0, 0, 1276, 0, 0, 1326, 1330, 1354, 441, 1240,
	0, 0, 0, 0, 153, 811, 837, 0, 0, 0,
	968, 975, 0, 0, 843, 125, 0, 0, 0, 133,
	0, 0, 130, 0, 137, 141, 0, 0, 0, 0,
	0, 97, 98, 99, 0, 104, 0, 105, 0, 0,
	0, 0, 0, 0, 940, 941, 181, 156, 234, 874,
	240, 793, 844, 0, 846, 0, 746, 0, 0, 845,
	292, 0, 299, 0, 895, 0, 0, 918, 0, 951,
	953, 963, 0, 0, 0, 1046, 1048, 0, 1039, 1040,
	1168, 1050, 1070, -2, 1069, 0, 1151, 1078, 1075, 1081,
	1082, 0, 350, 188, 0, 183, 185, 0, 169, 0,
	0, 774, 779, 0, 0, 0, 0, 0, 1061, 1063,
	0, 175, 0, 608, 630, 678, 710, 798, 0, 0,
	712, 0, 0, 1171, 1158, 1159, 1156, 975, 1419, 1423,
	0, 0, 0, 1425, -2, 0, 1447, -2, -2, 1654,
	1706, 1496, 1151, 1518, 1520, 1507, 1700, 1371, 0, 1605,
	1602, 0, 1589, 1542, 1543, 0, 0, 1546, 1548, 1549,
	1550, 1310, 1303, 1302, 1679, 0, 0, 0, 0, 1580,
	1136, 1594, 0, 0, 1193, 1594, 1594, 1232, 0, 1234,
	1201, 1194, 0, 1773, 1227, 1219, 0, 0, 1270, 1275,
	0, 1281, 1325, 119, 120, 122, 0, 812, 0, 815,
	0, 0, 0, 0, 822, 823, 0, 0, 0, 0,
	0, 832, 860, 870, 0, 1160, 0, 0, 0, 127,
	147, 0, 0, 987, 0, 0, 152, 152, 0, 0,
	978, 0, 0, 0, 0, 107, 0, 0, 980, 982,
	0, 0, 984, 0, 801, 0, 856, 848, 849, 850,
	0, 855, 857, 0, 0, 759, 0, 755, 0, 0,
	748, 772, 745, 0, 297, 892, 926, 874, 944, 0,
	0, 0, 0, 0, 0, 1036, 1048, 0, 1041, 1042,
	1072, 1167, 0, 0, 0, 1058, 1168, 0, 190, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	480, 482, 0, 0, 488, 797, 0, 0, 0, 0,
	1157, 1427, -2, -2, 1448, 0, 1774, 1776, 1151, 0,
	1591, 0, 0, -2, 0, 0, 0, 1122, 0, 1184,
	1182, 1123, 1124, 1253, 0, 1222, 0, 1277, 124, 0,
	816, 817, 1757, 819, 0, 821, 824, 0, 827, 1797,
	0, 831, 839, 861, 0, 793, 0, 866, 867, 868,
	969, 970, 872, 0, 126, 128, 146, 972, 0, 129,
	136, 0, 0, 83, 0, 0, 1849, 110, 108, 106,
	85, 0, 0, 745, 800, 0, 847, 0, 858, 859,
	749, 0, 747, 0, 0, 0, 0, 0, 298, 301,
	0, 304, 0, 954, 0, 962, 0, 0, 0, 0,
	1043, 1044, 313, 0, 0, 0, 1072, 1083, 168, 0,
	0, 780, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 781, 872, 0, 0, 836, 0, 173, 0, 484,
	0, 486, 0, 711, 713, 0, 0, 1519, 1609, 0,
	1544, 1545, -2, 0, 1485, 1593, 1595, 0, 1195, 1271,
	814, 818, 0, 0, 0, 878, 0, 0, 0, 864,
	865, 801, 0, 793, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 927, 749, 0, 0, 757,
	0, 760, 0, 756, 753, 754, 793, 0, 302, 303,
	0, 0, 963, 0, 0, 1045, 1046, 0, 1065, 1066,
	1068, 1073, 0, 0, 870, 872, 835, 0, 483, 0,
	0, 716, 717, 0, 0, 0, 0, 1604, 1486, 0,
	0, 0, 0, 826, 883, 0, 0, 0, 862, 863,
	860, 0, 841, 0, 874, 131, 0, 971, 872, 0,
	805, 0, 0, 808, 0, 0, 111, 1849, 109, 0,
	743, 0, 0, 852, 854, 0, 761, 801, 759, 928,
	872, 0, 870, 0, 1037, 0, 1067, 191, 191, 793,
	870, 191, 485, 487, 1601, 1621, 1610, -2, 2050, 1853,
	0, 1621, 1621, 1596, 1597, 0, 0, 828, 879, 880,
	0, 875, 876, 877, 1796, 829, 830, 840, 869, 0,
	878, 148, 793, 802, 0, 0, 803, 0, 0, 114,
	0, 116, 0, 851, 0, 0, 0, 0, 745, 749,
	870, 0, 793, 0, 1268, 170, 171, 801, 793, 172,
	1606, 0, 0, 1612, 1613, 1614, 1615, 1616, 1607, 1608,
	820, 0, 881, 0, 882, 0, 0, 0, 0, 883,
	134, 806, 0, 809, 0, 112, 0, 853, 750, 0,
	752, 749, 758, 793, 0, 801, 0, 1064, 833, 801,
	0, 1618, 1619, 0, 0, 0, 884, 0, 887, 888,
	0, 885, 0, 860, 0, 0, 796, 751, 744, 801,
	872, 960, 870, 834, 1617, 1620, 1611, 825, 886, 889,
	890, 871, 842, 0, 0, 792, 794, 795, 960, 870,
	957, 0, 793, 801, 0, 955, 793, 961, 801, 807,
	0, 801, 960, 0, 960, 958, 0, 956, 801, 810,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 470, 3, 476, 471, 3,
	481, 482, 474, 472, 486, 473, 483, 475, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 489, 3,
	462, 464, 463, 467, 485, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 479, 3, 480, 477, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 487, 469, 488, 465,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 466,
	57805, 468, 57806, 478, 57807, 484, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1151
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1156
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1161
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1162
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1163
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1164
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1174
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1183
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1184
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1189
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1190
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1192
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1247
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1273
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1284
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1299
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1303
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1321
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1340
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1372
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1376
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1396
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1420
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1426
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1434
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1458
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1469
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1476
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1488
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1495
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1503
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1508
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1512
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1523
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1531
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1552
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1562
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1571
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1582
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1588
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1619
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1671
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1732
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1739
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1743
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1767
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1788
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1801
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1823
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1829
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1891
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1918
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1921
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1982
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1991
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2002
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2007
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2012
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2017
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2021
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2040
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2048
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2056
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2094
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2104
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2108
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = nil
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2118
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2132
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2133
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2135
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2177
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2213
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2227
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2242
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2255
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2261
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2266
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2281
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2282
		{
			return helpWith(sqllex, "CREATE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "create cast")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2287
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2289
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2290
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2295
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2296
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "create operator")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplemented(sqllex, "create publication")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplemented(sqllex, "create rule")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2301
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2304
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2308
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2311
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2312
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2315
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2316
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2321
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2322
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2324
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2325
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2326
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2327
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2329
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2330
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2331
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2332
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2334
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2336
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2337
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2341
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2342
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2343
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2344
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2345
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2347
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2348
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2360
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2376
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2382
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2395
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2418
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2441
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2457
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2477
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2492
		{

			sqlVAL.union.val = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DELETE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2520
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2533
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2544
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2545
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2546
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2549
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2550
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2551
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2569
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2596
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2599
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2624
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2690
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2701
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2706
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2736
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2738
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2746
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2754
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2762
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2770
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2788
		{
			return helpWith(sqllex, "DELETE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2792
		{
			return helpWith(sqllex, "INSERT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2795
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2796
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2797
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2812
		{
			return helpWith(sqllex, "DELETE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2813
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2814
		{
			return helpWith(sqllex, "INSERT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2820
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2821
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2839
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2847
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2880
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2892
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2910
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2921
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2941
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2949
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2952
		{
			return helpWith(sqllex, "GRANT")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2983
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2992
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3002
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3036
		{
			return helpWith(sqllex, "RESET")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3047
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3061
		{
			return helpWith(sqllex, "USE")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3065
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3066
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3067
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3068
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3074
		{
			return helpWith(sqllex, "USE")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3090
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3105
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3138
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3142
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3148
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3162
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3174
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3245
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3271
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3283
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3288
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3293
		{
			return unimplemented(sqllex, "set from current")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3307
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3335
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3356
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3382
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = tree.Low
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3392
		{
			sqlVAL.union.val = tree.Normal
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = tree.High
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3411
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3415
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3437
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3438
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3439
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3444
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3445
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3448
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3453
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3455
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3456
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3459
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3462
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3470
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3471
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3474
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3505
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.str = "client_encoding"
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.str = "timezone"
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3520
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3538
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3542
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3586
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3595
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3625
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3634
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3642
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3645
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3668
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3692
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3711
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3713
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3717
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3721
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3724
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3726
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3733
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3744
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3749
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3760
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3762
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3765
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3769
		{
			sqlVAL.union.val = true
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = true
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3773
		{
			sqlVAL.union.val = false
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3783
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3790
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3791
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3797
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3800
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3802
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3827
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3830
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3832
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3835
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3837
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3841
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3844
		{
			sqlVAL.union.val = true
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3845
		{
			sqlVAL.union.val = false
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3856
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3892
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = true
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = false
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3910
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3931
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3935
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3942
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3945
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3953
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3958
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3963
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3967
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3979
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3983
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3999
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4010
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4014
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4022
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4030
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4038
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4056
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4067
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4075
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4081
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4090
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4095
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4102
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4106
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4113
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4238
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4242
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4246
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4289
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4339
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4342
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4362
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4401
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4416
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = nil
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{

			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4443
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4448
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4454
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4458
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4463
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4468
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4479
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4495
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4508
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4522
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4523
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4524
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4542
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4543
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = false
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = true
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = true
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			sqlVAL.union.val = true
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = true
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4552
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4563
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4579
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4583
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4596
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4611
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4614
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4620
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4636
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4641
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4646
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.str = ""
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4686
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4692
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4702
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4736
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, types.IsSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4765
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4811
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4815
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4822
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4830
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4844
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4855
		{
		}
	case 833:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4935
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4947
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4958
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4975
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4985
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5000
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5013
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5054
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5065
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5066
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5067
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5068
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5070
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5138
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5142
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5163
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5183
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5191
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5195
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5199
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5226
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5235
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5243
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5250
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5254
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5257
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5274
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5279
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5282
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5284
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5319
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5322
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5337
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = true
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5347
		{

			sqlVAL.union.val = true
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = false
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5362
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5376
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5388
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5403
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5433
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5447
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5452
		{
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5453
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5463
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5470
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5472
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5474
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5476
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5478
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5480
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = []string(nil)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 955:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5516
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5532
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5549
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5564
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5579
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5582
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5583
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5587
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = false
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = true
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = false
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = true
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = false
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5641
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.Descending
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5676
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5682
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5688
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5694
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5702
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5708
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5716
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5722
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5739
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5740
		{
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5743
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5744
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5755
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5777
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5788
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5792
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5793
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5794
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5813
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5818
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5828
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5831
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5836
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5845
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5846
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5847
		{
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5861
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5867
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5868
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5896
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5909
		{
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5911
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5915
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5946
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5960
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5970
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5980
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5988
		{
			sqlVAL.str = ""
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5994
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.str = ""
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6008
		{
			sqlVAL.str = ""
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6018
		{
			sqlVAL.str = ""
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6024
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6036
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6050
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6068
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6072
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6081
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6086
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6092
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6096
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6130
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6147
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6156
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6194
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6206
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6226
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6279
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6283
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6310
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6350
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6359
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6365
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6370
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6376
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6411
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6412
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6413
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6435
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6462
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6474
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6518
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6534
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6563
		{
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6564
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = nil
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6578
		{
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.union.val = true
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = false
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = false
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = true
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6608
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6638
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6659
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6664
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6693
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6726
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6785
		{
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6807
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6839
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6841
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6856
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6864
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6878
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6888
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6899
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6911
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6930
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6969
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6979
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7014
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7025
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7055
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7088
		{
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7090
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = nil
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = true
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = false
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.str = tree.AstFull
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.str = tree.AstRight
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.str = tree.AstInner
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7207
		{
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7208
		{
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.str = tree.AstHash
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.str = ""
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7254
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7270
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7293
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7305
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7315
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7344
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7357
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7365
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7384
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7394
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7411
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7417
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error(fmt.Sprintf("type %q does not exist", sqlDollar[1].str))
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7453
		{
			return unimplemented(sqllex, "qualified types")
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7460
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7461
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = types.Geography
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7511
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7519
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = nil
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = types.Int2
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = types.Int
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = types.Float4
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = types.Float
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7570
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7578
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = types.Bool
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = types.Float
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7611
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7617
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7639
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.String
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = true
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = false
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = types.Date
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7688
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7696
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7710
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7719
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7727
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7744
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = true
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = false
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7756
		{
			sqlVAL.union.val = false
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = types.Interval
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7764
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7768
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7867
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = nil
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7897
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8082
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8114
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8267
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8289
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8483
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8488
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8502
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8506
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8514
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8523
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8534
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8538
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8568
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8579
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8580
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8595
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8604
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {
					typ, ok, unimp := types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							sqllex.Error(fmt.Sprintf("type %q does not exist", typName))
							return 1
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				return unimplemented(sqllex, "generic-type-name prepended casts")
			}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8658
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8665
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8688
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8710
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8720
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8724
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8760
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8778
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8783
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8792
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8798
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8801
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8803
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8807
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8810
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8816
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8819
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8821
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8824
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8829
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8834
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8839
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8841
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8845
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8848
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8849
		{
			return unimplemented(sqllex, "treat")
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8851
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8855
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8859
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8863
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8867
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8870
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8875
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8880
		{
			return unimplemented(sqllex, "within group")
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8881
		{
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8885
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8889
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8896
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8900
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8916
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8924
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8939
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8959
		{
			sqlVAL.str = ""
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8965
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8969
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8975
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8983
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8991
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8999
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9005
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9018
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9046
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9065
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9074
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9078
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9082
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9086
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9091
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9104
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9115
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9127
		{
			sqlVAL.union.val = tree.Any
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9131
		{
			sqlVAL.union.val = tree.Some
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9135
		{
			sqlVAL.union.val = tree.All
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9140
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9142
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9143
		{
			sqlVAL.union.val = tree.Div
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9144
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9146
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9147
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9148
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9149
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9150
		{
			sqlVAL.union.val = tree.LT
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = tree.GT
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9152
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9153
		{
			sqlVAL.union.val = tree.LE
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9154
		{
			sqlVAL.union.val = tree.GE
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = tree.NE
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9159
		{
			sqlVAL.union.val = tree.Like
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9160
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9161
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9162
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9185
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9189
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9195
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9199
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9203
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9214
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9218
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9224
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9228
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9235
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9241
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9251
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9261
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9265
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9271
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9281
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9285
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9308
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9312
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9316
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9322
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9329
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9333
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9354
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9358
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9362
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9366
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9372
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9378
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9384
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9388
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9392
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9398
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9410
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9417
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9427
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9433
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9437
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9444
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9450
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9454
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9461
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9467
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9476
		{
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9477
		{
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9481
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9491
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9500
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9504
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9508
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9516
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9526
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9549
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9557
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9580
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9589
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9593
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9597
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9601
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9607
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9626
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9630
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9642
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9646
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9655
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9666
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9675
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9683
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9695
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9796
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9803
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9807
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9811
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9825
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9829
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9833
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9846
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9855
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9873
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9886
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9893
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9918
		{
			sqlVAL.str = ""
		}
	case 1796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9924
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9928
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
