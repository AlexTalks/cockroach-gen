// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:591
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9615

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1050,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	181, 886,
	198, 886,
	213, 248,
	291, 248,
	299, 726,
	326, 248,
	335, 726,
	373, 726,
	397, 248,
	421, 726,
	-2, 0,
	-1, 74,
	213, 252,
	-2, 0,
	-1, 75,
	107, 1050,
	187, 1050,
	407, 1050,
	408, 1050,
	-2, 0,
	-1, 87,
	120, 1024,
	136, 1024,
	195, 1024,
	224, 1024,
	255, 1024,
	265, 1024,
	402, 1024,
	-2, 1008,
	-1, 117,
	126, 647,
	212, 647,
	293, 627,
	344, 627,
	390, 647,
	-2, 0,
	-1, 118,
	4, 1052,
	21, 1052,
	22, 1052,
	23, 1052,
	24, 1052,
	25, 1052,
	27, 1052,
	32, 1052,
	37, 1052,
	38, 1052,
	39, 1052,
	40, 1052,
	41, 1052,
	42, 1052,
	43, 1052,
	44, 1052,
	45, 1052,
	46, 1052,
	47, 1052,
	49, 1052,
	50, 1052,
	51, 1052,
	52, 1052,
	53, 1052,
	54, 1052,
	57, 1052,
	58, 1052,
	59, 1052,
	60, 1052,
	62, 1052,
	63, 1052,
	67, 1052,
	68, 1052,
	69, 1052,
	70, 1052,
	71, 1052,
	72, 1052,
	74, 1052,
	75, 1052,
	76, 1052,
	77, 1052,
	79, 1052,
	81, 1052,
	82, 1052,
	83, 1052,
	86, 1052,
	87, 1052,
	95, 1052,
	96, 1052,
	97, 1052,
	98, 1052,
	99, 1052,
	100, 1052,
	101, 1052,
	102, 1052,
	104, 1052,
	106, 1052,
	107, 1052,
	109, 1052,
	112, 1052,
	113, 1052,
	114, 1052,
	116, 1052,
	118, 1052,
	119, 1052,
	121, 1052,
	122, 1052,
	123, 1052,
	124, 1052,
	125, 1052,
	126, 1052,
	127, 1052,
	128, 1052,
	129, 1052,
	130, 1052,
	131, 1052,
	132, 1052,
	133, 1052,
	135, 1052,
	141, 1052,
	142, 1052,
	143, 1052,
	144, 1052,
	145, 1052,
	146, 1052,
	148, 1052,
	150, 1052,
	154, 1052,
	155, 1052,
	157, 1052,
	158, 1052,
	160, 1052,
	161, 1052,
	163, 1052,
	164, 1052,
	165, 1052,
	166, 1052,
	167, 1052,
	168, 1052,
	169, 1052,
	170, 1052,
	172, 1052,
	173, 1052,
	175, 1052,
	176, 1052,
	177, 1052,
	181, 1052,
	182, 1052,
	183, 1052,
	184, 1052,
	187, 1052,
	188, 1052,
	189, 1052,
	190, 1052,
	191, 1052,
	192, 1052,
	193, 1052,
	194, 1052,
	196, 1052,
	198, 1052,
	200, 1052,
	202, 1052,
	203, 1052,
	204, 1052,
	206, 1052,
	207, 1052,
	210, 1052,
	211, 1052,
	212, 1052,
	213, 1052,
	215, 1052,
	216, 1052,
	218, 1052,
	219, 1052,
	221, 1052,
	222, 1052,
	225, 1052,
	226, 1052,
	229, 1052,
	230, 1052,
	232, 1052,
	233, 1052,
	234, 1052,
	235, 1052,
	236, 1052,
	237, 1052,
	238, 1052,
	239, 1052,
	240, 1052,
	241, 1052,
	243, 1052,
	244, 1052,
	245, 1052,
	246, 1052,
	248, 1052,
	251, 1052,
	252, 1052,
	253, 1052,
	254, 1052,
	256, 1052,
	257, 1052,
	258, 1052,
	260, 1052,
	261, 1052,
	262, 1052,
	263, 1052,
	266, 1052,
	267, 1052,
	268, 1052,
	270, 1052,
	272, 1052,
	273, 1052,
	274, 1052,
	275, 1052,
	276, 1052,
	277, 1052,
	278, 1052,
	279, 1052,
	280, 1052,
	281, 1052,
	283, 1052,
	284, 1052,
	285, 1052,
	286, 1052,
	287, 1052,
	288, 1052,
	290, 1052,
	292, 1052,
	293, 1052,
	294, 1052,
	295, 1052,
	296, 1052,
	297, 1052,
	298, 1052,
	299, 1052,
	300, 1052,
	302, 1052,
	303, 1052,
	304, 1052,
	305, 1052,
	306, 1052,
	308, 1052,
	309, 1052,
	310, 1052,
	311, 1052,
	312, 1052,
	313, 1052,
	314, 1052,
	315, 1052,
	317, 1052,
	319, 1052,
	320, 1052,
	321, 1052,
	322, 1052,
	323, 1052,
	324, 1052,
	326, 1052,
	327, 1052,
	328, 1052,
	329, 1052,
	330, 1052,
	331, 1052,
	332, 1052,
	333, 1052,
	335, 1052,
	336, 1052,
	337, 1052,
	338, 1052,
	339, 1052,
	340, 1052,
	341, 1052,
	342, 1052,
	343, 1052,
	344, 1052,
	346, 1052,
	347, 1052,
	348, 1052,
	349, 1052,
	350, 1052,
	352, 1052,
	353, 1052,
	354, 1052,
	355, 1052,
	357, 1052,
	358, 1052,
	359, 1052,
	360, 1052,
	361, 1052,
	362, 1052,
	363, 1052,
	364, 1052,
	365, 1052,
	366, 1052,
	367, 1052,
	368, 1052,
	370, 1052,
	371, 1052,
	372, 1052,
	374, 1052,
	375, 1052,
	376, 1052,
	377, 1052,
	378, 1052,
	379, 1052,
	380, 1052,
	382, 1052,
	383, 1052,
	384, 1052,
	385, 1052,
	386, 1052,
	388, 1052,
	390, 1052,
	391, 1052,
	392, 1052,
	393, 1052,
	394, 1052,
	396, 1052,
	397, 1052,
	398, 1052,
	400, 1052,
	401, 1052,
	404, 1052,
	405, 1052,
	406, 1052,
	407, 1052,
	408, 1052,
	409, 1052,
	411, 1052,
	413, 1052,
	414, 1052,
	415, 1052,
	416, 1052,
	417, 1052,
	418, 1052,
	419, 1052,
	421, 1052,
	422, 1052,
	423, 1052,
	428, 1052,
	429, 1052,
	430, 1052,
	431, 1052,
	432, 1052,
	433, 1052,
	-2, 0,
	-1, 119,
	1, 939,
	202, 939,
	290, 939,
	297, 939,
	436, 939,
	459, 939,
	-2, 0,
	-1, 121,
	1, 939,
	459, 939,
	-2, 0,
	-1, 122,
	1, 939,
	459, 939,
	-2, 0,
	-1, 123,
	1, 943,
	459, 943,
	-2, 0,
	-1, 148,
	120, 1023,
	136, 1023,
	195, 1023,
	224, 1023,
	255, 1023,
	265, 1023,
	402, 1023,
	-2, 1017,
	-1, 181,
	4, 1059,
	5, 1059,
	6, 1059,
	7, 1059,
	8, 1059,
	9, 1059,
	10, 1059,
	21, 1059,
	22, 1059,
	23, 1059,
	24, 1059,
	25, 1059,
	27, 1059,
	32, 1059,
	33, 1059,
	37, 1059,
	38, 1059,
	39, 1059,
	40, 1059,
	41, 1059,
	42, 1059,
	43, 1059,
	44, 1059,
	45, 1059,
	46, 1059,
	47, 1059,
	49, 1059,
	50, 1059,
	51, 1059,
	52, 1059,
	53, 1059,
	54, 1059,
	55, 1059,
	56, 1059,
	57, 1059,
	58, 1059,
	59, 1059,
	60, 1059,
	62, 1059,
	63, 1059,
	65, 1059,
	67, 1059,
	68, 1059,
	69, 1059,
	70, 1059,
	71, 1059,
	72, 1059,
	74, 1059,
	75, 1059,
	76, 1059,
	77, 1059,
	79, 1059,
	81, 1059,
	82, 1059,
	83, 1059,
	85, 1059,
	86, 1059,
	87, 1059,
	88, 1059,
	89, 1059,
	90, 1059,
	91, 1059,
	92, 1059,
	93, 1059,
	94, 1059,
	95, 1059,
	96, 1059,
	97, 1059,
	98, 1059,
	99, 1059,
	100, 1059,
	101, 1059,
	102, 1059,
	103, 1059,
	104, 1059,
	106, 1059,
	107, 1059,
	109, 1059,
	112, 1059,
	113, 1059,
	114, 1059,
	116, 1059,
	118, 1059,
	119, 1059,
	121, 1059,
	122, 1059,
	123, 1059,
	124, 1059,
	125, 1059,
	126, 1059,
	127, 1059,
	128, 1059,
	129, 1059,
	130, 1059,
	131, 1059,
	132, 1059,
	133, 1059,
	134, 1059,
	135, 1059,
	141, 1059,
	142, 1059,
	143, 1059,
	144, 1059,
	145, 1059,
	146, 1059,
	148, 1059,
	150, 1059,
	153, 1059,
	154, 1059,
	155, 1059,
	157, 1059,
	158, 1059,
	160, 1059,
	161, 1059,
	163, 1059,
	164, 1059,
	165, 1059,
	166, 1059,
	167, 1059,
	168, 1059,
	169, 1059,
	170, 1059,
	171, 1059,
	172, 1059,
	173, 1059,
	175, 1059,
	176, 1059,
	177, 1059,
	181, 1059,
	182, 1059,
	183, 1059,
	184, 1059,
	186, 1059,
	187, 1059,
	188, 1059,
	189, 1059,
	190, 1059,
	191, 1059,
	192, 1059,
	193, 1059,
	194, 1059,
	196, 1059,
	198, 1059,
	199, 1059,
	200, 1059,
	201, 1059,
	202, 1059,
	203, 1059,
	204, 1059,
	205, 1059,
	206, 1059,
	207, 1059,
	210, 1059,
	211, 1059,
	212, 1059,
	213, 1059,
	215, 1059,
	216, 1059,
	218, 1059,
	219, 1059,
	220, 1059,
	221, 1059,
	222, 1059,
	223, 1059,
	225, 1059,
	226, 1059,
	229, 1059,
	230, 1059,
	232, 1059,
	233, 1059,
	234, 1059,
	235, 1059,
	236, 1059,
	237, 1059,
	238, 1059,
	239, 1059,
	240, 1059,
	241, 1059,
	242, 1059,
	243, 1059,
	244, 1059,
	245, 1059,
	246, 1059,
	247, 1059,
	248, 1059,
	249, 1059,
	250, 1059,
	251, 1059,
	252, 1059,
	253, 1059,
	254, 1059,
	256, 1059,
	257, 1059,
	258, 1059,
	261, 1059,
	262, 1059,
	263, 1059,
	266, 1059,
	267, 1059,
	268, 1059,
	269, 1059,
	270, 1059,
	271, 1059,
	272, 1059,
	273, 1059,
	274, 1059,
	275, 1059,
	276, 1059,
	277, 1059,
	278, 1059,
	279, 1059,
	280, 1059,
	281, 1059,
	283, 1059,
	284, 1059,
	285, 1059,
	286, 1059,
	287, 1059,
	288, 1059,
	290, 1059,
	292, 1059,
	293, 1059,
	294, 1059,
	295, 1059,
	296, 1059,
	297, 1059,
	298, 1059,
	299, 1059,
	300, 1059,
	302, 1059,
	303, 1059,
	304, 1059,
	305, 1059,
	306, 1059,
	308, 1059,
	309, 1059,
	310, 1059,
	311, 1059,
	312, 1059,
	313, 1059,
	314, 1059,
	315, 1059,
	317, 1059,
	318, 1059,
	319, 1059,
	320, 1059,
	321, 1059,
	322, 1059,
	323, 1059,
	324, 1059,
	326, 1059,
	327, 1059,
	328, 1059,
	329, 1059,
	330, 1059,
	331, 1059,
	332, 1059,
	333, 1059,
	335, 1059,
	336, 1059,
	337, 1059,
	338, 1059,
	339, 1059,
	340, 1059,
	341, 1059,
	342, 1059,
	343, 1059,
	344, 1059,
	345, 1059,
	346, 1059,
	347, 1059,
	348, 1059,
	349, 1059,
	350, 1059,
	351, 1059,
	352, 1059,
	353, 1059,
	354, 1059,
	355, 1059,
	357, 1059,
	358, 1059,
	359, 1059,
	360, 1059,
	361, 1059,
	362, 1059,
	363, 1059,
	364, 1059,
	365, 1059,
	366, 1059,
	367, 1059,
	368, 1059,
	370, 1059,
	371, 1059,
	372, 1059,
	374, 1059,
	375, 1059,
	376, 1059,
	377, 1059,
	378, 1059,
	379, 1059,
	380, 1059,
	382, 1059,
	383, 1059,
	384, 1059,
	385, 1059,
	386, 1059,
	388, 1059,
	390, 1059,
	391, 1059,
	392, 1059,
	393, 1059,
	394, 1059,
	395, 1059,
	396, 1059,
	397, 1059,
	398, 1059,
	400, 1059,
	401, 1059,
	403, 1059,
	404, 1059,
	405, 1059,
	406, 1059,
	407, 1059,
	408, 1059,
	409, 1059,
	410, 1059,
	411, 1059,
	413, 1059,
	414, 1059,
	415, 1059,
	416, 1059,
	417, 1059,
	418, 1059,
	419, 1059,
	421, 1059,
	422, 1059,
	423, 1059,
	428, 1059,
	429, 1059,
	430, 1059,
	431, 1059,
	432, 1059,
	433, 1059,
	434, 1059,
	442, 1059,
	447, 1059,
	448, 1059,
	449, 1059,
	456, 1059,
	460, 1059,
	-2, 0,
	-1, 553,
	152, 1732,
	387, 1732,
	439, 1732,
	458, 1732,
	-2, 0,
	-1, 554,
	152, 1810,
	387, 1810,
	439, 1810,
	458, 1810,
	-2, 0,
	-1, 555,
	152, 1721,
	387, 1721,
	439, 1721,
	458, 1721,
	-2, 0,
	-1, 557,
	152, 1899,
	387, 1899,
	439, 1899,
	458, 1899,
	-2, 0,
	-1, 559,
	152, 1928,
	387, 1928,
	439, 1928,
	458, 1928,
	-2, 0,
	-1, 566,
	152, 1820,
	387, 1820,
	439, 1820,
	458, 1820,
	-2, 499,
	-1, 583,
	458, 1680,
	461, 1680,
	-2, 695,
	-1, 584,
	458, 1682,
	461, 1682,
	-2, 696,
	-1, 585,
	458, 1681,
	461, 1681,
	-2, 697,
	-1, 586,
	461, 1627,
	-2, 698,
	-1, 733,
	293, 628,
	344, 628,
	-2, 0,
	-1, 734,
	293, 627,
	344, 627,
	-2, 579,
	-1, 737,
	1, 657,
	455, 657,
	457, 657,
	459, 657,
	-2, 0,
	-1, 738,
	1, 694,
	149, 694,
	455, 694,
	457, 694,
	459, 694,
	-2, 0,
	-1, 746,
	1, 631,
	455, 631,
	457, 631,
	459, 631,
	-2, 0,
	-1, 749,
	1, 657,
	455, 657,
	457, 657,
	459, 657,
	-2, 0,
	-1, 750,
	1, 659,
	455, 659,
	457, 659,
	459, 659,
	-2, 0,
	-1, 751,
	1, 662,
	455, 662,
	457, 662,
	459, 662,
	-2, 0,
	-1, 755,
	1, 676,
	455, 676,
	457, 676,
	459, 676,
	-2, 0,
	-1, 756,
	1, 678,
	455, 678,
	457, 678,
	459, 678,
	-2, 0,
	-1, 799,
	136, 1061,
	224, 1061,
	255, 1061,
	-2, 1017,
	-1, 814,
	136, 1060,
	224, 1060,
	255, 1060,
	-2, 1017,
	-1, 838,
	458, 1679,
	-2, 507,
	-1, 867,
	456, 1671,
	-2, 1662,
	-1, 873,
	5, 1196,
	-2, 1712,
	-1, 874,
	5, 1197,
	-2, 1716,
	-1, 875,
	5, 1198,
	-2, 1715,
	-1, 876,
	5, 1199,
	-2, 1925,
	-1, 877,
	5, 1200,
	-2, 1822,
	-1, 878,
	5, 1201,
	-2, 1891,
	-1, 879,
	5, 1202,
	-2, 1893,
	-1, 880,
	5, 1203,
	-2, 1905,
	-1, 881,
	5, 1204,
	-2, 1894,
	-1, 882,
	5, 1205,
	-2, 1895,
	-1, 883,
	5, 1206,
	-2, 1711,
	-1, 884,
	5, 1207,
	-2, 1941,
	-1, 885,
	5, 1208,
	-2, 1785,
	-1, 886,
	5, 1209,
	-2, 1830,
	-1, 887,
	5, 1210,
	-2, 1832,
	-1, 888,
	5, 1211,
	-2, 1789,
	-1, 889,
	5, 1212,
	456, 1689,
	-2, 1680,
	-1, 890,
	5, 1268,
	456, 1268,
	-2, 1976,
	-1, 895,
	456, 1690,
	-2, 1681,
	-1, 897,
	5, 1216,
	-2, 1974,
	-1, 898,
	5, 1217,
	-2, 1975,
	-1, 899,
	5, 1218,
	-2, 1788,
	-1, 900,
	5, 1219,
	-2, 1987,
	-1, 901,
	5, 1220,
	-2, 1790,
	-1, 902,
	5, 1221,
	-2, 1791,
	-1, 903,
	5, 1222,
	-2, 1792,
	-1, 904,
	5, 1223,
	-2, 1956,
	-1, 905,
	5, 1224,
	-2, 1985,
	-1, 906,
	5, 1225,
	-2, 1768,
	-1, 907,
	5, 1226,
	-2, 1769,
	-1, 908,
	5, 1240,
	-2, 1968,
	-1, 910,
	5, 1215,
	-2, 1964,
	-1, 911,
	5, 1215,
	-2, 1963,
	-1, 912,
	5, 1215,
	-2, 1980,
	-1, 913,
	5, 1232,
	-2, 1958,
	-1, 914,
	5, 1233,
	-2, 1713,
	-1, 915,
	5, 1243,
	-2, 1957,
	-1, 916,
	5, 1245,
	-2, 1996,
	-1, 918,
	5, 1256,
	-2, 1742,
	-1, 919,
	5, 1267,
	-2, 1989,
	-1, 920,
	5, 1259,
	-2, 1990,
	-1, 921,
	5, 1267,
	-2, 1991,
	-1, 922,
	5, 1263,
	-2, 1992,
	-1, 923,
	5, 1183,
	-2, 1798,
	-1, 924,
	5, 1184,
	-2, 1799,
	-1, 925,
	458, 1677,
	-2, 1661,
	-1, 926,
	456, 2016,
	-2, 1678,
	-1, 946,
	5, 1251,
	-2, 1915,
	-1, 963,
	5, 1250,
	-2, 1997,
	-1, 973,
	5, 1252,
	422, 1252,
	-2, 1959,
	-1, 974,
	5, 1253,
	422, 1253,
	-2, 1960,
	-1, 1010,
	456, 1689,
	-2, 1680,
	-1, 1038,
	152, 1928,
	387, 1928,
	439, 1928,
	458, 1928,
	-2, 0,
	-1, 1039,
	1, 487,
	459, 487,
	-2, 951,
	-1, 1159,
	308, 1658,
	449, 1658,
	-2, 1657,
	-1, 1182,
	460, 1658,
	-2, 1659,
	-1, 1217,
	299, 726,
	421, 726,
	-2, 247,
	-1, 1237,
	279, 1048,
	-2, 859,
	-1, 1246,
	259, 1684,
	-2, 0,
	-1, 1310,
	1, 362,
	455, 362,
	457, 362,
	459, 362,
	-2, 1022,
	-1, 1313,
	4, 1995,
	11, 1995,
	12, 1995,
	14, 1995,
	15, 1995,
	16, 1995,
	17, 1995,
	18, 1995,
	19, 1995,
	21, 1995,
	22, 1995,
	23, 1995,
	24, 1995,
	25, 1995,
	27, 1995,
	30, 1995,
	32, 1995,
	34, 1995,
	37, 1995,
	38, 1995,
	39, 1995,
	40, 1995,
	41, 1995,
	42, 1995,
	43, 1995,
	44, 1995,
	45, 1995,
	46, 1995,
	47, 1995,
	49, 1995,
	50, 1995,
	51, 1995,
	52, 1995,
	53, 1995,
	54, 1995,
	57, 1995,
	58, 1995,
	59, 1995,
	60, 1995,
	62, 1995,
	63, 1995,
	64, 1995,
	67, 1995,
	68, 1995,
	69, 1995,
	70, 1995,
	71, 1995,
	72, 1995,
	73, 1995,
	74, 1995,
	75, 1995,
	76, 1995,
	77, 1995,
	79, 1995,
	80, 1995,
	81, 1995,
	82, 1995,
	83, 1995,
	85, 1995,
	86, 1995,
	87, 1995,
	95, 1995,
	96, 1995,
	97, 1995,
	98, 1995,
	99, 1995,
	100, 1995,
	101, 1995,
	102, 1995,
	104, 1995,
	106, 1995,
	107, 1995,
	109, 1995,
	112, 1995,
	113, 1995,
	114, 1995,
	116, 1995,
	118, 1995,
	119, 1995,
	121, 1995,
	122, 1995,
	123, 1995,
	124, 1995,
	125, 1995,
	126, 1995,
	127, 1995,
	128, 1995,
	129, 1995,
	130, 1995,
	131, 1995,
	132, 1995,
	133, 1995,
	137, 1995,
	138, 1995,
	139, 1995,
	140, 1995,
	141, 1995,
	142, 1995,
	143, 1995,
	144, 1995,
	145, 1995,
	146, 1995,
	147, 1995,
	148, 1995,
	150, 1995,
	153, 1995,
	154, 1995,
	155, 1995,
	157, 1995,
	158, 1995,
	160, 1995,
	161, 1995,
	163, 1995,
	164, 1995,
	165, 1995,
	166, 1995,
	167, 1995,
	168, 1995,
	169, 1995,
	170, 1995,
	171, 1995,
	172, 1995,
	173, 1995,
	174, 1995,
	175, 1995,
	176, 1995,
	177, 1995,
	178, 1995,
	179, 1995,
	180, 1995,
	182, 1995,
	183, 1995,
	184, 1995,
	186, 1995,
	187, 1995,
	188, 1995,
	189, 1995,
	190, 1995,
	191, 1995,
	192, 1995,
	193, 1995,
	194, 1995,
	196, 1995,
	198, 1995,
	199, 1995,
	200, 1995,
	201, 1995,
	202, 1995,
	203, 1995,
	204, 1995,
	205, 1995,
	206, 1995,
	207, 1995,
	208, 1995,
	209, 1995,
	210, 1995,
	211, 1995,
	212, 1995,
	213, 1995,
	215, 1995,
	216, 1995,
	218, 1995,
	219, 1995,
	220, 1995,
	221, 1995,
	222, 1995,
	223, 1995,
	225, 1995,
	226, 1995,
	229, 1995,
	230, 1995,
	231, 1995,
	232, 1995,
	233, 1995,
	234, 1995,
	235, 1995,
	236, 1995,
	237, 1995,
	238, 1995,
	239, 1995,
	240, 1995,
	241, 1995,
	242, 1995,
	243, 1995,
	244, 1995,
	245, 1995,
	246, 1995,
	249, 1995,
	251, 1995,
	252, 1995,
	253, 1995,
	254, 1995,
	256, 1995,
	257, 1995,
	258, 1995,
	261, 1995,
	262, 1995,
	263, 1995,
	264, 1995,
	266, 1995,
	267, 1995,
	268, 1995,
	270, 1995,
	272, 1995,
	273, 1995,
	274, 1995,
	275, 1995,
	276, 1995,
	277, 1995,
	278, 1995,
	279, 1995,
	280, 1995,
	281, 1995,
	283, 1995,
	284, 1995,
	285, 1995,
	286, 1995,
	287, 1995,
	288, 1995,
	290, 1995,
	292, 1995,
	293, 1995,
	294, 1995,
	295, 1995,
	296, 1995,
	297, 1995,
	298, 1995,
	299, 1995,
	300, 1995,
	302, 1995,
	303, 1995,
	304, 1995,
	305, 1995,
	306, 1995,
	307, 1995,
	308, 1995,
	309, 1995,
	310, 1995,
	311, 1995,
	312, 1995,
	313, 1995,
	314, 1995,
	315, 1995,
	317, 1995,
	318, 1995,
	319, 1995,
	320, 1995,
	321, 1995,
	322, 1995,
	323, 1995,
	324, 1995,
	325, 1995,
	326, 1995,
	327, 1995,
	328, 1995,
	329, 1995,
	330, 1995,
	331, 1995,
	332, 1995,
	333, 1995,
	335, 1995,
	336, 1995,
	337, 1995,
	338, 1995,
	339, 1995,
	340, 1995,
	341, 1995,
	342, 1995,
	343, 1995,
	344, 1995,
	346, 1995,
	347, 1995,
	348, 1995,
	349, 1995,
	350, 1995,
	351, 1995,
	352, 1995,
	353, 1995,
	354, 1995,
	355, 1995,
	357, 1995,
	358, 1995,
	359, 1995,
	360, 1995,
	361, 1995,
	362, 1995,
	363, 1995,
	364, 1995,
	365, 1995,
	366, 1995,
	367, 1995,
	368, 1995,
	370, 1995,
	371, 1995,
	372, 1995,
	374, 1995,
	375, 1995,
	376, 1995,
	377, 1995,
	378, 1995,
	379, 1995,
	380, 1995,
	382, 1995,
	383, 1995,
	384, 1995,
	385, 1995,
	386, 1995,
	388, 1995,
	390, 1995,
	391, 1995,
	392, 1995,
	393, 1995,
	394, 1995,
	396, 1995,
	397, 1995,
	398, 1995,
	400, 1995,
	401, 1995,
	404, 1995,
	405, 1995,
	406, 1995,
	407, 1995,
	408, 1995,
	409, 1995,
	411, 1995,
	413, 1995,
	414, 1995,
	415, 1995,
	416, 1995,
	417, 1995,
	418, 1995,
	419, 1995,
	421, 1995,
	422, 1995,
	423, 1995,
	428, 1995,
	429, 1995,
	430, 1995,
	431, 1995,
	432, 1995,
	433, 1995,
	434, 1995,
	435, 1995,
	437, 1995,
	438, 1995,
	439, 1995,
	440, 1995,
	441, 1995,
	442, 1995,
	444, 1995,
	445, 1995,
	446, 1995,
	447, 1995,
	448, 1995,
	449, 1995,
	450, 1995,
	451, 1995,
	452, 1995,
	454, 1995,
	457, 1995,
	458, 1995,
	460, 1995,
	461, 1995,
	-2, 0,
	-1, 1316,
	152, 1899,
	387, 1899,
	439, 1899,
	458, 1899,
	-2, 0,
	-1, 1345,
	293, 628,
	344, 628,
	-2, 0,
	-1, 1368,
	1, 623,
	455, 623,
	457, 623,
	459, 623,
	-2, 0,
	-1, 1369,
	1, 648,
	455, 648,
	457, 648,
	459, 648,
	-2, 0,
	-1, 1370,
	1, 630,
	455, 630,
	457, 630,
	459, 630,
	-2, 0,
	-1, 1372,
	1, 634,
	455, 634,
	457, 634,
	459, 634,
	-2, 0,
	-1, 1397,
	1, 1948,
	455, 1948,
	457, 1948,
	458, 1948,
	459, 1948,
	-2, 674,
	-1, 1398,
	1, 1897,
	455, 1897,
	457, 1897,
	458, 1897,
	459, 1897,
	-2, 675,
	-1, 1411,
	1, 946,
	459, 946,
	-2, 951,
	-1, 1416,
	136, 1060,
	224, 1060,
	255, 1060,
	-2, 1017,
	-1, 1512,
	120, 1024,
	136, 1024,
	195, 1024,
	224, 1024,
	255, 1024,
	265, 1024,
	402, 1024,
	-2, 1424,
	-1, 1565,
	457, 1562,
	-2, 0,
	-1, 1607,
	120, 1024,
	136, 1024,
	195, 1024,
	224, 1024,
	255, 1024,
	265, 1024,
	402, 1024,
	-2, 1133,
	-1, 1661,
	456, 1255,
	-2, 1243,
	-1, 1700,
	1, 489,
	459, 489,
	-2, 951,
	-1, 1894,
	1, 625,
	455, 625,
	457, 625,
	459, 625,
	-2, 0,
	-1, 1895,
	1, 650,
	455, 650,
	457, 650,
	459, 650,
	-2, 0,
	-1, 1980,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1304,
	-1, 1981,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1305,
	-1, 1982,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1306,
	-1, 1983,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1307,
	-1, 1984,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1308,
	-1, 1985,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1309,
	-1, 1986,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1310,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1311,
	-1, 1999,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1323,
	-1, 2000,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1324,
	-1, 2001,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	-2, 1325,
	-1, 2004,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1330,
	-1, 2010,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1334,
	-1, 2012,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1342,
	-1, 2013,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1343,
	-1, 2014,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1344,
	-1, 2015,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1345,
	-1, 2109,
	5, 1212,
	152, 1573,
	456, 1689,
	-2, 1680,
	-1, 2110,
	152, 1574,
	-2, 1952,
	-1, 2111,
	152, 1575,
	-2, 1819,
	-1, 2112,
	152, 1576,
	-2, 1743,
	-1, 2113,
	152, 1577,
	-2, 1779,
	-1, 2114,
	152, 1578,
	-2, 1817,
	-1, 2115,
	152, 1579,
	-2, 1890,
	-1, 2191,
	1, 1134,
	2, 1134,
	85, 1134,
	120, 1134,
	136, 1134,
	149, 1134,
	153, 1134,
	159, 1134,
	162, 1134,
	186, 1134,
	195, 1134,
	205, 1134,
	220, 1134,
	224, 1134,
	242, 1134,
	255, 1134,
	259, 1134,
	265, 1134,
	316, 1134,
	318, 1134,
	402, 1134,
	412, 1134,
	425, 1134,
	426, 1134,
	427, 1134,
	436, 1134,
	455, 1134,
	457, 1134,
	459, 1134,
	461, 1134,
	-2, 1133,
	-1, 2196,
	456, 1663,
	-2, 1675,
	-1, 2217,
	456, 1254,
	-2, 1244,
	-1, 2455,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1332,
	-1, 2456,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1336,
	-1, 2462,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1338,
	-1, 2642,
	202, 951,
	290, 951,
	297, 951,
	436, 951,
	-2, 486,
	-1, 2734,
	279, 1048,
	-2, 859,
	-1, 2814,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1340,
	-1, 2821,
	199, 0,
	201, 0,
	249, 0,
	-2, 1359,
	-1, 2884,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1388,
	-1, 2885,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1389,
	-1, 2886,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1390,
	-1, 2890,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1394,
	-1, 2891,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1395,
	-1, 2892,
	14, 0,
	15, 0,
	16, 0,
	437, 0,
	438, 0,
	439, 0,
	-2, 1396,
	-1, 2935,
	456, 1664,
	-2, 1676,
	-1, 3023,
	458, 2098,
	-2, 994,
	-1, 3069,
	199, 0,
	201, 0,
	249, 0,
	-2, 1360,
	-1, 3072,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1363,
	-1, 3073,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1365,
	-1, 3229,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1364,
	-1, 3230,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1366,
	-1, 3240,
	199, 0,
	-2, 1397,
	-1, 3344,
	199, 0,
	-2, 1398,
	-1, 3460,
	41, 0,
	171, 0,
	223, 0,
	351, 0,
	434, 0,
	442, 0,
	-2, 1955,
}

const sqlPrivate = 57344

const sqlLast = 74720

var sqlAct = [...]int{

	895, 3459, 3554, 3296, 3270, 3469, 3273, 3544, 2348, 3173,
	3438, 2721, 3055, 3426, 3429, 3470, 3507, 3413, 3471, 2955,
	2140, 2357, 3303, 3348, 2852, 3259, 2349, 3197, 1967, 3014,
	3220, 824, 1163, 3308, 3458, 3019, 3009, 2183, 1045, 213,
	3131, 213, 213, 1631, 213, 213, 213, 213, 213, 1302,
	2659, 213, 2027, 2743, 2717, 1427, 1011, 2246, 1298, 585,
	2745, 2750, 2996, 2956, 3244, 1745, 2345, 2322, 1064, 1602,
	815, 1870, 564, 2320, 852, 2391, 2448, 213, 2325, 3103,
	1831, 585, 2604, 2564, 3054, 2591, 2182, 1352, 1003, 2304,
	1600, 2580, 2618, 1632, 2389, 1574, 2358, 1510, 1820, 2399,
	2305, 2248, 32, 1821, 2184, 1754, 2907, 1828, 1964, 2388,
	2483, 2040, 4, 681, 2563, 917, 1960, 1156, 2444, 3349,
	2380, 1175, 1783, 1520, 2382, 2398, 2078, 2186, 1779, 2158,
	891, 1772, 2323, 823, 141, 86, 1538, 1732, 1052, 1575,
	1411, 2058, 2070, 3297, 1730, 2281, 2024, 2623, 812, 2719,
	1165, 1188, 1849, 1311, 1285, 1295, 2351, 1817, 1231, 2392,
	207, 2052, 998, 2137, 1041, 532, 995, 2238, 518, 1584,
	2148, 2041, 540, 2166, 1426, 206, 213, 213, 2105, 1501,
	977, 586, 1428, 587, 205, 548, 1816, 558, 676, 581,
	1309, 1261, 2280, 1837, 657, 1185, 1744, 851, 535, 1533,
	626, 850, 148, 1000, 37, 36, 1410, 34, 1610, 141,
	25, 543, 23, 21, 1432, 149, 975, 744, 1172, 590,
	2479, 728, 1243, 2924, 3584, 2925, 819, 1851, 2157, 1871,
	124, 1371, 2350, 1851, 593, 1851, 57, 2760, 1049, 3575,
	3574, 590, 3553, 2157, 2157, 2640, 1788, 3536, 58, 119,
	3534, 3145, 819, 3493, 3145, 3491, 593, 3494, 2498, 2157,
	814, 3489, 62, 2404, 2499, 2157, 2157, 3486, 2759, 3483,
	691, 3487, 3480, 3484, 2150, 1049, 1788, 39, 121, 2536,
	2537, 3456, 1028, 3455, 3454, 1788, 820, 1788, 1863, 1305,
	3451, 38, 3450, 68, 1863, 2055, 1863, 3408, 1440, 1441,
	2910, 2210, 3398, 978, 978, 3397, 3145, 3391, 3385, 3145,
	3383, 1788, 3145, 41, 3145, 3346, 3329, 3326, 42, 2210,
	1788, 3145, 3409, 74, 1443, 3287, 122, 828, 2300, 1788,
	3286, 3279, 40, 85, 1788, 1788, 3278, 3332, 75, 82,
	3145, 2551, 3250, 3231, 800, 3218, 1788, 2210, 3209, 1863,
	1863, 1442, 2772, 2910, 1206, 3170, 3162, 799, 3144, 2157,
	2157, 2056, 3145, 3071, 3031, 43, 3025, 2210, 2788, 807,
	2788, 2994, 2930, 2920, 2913, 2995, 2931, 2921, 2157, 677,
	2845, 2833, 76, 2787, 1788, 2157, 2779, 2788, 1023, 2206,
	2780, 2712, 992, 979, 2577, 1863, 2575, 2574, 2157, 2528,
	2157, 2157, 2149, 2157, 57, 2511, 679, 2500, 2378, 2512,
	2223, 2157, 1867, 2209, 2157, 2542, 58, 2210, 981, 3163,
	982, 1788, 2157, 1788, 1440, 1441, 2780, 2204, 2295, 2237,
	62, 2157, 2057, 2054, 1448, 2198, 2156, 1866, 1703, 1788,
	2157, 1867, 2772, 2332, 181, 2447, 1787, 2235, 2482, 1570,
	1443, 1184, 1601, 2981, 2809, 1782, 2761, 1354, 2177, 2176,
	3120, 68, 1024, 2175, 2174, 1470, 1471, 1472, 2173, 983,
	181, 980, 806, 1200, 805, 2762, 1723, 1442, 804, 803,
	1511, 802, 798, 183, 797, 796, 795, 1852, 2427, 77,
	794, 74, 793, 1852, 792, 1852, 791, 44, 790, 2552,
	789, 85, 181, 788, 787, 786, 75, 82, 1194, 183,
	726, 725, 724, 57, 723, 722, 1440, 1441, 1463, 1205,
	47, 147, 80, 213, 81, 58, 45, 182, 2059, 721,
	123, 720, 719, 718, 822, 717, 46, 175, 716, 62,
	715, 183, 1443, 181, 3082, 176, 2759, 714, 713, 712,
	76, 213, 2928, 182, 1024, 50, 711, 710, 213, 117,
	1448, 709, 708, 181, 707, 706, 150, 705, 120, 1442,
	68, 704, 2354, 703, 213, 1067, 213, 213, 1168, 213,
	1067, 213, 183, 2149, 702, 182, 701, 700, 690, 213,
	213, 1024, 150, 2553, 1051, 175, 689, 648, 1056, 647,
	74, 75, 183, 176, 606, 118, 605, 604, 2536, 2537,
	85, 596, 1464, 595, 213, 75, 82, 594, 151, 571,
	570, 569, 568, 552, 150, 203, 182, 2053, 213, 202,
	1168, 1168, 213, 213, 1859, 213, 175, 201, 1199, 1178,
	1850, 200, 1938, 199, 176, 198, 182, 213, 197, 2536,
	2537, 2215, 1448, 1373, 2789, 213, 175, 77, 196, 76,
	195, 1065, 194, 193, 176, 150, 1176, 192, 3, 213,
	213, 213, 213, 213, 1168, 1168, 191, 190, 189, 1168,
	188, 213, 1168, 213, 213, 150, 181, 187, 2621, 147,
	80, 2267, 81, 186, 185, 184, 2505, 213, 2536, 2537,
	1039, 1511, 1193, 2494, 1198, 2310, 1204, 2199, 1603, 2190,
	2096, 181, 2547, 2545, 2546, 2538, 2539, 2540, 2541, 2543,
	2544, 2094, 2092, 680, 1306, 183, 1541, 117, 1728, 1617,
	1439, 2090, 1540, 1168, 1444, 1445, 1446, 1447, 1449, 1450,
	1060, 2338, 1153, 1158, 2542, 1036, 1527, 2208, 1541, 590,
	183, 2088, 1522, 1544, 1540, 213, 1190, 1058, 1873, 1013,
	3476, 1159, 3457, 3379, 593, 1182, 77, 3339, 213, 182,
	1187, 3269, 1186, 118, 3210, 1539, 3205, 3124, 3102, 175,
	3335, 3101, 3089, 213, 3333, 2542, 151, 176, 3088, 3087,
	1322, 3086, 1314, 3080, 182, 3079, 3078, 1325, 147, 80,
	2993, 81, 2944, 181, 175, 181, 181, 181, 150, 991,
	1326, 2943, 176, 141, 820, 2941, 1244, 1244, 2934, 2904,
	181, 2903, 117, 2902, 1289, 1292, 1872, 2829, 2552, 1312,
	2536, 2537, 680, 678, 2542, 2825, 117, 1381, 2783, 2616,
	181, 2571, 183, 2562, 183, 183, 183, 2535, 2532, 1372,
	2531, 2529, 2518, 1248, 2517, 1245, 1182, 2536, 2537, 183,
	1444, 1445, 1446, 1447, 1449, 1450, 181, 1161, 2516, 2513,
	1417, 2510, 2488, 2536, 2537, 2487, 2554, 2555, 2556, 183,
	2480, 2379, 118, 1523, 2191, 1521, 182, 2063, 182, 182,
	182, 1299, 3067, 1439, 1522, 151, 175, 1825, 175, 175,
	175, 1793, 1791, 182, 176, 183, 176, 176, 176, 1438,
	1416, 1509, 3582, 175, 3552, 1724, 2282, 3551, 2339, 1237,
	1240, 176, 2553, 182, 2443, 2353, 3492, 150, 150, 150,
	1012, 2854, 3446, 175, 1409, 2551, 3444, 3376, 3373, 3370,
	3369, 176, 150, 3368, 3364, 3358, 3330, 3325, 1415, 182,
	3324, 1331, 1346, 2030, 1446, 1447, 1449, 1450, 3265, 175,
	3242, 2634, 150, 1425, 3215, 3214, 2542, 176, 1414, 3195,
	3192, 1318, 3186, 3204, 3119, 3100, 3045, 213, 3042, 2971,
	1412, 2970, 2959, 2958, 2916, 2820, 2790, 2773, 150, 2737,
	2706, 2536, 2537, 2542, 894, 820, 2684, 2662, 2661, 2636,
	2576, 2509, 2508, 213, 2493, 2471, 2319, 1545, 1542, 2542,
	1534, 1581, 1531, 213, 1067, 213, 213, 213, 2219, 2218,
	2194, 2171, 1338, 585, 213, 213, 800, 2036, 585, 213,
	1418, 2155, 1435, 1436, 213, 1572, 2086, 1505, 1616, 799,
	1626, 1573, 211, 2546, 2538, 2539, 2540, 2541, 2543, 2544,
	2552, 1569, 1440, 1441, 1568, 1567, 1698, 1566, 1543, 1067,
	1565, 2557, 1564, 1563, 1562, 1561, 1559, 1558, 1557, 1556,
	1611, 1555, 1554, 1553, 1552, 1551, 1550, 2552, 1443, 2337,
	1549, 1578, 1579, 1548, 1726, 2538, 2539, 2540, 2541, 2543,
	2544, 1547, 1591, 2552, 1612, 1524, 1506, 1596, 1504, 1499,
	1620, 1638, 893, 1035, 978, 1442, 1697, 1026, 1019, 3351,
	3191, 1535, 1536, 2662, 3121, 3075, 2940, 2923, 2919, 2497,
	2212, 2172, 3254, 3123, 2939, 1719, 1523, 2542, 141, 2632,
	1874, 2536, 2537, 1502, 1723, 820, 2540, 2541, 2543, 2544,
	1055, 2687, 1663, 3371, 2553, 1729, 2746, 1623, 867, 3208,
	2597, 3164, 1053, 2926, 1714, 1713, 1723, 1749, 1723, 1720,
	2775, 1723, 1608, 2774, 1619, 2095, 1046, 834, 1049, 1603,
	1701, 2553, 3309, 3004, 1040, 1628, 2093, 2091, 1006, 1700,
	1695, 2515, 1049, 590, 1168, 213, 2089, 2553, 590, 1541,
	1407, 1067, 1054, 1571, 838, 1540, 1722, 2284, 593, 1599,
	1598, 1605, 1597, 593, 1738, 1595, 2087, 1594, 1593, 2514,
	3336, 2552, 1627, 784, 3334, 2453, 2269, 1694, 1050, 1709,
	1049, 2969, 2723, 1629, 2722, 3268, 1529, 1871, 1635, 1382,
	213, 213, 3304, 1621, 1353, 1554, 1554, 213, 1769, 1354,
	1345, 1771, 1822, 2985, 1776, 2973, 3245, 213, 1715, 2503,
	2795, 2700, 785, 1717, 1047, 1767, 213, 3555, 213, 2350,
	213, 1048, 2856, 990, 213, 2071, 2538, 2539, 2540, 2541,
	2543, 2544, 2217, 1560, 1537, 2715, 213, 1789, 3477, 1813,
	1221, 3488, 3485, 2755, 2951, 3423, 1005, 3010, 2386, 1753,
	2547, 2545, 2546, 2538, 2539, 2540, 2541, 2543, 2544, 2548,
	2549, 2550, 1335, 3522, 2440, 2553, 2547, 2545, 2546, 2538,
	2539, 2540, 2541, 2543, 2544, 3390, 1168, 213, 1168, 1826,
	3523, 213, 1780, 643, 1168, 2644, 2055, 1168, 213, 3155,
	213, 213, 1009, 1209, 1219, 3478, 780, 778, 776, 1424,
	1168, 1168, 1168, 774, 213, 590, 1664, 771, 1809, 213,
	1926, 2250, 1834, 2224, 3579, 1843, 1924, 2241, 585, 213,
	593, 213, 1508, 213, 1379, 213, 1187, 213, 1186, 2239,
	1046, 1440, 1441, 1422, 1046, 1775, 1718, 3295, 3289, 1380,
	1786, 213, 2987, 2983, 213, 2982, 213, 1055, 2948, 2947,
	1710, 1841, 2056, 2492, 2491, 213, 2490, 1443, 2241, 2489,
	1049, 818, 2457, 644, 765, 1220, 2123, 818, 2633, 1746,
	2239, 1801, 638, 1803, 213, 1812, 1890, 2302, 1802, 1055,
	213, 2294, 2291, 2272, 1442, 2545, 2546, 2538, 2539, 2540,
	2541, 2543, 2544, 1462, 1876, 2205, 813, 2011, 1742, 1054,
	1413, 2253, 1854, 1067, 2686, 1856, 1878, 1836, 1858, 1333,
	1378, 820, 1861, 1839, 2646, 1183, 2082, 2081, 1047, 1747,
	1748, 1969, 1047, 2057, 2054, 1048, 1312, 2346, 768, 1048,
	3539, 1054, 2796, 1784, 3389, 1254, 817, 1253, 1423, 3065,
	1273, 1936, 817, 637, 1947, 1935, 1252, 1743, 1251, 1885,
	2231, 2026, 1942, 1450, 1899, 3226, 1232, 1465, 1466, 1467,
	1468, 1215, 2271, 2197, 1036, 2026, 1868, 1448, 1944, 2260,
	1420, 3151, 3275, 3448, 1880, 1638, 1638, 2259, 590, 1840,
	2961, 2752, 2430, 3474, 1893, 1583, 2042, 2043, 1067, 1968,
	1612, 2059, 1230, 593, 1965, 1966, 1421, 1344, 1470, 1471,
	1472, 2213, 3540, 2798, 2042, 2068, 819, 1906, 1881, 1034,
	2797, 2424, 819, 2288, 3406, 1017, 1663, 1663, 2071, 2059,
	2203, 1937, 3559, 2022, 3512, 1940, 1217, 2839, 698, 1934,
	1229, 213, 2544, 1724, 2282, 1945, 849, 2697, 1900, 2252,
	2104, 1749, 2108, 2108, 2121, 2692, 2042, 2020, 1766, 2141,
	2143, 1463, 1941, 1587, 2147, 1724, 2282, 1724, 1721, 1939,
	1724, 2282, 1067, 213, 1049, 838, 2433, 1869, 1049, 838,
	1946, 1347, 213, 1784, 2072, 213, 1879, 1151, 1067, 1016,
	3522, 1406, 1151, 646, 645, 3569, 1590, 3542, 1377, 1887,
	1888, 1889, 636, 1328, 635, 800, 3547, 2195, 800, 800,
	820, 1751, 1635, 1635, 2468, 1585, 3475, 2067, 1956, 2192,
	1014, 1957, 1958, 820, 1354, 3149, 2643, 820, 2053, 1354,
	1588, 2753, 639, 2059, 1894, 1368, 2080, 1469, 2466, 3365,
	2178, 2084, 2085, 1232, 2188, 2189, 2645, 1733, 2972, 3182,
	2038, 1734, 1586, 816, 1392, 1464, 675, 3225, 3404, 816,
	572, 2179, 2016, 2251, 2270, 2065, 2034, 213, 978, 2593,
	2017, 2032, 2432, 2018, 2196, 2674, 2023, 809, 760, 760,
	2445, 2446, 1334, 1851, 2162, 1895, 1369, 3405, 2752, 2240,
	2429, 782, 3473, 1740, 1532, 781, 772, 772, 1329, 1067,
	811, 811, 773, 2630, 213, 2984, 772, 2132, 1925, 3511,
	2334, 2116, 213, 2207, 1923, 820, 2292, 1740, 2673, 2153,
	2154, 2145, 2962, 213, 2709, 530, 2164, 1272, 1589, 1955,
	1007, 1933, 2168, 2169, 141, 3541, 213, 810, 1735, 1168,
	1898, 3222, 1608, 2463, 3150, 3056, 3236, 3529, 1214, 525,
	2676, 1737, 213, 1067, 2464, 578, 1168, 2469, 213, 213,
	3434, 3375, 2062, 1332, 2163, 760, 3276, 1498, 2431, 2507,
	2214, 761, 761, 2678, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 1770, 213, 2236, 213, 811, 2167, 213,
	2187, 1733, 2306, 1543, 2459, 1734, 3545, 3560, 2242, 819,
	1638, 3190, 3051, 3183, 213, 2307, 2222, 1739, 2025, 769,
	2303, 213, 699, 213, 3059, 213, 2836, 2266, 2019, 2275,
	2677, 213, 2592, 3472, 213, 1419, 213, 2021, 213, 2274,
	213, 213, 2221, 213, 1168, 1168, 1168, 2225, 1168, 580,
	1892, 1663, 213, 213, 3221, 213, 213, 3510, 2299, 1535,
	1536, 2936, 1343, 2289, 1389, 3570, 213, 1733, 761, 1029,
	1356, 1734, 2124, 2245, 1033, 2312, 3546, 2314, 2361, 213,
	213, 213, 2254, 2256, 213, 3521, 213, 3519, 2262, 213,
	597, 213, 1735, 213, 2374, 2375, 2403, 2837, 2370, 2273,
	2306, 2008, 2306, 3314, 3194, 1737, 1015, 2741, 3548, 2465,
	2341, 1740, 2290, 2400, 213, 213, 213, 213, 2467, 213,
	2352, 2343, 2352, 1815, 1580, 762, 762, 2998, 590, 2402,
	1159, 2405, 2406, 2283, 2285, 2286, 2287, 1635, 1027, 2416,
	1022, 2317, 2680, 593, 213, 574, 1182, 2329, 1587, 1187,
	2363, 2308, 1390, 1852, 3223, 2227, 2333, 517, 1735, 2376,
	2893, 1739, 2407, 579, 2408, 2413, 2385, 2229, 1430, 1431,
	3057, 1737, 1006, 2435, 1006, 3098, 2356, 1750, 1711, 2624,
	141, 1590, 3564, 3377, 1330, 3281, 3280, 3263, 2367, 3142,
	2368, 1708, 2369, 2059, 3355, 2428, 2371, 2950, 1312, 2230,
	2165, 2377, 2422, 576, 2387, 2742, 2033, 1514, 2657, 1498,
	2653, 1519, 762, 2228, 3154, 1588, 3139, 526, 2835, 3132,
	2342, 3153, 2324, 1391, 1182, 1182, 2321, 1739, 808, 763,
	763, 2006, 1835, 3130, 2009, 2417, 1151, 2418, 2293, 3134,
	1824, 573, 2460, 213, 1823, 1797, 2159, 2485, 2486, 1736,
	1952, 3414, 1583, 1430, 3198, 1740, 1429, 1706, 3140, 2276,
	1930, 2372, 2495, 1704, 3015, 1182, 2318, 764, 764, 527,
	2439, 1275, 3302, 1707, 3300, 838, 3264, 2442, 577, 2664,
	1005, 1151, 1005, 2005, 2663, 2438, 2649, 1431, 2451, 575,
	3133, 598, 599, 1370, 2481, 2606, 1943, 2894, 2415, 1182,
	1886, 1755, 2918, 2895, 2590, 2589, 695, 2419, 528, 2420,
	529, 2421, 2161, 1589, 2202, 2201, 763, 2160, 3099, 1759,
	1587, 1740, 2200, 1260, 2331, 817, 1009, 1357, 1009, 3563,
	3360, 3378, 1067, 2373, 2436, 2458, 3271, 2578, 1246, 2784,
	2573, 1429, 2585, 2586, 3174, 1624, 820, 688, 2711, 1258,
	1953, 213, 1731, 1590, 764, 1247, 2587, 1833, 697, 213,
	3526, 3298, 1756, 3417, 3104, 3152, 213, 3361, 2607, 213,
	213, 1067, 1585, 2908, 2076, 3528, 3261, 1404, 3490, 3372,
	1067, 601, 600, 2566, 3241, 1386, 213, 1588, 1384, 3097,
	2989, 1367, 2502, 1736, 2496, 2565, 2601, 2819, 2793, 2277,
	2278, 213, 3135, 2530, 2470, 3136, 2612, 2613, 3262, 1586,
	2605, 2007, 1922, 1151, 1365, 1363, 3272, 2328, 2584, 213,
	213, 213, 2600, 2611, 2625, 213, 1361, 2301, 213, 3418,
	2609, 602, 603, 3362, 2641, 213, 213, 213, 213, 213,
	2268, 2615, 1760, 1359, 3138, 1351, 2620, 2647, 2220, 2599,
	1618, 213, 213, 213, 3142, 2596, 3141, 2614, 2602, 1736,
	213, 1615, 1405, 2619, 1323, 1638, 2622, 1349, 1256, 2579,
	2075, 813, 213, 1168, 2594, 213, 2650, 2651, 2568, 2569,
	2570, 3139, 2426, 1067, 2631, 1589, 2666, 2425, 2670, 2671,
	2410, 1067, 2665, 2610, 2668, 1932, 213, 1903, 1696, 213,
	213, 1638, 1761, 1762, 1546, 2608, 1663, 693, 694, 213,
	2689, 1757, 1168, 213, 1327, 1168, 1168, 1168, 1259, 2654,
	2658, 1236, 213, 3140, 3169, 2637, 2638, 1403, 213, 2626,
	2627, 2691, 2124, 2124, 213, 1385, 213, 2628, 1383, 2582,
	1758, 1366, 1663, 213, 1257, 2642, 2681, 2682, 686, 687,
	2683, 3468, 2639, 696, 2595, 2648, 3161, 2720, 3137, 1921,
	3411, 1738, 2726, 3508, 1364, 1362, 1168, 1168, 3128, 3013,
	2967, 2965, 2707, 2949, 213, 213, 1360, 2622, 213, 2703,
	2704, 2740, 2730, 2705, 2725, 1168, 1738, 2679, 2685, 2698,
	2693, 2400, 1635, 1358, 770, 1350, 2724, 2347, 2757, 2748,
	2400, 2336, 2696, 925, 2702, 2335, 2315, 1865, 213, 2274,
	1067, 213, 213, 1067, 213, 2708, 1864, 1348, 1255, 1780,
	1862, 1860, 1857, 1855, 1853, 1844, 1763, 1780, 1635, 1794,
	1792, 2771, 213, 2124, 2124, 2124, 1182, 1781, 1768, 1765,
	1752, 1741, 209, 2847, 520, 521, 2744, 536, 520, 536,
	546, 551, 3318, 1433, 567, 2791, 1812, 2694, 2786, 2754,
	2449, 2695, 209, 2756, 1625, 1151, 3523, 3135, 2763, 820,
	3136, 2770, 2804, 3440, 987, 1067, 3217, 3212, 3211, 2401,
	685, 2803, 2782, 1727, 209, 1211, 1067, 3320, 213, 2258,
	1764, 3024, 141, 2701, 2241, 2822, 1176, 1749, 988, 1065,
	2765, 2766, 2767, 2241, 2768, 2769, 2239, 2792, 2241, 3138,
	1401, 1402, 1920, 1896, 3367, 2257, 775, 777, 1919, 1901,
	2255, 3141, 3341, 3105, 1440, 1441, 1638, 2279, 2261, 1437,
	2298, 2800, 531, 2450, 2265, 2831, 2832, 1434, 2296, 2263,
	2805, 2297, 3543, 3410, 2807, 2264, 2747, 3562, 3380, 3002,
	1151, 2997, 2933, 2355, 1007, 2146, 1007, 1699, 1630, 2629,
	1006, 2844, 2699, 2536, 2537, 1440, 1441, 1663, 2233, 2232,
	3382, 2827, 2850, 2905, 1511, 1638, 1638, 1442, 542, 520,
	520, 213, 989, 2079, 1006, 2938, 3076, 209, 2842, 1440,
	1441, 1638, 1638, 2233, 1965, 2863, 213, 2635, 1182, 2306,
	2857, 2731, 1067, 2846, 2733, 2734, 2735, 2853, 2234, 2862,
	1965, 2873, 2838, 2840, 2841, 1443, 1663, 1663, 2922, 2858,
	1337, 213, 1638, 3137, 1151, 2872, 1336, 2897, 2870, 2801,
	2859, 2083, 1663, 1663, 2860, 2077, 2050, 2937, 2834, 1509,
	1151, 2901, 1442, 1507, 3571, 1388, 2035, 2927, 1387, 3352,
	3255, 3253, 3185, 1635, 3122, 2777, 2778, 3048, 3041, 2898,
	3030, 2909, 3008, 1663, 2992, 1514, 2991, 213, 1005, 2906,
	2990, 2964, 2911, 2912, 1784, 2764, 2738, 2736, 2412, 2411,
	2365, 2340, 2316, 2037, 1918, 2974, 1749, 1917, 2935, 1916,
	141, 1915, 1005, 1847, 1846, 1845, 1827, 1805, 1804, 1800,
	2929, 1799, 1635, 1635, 213, 213, 213, 2986, 1798, 1796,
	1795, 1400, 2128, 1399, 1009, 1284, 1283, 1282, 1635, 1635,
	1281, 1067, 213, 1280, 1279, 1278, 1168, 1277, 1276, 1274,
	1269, 1268, 1267, 1266, 2979, 2980, 1265, 1228, 1009, 2978,
	213, 2953, 1227, 2942, 1226, 1225, 3005, 3026, 1224, 1635,
	1223, 1151, 1222, 213, 213, 1168, 1168, 1168, 3017, 213,
	213, 213, 2988, 1216, 213, 213, 2124, 2124, 213, 213,
	1210, 1168, 2945, 1208, 1207, 1638, 1032, 213, 2914, 2915,
	1031, 962, 2274, 872, 3020, 3016, 1702, 783, 630, 767,
	1067, 3274, 1394, 3021, 2658, 73, 1218, 2361, 617, 67,
	2963, 2966, 3422, 2968, 2672, 1151, 1902, 3006, 1355, 1904,
	3011, 2598, 2170, 3007, 3403, 3083, 1663, 2506, 3347, 3235,
	3049, 2074, 1528, 3001, 69, 860, 2400, 3074, 3022, 3037,
	945, 3018, 3028, 3181, 3180, 213, 3027, 3129, 2952, 2390,
	3178, 3177, 827, 1070, 3070, 3044, 2124, 2124, 2124, 2124,
	2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124,
	2124, 2124, 2124, 2124, 2124, 3061, 2124, 3053, 3047, 3058,
	3040, 3043, 3038, 3039, 3033, 1638, 3050, 3032, 1712, 3062,
	866, 3046, 1725, 2216, 2107, 1634, 869, 1740, 1636, 871,
	1812, 870, 1637, 1530, 868, 1633, 2330, 213, 2359, 1263,
	748, 1716, 1635, 2031, 2069, 2501, 1525, 1067, 840, 1067,
	862, 2066, 1025, 839, 2603, 2751, 1663, 2932, 1778, 3203,
	1951, 2441, 1948, 633, 2533, 2051, 1020, 1018, 213, 213,
	213, 2129, 2122, 2118, 3096, 1408, 1500, 2360, 1777, 1057,
	213, 843, 2029, 1516, 2475, 2758, 213, 2617, 213, 2582,
	2211, 213, 213, 213, 1030, 3437, 1959, 1814, 3147, 986,
	985, 567, 1067, 213, 213, 1168, 984, 1773, 1067, 3428,
	1168, 3107, 3108, 3425, 2718, 1582, 213, 209, 1705, 209,
	209, 3109, 1173, 2226, 209, 3125, 3126, 3114, 1747, 1748,
	3112, 213, 209, 1189, 1067, 3117, 3115, 1168, 3157, 3113,
	2619, 1492, 1635, 3156, 3118, 2727, 856, 1181, 2583, 2785,
	1233, 3366, 1491, 779, 3146, 3357, 1774, 1213, 1044, 3172,
	1043, 1042, 2656, 3568, 3127, 2960, 213, 180, 177, 3200,
	179, 1235, 178, 3175, 2976, 209, 209, 1067, 1173, 2710,
	90, 3166, 3213, 35, 3034, 3035, 3036, 16, 3110, 3188,
	209, 3176, 116, 115, 3187, 114, 3199, 3171, 1271, 113,
	112, 3202, 111, 1067, 110, 3201, 109, 108, 107, 106,
	105, 104, 209, 209, 209, 209, 1173, 3207, 103, 102,
	3184, 3167, 101, 3196, 567, 3189, 209, 209, 100, 99,
	98, 3148, 97, 96, 95, 94, 93, 92, 91, 3106,
	685, 1067, 3158, 3159, 563, 3224, 3247, 3111, 3206, 213,
	560, 213, 49, 1067, 213, 48, 89, 88, 15, 3227,
	33, 13, 213, 1065, 3243, 1006, 53, 826, 3232, 54,
	12, 1877, 28, 29, 79, 78, 27, 14, 26, 24,
	1006, 3258, 1007, 10, 213, 8, 7, 30, 1812, 3233,
	1592, 11, 3248, 3249, 146, 1638, 145, 72, 209, 144,
	71, 3257, 3251, 213, 143, 142, 1007, 213, 70, 1006,
	22, 209, 2128, 2128, 1151, 213, 3292, 3216, 9, 3306,
	1168, 138, 3307, 3003, 66, 213, 551, 3233, 3301, 3277,
	140, 139, 3311, 63, 3252, 3313, 1663, 137, 136, 1968,
	64, 135, 134, 3256, 65, 133, 213, 213, 20, 3310,
	1638, 3293, 3316, 1151, 3327, 3328, 3290, 5, 3299, 52,
	6, 3305, 1151, 3321, 2720, 3219, 213, 2794, 83, 3283,
	84, 31, 213, 1005, 61, 3317, 60, 59, 19, 3315,
	51, 3322, 213, 3020, 18, 838, 170, 169, 1005, 168,
	167, 1663, 162, 161, 3168, 166, 164, 163, 838, 165,
	160, 132, 3323, 3363, 172, 3338, 3345, 3354, 171, 3350,
	3331, 174, 158, 2128, 2128, 2128, 154, 1005, 3353, 1009,
	153, 157, 1635, 159, 156, 155, 3340, 152, 3374, 3284,
	3285, 173, 131, 130, 1009, 213, 1168, 1638, 56, 129,
	128, 213, 127, 126, 125, 1168, 1168, 55, 17, 2,
	1, 1168, 0, 3396, 0, 213, 0, 213, 0, 0,
	0, 3381, 0, 1009, 0, 1151, 3310, 3388, 3387, 3384,
	0, 0, 0, 1151, 0, 0, 3319, 1635, 1663, 213,
	0, 0, 3407, 3400, 0, 213, 213, 3419, 1067, 0,
	0, 3392, 0, 0, 3394, 3395, 213, 213, 0, 0,
	3399, 3427, 3430, 3393, 0, 0, 0, 0, 0, 3441,
	3443, 3431, 3445, 0, 3435, 0, 3424, 0, 0, 0,
	520, 0, 0, 3432, 3453, 0, 3452, 0, 0, 0,
	213, 1182, 0, 0, 0, 0, 3447, 0, 3449, 0,
	0, 209, 0, 209, 3479, 2124, 209, 0, 1624, 0,
	0, 2472, 2473, 3466, 3439, 3467, 1189, 0, 1173, 209,
	3464, 3465, 0, 0, 1635, 3495, 209, 1189, 536, 213,
	0, 209, 1189, 3497, 1968, 3499, 3504, 567, 0, 0,
	0, 0, 3509, 3505, 3498, 3496, 3500, 0, 2124, 213,
	3501, 0, 1151, 0, 0, 1151, 0, 0, 3481, 0,
	0, 3515, 3516, 3442, 0, 0, 3401, 3520, 3402, 3518,
	0, 0, 0, 213, 3517, 213, 0, 3427, 3525, 3524,
	3430, 3533, 3527, 3535, 0, 3531, 2361, 3532, 0, 3538,
	3537, 0, 0, 0, 0, 0, 3420, 0, 0, 0,
	0, 0, 3502, 3503, 0, 0, 3506, 0, 0, 0,
	3550, 3549, 2559, 2560, 2561, 0, 0, 1151, 3557, 0,
	0, 3556, 0, 3558, 0, 3561, 0, 0, 1151, 0,
	0, 0, 3439, 0, 0, 3565, 0, 0, 826, 0,
	0, 0, 826, 0, 0, 0, 3572, 0, 3573, 2124,
	0, 0, 3566, 3567, 0, 0, 3576, 3577, 3578, 3580,
	3581, 0, 0, 0, 1006, 1006, 0, 0, 3585, 0,
	0, 0, 0, 0, 1191, 0, 1195, 0, 1201, 0,
	0, 0, 0, 3583, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2128, 2128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3530, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 1151, 0, 0, 0, 0, 0,
	1832, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 209, 1321, 209, 0, 0, 0, 520, 0, 1324,
	0, 0, 1005, 1005, 0, 0, 0, 0, 0, 1848,
	0, 0, 0, 0, 1440, 1441, 2128, 2128, 2128, 2128,
	2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128,
	2128, 2128, 2128, 2128, 2128, 0, 2128, 1007, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 1009, 1009,
	567, 0, 1007, 1374, 685, 0, 0, 0, 0, 0,
	0, 209, 0, 1173, 209, 1006, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 0,
	0, 1007, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 209, 1151, 209, 0, 209, 0, 209, 0,
	209, 57, 0, 0, 0, 2536, 2537, 0, 2554, 2555,
	2556, 0, 0, 58, 1927, 0, 0, 1928, 0, 1929,
	0, 0, 0, 0, 3066, 0, 0, 62, 209, 0,
	0, 0, 0, 0, 0, 1493, 1494, 1495, 1496, 1497,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 0,
	1448, 0, 0, 567, 0, 0, 0, 0, 68, 0,
	0, 0, 1151, 0, 0, 1513, 0, 2551, 0, 0,
	0, 1526, 0, 1005, 0, 2815, 2816, 0, 0, 0,
	0, 1470, 1471, 1472, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 0, 0, 1009,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 1006, 0, 0, 0,
	0, 2542, 0, 0, 0, 0, 0, 76, 0, 2536,
	2537, 0, 2554, 2555, 2556, 2874, 2875, 2876, 2877, 2878,
	2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888,
	2889, 2890, 2891, 2892, 0, 2896, 1440, 1441, 0, 1151,
	0, 1151, 1483, 1484, 1485, 0, 0, 0, 0, 0,
	1576, 1576, 1576, 2557, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 520, 0, 1489, 0, 0, 0,
	0, 2551, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 1005, 0, 2552, 0, 0, 1464, 1442,
	0, 1005, 0, 0, 1151, 0, 520, 0, 1462, 0,
	1151, 0, 0, 209, 1005, 520, 0, 0, 209, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 1151, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 1009, 0, 0,
	0, 0, 0, 0, 0, 2542, 147, 80, 0, 81,
	1009, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 1466, 1467, 1468, 0, 0, 181, 1151,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 2553,
	680, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	536, 0, 0, 0, 0, 1151, 1480, 2557, 0, 1490,
	0, 0, 0, 1470, 1471, 1472, 0, 183, 1451, 1452,
	1444, 1445, 1446, 1447, 1449, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2249, 0, 2552,
	118, 0, 0, 1151, 0, 209, 1007, 1007, 0, 0,
	0, 0, 0, 151, 0, 1151, 209, 0, 1478, 0,
	0, 182, 0, 0, 0, 0, 1463, 0, 0, 209,
	0, 175, 0, 0, 0, 0, 0, 2536, 2537, 176,
	2554, 2555, 2556, 0, 0, 209, 0, 838, 0, 0,
	0, 209, 2309, 0, 1440, 1441, 2824, 0, 0, 0,
	150, 2548, 2549, 2550, 0, 0, 0, 0, 2547, 2545,
	2546, 2538, 2539, 2540, 2541, 2543, 2544, 209, 0, 1189,
	1443, 0, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2553, 0, 0, 0, 1832, 0, 2551,
	0, 0, 1469, 0, 2249, 2128, 520, 1442, 2364, 0,
	0, 0, 0, 0, 209, 0, 0, 209, 0, 209,
	1464, 209, 0, 209, 209, 0, 1173, 0, 0, 0,
	0, 0, 0, 0, 0, 2383, 685, 0, 2249, 2249,
	0, 0, 0, 0, 0, 0, 1481, 0, 2128, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 1173, 209, 0, 0, 1189, 0, 1189,
	0, 0, 1173, 2542, 1173, 0, 1173, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 209, 209, 1173,
	209, 0, 209, 0, 0, 2548, 2549, 2550, 0, 0,
	0, 0, 2547, 2545, 2546, 2538, 2539, 2540, 2541, 2543,
	2544, 1470, 1471, 1472, 0, 2557, 0, 209, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 1453,
	1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0, 2128,
	1151, 0, 0, 0, 838, 0, 0, 2552, 0, 0,
	0, 0, 0, 0, 0, 1949, 0, 1954, 0, 0,
	0, 0, 0, 1961, 1463, 0, 0, 0, 0, 0,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 0, 2010, 0, 2012, 2013,
	2014, 2015, 0, 0, 0, 0, 1189, 1007, 0, 0,
	0, 0, 0, 0, 0, 1007, 0, 0, 2039, 0,
	0, 0, 0, 0, 3240, 0, 0, 0, 1007, 0,
	0, 2553, 0, 1513, 0, 0, 0, 2064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3266, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 0, 0, 0, 0, 2120,
	0, 2131, 2133, 2138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 0, 0, 0, 0, 0, 520,
	0, 0, 520, 520, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 2548, 2549, 2550, 0, 0, 0, 1189,
	2547, 2545, 2546, 2538, 2539, 2540, 2541, 2543, 2544, 0,
	0, 0, 0, 0, 1189, 0, 0, 0, 3344, 1452,
	1444, 1445, 1446, 1447, 1449, 1450, 0, 0, 0, 0,
	0, 0, 2249, 2249, 209, 0, 0, 0, 2249, 0,
	0, 2660, 0, 0, 0, 0, 0, 0, 2249, 2660,
	2249, 2660, 2660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 209, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2536, 2537, 57, 2554, 2555, 2556, 2714,
	0, 0, 2716, 2249, 0, 0, 0, 58, 0, 0,
	0, 0, 209, 0, 0, 0, 209, 0, 0, 0,
	0, 62, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 1173, 0, 0, 0, 0, 0, 2249, 0, 520,
	0, 0, 0, 0, 0, 0, 2249, 2311, 0, 2313,
	0, 0, 68, 0, 0, 2551, 0, 0, 0, 1440,
	1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0,
	1440, 1441, 0, 0, 0, 0, 0, 209, 1832, 0,
	0, 1832, 74, 0, 0, 1443, 0, 0, 0, 1489,
	0, 0, 85, 0, 0, 0, 1443, 75, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2799, 1442, 0, 1173, 209, 0, 209, 0, 0,
	0, 1462, 0, 1442, 0, 0, 0, 0, 1459, 2542,
	0, 0, 1462, 0, 0, 209, 0, 0, 0, 2536,
	2537, 76, 2554, 2555, 2556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2423, 0, 2818, 0,
	0, 2557, 0, 0, 0, 1465, 1466, 1467, 1468, 0,
	0, 2855, 0, 0, 0, 1448, 1465, 1466, 1467, 1468,
	0, 2551, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 2552, 0, 0, 0, 0, 0, 1480,
	0, 0, 1490, 0, 0, 0, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 1471, 1472,
	0, 0, 0, 0, 0, 0, 0, 1486, 77, 1487,
	2536, 2537, 0, 2554, 2555, 2556, 1457, 1458, 0, 0,
	0, 2455, 2456, 0, 0, 0, 0, 2462, 0, 2823,
	0, 1478, 0, 209, 209, 2542, 0, 0, 0, 1463,
	147, 80, 0, 81, 520, 0, 2476, 2477, 0, 0,
	1463, 0, 2064, 0, 0, 0, 0, 1488, 0, 520,
	0, 2484, 181, 0, 0, 0, 0, 2553, 0, 0,
	0, 0, 2551, 0, 680, 0, 0, 926, 117, 0,
	0, 0, 0, 0, 1189, 0, 0, 2504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 2519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 210, 0, 0, 2552,
	0, 0, 0, 0, 118, 0, 1469, 0, 0, 0,
	567, 0, 0, 1464, 0, 0, 210, 151, 0, 0,
	0, 0, 0, 0, 1464, 182, 2542, 0, 0, 0,
	2138, 2138, 2138, 0, 0, 175, 0, 0, 210, 1481,
	0, 0, 0, 176, 0, 1576, 0, 2999, 209, 209,
	0, 0, 0, 2588, 0, 0, 0, 0, 0, 2548,
	2549, 2550, 1440, 1441, 1315, 209, 2547, 2545, 2546, 2538,
	2539, 2540, 2541, 2543, 2544, 0, 0, 0, 2557, 0,
	0, 0, 0, 2249, 209, 0, 0, 0, 1443, 0,
	0, 0, 0, 2553, 0, 0, 2383, 2383, 0, 0,
	0, 0, 685, 685, 2249, 0, 0, 1832, 1832, 0,
	2552, 685, 2249, 0, 0, 1442, 0, 0, 826, 0,
	209, 0, 1479, 0, 1462, 1454, 1455, 1461, 1460, 1456,
	1482, 826, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 0, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447,
	1449, 1450, 0, 0, 0, 0, 2675, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	2813, 0, 0, 0, 0, 0, 0, 0, 3084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 1466,
	1467, 1468, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 208, 0, 0, 2553, 2548, 2549, 2550, 0, 0,
	0, 0, 2547, 2545, 2546, 2538, 2539, 2540, 2541, 2543,
	2544, 591, 0, 0, 0, 0, 0, 0, 0, 1470,
	1471, 1472, 0, 0, 209, 0, 0, 0, 0, 0,
	1189, 0, 209, 591, 0, 0, 2749, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2249, 2249, 2249, 0, 0, 0, 0, 0, 0,
	0, 0, 1463, 1189, 0, 0, 0, 0, 0, 2249,
	0, 2660, 0, 0, 1189, 1189, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 2548, 2549, 2550, 2249,
	0, 0, 0, 2547, 2545, 2546, 2538, 2539, 2540, 2541,
	2543, 2544, 0, 0, 3193, 0, 0, 0, 0, 2806,
	0, 0, 0, 1961, 0, 0, 1008, 1440, 1441, 2810,
	2811, 0, 0, 2814, 0, 0, 0, 2817, 1469, 0,
	0, 0, 0, 0, 0, 0, 2821, 0, 0, 1189,
	0, 0, 0, 1443, 0, 2828, 1464, 0, 2588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2848,
	1442, 0, 0, 1440, 1441, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 2864, 2865,
	0, 2866, 2867, 2868, 0, 0, 2869, 0, 0, 1443,
	2871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2249, 0, 2660, 2812, 1442, 3260, 0, 0,
	0, 2899, 2900, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 567, 0, 2917,
	0, 0, 0, 0, 0, 1453, 1451, 1452, 1444, 1445,
	1446, 1447, 1449, 1450, 0, 0, 3260, 0, 0, 0,
	2249, 0, 0, 0, 1470, 1471, 1472, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1189, 0,
	0, 210, 1072, 210, 210, 1072, 0, 1072, 210, 1448,
	0, 0, 2946, 0, 0, 0, 210, 0, 0, 209,
	209, 0, 0, 0, 0, 0, 0, 2954, 2957, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 2855,
	1470, 1471, 1472, 0, 0, 520, 0, 0, 0, 0,
	0, 2975, 0, 0, 0, 3260, 0, 1072, 1072, 210,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 210, 210, 210, 210,
	0, 1072, 1072, 1440, 1441, 0, 1072, 0, 209, 1072,
	210, 210, 0, 1469, 2660, 0, 0, 0, 1576, 0,
	0, 0, 0, 0, 0, 0, 0, 3029, 1189, 1443,
	1189, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3415, 0, 0, 0, 1442, 0, 1189, 209,
	1072, 0, 0, 0, 0, 1462, 0, 0, 0, 209,
	2249, 0, 0, 0, 0, 0, 0, 0, 3063, 3064,
	0, 0, 210, 0, 3068, 3069, 0, 1464, 0, 3072,
	3073, 0, 0, 0, 0, 210, 3077, 0, 0, 0,
	0, 0, 0, 2855, 0, 0, 208, 0, 208, 208,
	0, 2461, 0, 208, 0, 3081, 0, 0, 0, 0,
	0, 591, 3085, 0, 0, 0, 0, 0, 0, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 2249, 0, 0, 0, 0, 0, 0, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0,
	0, 0, 3260, 0, 208, 208, 0, 0, 1440, 1441,
	1470, 1471, 1472, 0, 0, 214, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 1189, 0, 2249, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 208, 208, 208, 208, 0, 1453, 1451, 1452, 1444,
	1445, 1446, 1447, 1449, 1450, 208, 208, 0, 0, 0,
	0, 1442, 0, 1463, 2957, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 1465, 1466, 1467, 1468, 0, 1469,
	208, 0, 0, 0, 1448, 0, 0, 0, 2957, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 3228, 3229, 3230, 0, 1470, 1471, 1472, 0, 1440,
	1441, 1072, 0, 210, 210, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 210, 3238, 3239, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	3246, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 1463, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2957, 0, 0, 0, 0, 0, 0, 0, 3282,
	0, 0, 0, 0, 0, 0, 0, 3288, 0, 0,
	826, 0, 0, 0, 0, 3294, 1453, 1451, 1452, 1444,
	1445, 1446, 1447, 1449, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2957, 0,
	0, 2957, 0, 0, 1469, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	2957, 2957, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 1471, 1472, 0,
	0, 1072, 210, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1606, 3356, 1008, 0, 3359, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 1606,
	0, 0, 0, 0, 0, 591, 0, 210, 210, 1463,
	591, 0, 0, 0, 210, 0, 0, 0, 0, 1440,
	1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0,
	0, 0, 0, 210, 0, 210, 0, 210, 1476, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 1489,
	0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 1469, 0, 826, 1459, 0,
	0, 0, 0, 1072, 0, 1072, 0, 0, 0, 0,
	0, 1072, 0, 1464, 1072, 210, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 1072, 1072,
	3463, 3463, 3463, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 210, 0, 210, 3482,
	210, 0, 210, 0, 210, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	2957, 0, 2957, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 210, 0, 0, 0, 3463, 0, 0, 1480,
	0, 0, 1490, 0, 0, 0, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 1169, 0, 1068, 0, 1486, 0, 1487,
	0, 0, 208, 208, 0, 0, 1457, 1458, 0, 208,
	1072, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 1478, 0, 0, 0, 0, 0, 0, 208, 1463,
	208, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1169, 1169, 1488, 0, 3463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 1477, 0, 1170, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 87, 0, 0, 0, 0, 0, 1169,
	1169, 0, 0, 0, 1169, 1072, 0, 1169, 0, 0,
	208, 0, 0, 208, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 1170, 0, 0,
	0, 208, 0, 1464, 0, 0, 0, 0, 0, 0,
	591, 208, 0, 208, 0, 208, 0, 208, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 1169, 1481,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	1170, 1170, 0, 0, 0, 1170, 0, 208, 1170, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1170,
	0, 0, 0, 0, 801, 0, 0, 0, 0, 0,
	0, 667, 1479, 821, 0, 1454, 1455, 1461, 1460, 1456,
	1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 0, 0, 0, 649, 3092, 0, 0, 0, 3091,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 1072, 0, 0, 0,
	0, 653, 0, 0, 0, 0, 0, 0, 0, 210,
	1072, 0, 0, 1072, 0, 210, 0, 0, 1008, 0,
	654, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 210, 1008, 656, 0, 0, 210, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 210, 0, 210, 0, 210, 0, 210, 210, 1068,
	0, 1072, 1072, 1072, 0, 1072, 0, 0, 584, 0,
	0, 0, 0, 584, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 210, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 210, 210, 658, 210, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	675, 659, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 674, 0,
	0, 0, 0, 0, 208, 660, 0, 0, 661, 0,
	591, 0, 0, 0, 669, 0, 0, 0, 0, 0,
	0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 1169,
	0, 663, 670, 0, 0, 0, 1068, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 208, 0, 0, 208, 665, 208, 0,
	208, 0, 208, 208, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1170, 208, 0, 208, 0, 0, 0, 1069, 0, 0,
	0, 0, 87, 0, 87, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1169, 0, 1169, 0, 0, 208, 0, 0, 1169,
	0, 0, 1169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1169, 1169, 1169, 1072, 0,
	0, 821, 87, 0, 0, 0, 0, 1072, 0, 0,
	87, 0, 0, 584, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1170, 0, 1170, 0, 0, 0, 210, 0,
	1170, 0, 0, 1170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 1170, 1170, 87,
	0, 204, 0, 0, 0, 0, 0, 0, 210, 210,
	210, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 210,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 1072,
	210, 0, 1072, 1072, 1072, 0, 801, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 1503, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 1008, 0,
	0, 0, 1512, 1068, 0, 0, 1518, 0, 0, 0,
	0, 0, 0, 1072, 1072, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 1606, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 210,
	1072, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 1069, 0, 0, 1068, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 208, 208, 0, 727, 0, 760,
	0, 0, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 208, 0, 0, 0, 0, 0,
	0, 734, 0, 1072, 0, 0, 0, 87, 0, 0,
	1604, 0, 1607, 745, 732, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 1069, 208, 0, 733, 0, 0,
	0, 0, 735, 0, 208, 0, 766, 0, 0, 0,
	0, 0, 0, 742, 743, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 761, 737, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1169, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 1169, 738, 0, 208, 0, 208, 0, 0, 0,
	731, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 739, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 746,
	0, 0, 0, 0, 0, 1170, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 765, 1170, 0, 0, 0, 0, 0, 0, 1169,
	1169, 1169, 0, 1169, 0, 0, 762, 0, 0, 0,
	0, 0, 210, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 210,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 1072, 1072, 1072, 0, 0, 0, 0, 0,
	1170, 1170, 1170, 0, 1170, 0, 0, 0, 1072, 0,
	0, 0, 1008, 1008, 210, 756, 1062, 0, 0, 0,
	0, 0, 0, 1180, 0, 750, 0, 1072, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 0, 729, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 752, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 0, 0, 0, 753, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 0, 0, 0,
	0, 1288, 1288, 1288, 1180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 1320, 0, 757, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 1072, 208, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 801, 0, 0, 801, 801,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 0, 0, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 0, 0, 1393, 0, 1072,
	210, 210, 1072, 0, 0, 1072, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 208,
	0, 0, 0, 2028, 0, 0, 0, 0, 0, 0,
	0, 1072, 0, 0, 1072, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1512, 0, 0, 0, 1512, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 1008, 0, 0, 1069, 0, 1072, 0,
	0, 1008, 1607, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 1606, 0, 0, 0, 1169, 210,
	0, 0, 0, 87, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 1169, 0, 0,
	1169, 1169, 1169, 0, 0, 208, 208, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 210, 210, 1613, 0, 1069, 0, 0,
	0, 1169, 1169, 0, 0, 0, 0, 0, 1622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1170, 0,
	1169, 1170, 1170, 1170, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1170, 1170, 0, 87, 0, 87, 0, 0,
	0, 0, 210, 1072, 0, 0, 0, 0, 0, 0,
	0, 1170, 1072, 1072, 0, 0, 0, 0, 1072, 1440,
	1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0,
	1068, 0, 0, 0, 208, 0, 1069, 0, 0, 1069,
	87, 1068, 87, 0, 0, 1443, 0, 0, 0, 1489,
	0, 0, 0, 210, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 87,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 208, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 208, 208,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 0, 1465, 1466, 1467, 1468, 1819,
	0, 0, 0, 0, 0, 1448, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1264, 0,
	1838, 0, 1838, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 1490, 0, 0, 0, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 2028, 0, 0, 0, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 1478, 0, 1512, 0, 0, 0, 0, 0, 1463,
	1819, 0, 0, 1883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 0,
	0, 1897, 0, 0, 0, 0, 0, 0, 208, 0,
	607, 1907, 0, 1909, 0, 1911, 1068, 1913, 0, 1914,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1931, 0, 0,
	1169, 1169, 1169, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 609, 628, 1169, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 610, 1069, 0, 611,
	0, 0, 1170, 996, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 634, 0, 0, 996, 0,
	0, 612, 0, 0, 0, 0, 0, 0, 0, 0,
	632, 1170, 1170, 1170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1170, 0, 613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 614,
	0, 0, 615, 638, 0, 0, 0, 641, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 1454, 1455, 1461, 1460, 1456,
	1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 0, 1068, 0, 1068, 0, 87, 87, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 637, 0, 0, 0, 0, 87,
	87, 618, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	1169, 0, 0, 1068, 0, 1169, 0, 2193, 0, 0,
	0, 0, 616, 1069, 0, 1069, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 1169, 0, 0, 0, 821, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 640, 1069, 0,
	0, 1170, 1068, 0, 1069, 0, 1170, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	1069, 0, 0, 1170, 0, 0, 0, 0, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 0, 0, 636, 0, 635, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 625, 0, 1069, 0, 0, 631, 0, 1068, 0,
	0, 642, 0, 639, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 1180, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2327, 1069, 0, 0,
	0, 1819, 0, 0, 0, 1169, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2366, 0, 0, 1288, 0, 1288, 0,
	1288, 0, 1180, 1180, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 996, 0, 0, 0, 0, 2409, 0,
	0, 0, 0, 0, 0, 0, 1170, 0, 0, 0,
	0, 2414, 0, 1180, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2434, 1180, 0, 2437,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 0,
	1169, 1169, 0, 0, 1440, 1441, 1169, 1473, 1474, 1475,
	1483, 1484, 1485, 0, 0, 0, 2452, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 1170, 0, 0, 0, 1462, 0, 0, 0,
	0, 1170, 1170, 1459, 0, 0, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 1466, 1467, 1468, 0, 0, 87, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 1490, 0, 0,
	0, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1487, 0, 0, 0, 0, 0,
	0, 1457, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 1477, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2652, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 2688, 2690, 2327, 0, 0, 0, 1440,
	1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0,
	87, 0, 0, 0, 1481, 87, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2728, 1442, 0, 0, 2732, 0, 0, 0, 0,
	0, 1462, 0, 0, 2739, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 0,
	1454, 1455, 1461, 1460, 1456, 1482, 0, 1453, 1451, 1452,
	1444, 1445, 1446, 1447, 1449, 1450, 2781, 0, 0, 0,
	2524, 0, 0, 0, 2525, 1465, 1466, 1467, 1468, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2802, 0, 1180, 0, 0, 1480,
	0, 0, 1490, 0, 0, 0, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 2808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 1487,
	0, 0, 0, 0, 0, 0, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 2028, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1440, 1441, 0, 1473, 1474,
	1475, 1483, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 1481,
	0, 1443, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 1454, 1455, 1461, 1460, 1456,
	1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 1465, 1466, 1467, 1468, 2060, 0, 3000, 0, 2061,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 1490, 0,
	0, 0, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 1487, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 0, 0, 0, 0, 3052,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 1481, 0, 1443, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 3160, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 2327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	0, 1454, 1455, 1461, 1460, 1456, 1482, 0, 1453, 1451,
	1452, 1444, 1445, 1446, 1447, 1449, 1450, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 3090, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 1490, 0, 0, 0, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1487, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3267, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 3337, 1180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 1454, 1455, 1461,
	1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 2826, 1066, 0, 0, 0, 0, 0, 3421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3436, 218,
	219, 220, 221, 222, 1073, 223, 1074, 1075, 1076, 1077,
	471, 1078, 1079, 1080, 1081, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 1082, 231, 232, 233,
	234, 235, 236, 1083, 1084, 237, 476, 477, 478, 1085,
	238, 479, 1086, 1071, 1087, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 1088, 249, 0, 250,
	251, 252, 1089, 947, 253, 254, 1090, 1091, 1093, 1092,
	1094, 1095, 1096, 255, 256, 257, 258, 259, 260, 480,
	481, 1097, 261, 1098, 263, 262, 1099, 264, 1100, 1101,
	265, 266, 267, 1102, 268, 1103, 269, 270, 1104, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 1105, 215, 1106, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 1107, 288, 1108,
	1109, 948, 289, 290, 1110, 291, 486, 1111, 487, 292,
	1112, 293, 294, 295, 296, 488, 489, 490, 344, 950,
	297, 298, 1113, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 1114, 949, 304, 491, 306, 305, 307,
	308, 309, 492, 1115, 493, 1116, 311, 951, 494, 952,
	312, 313, 314, 953, 315, 316, 0, 0, 317, 318,
	319, 320, 1117, 322, 321, 1118, 323, 495, 954, 324,
	325, 955, 1119, 326, 327, 1120, 1121, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	956, 340, 341, 343, 342, 1122, 217, 957, 1123, 496,
	497, 345, 346, 1124, 347, 348, 349, 1125, 1126, 351,
	352, 353, 1127, 1128, 354, 355, 498, 958, 356, 959,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	1129, 365, 366, 500, 367, 501, 368, 1130, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 1131,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 1132, 391, 960, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 1133, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 1134, 418, 398, 399, 419, 420, 961,
	421, 504, 422, 423, 1135, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 1136, 435, 436,
	434, 1137, 437, 438, 439, 440, 441, 276, 442, 1138,
	443, 506, 507, 508, 509, 1139, 450, 1140, 444, 445,
	510, 446, 511, 1141, 447, 448, 449, 0, 451, 452,
	1142, 1143, 453, 454, 455, 456, 457, 459, 1144, 460,
	1145, 458, 461, 462, 463, 512, 513, 514, 1146, 465,
	464, 515, 1147, 1148, 1149, 1150, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 0,
	0, 0, 2180, 0, 0, 0, 0, 0, 0, 0,
	2181, 218, 219, 220, 221, 222, 1073, 223, 1074, 1075,
	1076, 1077, 471, 1078, 1079, 1080, 1081, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 1082, 231,
	232, 233, 234, 235, 236, 1083, 1084, 237, 476, 477,
	478, 1085, 238, 479, 1086, 1071, 1087, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 1088, 249,
	0, 250, 251, 252, 1089, 947, 253, 254, 1090, 1091,
	1093, 1092, 1094, 1095, 1096, 255, 256, 257, 258, 259,
	260, 480, 481, 1097, 261, 1098, 263, 262, 1099, 264,
	1100, 1101, 265, 266, 267, 1102, 268, 1103, 269, 270,
	1104, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 1105, 215, 1106, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 1107,
	288, 1108, 1109, 948, 289, 290, 1110, 291, 486, 1111,
	487, 292, 1112, 293, 294, 295, 296, 488, 489, 490,
	344, 950, 297, 298, 1113, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 1114, 949, 304, 491, 306,
	305, 307, 308, 309, 492, 1115, 493, 1116, 311, 951,
	494, 952, 312, 313, 314, 953, 315, 316, 0, 0,
	317, 318, 319, 320, 1117, 322, 321, 1118, 323, 495,
	954, 324, 325, 955, 1119, 326, 327, 1120, 1121, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 956, 340, 341, 343, 342, 1122, 217, 957,
	1123, 496, 497, 345, 346, 1124, 347, 348, 349, 1125,
	1126, 351, 352, 353, 1127, 1128, 354, 355, 498, 958,
	356, 959, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 1129, 365, 366, 500, 367, 501, 368, 1130,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 1131, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 1132, 391, 960, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 1133, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 1134, 418, 398, 399, 419,
	420, 961, 421, 504, 422, 423, 1135, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 1136,
	435, 436, 434, 1137, 437, 438, 439, 440, 441, 276,
	442, 1138, 443, 506, 507, 508, 509, 1139, 450, 1140,
	444, 445, 510, 446, 511, 1141, 447, 448, 449, 0,
	451, 452, 1142, 1143, 453, 454, 455, 456, 457, 459,
	1144, 460, 1145, 458, 461, 462, 463, 512, 513, 514,
	1146, 465, 464, 515, 1147, 1148, 1149, 1150, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3116, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3234, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3165, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2851, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2843, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2713, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1066, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2073, 0, 218, 219, 220, 221, 222,
	1073, 223, 1074, 1075, 1076, 1077, 471, 1078, 1079, 1080,
	1081, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 1082, 231, 232, 233, 234, 235, 236, 1083,
	1084, 237, 476, 477, 478, 1085, 238, 479, 1086, 1071,
	1087, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 1088, 249, 0, 250, 251, 252, 1089, 947,
	253, 254, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 255,
	256, 257, 258, 259, 260, 480, 481, 1097, 261, 1098,
	263, 262, 1099, 264, 1100, 1101, 265, 266, 267, 1102,
	268, 1103, 269, 270, 1104, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 1105, 215,
	1106, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 1107, 288, 1108, 1109, 948, 289, 290,
	1110, 291, 486, 1111, 487, 292, 1112, 293, 294, 295,
	296, 488, 489, 490, 344, 950, 297, 298, 1113, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 1114,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 1115,
	493, 1116, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 1117, 322,
	321, 1118, 323, 495, 954, 324, 325, 955, 1119, 326,
	327, 1120, 1121, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 1122, 217, 957, 1123, 496, 497, 345, 346, 1124,
	347, 348, 349, 1125, 1126, 351, 352, 353, 1127, 1128,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 1129, 365, 366, 500,
	367, 501, 368, 1130, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 1131, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	1132, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 1133, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 1134,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	1135, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 1136, 435, 436, 434, 1137, 437, 438,
	439, 440, 441, 276, 442, 1138, 443, 506, 507, 508,
	509, 1139, 450, 1140, 444, 445, 510, 446, 511, 1141,
	447, 448, 449, 0, 451, 452, 1142, 1143, 453, 454,
	455, 456, 457, 459, 1144, 460, 1145, 458, 461, 462,
	463, 512, 513, 514, 1146, 465, 464, 515, 1147, 1148,
	1149, 1150, 466, 467, 516, 468, 469, 470, 1174, 0,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1790, 0, 0, 0, 218, 219, 220,
	221, 222, 1073, 223, 1074, 1075, 1076, 1077, 471, 1078,
	1079, 1080, 1081, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 1082, 231, 232, 233, 234, 235,
	236, 1083, 1084, 237, 476, 477, 478, 1085, 238, 479,
	1086, 1071, 1087, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 1088, 249, 0, 250, 251, 252,
	1089, 947, 253, 254, 1090, 1091, 1093, 1092, 1094, 1095,
	1096, 255, 256, 257, 258, 259, 260, 480, 481, 1097,
	261, 1098, 263, 262, 1099, 264, 1100, 1101, 265, 266,
	267, 1102, 268, 1103, 269, 270, 1104, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	1105, 215, 1106, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 1107, 288, 1108, 1109, 948,
	289, 290, 1110, 291, 486, 1111, 487, 292, 1112, 293,
	294, 295, 296, 488, 489, 490, 344, 950, 297, 298,
	1113, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 1114, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 1115, 493, 1116, 311, 951, 494, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	1117, 322, 321, 1118, 323, 495, 954, 324, 325, 955,
	1119, 326, 327, 1120, 1121, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 1122, 217, 957, 1123, 496, 497, 345,
	346, 1124, 347, 348, 349, 1125, 1126, 351, 352, 353,
	1127, 1128, 354, 355, 498, 958, 356, 959, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 1129, 365,
	366, 500, 367, 501, 368, 1130, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 1131, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 1132, 391, 960, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	1133, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 1134, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 1135, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 1136, 435, 436, 434, 1137,
	437, 438, 439, 440, 441, 276, 442, 1138, 443, 506,
	507, 508, 509, 1139, 450, 1140, 444, 445, 510, 446,
	511, 1141, 447, 448, 449, 0, 451, 452, 1142, 1143,
	453, 454, 455, 456, 457, 459, 1144, 460, 1145, 458,
	461, 462, 463, 512, 513, 514, 1146, 465, 464, 515,
	1147, 1148, 1149, 1150, 466, 467, 516, 468, 469, 470,
	1063, 0, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 1073, 223, 1074, 1075, 1076, 1077,
	471, 1078, 1079, 1080, 1081, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 1082, 231, 232, 233,
	234, 235, 236, 1083, 1084, 237, 476, 477, 478, 1085,
	238, 479, 1086, 1071, 1087, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 1088, 249, 0, 250,
	251, 252, 1089, 947, 253, 254, 1090, 1091, 1093, 1092,
	1094, 1095, 1096, 255, 256, 257, 258, 259, 260, 480,
	481, 1097, 261, 1098, 263, 262, 1099, 264, 1100, 1101,
	265, 266, 267, 1102, 268, 1103, 269, 270, 1104, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 1105, 215, 1106, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 1107, 288, 1108,
	1109, 948, 289, 290, 1110, 291, 486, 1111, 487, 292,
	1112, 293, 294, 295, 296, 488, 489, 490, 344, 950,
	297, 298, 1113, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 1114, 949, 304, 491, 306, 305, 307,
	308, 309, 492, 1115, 493, 1116, 311, 951, 494, 952,
	312, 313, 314, 953, 315, 316, 0, 0, 317, 318,
	319, 320, 1117, 322, 321, 1118, 323, 495, 954, 324,
	325, 955, 1119, 326, 327, 1120, 1121, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	956, 340, 341, 343, 342, 1122, 217, 957, 1123, 496,
	497, 345, 346, 1124, 347, 348, 349, 1125, 1126, 351,
	352, 353, 1127, 1128, 354, 355, 498, 958, 356, 959,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	1129, 365, 366, 500, 367, 501, 368, 1130, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 1131,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 1132, 391, 960, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 1133, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 1134, 418, 398, 399, 419, 420, 961,
	421, 504, 422, 423, 1135, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 1136, 435, 436,
	434, 1137, 437, 438, 439, 440, 441, 276, 442, 1138,
	443, 506, 507, 508, 509, 1139, 450, 1140, 444, 445,
	510, 446, 511, 1141, 447, 448, 449, 0, 451, 452,
	1142, 1143, 453, 454, 455, 456, 457, 459, 1144, 460,
	1145, 458, 461, 462, 463, 512, 513, 514, 1146, 465,
	464, 515, 1147, 1148, 1149, 1150, 466, 467, 516, 468,
	469, 470, 1066, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 1073, 223, 1074, 1075, 1076, 1077,
	471, 1078, 1079, 1080, 1081, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 1082, 231, 232, 233,
	234, 235, 236, 1083, 1084, 237, 476, 477, 478, 1085,
	238, 479, 1086, 1071, 1087, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 1088, 249, 0, 250,
	251, 252, 1089, 947, 253, 254, 1090, 1091, 1093, 1092,
	1094, 1095, 1096, 255, 256, 257, 258, 259, 260, 480,
	481, 1097, 261, 1098, 263, 262, 1099, 264, 1100, 1101,
	265, 266, 267, 1102, 268, 1103, 269, 270, 1104, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 1105, 215, 1106, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 1107, 288, 1108,
	1109, 948, 289, 290, 1110, 291, 486, 1111, 487, 292,
	1112, 293, 294, 295, 296, 488, 489, 490, 344, 950,
	297, 298, 1113, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 1114, 949, 304, 491, 306, 305, 307,
	308, 309, 492, 1115, 493, 1116, 311, 951, 494, 952,
	312, 313, 314, 953, 315, 316, 0, 0, 317, 318,
	319, 320, 1117, 322, 321, 1118, 323, 495, 954, 324,
	325, 955, 1119, 326, 327, 1120, 1121, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	956, 340, 341, 343, 342, 1122, 217, 957, 1123, 496,
	497, 345, 346, 1124, 347, 348, 349, 1125, 1126, 351,
	352, 353, 1127, 1128, 354, 355, 498, 958, 356, 959,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	1129, 365, 366, 500, 367, 501, 368, 1130, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 1131,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 1132, 391, 960, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 1133, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 1134, 418, 398, 399, 419, 420, 961,
	421, 504, 422, 423, 1135, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 1136, 435, 436,
	434, 1137, 437, 438, 439, 440, 441, 276, 442, 1138,
	443, 506, 507, 508, 509, 1139, 450, 1140, 444, 445,
	510, 446, 511, 1141, 447, 448, 449, 0, 451, 452,
	1142, 1143, 453, 454, 455, 456, 457, 459, 1144, 460,
	1145, 458, 461, 462, 463, 512, 513, 514, 1146, 465,
	464, 515, 1147, 1148, 1149, 1150, 466, 467, 516, 468,
	469, 470, 2049, 0, 889, 846, 847, 848, 844, 845,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 2046, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	2047, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	451, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	2045, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 833, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 829, 830, 2048,
	0, 0, 0, 0, 0, 0, 859, 2044, 0, 822,
	857, 889, 846, 847, 848, 844, 845, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 938,
	863, 0, 0, 0, 224, 225, 226, 227, 472, 904,
	883, 915, 873, 914, 913, 0, 231, 875, 874, 234,
	235, 236, 865, 937, 237, 973, 974, 478, 0, 238,
	944, 0, 927, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 947, 253, 254, 930, 928, 929, 934, 932,
	931, 933, 255, 256, 257, 258, 918, 260, 911, 910,
	835, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	909, 267, 0, 268, 0, 269, 270, 0, 271, 841,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 964,
	965, 854, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 908, 906, 907, 0, 287, 0, 288, 0, 0,
	948, 289, 290, 0, 291, 971, 0, 864, 292, 0,
	293, 294, 295, 296, 939, 940, 943, 344, 950, 297,
	298, 0, 299, 300, 885, 0, 0, 0, 216, 301,
	303, 310, 0, 949, 304, 897, 888, 899, 901, 902,
	903, 898, 0, 890, 0, 311, 951, 941, 952, 312,
	313, 314, 953, 923, 924, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 972, 954, 324, 325,
	955, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 877, 337, 956,
	340, 341, 343, 342, 832, 217, 957, 855, 942, 912,
	345, 346, 0, 886, 348, 887, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 498, 958, 356, 959, 966,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 967, 367, 501, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 905, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 960, 392, 393, 394, 395,
	842, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 181, 414, 415, 878, 879, 881, 882, 409, 413,
	416, 417, 935, 418, 398, 399, 419, 420, 961, 421,
	900, 880, 423, 0, 433, 424, 425, 426, 400, 427,
	431, 946, 428, 429, 430, 968, 0, 435, 436, 434,
	183, 437, 438, 439, 440, 441, 276, 876, 0, 443,
	919, 920, 921, 922, 0, 450, 0, 444, 445, 969,
	446, 970, 853, 447, 448, 449, 0, 451, 452, 0,
	836, 453, 454, 455, 456, 457, 459, 936, 460, 0,
	884, 461, 462, 463, 1313, 916, 963, 0, 465, 464,
	515, 0, 0, 0, 175, 466, 467, 516, 468, 469,
	470, 833, 176, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 829, 830, 889, 846, 847, 848,
	844, 845, 858, 1517, 1515, 0, 0, 857, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 938, 863, 0, 0, 0, 224,
	225, 226, 227, 472, 904, 883, 915, 873, 914, 913,
	0, 231, 875, 874, 234, 235, 236, 865, 937, 237,
	973, 974, 478, 0, 238, 944, 0, 927, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	930, 928, 929, 934, 932, 931, 933, 255, 256, 257,
	258, 918, 260, 911, 910, 835, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 909, 267, 0, 268, 0,
	269, 270, 0, 271, 841, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 964, 965, 854, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 908, 906, 907, 0,
	287, 0, 288, 0, 0, 948, 289, 290, 0, 291,
	971, 0, 864, 292, 0, 293, 294, 295, 296, 939,
	940, 943, 344, 950, 297, 298, 0, 299, 300, 885,
	0, 0, 0, 216, 301, 303, 310, 0, 949, 304,
	897, 888, 899, 901, 902, 903, 898, 0, 890, 0,
	311, 951, 941, 952, 312, 313, 314, 953, 923, 924,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 972, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 877, 337, 956, 340, 341, 343, 342, 832,
	217, 957, 855, 942, 912, 345, 346, 0, 886, 348,
	887, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 966, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 967, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	905, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 842, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 181, 414, 415, 878,
	879, 881, 882, 409, 413, 416, 417, 935, 418, 398,
	399, 419, 420, 961, 421, 900, 880, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 946, 428, 429, 430,
	968, 0, 435, 436, 434, 183, 437, 438, 439, 440,
	441, 276, 876, 0, 443, 919, 920, 921, 922, 0,
	450, 0, 444, 445, 969, 446, 970, 853, 447, 448,
	449, 0, 451, 452, 0, 836, 453, 454, 455, 456,
	457, 459, 936, 460, 0, 884, 461, 462, 463, 1313,
	916, 963, 0, 465, 464, 515, 0, 0, 0, 175,
	466, 467, 516, 468, 469, 470, 833, 176, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 829,
	830, 889, 846, 847, 848, 844, 845, 858, 1517, 2474,
	0, 0, 857, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 938,
	863, 0, 0, 0, 224, 225, 226, 227, 472, 904,
	883, 915, 873, 914, 913, 0, 231, 875, 874, 234,
	235, 236, 865, 937, 237, 973, 974, 478, 0, 238,
	944, 0, 927, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 947, 253, 254, 930, 928, 929, 934, 932,
	931, 933, 255, 256, 257, 258, 918, 260, 911, 910,
	835, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	909, 267, 0, 268, 0, 269, 270, 0, 271, 841,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 964,
	965, 854, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 908, 906, 907, 0, 287, 0, 288, 0, 0,
	948, 289, 290, 0, 291, 971, 0, 864, 292, 0,
	293, 294, 295, 296, 939, 940, 943, 344, 950, 297,
	298, 0, 299, 300, 885, 0, 0, 0, 216, 301,
	303, 310, 0, 949, 304, 897, 888, 899, 901, 902,
	903, 898, 0, 890, 0, 311, 951, 941, 952, 312,
	313, 314, 953, 923, 924, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 972, 954, 324, 325,
	955, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 334, 336, 338, 877, 337, 956,
	340, 341, 343, 342, 832, 217, 957, 855, 942, 912,
	345, 346, 0, 886, 348, 887, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 498, 958, 356, 959, 966,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 967, 367, 501, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 905, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 960, 392, 393, 394, 395,
	842, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	407, 181, 414, 415, 878, 879, 881, 882, 409, 413,
	416, 417, 935, 418, 398, 399, 419, 420, 961, 421,
	900, 880, 423, 0, 433, 424, 425, 426, 400, 427,
	431, 946, 428, 429, 430, 968, 0, 435, 436, 434,
	183, 437, 438, 439, 440, 441, 276, 876, 0, 443,
	919, 920, 921, 922, 0, 450, 0, 444, 445, 969,
	446, 970, 853, 447, 448, 449, 0, 451, 452, 0,
	836, 453, 454, 455, 456, 457, 459, 936, 460, 0,
	884, 461, 462, 463, 1313, 916, 963, 0, 465, 464,
	515, 0, 0, 0, 175, 466, 467, 516, 468, 469,
	470, 833, 176, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 829, 830, 889, 846, 847, 848,
	844, 845, 858, 1517, 1515, 0, 0, 857, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 938, 863, 0, 0, 0, 224,
	225, 226, 227, 472, 904, 883, 915, 873, 914, 913,
	2134, 231, 875, 874, 234, 235, 236, 865, 937, 237,
	973, 974, 478, 0, 238, 944, 0, 927, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	930, 928, 929, 934, 932, 931, 933, 255, 256, 257,
	258, 918, 260, 911, 910, 835, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 909, 267, 0, 268, 0,
	269, 270, 0, 271, 841, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 964, 965, 854, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 908, 906, 907, 0,
	287, 0, 288, 0, 2139, 948, 289, 290, 0, 291,
	971, 0, 864, 292, 0, 293, 294, 295, 296, 939,
	940, 943, 344, 950, 297, 298, 0, 299, 300, 885,
	0, 0, 0, 216, 301, 303, 310, 0, 949, 304,
	897, 888, 899, 901, 902, 903, 898, 0, 890, 0,
	311, 951, 941, 952, 312, 313, 314, 953, 923, 924,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 2135,
	323, 972, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 877, 337, 956, 340, 341, 343, 342, 832,
	217, 957, 855, 942, 912, 345, 346, 0, 886, 348,
	887, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 966, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 967, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	905, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 842, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 878,
	879, 881, 882, 409, 413, 416, 417, 935, 418, 398,
	399, 419, 420, 961, 421, 900, 880, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 946, 428, 429, 430,
	968, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 876, 0, 443, 919, 920, 921, 922, 0,
	450, 2136, 444, 445, 969, 446, 970, 853, 447, 448,
	449, 0, 451, 452, 0, 836, 453, 454, 455, 456,
	457, 459, 936, 460, 0, 884, 461, 462, 463, 512,
	916, 963, 0, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 833, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 829,
	830, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 1376, 857, 889, 846, 847, 848, 844, 845, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 938, 863, 0, 0, 0, 224, 225, 226, 227,
	472, 904, 883, 915, 873, 914, 913, 0, 231, 875,
	874, 234, 235, 236, 865, 937, 237, 973, 974, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 918, 260,
	911, 910, 835, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 909, 267, 0, 268, 0, 269, 270, 0,
	271, 841, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 854, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 908, 906, 907, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 864,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 885, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 897, 888, 899,
	901, 902, 903, 898, 0, 890, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 923, 924, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 877,
	337, 956, 340, 341, 343, 342, 832, 217, 957, 855,
	942, 912, 345, 346, 0, 886, 348, 887, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 905, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 842, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 878, 879, 881, 882,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 900, 880, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 946, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 876,
	0, 443, 919, 920, 921, 922, 0, 450, 0, 444,
	445, 969, 446, 970, 853, 447, 448, 449, 0, 451,
	452, 0, 836, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 884, 461, 462, 463, 512, 916, 963, 0,
	465, 464, 515, 1375, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 833, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 829, 830, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 825, 857,
	889, 846, 847, 848, 844, 845, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 938, 863,
	0, 0, 0, 224, 225, 226, 227, 472, 904, 883,
	915, 873, 914, 913, 0, 231, 875, 874, 234, 235,
	236, 865, 937, 237, 973, 974, 478, 0, 238, 944,
	0, 927, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 930, 928, 929, 934, 932, 931,
	933, 255, 256, 257, 258, 918, 260, 911, 910, 835,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 909,
	267, 0, 268, 0, 269, 270, 0, 271, 841, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 964, 965,
	854, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	908, 906, 907, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 971, 0, 864, 292, 0, 293,
	294, 295, 296, 939, 940, 943, 344, 950, 297, 298,
	0, 299, 300, 885, 0, 0, 0, 216, 301, 303,
	310, 0, 949, 304, 897, 888, 899, 901, 902, 903,
	898, 0, 890, 0, 311, 951, 941, 952, 312, 313,
	314, 953, 923, 924, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 972, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 877, 337, 956, 340,
	341, 343, 342, 832, 217, 957, 855, 942, 912, 345,
	346, 0, 886, 348, 887, 837, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 966, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 967, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 905, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 842,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 878, 879, 881, 882, 409, 413, 416,
	417, 935, 418, 398, 399, 419, 420, 961, 421, 900,
	880, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	946, 428, 429, 430, 968, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 876, 0, 443, 919,
	920, 921, 922, 0, 450, 0, 444, 445, 969, 446,
	970, 853, 447, 448, 449, 0, 451, 452, 0, 836,
	453, 454, 455, 456, 457, 459, 936, 460, 0, 884,
	461, 462, 463, 512, 916, 963, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	833, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 829, 830, 889, 846, 847, 848, 844,
	845, 858, 859, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 938, 863, 0, 0, 0, 224, 225,
	226, 227, 472, 904, 883, 915, 873, 914, 913, 0,
	231, 875, 874, 234, 235, 236, 865, 937, 237, 973,
	974, 478, 0, 238, 944, 0, 927, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 3433, 252, 0, 947, 253, 254, 930,
	928, 929, 934, 932, 931, 933, 255, 256, 257, 258,
	918, 260, 911, 910, 835, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 909, 267, 0, 268, 0, 269,
	270, 0, 271, 841, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 964, 965, 854, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 908, 906, 907, 0, 287,
	0, 288, 0, 0, 948, 289, 290, 0, 291, 971,
	0, 864, 292, 0, 293, 294, 295, 296, 939, 940,
	943, 344, 950, 297, 298, 0, 299, 300, 885, 0,
	0, 0, 216, 301, 303, 310, 0, 949, 304, 897,
	888, 899, 901, 902, 903, 898, 0, 890, 0, 311,
	951, 941, 952, 312, 313, 314, 953, 923, 924, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	972, 954, 324, 325, 955, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 877, 337, 956, 340, 341, 343, 342, 832, 217,
	957, 855, 942, 912, 345, 346, 0, 886, 348, 887,
	837, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	958, 356, 959, 966, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 967, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 905,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 960,
	392, 393, 394, 395, 842, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 878, 879,
	881, 882, 409, 413, 416, 417, 935, 418, 398, 399,
	419, 420, 961, 421, 900, 880, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 946, 428, 429, 430, 968,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 876, 0, 443, 919, 920, 921, 922, 0, 450,
	0, 444, 445, 969, 446, 970, 853, 447, 448, 449,
	0, 451, 452, 0, 836, 453, 454, 455, 456, 457,
	459, 936, 460, 0, 884, 461, 462, 463, 512, 916,
	963, 0, 465, 464, 515, 0, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 833, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 829, 830,
	889, 846, 847, 848, 844, 845, 858, 859, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 938, 863,
	0, 0, 0, 224, 225, 226, 227, 472, 904, 883,
	915, 873, 914, 913, 0, 231, 875, 874, 234, 235,
	236, 865, 937, 237, 973, 974, 478, 0, 238, 944,
	0, 927, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 3291, 252,
	0, 947, 253, 254, 930, 928, 929, 934, 932, 931,
	933, 255, 256, 257, 258, 918, 260, 911, 910, 835,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 909,
	267, 0, 268, 0, 269, 270, 0, 271, 841, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 964, 965,
	854, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	908, 906, 907, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 971, 0, 864, 292, 0, 293,
	294, 295, 296, 939, 940, 943, 344, 950, 297, 298,
	0, 299, 300, 885, 0, 0, 0, 216, 301, 303,
	310, 0, 949, 304, 897, 888, 899, 901, 902, 903,
	898, 0, 890, 0, 311, 951, 941, 952, 312, 313,
	314, 953, 923, 924, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 972, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 877, 337, 956, 340,
	341, 343, 342, 832, 217, 957, 855, 942, 912, 345,
	346, 0, 886, 348, 887, 837, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 966, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 967, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 905, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 842,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 878, 879, 881, 882, 409, 413, 416,
	417, 935, 418, 398, 399, 419, 420, 961, 421, 900,
	880, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	946, 428, 429, 430, 968, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 876, 0, 443, 919,
	920, 921, 922, 0, 450, 0, 444, 445, 969, 446,
	970, 853, 447, 448, 449, 0, 451, 452, 0, 836,
	453, 454, 455, 456, 457, 459, 936, 460, 0, 884,
	461, 462, 463, 512, 916, 963, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	833, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 829, 830, 889, 846, 847, 848, 844,
	845, 858, 859, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 938, 863, 0, 0, 0, 224, 225,
	226, 227, 472, 904, 883, 915, 873, 914, 913, 0,
	231, 875, 874, 234, 235, 236, 865, 937, 237, 973,
	974, 478, 0, 238, 944, 0, 927, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 947, 253, 254, 930,
	928, 929, 934, 932, 931, 933, 255, 256, 257, 258,
	918, 260, 911, 910, 835, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 909, 267, 0, 268, 0, 269,
	270, 0, 271, 841, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 964, 965, 854, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 908, 906, 907, 0, 287,
	0, 288, 0, 0, 948, 289, 290, 0, 291, 971,
	0, 864, 292, 0, 293, 294, 295, 296, 939, 940,
	943, 344, 950, 297, 298, 0, 299, 300, 885, 0,
	0, 0, 216, 301, 303, 310, 0, 949, 304, 897,
	888, 899, 901, 902, 903, 898, 0, 890, 0, 311,
	951, 941, 952, 312, 313, 314, 953, 923, 924, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	972, 954, 324, 325, 955, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 877, 337, 956, 340, 341, 343, 342, 832, 3023,
	957, 855, 942, 912, 345, 346, 0, 886, 348, 887,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	958, 356, 959, 966, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 967, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 905,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 960,
	392, 393, 394, 395, 842, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 878, 879,
	881, 882, 409, 413, 416, 417, 935, 418, 398, 399,
	419, 420, 961, 421, 900, 880, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 946, 428, 429, 430, 968,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 876, 0, 443, 919, 920, 921, 922, 0, 450,
	0, 444, 445, 969, 446, 970, 853, 447, 448, 449,
	0, 451, 452, 0, 836, 453, 454, 455, 456, 457,
	459, 936, 460, 0, 884, 461, 462, 463, 512, 916,
	963, 0, 465, 464, 515, 0, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 833, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 829, 830,
	1577, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 857, 889, 846, 847, 848, 844, 845, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	938, 863, 0, 0, 0, 224, 225, 226, 227, 472,
	904, 883, 915, 873, 914, 913, 0, 231, 875, 874,
	234, 235, 236, 865, 937, 237, 973, 974, 478, 0,
	238, 944, 0, 927, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 947, 253, 254, 930, 928, 929, 934,
	932, 931, 933, 255, 256, 257, 258, 918, 260, 911,
	910, 835, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 909, 267, 0, 268, 0, 269, 270, 0, 271,
	841, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	964, 965, 854, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 908, 906, 907, 0, 287, 0, 288, 0,
	0, 948, 289, 290, 0, 291, 971, 0, 864, 292,
	0, 293, 294, 295, 296, 939, 940, 943, 344, 950,
	297, 298, 0, 299, 300, 885, 0, 0, 0, 216,
	301, 303, 310, 0, 949, 304, 897, 888, 899, 901,
	902, 903, 898, 0, 890, 0, 311, 951, 941, 952,
	312, 313, 314, 953, 923, 924, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 972, 954, 324,
	325, 955, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 877, 337,
	956, 340, 341, 343, 342, 832, 217, 957, 855, 942,
	912, 345, 346, 0, 886, 348, 887, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 958, 356, 959,
	966, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 967, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 905, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 960, 392, 393, 394,
	395, 842, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 878, 879, 881, 882, 409,
	413, 416, 417, 935, 418, 398, 399, 419, 420, 961,
	421, 900, 880, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 946, 428, 429, 430, 968, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 876, 0,
	443, 919, 920, 921, 922, 0, 450, 0, 444, 445,
	969, 446, 970, 853, 447, 448, 449, 0, 451, 452,
	0, 836, 453, 454, 455, 456, 457, 459, 936, 460,
	0, 884, 461, 462, 463, 512, 916, 963, 2830, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 833, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 829, 830, 889, 846, 847,
	848, 844, 845, 858, 859, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 938, 863, 0, 0, 0,
	224, 225, 226, 227, 472, 904, 883, 915, 873, 914,
	913, 0, 231, 875, 874, 234, 235, 236, 865, 937,
	237, 973, 974, 478, 0, 238, 944, 0, 927, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 947, 253,
	254, 930, 928, 929, 934, 932, 931, 933, 255, 256,
	257, 258, 918, 260, 911, 910, 835, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 909, 267, 0, 268,
	0, 269, 270, 0, 271, 841, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 964, 965, 854, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 908, 906, 907,
	0, 287, 0, 288, 0, 0, 948, 289, 290, 0,
	291, 971, 0, 864, 292, 0, 293, 294, 295, 296,
	939, 940, 943, 344, 950, 297, 298, 0, 299, 300,
	885, 0, 0, 0, 1963, 301, 303, 310, 0, 949,
	304, 897, 888, 899, 901, 902, 903, 898, 0, 890,
	0, 311, 951, 941, 952, 312, 313, 314, 953, 923,
	924, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 972, 954, 324, 325, 955, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 877, 337, 956, 340, 341, 343, 342,
	832, 217, 957, 855, 942, 912, 345, 346, 0, 886,
	348, 887, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 958, 356, 959, 966, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 967, 367,
	501, 368, 1962, 369, 0, 370, 371, 372, 373, 374,
	375, 905, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 960, 392, 393, 394, 395, 842, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	878, 879, 881, 882, 409, 413, 416, 417, 935, 418,
	398, 399, 419, 420, 961, 421, 900, 880, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 946, 428, 429,
	430, 968, 0, 435, 436, 434, 0, 437, 438, 439,
	440, 441, 276, 876, 0, 443, 919, 920, 921, 922,
	0, 450, 0, 444, 445, 969, 446, 970, 853, 447,
	448, 449, 0, 451, 452, 0, 836, 453, 454, 455,
	456, 457, 459, 936, 460, 0, 884, 461, 462, 463,
	512, 916, 963, 0, 465, 464, 515, 0, 0, 0,
	0, 466, 467, 516, 468, 469, 470, 833, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	829, 830, 889, 846, 847, 848, 844, 845, 858, 859,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	938, 863, 0, 0, 0, 224, 225, 226, 227, 472,
	904, 883, 915, 873, 914, 913, 0, 231, 875, 874,
	234, 235, 236, 865, 937, 237, 973, 974, 478, 0,
	238, 944, 0, 927, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 947, 253, 254, 930, 928, 929, 934,
	932, 931, 933, 255, 256, 257, 258, 918, 260, 911,
	910, 835, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 909, 267, 0, 268, 0, 269, 270, 0, 271,
	841, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	964, 965, 854, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 908, 906, 907, 0, 287, 0, 288, 0,
	0, 948, 289, 290, 0, 291, 971, 0, 864, 292,
	0, 293, 294, 295, 296, 939, 940, 943, 344, 950,
	297, 298, 0, 299, 300, 885, 0, 0, 0, 216,
	301, 303, 310, 0, 949, 304, 897, 888, 899, 901,
	902, 903, 898, 0, 890, 0, 311, 951, 941, 952,
	312, 313, 314, 953, 923, 924, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 972, 954, 324,
	325, 955, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 877, 337,
	956, 340, 341, 343, 342, 832, 217, 957, 855, 942,
	912, 345, 346, 0, 886, 348, 887, 837, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 958, 356, 959,
	966, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 967, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 905, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 960, 392, 393, 394,
	395, 842, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 878, 879, 881, 882, 409,
	413, 416, 417, 935, 418, 398, 399, 419, 420, 961,
	421, 900, 880, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 946, 428, 429, 430, 968, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 876, 0,
	443, 919, 920, 921, 922, 0, 450, 0, 444, 445,
	969, 446, 970, 853, 447, 448, 449, 0, 451, 452,
	0, 836, 453, 454, 455, 456, 457, 459, 936, 460,
	0, 884, 461, 462, 463, 512, 916, 963, 0, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 833, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 829, 830, 889, 846, 847,
	848, 844, 845, 858, 859, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 938, 863, 0, 0, 0,
	224, 225, 226, 227, 472, 904, 883, 915, 873, 914,
	913, 0, 231, 875, 874, 234, 235, 236, 865, 937,
	237, 973, 974, 478, 0, 238, 944, 0, 927, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 947, 253,
	254, 930, 928, 929, 934, 932, 931, 933, 255, 256,
	257, 258, 918, 260, 911, 910, 835, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 909, 267, 0, 268,
	0, 269, 270, 0, 271, 841, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 964, 965, 854, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 908, 906, 907,
	0, 287, 0, 288, 0, 0, 948, 289, 290, 0,
	291, 971, 0, 864, 292, 0, 293, 294, 295, 296,
	939, 940, 943, 344, 950, 297, 298, 0, 299, 300,
	885, 0, 0, 0, 216, 301, 303, 310, 0, 949,
	304, 897, 888, 899, 901, 902, 903, 898, 0, 890,
	0, 311, 951, 941, 952, 312, 313, 314, 953, 923,
	924, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 972, 954, 324, 325, 955, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 877, 337, 956, 340, 341, 343, 342,
	832, 217, 957, 855, 942, 912, 345, 346, 0, 886,
	348, 887, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 958, 356, 959, 966, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 967, 367,
	501, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 905, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 960, 392, 393, 394, 395, 842, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	878, 879, 881, 882, 409, 413, 416, 417, 935, 418,
	398, 399, 419, 420, 961, 421, 900, 880, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 946, 428, 429,
	430, 968, 0, 435, 436, 434, 0, 437, 438, 439,
	440, 441, 276, 876, 0, 443, 919, 920, 921, 922,
	0, 450, 0, 444, 445, 969, 446, 970, 853, 447,
	448, 449, 0, 451, 452, 0, 836, 453, 454, 455,
	456, 457, 459, 936, 460, 0, 884, 461, 462, 463,
	512, 916, 963, 0, 465, 464, 515, 0, 0, 0,
	0, 466, 467, 516, 468, 469, 470, 833, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	829, 830, 1577, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 857, 889, 846, 847, 848, 844, 845,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 2139, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	451, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 833, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 829, 830, 889,
	846, 847, 848, 844, 845, 858, 859, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 938, 863, 0,
	0, 0, 224, 225, 226, 227, 472, 904, 883, 915,
	873, 914, 913, 0, 231, 875, 874, 234, 235, 236,
	865, 937, 237, 973, 974, 478, 0, 238, 944, 0,
	927, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	947, 253, 254, 930, 928, 929, 934, 932, 931, 933,
	255, 256, 257, 258, 918, 260, 911, 910, 835, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 909, 267,
	0, 268, 0, 269, 270, 0, 271, 841, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 964, 965, 854,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 908,
	906, 907, 0, 287, 0, 288, 0, 0, 948, 289,
	290, 0, 291, 971, 0, 864, 292, 0, 293, 294,
	295, 296, 939, 940, 943, 344, 950, 297, 298, 0,
	299, 300, 885, 0, 0, 0, 216, 301, 303, 310,
	0, 949, 304, 897, 888, 899, 901, 902, 903, 898,
	0, 890, 0, 311, 951, 941, 952, 312, 313, 314,
	953, 923, 924, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 972, 954, 324, 325, 955, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 877, 337, 956, 340, 341,
	343, 342, 832, 217, 957, 855, 942, 912, 345, 346,
	0, 886, 348, 887, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 498, 958, 356, 959, 966, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	967, 367, 501, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 905, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 960, 392, 393, 394, 395, 842, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 878, 879, 881, 882, 409, 413, 416, 417,
	935, 418, 398, 399, 419, 420, 961, 421, 900, 880,
	423, 0, 433, 424, 425, 426, 400, 427, 431, 946,
	428, 429, 430, 968, 0, 435, 436, 434, 0, 437,
	438, 439, 440, 441, 276, 876, 0, 443, 919, 920,
	921, 922, 0, 450, 0, 444, 445, 969, 446, 970,
	853, 447, 448, 449, 0, 451, 452, 0, 836, 453,
	454, 455, 456, 457, 459, 936, 460, 0, 884, 461,
	462, 463, 512, 916, 963, 0, 465, 464, 515, 0,
	0, 0, 0, 466, 467, 516, 468, 469, 470, 833,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 829, 830, 0, 0, 0, 0, 0, 0,
	0, 859, 1515, 0, 2144, 857, 889, 846, 847, 848,
	844, 845, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 938, 863, 0, 0, 0, 224,
	225, 226, 227, 472, 904, 883, 915, 873, 914, 913,
	0, 231, 875, 874, 234, 235, 236, 865, 937, 237,
	973, 974, 478, 0, 238, 944, 0, 927, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	930, 928, 929, 934, 932, 931, 933, 255, 256, 257,
	258, 918, 260, 911, 910, 835, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 909, 267, 0, 268, 0,
	269, 270, 0, 271, 841, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 964, 965, 854, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 908, 906, 907, 0,
	287, 0, 288, 0, 0, 948, 289, 290, 0, 291,
	971, 0, 864, 292, 0, 293, 294, 295, 296, 939,
	940, 943, 344, 950, 297, 298, 0, 299, 300, 885,
	0, 0, 0, 216, 301, 303, 310, 0, 949, 304,
	897, 888, 899, 901, 902, 903, 898, 0, 890, 0,
	311, 951, 941, 952, 312, 313, 314, 953, 923, 924,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 972, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 877, 337, 956, 340, 341, 343, 342, 832,
	217, 957, 855, 942, 912, 345, 346, 0, 886, 348,
	887, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 966, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 967, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	905, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 842, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 878,
	879, 881, 882, 409, 413, 416, 417, 935, 418, 398,
	399, 419, 420, 961, 421, 900, 880, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 946, 428, 429, 430,
	968, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 876, 0, 443, 919, 920, 921, 922, 0,
	450, 0, 444, 445, 969, 446, 970, 853, 447, 448,
	449, 0, 451, 452, 0, 836, 453, 454, 455, 456,
	457, 459, 936, 460, 0, 884, 461, 462, 463, 512,
	916, 963, 0, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 833, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 829,
	830, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 2142, 857, 889, 846, 847, 848, 844, 845, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 938, 863, 0, 0, 0, 224, 225, 226, 227,
	472, 904, 883, 915, 873, 914, 913, 0, 231, 875,
	874, 234, 235, 236, 865, 937, 237, 973, 974, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 918, 260,
	911, 910, 835, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 909, 267, 0, 268, 0, 269, 270, 0,
	271, 841, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 854, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 908, 906, 907, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 864,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 885, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 897, 888, 899,
	901, 902, 903, 898, 0, 890, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 923, 924, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 877,
	337, 956, 340, 341, 343, 342, 832, 217, 957, 855,
	942, 912, 345, 346, 0, 886, 348, 887, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 905, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 842, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 878, 879, 881, 882,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 900, 880, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 946, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 876,
	0, 443, 919, 920, 921, 922, 0, 450, 0, 444,
	445, 969, 446, 970, 853, 447, 448, 449, 0, 451,
	452, 0, 836, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 884, 461, 462, 463, 512, 916, 963, 0,
	465, 464, 515, 0, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 833, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 829, 830, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 2130, 857,
	889, 846, 847, 848, 844, 845, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 938, 863,
	0, 0, 0, 224, 225, 226, 227, 472, 904, 883,
	915, 873, 914, 913, 0, 231, 875, 874, 234, 235,
	236, 865, 937, 237, 973, 974, 478, 0, 238, 944,
	0, 927, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 930, 928, 929, 934, 932, 931,
	933, 255, 256, 257, 258, 918, 260, 911, 910, 835,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 909,
	267, 0, 268, 0, 269, 270, 0, 271, 841, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 964, 965,
	854, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	908, 906, 907, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 971, 0, 864, 292, 0, 293,
	294, 295, 296, 939, 940, 943, 344, 950, 297, 298,
	0, 299, 300, 885, 0, 0, 0, 216, 301, 303,
	310, 0, 949, 304, 897, 888, 899, 901, 902, 903,
	898, 0, 890, 0, 311, 951, 941, 952, 312, 313,
	314, 953, 923, 924, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 972, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 877, 337, 956, 340,
	341, 343, 342, 832, 217, 957, 855, 942, 912, 345,
	346, 0, 886, 348, 887, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 966, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 967, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 905, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 842,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 878, 879, 881, 882, 409, 413, 416,
	417, 935, 418, 398, 399, 419, 420, 961, 421, 900,
	880, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	946, 428, 429, 430, 968, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 876, 0, 443, 919,
	920, 921, 922, 0, 450, 0, 444, 445, 969, 446,
	970, 853, 447, 448, 449, 0, 451, 452, 0, 836,
	453, 454, 455, 456, 457, 459, 936, 460, 0, 884,
	461, 462, 463, 512, 916, 963, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	833, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 829, 830, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 2119, 857, 889, 846, 847,
	848, 844, 845, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 938, 863, 0, 0, 0,
	224, 225, 226, 227, 472, 904, 883, 915, 873, 914,
	913, 0, 231, 875, 874, 234, 235, 236, 865, 937,
	237, 973, 974, 478, 0, 238, 944, 0, 927, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 947, 253,
	254, 930, 928, 929, 934, 932, 931, 933, 255, 256,
	257, 258, 918, 260, 911, 910, 835, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 909, 267, 0, 268,
	0, 269, 270, 0, 271, 841, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 964, 965, 854, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 908, 906, 907,
	0, 287, 0, 288, 0, 0, 948, 289, 290, 0,
	291, 971, 0, 864, 292, 0, 293, 294, 295, 296,
	939, 940, 943, 344, 950, 297, 298, 0, 299, 300,
	885, 0, 0, 0, 216, 301, 303, 310, 0, 949,
	304, 897, 888, 899, 901, 902, 903, 898, 0, 890,
	0, 311, 951, 941, 952, 312, 313, 314, 953, 923,
	924, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 972, 954, 324, 325, 955, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 877, 337, 956, 340, 341, 343, 342,
	832, 217, 957, 855, 942, 912, 345, 346, 0, 886,
	348, 887, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 958, 356, 959, 966, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 967, 367,
	501, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 905, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 960, 392, 393, 394, 395, 842, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	878, 879, 881, 882, 409, 413, 416, 417, 935, 418,
	398, 399, 419, 420, 961, 421, 900, 880, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 946, 428, 429,
	430, 968, 0, 435, 436, 434, 0, 437, 438, 439,
	440, 441, 276, 876, 0, 443, 919, 920, 921, 922,
	0, 450, 0, 444, 445, 969, 446, 970, 853, 447,
	448, 449, 0, 451, 452, 0, 836, 453, 454, 455,
	456, 457, 459, 936, 460, 0, 884, 461, 462, 463,
	512, 916, 963, 0, 465, 464, 515, 0, 0, 0,
	0, 466, 467, 516, 468, 469, 470, 833, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	829, 830, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 2117, 857, 2109, 846, 847, 848, 844, 845,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	2112, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 2113, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 2114, 2111, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 2115, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	451, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 2110, 470, 833, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 829, 830, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 2106,
	857, 2109, 846, 847, 848, 844, 845, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 938,
	863, 0, 0, 0, 224, 225, 226, 227, 472, 904,
	883, 915, 873, 914, 913, 0, 231, 875, 874, 234,
	235, 236, 865, 937, 237, 973, 974, 478, 0, 238,
	944, 0, 927, 0, 239, 240, 241, 242, 243, 244,
	0, 246, 247, 248, 245, 0, 249, 0, 250, 251,
	252, 0, 947, 253, 254, 930, 928, 929, 934, 932,
	931, 933, 255, 256, 257, 258, 918, 2112, 911, 910,
	835, 261, 0, 263, 262, 0, 264, 0, 0, 265,
	909, 267, 0, 268, 0, 269, 270, 0, 271, 841,
	272, 273, 275, 277, 274, 278, 279, 280, 281, 964,
	965, 854, 215, 0, 0, 0, 0, 0, 282, 283,
	284, 908, 906, 907, 0, 287, 0, 288, 0, 0,
	948, 289, 290, 0, 291, 971, 0, 864, 292, 0,
	293, 294, 295, 2113, 939, 940, 943, 344, 950, 297,
	298, 0, 299, 300, 885, 0, 0, 0, 216, 301,
	303, 310, 0, 949, 304, 897, 888, 899, 901, 902,
	903, 898, 0, 890, 0, 311, 951, 941, 952, 312,
	313, 314, 953, 923, 924, 0, 0, 317, 318, 319,
	320, 0, 322, 321, 0, 323, 972, 954, 324, 325,
	955, 0, 326, 327, 0, 0, 328, 329, 0, 330,
	331, 333, 335, 332, 2114, 2111, 338, 877, 337, 956,
	340, 341, 343, 342, 832, 217, 957, 855, 942, 912,
	345, 346, 0, 886, 348, 887, 0, 0, 351, 352,
	353, 0, 0, 354, 355, 498, 958, 356, 959, 966,
	357, 350, 358, 359, 360, 361, 362, 363, 364, 0,
	365, 366, 967, 367, 501, 368, 0, 369, 0, 370,
	371, 372, 373, 374, 375, 905, 376, 377, 0, 378,
	379, 380, 381, 382, 0, 384, 385, 386, 383, 387,
	388, 389, 390, 0, 391, 960, 392, 393, 394, 395,
	842, 396, 0, 397, 401, 402, 403, 404, 405, 406,
	2115, 0, 414, 415, 878, 879, 881, 882, 409, 413,
	416, 417, 935, 418, 398, 399, 419, 420, 961, 421,
	900, 880, 423, 0, 433, 424, 425, 426, 400, 427,
	431, 946, 428, 429, 430, 968, 0, 435, 436, 434,
	0, 437, 438, 439, 440, 441, 276, 876, 0, 443,
	919, 920, 921, 922, 0, 450, 0, 444, 445, 969,
	446, 970, 853, 447, 448, 449, 0, 451, 452, 0,
	836, 453, 454, 455, 456, 457, 459, 936, 460, 0,
	884, 461, 462, 463, 512, 916, 963, 0, 465, 464,
	515, 0, 0, 0, 0, 466, 467, 516, 468, 2110,
	470, 833, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 829, 830, 889, 846, 847, 848,
	844, 845, 858, 859, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 938, 863, 0, 0, 0, 224,
	225, 226, 227, 472, 904, 883, 915, 873, 914, 913,
	0, 231, 875, 874, 234, 235, 236, 865, 937, 237,
	973, 974, 478, 0, 238, 944, 0, 927, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	930, 928, 929, 934, 932, 931, 933, 255, 256, 257,
	258, 918, 260, 911, 910, 835, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 909, 267, 0, 268, 0,
	269, 270, 0, 271, 841, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 964, 965, 854, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 908, 906, 907, 0,
	287, 0, 288, 0, 0, 948, 289, 290, 0, 291,
	971, 0, 864, 292, 0, 293, 294, 295, 296, 939,
	940, 943, 344, 950, 297, 298, 0, 299, 300, 885,
	0, 0, 0, 216, 301, 303, 310, 0, 949, 304,
	897, 888, 899, 901, 902, 903, 898, 0, 890, 0,
	311, 951, 941, 952, 312, 313, 314, 953, 923, 924,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 972, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 877, 337, 956, 340, 341, 343, 342, 832,
	217, 957, 855, 942, 912, 345, 346, 0, 886, 348,
	887, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 966, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 967, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	905, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 842, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 878,
	879, 881, 882, 409, 413, 416, 417, 935, 418, 398,
	399, 419, 420, 961, 421, 900, 880, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 946, 428, 429, 430,
	968, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 876, 0, 443, 919, 920, 921, 922, 0,
	450, 0, 444, 445, 969, 446, 970, 853, 447, 448,
	449, 0, 451, 452, 0, 836, 453, 454, 455, 456,
	457, 459, 936, 460, 0, 884, 461, 462, 463, 512,
	916, 963, 0, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 833, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 829,
	830, 0, 0, 0, 0, 0, 1523, 0, 859, 0,
	0, 0, 857, 889, 846, 847, 848, 844, 845, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1950, 223, 0, 0, 0,
	0, 938, 863, 0, 0, 0, 224, 225, 226, 227,
	472, 904, 883, 915, 873, 914, 913, 0, 231, 875,
	874, 234, 235, 236, 865, 937, 237, 973, 974, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 918, 260,
	911, 910, 835, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 909, 267, 0, 268, 0, 269, 270, 0,
	271, 841, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 854, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 908, 906, 907, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 864,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 885, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 897, 888, 899,
	901, 902, 903, 898, 0, 890, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 923, 924, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 877,
	337, 956, 340, 341, 343, 342, 832, 217, 957, 855,
	942, 912, 345, 346, 0, 886, 348, 887, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 905, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 842, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 878, 879, 881, 882,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 900, 880, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 946, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 876,
	0, 443, 919, 920, 921, 922, 0, 450, 0, 444,
	445, 969, 446, 970, 853, 447, 448, 449, 0, 451,
	452, 0, 836, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 884, 461, 462, 463, 512, 916, 963, 0,
	465, 464, 515, 0, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 833, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 829, 830, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 1203, 857,
	889, 846, 847, 848, 844, 845, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 938, 863,
	0, 0, 0, 224, 225, 226, 227, 472, 904, 883,
	915, 873, 914, 913, 0, 231, 875, 874, 234, 235,
	236, 865, 937, 237, 973, 974, 478, 0, 238, 944,
	0, 927, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 930, 928, 929, 934, 932, 931,
	933, 255, 256, 257, 258, 918, 260, 911, 910, 835,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 909,
	267, 0, 268, 0, 269, 270, 0, 271, 841, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 964, 965,
	854, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	908, 906, 907, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 971, 0, 864, 292, 0, 293,
	294, 295, 296, 1202, 940, 943, 344, 950, 297, 298,
	0, 299, 300, 885, 0, 0, 0, 216, 301, 303,
	310, 0, 949, 304, 897, 888, 899, 901, 902, 903,
	898, 0, 890, 0, 311, 951, 941, 952, 312, 313,
	314, 953, 923, 924, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 972, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 877, 337, 956, 340,
	341, 343, 342, 832, 217, 957, 855, 942, 912, 345,
	346, 0, 886, 348, 887, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 966, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 967, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 905, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 842,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 878, 879, 881, 882, 409, 413, 416,
	417, 935, 418, 398, 399, 419, 420, 961, 421, 900,
	880, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	946, 428, 429, 430, 968, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 876, 0, 443, 919,
	920, 921, 922, 0, 450, 0, 444, 445, 969, 446,
	970, 853, 447, 448, 449, 0, 451, 452, 0, 836,
	453, 454, 455, 456, 457, 459, 936, 460, 0, 884,
	461, 462, 463, 512, 916, 963, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	833, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 829, 830, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 1197, 857, 889, 846, 847,
	848, 844, 845, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 938, 863, 0, 0, 0,
	224, 225, 226, 227, 472, 904, 883, 915, 873, 914,
	913, 0, 231, 875, 874, 234, 235, 236, 865, 937,
	237, 973, 974, 478, 0, 238, 944, 0, 927, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 947, 253,
	254, 930, 928, 929, 934, 932, 931, 933, 255, 256,
	257, 258, 918, 260, 911, 910, 835, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 909, 267, 0, 268,
	0, 269, 270, 0, 271, 841, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 964, 965, 854, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 908, 906, 907,
	0, 287, 0, 288, 0, 0, 948, 289, 290, 0,
	291, 971, 0, 864, 292, 0, 293, 294, 295, 296,
	1196, 940, 943, 344, 950, 297, 298, 0, 299, 300,
	885, 0, 0, 0, 216, 301, 303, 310, 0, 949,
	304, 897, 888, 899, 901, 902, 903, 898, 0, 890,
	0, 311, 951, 941, 952, 312, 313, 314, 953, 923,
	924, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 972, 954, 324, 325, 955, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 877, 337, 956, 340, 341, 343, 342,
	832, 217, 957, 855, 942, 912, 345, 346, 0, 886,
	348, 887, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 958, 356, 959, 966, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 967, 367,
	501, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 905, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 960, 392, 393, 394, 395, 842, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	878, 879, 881, 882, 409, 413, 416, 417, 935, 418,
	398, 399, 419, 420, 961, 421, 900, 880, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 946, 428, 429,
	430, 968, 0, 435, 436, 434, 0, 437, 438, 439,
	440, 441, 276, 876, 0, 443, 919, 920, 921, 922,
	0, 450, 0, 444, 445, 969, 446, 970, 853, 447,
	448, 449, 0, 451, 452, 0, 836, 453, 454, 455,
	456, 457, 459, 936, 460, 0, 884, 461, 462, 463,
	512, 916, 963, 0, 465, 464, 515, 0, 0, 0,
	0, 466, 467, 516, 468, 469, 470, 833, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 0, 0, 0,
	829, 830, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 1192, 857, 889, 846, 847, 848, 844, 845,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	451, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 833, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 829, 830, 889,
	846, 847, 848, 844, 845, 858, 859, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 938, 863, 0,
	0, 0, 224, 225, 226, 227, 472, 904, 883, 915,
	873, 914, 913, 0, 231, 875, 874, 234, 235, 236,
	865, 937, 237, 973, 974, 478, 0, 238, 944, 0,
	927, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	947, 253, 254, 930, 928, 929, 934, 932, 931, 933,
	255, 256, 257, 258, 918, 260, 911, 910, 835, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 909, 267,
	0, 268, 0, 269, 270, 0, 271, 841, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 964, 965, 854,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 908,
	906, 907, 0, 287, 0, 288, 0, 0, 948, 289,
	290, 0, 291, 971, 0, 864, 292, 0, 293, 294,
	295, 296, 939, 940, 943, 344, 950, 297, 298, 0,
	299, 300, 885, 0, 0, 0, 216, 301, 303, 310,
	0, 949, 304, 897, 888, 899, 901, 902, 903, 898,
	0, 890, 0, 311, 951, 941, 952, 312, 313, 314,
	953, 923, 924, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 972, 954, 324, 325, 955, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 877, 337, 956, 340, 341,
	343, 342, 832, 217, 957, 855, 942, 912, 345, 346,
	0, 886, 348, 887, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 498, 958, 356, 959, 966, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	967, 367, 501, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 905, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 960, 392, 393, 394, 395, 842, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 878, 879, 881, 882, 409, 413, 416, 417,
	935, 418, 398, 399, 419, 420, 961, 421, 900, 880,
	423, 0, 433, 424, 425, 426, 400, 427, 431, 946,
	428, 429, 430, 968, 0, 435, 436, 434, 0, 437,
	438, 439, 440, 441, 276, 876, 0, 443, 919, 920,
	921, 922, 0, 450, 0, 444, 445, 969, 446, 970,
	853, 447, 448, 449, 0, 451, 452, 0, 836, 453,
	454, 455, 456, 457, 459, 936, 460, 0, 884, 461,
	462, 463, 512, 916, 963, 0, 465, 464, 515, 0,
	0, 0, 0, 466, 467, 516, 468, 469, 470, 833,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 829, 830, 889, 846, 847, 848, 844, 845,
	858, 859, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 3462, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	3461, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 833, 0, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 829, 830, 889,
	846, 847, 848, 844, 845, 858, 859, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 938, 863, 0,
	0, 0, 224, 225, 226, 227, 3460, 904, 883, 915,
	873, 914, 913, 0, 231, 875, 874, 234, 235, 236,
	865, 937, 237, 973, 974, 478, 0, 238, 944, 0,
	927, 0, 239, 240, 241, 242, 243, 244, 0, 246,
	247, 248, 245, 0, 249, 0, 250, 251, 252, 0,
	947, 253, 3462, 930, 928, 929, 934, 932, 931, 933,
	255, 256, 257, 258, 918, 260, 911, 910, 835, 261,
	0, 263, 262, 0, 264, 0, 0, 265, 909, 267,
	0, 268, 0, 269, 270, 0, 271, 841, 272, 273,
	275, 277, 274, 278, 279, 280, 281, 964, 965, 854,
	215, 0, 0, 0, 0, 0, 282, 283, 284, 908,
	906, 907, 0, 287, 0, 288, 0, 0, 948, 289,
	290, 0, 291, 971, 0, 864, 292, 0, 293, 294,
	295, 296, 939, 940, 943, 344, 950, 297, 298, 0,
	299, 300, 885, 0, 0, 0, 216, 301, 303, 310,
	0, 949, 304, 897, 888, 899, 901, 902, 903, 898,
	0, 890, 0, 311, 951, 941, 952, 312, 313, 314,
	953, 923, 924, 0, 0, 317, 318, 319, 320, 0,
	322, 321, 0, 323, 972, 954, 324, 325, 955, 0,
	326, 327, 0, 0, 328, 329, 0, 330, 331, 333,
	335, 332, 334, 336, 338, 877, 337, 956, 340, 341,
	343, 342, 832, 217, 957, 855, 942, 912, 345, 346,
	0, 886, 348, 887, 0, 0, 351, 352, 353, 0,
	0, 354, 355, 498, 958, 356, 959, 966, 357, 350,
	358, 359, 360, 361, 362, 363, 364, 0, 365, 366,
	967, 367, 501, 368, 0, 369, 0, 370, 371, 372,
	373, 374, 375, 905, 376, 377, 0, 378, 379, 380,
	381, 382, 0, 384, 385, 386, 383, 387, 388, 389,
	390, 0, 391, 960, 392, 393, 394, 395, 842, 396,
	0, 397, 401, 402, 403, 404, 405, 406, 407, 0,
	414, 415, 878, 879, 881, 882, 409, 413, 416, 417,
	935, 418, 398, 399, 419, 420, 961, 421, 900, 880,
	423, 0, 433, 424, 425, 426, 400, 427, 431, 946,
	428, 429, 430, 968, 0, 435, 436, 434, 0, 437,
	438, 439, 440, 441, 276, 876, 0, 443, 919, 920,
	921, 922, 0, 450, 0, 444, 445, 969, 446, 970,
	853, 447, 448, 449, 0, 3461, 452, 0, 836, 453,
	454, 455, 456, 457, 459, 936, 460, 0, 884, 461,
	462, 463, 512, 916, 963, 0, 465, 464, 515, 0,
	0, 0, 0, 466, 467, 516, 468, 469, 470, 833,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 829, 830, 889, 846, 847, 848, 844, 845,
	858, 859, 0, 0, 0, 857, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 472, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 0, 217, 957,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 889, 846, 847, 848, 844, 845,
	858, 0, 2127, 0, 0, 0, 0, 2125, 2126, 0,
	0, 218, 219, 220, 221, 222, 859, 223, 0, 0,
	857, 0, 938, 863, 0, 0, 0, 224, 225, 226,
	227, 0, 904, 883, 915, 873, 914, 913, 0, 231,
	875, 874, 234, 235, 236, 865, 937, 237, 973, 974,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 3462, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 918,
	260, 911, 910, 835, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 909, 267, 0, 268, 0, 269, 270,
	0, 271, 841, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 854, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 908, 906, 907, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	864, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 0, 297, 298, 0, 299, 300, 885, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 897, 888,
	899, 901, 902, 903, 898, 0, 890, 0, 311, 0,
	941, 0, 312, 313, 314, 953, 923, 924, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 972,
	954, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	877, 337, 956, 340, 341, 343, 342, 832, 217, 0,
	855, 942, 912, 345, 346, 0, 886, 348, 887, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 905, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 842, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 878, 879, 881,
	882, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 0, 421, 900, 880, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 946, 428, 429, 430, 968, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	876, 0, 443, 919, 920, 921, 922, 0, 450, 0,
	444, 445, 969, 446, 970, 853, 447, 448, 449, 0,
	3461, 452, 0, 836, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 884, 461, 462, 463, 512, 916, 963,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 1010, 0, 0, 829, 830, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	857, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 937, 237, 476, 477,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	487, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 315, 316, 0, 0,
	317, 318, 319, 320, 997, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 956, 340, 341, 343, 342, 0, 217, 957,
	0, 942, 497, 345, 346, 0, 347, 348, 349, 0,
	1002, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 503, 1004, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 181, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 968, 0,
	435, 436, 434, 183, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 969, 446, 970, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 458, 461, 462, 463, 1313, 513, 514,
	0, 465, 464, 515, 1010, 0, 0, 175, 466, 467,
	516, 468, 469, 470, 0, 176, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 938, 0, 994, 0, 1609, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 937, 237, 476, 477,
	478, 0, 238, 944, 0, 927, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 930, 928,
	929, 934, 932, 931, 933, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 964, 965, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 971, 0,
	487, 292, 0, 293, 294, 295, 296, 939, 940, 943,
	344, 950, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 0, 949, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 951,
	941, 952, 312, 313, 314, 953, 315, 316, 0, 0,
	317, 318, 319, 320, 997, 322, 321, 0, 323, 972,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 956, 340, 341, 343, 342, 0, 217, 957,
	0, 942, 497, 345, 346, 0, 347, 348, 349, 0,
	1002, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 966, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 967, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 503, 1004, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 181, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 935, 418, 398, 399, 419,
	420, 961, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 968, 0,
	435, 436, 434, 183, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 969, 446, 970, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	936, 460, 0, 458, 461, 462, 463, 1313, 513, 514,
	0, 465, 464, 515, 0, 0, 0, 175, 466, 467,
	516, 468, 469, 470, 0, 176, 0, 0, 2581, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 0, 1609, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 938, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 937, 237, 476, 477, 478, 0, 238, 944,
	0, 927, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 930, 928, 929, 934, 932, 931,
	933, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 964, 965,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 971, 0, 487, 292, 0, 293,
	294, 295, 296, 939, 940, 943, 344, 950, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 951, 941, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	997, 322, 321, 0, 323, 972, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 0, 217, 957, 0, 942, 497, 345,
	346, 0, 347, 348, 349, 0, 1002, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 966, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 967, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 503,
	1004, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 935, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 968, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 969, 446,
	970, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 936, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	0, 993, 0, 1010, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	994, 938, 999, 0, 0, 0, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 937, 237, 476, 477, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 487,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 997, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 217, 957, 0,
	942, 497, 345, 346, 0, 347, 348, 349, 0, 1002,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 1004, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 969, 446, 970, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 1010, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 938, 0, 994, 0, 999, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 937, 237, 476, 477, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 487,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 997, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 217, 957, 0,
	942, 497, 345, 346, 0, 347, 348, 349, 0, 1002,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 1004, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 969, 446, 970, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 1010, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 938, 0, 994, 0, 999, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 937, 237, 476, 477, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 487,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 217, 957, 0,
	942, 497, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 1004, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 969, 446, 970, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 822, 0, 1167, 0, 466, 467, 516,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 1504, 0, 0, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 1071, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 947, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 948, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 950, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 949, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	951, 494, 952, 312, 313, 314, 953, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 954, 324, 325, 955, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 956, 340, 341, 343, 342, 0, 0,
	957, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	958, 356, 959, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 960,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 181, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 961, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 183, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 1313, 513,
	514, 0, 465, 464, 515, 1310, 0, 1167, 175, 466,
	467, 516, 468, 469, 470, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 471, 0, 150, 0, 0,
	224, 225, 226, 227, 472, 473, 228, 474, 229, 230,
	475, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 476, 477, 478, 0, 238, 479, 0, 1071, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 947, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	257, 258, 259, 260, 480, 481, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 482, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 483, 484, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 485, 285, 286,
	0, 287, 0, 288, 0, 0, 948, 289, 290, 0,
	291, 486, 0, 487, 292, 0, 293, 294, 295, 296,
	488, 489, 490, 344, 950, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 0, 301, 303, 310, 0, 949,
	304, 491, 306, 305, 307, 308, 309, 492, 0, 493,
	0, 311, 951, 494, 952, 312, 313, 314, 953, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 495, 954, 324, 325, 955, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 956, 340, 341, 343, 342,
	0, 0, 957, 0, 496, 497, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 958, 356, 959, 499, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 500, 367,
	501, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 502, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 960, 392, 393, 394, 395, 503, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 181, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 420, 961, 421, 504, 422, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 432, 428, 429,
	430, 505, 0, 435, 436, 434, 183, 437, 438, 439,
	440, 441, 276, 442, 0, 443, 506, 507, 508, 509,
	0, 450, 0, 444, 445, 510, 446, 511, 0, 447,
	448, 449, 0, 451, 452, 0, 0, 453, 454, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	1313, 513, 514, 0, 465, 464, 515, 0, 0, 0,
	175, 466, 467, 516, 468, 469, 470, 0, 176, 0,
	0, 0, 0, 1167, 1166, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 471, 0, 0, 0, 0, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 476, 477, 478,
	0, 238, 479, 0, 1071, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 483, 484, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 486, 0, 487,
	292, 0, 293, 294, 295, 296, 488, 489, 490, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 494,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 495, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 0, 957, 0,
	496, 497, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 499, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 500, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 505, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 510, 446, 511, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 0, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 1167, 1166, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 1785, 223, 0, 0, 0,
	0, 471, 0, 0, 0, 0, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 476, 477, 478,
	0, 238, 479, 0, 1071, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 483, 484, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 486, 0, 487,
	292, 0, 293, 294, 295, 296, 488, 489, 490, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 494,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 495, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 0, 957, 0,
	496, 497, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 499, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 500, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 505, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 510, 446, 511, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 0, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 1167, 1166, 0, 0, 0, 0, 1164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 2776, 223, 0, 0, 0,
	0, 471, 0, 0, 0, 0, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 0, 237, 476, 477, 478,
	0, 238, 479, 0, 1071, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 0, 0, 0,
	0, 0, 0, 0, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 483, 484, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 486, 0, 487,
	292, 0, 293, 294, 295, 296, 488, 489, 490, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	0, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 494,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 495, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 0, 957, 0,
	496, 497, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 499, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 500, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 0, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 505, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 510, 446, 511, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 0,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 1010, 0, 0, 0, 466, 467, 516,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 938, 0, 0, 0, 1317, 224, 225, 226, 227,
	472, 473, 228, 474, 229, 230, 475, 0, 231, 232,
	233, 234, 235, 236, 0, 937, 237, 476, 477, 478,
	0, 238, 944, 0, 927, 0, 239, 240, 241, 242,
	243, 244, 0, 246, 247, 248, 245, 0, 249, 0,
	250, 251, 252, 0, 947, 253, 254, 930, 928, 929,
	934, 932, 931, 933, 255, 256, 257, 258, 259, 260,
	480, 481, 0, 261, 0, 263, 262, 0, 264, 0,
	0, 265, 266, 267, 0, 268, 0, 269, 270, 0,
	271, 482, 272, 273, 275, 277, 274, 278, 279, 280,
	281, 964, 965, 0, 215, 0, 0, 0, 0, 0,
	282, 283, 284, 485, 285, 286, 0, 287, 0, 288,
	0, 0, 948, 289, 290, 0, 291, 971, 0, 487,
	292, 0, 293, 294, 295, 296, 939, 940, 943, 344,
	950, 297, 298, 0, 299, 300, 302, 0, 0, 0,
	216, 301, 303, 310, 0, 949, 304, 491, 306, 305,
	307, 308, 309, 492, 0, 493, 0, 311, 951, 941,
	952, 312, 313, 314, 953, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 322, 321, 0, 323, 972, 954,
	324, 325, 955, 0, 326, 327, 0, 0, 328, 329,
	0, 330, 331, 333, 335, 332, 334, 336, 338, 339,
	337, 956, 340, 341, 343, 342, 0, 217, 957, 0,
	942, 497, 345, 346, 0, 347, 348, 349, 0, 0,
	351, 352, 353, 0, 0, 354, 355, 498, 958, 356,
	959, 966, 357, 350, 358, 359, 360, 361, 362, 363,
	364, 0, 365, 366, 967, 367, 501, 368, 0, 369,
	0, 370, 371, 372, 373, 374, 375, 502, 376, 377,
	0, 378, 379, 380, 381, 382, 0, 384, 385, 386,
	383, 387, 388, 389, 390, 0, 391, 960, 392, 393,
	394, 395, 503, 396, 0, 397, 401, 402, 403, 404,
	405, 406, 407, 0, 414, 415, 408, 410, 411, 412,
	409, 413, 416, 417, 935, 418, 398, 399, 419, 420,
	961, 421, 504, 422, 423, 0, 433, 424, 425, 426,
	400, 427, 431, 432, 428, 429, 430, 968, 0, 435,
	436, 434, 0, 437, 438, 439, 440, 441, 276, 442,
	0, 443, 506, 507, 508, 509, 0, 450, 0, 444,
	445, 969, 446, 970, 0, 447, 448, 449, 0, 451,
	452, 0, 0, 453, 454, 455, 456, 457, 459, 936,
	460, 0, 458, 461, 462, 463, 512, 513, 514, 0,
	465, 464, 515, 822, 0, 212, 0, 466, 467, 516,
	468, 469, 470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 0, 0, 0, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 0,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 181, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 183, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 1313, 513,
	514, 0, 465, 464, 515, 212, 0, 0, 175, 466,
	467, 516, 468, 469, 470, 0, 176, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 0, 0, 150, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 512, 513,
	514, 0, 465, 464, 515, 212, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 0, 0, 1614, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 215, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 216, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 217,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 512, 513,
	514, 0, 465, 464, 515, 212, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 2729, 0, 0, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 0,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 512, 513,
	514, 0, 465, 464, 515, 212, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 0, 0, 2362, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 0,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 512, 513,
	514, 0, 465, 464, 515, 212, 0, 0, 0, 466,
	467, 516, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 471, 0, 0, 0, 2854, 224, 225,
	226, 227, 472, 473, 228, 474, 229, 230, 475, 0,
	231, 232, 233, 234, 235, 236, 0, 0, 237, 476,
	477, 478, 0, 238, 479, 0, 0, 0, 239, 240,
	241, 242, 243, 244, 0, 246, 247, 248, 245, 0,
	249, 0, 250, 251, 252, 0, 0, 253, 254, 0,
	0, 0, 0, 0, 0, 0, 255, 256, 257, 258,
	259, 260, 480, 481, 0, 261, 0, 263, 262, 0,
	264, 0, 0, 265, 266, 267, 0, 268, 0, 269,
	270, 0, 271, 482, 272, 273, 275, 277, 274, 278,
	279, 280, 281, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 485, 285, 286, 0, 287,
	0, 288, 0, 0, 0, 289, 290, 0, 291, 486,
	0, 487, 292, 0, 293, 294, 295, 296, 488, 489,
	490, 344, 0, 297, 298, 0, 299, 300, 302, 0,
	0, 0, 0, 301, 303, 310, 0, 0, 304, 491,
	306, 305, 307, 308, 309, 492, 0, 493, 0, 311,
	0, 494, 0, 312, 313, 314, 0, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 322, 321, 0, 323,
	495, 0, 324, 325, 0, 0, 326, 327, 0, 0,
	328, 329, 0, 330, 331, 333, 335, 332, 334, 336,
	338, 339, 337, 0, 340, 341, 343, 342, 0, 0,
	0, 0, 496, 497, 345, 346, 0, 347, 348, 349,
	0, 0, 351, 352, 353, 0, 0, 354, 355, 498,
	0, 356, 0, 499, 357, 350, 358, 359, 360, 361,
	362, 363, 364, 0, 365, 366, 500, 367, 501, 368,
	0, 369, 0, 370, 371, 372, 373, 374, 375, 502,
	376, 377, 0, 378, 379, 380, 381, 382, 0, 384,
	385, 386, 383, 387, 388, 389, 390, 0, 391, 0,
	392, 393, 394, 395, 503, 396, 0, 397, 401, 402,
	403, 404, 405, 406, 407, 0, 414, 415, 408, 410,
	411, 412, 409, 413, 416, 417, 0, 418, 398, 399,
	419, 420, 0, 421, 504, 422, 423, 0, 433, 424,
	425, 426, 400, 427, 431, 432, 428, 429, 430, 505,
	0, 435, 436, 434, 0, 437, 438, 439, 440, 441,
	276, 442, 0, 443, 506, 507, 508, 509, 0, 450,
	0, 444, 445, 510, 446, 511, 0, 447, 448, 449,
	0, 451, 452, 0, 0, 453, 454, 455, 456, 457,
	459, 0, 460, 0, 458, 461, 462, 463, 512, 513,
	514, 0, 465, 464, 515, 692, 0, 583, 0, 466,
	467, 516, 468, 469, 470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 471, 0, 1875, 0, 0,
	224, 225, 226, 227, 472, 473, 228, 474, 229, 230,
	475, 0, 231, 232, 233, 234, 235, 236, 0, 0,
	237, 476, 477, 478, 0, 238, 479, 0, 0, 0,
	239, 240, 241, 242, 243, 244, 0, 246, 247, 248,
	245, 0, 249, 0, 250, 251, 252, 0, 0, 253,
	254, 0, 0, 0, 0, 0, 0, 0, 255, 256,
	589, 258, 259, 260, 480, 481, 0, 261, 0, 263,
	262, 0, 264, 0, 0, 265, 266, 267, 0, 268,
	0, 269, 270, 0, 271, 482, 272, 273, 275, 277,
	274, 278, 279, 280, 281, 483, 484, 0, 215, 0,
	0, 0, 0, 0, 282, 283, 284, 485, 285, 286,
	0, 287, 0, 288, 0, 0, 0, 289, 290, 0,
	291, 486, 0, 487, 292, 0, 293, 294, 295, 296,
	488, 489, 490, 344, 0, 297, 298, 0, 299, 300,
	302, 0, 0, 0, 216, 301, 303, 310, 0, 0,
	304, 491, 306, 305, 307, 308, 309, 492, 0, 493,
	0, 311, 0, 494, 0, 312, 313, 314, 0, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 322, 321,
	0, 323, 495, 0, 324, 325, 0, 0, 326, 327,
	0, 0, 328, 329, 0, 330, 331, 333, 335, 332,
	334, 336, 338, 339, 337, 0, 340, 341, 343, 342,
	0, 217, 0, 0, 496, 497, 345, 346, 0, 347,
	348, 349, 0, 0, 351, 352, 353, 0, 0, 354,
	355, 498, 0, 356, 0, 499, 357, 350, 358, 359,
	360, 361, 362, 363, 364, 0, 365, 366, 500, 367,
	501, 368, 0, 369, 0, 370, 371, 372, 373, 374,
	375, 502, 376, 377, 0, 378, 379, 380, 381, 382,
	0, 384, 385, 386, 383, 387, 388, 389, 390, 0,
	391, 0, 392, 393, 394, 395, 503, 396, 0, 397,
	401, 402, 403, 404, 405, 406, 407, 0, 414, 415,
	408, 410, 411, 412, 409, 413, 416, 417, 0, 418,
	398, 399, 419, 420, 0, 421, 504, 422, 423, 0,
	433, 424, 425, 426, 400, 427, 431, 432, 428, 429,
	430, 505, 0, 435, 436, 434, 588, 437, 438, 439,
	440, 441, 276, 442, 0, 443, 506, 507, 508, 509,
	0, 450, 0, 444, 445, 510, 446, 511, 0, 447,
	448, 449, 0, 451, 452, 0, 0, 453, 454, 455,
	456, 457, 459, 0, 460, 0, 458, 461, 462, 463,
	512, 513, 514, 0, 465, 464, 515, 0, 582, 0,
	583, 466, 467, 516, 468, 469, 470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 592, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 589, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 588,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 583, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 592, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 589,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 1905, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 588, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 583, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 592, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 589, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 588, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 592, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 1342, 0,
	1167, 1166, 0, 0, 0, 0, 1164, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 1071, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 1341, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 950, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 951, 494, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 0, 0, 957, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 1340, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 1339, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	1308, 0, 1167, 1166, 0, 0, 0, 0, 1164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 1071, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 947, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 948, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1307, 489, 490, 344, 950,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 949, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 951, 494, 952,
	312, 313, 314, 953, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 954, 324,
	325, 955, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	956, 340, 341, 343, 342, 0, 0, 957, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 958, 356, 959,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 960, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 961,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 1304, 0, 1167, 1166, 0, 0, 0, 0,
	1164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 1071, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 947, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 948, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 1303, 489, 490,
	344, 950, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 949, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 951,
	494, 952, 312, 313, 314, 953, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	954, 324, 325, 955, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 956, 340, 341, 343, 342, 0, 0, 957,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 958,
	356, 959, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 960, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 961, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 1242, 0, 1167, 1166, 0, 0,
	0, 0, 1164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 1071, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 948, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 1241,
	489, 490, 344, 950, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 949, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 951, 494, 952, 312, 313, 314, 953, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 956, 340, 341, 343, 342, 0,
	0, 957, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 961, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 1239, 0, 1167, 1166,
	0, 0, 0, 0, 1164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 1071,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 947,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 948, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 1238, 489, 490, 344, 950, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	949, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 951, 494, 952, 312, 313, 314, 953,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 954, 324, 325, 955, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 956, 340, 341, 343,
	342, 0, 0, 957, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 958, 356, 959, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 960, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 961, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 1160, 0,
	1167, 1166, 0, 0, 0, 0, 1164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 1071, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 1162, 489, 490, 344, 950, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 951, 494, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 0, 0, 957, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	1167, 1166, 0, 0, 0, 0, 1164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 1071, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 950, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 951, 494, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 0, 0, 957, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	1167, 1166, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 1071, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 947, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 948,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 950, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 949, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 951, 494, 952, 312, 313,
	314, 953, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 954, 324, 325, 955,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 956, 340,
	341, 343, 342, 0, 0, 957, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 958, 356, 959, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 960, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 961, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 1167, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 1071, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 947, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 948, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 950, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 949, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 951, 494, 952, 312, 313, 314, 953, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 954, 324, 325, 955, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 956, 340, 341, 343, 342, 0,
	0, 957, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 958, 356, 959, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	960, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 961, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 212, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 2250,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 2247, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 2397, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 2253,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 2394,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 2396, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 2393, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 2252, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 2395, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 2250, 238, 479, 0, 0,
	2244, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 2247, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 2253, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 2243, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 2252, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 2251, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 1395, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 1398, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 1396,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 1397, 464, 515,
	1155, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1157, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 1002, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 1152, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 1154, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 217, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	1002, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 1059, 0, 212, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 1061,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 1002, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 545, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 544, 222,
	534, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 537, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	538, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 539, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 533, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 534, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	537, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 538, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	539, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 212, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 1002, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 2326, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 1884, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 212, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 1818, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 1811, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 1810, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 1806, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 1808, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	1297, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1296, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 1294, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 215, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 1293, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 216, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 217, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 1291, 0, 212, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 1290,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 1287, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 1286, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 1262, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	1177, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1179, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 215,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 216, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 217, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 212, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 537, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 538, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 539, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 1912, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 215, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 216, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 217, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 212, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 1910,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 215, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 216, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	217, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 212, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 1908, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 215, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 216,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 217, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 684, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 683, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 682, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 2397, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 3179, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	524, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 523, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 522, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 2185, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 212, 2384,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 212, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 2977, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 212, 2384, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 2381, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 1891, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	1882, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 565, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	1037, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 566, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 562,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 561, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 1830, 0, 212, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 1829,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 565, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 555, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 566, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 562, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 1316, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 561, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 1301, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 1300, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	1250, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1249, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 1234, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 1171, 0, 212, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 565, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 1037, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 566, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 562, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 561, 507, 508,
	509, 0, 450, 0, 444, 1038, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 212, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 218, 219, 220, 221, 222, 1021, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	0, 465, 464, 515, 565, 0, 212, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 555, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 553, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 554, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 566, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 556, 396, 0, 397, 401,
	402, 562, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 557, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 561, 507, 508, 509, 0,
	450, 0, 444, 559, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 0, 465, 464, 515, 549, 0, 212, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 488, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 550, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 0, 465, 464, 515, 547, 0,
	212, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	541, 0, 212, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 488, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 0, 465,
	464, 515, 519, 0, 212, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 212, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 0, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 2669,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 418, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 212, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 2667, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 2655, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 212, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 2344, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 376,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 292, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 360, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 373, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	396, 0, 397, 550, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 212, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 471, 0, 1842, 0, 0, 224,
	225, 226, 227, 472, 473, 228, 474, 229, 230, 475,
	0, 231, 232, 233, 234, 235, 236, 0, 0, 237,
	476, 477, 478, 0, 238, 479, 0, 0, 0, 239,
	240, 241, 242, 243, 244, 0, 246, 247, 248, 245,
	0, 249, 0, 250, 251, 252, 0, 0, 253, 254,
	0, 0, 0, 0, 0, 0, 0, 255, 256, 257,
	258, 259, 260, 480, 481, 0, 261, 0, 263, 262,
	0, 264, 0, 0, 265, 266, 267, 0, 268, 0,
	269, 270, 0, 271, 482, 272, 273, 275, 277, 274,
	278, 279, 280, 281, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 284, 485, 285, 286, 0,
	287, 0, 288, 0, 0, 0, 289, 290, 0, 291,
	486, 0, 487, 292, 0, 293, 294, 295, 296, 488,
	489, 490, 344, 0, 297, 298, 0, 299, 300, 302,
	0, 0, 0, 0, 301, 303, 310, 0, 0, 304,
	491, 306, 305, 307, 308, 309, 492, 0, 493, 0,
	311, 0, 494, 0, 312, 313, 314, 0, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 322, 321, 0,
	323, 495, 0, 324, 325, 0, 0, 326, 327, 0,
	0, 328, 329, 0, 330, 331, 333, 335, 332, 334,
	336, 338, 339, 337, 0, 340, 341, 343, 342, 0,
	0, 0, 0, 496, 497, 345, 346, 0, 347, 348,
	349, 0, 0, 351, 352, 353, 0, 0, 354, 355,
	498, 0, 356, 0, 499, 357, 350, 358, 359, 360,
	361, 362, 363, 364, 0, 365, 366, 500, 367, 501,
	368, 0, 369, 0, 370, 371, 372, 373, 374, 375,
	502, 376, 377, 0, 378, 379, 380, 381, 382, 0,
	384, 385, 386, 383, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 503, 396, 0, 397, 401,
	402, 403, 404, 405, 406, 407, 0, 414, 415, 408,
	410, 411, 412, 409, 413, 416, 417, 0, 0, 398,
	399, 419, 420, 0, 421, 504, 422, 423, 0, 433,
	424, 425, 426, 400, 427, 431, 432, 428, 429, 430,
	505, 0, 435, 436, 434, 0, 437, 438, 439, 440,
	441, 276, 442, 0, 443, 506, 507, 508, 509, 0,
	450, 0, 444, 445, 510, 446, 511, 0, 447, 448,
	449, 0, 451, 452, 0, 0, 453, 454, 455, 456,
	457, 459, 0, 460, 0, 458, 461, 462, 463, 512,
	513, 514, 212, 465, 464, 515, 0, 0, 0, 0,
	466, 467, 516, 468, 469, 470, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 224, 225, 226, 227, 472,
	473, 228, 474, 229, 230, 475, 0, 231, 232, 233,
	234, 235, 236, 0, 0, 237, 476, 477, 478, 0,
	238, 479, 0, 0, 0, 239, 240, 241, 242, 243,
	244, 0, 246, 247, 248, 245, 0, 249, 0, 250,
	251, 252, 0, 0, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 255, 256, 257, 258, 259, 260, 480,
	481, 0, 261, 0, 263, 262, 0, 264, 0, 0,
	265, 266, 267, 0, 268, 0, 269, 270, 0, 271,
	482, 272, 273, 275, 277, 274, 278, 279, 280, 281,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 284, 485, 285, 286, 0, 287, 0, 288, 0,
	0, 0, 289, 290, 0, 291, 486, 0, 487, 292,
	0, 293, 294, 295, 296, 1270, 489, 490, 344, 0,
	297, 298, 0, 299, 300, 302, 0, 0, 0, 0,
	301, 303, 310, 0, 0, 304, 491, 306, 305, 307,
	308, 309, 492, 0, 493, 0, 311, 0, 494, 0,
	312, 313, 314, 0, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 322, 321, 0, 323, 495, 0, 324,
	325, 0, 0, 326, 327, 0, 0, 328, 329, 0,
	330, 331, 333, 335, 332, 334, 336, 338, 339, 337,
	0, 340, 341, 343, 342, 0, 0, 0, 0, 496,
	497, 345, 346, 0, 347, 348, 349, 0, 0, 351,
	352, 353, 0, 0, 354, 355, 498, 0, 356, 0,
	499, 357, 350, 358, 359, 360, 361, 362, 363, 364,
	0, 365, 366, 500, 367, 501, 368, 0, 369, 0,
	370, 371, 372, 373, 374, 375, 502, 376, 377, 0,
	378, 379, 380, 381, 382, 0, 384, 385, 386, 383,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 503, 396, 0, 397, 401, 402, 403, 404, 405,
	406, 407, 0, 414, 415, 408, 410, 411, 412, 409,
	413, 416, 417, 0, 418, 398, 399, 419, 420, 0,
	421, 504, 422, 423, 0, 433, 424, 425, 426, 400,
	427, 431, 432, 428, 429, 430, 505, 0, 435, 436,
	434, 0, 437, 438, 439, 440, 441, 276, 442, 0,
	443, 506, 507, 508, 509, 0, 450, 0, 444, 445,
	510, 446, 511, 0, 447, 448, 449, 0, 451, 452,
	0, 0, 453, 454, 455, 456, 457, 459, 0, 460,
	0, 458, 461, 462, 463, 512, 513, 514, 212, 465,
	464, 515, 0, 0, 0, 0, 466, 467, 516, 468,
	469, 470, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 224, 225, 226, 227, 472, 473, 228, 474, 229,
	230, 475, 0, 231, 232, 233, 234, 235, 236, 0,
	0, 237, 476, 477, 478, 0, 238, 479, 0, 0,
	0, 239, 240, 241, 242, 243, 244, 0, 246, 247,
	248, 245, 0, 249, 0, 250, 251, 252, 0, 0,
	253, 254, 0, 0, 0, 0, 0, 0, 0, 255,
	256, 257, 258, 259, 260, 480, 481, 0, 261, 0,
	263, 262, 0, 264, 0, 0, 265, 266, 267, 0,
	268, 0, 269, 270, 0, 271, 482, 272, 273, 275,
	277, 274, 278, 279, 280, 281, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 284, 485, 285,
	286, 0, 287, 0, 288, 0, 0, 0, 289, 290,
	0, 291, 486, 0, 487, 292, 0, 293, 294, 295,
	296, 1212, 489, 490, 344, 0, 297, 298, 0, 299,
	300, 302, 0, 0, 0, 0, 301, 303, 310, 0,
	0, 304, 491, 306, 305, 307, 308, 309, 492, 0,
	493, 0, 311, 0, 494, 0, 312, 313, 314, 0,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 322,
	321, 0, 323, 495, 0, 324, 325, 0, 0, 326,
	327, 0, 0, 328, 329, 0, 330, 331, 333, 335,
	332, 334, 336, 338, 339, 337, 0, 340, 341, 343,
	342, 0, 0, 0, 0, 496, 497, 345, 346, 0,
	347, 348, 349, 0, 0, 351, 352, 353, 0, 0,
	354, 355, 498, 0, 356, 0, 499, 357, 350, 358,
	359, 360, 361, 362, 363, 364, 0, 365, 366, 500,
	367, 501, 368, 0, 369, 0, 370, 371, 372, 373,
	374, 375, 502, 376, 377, 0, 378, 379, 380, 381,
	382, 0, 384, 385, 386, 383, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 503, 396, 0,
	397, 401, 402, 403, 404, 405, 406, 407, 0, 414,
	415, 408, 410, 411, 412, 409, 413, 416, 417, 0,
	418, 398, 399, 419, 420, 0, 421, 504, 422, 423,
	0, 433, 424, 425, 426, 400, 427, 431, 432, 428,
	429, 430, 505, 0, 435, 436, 434, 0, 437, 438,
	439, 440, 441, 276, 442, 0, 443, 506, 507, 508,
	509, 0, 450, 0, 444, 445, 510, 446, 511, 0,
	447, 448, 449, 0, 451, 452, 0, 0, 453, 454,
	455, 456, 457, 459, 0, 460, 0, 458, 461, 462,
	463, 512, 513, 514, 212, 465, 464, 515, 0, 0,
	0, 0, 466, 467, 516, 468, 469, 470, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 224, 225, 226,
	227, 472, 473, 228, 474, 229, 230, 475, 0, 231,
	232, 233, 234, 235, 236, 0, 0, 237, 476, 477,
	478, 0, 238, 479, 0, 0, 0, 239, 240, 241,
	242, 243, 244, 0, 246, 247, 248, 245, 0, 249,
	0, 250, 251, 252, 0, 0, 253, 254, 0, 0,
	0, 0, 0, 0, 0, 255, 256, 257, 258, 259,
	260, 480, 481, 0, 261, 0, 263, 262, 0, 264,
	0, 0, 265, 266, 267, 0, 268, 0, 269, 270,
	0, 271, 482, 272, 273, 275, 277, 274, 278, 279,
	280, 281, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 284, 485, 285, 286, 0, 287, 0,
	288, 0, 0, 0, 289, 290, 0, 291, 486, 0,
	487, 292, 0, 293, 294, 295, 296, 488, 489, 490,
	344, 0, 297, 298, 0, 299, 300, 302, 0, 0,
	0, 0, 301, 303, 310, 0, 0, 304, 491, 306,
	305, 307, 308, 309, 492, 0, 493, 0, 311, 0,
	494, 0, 312, 313, 314, 0, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 322, 321, 0, 323, 495,
	0, 324, 325, 0, 0, 326, 327, 0, 0, 328,
	329, 0, 330, 331, 333, 335, 332, 334, 336, 338,
	339, 337, 0, 340, 341, 343, 342, 0, 0, 0,
	0, 496, 497, 345, 346, 0, 347, 348, 349, 0,
	0, 351, 352, 353, 0, 0, 354, 355, 498, 0,
	356, 0, 499, 357, 350, 358, 359, 360, 361, 362,
	363, 364, 0, 365, 366, 500, 367, 501, 368, 0,
	369, 0, 370, 371, 372, 373, 374, 375, 502, 976,
	377, 0, 378, 379, 380, 381, 382, 0, 384, 385,
	386, 383, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 503, 396, 0, 397, 401, 402, 403,
	404, 405, 406, 407, 0, 414, 415, 408, 410, 411,
	412, 409, 413, 416, 417, 0, 418, 398, 399, 419,
	420, 0, 421, 504, 422, 423, 0, 433, 424, 425,
	426, 400, 427, 431, 432, 428, 429, 430, 505, 0,
	435, 436, 434, 0, 437, 438, 439, 440, 441, 276,
	442, 0, 443, 506, 507, 508, 509, 0, 450, 0,
	444, 445, 510, 446, 511, 0, 447, 448, 449, 0,
	451, 452, 0, 0, 453, 454, 455, 456, 457, 459,
	0, 460, 0, 458, 461, 462, 463, 512, 513, 514,
	212, 465, 464, 515, 0, 0, 0, 0, 466, 467,
	516, 468, 469, 470, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 224, 225, 226, 227, 472, 473, 228,
	474, 229, 230, 475, 0, 231, 232, 233, 234, 235,
	236, 0, 0, 237, 476, 477, 478, 0, 238, 479,
	0, 0, 0, 239, 240, 241, 242, 243, 244, 0,
	246, 247, 248, 245, 0, 249, 0, 250, 251, 252,
	0, 0, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 255, 256, 257, 258, 259, 260, 480, 481, 0,
	261, 0, 263, 262, 0, 264, 0, 0, 265, 266,
	267, 0, 268, 0, 269, 270, 0, 271, 482, 272,
	273, 275, 277, 274, 278, 279, 280, 281, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 284,
	485, 285, 286, 0, 287, 0, 288, 0, 0, 0,
	289, 290, 0, 291, 486, 0, 487, 0, 0, 293,
	294, 295, 296, 488, 489, 490, 344, 0, 297, 298,
	0, 299, 300, 302, 0, 0, 0, 0, 301, 303,
	310, 0, 0, 304, 491, 306, 305, 307, 308, 309,
	492, 0, 493, 0, 311, 0, 494, 0, 312, 313,
	314, 0, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 322, 321, 0, 323, 495, 0, 324, 325, 0,
	0, 326, 327, 0, 0, 328, 329, 0, 330, 331,
	333, 335, 332, 334, 336, 338, 339, 337, 0, 340,
	341, 343, 342, 0, 0, 0, 0, 496, 497, 345,
	346, 0, 347, 348, 349, 0, 0, 351, 352, 353,
	0, 0, 354, 355, 498, 0, 356, 0, 499, 357,
	350, 358, 359, 0, 361, 362, 363, 364, 0, 365,
	366, 500, 367, 501, 368, 0, 369, 0, 370, 371,
	372, 0, 374, 375, 502, 376, 377, 0, 378, 379,
	380, 381, 382, 0, 384, 385, 386, 383, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 503,
	0, 0, 397, 401, 402, 403, 404, 405, 406, 407,
	0, 414, 415, 408, 410, 411, 412, 409, 413, 416,
	417, 0, 418, 398, 399, 419, 420, 0, 421, 504,
	422, 423, 0, 433, 424, 425, 426, 400, 427, 431,
	432, 428, 429, 430, 505, 0, 435, 436, 434, 0,
	437, 438, 439, 440, 441, 276, 442, 0, 443, 506,
	507, 508, 509, 0, 450, 0, 444, 445, 510, 446,
	511, 0, 447, 448, 449, 0, 451, 452, 0, 0,
	453, 454, 455, 456, 457, 459, 0, 460, 0, 458,
	461, 462, 463, 512, 513, 514, 0, 465, 464, 515,
	0, 0, 0, 0, 466, 467, 516, 468, 469, 470,
	1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 1466, 1467, 1468,
	1442, 0, 0, 0, 0, 0, 1448, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 1490, 0, 0, 0, 1470, 1471, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1487, 0, 0, 0, 0, 0, 0, 1457, 1458, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 0, 1478, 1448, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 1488, 0,
	1490, 0, 0, 0, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 1469, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483,
	1484, 1485, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 1443,
	0, 1464, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 1481, 0, 0,
	0, 0, 0, 1479, 0, 1462, 1454, 1455, 1461, 1460,
	1456, 1482, 1459, 1453, 1451, 1452, 1444, 1445, 1446, 1447,
	1449, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	2527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 1465,
	1466, 1467, 1468, 1443, 0, 0, 0, 1489, 0, 1448,
	1479, 0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0,
	1442, 0, 0, 1480, 0, 0, 1490, 2526, 0, 1462,
	1470, 1471, 1472, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 1487, 0, 0, 0, 0, 0, 0,
	1457, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 1488, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	1490, 0, 0, 0, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 1469,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484,
	1485, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1464, 1489, 0, 0, 0, 1479, 0, 0, 1454,
	1455, 1461, 1460, 1456, 1482, 0, 1453, 1451, 1452, 1444,
	1445, 1446, 1447, 1449, 1450, 1442, 0, 1481, 0, 0,
	0, 0, 0, 2523, 1462, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 1441, 0, 1473,
	1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 1465, 1466,
	1467, 1468, 1443, 0, 0, 0, 1489, 0, 1448, 0,
	1479, 0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 1442,
	0, 0, 1480, 0, 0, 1490, 0, 2522, 1462, 1470,
	1471, 1472, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 1487, 0, 0, 0, 0, 0, 0, 1457,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 1466, 1467, 1468, 0, 0, 0, 0,
	1488, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 1490,
	0, 0, 0, 1470, 1471, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 1487, 0, 1469, 0,
	0, 0, 0, 1457, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1464, 1489, 0, 0, 0, 1479, 0, 0, 1454, 1455,
	1461, 1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445,
	1446, 1447, 1449, 1450, 1442, 0, 1481, 0, 0, 0,
	0, 0, 2521, 1462, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 1441, 0, 1473, 1474,
	1475, 1483, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 1465, 1466, 1467,
	1468, 1443, 0, 0, 0, 1489, 0, 1448, 0, 1479,
	0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0, 1453,
	1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 1442, 0,
	0, 1480, 0, 0, 1490, 0, 2061, 1462, 1470, 1471,
	1472, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1487, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1466, 1467, 1468, 0, 0, 0, 0, 1488,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 1490, 0,
	0, 0, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 1487, 0, 1469, 0, 0,
	0, 0, 1457, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1464,
	1489, 0, 0, 0, 1479, 0, 0, 1454, 1455, 1461,
	1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 1442, 0, 1481, 0, 3416, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 1441, 0, 1473, 1474, 1475,
	1483, 1484, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 1465, 1466, 1467, 1468,
	1443, 0, 0, 0, 1489, 0, 1448, 0, 1479, 0,
	0, 1454, 1455, 1461, 1460, 1456, 1482, 0, 1453, 1451,
	1452, 1444, 1445, 1446, 1447, 1449, 1450, 1442, 0, 0,
	1480, 3412, 0, 1490, 0, 0, 1462, 1470, 1471, 1472,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1487, 0, 0, 0, 0, 0, 0, 1457, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 1466, 1467, 1468, 0, 0, 0, 0, 1488, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 1490, 0, 0,
	0, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1487, 0, 1469, 0, 0, 0,
	0, 1457, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 1478, 0, 0, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1464, 1489,
	0, 0, 0, 1479, 0, 0, 1454, 1455, 1461, 1460,
	1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447,
	1449, 1450, 1442, 0, 1481, 0, 3343, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1476, 0, 0, 1465, 1466, 1467, 1468, 1443,
	0, 0, 0, 1489, 0, 1448, 0, 1479, 0, 0,
	1454, 1455, 1461, 1460, 1456, 1482, 0, 1453, 1451, 1452,
	1444, 1445, 1446, 1447, 1449, 1450, 1442, 0, 0, 1480,
	3342, 0, 1490, 0, 0, 1462, 1470, 1471, 1472, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 1487,
	0, 0, 0, 0, 0, 0, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 1488, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 1490, 0, 0, 0,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 1487, 0, 1469, 0, 0, 0, 0,
	1457, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 1478, 0, 0, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 1441,
	0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 1476, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1464, 1489, 0,
	0, 0, 1479, 0, 0, 1454, 1455, 1461, 1460, 1456,
	1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449,
	1450, 1442, 0, 1481, 0, 3237, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 1465, 1466, 1467, 1468, 1443, 0,
	0, 0, 1489, 0, 1448, 0, 1479, 0, 0, 1454,
	1455, 1461, 1460, 1456, 1482, 0, 1453, 1451, 1452, 1444,
	1445, 1446, 1447, 1449, 1450, 1442, 0, 0, 1480, 3143,
	0, 1490, 0, 0, 1462, 1470, 1471, 1472, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 1487, 0,
	0, 0, 0, 0, 0, 1457, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 1466,
	1467, 1468, 0, 0, 0, 0, 1488, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 1490, 0, 0, 0, 1470,
	1471, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 1487, 0, 1469, 0, 0, 0, 0, 1457,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 1469, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1464, 1489, 0, 0,
	0, 1479, 0, 0, 1454, 1455, 1461, 1460, 1456, 1482,
	0, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450,
	1442, 0, 1481, 0, 3095, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 1465, 1466, 1467, 1468, 1443, 0, 0,
	0, 1489, 0, 1448, 0, 1479, 0, 0, 1454, 1455,
	1461, 1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445,
	1446, 1447, 1449, 1450, 1442, 0, 0, 1480, 3094, 0,
	1490, 0, 0, 1462, 1470, 1471, 1472, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 1466, 1467,
	1468, 0, 0, 0, 0, 1488, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 1490, 0, 0, 0, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1487, 0, 1469, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 1478, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 1441, 0, 1473,
	1474, 1475, 1483, 1484, 1485, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1464, 1489, 0, 0, 0,
	1479, 0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 1442,
	0, 1481, 0, 3093, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1476,
	0, 0, 1465, 1466, 1467, 1468, 1443, 0, 0, 0,
	1489, 0, 1448, 0, 1479, 0, 0, 1454, 1455, 1461,
	1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 1442, 0, 0, 1480, 3060, 0, 1490,
	0, 0, 1462, 1470, 1471, 1472, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 1487, 0, 0, 0,
	0, 0, 0, 1457, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 1466, 1467, 1468,
	0, 0, 0, 0, 1488, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 1490, 0, 0, 0, 1470, 1471, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1487, 0, 1469, 0, 0, 0, 0, 1457, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 1478, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 1488, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 1441, 0, 1473, 1474,
	1475, 1483, 1484, 1485, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1464, 1489, 0, 0, 0, 1479,
	0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0, 1453,
	1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 1442, 0,
	1481, 0, 2861, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1466, 1467, 1468, 0, 0, 0, 0, 0,
	0, 1448, 3514, 1479, 0, 0, 1454, 1455, 1461, 1460,
	1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446, 1447,
	1449, 1450, 0, 0, 2478, 1480, 0, 0, 1490, 0,
	0, 0, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 1487, 0, 0, 0, 0,
	0, 0, 1457, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1478, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3513, 0, 0, 0, 0, 0, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 2449, 0, 1443, 0, 0, 0, 1489, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 1481, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 1441,
	0, 1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0,
	0, 0, 0, 0, 2450, 0, 0, 1476, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 0, 0, 0,
	0, 1442, 0, 1448, 0, 0, 0, 0, 1479, 0,
	1462, 1454, 1455, 1461, 1460, 1456, 1482, 1459, 1453, 1451,
	1452, 1444, 1445, 1446, 1447, 1449, 1450, 1480, 0, 0,
	1490, 0, 0, 0, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 1466, 1467, 1468, 0, 1478,
	0, 0, 0, 0, 1448, 0, 2566, 1463, 0, 2565,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 1480, 0,
	0, 1490, 0, 0, 0, 1470, 1471, 1472, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 1487, 0,
	0, 0, 0, 0, 0, 1457, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1478, 0, 0, 1469, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 1488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2152, 0, 0, 0, 0, 0, 0,
	1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 1476,
	0, 0, 0, 2151, 0, 0, 1443, 0, 0, 0,
	1489, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 1481, 0,
	1479, 0, 1462, 1454, 1455, 1461, 1460, 1456, 1482, 1459,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0,
	0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 1466, 1467, 1468,
	0, 0, 0, 0, 1442, 0, 1448, 0, 0, 0,
	0, 1479, 0, 1462, 1454, 1455, 1461, 1460, 1456, 1482,
	1459, 1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450,
	1480, 0, 0, 1490, 0, 0, 0, 1470, 1471, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	1487, 0, 0, 0, 0, 0, 0, 1457, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 1466, 1467,
	1468, 0, 1478, 0, 0, 0, 0, 1448, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	0, 1480, 0, 0, 1490, 0, 0, 0, 1470, 1471,
	1472, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1487, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 1469, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 819, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483,
	1484, 1485, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 0, 1489, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 1481, 0, 1479, 0, 1462, 1454, 1455, 1461, 1460,
	1456, 1482, 1459, 1453, 1451, 1452, 1444, 1445, 1446, 1447,
	1449, 1450, 0, 0, 1440, 1441, 0, 1473, 1474, 1475,
	1483, 1484, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1476, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	1466, 1467, 1468, 0, 0, 0, 0, 1442, 0, 1448,
	0, 0, 0, 0, 1479, 0, 1462, 1454, 1455, 1461,
	1460, 1456, 1482, 1459, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 1480, 0, 0, 1490, 0, 0, 0,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 1487, 0, 0, 0, 0, 0, 0,
	1457, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 1466, 1467, 1468, 0, 1478, 0, 0, 0, 0,
	1448, 0, 0, 1463, 0, 2572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 1480, 0, 0, 1490, 0, 0,
	0, 1470, 1471, 1472, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 1487, 0, 0, 0, 0, 0,
	0, 1457, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 1469,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 1488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2849, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 1479, 0, 0, 1454,
	1455, 1461, 1460, 1456, 1482, 0, 1453, 1451, 1452, 1444,
	1445, 1446, 1447, 1449, 1450, 0, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	2567, 0, 0, 1443, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 1479, 0, 1462,
	1454, 1455, 1461, 1460, 1456, 1482, 1459, 1453, 1451, 1452,
	1444, 1445, 1446, 1447, 1449, 1450, 1440, 1441, 0, 1473,
	1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 1467, 1468, 0, 0, 1442,
	0, 0, 0, 1448, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	1490, 0, 0, 0, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 1465, 1466, 1467, 1468, 0, 0, 0, 1478,
	0, 0, 1448, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 1480, 0, 0, 1490,
	0, 0, 0, 1470, 1471, 1472, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 1487, 0, 0, 0,
	0, 0, 0, 1457, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1478, 0,
	0, 0, 0, 1469, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 0, 0, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1476, 0, 0, 0, 2520, 1481, 0, 1443, 0,
	1479, 0, 1489, 1454, 1455, 1461, 1460, 1456, 1482, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 1441, 0, 1473, 1474, 1475, 1483, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 1443, 0, 1479,
	0, 1489, 1454, 1455, 1461, 1460, 1456, 1482, 0, 1453,
	1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 1465, 1466,
	1467, 1468, 0, 0, 1442, 0, 0, 0, 1448, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 1490, 0, 0, 0, 1470,
	1471, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 1487, 0, 0, 0, 0, 0, 0, 1457,
	1458, 0, 0, 0, 0, 0, 0, 1465, 1466, 1467,
	1468, 0, 0, 0, 1478, 0, 0, 1448, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 1480, 0, 0, 1490, 0, 0, 0, 1470, 1471,
	1472, 0, 0, 0, 0, 1477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 1487, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 0, 0, 1469, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 1488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 1440, 1441, 0,
	1473, 1474, 1475, 1483, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1476, 0, 0, 0,
	0, 1481, 0, 1443, 0, 1479, 0, 1489, 1454, 1455,
	1461, 1460, 1456, 1482, 1660, 1453, 1451, 1452, 1444, 1445,
	1446, 1447, 1449, 1450, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 1672, 1654, 1661, 1644, 1682, 1681, 0, 0,
	1646, 1645, 0, 0, 0, 0, 0, 0, 1692, 1693,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 0, 1454, 1455, 1461,
	1460, 1456, 1482, 0, 1453, 1451, 1452, 1444, 1445, 1446,
	1447, 1449, 1450, 1465, 1466, 1467, 1468, 0, 0, 1683,
	0, 1679, 1678, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	1490, 0, 0, 0, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 1676, 1674, 1675, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 0, 0,
	0, 0, 0, 0, 1457, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1656, 0, 1478,
	0, 0, 0, 0, 0, 0, 0, 1463, 1665, 1659,
	1667, 1669, 1670, 1671, 1666, 0, 1664, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 1688, 1689, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1680, 0, 0, 0, 1657, 0, 1658, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1673, 0,
	0, 0, 1641, 1639, 1640, 1643, 1642, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1649, 1650, 1652,
	1653, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1668, 1651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 0, 0, 1684, 1685, 1686, 1687, 0, 0, 0,
	1479, 0, 0, 1454, 1455, 1461, 1460, 1456, 1482, 0,
	1453, 1451, 1452, 1444, 1445, 1446, 1447, 1449, 1450, 0,
	0, 0, 0, 1655, 0, 0, 0, 0, 1662, 1690,
}
var sqlPact = [...]int{

	209, -1000, -1000, -1000, -1000, -1000, -1000, 236, 235, 234,
	228, 221, 219, 218, 217, -1000, -1000, -1000, 208, -1000,
	-1000, 204, -1000, 203, 201, 199, 189, -1000, 186, 184,
	182, -1000, -1000, -1000, -1000, 178, 170, 166, 52204, 1718,
	63540, 55128, 1753, 46736, 63118, 46314, 62696, 62274, 164, -1000,
	61852, 163, 162, 161, -1000, -1000, 160, 1688, 38266, 158,
	154, 152, 1908, 148, 147, -1000, 145, -1000, 8638, 1216,
	-1000, 140, 138, -1000, 6719, 377, 54290, 2165, 137, 129,
	37843, 2124, 2176, -1000, -1000, 1511, -1000, -1000, 128, 127,
	125, 114, 112, 108, 106, 105, 103, -1000, 102, 98,
	97, 90, 89, 88, 81, 79, 76, 74, 73, 72,
	70, 56, 55, 53, 52, 51, -1000, 7535, 1466, 1345,
	1341, 1336, 1335, 1334, 822, 46, 45, 44, 41, 39,
	37, 35, -1000, -1000, 33, 31, 27, 26, -1000, 25,
	23, 136, 22, 20, 19, 15, 13, 1705, 2142, 1281,
	532, 18526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 67700, 63956, 12, -41, 10,
	-1000, 2492, 807, 31499, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 474, -1000, -1000, -1000, 301, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1553, 652, -1000,
	-1000, -1000, 61430, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1701, 1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	651, -1000, 1699, 130, 1627, -1000, -1000, -1000, -1000, -1000,
	63956, -1000, -1000, 2798, 2794, 1547, 647, 61014, -1000, 1172,
	-1000, 785, 21208, -1000, 1000, -1000, 21208, 299, -1000, -1000,
	-1000, -1000, -1000, 45892, 14958, 45470, 45048, 42106, 60592, 14526,
	51788, 1068, -1000, -1000, -1000, -1000, -1000, -10, 39514, 63956,
	-1000, 298, -1000, -1000, -1000, -1000, -1000, -1000, 27570, 506,
	27113, 471, 26656, 352, -1000, -1000, -1000, -1000, 2792, 2791,
	940, 2788, 2424, 67284, 1405, 2781, 1256, 1008, 859, 2770,
	2768, 2766, 2763, 2762, 2760, 2755, 1197, 60170, 2192, 41674,
	41242, 52204, 52204, 1977, 59748, -1000, -1000, 1111, 1100, -1000,
	-1000, -1000, -1000, 2286, 2167, 2141, 51366, -1000, -1000, 2754,
	2751, 2750, 2749, 2748, 66868, 1384, 2747, 1878, 2746, 2745,
	2743, 2742, 2741, 2738, 2735, 2734, 2733, -1000, 50944, 50522,
	50100, 49678, 59326, 40810, 40378, -1000, -1000, -1000, 33183, 4708,
	58904, 34479, 52204, 52204, -1000, -1000, 28015, 168, -1000, -1000,
	-1000, 2132, -1000, 28015, 168, -1000, 63956, -1000, 2185, 1631,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1791,
	1300, 2638, 39946, 1535, 1178, 2285, 2263, 1232, 1888, 2261,
	2244, 2233, 2232, 2209, 1372, 1909, 229, 18069, 1238, 1227,
	2206, 2203, 2663, 1682, 44626, 2731, 2729, 2456, 2195, 2130,
	-1000, -1000, -1000, -1000, 1188, -1000, -1000, 47152, -1000, -1000,
	964, -1000, -1000, 964, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1053, 66036, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1287,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1704, -1000,
	1508, -1000, -1000, 1129, 2142, 1852, 2447, 2447, 2447, 2500,
	452, 436, -1000, 136, -1000, -1000, 73940, -1000, -1000, 28015,
	28015, 28015, 28015, 28015, 1526, -1000, 643, -1000, -1000, 679,
	-1000, 642, 581, -1000, -1000, -1000, -1000, -1000, -1000, 640,
	2658, -1000, 906, -1000, -1000, -1000, -1000, 2586, -1000, 17167,
	-1000, -1000, -1000, 429, 639, 28015, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 288, 798, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 556, 1437,
	554, 554, 554, -1000, -1000, 852, -1000, -1000, -1000, 319,
	552, 297, 551, -1000, -1000, -1000, -1000, 2175, 635, 627,
	-1000, 624, 620, 619, -1000, -1000, -1000, 618, 617, 616,
	615, 613, 612, 611, 610, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 851, -1000, 609, 608, 607, 606, 604, 601,
	599, 598, 595, -1000, -1000, -12, 63956, -1000, 474, -12,
	-1000, -1000, 585, -1000, 21653, 21653, 21653, -1000, -1000, 1685,
	28015, -1000, 1987, -1000, 472, -8, 734, 32339, -1000, 30640,
	734, 645, 35741, -1000, 2129, -1000, -1000, 582, 271, -1000,
	-1000, 2118, 63956, 15388, 63956, 52204, 52204, -1000, 2375, 28015,
	-1000, -1000, 39098, 63956, 52620, 2544, 74300, 39098, 63956, 2169,
	-1000, -1000, -1000, 63956, -1000, 28015, -1000, 2543, 1168, -23,
	-1000, -1000, -1000, -1000, -1000, -1000, 1861, 1847, 959, 1745,
	1150, -1000, 21208, 2416, -1000, -1000, -1000, 270, 15388, -1000,
	1864, 2339, 1081, -1000, 1744, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1333, 2338, -1000, 2087, 2337, 1280, -1000,
	-1000, 828, 2336, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1505, -1000, -1000, 2441, -1000, -1000, 2630, 2335,
	-5, -1000, -1000, 33619, 39514, -15, -1000, -1000, -40, -1000,
	14094, 73940, -1000, -1000, -1000, 73940, 780, -1000, -1000, 2328,
	-1000, 73940, 779, -1000, -1000, 2327, -1000, -1000, -1000, 2728,
	-1000, 2727, 1818, 2726, 2719, 2717, -1000, 1257, 1395, 2716,
	-1000, 2715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49256,
	48834, 858, -1000, 1684, -1000, -1000, 48412, 815, 1817, -1000,
	-1000, 1813, -1000, 863, -1000, 2714, 58482, 1996, 815, 1805,
	-1000, -1000, -1000, -1000, -1000, 52204, -1000, 52204, -1000, 52204,
	-1000, 1173, -1000, 66452, -8, -1000, -1000, -1000, -1000, -1000,
	2323, 2713, 2712, 2711, -1000, 63956, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 179, 2322, -1000, -1000, 179,
	2321, -1000, 179, 2320, -1000, 173, 2319, -1000, -1000, 1659,
	2318, -1000, -111, 2314, -1000, -1000, -111, 2305, -1000, -20,
	-1000, -1000, -1000, 807, -1000, 32761, 58060, 42536, 800, 674,
	37421, 73940, -1000, 33619, 73940, -1000, 42536, 48412, -1000, 57638,
	47996, -1000, -1000, 1116, 1914, -1000, -1000, -1000, -1000, 42536,
	42536, 42536, -1000, 57216, -1000, 1522, 1371, 2458, 52204, -1000,
	1397, -1000, -1000, -1000, 2471, 2168, -1000, 38682, 53868, -1000,
	53452, -1000, 53036, -1000, 52204, -1000, 52204, -1000, 2709, 2707,
	2705, -1000, 2702, 2466, 73940, 2460, -1000, 2230, 1354, 1348,
	63956, -1000, -1000, 63956, -1000, 63956, -1000, -1000, -1000, 1858,
	-1000, -1000, -1000, -1000, 52204, -1000, -1000, -1000, -1000, -1000,
	-1000, 2166, -1000, 1388, -1000, 1108, -1000, -1000, 181, -1000,
	-1000, -23, -1000, 66036, -1000, -1000, 2142, 1852, -1000, 63956,
	-1000, -1000, 1906, -1000, 1159, -1000, 2142, 1734, 1937, 26199,
	1927, 28015, 136, -1000, -1000, 136, 136, 20763, -1000, -1000,
	74300, 74300, 15388, 1078, 28015, 28015, 28015, 28015, 28015, 28015,
	28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015,
	28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015,
	28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 1880,
	28015, 1050, 28015, 28015, 28015, 28015, 1453, -1000, -1000, 1469,
	497, 1670, -1000, 2574, 2574, 2574, 4788, 4788, 571, 2701,
	679, -1000, 28015, -1000, 168, 28015, 15820, -1000, 2648, 1226,
	-1000, -1000, 436, 9548, 1758, -1000, 430, 16277, -1000, -1000,
	-1000, 17167, 581, 25742, 28015, 841, 73940, 13664, 2148, 2035,
	-1000, 2647, -1000, -1000, 2595, -1000, -1000, -1000, -1000, 2595,
	1074, 1073, 2643, -1000, 2595, 2595, 580, 749, 729, 720,
	719, 708, 28015, 28015, 28015, 28015, 28015, 28015, 28015, 28015,
	-1000, 25297, 24840, 24383, 29350, 23926, 28015, 17612, 23469, 23012,
	63956, -12, 2541, 28015, 122, -1000, 72659, -1000, 122, 122,
	575, -21, 73940, 1903, 1903, 31919, 1815, 1549, 1549, 1549,
	-1000, 565, 666, 9, 5, 4, -1000, -1000, 0, -1,
	734, 10638, 55544, 1554, 734, 734, 251, 273, 427, 30220,
	1987, 55544, -1000, -1000, 52204, 564, 15820, 15388, 1141, -22,
	249, 1943, 1936, 1935, -1000, 1236, -30, 1048, -38, -1000,
	486, -44, -1000, 1087, -1000, -1000, -1000, -1000, 195, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 850, 563, 562, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 556, 1437, 554, 554,
	554, -1000, -1000, -1000, 319, 552, 297, 551, -1000, -1000,
	-1000, -1000, -1000, -1000, 2116, -40, 52620, 753, -47, 962,
	-23, -1000, 964, -1000, 1678, -1000, -1000, -1000, -1000, -1000,
	-1000, 1119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2654,
	-1000, 2580, -1000, -1000, 2620, -14, -1000, -1000, 15388, -1000,
	-32, 1332, -1000, 44204, 2462, 2457, 2431, 1171, -1000, 1149,
	2499, 47152, 2522, 2528, 473, -1000, 2108, -1000, -1000, 783,
	1321, 1036, 47152, 2087, -1000, 74300, -1000, 1984, 2498, 1153,
	1148, 1153, 1153, 1126, -1000, 47152, 1035, 1467, 42536, -1000,
	1034, -1000, -33, 2521, 2524, 110, -1000, 2095, 1030, -1000,
	-1000, 52204, 15388, 732, -1000, 42536, -15, 39514, 63956, 247,
	-1000, 28015, 168, 28015, 168, -1000, -1000, 2304, -1000, -1000,
	-1000, 2700, 1374, 1873, -1000, -1000, -1000, 550, 1799, 2087,
	1795, -1000, -1000, 47574, 2085, 63956, 1947, -18, 52204, -1000,
	-1000, 1461, -1000, 2303, 2299, 623, 2699, -1000, 1671, 1793,
	-1000, -1000, -1000, 65620, 1091, 2295, 834, 469, 2539, 469,
	36581, -1000, 63956, -1000, 63956, -1000, -1000, -1000, 2698, -1000,
	52204, -1000, -1000, 52204, -1000, 52204, -1000, 52204, -1000, 52204,
	52204, -1000, 63956, 42536, 42536, 42536, 3764, 43372, -49, 424,
	-1000, 56800, 63956, 876, 43788, 63956, 2403, -198, -1000, 800,
	800, 732, -1000, 732, -1000, 52204, 2161, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2697, 2696, -1000, 812, 52204, 63956,
	52204, -1000, -1000, 63956, -1000, 63956, -1000, -1000, 63956, -1000,
	63956, -1000, 63956, -1000, -1000, -1000, -1000, -1000, -1000, 168,
	28015, 1208, -1000, 2158, -1000, 2153, -1000, 30, -1000, -1000,
	-1000, -1000, 1425, 52204, 52204, 63956, 52204, -1000, 47152, -1000,
	-1000, 2142, -1000, 897, -1000, -1000, -1000, -1000, -1000, 73940,
	-1000, 468, -1000, -1000, 73940, 1387, 1950, -1000, 1950, -16,
	-1000, 72296, 1898, 52204, -1000, -1000, -1000, -1000, -1000, 782,
	505, 505, 1041, 1041, 1041, 1041, 2598, 4203, 287, 3693,
	3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 5492, 413,
	413, 5492, 5492, 5492, 5492, 5492, 413, 413, 413, 3955,
	3955, 3955, 4788, 74256, 5887, 28015, 28015, 1015, 1455, 497,
	5722, 28015, 6058, 6058, 6058, 6058, -1000, 1534, -1000, -1000,
	-1000, -1000, 2072, 549, 29350, 29350, -1000, -1000, -1000, -1000,
	16722, 28015, -1000, -1000, -1000, -1000, 22555, -1000, -1000, 71729,
	-244, 423, -195, -13, -1000, 28015, 28015, 28015, 418, -1000,
	415, -1000, -1000, 1012, -1000, 1009, 1007, 1006, -1000, 548,
	245, 28015, 63956, -1000, 69395, 664, -197, -1000, -50, 1134,
	-1000, 28015, 238, -1000, 1529, 546, 545, 414, -52, -1000,
	412, 776, 748, 411, 397, 395, 28015, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 73861, 69291, 69006,
	68902, 9223, 68616, 68539, -58, 394, -1000, 2071, -195, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 393, -1000, 391, -1000,
	73545, -195, 390, 4722, -1000, 29350, 29350, 29350, -1000, 386,
	-1000, 72377, -1000, 73466, 22110, 22110, 22110, 384, 73103, 28015,
	-195, -60, -1000, -61, -1000, -1000, 544, -63, 834, 21653,
	31076, 15388, -1000, 834, 834, 28015, -1000, 28015, 1920, -1000,
	-1000, -1000, 1919, 1440, 1903, 31919, -1000, -1000, -1000, -1000,
	55544, 693, 734, -1000, -1000, -1000, -1000, -1000, 55544, -1000,
	2586, 2080, -1000, -1000, -1000, 63956, 474, -1000, 55544, 55544,
	15388, 734, -1000, 382, 34899, -13, 230, -1000, -1000, 15388,
	1994, 1994, 1994, -1000, -1000, 63956, 2555, -1000, 1450, -1000,
	74300, -1000, 675, 953, -1000, 2609, 543, -1000, 2595, 2595,
	63956, 93, 21208, -1000, 964, -1000, -1000, 1255, -1000, 1379,
	-1000, 1071, -1000, -1000, -1000, 21208, -1000, 1798, 63956, 63956,
	52204, -1000, -1000, 1783, 65204, 1781, 74300, 63956, -1000, -1000,
	542, 541, 1894, 1889, 63956, 63956, 64788, 64372, 63956, 1451,
	28015, 1555, 1654, 168, 168, -1000, -1000, 168, 540, 1032,
	52204, 52204, 52204, 1277, -1000, -1000, -1000, -1000, -1000, 52204,
	-1000, -1000, 2605, -1000, 1153, -1000, -1000, -1000, 1153, 2087,
	1269, 52204, 42536, 824, 63956, 1470, 168, 168, -1000, -1000,
	168, 534, 15388, 1446, -1000, 1992, -1000, -66, -1000, -1000,
	13234, 73940, -1000, 73940, -1000, 63956, -1000, 854, 63956, 43788,
	795, 2294, -1000, 2087, 2282, 474, -1000, -1000, 36161, -40,
	800, 42536, 52204, -18, 42536, 42536, 42536, 2695, 533, 2694,
	-1000, 52204, 2279, 1668, 1778, 2350, 707, 63956, 1564, -1000,
	28015, 1402, -1000, 35321, 866, 63956, 1205, 85, -1000, -1000,
	-1000, 17, 63956, -1000, 2693, -1000, -1000, 179, 179, 179,
	-1000, 173, 1659, -1000, -111, -111, -1000, -1000, 3764, 800,
	-19, 531, -1000, 724, 721, 34049, 42536, -71, -1000, -1000,
	-1000, -1000, -1000, 52204, 63956, 657, 1978, 63956, -74, -1000,
	196, 530, -1000, 800, 33619, 2066, -1000, -1000, 823, -1000,
	1099, -1000, -1000, -1000, -1000, -1000, -1000, -40, -40, -1000,
	-1000, -1000, -1000, 73940, -1000, 1207, 1200, 63956, -1000, 15388,
	63956, 52204, 15388, 52204, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1387, -1000, 28015, -1000, -1000, -1000, 20763, -1000, -1000,
	-1000, 52204, -6, 28015, 28015, 5436, 5151, 28015, 29350, 29350,
	-1000, 28015, 4799, -1000, -1000, -1000, -1000, -1000, 2065, 529,
	28015, 74300, 4979, 4186, -1000, 378, 10180, 5492, -1000, 28015,
	-1000, 370, 20318, -1000, 72740, -39, -76, -1000, 2653, 1800,
	1680, 1330, 1198, 2600, 12804, -195, -77, -1000, -1000, 672,
	-1000, 2346, -1000, 28015, 73022, 12374, -1000, 37001, 837, 1564,
	-1000, -1000, 2595, 760, -1000, -1000, -1000, 760, -1000, 71625,
	74300, 74300, 28015, 28015, -1000, 28015, 28015, 28015, -1000, -1000,
	28015, -1000, -1000, 2063, 28015, -1000, 74300, 74300, 29350, 29350,
	29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350,
	29350, 29350, 29350, 29350, 29350, 29350, 29350, 1870, 29350, 2572,
	2572, 2572, -1000, 2054, 2063, 28015, 28015, 74300, 366, 364,
	362, -1000, 28015, -195, -1000, -1000, 3764, -1000, 2034, -1000,
	-161, -1000, 1987, -1000, -1000, 2034, 2034, -83, 73940, 31919,
	31919, -1000, 528, 28015, 1917, -1000, 663, -1000, -84, -1000,
	55544, -1000, 662, -238, -1000, 714, -1000, -1000, -1000, -1000,
	474, -1000, -1000, -1000, 94, 55544, -1000, -85, -1000, 2538,
	361, 15388, -1000, -1000, -1000, -1000, -1000, -1000, -40, 1619,
	2652, -1000, 2597, 670, 661, 358, 2595, 354, 345, -40,
	63956, -1000, -23, -1000, -1000, -1000, 28015, -1000, -1000, 2448,
	1002, 1001, -1000, 2271, -1000, 1770, -1000, 870, -1000, 1290,
	-1000, 28015, 28015, 527, 526, 1406, 2689, 2269, 1659, 2268,
	1659, -1000, -1000, 790, -1000, 73940, 525, 523, -1000, -32,
	1291, 818, -1000, -1000, 28015, 28015, 56380, -1000, 2441, 2441,
	-7, -1000, 998, -1000, -1000, -1000, 2087, 996, -1000, -1000,
	1456, -1000, -1000, 816, -1000, -1000, 28015, -1000, -33, 995,
	800, 2058, -1000, -1000, 2688, 2684, 2682, 343, -86, -35,
	74300, 2537, 1690, 63956, 52204, 52204, 2535, 746, -1000, 2586,
	-1000, -1000, -1000, -1000, 815, -1000, -1000, 2680, -1000, 875,
	15388, 52204, 2267, 1868, 707, 42956, -1000, 815, 1937, 73940,
	-1000, 1205, 19861, 2434, -91, -1000, -1000, -1000, 834, 36581,
	31919, 28015, 2678, -93, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 55964, 55964, 42536, 42536, 42536, 800, 63956, 63956,
	43788, 2676, 522, 63956, 63956, 520, -1000, 63956, 63956, 2675,
	42536, -1000, -1000, 168, -1000, 1569, 52204, -1000, -1000, 812,
	-1000, -1000, 1498, 1737, 1498, 1584, 71340, -1000, 2445, 15388,
	2533, 6058, 28015, 28015, 1360, 3784, 862, 6058, 28015, 28015,
	74300, 8378, -94, 28015, 28015, -1000, 28015, 660, 73940, 2601,
	28015, 339, 338, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 336, -1000, -1000, -1000, -1000, -1000, 73940, 28015,
	86, -1000, -1000, -1000, 68116, -1000, 28015, 334, 332, -1000,
	-1000, -1000, 331, 325, 9864, 6288, 71236, 70951, 70847, 73940,
	2054, 73940, -1000, -1000, 687, 687, 1120, 1120, 1120, 1120,
	2572, 597, 819, 980, 268, 268, 268, 846, 638, 638,
	268, 268, 268, 2057, 1885, 519, 3928, -1000, -1000, 73940,
	73940, 324, -1000, -1000, -1000, -195, 321, 2022, 2494, -1000,
	31919, 2022, 2022, -1000, -1000, 1440, 63956, 73940, 31919, -8,
	-1000, 2586, -1000, -1000, 2080, -1000, 11080, -1000, 15388, -1000,
	-1000, 34899, -1000, 518, -1000, 2, -1000, -1000, 659, 2672,
	669, -1000, 320, -1000, -1000, -40, 73940, 63956, 63956, 63956,
	2266, -1000, 1975, -1000, 70562, -99, -1000, 72296, 28015, 63956,
	-1000, 1408, 1938, 931, -1000, 63956, -1000, 63956, -1000, -1000,
	63956, 63956, 52204, 2248, -101, 73940, -42, -1000, 712, -1000,
	-1000, 11944, 52204, 52204, 42536, 2216, -102, 15388, -1000, 42536,
	-1000, -1000, -1000, 1980, -1000, 54706, 1544, 168, -1000, 2670,
	516, 2087, 168, -1000, 1568, -1000, 655, -1000, -1000, 514,
	63956, 1665, 513, 15388, 1859, 707, 42956, -1000, 1091, 1205,
	-1000, -1000, -59, -1000, 517, 168, 1564, -1000, -108, 73940,
	-1000, 710, -1000, -109, -1000, -1000, 317, -1000, 2402, 2401,
	-1000, -1000, 28015, 509, 508, 63956, 2400, -1000, -1000, -112,
	-1000, 1693, -1000, -1000, -1000, -1000, 15388, 1314, -1000, -1000,
	-1000, -1000, 2445, 6058, 6058, 28015, 28015, 28015, 6058, 8378,
	-114, -1000, 6058, 6058, -195, -1000, -1000, 72740, -1000, -1000,
	-1000, 73940, 11514, 1499, -1000, 70458, -1000, -1000, -1000, -1000,
	28015, 28015, -1000, -1000, -1000, -1000, -1000, 29350, 2052, 504,
	74300, -1000, -1000, 820, 28015, 28015, 1987, 820, 820, -1000,
	-115, -1000, 734, -1000, -1000, -1000, 2586, 2, -1000, 2669,
	15388, 668, -1000, 2668, -1000, -1000, -1000, -1000, 63956, -1000,
	63956, -1000, 15388, 63956, 2061, 1757, -1000, -1000, 1886, 502,
	29350, 52204, 769, 2051, 1429, 28015, -1000, -121, -126, 1756,
	-1000, -1000, 1755, 28015, -1000, 74300, 1659, 1659, -127, -132,
	-1000, 28015, 991, 63956, 19416, 2441, -1000, -1000, -1000, 28015,
	990, -1000, -111, 1470, 2007, -1000, -1000, -1000, -1000, 1884,
	-1000, -1000, 63956, 1882, 805, -1000, 43788, 795, -1000, -1000,
	784, -1000, 28015, -1000, 52204, 28015, 1664, -1000, 707, 42956,
	-1000, 2350, -1000, 2361, 63956, 2429, -1000, 1937, 497, -1000,
	800, 494, 491, -140, 28015, 28015, -141, 490, 800, -124,
	-1000, 758, 754, -1000, -1000, 52204, 52204, -1000, 6058, 6058,
	6058, -1000, 310, -1000, -1000, 1564, 2493, -1000, 70173, 70069,
	4868, 29350, 74300, -142, -1000, 63956, 73940, -195, -1000, -1000,
	-1000, 55544, 654, -1000, 2667, -1000, -1000, 2240, -1000, -1000,
	-1000, 63956, 1767, -1000, -1000, 28015, 3928, 489, 28015, -1000,
	-1000, 1965, 2081, 1980, 488, -1000, -1000, -1000, -1000, 1368,
	-1000, -1000, 73940, 2470, -1000, -1000, 487, 484, 73940, 483,
	704, 2047, -1000, -1000, 73940, 482, 795, -1000, 1516, 1544,
	481, -1000, -1000, -1000, 1907, 306, 2534, 784, -1000, 2581,
	-1000, -147, 875, -149, 52204, 42956, -1000, 1868, 1067, -150,
	63956, 1205, -1000, -1000, 42536, 42536, 1429, -152, -155, -1000,
	42536, -1000, 1693, -1000, 63956, -1000, 63956, -1000, -1000, -1000,
	1393, 28015, -1000, -1000, 4868, -160, -1000, -139, -1000, 2529,
	-1000, -1000, -1000, -1000, -1000, 2258, 69784, 1839, 63956, 69680,
	2077, -1000, -1000, 1470, 63956, 52204, 873, 15388, 1498, 1498,
	28015, 18971, 1515, 28015, -1000, 52204, 63956, -1000, 2397, 1980,
	168, -1000, -1000, 1429, 480, 1429, 476, -1000, 1859, 1167,
	-1000, 834, -1000, -1000, -165, -167, 1980, 1429, -1000, -173,
	-1000, -174, -176, 305, 28905, 28905, 28905, -195, -1000, 63956,
	475, 2236, -1000, 1594, 1370, 303, 912, -1000, -1000, 2051,
	-185, 474, -1000, 28015, -1000, -188, -1000, 865, -190, -1000,
	864, -196, -1000, 2046, -1000, -202, 470, -204, -1000, -1000,
	-1000, 1470, 805, 1980, 28015, 1980, 28015, -1000, 36581, -1000,
	800, 800, 1470, 1980, 800, -1000, -1000, -1000, 2262, -1000,
	29780, 1591, 1241, 72014, 2262, 2262, -1000, -1000, 63956, -1000,
	1648, 1646, 1213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1839, 73940, -1000, 1498, 2006, -1000, 1498, 2043, -1000,
	1502, -1000, 63956, -1000, 63956, 795, -1000, 1470, -207, 1470,
	-210, -193, -1000, -1000, -1000, 1470, -1000, -1000, 1383, 2532,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2379,
	-1000, 896, 1582, 1582, 1594, -1000, 461, -1000, 458, -1000,
	-215, -1000, -1000, 832, 1429, 832, 1429, -1000, -1000, 1239,
	-1000, -1000, 1560, 28460, -1000, 2545, -1000, -1000, 1899, -1000,
	2051, 28015, 28015, 1571, -1000, 2662, 1980, -1000, 1980, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -217, -218, -1000, -1000,
	-1000, -1000, 1470, 1470, 1470, 967, 832, 832, -1000, 456,
	-1000, -1000, 28015, -233, 1470, -1000,
}
var sqlPgo = [...]int{

	0, 3330, 3329, 3328, 3327, 3324, 3323, 3322, 3320, 3319,
	3318, 3313, 3312, 3311, 3307, 3305, 3304, 3303, 3301, 3300,
	3296, 3292, 3291, 3288, 3284, 3281, 3280, 3279, 3277, 3276,
	3275, 3273, 3272, 3270, 3269, 3267, 3266, 3264, 3260, 3258,
	3257, 3256, 3254, 3251, 3250, 3248, 3247, 3245, 30, 3240,
	3239, 3237, 3228, 3225, 3224, 3222, 3221, 3220, 3218, 3217,
	3213, 3211, 3210, 3204, 3203, 3202, 33, 3201, 213, 3198,
	3190, 3188, 3185, 3184, 3180, 3179, 3177, 3176, 3174, 212,
	3171, 112, 3170, 3167, 3166, 3165, 3163, 210, 3159, 3158,
	3157, 3156, 3155, 3154, 3153, 3152, 122, 3151, 3150, 102,
	3149, 3146, 3141, 3140, 3138, 3137, 3136, 3135, 3132, 3130,
	187, 3124, 207, 3118, 3117, 3116, 3115, 3114, 3113, 3112,
	3110, 3109, 3108, 3102, 3099, 3098, 3091, 3090, 3089, 3088,
	3087, 3086, 3084, 3082, 3080, 3079, 3075, 3073, 3072, 221,
	147, 3067, 3063, 205, 204, 3060, 3059, 124, 120, 71,
	3054, 113, 135, 215, 6572, 202, 3052, 3050, 3048, 148,
	3047, 3045, 76, 137, 144, 128, 131, 152, 3043, 3042,
	66, 53, 29, 27, 98, 3041, 3040, 3038, 2423, 80,
	3035, 3033, 198, 185, 3032, 1576, 3031, 218, 89, 107,
	57, 99, 3030, 119, 25, 3029, 127, 50, 3028, 121,
	68, 28, 5262, 7282, 3027, 117, 222, 78, 184, 175,
	160, 183, 181, 130, 1148, 3026, 193, 3025, 58, 155,
	3021, 3003, 2998, 54, 149, 73, 2994, 9, 3, 143,
	12, 84, 13, 2993, 14, 2989, 2986, 2980, 2979, 56,
	125, 2977, 110, 70, 2976, 19, 2975, 151, 165, 2970,
	170, 91, 2967, 2965, 195, 157, 154, 20, 171, 2964,
	2963, 2962, 2961, 2959, 95, 21, 96, 2957, 2956, 106,
	174, 2955, 61, 132, 67, 105, 214, 87, 173, 85,
	169, 129, 178, 2953, 2952, 2951, 163, 2947, 2945, 141,
	161, 2944, 2943, 217, 36, 55, 182, 35, 2942, 2941,
	118, 2940, 156, 2939, 2937, 2935, 206, 140, 164, 6,
	94, 109, 26, 8, 179, 111, 90, 82, 2934, 2995,
	1406, 327, 2933, 114, 83, 52, 79, 123, 197, 43,
	2932, 2931, 1167, 2930, 2928, 2926, 2925, 142, 2924, 2923,
	2921, 104, 37, 69, 2920, 116, 63, 10, 208, 203,
	92, 162, 166, 191, 2919, 139, 2918, 38, 100, 2916,
	153, 190, 93, 2915, 201, 136, 2914, 199, 2913, 2912,
	2911, 2909, 74, 2908, 2906, 115, 2905, 108, 2904, 2903,
	145, 126, 192, 97, 31, 2902, 72, 86, 2900, 150,
	32, 2898, 289, 49, 0, 5976, 5057, 5905, 2863, 1042,
	2862, 159, 101, 2861, 2860, 2859, 75, 2858, 62, 2857,
	2854, 40, 2853, 17, 5, 7, 18, 15, 1102, 994,
	2850, 2845, 88, 103, 133, 2844, 216, 180, 2842, 2841,
	2839, 64, 2838, 23, 2837, 24, 2835, 2834, 34, 1,
	16, 2832, 2831, 189, 2829, 186, 2828, 2826, 2552, 2824,
	196, 65, 2822, 138, 167, 2820, 2819, 2818, 2816, 194,
	2815, 200, 2812, 11, 22, 4, 2811, 2809, 2808, 158,
	2, 2414, 2807, 2806, 60, 2803, 2801, 146,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 450,
	450, 19, 31, 20, 32, 13, 451, 451, 451, 451,
	24, 21, 33, 22, 22, 22, 150, 150, 150, 150,
	18, 18, 27, 27, 164, 164, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 449, 449, 166,
	166, 165, 161, 161, 452, 452, 167, 167, 167, 169,
	169, 37, 37, 95, 95, 95, 96, 96, 97, 97,
	151, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	83, 83, 392, 392, 393, 393, 146, 146, 147, 147,
	147, 147, 148, 148, 149, 149, 149, 51, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 40, 40, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 49, 49, 49, 49, 140, 140, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 457, 457, 458,
	458, 459, 459, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 63, 63,
	241, 241, 217, 217, 64, 64, 64, 65, 65, 66,
	66, 53, 53, 445, 445, 255, 255, 359, 359, 68,
	68, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 70, 70, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 74, 74, 74, 256, 256, 79, 79, 79,
	79, 79, 79, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 361, 361,
	80, 80, 80, 330, 330, 84, 84, 84, 287, 287,
	85, 85, 85, 85, 85, 86, 86, 86, 86, 98,
	98, 98, 98, 448, 448, 248, 248, 182, 182, 182,
	182, 91, 91, 91, 91, 92, 92, 92, 93, 93,
	145, 145, 104, 104, 104, 104, 104, 103, 103, 103,
	103, 103, 103, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 48, 48, 106,
	106, 453, 453, 108, 105, 105, 105, 107, 107, 107,
	107, 109, 110, 110, 110, 110, 110, 110, 111, 111,
	386, 386, 263, 263, 384, 384, 400, 400, 385, 385,
	221, 221, 221, 221, 221, 222, 222, 222, 391, 391,
	391, 391, 391, 391, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 130, 130, 130, 139, 139,
	139, 139, 139, 139, 139, 132, 132, 132, 121, 121,
	113, 113, 113, 113, 113, 117, 117, 117, 117, 117,
	114, 114, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 293, 293, 293,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	135, 135, 135, 135, 135, 135, 344, 344, 131, 131,
	131, 131, 134, 134, 134, 134, 277, 277, 128, 128,
	128, 129, 129, 129, 133, 133, 136, 136, 136, 136,
	116, 116, 116, 462, 462, 462, 137, 137, 127, 127,
	138, 138, 138, 138, 138, 138, 138, 138, 126, 126,
	126, 126, 119, 446, 446, 443, 443, 443, 443, 443,
	443, 443, 444, 444, 447, 447, 89, 89, 89, 58,
	58, 463, 463, 463, 59, 59, 464, 464, 464, 461,
	461, 461, 461, 461, 461, 461, 461, 223, 223, 224,
	224, 311, 311, 311, 311, 311, 227, 227, 168, 168,
	168, 230, 231, 231, 228, 228, 229, 229, 229, 233,
	233, 232, 235, 235, 234, 310, 407, 407, 409, 409,
	409, 409, 409, 409, 409, 411, 411, 411, 411, 411,
	411, 411, 411, 411, 411, 405, 405, 405, 406, 401,
	401, 402, 402, 402, 402, 225, 225, 226, 226, 226,
	226, 403, 404, 246, 246, 347, 408, 408, 410, 410,
	412, 465, 465, 465, 465, 465, 465, 466, 466, 309,
	309, 239, 239, 413, 413, 413, 413, 414, 414, 414,
	414, 414, 417, 416, 415, 415, 415, 415, 415, 340,
	340, 340, 62, 62, 62, 274, 274, 273, 273, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 142, 142, 60, 60, 60, 174, 174,
	57, 57, 57, 468, 468, 61, 61, 61, 469, 469,
	67, 67, 67, 67, 67, 67, 56, 56, 56, 56,
	56, 470, 470, 294, 294, 292, 292, 245, 245, 346,
	186, 186, 162, 162, 162, 23, 25, 25, 17, 17,
	34, 34, 35, 35, 30, 30, 454, 454, 455, 455,
	90, 90, 94, 94, 94, 102, 102, 141, 141, 141,
	141, 141, 141, 141, 38, 38, 38, 38, 50, 50,
	50, 50, 100, 472, 472, 472, 101, 101, 471, 471,
	181, 181, 181, 181, 183, 183, 306, 306, 307, 307,
	473, 473, 308, 308, 308, 308, 176, 175, 177, 177,
	55, 55, 55, 170, 170, 171, 171, 172, 172, 173,
	173, 474, 474, 87, 87, 87, 144, 144, 216, 216,
	302, 302, 302, 240, 240, 191, 191, 305, 305, 303,
	303, 303, 303, 272, 272, 272, 143, 143, 253, 253,
	265, 265, 266, 266, 356, 356, 267, 99, 99, 154,
	154, 152, 152, 152, 152, 152, 152, 159, 159, 159,
	159, 159, 153, 153, 153, 155, 155, 155, 155, 155,
	155, 155, 158, 158, 158, 158, 160, 160, 160, 157,
	157, 424, 424, 424, 426, 426, 427, 423, 423, 425,
	425, 467, 467, 276, 276, 276, 237, 238, 236, 236,
	243, 243, 242, 244, 244, 345, 345, 345, 270, 270,
	270, 270, 297, 297, 295, 295, 296, 296, 298, 298,
	299, 299, 299, 300, 300, 301, 301, 269, 269, 326,
	326, 156, 156, 156, 250, 250, 250, 251, 251, 317,
	317, 317, 317, 317, 317, 318, 318, 316, 316, 316,
	316, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	349, 349, 252, 252, 350, 304, 304, 441, 441, 441,
	442, 442, 343, 343, 351, 351, 351, 351, 351, 351,
	341, 341, 342, 342, 357, 358, 358, 280, 280, 280,
	280, 278, 278, 281, 281, 281, 281, 279, 279, 352,
	352, 352, 352, 271, 271, 353, 353, 353, 354, 312,
	313, 313, 362, 362, 362, 362, 362, 377, 249, 249,
	249, 249, 249, 475, 475, 363, 363, 363, 363, 363,
	363, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 367, 367, 367, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 376, 376, 376, 376, 376, 368,
	368, 373, 373, 374, 374, 374, 369, 370, 375, 375,
	375, 375, 476, 476, 379, 379, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 365, 365, 365, 372, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 288, 288, 289, 289, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 321, 321, 321, 321, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	418, 418, 418, 418, 418, 418, 418, 418, 421, 421,
	422, 422, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 428, 428, 429, 429, 431, 431, 432, 432, 433,
	434, 434, 434, 435, 436, 436, 430, 430, 437, 437,
	437, 437, 438, 438, 439, 439, 439, 439, 439, 440,
	440, 440, 440, 440, 332, 332, 333, 333, 339, 339,
	339, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 184, 184, 184,
	184, 184, 261, 261, 259, 259, 259, 262, 262, 260,
	260, 258, 258, 257, 257, 329, 329, 327, 327, 331,
	331, 282, 282, 378, 378, 378, 378, 378, 378, 378,
	283, 283, 283, 291, 284, 284, 285, 285, 285, 285,
	285, 323, 324, 286, 286, 286, 325, 325, 334, 338,
	338, 337, 336, 336, 335, 335, 314, 314, 315, 315,
	268, 268, 477, 477, 264, 264, 355, 355, 355, 355,
	219, 219, 254, 254, 218, 218, 211, 211, 212, 212,
	212, 212, 247, 247, 380, 380, 380, 381, 382, 383,
	328, 201, 200, 188, 189, 199, 198, 197, 187, 190,
	194, 195, 196, 192, 193, 207, 206, 205, 203, 204,
	360, 213, 213, 214, 214, 214, 215, 215, 215, 215,
	185, 185, 208, 208, 209, 210, 210, 202, 202, 202,
	178, 178, 178, 179, 179, 180, 180, 390, 390, 388,
	388, 388, 389, 389, 389, 389, 387, 387, 387, 387,
	387, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 396, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 399, 399,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 3, 1, 3,
	1, 6, 4, 9, 7, 12, 12, 12, 9, 2,
	7, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 5, 1, 2,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 3,
	5, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	2, 0, 1, 3, 3, 1, 0, 1, 2, 2,
	1, 6, 5, 1, 2, 1, 3, 2, 0, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 6, 3, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 4, 3, 4, 4, 3, 4, 4,
	5, 3, 5, 5, 5, 3, 3, 3, 4, 3,
	4, 3, 5, 4, 5, 3, 4, 5, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	3, 4, 3, 1, 1, 1, 2, 3, 2, 3,
	6, 6, 7, 9, 7, 9, 3, 4, 5, 5,
	5, 3, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 10,
	13, 0, 2, 3, 9, 12, 0, 2, 3, 1,
	1, 2, 2, 2, 2, 1, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 4,
	2, 5, 5, 5, 2, 8, 9, 6, 5, 3,
	1, 5, 8, 5, 11, 3, 0, 2, 4, 3,
	3, 1, 5, 1, 3, 1, 2, 0, 1, 2,
	2, 0, 1, 3, 3, 2, 2, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 5, 8, 4, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 1, 4, 2, 4, 7, 3, 3, 0,
	3, 6, 3, 1, 1, 8, 7, 5, 0, 1,
	6, 7, 6, 5, 3, 4, 14, 17, 14, 17,
	4, 0, 2, 2, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 4,
	2, 3, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 5, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 5, 6, 4, 6, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 1, 2, 4,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 5, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 3, 3,
	3, 0, 1, 4, 2, 2, 2, 2, 2, 3,
	2, 2, 3, 0, 4, 1, 1, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 1, 2, 3, 2, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 459, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 82, 68,
	123, 104, 109, 156, 288, 317, 327, 311, -107, -108,
	346, -38, -50, -101, -100, -4, -10, 27, 39, -40,
	-41, -42, 53, -60, -57, -54, -63, -456, 84, -425,
	-71, -74, -76, -460, 114, 129, 173, 280, -92, -93,
	313, 315, 130, -45, -44, 124, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 350, 396, 40,
	359, 69, 117, 321, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -424, -72, -73, -75, -77, -78, 312, -155, -153,
	456, 409, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 427, 435, -158, -156, -157,
	-160, 334, 417, 373, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, -203, -208, -209, -210, -202, -178,
	-396, -399, 4, -394, -397, 135, 181, 248, 21, 22,
	23, 24, 25, 27, 37, 38, 39, 40, 43, 45,
	46, 49, 50, 51, 52, 53, 54, 57, 62, 67,
	68, 69, 70, 71, 72, 77, 74, 75, 76, 79,
	81, 82, 83, 86, 87, 95, 96, 97, 98, 99,
	100, 104, 107, 106, 109, 112, 113, 114, 116, 118,
	119, 121, 123, 124, 127, 125, 379, 126, 128, 129,
	130, 131, 141, 142, 143, 145, 146, 148, 150, 154,
	155, 157, 161, 163, 164, 165, 166, 172, 173, 175,
	176, 182, 177, 183, 187, 190, 189, 191, 192, 193,
	184, 198, 202, 203, 204, 206, 207, 210, 211, 212,
	213, 216, 215, 218, 221, 222, 225, 226, 229, 230,
	232, 233, 236, 234, 237, 235, 238, 241, 239, 240,
	243, 244, 246, 245, 170, 253, 254, 256, 257, 258,
	274, 261, 262, 263, 266, 267, 270, 273, 275, 276,
	277, 278, 279, 280, 281, 283, 284, 286, 288, 290,
	292, 293, 294, 295, 296, 297, 299, 300, 302, 303,
	304, 305, 306, 311, 308, 309, 310, 312, 313, 314,
	315, 317, 319, 320, 321, 322, 324, 326, 347, 348,
	361, 327, 328, 329, 330, 331, 332, 333, 337, 341,
	338, 339, 340, 342, 335, 336, 343, 344, 346, 349,
	350, 352, 354, 355, 358, 359, 360, 362, 365, 366,
	367, 363, 364, 357, 372, 370, 371, 374, 375, 376,
	377, 378, 380, 382, 390, 391, 393, 396, 397, 398,
	388, 400, 401, 404, 405, 406, 407, 408, 413, 409,
	411, 414, 415, 416, 422, 421, 428, 429, 431, 432,
	433, 32, 41, 42, 44, 47, 58, 59, 60, 63,
	101, 102, 122, 132, 133, 144, 158, 160, 167, 168,
	169, 188, 194, 196, 200, 219, 251, 252, 268, 272,
	285, 287, 298, 323, 353, 368, 383, 384, 385, 386,
	392, 394, 417, 418, 419, 423, 430, 259, -196, 2,
	-178, -178, 288, 26, 2, 26, 284, 336, 375, 377,
	2, -448, -248, 2, 26, -182, -178, 84, 156, 334,
	-196, 2, -448, -248, 24, 2, -178, 2, -183, 2,
	327, -178, 459, 79, 226, 62, 323, 343, -110, 391,
	-109, 383, 329, -111, -386, 2, 241, -178, 459, 459,
	459, 459, 2, 373, 277, 421, 335, 410, 97, 295,
	181, -443, 2, 4, -397, -394, -212, -211, 373, 97,
	-210, -202, 449, -209, 459, 459, 459, 2, 203, 204,
	294, 293, 343, 344, 459, 459, 459, 2, 25, 56,
	78, 81, 103, 131, 151, 154, 264, -457, 233, 274,
	292, 329, 342, 372, 380, 393, -461, 360, 57, 410,
	-468, 398, 112, -292, 97, 377, 375, 226, 155, 405,
	319, 159, 403, 107, 187, 408, 407, 459, 459, 25,
	56, 65, 81, 112, 131, 151, 154, -459, 274, 292,
	326, 329, 342, 372, 380, 398, 393, 2, 421, 335,
	373, 181, 97, 410, 319, 291, -81, 2, 456, 29,
	346, -151, 373, 197, 2, -178, 203, 204, 2, 459,
	459, -443, 2, 203, 204, 2, 197, 2, 57, 331,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 2, -139, 343,
	360, 165, 39, 62, 26, 67, 278, 98, 157, 181,
	182, 211, 78, 79, -293, 38, 204, 203, -344, 374,
	330, 336, 370, 391, 84, 411, 320, 433, 296, 125,
	4, 97, 241, 345, 383, 226, 71, -467, 2, 373,
	-471, 2, 391, 391, 2, -471, 2, -471, 2, -181,
	2, 391, 387, -472, 391, 430, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, -153,
	-155, -154, 459, 459, 459, 459, 459, -139, 343, 2,
	62, 26, -159, 149, -242, -243, 402, 195, 120, 265,
	-152, -154, 2, -424, -384, 2, -319, -400, -321, 447,
	448, 442, 247, 434, -332, 103, 403, 259, -399, -322,
	-334, 122, 323, -262, 8, 9, 5, 6, 7, -185,
	-364, -328, -372, 395, 134, 250, -215, 460, 10, 456,
	-421, -154, -333, 33, 160, 55, -388, -214, -366, -374,
	-370, -371, -475, 45, 51, 50, 380, 240, 337, 338,
	354, 339, 340, 43, 413, 177, 256, 258, 189, 4,
	196, -213, -202, -418, -419, -394, -395, 188, 194, 190,
	353, 191, 192, 193, 42, 298, 145, 146, 144, 113,
	102, 101, 252, 47, 46, 44, 418, -375, 99, 383,
	384, 385, 386, 206, 207, -178, -396, 65, 89, 90,
	88, 93, 92, 94, 91, 345, 410, 56, 32, 167,
	168, 200, 251, 169, 63, -420, 364, 85, 153, 186,
	171, 199, 201, 205, 220, 223, 242, 249, 269, 271,
	318, 351, -476, 419, 132, 133, 272, 285, 368, 392,
	394, 158, 219, 58, 59, -426, 299, -427, -196, -426,
	459, 459, 461, 459, -236, -237, -238, 2, 26, 110,
	456, 2, -348, 2, 454, -352, -154, 214, -351, 456,
	-349, -203, 260, -422, 324, -418, -419, -185, -202, -214,
	4, -239, 456, 458, 97, 373, 66, 2, -287, 456,
	-178, 26, 259, 387, 461, -330, 456, 259, 152, 262,
	-178, 2, 2, 347, 2, 456, -110, 60, 391, -307,
	2, -308, -175, -176, -177, -357, 202, 290, 297, 436,
	433, -384, -453, 152, 439, 387, -384, -263, 458, 2,
	-352, 167, -203, 2, -200, -387, 4, -394, -397, -395,
	-398, 65, -396, 26, 28, 29, 30, 31, 33, 34,
	35, 36, 48, 55, 56, 61, 64, 66, 78, 84,
	88, 89, 91, 90, 92, 93, 94, 103, 105, 108,
	110, 111, 115, 117, 120, 134, 136, 149, 151, 152,
	156, 159, 162, 174, 185, 195, 197, 214, 217, 224,
	227, 228, 247, 250, 255, 259, 260, 264, 265, 282,
	289, 301, 316, 334, 345, 356, 369, 373, 381, 387,
	389, 395, 402, 403, 410, 412, 420, 424, 425, 426,
	427, -399, 2, -352, 167, 2, -205, 167, -352, -208,
	2, -392, 167, -390, 10, -389, 5, 4, -394, -397,
	-395, 2, -187, -178, 2, -199, -387, 2, -218, 167,
	-203, -204, -208, 387, 461, -254, -211, -212, -247, -178,
	458, -319, 2, -99, 2, -319, 167, 2, -99, 167,
	2, -319, 167, 2, -99, 167, 2, 2, 2, 393,
	2, 81, 167, -178, 373, 96, 2, 310, -458, 326,
	397, 421, 2, 2, 2, 2, 2, 2, 2, 373,
	335, -469, 299, -192, 2, -178, 149, -392, 167, 2,
	-392, 167, 2, -206, -208, -206, 181, 198, -187, 167,
	2, 377, 375, 377, 375, 152, 2, 197, 2, 197,
	2, -353, 2, -354, -203, 2, 2, 2, 2, 2,
	167, -178, 373, 96, 2, 213, 2, 2, 2, 2,
	2, 2, 2, 2, 2, -256, 167, 2, -203, -256,
	167, 2, -256, 167, 2, -219, 167, 2, -218, -187,
	167, 2, -393, 167, 2, -392, -393, 167, 2, -361,
	2, -360, -389, 417, -81, 456, 343, 456, -392, -203,
	-203, -319, -99, 152, -319, -99, -151, 149, 2, 97,
	373, -139, 2, 149, 412, 2, 8, 2, -392, 330,
	296, 141, 2, 347, 2, 62, -293, 433, 152, 2,
	152, 2, -277, 2, 427, -446, 2, 259, 152, 2,
	152, 2, 152, 2, 152, 2, 152, 2, 293, 344,
	204, 2, -99, 424, -319, 424, 2, 390, 212, 126,
	152, -277, 2, 152, 2, 152, 2, 5, 2, 202,
	290, 361, 2, -203, -462, 2, 373, 421, 335, 2,
	2, 74, 75, 152, 2, 152, 433, 2, -271, -352,
	-306, -307, -306, 387, -183, -159, -242, -243, -139, 347,
	2, 407, 244, 349, 210, -159, -270, -295, -296, 224,
	136, 255, -276, 26, 110, -276, -276, 49, 457, 457,
	11, 12, 64, 37, 447, 448, 449, 450, 147, 451,
	452, 445, 446, 444, 437, 438, 441, 208, 209, 80,
	440, 439, 73, 231, 325, 137, 138, 139, 140, 307,
	178, 179, 180, 14, 15, 16, 30, 264, 223, 434,
	171, 351, 442, 17, 18, 19, 199, 201, 249, 41,
	174, -184, -220, -319, -319, -319, -319, -319, 271, 456,
	-268, -314, 454, -154, 456, 456, 456, 5, 456, 5,
	-383, 8, -154, -319, -332, 457, -260, 456, -154, -332,
	-327, 456, 323, 454, 456, -335, -319, 458, -428, 428,
	-368, 456, 287, -367, 456, -367, -367, 422, -365, 456,
	435, 429, 456, -365, 456, 456, 149, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	422, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	461, -426, -239, 456, -264, -355, -319, 449, -264, -264,
	259, -257, -319, 85, -280, 205, 242, 153, 220, 318,
	186, -383, -82, -68, -79, -87, -99, -112, -143, -144,
	-316, 460, -343, 435, -154, -349, -202, -154, -351, 456,
	-348, -343, 449, -203, 456, 152, 456, 458, 152, -247,
	-387, -187, -203, -213, -214, 109, -257, -443, -247, -182,
	34, -329, -362, -363, -376, -364, -373, -369, -372, 303,
	304, 302, 306, 305, 45, 51, 50, 380, 240, 337,
	338, 354, 339, 340, 43, 413, 177, 256, 258, 189,
	4, 44, 418, -375, 196, 188, 194, 190, 353, 191,
	192, 193, 42, 298, 145, 146, 144, 113, 102, 101,
	252, 47, 46, 99, 383, 384, 385, 386, 206, 207,
	419, 364, 58, 59, -443, -247, 149, -386, -257, 34,
	-307, 2, -473, 461, 222, -222, 230, 246, 164, 260,
	431, 253, -391, 5, 4, -328, -340, 103, 226, -372,
	9, 448, -380, 8, 447, -385, -384, 87, 458, -387,
	-164, 308, -163, 23, 27, 114, 415, 127, -229, 183,
	277, 122, 357, 406, -450, -451, 328, 378, 379, 76,
	253, 308, 122, -273, -275, 34, 95, 244, 273, 52,
	175, 235, 236, 359, 423, 122, 308, 427, 122, -451,
	308, -451, -166, 357, 406, -450, -451, 328, 308, -165,
	-229, 122, 460, -96, -392, 456, -254, 461, 461, -387,
	449, 122, 122, 122, 122, 2, 2, 247, 2, 2,
	2, 154, -461, -459, 2, 2, 2, -203, 167, -205,
	167, 2, -208, 421, -241, 259, -445, -255, 373, -203,
	-174, -423, 427, 247, 247, 34, 456, 2, -189, 167,
	2, -179, -178, 181, -423, 247, -353, -216, -203, -216,
	346, -196, 34, -316, 122, 2, 2, 2, -178, -167,
	461, 54, 314, 122, -167, 122, -167, 122, -167, 461,
	122, -167, 122, 461, 122, 122, 457, 461, -361, -392,
	-149, 427, 152, 84, 456, 456, -151, -97, -96, -392,
	-445, -187, 2, -203, 2, 373, 206, -392, -392, -392,
	-386, 26, 348, 2, 293, 344, 75, -203, 373, 97,
	181, 68, -447, 149, -444, 319, -443, -203, 97, -203,
	97, -203, 97, -203, -203, 2, 2, 2, 2, 72,
	72, 149, 2, 390, 2, 390, 2, -178, -178, -178,
	222, -203, 149, 373, 181, 97, 373, -167, 461, -183,
	-159, -270, -386, 210, 349, -159, -296, -295, -298, -319,
	26, -301, 143, 243, -319, -321, -153, -153, -153, -244,
	-345, -319, 289, 181, -377, -362, -362, -201, -387, 383,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, 223, 171, 351, 41, 174,
	-319, 387, -319, -319, -319, -319, 239, 247, 250, 395,
	134, 404, 110, 253, -477, 369, 36, -325, -154, -261,
	456, -339, 31, 356, 26, -332, 456, 2, -314, -319,
	-315, -258, -257, -257, 457, 420, 26, 110, 449, 2,
	8, -288, -290, 432, 238, 100, 166, 237, -289, 333,
	457, 461, 34, 457, -319, -258, -331, -327, -257, -338,
	-337, 424, -387, 449, -429, 142, 159, 8, -381, 8,
	-381, 383, 383, 8, -381, -381, 456, 457, 2, 457,
	2, 457, 2, 457, 2, 457, 2, -319, -319, -319,
	-319, -319, -319, -319, -257, -282, 2, -378, -257, 4,
	432, 238, 100, 166, 237, 333, -282, 2, -283, 2,
	-319, -257, -284, -320, -321, 447, 448, 442, -332, -285,
	2, -319, -258, -319, 48, 217, 389, -286, -319, 152,
	-257, -257, 2, -257, 2, -427, 34, -257, -250, 461,
	152, 34, 4, -250, -250, 456, 457, 461, -281, 163,
	234, 229, -281, -348, -280, 205, -278, 269, -278, -278,
	-441, 456, 455, 459, 459, 459, 459, 459, -343, -188,
	454, 462, -387, -342, -341, 34, -196, 266, -343, -343,
	458, 457, -342, -203, 456, -257, -387, 362, 457, 458,
	199, 199, 199, 324, 457, 387, 427, -81, 261, 457,
	461, -249, 33, 454, -290, 456, -379, 422, 456, 456,
	152, -248, -453, 457, 391, -308, -221, 297, 355, 309,
	341, 371, 9, 8, 8, 461, -387, 461, -454, 78,
	387, 66, -310, 167, 66, -401, -190, 78, -402, -178,
	61, 403, 289, 151, -454, 78, -454, 78, 78, 346,
	360, 49, -352, 37, 37, 26, -99, 218, 152, 433,
	373, 181, 387, -352, -275, -362, 95, 235, 236, 49,
	-382, -380, 448, -382, 49, -382, -382, -382, 427, -205,
	-352, 387, 279, -392, 387, 461, 37, 37, 26, -99,
	218, 152, 387, -218, -188, -358, -357, -393, -211, -178,
	458, -319, -99, -319, -99, 122, 2, -469, 213, 456,
	-225, 247, -274, -273, 247, -207, 2, -203, 152, -247,
	-359, 197, 461, -255, 279, 122, 122, 456, 118, 295,
	2, 259, 247, -189, 167, -170, 376, 122, -313, -312,
	425, -302, -99, 456, 103, 34, -302, -265, -266, -356,
	-267, -190, 456, -196, -178, 2, -203, -256, -256, -256,
	-218, -219, -187, -392, -393, -393, -81, -360, 457, 457,
	-148, 263, -147, -178, 5, -151, 412, -224, -311, -310,
	-405, -406, -401, 223, 181, 403, 198, 135, -240, -191,
	-190, 96, -149, -357, 461, -149, -149, -358, -358, -203,
	149, 2, 2, -277, -203, -187, -218, -247, -247, -187,
	-187, -187, -99, -319, 343, 149, 149, 458, -277, 295,
	97, 373, 277, 181, -203, -218, -187, -203, -352, -159,
	407, -299, -380, 456, -300, 323, 324, 461, -162, 35,
	108, 210, -203, 433, 119, -319, -319, 387, -477, 369,
	-325, 119, -319, 239, 250, 395, 134, 404, 110, 253,
	152, 456, -320, -320, 457, -259, -319, -319, 455, 464,
	457, -243, 461, -242, -319, -257, -257, 457, 457, 387,
	387, 387, 387, 456, 458, -257, -247, 455, 455, 461,
	457, -336, -337, 115, -319, 458, -434, 270, 456, 456,
	457, 457, 461, 457, 433, 433, 457, 457, 457, -319,
	34, 461, 461, 461, 457, 461, 461, 461, 457, 457,
	152, 457, 457, -291, 282, 457, 11, 12, 447, 448,
	449, 450, 147, 451, 452, 445, 446, 444, 437, 438,
	439, 73, 231, 325, 14, 15, 16, 199, 174, -320,
	-320, -320, 457, -323, -324, 152, 149, 34, -286, -286,
	-286, 457, 152, -257, 457, 457, 456, 457, -313, -355,
	-251, 2, -348, -198, -387, -313, -313, -257, -319, 205,
	205, -279, 412, 259, -281, -348, -341, 457, -442, -383,
	-343, -342, -383, -318, -317, 150, 35, 108, 245, 170,
	-196, -239, -342, -342, -387, -343, 457, -252, -350, -422,
	-243, 458, -387, -140, 5, 250, -140, -140, -247, 24,
	283, -362, 454, 455, 8, 8, 456, -381, -381, -247,
	152, -384, -307, 401, 70, 297, 383, -384, -163, 308,
	-190, -190, -203, 247, -310, 167, -169, 247, -362, -197,
	-178, 456, 456, 210, 210, -190, -197, 167, -190, 167,
	-197, -197, -449, 297, 254, -319, 225, 295, 248, -164,
	308, -99, -99, -99, 456, -453, 412, 109, -203, -218,
	-203, -207, 308, -213, -382, -382, -273, 308, -205, -392,
	427, -187, -165, -99, -99, -99, 456, -188, -166, 308,
	-146, 176, 457, 449, -178, 421, -178, -223, -226, -224,
	-190, -463, 429, 427, 122, 122, -239, -217, -203, 454,
	-149, -392, -203, -392, -392, -392, 2, 456, 2, -203,
	122, 259, 247, -171, 116, -474, 439, -187, -243, -319,
	-272, -305, 316, 259, -240, 417, -196, -272, -253, 461,
	152, 439, 458, -240, 2, -167, -167, -167, -167, -167,
	-81, -149, 461, 456, 439, 439, 456, -392, -392, 457,
	461, -203, -189, 181, 181, -195, -179, 457, 461, 458,
	456, -149, -96, 152, -46, 427, 373, 343, 343, -178,
	-199, -187, -203, -200, -218, -300, -319, -345, -203, 460,
	-319, -319, 119, 119, -319, -320, -320, -319, 119, 152,
	456, -319, -329, 30, 30, 457, 461, -315, -319, 457,
	420, -243, -243, 457, 5, 238, 166, 237, -289, 237,
	-289, -289, 8, 449, -387, 457, -327, 117, -319, 381,
	-387, 449, -435, -193, 456, -178, 425, -242, -381, -365,
	-365, 457, -377, -362, -319, -319, -319, -319, -319, -319,
	-323, -319, -377, -362, -320, -320, -320, -320, -320, -320,
	-320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
	-320, -320, -320, 110, 247, 253, -320, -324, -323, -319,
	-319, -362, 457, 457, 457, -257, -81, -269, 159, -358,
	461, -269, -269, 457, -348, -348, 456, -319, 205, 455,
	457, 461, -342, 455, 461, 463, 439, -239, 458, -341,
	457, 461, -304, 34, 457, -387, 262, 5, 8, 454,
	455, 457, -381, 457, 457, -247, -319, 387, 387, 122,
	247, 414, -407, -402, -319, -245, -346, -319, 456, 456,
	-161, 114, 346, -455, 2, 122, -167, 122, -167, 431,
	456, 456, 387, 427, -257, -319, -150, 103, -386, -451,
	-451, 460, 387, 387, 279, 427, -257, 387, -149, 152,
	2, 2, 2, 457, 457, 461, -408, 34, 257, -178,
	-203, -205, 34, -64, 427, -357, -383, -174, 2, -294,
	412, -188, -203, 122, -172, 216, -474, -390, -423, -297,
	-295, -272, -264, 248, 77, 457, -313, -266, -251, -319,
	2, 457, -147, -148, -392, -392, -392, -149, -151, -151,
	-311, 2, 456, -189, -179, 456, -151, -191, 2, -393,
	-99, 263, -203, -277, -231, -230, 277, 253, -231, 260,
	457, -162, -188, -319, -319, 119, 30, 30, -319, -319,
	-329, 457, -319, -319, -257, 455, 5, -319, 457, 457,
	457, -319, 458, -436, -178, -319, 457, 457, 457, 457,
	461, 461, 457, 457, 457, 457, -324, 152, 110, 253,
	456, 457, 457, -326, 162, 49, -348, -326, -326, -279,
	-247, -348, -316, -383, -317, -188, 454, -387, -350, 456,
	458, 455, 2, 454, 457, -190, -190, -310, 122, -409,
	78, -411, 64, 135, 84, 247, 250, 403, 289, 61,
	103, 301, 34, 457, 457, 461, -162, -245, -247, 247,
	366, 103, 247, 103, 96, 398, -190, -197, -247, -247,
	-203, 128, 457, 461, 439, 449, -207, -205, -392, 128,
	457, -188, -393, -227, 184, -190, -406, -403, -404, 289,
	-410, -412, 135, 289, -99, 2, 456, -225, -274, -99,
	263, 455, 456, -178, 259, 456, -188, -173, 215, -474,
	-390, -170, -272, -303, 456, 259, -99, -243, 439, 457,
	457, 96, 96, -245, 456, 456, -247, 96, 457, -47,
	-48, 181, 78, 281, -200, 373, 181, -162, -319, -319,
	-319, 457, -243, -387, 449, -430, 277, 457, -319, -319,
	-320, 152, 456, -329, -431, 426, -319, -257, -431, -431,
	457, -343, -383, 2, 454, 2, -310, -197, -201, -194,
	-178, 135, 167, 250, 210, 456, -320, -203, 456, 2,
	-465, 105, 185, -309, -466, 83, 367, -346, 457, 457,
	250, 250, -319, -362, -167, -167, 457, 457, -319, 387,
	-386, 82, -384, -451, -319, 387, -228, -229, 174, -408,
	210, -194, 210, -464, 427, -223, -463, -65, -66, 388,
	-357, -245, -203, -245, 259, -474, -390, -171, 111, -247,
	78, -297, -325, -149, 456, 456, 457, -245, -245, 457,
	456, -149, 461, 26, 456, 26, 456, -203, -218, 457,
	-243, 49, 457, 457, -320, -329, 457, -432, -433, -193,
	-342, 455, 2, -411, -194, 247, -319, -180, 456, -319,
	185, 106, 172, -227, 456, 301, -186, 64, 456, 456,
	456, 439, 152, 456, -463, 275, 456, 96, 244, 457,
	34, -66, 9, 457, -294, 457, -203, -390, -172, 407,
	248, 457, -197, -272, -393, -393, -309, 457, 457, -393,
	-48, -247, -247, -437, 295, 324, 161, -257, 457, 461,
	34, 122, 457, -413, 232, -178, 457, 106, 172, -228,
	-247, -203, -452, 412, -201, -233, -232, -230, -235, -234,
	-230, -257, -384, 82, 275, -257, -203, -246, -347, -190,
	96, -227, -99, -309, 456, -309, 456, -173, 346, -312,
	457, 457, -227, -309, 457, 457, 457, 457, -438, -439,
	41, 400, 87, -319, -438, -438, -433, -435, 135, -414,
	-417, -416, 259, 352, 153, 276, 457, 366, 423, -465,
	457, -239, -319, 457, 461, 417, 457, 461, 417, 457,
	152, 457, 456, 457, 461, -228, -464, -227, -245, -227,
	-245, -265, -149, -149, -228, -227, -149, -440, 121, -439,
	286, 148, 323, 286, 148, -440, -440, -194, -416, 259,
	-417, 259, 407, 107, -413, -232, 174, -234, 152, 275,
	-247, -347, -463, -228, 457, -228, 457, -313, -228, 87,
	159, 382, 244, 30, -415, 244, 314, 54, 346, -415,
	-414, 456, 456, 457, -470, 425, -309, -470, -309, 323,
	267, -439, 22, 250, 103, -465, -257, -257, -168, 54,
	314, 2, -227, -227, 457, 457, -228, -228, -228, 387,
	-470, -470, 456, -257, 457, -228,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 363, 364, 366,
	367, 368, 370, 371, 373, 375, 377, 379, 380, 382,
	384, 386, 387, 388, 389, 390, 392, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 454,
	0, 917, 919, 921, 923, 25, 26, 0, 0, 188,
	190, 192, 0, 217, 219, 221, 222, 224, -2, 0,
	317, 318, 320, 322, -2, -2, 0, 0, 441, 443,
	0, 0, 0, 463, 464, 0, 1007, -2, 457, 459,
	461, 524, 526, 528, 530, 532, 534, 536, 537, 539,
	541, 543, 545, 547, 549, 551, 553, 555, 557, 559,
	561, 563, 565, 567, 569, 571, 573, -2, -2, -2,
	0, -2, -2, -2, 935, 29, 31, 33, 35, 37,
	39, 41, 61, 273, 274, 276, 278, 280, 283, 284,
	286, 1049, 324, 326, 328, 330, 332, 0, -2, 1061,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1025, 1027, 1029,
	1031, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 365, 369, 372, 374, 376, 378, 381, 383,
	385, 391, 393, 395, 812, 1658, 1672, 1673, 1674, 1677,
	1678, 1679, 1680, 1681, 1682, 2017, 2097, 2098, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
	1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
	1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 0, 419, 417,
	1652, 420, 1851, 422, 424, 311, 312, 313, 314, 315,
	316, 0, 434, 428, 433, 435, 437, 438, 439, 440,
	414, 412, 0, 434, 1704, 432, 915, 916, 910, 911,
	1884, 945, 453, -2, -2, -2, 1986, -2, 485, -2,
	492, 1989, 1886, 495, 0, 497, -2, 500, 918, 920,
	922, 27, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, -2, -2, -2, -2, 0, 0, 1740,
	1628, 1674, 1631, 1626, 189, 191, 193, 194, 0, 0,
	0, 0, 0, 0, 218, 220, 223, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 720, 0, 0, 725,
	863, 864, 885, 0, 0, 0, 0, 319, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 0,
	0, 0, 0, 0, 0, 251, 357, 358, 0, 1050,
	0, 0, 0, 0, 169, 160, 0, 0, 708, 442,
	444, 0, 155, 0, 0, 914, 0, 171, 0, 0,
	458, 460, 462, 525, 527, 529, 531, 533, 535, 538,
	540, 542, 544, 546, 548, 550, 552, 554, 556, 558,
	560, 562, 564, 566, 568, 570, 572, 574, 575, 0,
	0, 0, 0, -2, -2, 0, 0, -2, -2, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, -2,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 0,
	578, 580, 581, 582, 0, 629, 646, 0, 854, 1051,
	947, 925, 938, 947, 927, 928, 929, 930, 931, 936,
	937, 940, 0, 932, 933, 934, 30, 32, 34, 36,
	38, 40, 42, 275, 277, 279, 281, 285, 287, -2,
	1023, 1024, 325, 327, 329, 331, 333, 445, 0, 447,
	0, 579, 1011, 0, -2, 0, 1055, 1055, 1055, 0,
	0, 1024, 1022, 0, 450, 451, 504, 505, 1286, 0,
	0, 0, 0, 0, 1526, 1370, 0, 506, -2, 1401,
	1403, 1965, 1986, 1525, 1405, 1406, 1407, 1408, 1409, 0,
	0, 1412, 0, 1414, 1415, 1416, 1417, 0, 1419, 0,
	1423, 1424, 1425, 0, 1970, 1605, 1670, -2, 1191, 1192,
	1193, 1194, 1195, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1666, 0, 1492, 1439, -2, 1691, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1749,
	-2, -2, -2, -2, -2, -2, -2, 1247, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 2000, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 0, 1954, 1971,
	1972, 1977, 1979, 1973, 1962, 1462, -2, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 1248, -2, 1966, 1967, 1982, 1983, 1988, 1993,
	1994, 1969, 1978, -2, -2, 1041, 1859, 1044, 812, 1042,
	1026, 1028, 0, 1030, 0, 0, 0, 1035, 1058, 1056,
	0, 1092, 1039, 1040, 1050, 1110, 1133, 0, 1115, 0,
	1133, 1159, 0, 1120, 1879, 1440, 1441, 0, 1674, 1671,
	-2, 0, 0, 0, 0, 0, 0, 214, 415, 0,
	421, 423, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 455, 456, 0, 480, 0, 484, 1961, -2, -2,
	488, 948, 952, 953, 954, 955, 0, 0, 0, 0,
	0, 494, 0, 0, 481, 482, 498, 501, 0, 51,
	0, 1971, 1159, 53, 0, 1642, 1696, 1697, 1698, 1699,
	1700, 2000, 2016, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
	2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
	2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
	2095, 2096, 55, 0, 1971, 58, 0, 1971, 0, -2,
	62, 0, 1971, 172, 173, 1687, 1688, 1692, 1693, 1694,
	1695, 65, 0, 1648, 67, 0, 1645, 76, 0, 1971,
	0, 1625, -2, 0, 0, 700, 1622, 1627, 701, 1632,
	0, 195, 196, 197, 198, 199, 1971, 201, 202, 0,
	204, 205, 1971, 207, 208, 0, 210, 226, 227, 0,
	229, 0, 1971, 0, 0, 0, 235, -2, 252, 0,
	249, 0, 239, 240, 242, 243, 244, 245, 246, 0,
	0, 0, 869, 291, 289, 1653, 0, -2, 1971, 857,
	860, 1971, 862, 874, 1656, 0, -2, 0, 1048, 1971,
	962, 721, 722, 723, 724, 0, 310, 0, 975, 0,
	977, 0, 997, 1165, 1110, 253, 254, 255, 256, 257,
	1971, 0, 0, 0, 262, 0, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 148, 1971, 336, 355, 148,
	1971, 339, 148, 1971, 342, 148, 1971, 345, 1620, 148,
	1971, 348, 349, 1971, 351, 174, 352, 1971, 354, 0,
	-2, 408, 1660, -2, 360, 0, -2, 0, 186, 0,
	0, 706, 707, 0, 912, 913, 0, 0, 465, 0,
	0, 576, 577, 0, 0, 587, 588, 589, 590, 1887,
	1857, 1765, 594, 0, 597, -2, 0, 0, 0, 601,
	0, 605, 606, 607, 0, 705, 609, 0, 0, 611,
	0, 615, 0, 618, 0, 620, 0, 622, -2, -2,
	-2, 633, -2, 0, 637, 0, 639, 0, 0, 0,
	0, 654, 655, 0, 660, 0, 663, 664, 665, 0,
	667, 668, 669, 670, 0, 672, 673, -2, -2, 677,
	679, 0, 686, 0, 691, 0, 583, 584, 148, 1163,
	924, -2, 926, 0, 942, 1014, -2, 0, 446, 0,
	449, 1018, 0, 1020, 0, 1012, 1017, 1070, 1071, 0,
	0, 0, 0, 1053, 1054, 0, 0, 0, 1009, 1010,
	0, 0, 0, 0, 1531, 1532, 1533, 1534, 1535, 1536,
	1539, 1540, 1537, 1538, 1541, 1542, 0, 0, 0, 0,
	0, 1543, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1544, 1545, 1546, 0, 0, 1548, 0,
	1550, 0, 0, 0, 0, 0, 0, 1349, 1351, 1613,
	0, 0, 1547, 1291, 1292, 1293, 1328, 1329, 0, 0,
	1402, 1610, 1609, 1404, 0, 1562, 0, 1411, 0, 1283,
	1418, 1639, -2, 0, 1526, 1557, 0, 0, 1426, 1427,
	1428, 0, 0, 1562, 0, 0, 1604, 0, 1494, 0,
	1227, 0, 1228, 1229, 0, 1230, 1231, 1244, 1257, 0,
	0, 0, 0, 1261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1249, 0, 0, 0, 1585, -2, 0, 0, 0, 0,
	0, 1043, 0, 0, 1096, 1614, 1618, 1619, 1096, 1096,
	0, 0, 1563, 1156, 1156, 0, 0, 1152, 1152, 1152,
	1150, 1127, 0, 396, 398, 400, 402, 403, 404, 406,
	1133, 0, 1143, 0, 1133, 1133, 0, -2, 1115, 0,
	0, 1143, 1160, 1161, 0, 0, 0, 0, 0, 0,
	1675, 0, 0, 0, 1662, 0, 0, 0, 426, 436,
	1050, 0, 1565, 1182, 1176, 1185, 1186, 1187, 1188, 1234,
	1235, 1236, 1237, 1238, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, -2, 1245, 1247, 1268, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1240, 0, 1215, 1215,
	1215, 1232, 1233, 1256, 1267, 1259, 1267, 1263, 1183, 1184,
	1250, 1251, 1252, 1253, 0, 430, 0, 0, 0, 0,
	-2, 490, 0, 950, 0, 956, 515, 516, 517, 958,
	959, 0, 493, 518, 519, 520, 521, 522, 523, 0,
	829, 0, 831, 1634, 0, 491, 508, 496, 0, 502,
	77, 907, 114, 0, 907, 907, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 101, 110, 89, 90, 0,
	0, 0, 0, 59, 837, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 100,
	0, 95, 79, 0, 0, 0, 102, 112, 0, 139,
	141, 0, 0, 1146, 156, 0, 699, 0, 0, 1675,
	1630, 0, 0, 0, 0, 228, 230, 0, 232, 233,
	234, 0, 868, 0, 241, 238, 282, 786, 1971, 836,
	1971, 834, 1657, 0, 0, 0, 308, 303, 0, 305,
	855, 0, 1047, 0, 0, 0, 0, 875, 0, 1971,
	880, 1644, 1683, 1684, 964, 0, 1171, 0, 978, 0,
	0, 1166, 0, 1168, 0, 259, 260, 261, 0, 334,
	0, 146, 147, 0, 337, 0, 340, 0, 343, 0,
	0, 346, 0, 0, 0, 0, 1050, 0, 0, 0,
	162, 0, 0, 0, 0, 0, 0, 186, 158, 186,
	186, 1146, 467, 1146, 469, 0, 0, 591, 592, 593,
	595, 596, 598, 599, -2, -2, 687, 657, 0, 0,
	0, 656, 608, 0, 693, 1875, 703, 610, 1740, 613,
	1740, 616, 1740, 619, 621, 624, 649, 632, 636, 0,
	0, 0, 641, 0, 643, 0, 645, 657, 658, 661,
	666, 671, 0, 0, 0, 0, 0, 853, 0, 941,
	1015, 1017, 448, 0, 1021, 1013, 1068, 1069, 1074, 1078,
	1079, 1082, 1085, 1086, 1076, 1286, 1036, 1037, 1038, 1062,
	1063, 894, 0, 2097, 1287, 1177, 1288, 1289, 1641, 0,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	-2, -2, -2, -2, -2, -2, -2, -2, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, -2,
	-2, -2, 1326, 1327, -2, 1549, 1551, 0, 1613, 0,
	-2, 0, -2, -2, -2, -2, 1346, 0, 1348, 1353,
	1355, 1357, 0, 0, 0, 0, 1612, 1367, 1596, 1597,
	0, 0, 1528, 1529, 1530, 1352, 0, 1371, 1611, 1608,
	0, 0, 1561, 1061, 1430, 0, 0, 0, 0, 1437,
	0, 1640, 1282, 1269, 1270, 1271, 1272, 1273, 1274, 1284,
	1422, 1559, 0, 1558, 0, 0, 0, 1569, 0, 1603,
	1599, 0, 1663, 1669, 1502, 0, 0, 0, 0, 1637,
	0, 0, 0, 0, 0, 0, 0, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1474, 0, 1572, -2,
	-2, -2, -2, -2, -2, -2, 0, 1476, 0, 1478,
	1563, 1582, 0, 0, 1372, 0, 0, 0, 1526, 0,
	1481, 1563, 1590, 0, 0, 0, 0, 0, 1563, 0,
	1595, 0, 1488, 0, 1490, 1045, 0, 0, 1171, 0,
	0, 0, 1617, 1171, 1171, 0, 1091, 0, 0, 1153,
	1154, 1155, 0, 0, 1156, 0, 1147, 1151, 1148, 1149,
	0, 0, 1133, 397, 399, 401, 405, 407, 1143, 1107,
	0, 0, 1643, 1113, 1142, 0, 812, 1132, 1143, 1143,
	0, -2, 1117, 0, 0, 1061, -2, 187, 811, 0,
	0, 0, 0, 416, 418, 0, 0, 410, 0, 413,
	0, 1172, 1175, 0, 1189, 0, 0, -2, 0, 0,
	0, 0, 0, 483, 0, 949, 957, 0, 512, 0,
	514, 0, 830, 1636, 1635, 0, 503, 0, 0, 0,
	0, 906, 118, 1971, 0, 150, 0, 0, 780, 1649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 91, 0, 0, 0,
	0, 0, 0, 0, 838, 839, 841, 847, 849, 0,
	843, 1638, 0, 844, 0, 846, 848, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 92,
	0, 0, 0, 0, 1624, 177, 1145, 0, 1623, 1633,
	0, 200, 203, 206, 209, 0, 236, 0, 0, 728,
	711, 0, 832, 835, 0, 812, 867, 1655, 0, 290,
	186, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 1971, 966, 972, 0, 1061, 1170,
	0, 995, 980, 0, 0, 0, 995, 999, 1000, 1002,
	1003, 0, 0, 1167, 0, 263, 356, 148, 148, 148,
	1621, 148, 148, 175, 350, 353, 359, 409, 1050, 186,
	184, 1836, 182, 179, 181, 0, 0, 0, 729, 731,
	732, 733, 734, 0, 1684, 0, 1794, 1684, 0, 983,
	985, 0, 153, 186, 0, 0, 302, 466, 471, 585,
	0, 626, 651, 600, 602, 603, 604, 704, 702, 612,
	614, 617, 635, 638, 640, 0, 0, 0, 653, 0,
	0, 0, 0, 0, 688, 689, 690, 692, 1164, 1016,
	1019, 0, 1080, 0, 1077, 1083, 1084, 0, 1065, 892,
	893, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1368, 0, -2, 1347, 1350, 1354, 1356, 1358, 0, 0,
	0, 0, 0, 0, 1552, 0, 1554, 1369, 1606, 1609,
	1524, 0, 0, 1060, 1061, 1061, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 1560, 0, 1567, 1568, 0,
	1429, 0, 1600, 0, 0, 0, 1438, 0, 0, 0,
	1239, 1213, 0, 1267, 1265, 1266, 1260, 1267, 1264, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 1461, 1473,
	0, 1475, 1477, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1375,
	1376, 1377, 1480, 1588, 1589, 0, 0, 0, 0, 0,
	0, 1486, 0, 1594, 1487, 1489, 1050, 1093, 1088, 1615,
	1146, 1095, 1097, 1616, 1646, 1088, 1088, 0, 1564, 0,
	0, 1137, 0, 0, 0, 1139, 0, 1128, 0, 1130,
	1143, 1112, 0, 0, 1105, 0, 1101, 1102, 1103, 1104,
	812, 1141, 1114, 1118, 1663, 0, 1162, 0, 1122, 1125,
	0, 0, 1676, 211, 215, 216, 212, 213, 425, 0,
	0, 1566, 0, 1178, 0, 0, 0, 0, 0, 429,
	0, 479, -2, 510, 511, 513, 0, 509, 115, 907,
	0, 0, 898, 0, 120, 1971, 129, 0, 757, 0,
	1647, 0, 0, 0, 0, 909, 0, 1971, 148, 1971,
	148, 131, 134, 0, 138, 136, 0, 0, 748, 78,
	907, 81, 85, 93, 0, 0, 0, 99, 0, 0,
	0, 900, 0, 842, 845, 851, 60, 0, 902, 896,
	0, 895, 140, 83, 87, 94, 0, 904, 80, 0,
	186, 0, 157, 1629, 0, 0, 0, 0, 0, 727,
	797, 0, 0, 0, 0, 0, 0, 296, 292, 0,
	301, 307, 306, 858, -2, 861, 870, 0, 872, 884,
	0, 0, 0, 968, 972, 0, 971, 1048, 1073, 1169,
	973, 995, 0, 0, 0, 982, 979, 976, 1171, 0,
	0, 0, 0, 0, 258, 335, 338, 341, 344, 347,
	361, 161, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 1684, 1684, 0, 1651, 0, 0, 0,
	0, 154, 159, 0, 468, 0, 0, 642, 644, 657,
	680, 681, 743, 0, 743, 0, 0, 1064, 894, 0,
	1290, 1331, 0, 0, -2, 0, 0, 1335, 0, 0,
	0, -2, 0, 0, 0, 1553, 1555, 0, 1608, 1431,
	0, 0, 0, 1435, 1413, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 0, 1420, 1421, 1527, 1570, 1598, 1602, 0,
	1664, 1668, 1500, 1501, 1505, 1654, 0, 0, 0, 1258,
	1262, 1442, 0, 0, 0, 0, 0, 0, 0, 1571,
	1581, 1583, 1373, 1374, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, -2, -2, -2, 1391, 1392, 1393,
	-2, -2, -2, 0, 0, 0, 1584, 1586, 1587, 1591,
	1592, 0, 1483, 1484, 1485, 1593, 0, 1090, 0, 1094,
	0, 1090, 1090, 1057, 1135, 0, 0, 1158, 0, 1110,
	1129, 0, 1119, 1108, 0, 1109, 0, 1140, 0, 1116,
	1121, 0, 1124, 0, 1431, -2, 427, 411, 0, 0,
	1180, 1190, 0, 1242, 1246, 431, 1144, 0, 0, 0,
	0, 149, 755, 779, 0, 0, 887, 894, 0, 0,
	122, 0, 0, 0, 130, 0, 127, 0, 133, 137,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	231, 866, 237, 737, 785, 0, 787, 0, 712, 0,
	786, 836, 0, 288, 0, 295, 0, 856, 871, 0,
	0, 0, 0, 0, 970, 972, 0, 963, 964, 995,
	1072, 974, 993, -2, 992, 0, 1061, 1001, 998, 1004,
	1005, 0, 183, 0, 178, 180, 0, 164, 0, 0,
	730, 735, 0, 0, 0, 0, 0, 984, 986, 0,
	170, 0, 586, 652, 682, 742, 0, 0, 684, 1075,
	1081, 1066, 894, 1333, 1337, 0, 0, 0, 1339, -2,
	0, 1361, -2, -2, 1556, 1607, 1410, 1061, 1432, 1434,
	1285, 1601, 0, 1507, 1504, 0, 1491, 1214, 1452, 1453,
	0, 0, 1456, 1458, 1459, 1460, 1580, 0, 0, 0,
	0, 1482, 1046, 1496, 0, 0, 1098, 1496, 1496, 1136,
	0, 1138, 1133, 1131, 1106, 1099, 0, 1664, 1123, 0,
	0, 1173, 1179, 0, 1241, 116, 117, 119, 0, 756,
	0, 759, 0, 0, 0, 0, 766, 767, 0, 0,
	0, 0, 0, 801, 810, 0, 889, 0, 0, 0,
	124, 143, 0, 0, 908, 0, 148, 148, 0, 0,
	899, 0, 0, 0, 0, 0, 901, 903, 897, 0,
	0, 905, 176, 745, 0, 797, 789, 790, 791, 0,
	796, 798, 0, 0, 716, 713, 728, 711, 833, 865,
	0, 293, 0, 883, 0, 0, 0, 960, 972, 0,
	965, 966, 309, 0, 0, 0, 981, 1073, 0, 185,
	186, 0, 0, 0, 0, 0, 0, 0, 186, 470,
	472, 0, 0, 478, 741, 0, 0, 1067, 1341, -2,
	-2, 1362, 0, 1665, 1667, 1061, 0, 1493, 0, 0,
	-2, 0, 0, 0, 1032, 0, 1089, 1087, 1033, 1034,
	1157, 1143, 0, 1126, 0, 1181, 121, 0, 760, 761,
	1650, 763, 0, 765, 768, 0, 770, 1686, 0, 774,
	781, 802, 0, 737, 0, 807, 808, 888, 783, 0,
	123, 125, 142, 891, 126, 132, 0, 0, 82, 0,
	0, 1734, 107, 105, 84, 0, 711, 744, 0, 788,
	0, 799, 800, 714, 0, 0, 0, 294, 297, 0,
	300, 0, 884, 0, 0, 0, 967, 968, 0, 0,
	0, 995, 1006, 163, 0, 0, 810, 0, 0, 778,
	0, 168, 0, 474, 0, 476, 0, 683, 685, 1433,
	1511, 0, 1454, 1455, -2, 0, 1399, 1495, 1497, 0,
	1111, 1100, 1174, 758, 762, 0, 0, 816, 0, 0,
	0, 805, 806, 745, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 0, 709, 0, 0, 717, 0, 737,
	0, 298, 299, 810, 0, 810, 0, 969, 970, 0,
	988, 989, 991, 996, 0, 0, 737, 810, 777, 0,
	473, 0, 0, 0, 0, 0, 0, 1506, 1400, 0,
	0, 0, 769, 821, 0, 0, 0, 803, 804, 801,
	0, 812, 128, 0, 890, 0, 749, 0, 0, 752,
	0, 0, 108, 1734, 106, 0, 0, 0, 793, 795,
	718, 745, 716, 737, 0, 737, 0, 961, 0, 990,
	186, 186, 745, 737, 186, 475, 477, 1503, 1523, 1512,
	-2, 1934, 1737, 0, 1523, 1523, 1498, 1499, 0, 771,
	817, 818, 0, 813, 814, 815, 1685, 772, 773, 782,
	809, 816, 144, 746, 0, 0, 747, 0, 0, 111,
	0, 113, 0, 792, 0, 711, 715, 745, 0, 745,
	0, 1171, 165, 166, 775, 745, 167, 1508, 0, 0,
	1514, 1515, 1516, 1517, 1518, 1509, 1510, 764, 819, 0,
	820, 0, 0, 0, 821, 750, 0, 753, 0, 109,
	0, 794, 710, 881, 810, 881, 810, 987, 776, 0,
	1520, 1521, 0, 0, 822, 0, 825, 826, 0, 823,
	801, 0, 0, 740, 876, 0, 737, 878, 737, 1519,
	1522, 1513, 824, 827, 828, 784, 0, 0, 736, 738,
	739, 882, 745, 745, 745, 0, 881, 881, 751, 0,
	877, 879, 0, 0, 745, 754,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 445, 3, 451, 446, 3,
	456, 457, 449, 447, 461, 448, 458, 450, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 464, 3,
	437, 439, 438, 441, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 454, 3, 455, 452, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 462, 444, 463, 442,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 440,
	57780, 443, 57781, 453, 57782, 459, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1094
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1112
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1113
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1166
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1197
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1212
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1216
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1220
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1231
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1243
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1262
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1294
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1308
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1327
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1338
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1342
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1348
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1356
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1366
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1370
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1380
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1391
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1398
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1417
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1425
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1434
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1445
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1453
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1464
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1474
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1484
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1493
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1510
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 109:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1524
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1529
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1576
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1596
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1601
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1606
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1611
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1649
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1682
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1689
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1712
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1720
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1724
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1734
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1745
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1755
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1759
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1785
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1788
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1818
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1826
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1842
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1879
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1888
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1894
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1899
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1904
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1909
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1914
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1918
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1937
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1941
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1945
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1953
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1957
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1967
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1973
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1995
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2009
		{
			sqlVAL.union.val = nil
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2015
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2028
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2029
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2030
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2031
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2073
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2087
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2119
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2123
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2138
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2159
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2164
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2176
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2177
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2180
		{
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplemented(sqllex, "create cast")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2196
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplemented(sqllex, "create operator")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplemented(sqllex, "create publication")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplemented(sqllex, "create rule")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "create server")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2208
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2211
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2212
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2215
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2216
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplemented(sqllex, "drop server")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2235
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2243
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2244
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2248
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2249
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2250
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2260
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2276
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2286
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2295
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2308
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2318
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2329
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2357
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2377
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2388
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2392
		{

			sqlVAL.union.val = nil
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "DELETE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2429
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2430
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2441
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2442
		{
			return helpWith(sqllex, "DROP")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2449
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2457
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2461
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2487
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2491
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2574
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2579
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2626
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2629
		{
			return helpWith(sqllex, "DELETE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2631
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2633
		{
			return helpWith(sqllex, "INSERT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2634
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2636
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2637
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2638
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2648
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "DELETE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "INSERT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2680
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2688
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2704
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2721
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2729
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2733
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2737
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2759
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2762
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2786
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2793
		{
			return helpWith(sqllex, "GRANT")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2817
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2824
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2833
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2843
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2861
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2862
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2877
		{
			return helpWith(sqllex, "RESET")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2902
		{
			return helpWith(sqllex, "USE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2906
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2907
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2909
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2914
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "USE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2946
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2967
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2975
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2979
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2999
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3011
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3093
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3112
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3125
		{
			return unimplemented(sqllex, "set from current")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3134
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3139
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3146
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3156
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3188
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3206
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.union.val = tree.Low
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = tree.Normal
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = tree.High
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3243
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3269
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3270
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3271
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3272
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3273
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3274
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3277
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3280
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3282
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3283
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3285
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3287
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3290
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3291
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3293
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3303
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3315
		{
			sqlVAL.str = "client_encoding"
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			sqlVAL.str = "timezone"
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3337
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3383
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3391
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3450
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3461
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3474
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3515
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3523
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3531
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3542
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3544
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3547
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = true
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = true
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3555
		{
			sqlVAL.union.val = false
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3584
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3600
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3609
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3612
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3614
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3617
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3619
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3623
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3626
		{
			sqlVAL.union.val = true
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = false
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3635
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3638
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3640
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3643
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3661
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = true
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = false
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3692
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3706
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3713
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3717
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3725
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3730
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3735
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3739
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3751
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3755
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3771
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3779
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3782
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3786
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3790
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3794
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3802
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3817
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3828
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3839
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3844
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3848
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3851
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3855
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3862
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3867
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3995
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4034
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4038
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4047
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4056
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4067
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4091
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4127
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4139
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4152
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4153
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4154
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4158
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4169
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4181
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4182
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4183
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4197
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4198
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4199
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4200
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4201
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4202
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4203
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4204
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4215
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4219
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4234
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4238
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4254
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4259
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.str = ""
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4284
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4297
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4334
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4354
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4369
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4387
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4391
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4441
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4455
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 775:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4466
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4498
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4510
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4515
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4521
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4548
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4566
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4572
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4582
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4597
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4610
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4621
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4647
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4651
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4657
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4662
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4663
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4664
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4665
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4666
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4667
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4688
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4698
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4726
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4739
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4743
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4761
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4767
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4775
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4779
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4787
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4801
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4807
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4826
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4831
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4835
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4842
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4846
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4847
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4850
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4851
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4856
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4860
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4863
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4864
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4866
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4876
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4879
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4891
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4894
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4902
		{
			sqlVAL.union.val = nil
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4919
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4924
		{
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4925
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4933
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4941
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4942
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4945
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4946
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4952
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4954
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4956
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4958
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4962
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4978
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4992
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5007
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5021
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5035
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5038
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5039
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5043
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = false
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = true
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = false
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5087
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.str = ""
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = tree.Descending
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5111
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5117
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5128
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5134
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5140
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5148
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5154
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5162
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5168
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5185
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5186
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5189
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5190
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5201
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5220
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5223
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5231
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5234
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5240
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5256
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5259
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5264
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5274
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5277
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5282
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5291
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5292
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5293
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5301
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5308
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5311
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5312
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.str = ""
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5328
		{
			sqlVAL.str = ""
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5334
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5338
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5344
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5358
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5371
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5373
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5377
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5402
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5412
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 960:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5432
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5442
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5446
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5456
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5466
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.str = ""
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5485
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5486
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5505
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5512
		{
			return helpWith(sqllex, "INSERT")
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5523
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5530
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5534
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5543
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5550
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5554
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5558
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5564
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5588
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5605
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5608
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5614
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5623
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 996:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5652
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5655
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5681
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5684
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5731
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5741
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5768
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5772
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5781
		{
			sqlVAL.union.val = tree.ForNone
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5782
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5783
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5784
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5790
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5825
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5826
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5827
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5849
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5862
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5888
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5910
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5944
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5948
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5952
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5956
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5974
		{
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5975
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = nil
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5988
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5989
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = true
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = false
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = false
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = true
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6018
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6019
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6049
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6053
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6058
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6073
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6093
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6097
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6106
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6149
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6150
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6153
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6154
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6175
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6185
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6207
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6209
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6221
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6224
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6236
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6246
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6251
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6256
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6262
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6267
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6279
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6298
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6306
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6337
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6351
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6386
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6397
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6427
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6431
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6443
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6449
		{
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6451
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = nil
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = true
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = false
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.str = tree.AstFull
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.str = tree.AstRight
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6562
		{
			sqlVAL.str = tree.AstInner
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6568
		{
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6569
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.str = tree.AstHash
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.str = ""
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6636
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6660
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6668
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6697
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6710
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6718
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6719
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6727
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6733
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6741
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6743
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6751
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6763
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6764
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = types.String
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = types.Name
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6805
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6818
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = types.INet
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Oid
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6885
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6893
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = nil
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6916
		{
			sqlVAL.union.val = types.Int2
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = types.Int2
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = types.Int4
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = types.Int
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = types.Int
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = types.Int
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = types.Float4
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.Float4
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = types.Float
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = types.Float
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6960
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6968
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6976
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.Bool
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Bool
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7003
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = types.RegType
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7017
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7030
		{
			sqlVAL.union.val = types.Float
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7036
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7042
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7064
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = types.String
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = true
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = false
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = types.Date
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7113
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7118
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7125
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7126
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7128
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7136
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7152
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = true
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = false
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = false
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = types.Interval
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = tree.Year
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = tree.Month
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = tree.Day
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = tree.Month
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = nil
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = tree.Second
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7239
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7286
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7463
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7530
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7596
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7618
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7642
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7812
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7817
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7819
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7823
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7826
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7844
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7892
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7903
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7904
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7919
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7930
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7937
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7947
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8000
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8008
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8047
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8054
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8062
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8067
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8072
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8077
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8087
		{
			return unimplemented(sqllex, "treat")
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8108
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8113
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8118
		{
			return unimplemented(sqllex, "within group")
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8119
		{
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8127
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8144
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8154
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.str = ""
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8243
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8256
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8324
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8353
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.Any
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = tree.Some
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = tree.All
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8379
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8380
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = tree.Div
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8383
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8387
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = tree.LT
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8389
		{
			sqlVAL.union.val = tree.GT
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.LE
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.GE
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.NE
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.Like
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8452
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8456
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8479
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8499
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8559
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8570
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8595
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8599
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8603
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8609
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8625
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8629
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8635
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8713
		{
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8714
		{
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8718
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8728
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8786
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8794
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8817
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8826
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8830
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8834
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8838
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8860
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8869
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8880
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8889
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8897
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8994
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9001
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9005
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9009
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9023
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9027
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9031
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9044
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9062
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9075
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9082
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9107
		{
			sqlVAL.str = ""
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9113
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9117
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
