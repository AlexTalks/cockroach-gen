// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:594
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9668

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1062,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 892,
	199, 892,
	214, 249,
	294, 249,
	302, 732,
	329, 249,
	338, 732,
	377, 732,
	401, 249,
	425, 732,
	-2, 0,
	-1, 74,
	214, 253,
	-2, 0,
	-1, 75,
	109, 1062,
	188, 1062,
	411, 1062,
	412, 1062,
	-2, 0,
	-1, 87,
	122, 1036,
	138, 1036,
	196, 1036,
	225, 1036,
	258, 1036,
	268, 1036,
	406, 1036,
	-2, 1014,
	-1, 117,
	128, 653,
	213, 653,
	296, 633,
	347, 633,
	394, 653,
	-2, 0,
	-1, 118,
	4, 1064,
	21, 1064,
	22, 1064,
	23, 1064,
	24, 1064,
	25, 1064,
	27, 1064,
	33, 1064,
	38, 1064,
	39, 1064,
	40, 1064,
	41, 1064,
	42, 1064,
	43, 1064,
	44, 1064,
	45, 1064,
	46, 1064,
	47, 1064,
	48, 1064,
	49, 1064,
	51, 1064,
	52, 1064,
	53, 1064,
	54, 1064,
	55, 1064,
	56, 1064,
	59, 1064,
	60, 1064,
	61, 1064,
	62, 1064,
	64, 1064,
	65, 1064,
	69, 1064,
	70, 1064,
	71, 1064,
	72, 1064,
	73, 1064,
	74, 1064,
	76, 1064,
	77, 1064,
	78, 1064,
	79, 1064,
	81, 1064,
	83, 1064,
	84, 1064,
	85, 1064,
	88, 1064,
	89, 1064,
	97, 1064,
	98, 1064,
	99, 1064,
	100, 1064,
	101, 1064,
	102, 1064,
	103, 1064,
	104, 1064,
	106, 1064,
	108, 1064,
	109, 1064,
	111, 1064,
	114, 1064,
	115, 1064,
	116, 1064,
	118, 1064,
	120, 1064,
	121, 1064,
	123, 1064,
	124, 1064,
	125, 1064,
	126, 1064,
	127, 1064,
	128, 1064,
	129, 1064,
	130, 1064,
	131, 1064,
	132, 1064,
	133, 1064,
	134, 1064,
	135, 1064,
	137, 1064,
	143, 1064,
	144, 1064,
	145, 1064,
	146, 1064,
	147, 1064,
	148, 1064,
	150, 1064,
	152, 1064,
	156, 1064,
	157, 1064,
	159, 1064,
	160, 1064,
	162, 1064,
	163, 1064,
	165, 1064,
	166, 1064,
	167, 1064,
	168, 1064,
	169, 1064,
	170, 1064,
	171, 1064,
	172, 1064,
	174, 1064,
	175, 1064,
	177, 1064,
	178, 1064,
	179, 1064,
	182, 1064,
	183, 1064,
	184, 1064,
	185, 1064,
	188, 1064,
	189, 1064,
	190, 1064,
	191, 1064,
	192, 1064,
	193, 1064,
	194, 1064,
	195, 1064,
	197, 1064,
	199, 1064,
	201, 1064,
	203, 1064,
	204, 1064,
	205, 1064,
	207, 1064,
	208, 1064,
	211, 1064,
	212, 1064,
	213, 1064,
	214, 1064,
	216, 1064,
	217, 1064,
	219, 1064,
	220, 1064,
	222, 1064,
	223, 1064,
	226, 1064,
	227, 1064,
	230, 1064,
	231, 1064,
	232, 1064,
	234, 1064,
	235, 1064,
	236, 1064,
	237, 1064,
	238, 1064,
	239, 1064,
	240, 1064,
	241, 1064,
	242, 1064,
	243, 1064,
	245, 1064,
	246, 1064,
	247, 1064,
	248, 1064,
	250, 1064,
	252, 1064,
	254, 1064,
	255, 1064,
	256, 1064,
	257, 1064,
	259, 1064,
	260, 1064,
	261, 1064,
	263, 1064,
	264, 1064,
	265, 1064,
	266, 1064,
	269, 1064,
	270, 1064,
	271, 1064,
	273, 1064,
	275, 1064,
	276, 1064,
	277, 1064,
	278, 1064,
	279, 1064,
	280, 1064,
	281, 1064,
	282, 1064,
	283, 1064,
	284, 1064,
	286, 1064,
	287, 1064,
	288, 1064,
	289, 1064,
	290, 1064,
	291, 1064,
	293, 1064,
	295, 1064,
	296, 1064,
	297, 1064,
	298, 1064,
	299, 1064,
	300, 1064,
	301, 1064,
	302, 1064,
	303, 1064,
	305, 1064,
	306, 1064,
	307, 1064,
	308, 1064,
	309, 1064,
	311, 1064,
	312, 1064,
	313, 1064,
	314, 1064,
	315, 1064,
	316, 1064,
	317, 1064,
	318, 1064,
	320, 1064,
	322, 1064,
	323, 1064,
	324, 1064,
	325, 1064,
	326, 1064,
	327, 1064,
	329, 1064,
	330, 1064,
	331, 1064,
	332, 1064,
	333, 1064,
	334, 1064,
	335, 1064,
	336, 1064,
	338, 1064,
	339, 1064,
	340, 1064,
	341, 1064,
	342, 1064,
	343, 1064,
	344, 1064,
	345, 1064,
	346, 1064,
	347, 1064,
	349, 1064,
	350, 1064,
	351, 1064,
	352, 1064,
	353, 1064,
	355, 1064,
	356, 1064,
	357, 1064,
	358, 1064,
	359, 1064,
	361, 1064,
	362, 1064,
	363, 1064,
	364, 1064,
	365, 1064,
	366, 1064,
	367, 1064,
	368, 1064,
	369, 1064,
	370, 1064,
	371, 1064,
	372, 1064,
	374, 1064,
	375, 1064,
	376, 1064,
	378, 1064,
	379, 1064,
	380, 1064,
	381, 1064,
	382, 1064,
	383, 1064,
	384, 1064,
	386, 1064,
	387, 1064,
	388, 1064,
	389, 1064,
	390, 1064,
	392, 1064,
	394, 1064,
	395, 1064,
	396, 1064,
	397, 1064,
	398, 1064,
	400, 1064,
	401, 1064,
	402, 1064,
	404, 1064,
	405, 1064,
	408, 1064,
	409, 1064,
	410, 1064,
	411, 1064,
	412, 1064,
	413, 1064,
	415, 1064,
	417, 1064,
	418, 1064,
	419, 1064,
	420, 1064,
	421, 1064,
	422, 1064,
	423, 1064,
	425, 1064,
	426, 1064,
	427, 1064,
	432, 1064,
	433, 1064,
	434, 1064,
	435, 1064,
	436, 1064,
	437, 1064,
	-2, 0,
	-1, 119,
	1, 945,
	203, 945,
	293, 945,
	300, 945,
	440, 945,
	463, 945,
	-2, 0,
	-1, 121,
	1, 945,
	463, 945,
	-2, 0,
	-1, 122,
	1, 945,
	463, 945,
	-2, 0,
	-1, 123,
	1, 949,
	463, 949,
	-2, 0,
	-1, 148,
	122, 1035,
	138, 1035,
	196, 1035,
	225, 1035,
	258, 1035,
	268, 1035,
	406, 1035,
	-2, 1023,
	-1, 181,
	4, 1071,
	5, 1071,
	6, 1071,
	7, 1071,
	8, 1071,
	9, 1071,
	10, 1071,
	21, 1071,
	22, 1071,
	23, 1071,
	24, 1071,
	25, 1071,
	27, 1071,
	33, 1071,
	34, 1071,
	38, 1071,
	39, 1071,
	40, 1071,
	41, 1071,
	42, 1071,
	43, 1071,
	44, 1071,
	45, 1071,
	46, 1071,
	47, 1071,
	48, 1071,
	49, 1071,
	51, 1071,
	52, 1071,
	53, 1071,
	54, 1071,
	55, 1071,
	56, 1071,
	57, 1071,
	58, 1071,
	59, 1071,
	60, 1071,
	61, 1071,
	62, 1071,
	64, 1071,
	65, 1071,
	67, 1071,
	69, 1071,
	70, 1071,
	71, 1071,
	72, 1071,
	73, 1071,
	74, 1071,
	76, 1071,
	77, 1071,
	78, 1071,
	79, 1071,
	81, 1071,
	83, 1071,
	84, 1071,
	85, 1071,
	87, 1071,
	88, 1071,
	89, 1071,
	90, 1071,
	91, 1071,
	92, 1071,
	93, 1071,
	94, 1071,
	95, 1071,
	96, 1071,
	97, 1071,
	98, 1071,
	99, 1071,
	100, 1071,
	101, 1071,
	102, 1071,
	103, 1071,
	104, 1071,
	105, 1071,
	106, 1071,
	108, 1071,
	109, 1071,
	111, 1071,
	114, 1071,
	115, 1071,
	116, 1071,
	118, 1071,
	120, 1071,
	121, 1071,
	123, 1071,
	124, 1071,
	125, 1071,
	126, 1071,
	127, 1071,
	128, 1071,
	129, 1071,
	130, 1071,
	131, 1071,
	132, 1071,
	133, 1071,
	134, 1071,
	135, 1071,
	136, 1071,
	137, 1071,
	143, 1071,
	144, 1071,
	145, 1071,
	146, 1071,
	147, 1071,
	148, 1071,
	150, 1071,
	152, 1071,
	155, 1071,
	156, 1071,
	157, 1071,
	159, 1071,
	160, 1071,
	162, 1071,
	163, 1071,
	165, 1071,
	166, 1071,
	167, 1071,
	168, 1071,
	169, 1071,
	170, 1071,
	171, 1071,
	172, 1071,
	173, 1071,
	174, 1071,
	175, 1071,
	177, 1071,
	178, 1071,
	179, 1071,
	182, 1071,
	183, 1071,
	184, 1071,
	185, 1071,
	187, 1071,
	188, 1071,
	189, 1071,
	190, 1071,
	191, 1071,
	192, 1071,
	193, 1071,
	194, 1071,
	195, 1071,
	197, 1071,
	199, 1071,
	200, 1071,
	201, 1071,
	202, 1071,
	203, 1071,
	204, 1071,
	205, 1071,
	206, 1071,
	207, 1071,
	208, 1071,
	211, 1071,
	212, 1071,
	213, 1071,
	214, 1071,
	216, 1071,
	217, 1071,
	219, 1071,
	220, 1071,
	221, 1071,
	222, 1071,
	223, 1071,
	224, 1071,
	226, 1071,
	227, 1071,
	230, 1071,
	231, 1071,
	232, 1071,
	234, 1071,
	235, 1071,
	236, 1071,
	237, 1071,
	238, 1071,
	239, 1071,
	240, 1071,
	241, 1071,
	242, 1071,
	243, 1071,
	244, 1071,
	245, 1071,
	246, 1071,
	247, 1071,
	248, 1071,
	249, 1071,
	250, 1071,
	251, 1071,
	252, 1071,
	253, 1071,
	254, 1071,
	255, 1071,
	256, 1071,
	257, 1071,
	259, 1071,
	260, 1071,
	261, 1071,
	264, 1071,
	265, 1071,
	266, 1071,
	269, 1071,
	270, 1071,
	271, 1071,
	272, 1071,
	273, 1071,
	274, 1071,
	275, 1071,
	276, 1071,
	277, 1071,
	278, 1071,
	279, 1071,
	280, 1071,
	281, 1071,
	282, 1071,
	283, 1071,
	284, 1071,
	286, 1071,
	287, 1071,
	288, 1071,
	289, 1071,
	290, 1071,
	291, 1071,
	293, 1071,
	295, 1071,
	296, 1071,
	297, 1071,
	298, 1071,
	299, 1071,
	300, 1071,
	301, 1071,
	302, 1071,
	303, 1071,
	305, 1071,
	306, 1071,
	307, 1071,
	308, 1071,
	309, 1071,
	311, 1071,
	312, 1071,
	313, 1071,
	314, 1071,
	315, 1071,
	316, 1071,
	317, 1071,
	318, 1071,
	320, 1071,
	321, 1071,
	322, 1071,
	323, 1071,
	324, 1071,
	325, 1071,
	326, 1071,
	327, 1071,
	329, 1071,
	330, 1071,
	331, 1071,
	332, 1071,
	333, 1071,
	334, 1071,
	335, 1071,
	336, 1071,
	338, 1071,
	339, 1071,
	340, 1071,
	341, 1071,
	342, 1071,
	343, 1071,
	344, 1071,
	345, 1071,
	346, 1071,
	347, 1071,
	348, 1071,
	349, 1071,
	350, 1071,
	351, 1071,
	352, 1071,
	353, 1071,
	354, 1071,
	355, 1071,
	356, 1071,
	357, 1071,
	358, 1071,
	359, 1071,
	361, 1071,
	362, 1071,
	363, 1071,
	364, 1071,
	365, 1071,
	366, 1071,
	367, 1071,
	368, 1071,
	369, 1071,
	370, 1071,
	371, 1071,
	372, 1071,
	374, 1071,
	375, 1071,
	376, 1071,
	378, 1071,
	379, 1071,
	380, 1071,
	381, 1071,
	382, 1071,
	383, 1071,
	384, 1071,
	386, 1071,
	387, 1071,
	388, 1071,
	389, 1071,
	390, 1071,
	392, 1071,
	394, 1071,
	395, 1071,
	396, 1071,
	397, 1071,
	398, 1071,
	399, 1071,
	400, 1071,
	401, 1071,
	402, 1071,
	404, 1071,
	405, 1071,
	407, 1071,
	408, 1071,
	409, 1071,
	410, 1071,
	411, 1071,
	412, 1071,
	413, 1071,
	414, 1071,
	415, 1071,
	417, 1071,
	418, 1071,
	419, 1071,
	420, 1071,
	421, 1071,
	422, 1071,
	423, 1071,
	425, 1071,
	426, 1071,
	427, 1071,
	432, 1071,
	433, 1071,
	434, 1071,
	435, 1071,
	436, 1071,
	437, 1071,
	438, 1071,
	444, 1071,
	451, 1071,
	452, 1071,
	453, 1071,
	460, 1071,
	464, 1071,
	-2, 0,
	-1, 557,
	154, 1744,
	391, 1744,
	443, 1744,
	462, 1744,
	-2, 0,
	-1, 558,
	154, 1822,
	391, 1822,
	443, 1822,
	462, 1822,
	-2, 0,
	-1, 559,
	154, 1733,
	391, 1733,
	443, 1733,
	462, 1733,
	-2, 0,
	-1, 561,
	154, 1913,
	391, 1913,
	443, 1913,
	462, 1913,
	-2, 0,
	-1, 563,
	154, 1943,
	391, 1943,
	443, 1943,
	462, 1943,
	-2, 0,
	-1, 570,
	154, 1833,
	391, 1833,
	443, 1833,
	462, 1833,
	-2, 504,
	-1, 587,
	462, 1691,
	465, 1691,
	-2, 701,
	-1, 588,
	462, 1693,
	465, 1693,
	-2, 702,
	-1, 589,
	462, 1692,
	465, 1692,
	-2, 703,
	-1, 590,
	465, 1638,
	-2, 704,
	-1, 737,
	296, 634,
	347, 634,
	-2, 0,
	-1, 738,
	296, 633,
	347, 633,
	-2, 584,
	-1, 741,
	1, 663,
	459, 663,
	461, 663,
	463, 663,
	-2, 0,
	-1, 742,
	1, 700,
	151, 700,
	459, 700,
	461, 700,
	463, 700,
	-2, 0,
	-1, 750,
	1, 637,
	459, 637,
	461, 637,
	463, 637,
	-2, 0,
	-1, 753,
	1, 663,
	459, 663,
	461, 663,
	463, 663,
	-2, 0,
	-1, 754,
	1, 665,
	459, 665,
	461, 665,
	463, 665,
	-2, 0,
	-1, 755,
	1, 668,
	459, 668,
	461, 668,
	463, 668,
	-2, 0,
	-1, 759,
	1, 682,
	459, 682,
	461, 682,
	463, 682,
	-2, 0,
	-1, 760,
	1, 684,
	459, 684,
	461, 684,
	463, 684,
	-2, 0,
	-1, 803,
	138, 1073,
	225, 1073,
	258, 1073,
	-2, 1023,
	-1, 819,
	138, 1072,
	225, 1072,
	258, 1072,
	-2, 1023,
	-1, 843,
	462, 1690,
	-2, 512,
	-1, 872,
	460, 1682,
	-2, 1673,
	-1, 878,
	5, 1207,
	-2, 1724,
	-1, 879,
	5, 1208,
	-2, 1728,
	-1, 880,
	5, 1209,
	-2, 1727,
	-1, 881,
	5, 1210,
	-2, 1940,
	-1, 882,
	5, 1211,
	-2, 1835,
	-1, 883,
	5, 1212,
	-2, 1905,
	-1, 884,
	5, 1213,
	-2, 1907,
	-1, 885,
	5, 1214,
	-2, 1920,
	-1, 886,
	5, 1215,
	-2, 1908,
	-1, 887,
	5, 1216,
	-2, 1909,
	-1, 888,
	5, 1217,
	-2, 1723,
	-1, 889,
	5, 1218,
	-2, 1956,
	-1, 890,
	5, 1219,
	-2, 1797,
	-1, 891,
	5, 1220,
	-2, 1844,
	-1, 892,
	5, 1221,
	-2, 1846,
	-1, 893,
	5, 1222,
	-2, 1801,
	-1, 894,
	5, 1223,
	460, 1700,
	-2, 1691,
	-1, 895,
	5, 1279,
	460, 1279,
	-2, 1991,
	-1, 900,
	460, 1701,
	-2, 1692,
	-1, 902,
	5, 1227,
	-2, 1989,
	-1, 903,
	5, 1228,
	-2, 1990,
	-1, 904,
	5, 1229,
	-2, 1800,
	-1, 905,
	5, 1230,
	-2, 2002,
	-1, 906,
	5, 1231,
	-2, 1802,
	-1, 907,
	5, 1232,
	-2, 1803,
	-1, 908,
	5, 1233,
	-2, 1804,
	-1, 909,
	5, 1234,
	-2, 1971,
	-1, 910,
	5, 1235,
	-2, 2000,
	-1, 911,
	5, 1236,
	-2, 1780,
	-1, 912,
	5, 1237,
	-2, 1781,
	-1, 913,
	5, 1251,
	-2, 1983,
	-1, 915,
	5, 1226,
	-2, 1979,
	-1, 916,
	5, 1226,
	-2, 1978,
	-1, 917,
	5, 1226,
	-2, 1995,
	-1, 918,
	5, 1243,
	-2, 1973,
	-1, 919,
	5, 1244,
	-2, 1725,
	-1, 920,
	5, 1254,
	-2, 1972,
	-1, 921,
	5, 1256,
	-2, 2011,
	-1, 923,
	5, 1267,
	-2, 1754,
	-1, 924,
	5, 1278,
	-2, 2004,
	-1, 925,
	5, 1270,
	-2, 2005,
	-1, 926,
	5, 1278,
	-2, 2006,
	-1, 927,
	5, 1274,
	-2, 2007,
	-1, 928,
	5, 1193,
	-2, 1810,
	-1, 929,
	5, 1194,
	-2, 1811,
	-1, 930,
	462, 1688,
	-2, 1672,
	-1, 931,
	460, 2031,
	-2, 1689,
	-1, 951,
	5, 1262,
	-2, 1931,
	-1, 968,
	5, 1261,
	-2, 2012,
	-1, 978,
	5, 1263,
	426, 1263,
	-2, 1974,
	-1, 979,
	5, 1264,
	426, 1264,
	-2, 1975,
	-1, 1015,
	460, 1700,
	-2, 1691,
	-1, 1042,
	154, 1943,
	391, 1943,
	443, 1943,
	462, 1943,
	-2, 0,
	-1, 1045,
	1, 490,
	463, 490,
	-2, 957,
	-1, 1165,
	311, 1669,
	453, 1669,
	-2, 1668,
	-1, 1188,
	464, 1669,
	-2, 1670,
	-1, 1223,
	302, 732,
	425, 732,
	-2, 248,
	-1, 1243,
	282, 1060,
	-2, 865,
	-1, 1252,
	262, 1695,
	-2, 0,
	-1, 1316,
	1, 365,
	459, 365,
	461, 365,
	463, 365,
	-2, 1034,
	-1, 1319,
	4, 2010,
	11, 2010,
	12, 2010,
	14, 2010,
	15, 2010,
	16, 2010,
	17, 2010,
	18, 2010,
	19, 2010,
	21, 2010,
	22, 2010,
	23, 2010,
	24, 2010,
	25, 2010,
	27, 2010,
	30, 2010,
	31, 2010,
	33, 2010,
	35, 2010,
	38, 2010,
	39, 2010,
	40, 2010,
	41, 2010,
	42, 2010,
	43, 2010,
	44, 2010,
	45, 2010,
	46, 2010,
	47, 2010,
	48, 2010,
	49, 2010,
	51, 2010,
	52, 2010,
	53, 2010,
	54, 2010,
	55, 2010,
	56, 2010,
	59, 2010,
	60, 2010,
	61, 2010,
	62, 2010,
	64, 2010,
	65, 2010,
	66, 2010,
	69, 2010,
	70, 2010,
	71, 2010,
	72, 2010,
	73, 2010,
	74, 2010,
	75, 2010,
	76, 2010,
	77, 2010,
	78, 2010,
	79, 2010,
	81, 2010,
	82, 2010,
	83, 2010,
	84, 2010,
	85, 2010,
	87, 2010,
	88, 2010,
	89, 2010,
	97, 2010,
	98, 2010,
	99, 2010,
	100, 2010,
	101, 2010,
	102, 2010,
	103, 2010,
	104, 2010,
	106, 2010,
	108, 2010,
	109, 2010,
	111, 2010,
	114, 2010,
	115, 2010,
	116, 2010,
	118, 2010,
	120, 2010,
	121, 2010,
	123, 2010,
	124, 2010,
	125, 2010,
	126, 2010,
	127, 2010,
	128, 2010,
	129, 2010,
	130, 2010,
	131, 2010,
	132, 2010,
	133, 2010,
	134, 2010,
	135, 2010,
	139, 2010,
	140, 2010,
	141, 2010,
	142, 2010,
	143, 2010,
	144, 2010,
	145, 2010,
	146, 2010,
	147, 2010,
	148, 2010,
	149, 2010,
	150, 2010,
	152, 2010,
	155, 2010,
	156, 2010,
	157, 2010,
	159, 2010,
	160, 2010,
	162, 2010,
	163, 2010,
	165, 2010,
	166, 2010,
	167, 2010,
	168, 2010,
	169, 2010,
	170, 2010,
	171, 2010,
	172, 2010,
	173, 2010,
	174, 2010,
	175, 2010,
	176, 2010,
	177, 2010,
	178, 2010,
	179, 2010,
	180, 2010,
	181, 2010,
	183, 2010,
	184, 2010,
	185, 2010,
	187, 2010,
	188, 2010,
	189, 2010,
	190, 2010,
	191, 2010,
	192, 2010,
	193, 2010,
	194, 2010,
	195, 2010,
	197, 2010,
	199, 2010,
	200, 2010,
	201, 2010,
	202, 2010,
	203, 2010,
	204, 2010,
	205, 2010,
	206, 2010,
	207, 2010,
	208, 2010,
	209, 2010,
	210, 2010,
	211, 2010,
	212, 2010,
	213, 2010,
	214, 2010,
	216, 2010,
	217, 2010,
	219, 2010,
	220, 2010,
	221, 2010,
	222, 2010,
	223, 2010,
	224, 2010,
	226, 2010,
	227, 2010,
	230, 2010,
	231, 2010,
	232, 2010,
	233, 2010,
	234, 2010,
	235, 2010,
	236, 2010,
	237, 2010,
	238, 2010,
	239, 2010,
	240, 2010,
	241, 2010,
	242, 2010,
	243, 2010,
	244, 2010,
	245, 2010,
	246, 2010,
	247, 2010,
	248, 2010,
	251, 2010,
	252, 2010,
	254, 2010,
	255, 2010,
	256, 2010,
	257, 2010,
	259, 2010,
	260, 2010,
	261, 2010,
	264, 2010,
	265, 2010,
	266, 2010,
	267, 2010,
	269, 2010,
	270, 2010,
	271, 2010,
	273, 2010,
	275, 2010,
	276, 2010,
	277, 2010,
	278, 2010,
	279, 2010,
	280, 2010,
	281, 2010,
	282, 2010,
	283, 2010,
	284, 2010,
	286, 2010,
	287, 2010,
	288, 2010,
	289, 2010,
	290, 2010,
	291, 2010,
	293, 2010,
	295, 2010,
	296, 2010,
	297, 2010,
	298, 2010,
	299, 2010,
	300, 2010,
	301, 2010,
	302, 2010,
	303, 2010,
	305, 2010,
	306, 2010,
	307, 2010,
	308, 2010,
	309, 2010,
	310, 2010,
	311, 2010,
	312, 2010,
	313, 2010,
	314, 2010,
	315, 2010,
	316, 2010,
	317, 2010,
	318, 2010,
	320, 2010,
	321, 2010,
	322, 2010,
	323, 2010,
	324, 2010,
	325, 2010,
	326, 2010,
	327, 2010,
	328, 2010,
	329, 2010,
	330, 2010,
	331, 2010,
	332, 2010,
	333, 2010,
	334, 2010,
	335, 2010,
	336, 2010,
	338, 2010,
	339, 2010,
	340, 2010,
	341, 2010,
	342, 2010,
	343, 2010,
	344, 2010,
	345, 2010,
	346, 2010,
	347, 2010,
	349, 2010,
	350, 2010,
	351, 2010,
	352, 2010,
	353, 2010,
	354, 2010,
	355, 2010,
	356, 2010,
	357, 2010,
	358, 2010,
	359, 2010,
	361, 2010,
	362, 2010,
	363, 2010,
	364, 2010,
	365, 2010,
	366, 2010,
	367, 2010,
	368, 2010,
	369, 2010,
	370, 2010,
	371, 2010,
	372, 2010,
	374, 2010,
	375, 2010,
	376, 2010,
	378, 2010,
	379, 2010,
	380, 2010,
	381, 2010,
	382, 2010,
	383, 2010,
	384, 2010,
	386, 2010,
	387, 2010,
	388, 2010,
	389, 2010,
	390, 2010,
	392, 2010,
	394, 2010,
	395, 2010,
	396, 2010,
	397, 2010,
	398, 2010,
	400, 2010,
	401, 2010,
	402, 2010,
	404, 2010,
	405, 2010,
	408, 2010,
	409, 2010,
	410, 2010,
	411, 2010,
	412, 2010,
	413, 2010,
	415, 2010,
	417, 2010,
	418, 2010,
	419, 2010,
	420, 2010,
	421, 2010,
	422, 2010,
	423, 2010,
	425, 2010,
	426, 2010,
	427, 2010,
	432, 2010,
	433, 2010,
	434, 2010,
	435, 2010,
	436, 2010,
	437, 2010,
	438, 2010,
	439, 2010,
	441, 2010,
	442, 2010,
	443, 2010,
	444, 2010,
	445, 2010,
	446, 2010,
	448, 2010,
	449, 2010,
	450, 2010,
	451, 2010,
	452, 2010,
	453, 2010,
	454, 2010,
	455, 2010,
	456, 2010,
	458, 2010,
	461, 2010,
	462, 2010,
	464, 2010,
	465, 2010,
	-2, 0,
	-1, 1322,
	154, 1913,
	391, 1913,
	443, 1913,
	462, 1913,
	-2, 0,
	-1, 1351,
	296, 634,
	347, 634,
	-2, 0,
	-1, 1374,
	1, 629,
	459, 629,
	461, 629,
	463, 629,
	-2, 0,
	-1, 1375,
	1, 654,
	459, 654,
	461, 654,
	463, 654,
	-2, 0,
	-1, 1376,
	1, 636,
	459, 636,
	461, 636,
	463, 636,
	-2, 0,
	-1, 1378,
	1, 640,
	459, 640,
	461, 640,
	463, 640,
	-2, 0,
	-1, 1403,
	1, 1963,
	459, 1963,
	461, 1963,
	462, 1963,
	463, 1963,
	-2, 680,
	-1, 1404,
	1, 1910,
	459, 1910,
	461, 1910,
	462, 1910,
	463, 1910,
	-2, 681,
	-1, 1417,
	1, 952,
	463, 952,
	-2, 957,
	-1, 1422,
	138, 1072,
	225, 1072,
	258, 1072,
	-2, 1023,
	-1, 1520,
	122, 1036,
	138, 1036,
	196, 1036,
	225, 1036,
	258, 1036,
	268, 1036,
	406, 1036,
	-2, 1435,
	-1, 1573,
	461, 1573,
	-2, 0,
	-1, 1615,
	122, 1036,
	138, 1036,
	196, 1036,
	225, 1036,
	258, 1036,
	268, 1036,
	406, 1036,
	-2, 1144,
	-1, 1664,
	460, 1266,
	-2, 1254,
	-1, 1708,
	1, 492,
	463, 492,
	-2, 957,
	-1, 1905,
	1, 631,
	459, 631,
	461, 631,
	463, 631,
	-2, 0,
	-1, 1906,
	1, 656,
	459, 656,
	461, 656,
	463, 656,
	-2, 0,
	-1, 1994,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1315,
	-1, 1995,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1316,
	-1, 1996,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1317,
	-1, 1997,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1318,
	-1, 1998,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1319,
	-1, 1999,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1320,
	-1, 2000,
	82, 0,
	209, 0,
	210, 0,
	445, 0,
	446, 0,
	-2, 1321,
	-1, 2001,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1322,
	-1, 2013,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1334,
	-1, 2014,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1335,
	-1, 2015,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1336,
	-1, 2018,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1341,
	-1, 2024,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1345,
	-1, 2026,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1353,
	-1, 2027,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1354,
	-1, 2028,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1355,
	-1, 2029,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1356,
	-1, 2123,
	5, 1223,
	154, 1584,
	460, 1700,
	-2, 1691,
	-1, 2124,
	154, 1585,
	-2, 1967,
	-1, 2125,
	154, 1586,
	-2, 1832,
	-1, 2126,
	154, 1587,
	-2, 1755,
	-1, 2127,
	154, 1588,
	-2, 1791,
	-1, 2128,
	154, 1589,
	-2, 1830,
	-1, 2129,
	154, 1590,
	-2, 1904,
	-1, 2205,
	1, 1145,
	2, 1145,
	87, 1145,
	122, 1145,
	138, 1145,
	151, 1145,
	155, 1145,
	161, 1145,
	164, 1145,
	187, 1145,
	196, 1145,
	206, 1145,
	221, 1145,
	225, 1145,
	244, 1145,
	258, 1145,
	262, 1145,
	268, 1145,
	319, 1145,
	321, 1145,
	406, 1145,
	416, 1145,
	429, 1145,
	430, 1145,
	431, 1145,
	440, 1145,
	459, 1145,
	461, 1145,
	463, 1145,
	465, 1145,
	-2, 1144,
	-1, 2210,
	460, 1674,
	-2, 1686,
	-1, 2231,
	460, 1265,
	-2, 1255,
	-1, 2470,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1343,
	-1, 2471,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1347,
	-1, 2477,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1349,
	-1, 2659,
	203, 957,
	293, 957,
	300, 957,
	440, 957,
	-2, 489,
	-1, 2751,
	282, 1060,
	-2, 865,
	-1, 2832,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1351,
	-1, 2839,
	200, 0,
	202, 0,
	251, 0,
	-2, 1370,
	-1, 2902,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1399,
	-1, 2903,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1400,
	-1, 2904,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1401,
	-1, 2908,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1405,
	-1, 2909,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1406,
	-1, 2910,
	14, 0,
	15, 0,
	16, 0,
	441, 0,
	442, 0,
	443, 0,
	-2, 1407,
	-1, 2954,
	460, 1675,
	-2, 1687,
	-1, 3042,
	462, 2113,
	-2, 1000,
	-1, 3089,
	200, 0,
	202, 0,
	251, 0,
	-2, 1371,
	-1, 3092,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1374,
	-1, 3093,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1376,
	-1, 3252,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1375,
	-1, 3253,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1377,
	-1, 3263,
	200, 0,
	-2, 1408,
	-1, 3369,
	200, 0,
	-2, 1409,
	-1, 3485,
	43, 0,
	173, 0,
	224, 0,
	354, 0,
	438, 0,
	444, 0,
	-2, 1970,
}

const sqlPrivate = 57344

const sqlLast = 76586

var sqlAct = [...]int{

	900, 3293, 3579, 3320, 3494, 3484, 3296, 3569, 2593, 2738,
	3454, 3195, 3463, 2154, 3451, 3438, 3495, 3532, 3496, 2370,
	3327, 3373, 3282, 2594, 3219, 2870, 1016, 1981, 3075, 2974,
	829, 3483, 1308, 3034, 2767, 3029, 3243, 3332, 3151, 213,
	2676, 213, 213, 2197, 213, 213, 213, 213, 213, 32,
	1639, 213, 2041, 2734, 3016, 1169, 1304, 1435, 820, 589,
	1881, 2402, 3224, 2760, 1194, 1051, 1756, 2975, 3267, 2359,
	2762, 568, 2463, 1610, 2336, 2318, 2339, 213, 2334, 2621,
	1860, 589, 1162, 1070, 2404, 2635, 1608, 1008, 1518, 2579,
	3074, 2608, 2412, 2401, 1358, 2393, 2597, 2395, 2371, 1839,
	685, 1832, 1582, 2262, 1842, 1831, 2092, 2198, 2925, 2599,
	2196, 4, 2319, 857, 3123, 2578, 1765, 1978, 1546, 2498,
	3374, 1528, 2072, 1640, 2054, 1974, 828, 141, 2459, 1181,
	1794, 1783, 896, 3321, 1743, 2411, 1741, 2200, 1058, 1417,
	1790, 2640, 2172, 816, 1583, 2084, 1178, 2038, 2337, 2295,
	2736, 2151, 1000, 1171, 590, 1317, 1301, 2364, 1828, 1237,
	1291, 2405, 2066, 1311, 1047, 536, 1003, 2260, 591, 1541,
	2162, 1592, 2252, 2180, 148, 982, 213, 213, 522, 1509,
	2119, 1436, 544, 207, 206, 2055, 149, 680, 1434, 2294,
	585, 1827, 1315, 86, 552, 562, 1848, 1267, 661, 1755,
	630, 856, 141, 1191, 539, 1005, 980, 37, 1416, 36,
	732, 547, 34, 25, 23, 748, 1440, 1249, 21, 2943,
	2494, 2944, 1862, 1882, 1862, 2595, 1448, 1449, 2171, 1862,
	824, 3609, 1055, 205, 922, 2171, 3600, 3599, 2777, 2657,
	2171, 2171, 594, 597, 3578, 3561, 1479, 3559, 1799, 3165,
	3518, 3165, 3516, 1451, 3519, 3514, 2171, 2417, 3511, 2171,
	824, 2776, 3512, 3508, 594, 597, 3505, 3509, 3481, 819,
	1799, 695, 1799, 3480, 3479, 1448, 1449, 1799, 1874, 3476,
	3475, 1450, 3433, 1874, 1874, 3423, 2224, 3422, 3416, 3165,
	1470, 3165, 1799, 997, 3410, 1479, 3408, 1467, 3165, 3371,
	3165, 3354, 1451, 2224, 3351, 1799, 3310, 3309, 3165, 2164,
	1799, 1799, 1032, 983, 983, 1212, 804, 1377, 3302, 3301,
	3273, 1206, 1799, 3165, 1799, 1448, 1449, 3254, 803, 3241,
	1450, 2224, 3434, 1874, 3232, 1055, 3085, 3192, 2789, 1470,
	3357, 2171, 2513, 3182, 825, 1479, 1467, 2171, 2514, 3164,
	1874, 2929, 1451, 3165, 1473, 1474, 1475, 1476, 811, 3091,
	2929, 3050, 3044, 2224, 1456, 2805, 2805, 3014, 2949, 2939,
	2932, 3015, 2950, 2940, 2171, 2863, 2163, 2851, 2804, 1799,
	1450, 2171, 2805, 984, 2796, 2836, 2729, 2592, 2797, 1470,
	1874, 2171, 2220, 2590, 2589, 1478, 1480, 2171, 2171, 3183,
	986, 1027, 987, 1473, 1474, 1475, 1476, 2543, 2526, 181,
	2515, 2171, 2527, 1456, 2171, 2391, 2237, 2223, 2218, 1878,
	2171, 2224, 2171, 1799, 1465, 1466, 1799, 2171, 2212, 2170,
	1877, 2797, 1799, 2171, 1878, 2309, 1200, 1448, 1449, 2251,
	1760, 1714, 2789, 2346, 1478, 1480, 2462, 1861, 1471, 183,
	2069, 1798, 2249, 1473, 1474, 1475, 1476, 2497, 1578, 1190,
	1609, 3001, 2827, 1456, 1451, 2814, 1793, 2778, 2191, 1360,
	2367, 2190, 2189, 1465, 1466, 1028, 2551, 2552, 2188, 2569,
	2570, 2571, 1211, 1863, 1734, 1863, 2779, 3140, 1205, 2187,
	1863, 988, 1450, 182, 1478, 1480, 985, 1471, 810, 1519,
	2441, 3102, 181, 175, 809, 808, 807, 806, 802, 801,
	800, 176, 799, 798, 797, 796, 2070, 795, 794, 793,
	792, 791, 790, 730, 729, 1477, 728, 213, 727, 726,
	725, 724, 150, 723, 2551, 2552, 722, 2569, 2570, 2571,
	2566, 721, 183, 1472, 720, 719, 718, 1471, 2947, 2776,
	1028, 717, 716, 3087, 715, 213, 714, 713, 712, 711,
	710, 709, 213, 708, 707, 706, 705, 704, 694, 693,
	652, 651, 610, 609, 1477, 1456, 608, 600, 213, 1073,
	213, 213, 1174, 213, 1073, 213, 182, 2071, 2068, 599,
	598, 575, 1472, 213, 213, 574, 573, 1057, 2566, 572,
	556, 1062, 203, 202, 201, 200, 855, 199, 198, 197,
	196, 195, 194, 193, 2557, 192, 191, 190, 213, 189,
	2163, 2806, 75, 1028, 1477, 150, 188, 187, 1517, 3607,
	186, 1870, 213, 1861, 1174, 1174, 213, 213, 1949, 213,
	185, 1184, 1472, 184, 2638, 1519, 2520, 2509, 2324, 2352,
	181, 213, 181, 1199, 2213, 1204, 181, 1210, 1611, 213,
	1468, 1464, 2204, 1461, 1459, 1460, 1452, 1453, 1454, 1455,
	1457, 1458, 2557, 213, 213, 213, 213, 213, 1174, 1174,
	1447, 1884, 2110, 1174, 2073, 213, 1174, 213, 213, 1071,
	183, 2108, 183, 2106, 1182, 1739, 183, 2104, 2567, 1549,
	1549, 213, 181, 1045, 2102, 1548, 1548, 1625, 1535, 1468,
	1464, 1312, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457,
	1458, 1196, 1064, 2572, 1530, 1018, 1552, 1547, 827, 3501,
	1066, 3482, 1159, 1164, 182, 3404, 182, 1174, 3364, 3233,
	182, 1328, 183, 1379, 175, 1167, 175, 1193, 1331, 1883,
	175, 3360, 176, 3358, 176, 3228, 2567, 1040, 176, 213,
	3144, 1192, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457,
	1458, 181, 213, 150, 3292, 150, 594, 597, 3122, 150,
	996, 3121, 3109, 3108, 2067, 1254, 182, 213, 3107, 3106,
	3100, 3099, 3098, 2568, 3013, 1320, 175, 1243, 1246, 2963,
	1378, 1332, 2962, 2960, 176, 2953, 2922, 2921, 2229, 1530,
	141, 183, 2920, 2847, 1165, 2843, 2633, 2800, 1188, 2586,
	2577, 2550, 2547, 1305, 2546, 2366, 2999, 2353, 181, 2544,
	2533, 2532, 1448, 1449, 1295, 1298, 1318, 2531, 2528, 2525,
	2314, 2503, 2551, 2552, 117, 2502, 2495, 2392, 1387, 1324,
	2205, 2568, 1479, 2077, 1251, 182, 1531, 1447, 1529, 1451,
	1804, 1446, 1423, 1836, 3577, 175, 3576, 3517, 183, 1250,
	1250, 1017, 2872, 176, 3471, 3469, 825, 1452, 1453, 1454,
	1455, 1457, 1458, 1802, 3401, 3398, 3376, 1450, 3395, 3394,
	3393, 3389, 3383, 3355, 150, 3350, 3349, 2044, 2281, 3288,
	1344, 3265, 3238, 3237, 3217, 3214, 2563, 2564, 2565, 1188,
	3208, 3139, 182, 2562, 2560, 2561, 2553, 2554, 2555, 2556,
	2558, 2559, 175, 1422, 1415, 2226, 3120, 1735, 2296, 3064,
	176, 3061, 2990, 2989, 2978, 2977, 2458, 872, 2935, 2838,
	2807, 2790, 2754, 2050, 1337, 2723, 2701, 1421, 2679, 2678,
	2653, 150, 2591, 3227, 1352, 2651, 2524, 2523, 181, 2508,
	2486, 2333, 1553, 1433, 2563, 2564, 2565, 1550, 2551, 2552,
	1456, 2562, 2560, 2561, 2553, 2554, 2555, 2556, 2558, 2559,
	2557, 1420, 213, 3185, 1542, 1539, 1418, 2233, 2232, 2351,
	2208, 2185, 2169, 2100, 1513, 1624, 1581, 1577, 183, 1576,
	1575, 1478, 1480, 804, 1448, 1449, 1574, 1573, 213, 1589,
	1580, 1572, 1571, 1570, 1569, 803, 181, 1567, 213, 1073,
	213, 213, 213, 1424, 1479, 1566, 1565, 589, 213, 213,
	1564, 1451, 589, 213, 1563, 1562, 1561, 1634, 213, 1443,
	1444, 1560, 182, 1559, 1174, 1551, 1558, 1448, 1449, 1604,
	1557, 1556, 175, 1706, 1471, 1885, 183, 1555, 825, 1450,
	176, 2551, 2552, 181, 1532, 1073, 1514, 1512, 1470, 1507,
	1039, 1030, 1023, 3213, 1451, 1467, 3141, 3095, 2959, 1619,
	3277, 150, 1627, 1516, 2942, 2938, 1543, 1544, 1599, 1737,
	1448, 1449, 1636, 1586, 1587, 2679, 3143, 1703, 2614, 1711,
	182, 2512, 1450, 183, 2186, 2958, 2557, 2551, 2552, 1705,
	175, 1531, 2649, 1510, 1618, 899, 1734, 1451, 176, 983,
	1620, 1014, 1055, 1611, 1734, 2566, 141, 1734, 3396, 1628,
	2763, 1061, 1473, 1474, 1475, 1476, 3231, 3184, 2530, 150,
	2945, 2109, 1456, 1059, 1645, 1450, 2792, 182, 2704, 1472,
	2107, 2791, 2105, 3333, 1631, 3024, 2103, 175, 1413, 2551,
	2552, 1537, 1052, 2101, 1055, 176, 1629, 2298, 2529, 2468,
	1730, 1616, 1549, 1478, 1480, 1740, 1351, 1388, 1548, 2283,
	1760, 839, 1708, 1060, 1056, 3361, 150, 3359, 1579, 1720,
	1174, 213, 2988, 2740, 1882, 2739, 1562, 1073, 825, 2557,
	1749, 1055, 1465, 1466, 1359, 788, 1733, 1607, 1613, 1606,
	594, 597, 1605, 1603, 1602, 594, 597, 1635, 1601, 1562,
	3328, 1360, 1702, 1833, 3005, 2992, 1471, 2812, 1456, 2717,
	1778, 3268, 3291, 1637, 1448, 1449, 213, 213, 995, 2518,
	3580, 2595, 2874, 213, 789, 1780, 2085, 3502, 1782, 2231,
	1568, 1787, 1053, 213, 1479, 1545, 1341, 2732, 1726, 1054,
	1824, 1451, 213, 1227, 213, 1666, 213, 3513, 3510, 2772,
	213, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 2970, 3448,
	3030, 2399, 213, 2567, 2555, 2556, 2558, 2559, 1837, 1450,
	1725, 1724, 2363, 3415, 1734, 1731, 3547, 2557, 2455, 1011,
	3175, 1215, 2238, 1477, 3503, 3548, 647, 1800, 2264, 2661,
	1385, 1764, 3604, 3319, 782, 784, 1432, 1225, 1791, 1820,
	3312, 1472, 1174, 213, 1174, 3007, 2255, 213, 1937, 1386,
	1174, 2069, 1935, 1174, 213, 3003, 213, 213, 2253, 769,
	823, 1709, 3002, 1046, 2967, 1193, 1174, 1174, 1174, 2227,
	213, 1430, 2966, 1795, 2507, 213, 1845, 1854, 2255, 1192,
	2506, 1721, 780, 778, 589, 213, 764, 213, 775, 213,
	2253, 213, 1456, 213, 594, 597, 1865, 2505, 2568, 1867,
	1061, 2567, 1869, 2504, 1786, 648, 1872, 213, 815, 1226,
	213, 1728, 213, 2472, 1797, 1384, 2316, 2070, 2267, 1055,
	2308, 213, 2305, 1478, 1480, 1339, 2650, 1852, 2553, 2554,
	2555, 2556, 2558, 2559, 822, 2286, 2219, 2025, 1419, 1189,
	213, 1901, 2663, 1814, 1813, 2096, 213, 1887, 1061, 213,
	1279, 2095, 1060, 1757, 3186, 1983, 2360, 2813, 1468, 1464,
	1947, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	1260, 1073, 1259, 2703, 3414, 1946, 1471, 1431, 1021, 1847,
	1889, 765, 1850, 1753, 1258, 1221, 1257, 1334, 2071, 2068,
	1823, 3249, 1812, 642, 2285, 1318, 2568, 1896, 2245, 2211,
	1060, 1238, 1892, 1667, 1758, 1759, 824, 1880, 772, 1019,
	2551, 2552, 1458, 1795, 1962, 1948, 1890, 1953, 2562, 2560,
	2561, 2553, 2554, 2555, 2556, 2558, 2559, 2040, 2274, 1898,
	1899, 1900, 1754, 1729, 1879, 825, 1429, 1236, 1040, 1760,
	3171, 1959, 833, 3298, 1904, 1891, 3499, 2056, 2057, 2980,
	2040, 1905, 1454, 1455, 1457, 1458, 1073, 2266, 1945, 2302,
	1956, 3473, 1052, 641, 1052, 2056, 2082, 594, 597, 1353,
	2085, 1472, 2559, 1910, 1917, 1620, 1235, 2137, 2273, 1735,
	2296, 1982, 1645, 1645, 1335, 2073, 1951, 1735, 2296, 2048,
	1735, 2296, 1979, 1980, 1851, 2046, 1383, 1426, 1960, 213,
	2816, 2118, 1906, 2122, 2122, 2135, 2815, 2056, 1350, 1957,
	2155, 2157, 1374, 1412, 2438, 2161, 2562, 2560, 2561, 2553,
	2554, 2555, 2556, 2558, 2559, 766, 1360, 3547, 650, 649,
	1073, 213, 1952, 2073, 1950, 804, 2769, 1961, 804, 804,
	213, 2854, 2217, 213, 821, 1744, 1073, 1970, 2557, 1745,
	1971, 1972, 1053, 1360, 1053, 898, 1911, 1642, 2209, 1054,
	3584, 1054, 2660, 1375, 1955, 2857, 2086, 1038, 702, 2991,
	3500, 3537, 2265, 2081, 2094, 2241, 1223, 2714, 3564, 2098,
	2099, 2460, 2461, 2206, 3169, 2067, 3248, 2243, 3431, 2284,
	1340, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	854, 2254, 2192, 1666, 1666, 2193, 2202, 2203, 2052, 2709,
	1777, 1762, 2855, 1760, 1238, 640, 3594, 639, 1338, 2244,
	764, 3390, 2662, 2177, 786, 213, 825, 776, 785, 1278,
	767, 679, 2567, 1174, 2242, 576, 983, 2079, 1746, 825,
	1936, 1751, 815, 825, 1934, 643, 3498, 1618, 1744, 1862,
	3565, 1748, 1745, 1944, 2770, 2176, 2210, 1735, 1732, 2691,
	1073, 1540, 2073, 1751, 1220, 213, 823, 2551, 2552, 768,
	2221, 2130, 1789, 213, 2159, 776, 777, 2167, 2168, 2146,
	3536, 776, 2981, 2647, 213, 141, 2178, 1020, 1711, 1398,
	2182, 2183, 1788, 3004, 2726, 818, 3572, 213, 2348, 1055,
	1174, 1055, 2690, 2306, 1616, 3170, 1750, 1751, 3076, 2073,
	3259, 2769, 3554, 213, 1073, 765, 3459, 1174, 3400, 213,
	213, 1506, 1784, 3429, 2522, 2280, 2256, 2568, 2228, 3299,
	2181, 825, 582, 1551, 2076, 3567, 2693, 3585, 2201, 1010,
	822, 1746, 3204, 1758, 1759, 213, 824, 213, 3212, 2321,
	213, 1909, 3430, 3070, 1748, 1744, 2313, 2955, 1033, 1745,
	2695, 2022, 1336, 2474, 2236, 213, 3079, 1362, 3018, 2317,
	2250, 1785, 213, 2326, 213, 2328, 213, 1543, 1544, 2303,
	2320, 3497, 213, 773, 1012, 213, 2039, 213, 3162, 213,
	2235, 213, 213, 1903, 213, 1174, 1174, 1174, 2239, 1174,
	1645, 2288, 1751, 213, 213, 2557, 213, 213, 2694, 1750,
	2289, 2343, 824, 3546, 3544, 584, 3159, 213, 2365, 3535,
	2365, 3338, 1439, 2047, 2444, 2276, 2259, 3077, 2387, 2388,
	213, 213, 213, 2697, 3216, 213, 2287, 213, 2268, 2270,
	213, 2758, 213, 703, 213, 1425, 1781, 2383, 1746, 2304,
	2553, 2554, 2555, 2556, 2558, 2559, 1349, 1766, 3160, 766,
	1014, 1748, 1014, 2307, 2357, 213, 213, 213, 213, 2415,
	213, 2418, 2419, 1193, 2416, 3566, 1770, 3595, 2320, 1632,
	2320, 2297, 2299, 2300, 2301, 2355, 3570, 2322, 2429, 2567,
	1395, 2020, 1591, 2331, 2023, 2911, 3245, 3205, 213, 2431,
	2436, 2432, 594, 597, 2398, 1751, 1826, 2447, 2347, 2389,
	1863, 2376, 1595, 578, 1591, 1037, 1750, 1588, 3118, 1767,
	1031, 1666, 2449, 2426, 141, 2420, 1026, 2421, 2369, 601,
	1165, 583, 521, 1438, 1761, 1722, 2666, 1428, 2036, 2374,
	2385, 1747, 2019, 3589, 1598, 2380, 1188, 2381, 2384, 2382,
	821, 3304, 1318, 2442, 2390, 3303, 2400, 3571, 2386, 3286,
	1595, 3380, 2034, 2179, 767, 2641, 1522, 813, 1719, 764,
	1527, 580, 2969, 1506, 2413, 1642, 1642, 2428, 1596, 2759,
	1396, 3402, 1595, 2674, 2568, 2670, 2433, 2356, 2434, 3573,
	2435, 815, 1598, 3174, 2500, 2501, 2475, 213, 3244, 1771,
	3173, 2338, 3155, 768, 2335, 2446, 3156, 1846, 1835, 2510,
	577, 1593, 1751, 2450, 1598, 1834, 2453, 534, 1808, 1966,
	1437, 2853, 2452, 2443, 1188, 1188, 1596, 1363, 2290, 814,
	3439, 2454, 2912, 1593, 1717, 2457, 2496, 1941, 1011, 2913,
	1011, 529, 1715, 1742, 1747, 3158, 1438, 581, 1596, 1594,
	1718, 2173, 1397, 1439, 3035, 3220, 2332, 3161, 579, 1772,
	1773, 2511, 3119, 1281, 765, 1188, 3326, 2030, 1768, 3324,
	3287, 1594, 2021, 2681, 2680, 2031, 2466, 1958, 1597, 2032,
	1897, 2937, 2037, 2607, 2606, 1376, 1073, 2588, 2216, 2610,
	2473, 3588, 2215, 2214, 1266, 2345, 2602, 2603, 1769, 1188,
	3246, 1252, 2445, 2604, 3385, 213, 2561, 2553, 2554, 2555,
	2556, 2558, 2559, 213, 699, 3196, 822, 2175, 1253, 1967,
	213, 2801, 2174, 213, 213, 1073, 1597, 1264, 1844, 3403,
	701, 602, 603, 1437, 1073, 2728, 2623, 3551, 3294, 3322,
	213, 692, 3124, 2926, 3172, 3442, 3284, 2628, 1597, 2517,
	2090, 1747, 3386, 3553, 3515, 213, 2618, 1410, 825, 2483,
	3157, 3397, 1392, 1390, 3264, 3117, 2629, 2630, 2291, 2292,
	1373, 3009, 2580, 213, 213, 213, 2837, 1371, 3285, 213,
	2617, 2810, 213, 2481, 1369, 1774, 2545, 2658, 2637, 213,
	213, 213, 213, 213, 2616, 2485, 2601, 1367, 1365, 2632,
	2664, 1357, 2342, 2619, 2645, 213, 213, 213, 766, 2612,
	2624, 3443, 2613, 2642, 213, 2315, 2636, 3295, 3387, 2656,
	2583, 2584, 2585, 605, 604, 2033, 213, 1174, 2596, 213,
	2683, 2282, 2687, 2688, 2035, 2631, 1355, 1073, 2234, 1262,
	2671, 2611, 1626, 2609, 2639, 1073, 1933, 2698, 2699, 1775,
	213, 2700, 2622, 213, 213, 1623, 1411, 2627, 1645, 2654,
	2655, 1329, 2706, 213, 2581, 818, 1174, 213, 2648, 1174,
	1174, 1174, 2626, 606, 607, 2440, 213, 2643, 2644, 2089,
	2720, 2721, 213, 2708, 2722, 2439, 2743, 213, 2478, 213,
	1265, 2765, 2423, 1642, 1645, 1943, 213, 1914, 2659, 1704,
	2479, 1554, 530, 2484, 2675, 1749, 2665, 1333, 2715, 1409,
	1242, 812, 2724, 767, 1391, 1389, 697, 698, 3493, 1174,
	1174, 3191, 1372, 1263, 2774, 2747, 700, 213, 213, 1370,
	1749, 213, 3181, 2696, 3436, 3148, 1368, 3033, 1174, 2986,
	2667, 2668, 2702, 690, 691, 2984, 2710, 2625, 2968, 1366,
	1364, 2757, 768, 1356, 531, 2639, 2682, 2742, 2685, 930,
	2551, 2552, 213, 1791, 1073, 213, 213, 1073, 213, 2725,
	2719, 1791, 2713, 2788, 2288, 2718, 2741, 2361, 2350, 1666,
	2766, 2782, 2783, 2784, 2349, 2785, 2786, 213, 1354, 2329,
	2716, 1261, 1876, 1875, 532, 1932, 533, 2808, 209, 1873,
	524, 525, 1871, 540, 524, 540, 550, 555, 2711, 1868,
	571, 1866, 2712, 1864, 1855, 1666, 1805, 1803, 209, 1792,
	1779, 2737, 2771, 2787, 2822, 3162, 2773, 2799, 2764, 2748,
	1073, 2780, 2750, 2751, 2752, 2803, 689, 1776, 141, 1188,
	209, 1073, 1763, 213, 1752, 3533, 2480, 2865, 2761, 3343,
	2821, 1014, 2464, 3159, 2413, 2482, 3152, 2840, 1441, 1823,
	3548, 1633, 992, 2413, 3465, 3240, 3235, 3234, 2809, 774,
	3150, 2414, 1738, 2255, 1182, 1014, 3154, 1071, 2849, 2850,
	825, 1217, 2794, 2795, 3345, 2253, 993, 2255, 2255, 2272,
	3043, 1760, 1907, 2818, 1912, 3160, 1931, 1930, 2557, 2271,
	2269, 1795, 1407, 1408, 3392, 2823, 1448, 1449, 2825, 3366,
	3125, 2819, 2293, 1448, 1449, 2275, 1445, 2312, 2279, 535,
	1645, 2923, 1712, 2310, 2277, 3435, 2465, 3153, 3405, 2311,
	2278, 3022, 3017, 1451, 2952, 524, 524, 2646, 213, 2845,
	2862, 2368, 2160, 209, 1442, 1707, 1638, 3568, 2856, 2858,
	2859, 2868, 3587, 213, 2876, 3407, 2864, 1519, 1010, 1073,
	1010, 1450, 2093, 2871, 2875, 546, 2957, 2877, 1450, 1645,
	1645, 2878, 994, 2880, 2946, 2551, 2552, 2860, 213, 1979,
	2881, 2941, 2567, 2320, 2888, 1645, 1645, 2247, 2915, 2890,
	3096, 779, 781, 1448, 1449, 1979, 2891, 2247, 2246, 2652,
	1343, 1188, 2248, 1012, 2097, 1012, 1342, 2091, 2049, 2064,
	1394, 2956, 2852, 1393, 1517, 2916, 1645, 1515, 3596, 3377,
	3316, 3278, 3276, 2924, 213, 3207, 2919, 1522, 3142, 1011,
	2928, 2930, 2931, 3067, 3060, 2993, 2933, 2934, 141, 3155,
	3049, 1666, 2964, 3156, 3028, 3012, 3011, 3010, 2983, 2781,
	2755, 2753, 2425, 1011, 2424, 2378, 2354, 3006, 2330, 2051,
	2948, 213, 213, 213, 1929, 1928, 1927, 1926, 1858, 2954,
	1857, 1856, 1838, 1816, 2142, 1815, 1811, 2568, 1073, 213,
	2961, 1810, 3158, 1174, 1809, 1807, 2985, 1806, 2987, 1406,
	1666, 1666, 2998, 3000, 3161, 2997, 1405, 213, 1290, 1289,
	2972, 1288, 1287, 1286, 3045, 1285, 1666, 1666, 3008, 1284,
	213, 213, 1174, 1174, 1174, 1283, 213, 213, 213, 1282,
	1280, 213, 213, 3040, 1275, 213, 213, 1274, 1174, 1273,
	3025, 1272, 1271, 1234, 213, 1073, 1233, 1666, 3037, 1232,
	1231, 1230, 1229, 1228, 3039, 3021, 1222, 1216, 1073, 1214,
	2288, 1642, 3036, 3031, 1213, 3026, 1036, 1035, 967, 877,
	3068, 1713, 787, 634, 771, 3297, 1400, 73, 1224, 621,
	67, 1645, 2982, 3447, 2689, 3056, 1913, 3027, 3094, 1361,
	3069, 2675, 1915, 2615, 2184, 3428, 3038, 1642, 3103, 2521,
	3372, 3258, 3041, 213, 3047, 3046, 2088, 3157, 2560, 2561,
	2553, 2554, 2555, 2556, 2558, 2559, 3052, 3051, 1536, 3090,
	69, 3059, 865, 950, 3203, 3202, 3057, 3058, 3066, 3081,
	3062, 3149, 2971, 3082, 2403, 3065, 3063, 3200, 3199, 832,
	1076, 1723, 3073, 3078, 871, 1736, 2230, 2121, 1646, 874,
	1643, 876, 875, 1644, 1538, 873, 1641, 2344, 2372, 1269,
	752, 1727, 2045, 2083, 2516, 1533, 213, 845, 867, 2080,
	1029, 844, 2620, 2768, 2374, 2951, 1073, 3226, 1073, 1965,
	2456, 637, 1645, 2548, 2065, 3053, 3054, 3055, 1022, 2143,
	2136, 2132, 1969, 2362, 1414, 1508, 1024, 213, 213, 213,
	2373, 1063, 1666, 2413, 848, 2043, 1823, 1524, 3116, 213,
	2490, 211, 1427, 2775, 2634, 213, 2225, 213, 3462, 1973,
	213, 213, 213, 1825, 1034, 991, 990, 989, 3453, 3450,
	3130, 571, 1073, 213, 213, 1174, 2735, 3167, 1073, 1716,
	1174, 2240, 1500, 1590, 2744, 861, 213, 209, 1187, 209,
	209, 3135, 1179, 3134, 209, 3132, 3129, 3177, 2600, 3133,
	3147, 213, 209, 1195, 1073, 2802, 3138, 1174, 2636, 3126,
	1239, 3391, 3194, 3168, 1499, 3127, 3128, 3131, 783, 3166,
	3382, 1050, 1049, 1048, 3178, 3179, 2673, 1219, 3137, 3593,
	2979, 180, 1954, 817, 177, 213, 179, 3206, 178, 2995,
	2727, 1241, 3211, 1666, 90, 209, 209, 1073, 1179, 3188,
	35, 16, 116, 3193, 115, 114, 3189, 113, 112, 111,
	209, 3236, 3222, 1642, 3229, 2138, 3210, 3225, 1277, 3209,
	3198, 110, 1014, 1073, 3230, 109, 3221, 108, 3223, 3218,
	107, 106, 209, 209, 209, 209, 1179, 1014, 105, 104,
	103, 102, 101, 100, 571, 99, 209, 209, 98, 3239,
	97, 96, 95, 843, 3145, 3146, 94, 93, 92, 3270,
	689, 1073, 1642, 1642, 91, 567, 1014, 564, 49, 213,
	48, 213, 3176, 1073, 213, 3250, 3255, 89, 1642, 1642,
	3247, 88, 213, 15, 33, 831, 13, 53, 3190, 54,
	12, 3266, 1888, 28, 29, 79, 78, 27, 14, 26,
	3281, 24, 10, 3197, 213, 8, 7, 1071, 30, 1642,
	1600, 3280, 11, 146, 145, 72, 3271, 3272, 209, 144,
	71, 143, 142, 70, 22, 213, 3274, 9, 138, 213,
	3279, 209, 3331, 3256, 3023, 3315, 66, 213, 140, 3330,
	2142, 2142, 1174, 139, 63, 3275, 555, 3325, 213, 1010,
	137, 1632, 136, 3300, 1645, 64, 135, 1823, 134, 65,
	133, 20, 5, 52, 3335, 6, 3242, 3337, 2811, 213,
	213, 3256, 3323, 1010, 3317, 3313, 83, 3307, 3308, 3342,
	84, 31, 3329, 1982, 61, 60, 59, 3352, 3353, 213,
	19, 51, 18, 170, 1012, 213, 169, 3340, 3334, 168,
	1011, 167, 162, 161, 3347, 213, 166, 3341, 3225, 1645,
	164, 3339, 3344, 3346, 3348, 1011, 163, 165, 1012, 3306,
	160, 1014, 3356, 132, 172, 171, 3363, 3379, 3388, 174,
	158, 154, 153, 157, 159, 156, 3370, 3365, 3375, 3378,
	155, 2142, 2142, 2142, 1011, 152, 173, 131, 130, 56,
	3399, 129, 128, 127, 126, 125, 55, 17, 2, 213,
	1174, 1, 0, 0, 1642, 0, 213, 0, 0, 0,
	1174, 1174, 0, 0, 0, 1666, 1174, 0, 3421, 0,
	213, 0, 213, 0, 0, 0, 0, 0, 0, 3406,
	0, 0, 3409, 0, 0, 3413, 2737, 0, 0, 1645,
	3432, 3418, 3419, 3420, 213, 0, 3417, 0, 3424, 0,
	213, 213, 3444, 1073, 3425, 3412, 0, 3334, 0, 0,
	0, 213, 213, 0, 0, 0, 0, 0, 0, 3456,
	1666, 0, 3460, 0, 0, 3468, 3466, 3470, 0, 0,
	3449, 524, 3452, 3455, 3426, 0, 3427, 3457, 0, 3478,
	0, 0, 0, 3477, 0, 213, 0, 0, 3472, 0,
	3474, 0, 209, 0, 209, 1642, 3504, 209, 0, 0,
	0, 0, 0, 0, 3445, 3467, 3491, 1195, 0, 1179,
	209, 3492, 3489, 3490, 0, 0, 209, 1195, 540, 0,
	3520, 209, 1195, 3506, 213, 0, 0, 571, 0, 1011,
	3522, 3529, 3524, 1188, 1448, 1449, 0, 0, 3521, 0,
	3530, 3534, 0, 3526, 213, 0, 0, 0, 0, 3523,
	1666, 3525, 0, 1982, 1479, 0, 0, 3540, 3541, 0,
	0, 1451, 0, 3545, 3543, 0, 3542, 0, 213, 0,
	213, 0, 3549, 3552, 3550, 0, 3558, 0, 3560, 0,
	3557, 0, 3556, 0, 3563, 3562, 3527, 3528, 3452, 1450,
	3531, 3455, 0, 0, 1014, 1014, 0, 0, 843, 0,
	0, 0, 843, 0, 3575, 0, 3574, 0, 0, 0,
	1157, 2138, 2138, 3582, 0, 1157, 3581, 0, 3583, 3464,
	0, 0, 0, 0, 3586, 0, 0, 3590, 0, 0,
	831, 0, 3555, 0, 831, 0, 0, 0, 0, 0,
	3591, 3592, 0, 3597, 0, 3598, 2487, 2488, 0, 0,
	0, 3601, 3602, 3603, 3605, 3606, 0, 0, 0, 0,
	0, 0, 0, 3610, 0, 0, 1197, 0, 1201, 0,
	1207, 3608, 1456, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 1480, 2142, 2142, 0, 0, 0,
	0, 0, 2138, 2138, 2138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 209, 209, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 3464, 0, 0,
	0, 0, 1843, 0, 0, 0, 0, 2574, 2575, 2576,
	0, 209, 0, 209, 1327, 209, 1471, 0, 0, 524,
	0, 1330, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 1859, 1011, 1011, 0, 0, 0, 1642, 0, 0,
	0, 0, 0, 0, 0, 2142, 2142, 2142, 2142, 2142,
	2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142,
	2142, 2142, 2142, 2142, 0, 2142, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 1380, 689, 0, 0, 0,
	0, 0, 0, 209, 0, 1179, 209, 0, 0, 0,
	0, 0, 1642, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	1010, 1472, 0, 209, 209, 0, 209, 0, 209, 0,
	209, 0, 209, 0, 0, 1010, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1938, 0, 0, 1939,
	0, 1940, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 1010, 1012, 0, 0, 1501, 1502,
	1503, 1504, 1505, 0, 0, 0, 0, 0, 0, 555,
	1012, 0, 0, 0, 0, 571, 0, 1014, 209, 0,
	0, 0, 1642, 0, 0, 1014, 0, 0, 1521, 0,
	0, 0, 0, 0, 1534, 0, 57, 0, 1014, 1012,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	0, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	0, 1479, 0, 0, 0, 0, 0, 0, 1451, 0,
	2551, 2552, 0, 2569, 2570, 2571, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 3086,
	0, 0, 0, 0, 0, 85, 1450, 0, 0, 0,
	75, 82, 0, 0, 0, 0, 2138, 2138, 0, 1010,
	1157, 0, 0, 1584, 1584, 1584, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 524, 0,
	0, 0, 0, 0, 2566, 0, 0, 0, 0, 0,
	0, 2833, 2834, 209, 76, 0, 0, 0, 0, 0,
	843, 0, 0, 0, 1012, 1011, 1157, 0, 0, 0,
	524, 0, 0, 1011, 0, 0, 0, 209, 0, 524,
	0, 0, 209, 0, 0, 0, 1011, 0, 0, 1456,
	0, 0, 831, 0, 0, 0, 2138, 2138, 2138, 2138,
	2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
	2138, 2138, 2138, 2138, 2138, 0, 2138, 0, 2557, 0,
	1478, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900,
	2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910,
	0, 2914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 540, 0, 0, 0, 0, 2572,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 80, 0, 81, 1157, 0,
	0, 0, 2567, 0, 2263, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 181, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 684, 0,
	0, 0, 117, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 183, 0, 209, 2323,
	0, 0, 1010, 1010, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 209, 0, 1195, 0, 0, 209,
	0, 0, 151, 0, 0, 0, 0, 2568, 0, 0,
	182, 0, 0, 0, 1843, 0, 0, 1012, 1012, 0,
	175, 2263, 0, 524, 0, 2377, 0, 0, 176, 2142,
	0, 209, 0, 0, 209, 0, 209, 0, 209, 0,
	209, 209, 0, 1179, 0, 0, 0, 0, 0, 150,
	0, 0, 2396, 689, 0, 2263, 2263, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 2142, 0, 0, 0, 0, 0, 0, 209,
	1179, 209, 0, 0, 1195, 0, 1195, 0, 0, 1179,
	0, 1179, 0, 1179, 0, 0, 0, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0, 0,
	0, 0, 0, 0, 209, 209, 1179, 209, 0, 209,
	2563, 2564, 2565, 0, 0, 0, 0, 2562, 2560, 2561,
	2553, 2554, 2555, 2556, 2558, 2559, 0, 0, 0, 0,
	0, 0, 0, 1010, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2142, 0, 0, 0,
	0, 1964, 0, 1968, 0, 0, 0, 0, 1012, 1975,
	0, 0, 0, 0, 0, 0, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 0, 2024, 0, 2026, 2027, 2028, 2029, 0, 0,
	0, 0, 0, 0, 0, 0, 1195, 1157, 0, 0,
	0, 0, 0, 0, 2053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 0, 2078, 0, 0, 0, 0, 0, 2551,
	2552, 0, 2569, 2570, 2571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1010, 2551, 2552, 2842, 2569,
	2570, 2571, 0, 1010, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 0, 0, 0, 0, 2134, 1010, 2145, 2147, 2152,
	0, 1157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 1157, 0, 0,
	1012, 0, 0, 2566, 0, 0, 0, 0, 1012, 209,
	0, 0, 0, 0, 524, 0, 0, 0, 0, 0,
	2566, 1012, 524, 0, 0, 0, 0, 0, 0, 524,
	2138, 0, 524, 524, 0, 0, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1195, 3263, 0, 0, 0, 0,
	0, 0, 0, 2138, 0, 0, 0, 2557, 0, 0,
	0, 0, 2263, 2263, 209, 0, 0, 0, 2263, 0,
	0, 2677, 0, 0, 2557, 0, 0, 0, 2263, 2677,
	2263, 2677, 2677, 0, 0, 0, 0, 0, 3289, 0,
	0, 1157, 0, 0, 209, 209, 209, 0, 0, 0,
	0, 2573, 0, 0, 0, 0, 0, 0, 2572, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1179, 0,
	0, 0, 0, 0, 0, 2572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2731,
	0, 2567, 2733, 2263, 0, 1157, 0, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 209, 2138, 2567, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 1179, 0, 209, 0, 0, 2263, 0, 524, 0,
	0, 0, 0, 0, 0, 2263, 2325, 0, 2327, 0,
	0, 0, 3369, 0, 0, 0, 0, 0, 124, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 1843, 58, 119,
	1843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 2568, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 121, 0,
	0, 2817, 0, 2568, 1179, 209, 0, 209, 0, 0,
	0, 38, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 42, 0,
	0, 0, 0, 74, 0, 0, 122, 0, 0, 0,
	0, 0, 40, 85, 0, 0, 0, 0, 75, 82,
	0, 0, 0, 0, 0, 2437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2873, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866, 87, 2563,
	2564, 2565, 76, 0, 0, 0, 2562, 2560, 2561, 2553,
	2554, 2555, 2556, 2558, 2559, 0, 2563, 2564, 2565, 0,
	0, 0, 0, 2562, 2560, 2561, 2553, 2554, 2555, 2556,
	2558, 2559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2470, 2471, 0, 0, 0, 0, 2477,
	0, 0, 0, 0, 653, 0, 209, 209, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 524, 2491, 2492,
	0, 0, 0, 0, 2078, 0, 0, 0, 0, 0,
	0, 0, 524, 2499, 0, 2551, 2552, 654, 2569, 2570,
	2571, 0, 0, 0, 0, 0, 655, 0, 0, 0,
	77, 0, 0, 0, 2841, 0, 0, 1195, 44, 2519,
	0, 0, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2534, 0, 0, 0, 676, 805,
	0, 47, 147, 80, 0, 81, 0, 45, 826, 0,
	0, 123, 0, 657, 0, 0, 0, 46, 0, 2566,
	0, 0, 0, 571, 181, 0, 0, 1157, 0, 0,
	0, 0, 658, 0, 0, 0, 50, 0, 0, 0,
	117, 1001, 2152, 2152, 2152, 0, 0, 0, 0, 0,
	120, 0, 659, 0, 0, 660, 0, 1584, 0, 0,
	3019, 209, 209, 0, 183, 2605, 1157, 0, 0, 0,
	0, 0, 0, 0, 0, 1157, 0, 0, 209, 0,
	0, 675, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 2557, 0, 0, 2263, 209, 843, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 182, 2396,
	2396, 843, 0, 0, 0, 689, 689, 2263, 175, 0,
	1843, 1843, 0, 0, 689, 2263, 176, 0, 0, 0,
	831, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 2572, 0, 0, 150, 0, 0,
	3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 2692, 0,
	0, 0, 0, 0, 0, 0, 662, 2567, 1157, 0,
	0, 0, 0, 0, 0, 0, 1157, 0, 0, 0,
	0, 0, 3104, 679, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1449, 0, 210, 0, 0, 1491,
	1492, 1493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 678, 0, 1479, 0, 0, 210, 0, 664, 0,
	1451, 665, 0, 0, 0, 1497, 0, 673, 0, 0,
	0, 0, 0, 0, 666, 0, 0, 0, 210, 209,
	0, 0, 0, 0, 0, 1195, 0, 209, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	209, 0, 2568, 0, 1467, 667, 674, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 2263, 2263, 2263, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 1195, 0,
	0, 669, 0, 0, 2263, 1157, 2677, 0, 1157, 1195,
	1195, 209, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 209, 209, 672, 0, 0, 0, 0, 0,
	0, 1473, 1474, 1475, 1476, 2263, 0, 0, 0, 0,
	0, 1456, 2551, 2552, 0, 2569, 2570, 2571, 0, 0,
	3215, 0, 2824, 0, 0, 0, 1975, 0, 0, 0,
	0, 0, 2828, 2829, 0, 1488, 2832, 0, 1498, 0,
	2835, 1157, 1478, 1480, 0, 0, 0, 0, 0, 2839,
	0, 0, 1157, 0, 1195, 2563, 2564, 2565, 2846, 0,
	0, 2605, 2562, 2560, 2561, 2553, 2554, 2555, 2556, 2558,
	2559, 1465, 1466, 0, 0, 0, 2566, 0, 0, 0,
	0, 0, 2866, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 2882, 2883, 0, 2884, 2885, 2886, 0, 0, 2887,
	0, 0, 0, 2889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 87, 0, 0, 2263, 0,
	2677, 0, 0, 3283, 2917, 2918, 0, 0, 0, 0,
	2557, 209, 0, 0, 0, 0, 0, 0, 0, 2927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 0, 1477, 571, 2936, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 3283, 0, 0, 0, 2263, 0,
	0, 2572, 0, 0, 0, 0, 209, 0, 0, 0,
	826, 87, 0, 0, 0, 0, 1489, 1195, 0, 87,
	0, 0, 0, 0, 0, 0, 87, 2965, 0, 0,
	0, 0, 0, 0, 2567, 0, 0, 0, 209, 209,
	0, 0, 2973, 2976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2873, 0,
	0, 0, 0, 0, 524, 0, 2994, 0, 0, 0,
	0, 0, 0, 0, 3283, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 0, 0, 0, 0, 0, 1490, 1468, 1464, 0,
	1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 209, 2568,
	0, 0, 0, 1584, 0, 2677, 0, 0, 0, 0,
	0, 0, 3048, 0, 0, 0, 1157, 0, 0, 1195,
	0, 1195, 0, 0, 0, 0, 805, 0, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3440, 1511, 0, 0, 0, 0, 1195,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 2263, 1520, 0, 3083, 3084, 1526, 0, 0, 0,
	3088, 3089, 0, 0, 0, 3092, 3093, 0, 0, 0,
	0, 0, 3097, 0, 0, 210, 1078, 210, 210, 1078,
	0, 1078, 210, 0, 2873, 0, 0, 0, 0, 0,
	210, 3101, 0, 0, 0, 0, 0, 0, 3105, 0,
	0, 0, 2563, 2564, 2565, 0, 0, 0, 0, 2562,
	2560, 2561, 2553, 2554, 2555, 2556, 2558, 2559, 0, 0,
	0, 0, 0, 2263, 0, 0, 0, 0, 0, 0,
	0, 1078, 1078, 210, 210, 0, 0, 1157, 0, 1157,
	0, 0, 0, 3283, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 0, 1195, 0, 2263,
	210, 210, 210, 210, 0, 1078, 1078, 0, 0, 0,
	1078, 0, 0, 1078, 210, 210, 0, 87, 681, 0,
	1612, 0, 1615, 1157, 0, 0, 0, 0, 0, 1157,
	0, 2976, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 683, 0, 0, 0, 0,
	0, 0, 595, 0, 0, 1157, 0, 58, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 210,
	0, 0, 68, 0, 214, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 0, 2976, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 1479, 74, 0, 0, 0, 0, 0, 1451, 3251,
	3252, 3253, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1157, 588, 3261, 3262, 1450, 0, 0, 0,
	0, 0, 0, 0, 1157, 1470, 0, 1013, 3269, 0,
	0, 0, 1467, 0, 0, 588, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2976,
	0, 2831, 0, 0, 0, 0, 0, 3305, 0, 0,
	0, 0, 0, 0, 0, 3311, 0, 0, 831, 1473,
	1474, 1475, 1476, 0, 0, 3318, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2976, 0,
	0, 2976, 0, 1448, 1449, 0, 0, 0, 0, 0,
	1478, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2976, 2976, 1479, 0, 0, 0, 0, 0, 77,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 147, 80, 1471, 81, 210, 0, 1470, 0, 826,
	0, 0, 3381, 0, 1467, 3384, 1078, 0, 210, 210,
	0, 0, 0, 181, 210, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 684, 0, 0, 0, 117,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2830, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 183, 0, 0, 0, 0, 0, 0,
	0, 1473, 1474, 1475, 1476, 0, 0, 0, 0, 0,
	1477, 1456, 0, 0, 1157, 0, 118, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 151,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 0,
	0, 0, 1478, 1480, 0, 0, 0, 175, 0, 0,
	831, 0, 0, 0, 0, 176, 0, 0, 805, 0,
	0, 805, 805, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 1466, 0, 0, 0, 682, 0, 0, 0,
	0, 0, 0, 3488, 3488, 3488, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 3507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2042, 1078, 210, 0,
	0, 0, 0, 2976, 1078, 2976, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 3488,
	0, 0, 0, 1520, 0, 1468, 1464, 1520, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0, 0,
	0, 0, 0, 210, 210, 0, 0, 0, 0, 0,
	210, 208, 1477, 208, 208, 0, 0, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 210,
	1472, 210, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3488, 0, 0, 0, 0, 0, 0, 208,
	208, 0, 0, 0, 0, 1615, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 1078,
	0, 1078, 0, 0, 0, 0, 87, 1078, 0, 0,
	1078, 210, 0, 0, 210, 0, 208, 208, 208, 208,
	0, 0, 0, 1078, 1078, 1078, 0, 0, 0, 0,
	208, 208, 210, 1074, 0, 0, 1175, 0, 1074, 0,
	0, 210, 210, 0, 210, 0, 210, 0, 210, 0,
	210, 0, 0, 0, 0, 0, 0, 1468, 1464, 0,
	1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 1175, 1175,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 208, 0, 0, 0, 210, 0, 0, 0,
	0, 62, 0, 0, 0, 208, 0, 0, 0, 0,
	901, 0, 0, 87, 0, 1448, 1449, 0, 1078, 0,
	0, 0, 1175, 1175, 0, 0, 0, 1175, 0, 0,
	1175, 0, 68, 0, 0, 1479, 0, 0, 0, 0,
	0, 0, 1451, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 74, 87, 0, 0, 0, 0, 0, 0,
	1450, 0, 85, 0, 0, 0, 0, 75, 82, 1470,
	0, 1175, 0, 0, 0, 0, 1467, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 87, 1479, 87, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 2476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 1450, 1473, 1474, 1475, 1476, 0, 0, 0,
	0, 1470, 0, 1456, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 1478, 1480, 0, 0, 87, 0,
	210, 0, 0, 1078, 0, 0, 0, 2469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2222, 0, 0, 1465, 1466, 1473, 1474, 1475, 1476, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 1614, 1471, 1013, 0,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 1614, 1478, 1480, 0, 0,
	595, 147, 80, 0, 81, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 2042, 0, 181, 0, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 684, 0, 0, 0, 117,
	0, 0, 1520, 0, 0, 0, 0, 1078, 0, 1471,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	210, 0, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 210, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 118, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	210, 1078, 0, 1074, 1078, 0, 210, 182, 0, 0,
	0, 588, 0, 0, 0, 0, 588, 175, 0, 0,
	0, 0, 0, 0, 0, 176, 1477, 0, 1175, 0,
	0, 0, 210, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 1472, 0, 150, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 595, 0, 0, 0, 0, 210,
	0, 0, 210, 0, 210, 0, 210, 1001, 210, 210,
	0, 0, 1078, 1078, 1078, 0, 1078, 0, 0, 1468,
	1464, 0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457,
	1458, 0, 0, 0, 210, 0, 0, 0, 0, 208,
	208, 0, 0, 0, 57, 0, 208, 210, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 208, 0, 208, 0, 208,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 210, 0, 210, 0, 210, 0, 0,
	0, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 68, 1175, 87, 87, 0, 0, 87,
	0, 1074, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 208, 87, 87,
	208, 0, 87, 85, 0, 0, 0, 0, 75, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 1075,
	0, 0, 1176, 0, 1075, 0, 0, 595, 208, 0,
	208, 0, 208, 0, 208, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1001, 76, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1176, 1176, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 1175, 0, 1175, 0,
	0, 0, 0, 0, 1175, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1176, 1176,
	1175, 1175, 1175, 1176, 0, 0, 1176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 147, 80, 0, 81, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 684, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 183, 0, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 87,
	0, 1013, 210, 210, 210, 0, 208, 0, 0, 0,
	151, 210, 0, 0, 1001, 1001, 0, 0, 182, 0,
	0, 0, 0, 210, 1078, 0, 0, 0, 175, 0,
	1074, 0, 0, 0, 1078, 0, 176, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	210, 0, 0, 1078, 210, 0, 1078, 1078, 1078, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 1078, 0, 0,
	1074, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 1078, 0, 210, 1078, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 1075,
	0, 0, 595, 0, 210, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1176, 0, 0, 1175, 208, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 1075, 0, 1078, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 731, 1078, 764,
	0, 0, 0, 0, 0, 208, 0, 0, 208, 0,
	208, 0, 208, 0, 208, 208, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1175, 749, 736, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 1175, 0, 208, 0, 208, 0, 0, 0, 737,
	0, 0, 0, 0, 739, 0, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 0, 0, 208, 208,
	0, 208, 0, 208, 765, 741, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 1001, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 1078, 1075, 0, 0,
	0, 208, 763, 0, 0, 0, 0, 0, 0, 1175,
	1175, 1175, 0, 1175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 744, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 751,
	750, 0, 0, 0, 0, 0, 1068, 745, 0, 0,
	0, 0, 87, 1186, 0, 0, 0, 0, 0, 210,
	210, 0, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 210, 0, 766, 0,
	1078, 0, 1176, 0, 1176, 0, 0, 0, 0, 0,
	1176, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1176, 1176, 1176, 1078,
	1078, 1078, 0, 0, 0, 0, 740, 0, 0, 1270,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 210, 1078, 0, 762, 0, 0, 0, 0, 0,
	0, 1294, 1294, 1294, 1186, 1078, 0, 0, 1013, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 760, 0,
	0, 0, 0, 1013, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 0,
	0, 733, 0, 767, 0, 0, 0, 0, 0, 0,
	0, 0, 1614, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	0, 1075, 0, 753, 0, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 1399, 0, 0,
	757, 0, 0, 0, 0, 0, 0, 0, 208, 2042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 0, 1078, 0, 1078, 0, 0, 208, 208,
	208, 0, 761, 0, 0, 0, 0, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 1074,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	210, 210, 1078, 0, 0, 1078, 208, 1078, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 1013, 0, 0,
	0, 1078, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	208, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 87, 0, 0, 0, 0, 0, 1074,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 0, 1175, 1175, 1175, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 1176, 0, 0, 1621, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 1175, 1175, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 1074, 1078,
	1176, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 1176, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1013, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 0,
	0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 1176, 1176, 1176, 0, 1176,
	1484, 1479, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1497, 0, 0, 210, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1078, 0,
	0, 0, 0, 1078, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1818, 0, 0, 0, 210, 0,
	1078, 1830, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 208, 208, 0, 0, 0,
	1270, 0, 1849, 1074, 1849, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 0, 0, 1456,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1498, 0, 0, 0,
	1478, 1480, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 1830, 0, 0, 1894, 0, 0, 0, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 1908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1918, 1486, 1920, 0, 1922, 0, 1924,
	0, 1925, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 1175, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 1942,
	0, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 1175, 1175, 1175, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 1175, 0, 0, 0, 0, 0, 0, 1074,
	0, 0, 0, 1013, 0, 0, 0, 0, 0, 0,
	1477, 1013, 1074, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 1614, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1074, 0, 1074, 0, 0, 0, 0, 0, 1487, 0,
	0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 1176, 0, 0,
	0, 3112, 0, 0, 0, 3111, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 2207, 0, 0, 0, 0, 1074, 0, 0, 1175,
	0, 0, 1074, 0, 1175, 0, 1176, 0, 0, 1176,
	1176, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1074, 0,
	0, 1175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1176,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	208, 0, 0, 0, 1075, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 208, 0, 1074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2341, 0, 0, 0, 0, 1830, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1175, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	2379, 0, 0, 1294, 0, 1294, 0, 1294, 0, 1186,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2422, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 2427, 0,
	2430, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1075,
	0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 2448, 1186, 0, 2451, 0, 0, 0,
	1484, 1479, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1497, 1175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1175, 1175, 2467, 0, 0, 0,
	1175, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 1176, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1176, 1176, 1176, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1498, 0, 1176, 0,
	1478, 1480, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 1075, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 2669, 0, 0, 0, 0, 0, 1448,
	1449, 0, 1481, 1482, 1483, 1491, 1492, 1493, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 1484, 1479,
	0, 0, 0, 2705, 2707, 2341, 1451, 0, 0, 0,
	0, 1497, 1075, 0, 0, 1176, 0, 0, 1075, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 1075, 0, 0, 1176, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2745, 0, 0, 0, 2749, 0, 0, 0, 0,
	0, 0, 0, 0, 2756, 0, 0, 0, 1487, 0,
	0, 1462, 1463, 1469, 1490, 1468, 1464, 1075, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0, 0,
	0, 2539, 0, 0, 0, 2540, 0, 1473, 1474, 1475,
	1476, 0, 0, 1075, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 2798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1488, 0, 0, 1498, 0, 0, 0, 1478, 1480,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 2820, 0, 1186, 0, 1494, 0,
	1495, 0, 0, 0, 0, 0, 0, 1465, 1466, 0,
	0, 0, 0, 0, 0, 2826, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1176, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	1449, 0, 1481, 1482, 1483, 1491, 1492, 1493, 0, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 1484, 1479,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 1176, 0, 0, 1450, 0, 1176, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 1487, 0, 0, 1462,
	1463, 1469, 1490, 1468, 1464, 0, 1461, 1459, 1460, 1452,
	1453, 1454, 1455, 1457, 1458, 0, 0, 0, 0, 2074,
	0, 0, 0, 2075, 0, 0, 0, 1473, 1474, 1475,
	1476, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3020, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 1488, 0, 0, 1498, 0, 0, 3032, 1478, 1480,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 1494, 0,
	1495, 0, 0, 0, 0, 0, 0, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 1486, 0, 0, 0, 1470, 0, 0, 0,
	0, 1471, 3071, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 1472, 1498, 0, 0,
	0, 1478, 1480, 0, 0, 0, 0, 1448, 1449, 0,
	1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0,
	0, 1494, 1489, 1495, 0, 0, 1484, 1479, 0, 0,
	1465, 1466, 0, 0, 1451, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 1496, 0, 0, 0, 0, 0, 1467, 0,
	3180, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 2341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1487, 0, 0, 1462,
	1463, 1469, 1490, 1468, 1464, 0, 1461, 1459, 1460, 1452,
	1453, 1454, 1455, 1457, 1458, 0, 0, 0, 0, 0,
	0, 1477, 0, 3110, 0, 1473, 1474, 1475, 1476, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 1498, 0, 0, 1489, 1478, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	0, 0, 0, 0, 0, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	3290, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 2844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3336, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3362, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3411, 0, 0,
	0, 0, 0, 0, 1487, 0, 0, 1462, 1463, 1469,
	1490, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1072, 0, 0, 0, 0, 0, 3446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3461,
	218, 219, 220, 221, 222, 1079, 223, 1080, 1081, 1082,
	0, 1083, 475, 1084, 1085, 1086, 1087, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 1088,
	232, 233, 234, 235, 236, 237, 1089, 1090, 238, 480,
	481, 482, 1091, 239, 483, 1092, 1077, 1093, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 1094,
	250, 0, 251, 252, 253, 1095, 952, 254, 255, 1096,
	1097, 1099, 1098, 1100, 1101, 1102, 256, 257, 258, 259,
	260, 261, 484, 485, 1103, 262, 1104, 264, 263, 1105,
	265, 1106, 1107, 266, 267, 268, 1108, 269, 1109, 270,
	271, 1110, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 1111, 215, 1112, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	1113, 289, 1114, 1115, 953, 290, 291, 1116, 292, 490,
	1117, 491, 293, 1118, 294, 295, 296, 297, 492, 493,
	494, 347, 955, 298, 299, 1119, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 1120, 954, 305, 495, 307,
	306, 308, 309, 310, 496, 1121, 497, 1122, 312, 956,
	498, 957, 313, 314, 315, 958, 316, 317, 0, 0,
	318, 319, 320, 321, 1123, 323, 322, 1124, 324, 499,
	959, 325, 326, 960, 1125, 327, 328, 1126, 1127, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 961, 342, 343, 345, 344, 1128, 217,
	962, 346, 1129, 500, 501, 348, 349, 1130, 350, 351,
	352, 1131, 1132, 354, 355, 356, 1133, 1134, 357, 358,
	502, 963, 359, 964, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 1135, 368, 369, 504, 370, 505,
	371, 1136, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 1137, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 1138, 394,
	965, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 1139, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 1140, 421, 401,
	402, 422, 423, 966, 424, 425, 508, 426, 427, 1141,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 1142, 439, 440, 438, 1143, 441, 442, 443,
	444, 445, 277, 446, 1144, 447, 510, 511, 512, 513,
	1145, 454, 1146, 448, 449, 514, 450, 515, 1147, 451,
	452, 453, 0, 455, 456, 1148, 1149, 457, 458, 459,
	460, 461, 463, 1150, 464, 1151, 462, 465, 466, 467,
	516, 517, 518, 1152, 469, 468, 519, 1153, 1154, 1155,
	1156, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 2194, 0, 0,
	0, 0, 0, 0, 0, 2195, 218, 219, 220, 221,
	222, 1079, 223, 1080, 1081, 1082, 0, 1083, 475, 1084,
	1085, 1086, 1087, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 1088, 232, 233, 234, 235,
	236, 237, 1089, 1090, 238, 480, 481, 482, 1091, 239,
	483, 1092, 1077, 1093, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1094, 250, 0, 251, 252,
	253, 1095, 952, 254, 255, 1096, 1097, 1099, 1098, 1100,
	1101, 1102, 256, 257, 258, 259, 260, 261, 484, 485,
	1103, 262, 1104, 264, 263, 1105, 265, 1106, 1107, 266,
	267, 268, 1108, 269, 1109, 270, 271, 1110, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 1111, 215, 1112, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 1113, 289, 1114, 1115,
	953, 290, 291, 1116, 292, 490, 1117, 491, 293, 1118,
	294, 295, 296, 297, 492, 493, 494, 347, 955, 298,
	299, 1119, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1120, 954, 305, 495, 307, 306, 308, 309, 310,
	496, 1121, 497, 1122, 312, 956, 498, 957, 313, 314,
	315, 958, 316, 317, 0, 0, 318, 319, 320, 321,
	1123, 323, 322, 1124, 324, 499, 959, 325, 326, 960,
	1125, 327, 328, 1126, 1127, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 961,
	342, 343, 345, 344, 1128, 217, 962, 346, 1129, 500,
	501, 348, 349, 1130, 350, 351, 352, 1131, 1132, 354,
	355, 356, 1133, 1134, 357, 358, 502, 963, 359, 964,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	1135, 368, 369, 504, 370, 505, 371, 1136, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 1137,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 1138, 394, 965, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 1139, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 1140, 421, 401, 402, 422, 423, 966,
	424, 425, 508, 426, 427, 1141, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 1142, 439,
	440, 438, 1143, 441, 442, 443, 444, 445, 277, 446,
	1144, 447, 510, 511, 512, 513, 1145, 454, 1146, 448,
	449, 514, 450, 515, 1147, 451, 452, 453, 0, 455,
	456, 1148, 1149, 457, 458, 459, 460, 461, 463, 1150,
	464, 1151, 462, 465, 466, 467, 516, 517, 518, 1152,
	469, 468, 519, 1153, 1154, 1155, 1156, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3136, 218, 219, 220, 221, 222, 1079,
	223, 1080, 1081, 1082, 0, 1083, 475, 1084, 1085, 1086,
	1087, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 1088, 232, 233, 234, 235, 236, 237,
	1089, 1090, 238, 480, 481, 482, 1091, 239, 483, 1092,
	1077, 1093, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1094, 250, 0, 251, 252, 253, 1095,
	952, 254, 255, 1096, 1097, 1099, 1098, 1100, 1101, 1102,
	256, 257, 258, 259, 260, 261, 484, 485, 1103, 262,
	1104, 264, 263, 1105, 265, 1106, 1107, 266, 267, 268,
	1108, 269, 1109, 270, 271, 1110, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 1111,
	215, 1112, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 1113, 289, 1114, 1115, 953, 290,
	291, 1116, 292, 490, 1117, 491, 293, 1118, 294, 295,
	296, 297, 492, 493, 494, 347, 955, 298, 299, 1119,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1120,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 1121,
	497, 1122, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 1123, 323,
	322, 1124, 324, 499, 959, 325, 326, 960, 1125, 327,
	328, 1126, 1127, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 1128, 217, 962, 346, 1129, 500, 501, 348,
	349, 1130, 350, 351, 352, 1131, 1132, 354, 355, 356,
	1133, 1134, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 1135, 368,
	369, 504, 370, 505, 371, 1136, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 1137, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 1138, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	1139, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 1140, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 1141, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 1142, 439, 440, 438,
	1143, 441, 442, 443, 444, 445, 277, 446, 1144, 447,
	510, 511, 512, 513, 1145, 454, 1146, 448, 449, 514,
	450, 515, 1147, 451, 452, 453, 0, 455, 456, 1148,
	1149, 457, 458, 459, 460, 461, 463, 1150, 464, 1151,
	462, 465, 466, 467, 516, 517, 518, 1152, 469, 468,
	519, 1153, 1154, 1155, 1156, 470, 471, 520, 472, 473,
	474, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3257, 0, 218, 219,
	220, 221, 222, 1079, 223, 1080, 1081, 1082, 0, 1083,
	475, 1084, 1085, 1086, 1087, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 1088, 232, 233,
	234, 235, 236, 237, 1089, 1090, 238, 480, 481, 482,
	1091, 239, 483, 1092, 1077, 1093, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1094, 250, 0,
	251, 252, 253, 1095, 952, 254, 255, 1096, 1097, 1099,
	1098, 1100, 1101, 1102, 256, 257, 258, 259, 260, 261,
	484, 485, 1103, 262, 1104, 264, 263, 1105, 265, 1106,
	1107, 266, 267, 268, 1108, 269, 1109, 270, 271, 1110,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 1111, 215, 1112, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 1113, 289,
	1114, 1115, 953, 290, 291, 1116, 292, 490, 1117, 491,
	293, 1118, 294, 295, 296, 297, 492, 493, 494, 347,
	955, 298, 299, 1119, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1120, 954, 305, 495, 307, 306, 308,
	309, 310, 496, 1121, 497, 1122, 312, 956, 498, 957,
	313, 314, 315, 958, 316, 317, 0, 0, 318, 319,
	320, 321, 1123, 323, 322, 1124, 324, 499, 959, 325,
	326, 960, 1125, 327, 328, 1126, 1127, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 961, 342, 343, 345, 344, 1128, 217, 962, 346,
	1129, 500, 501, 348, 349, 1130, 350, 351, 352, 1131,
	1132, 354, 355, 356, 1133, 1134, 357, 358, 502, 963,
	359, 964, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 1135, 368, 369, 504, 370, 505, 371, 1136,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 1137, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 1138, 394, 965, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 1139, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 1140, 421, 401, 402, 422,
	423, 966, 424, 425, 508, 426, 427, 1141, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	1142, 439, 440, 438, 1143, 441, 442, 443, 444, 445,
	277, 446, 1144, 447, 510, 511, 512, 513, 1145, 454,
	1146, 448, 449, 514, 450, 515, 1147, 451, 452, 453,
	0, 455, 456, 1148, 1149, 457, 458, 459, 460, 461,
	463, 1150, 464, 1151, 462, 465, 466, 467, 516, 517,
	518, 1152, 469, 468, 519, 1153, 1154, 1155, 1156, 470,
	471, 520, 472, 473, 474, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3187, 0, 218, 219, 220, 221, 222, 1079, 223, 1080,
	1081, 1082, 0, 1083, 475, 1084, 1085, 1086, 1087, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 1088, 232, 233, 234, 235, 236, 237, 1089, 1090,
	238, 480, 481, 482, 1091, 239, 483, 1092, 1077, 1093,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1094, 250, 0, 251, 252, 253, 1095, 952, 254,
	255, 1096, 1097, 1099, 1098, 1100, 1101, 1102, 256, 257,
	258, 259, 260, 261, 484, 485, 1103, 262, 1104, 264,
	263, 1105, 265, 1106, 1107, 266, 267, 268, 1108, 269,
	1109, 270, 271, 1110, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 1111, 215, 1112,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 1113, 289, 1114, 1115, 953, 290, 291, 1116,
	292, 490, 1117, 491, 293, 1118, 294, 295, 296, 297,
	492, 493, 494, 347, 955, 298, 299, 1119, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1120, 954, 305,
	495, 307, 306, 308, 309, 310, 496, 1121, 497, 1122,
	312, 956, 498, 957, 313, 314, 315, 958, 316, 317,
	0, 0, 318, 319, 320, 321, 1123, 323, 322, 1124,
	324, 499, 959, 325, 326, 960, 1125, 327, 328, 1126,
	1127, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 961, 342, 343, 345, 344,
	1128, 217, 962, 346, 1129, 500, 501, 348, 349, 1130,
	350, 351, 352, 1131, 1132, 354, 355, 356, 1133, 1134,
	357, 358, 502, 963, 359, 964, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 1135, 368, 369, 504,
	370, 505, 371, 1136, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 1137, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	1138, 394, 965, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 1139, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 1140,
	421, 401, 402, 422, 423, 966, 424, 425, 508, 426,
	427, 1141, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 1142, 439, 440, 438, 1143, 441,
	442, 443, 444, 445, 277, 446, 1144, 447, 510, 511,
	512, 513, 1145, 454, 1146, 448, 449, 514, 450, 515,
	1147, 451, 452, 453, 0, 455, 456, 1148, 1149, 457,
	458, 459, 460, 461, 463, 1150, 464, 1151, 462, 465,
	466, 467, 516, 517, 518, 1152, 469, 468, 519, 1153,
	1154, 1155, 1156, 470, 471, 520, 472, 473, 474, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3072, 0, 218, 219, 220, 221,
	222, 1079, 223, 1080, 1081, 1082, 0, 1083, 475, 1084,
	1085, 1086, 1087, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 1088, 232, 233, 234, 235,
	236, 237, 1089, 1090, 238, 480, 481, 482, 1091, 239,
	483, 1092, 1077, 1093, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1094, 250, 0, 251, 252,
	253, 1095, 952, 254, 255, 1096, 1097, 1099, 1098, 1100,
	1101, 1102, 256, 257, 258, 259, 260, 261, 484, 485,
	1103, 262, 1104, 264, 263, 1105, 265, 1106, 1107, 266,
	267, 268, 1108, 269, 1109, 270, 271, 1110, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 1111, 215, 1112, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 1113, 289, 1114, 1115,
	953, 290, 291, 1116, 292, 490, 1117, 491, 293, 1118,
	294, 295, 296, 297, 492, 493, 494, 347, 955, 298,
	299, 1119, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1120, 954, 305, 495, 307, 306, 308, 309, 310,
	496, 1121, 497, 1122, 312, 956, 498, 957, 313, 314,
	315, 958, 316, 317, 0, 0, 318, 319, 320, 321,
	1123, 323, 322, 1124, 324, 499, 959, 325, 326, 960,
	1125, 327, 328, 1126, 1127, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 961,
	342, 343, 345, 344, 1128, 217, 962, 346, 1129, 500,
	501, 348, 349, 1130, 350, 351, 352, 1131, 1132, 354,
	355, 356, 1133, 1134, 357, 358, 502, 963, 359, 964,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	1135, 368, 369, 504, 370, 505, 371, 1136, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 1137,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 1138, 394, 965, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 1139, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 1140, 421, 401, 402, 422, 423, 966,
	424, 425, 508, 426, 427, 1141, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 1142, 439,
	440, 438, 1143, 441, 442, 443, 444, 445, 277, 446,
	1144, 447, 510, 511, 512, 513, 1145, 454, 1146, 448,
	449, 514, 450, 515, 1147, 451, 452, 453, 0, 455,
	456, 1148, 1149, 457, 458, 459, 460, 461, 463, 1150,
	464, 1151, 462, 465, 466, 467, 516, 517, 518, 1152,
	469, 468, 519, 1153, 1154, 1155, 1156, 470, 471, 520,
	472, 473, 474, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2869, 0,
	218, 219, 220, 221, 222, 1079, 223, 1080, 1081, 1082,
	0, 1083, 475, 1084, 1085, 1086, 1087, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 1088,
	232, 233, 234, 235, 236, 237, 1089, 1090, 238, 480,
	481, 482, 1091, 239, 483, 1092, 1077, 1093, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 1094,
	250, 0, 251, 252, 253, 1095, 952, 254, 255, 1096,
	1097, 1099, 1098, 1100, 1101, 1102, 256, 257, 258, 259,
	260, 261, 484, 485, 1103, 262, 1104, 264, 263, 1105,
	265, 1106, 1107, 266, 267, 268, 1108, 269, 1109, 270,
	271, 1110, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 1111, 215, 1112, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	1113, 289, 1114, 1115, 953, 290, 291, 1116, 292, 490,
	1117, 491, 293, 1118, 294, 295, 296, 297, 492, 493,
	494, 347, 955, 298, 299, 1119, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 1120, 954, 305, 495, 307,
	306, 308, 309, 310, 496, 1121, 497, 1122, 312, 956,
	498, 957, 313, 314, 315, 958, 316, 317, 0, 0,
	318, 319, 320, 321, 1123, 323, 322, 1124, 324, 499,
	959, 325, 326, 960, 1125, 327, 328, 1126, 1127, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 961, 342, 343, 345, 344, 1128, 217,
	962, 346, 1129, 500, 501, 348, 349, 1130, 350, 351,
	352, 1131, 1132, 354, 355, 356, 1133, 1134, 357, 358,
	502, 963, 359, 964, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 1135, 368, 369, 504, 370, 505,
	371, 1136, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 1137, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 1138, 394,
	965, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 1139, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 1140, 421, 401,
	402, 422, 423, 966, 424, 425, 508, 426, 427, 1141,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 1142, 439, 440, 438, 1143, 441, 442, 443,
	444, 445, 277, 446, 1144, 447, 510, 511, 512, 513,
	1145, 454, 1146, 448, 449, 514, 450, 515, 1147, 451,
	452, 453, 0, 455, 456, 1148, 1149, 457, 458, 459,
	460, 461, 463, 1150, 464, 1151, 462, 465, 466, 467,
	516, 517, 518, 1152, 469, 468, 519, 1153, 1154, 1155,
	1156, 470, 471, 520, 472, 473, 474, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2861, 0, 218, 219, 220, 221, 222, 1079,
	223, 1080, 1081, 1082, 0, 1083, 475, 1084, 1085, 1086,
	1087, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 1088, 232, 233, 234, 235, 236, 237,
	1089, 1090, 238, 480, 481, 482, 1091, 239, 483, 1092,
	1077, 1093, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1094, 250, 0, 251, 252, 253, 1095,
	952, 254, 255, 1096, 1097, 1099, 1098, 1100, 1101, 1102,
	256, 257, 258, 259, 260, 261, 484, 485, 1103, 262,
	1104, 264, 263, 1105, 265, 1106, 1107, 266, 267, 268,
	1108, 269, 1109, 270, 271, 1110, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 1111,
	215, 1112, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 1113, 289, 1114, 1115, 953, 290,
	291, 1116, 292, 490, 1117, 491, 293, 1118, 294, 295,
	296, 297, 492, 493, 494, 347, 955, 298, 299, 1119,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1120,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 1121,
	497, 1122, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 1123, 323,
	322, 1124, 324, 499, 959, 325, 326, 960, 1125, 327,
	328, 1126, 1127, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 1128, 217, 962, 346, 1129, 500, 501, 348,
	349, 1130, 350, 351, 352, 1131, 1132, 354, 355, 356,
	1133, 1134, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 1135, 368,
	369, 504, 370, 505, 371, 1136, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 1137, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 1138, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	1139, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 1140, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 1141, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 1142, 439, 440, 438,
	1143, 441, 442, 443, 444, 445, 277, 446, 1144, 447,
	510, 511, 512, 513, 1145, 454, 1146, 448, 449, 514,
	450, 515, 1147, 451, 452, 453, 0, 455, 456, 1148,
	1149, 457, 458, 459, 460, 461, 463, 1150, 464, 1151,
	462, 465, 466, 467, 516, 517, 518, 1152, 469, 468,
	519, 1153, 1154, 1155, 1156, 470, 471, 520, 472, 473,
	474, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2730, 0, 218, 219,
	220, 221, 222, 1079, 223, 1080, 1081, 1082, 0, 1083,
	475, 1084, 1085, 1086, 1087, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 1088, 232, 233,
	234, 235, 236, 237, 1089, 1090, 238, 480, 481, 482,
	1091, 239, 483, 1092, 1077, 1093, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1094, 250, 0,
	251, 252, 253, 1095, 952, 254, 255, 1096, 1097, 1099,
	1098, 1100, 1101, 1102, 256, 257, 258, 259, 260, 261,
	484, 485, 1103, 262, 1104, 264, 263, 1105, 265, 1106,
	1107, 266, 267, 268, 1108, 269, 1109, 270, 271, 1110,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 1111, 215, 1112, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 1113, 289,
	1114, 1115, 953, 290, 291, 1116, 292, 490, 1117, 491,
	293, 1118, 294, 295, 296, 297, 492, 493, 494, 347,
	955, 298, 299, 1119, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1120, 954, 305, 495, 307, 306, 308,
	309, 310, 496, 1121, 497, 1122, 312, 956, 498, 957,
	313, 314, 315, 958, 316, 317, 0, 0, 318, 319,
	320, 321, 1123, 323, 322, 1124, 324, 499, 959, 325,
	326, 960, 1125, 327, 328, 1126, 1127, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 961, 342, 343, 345, 344, 1128, 217, 962, 346,
	1129, 500, 501, 348, 349, 1130, 350, 351, 352, 1131,
	1132, 354, 355, 356, 1133, 1134, 357, 358, 502, 963,
	359, 964, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 1135, 368, 369, 504, 370, 505, 371, 1136,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 1137, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 1138, 394, 965, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 1139, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 1140, 421, 401, 402, 422,
	423, 966, 424, 425, 508, 426, 427, 1141, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	1142, 439, 440, 438, 1143, 441, 442, 443, 444, 445,
	277, 446, 1144, 447, 510, 511, 512, 513, 1145, 454,
	1146, 448, 449, 514, 450, 515, 1147, 451, 452, 453,
	0, 455, 456, 1148, 1149, 457, 458, 459, 460, 461,
	463, 1150, 464, 1151, 462, 465, 466, 467, 516, 517,
	518, 1152, 469, 468, 519, 1153, 1154, 1155, 1156, 470,
	471, 520, 472, 473, 474, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2087, 0, 218, 219, 220, 221, 222, 1079, 223, 1080,
	1081, 1082, 0, 1083, 475, 1084, 1085, 1086, 1087, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 1088, 232, 233, 234, 235, 236, 237, 1089, 1090,
	238, 480, 481, 482, 1091, 239, 483, 1092, 1077, 1093,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1094, 250, 0, 251, 252, 253, 1095, 952, 254,
	255, 1096, 1097, 1099, 1098, 1100, 1101, 1102, 256, 257,
	258, 259, 260, 261, 484, 485, 1103, 262, 1104, 264,
	263, 1105, 265, 1106, 1107, 266, 267, 268, 1108, 269,
	1109, 270, 271, 1110, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 1111, 215, 1112,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 1113, 289, 1114, 1115, 953, 290, 291, 1116,
	292, 490, 1117, 491, 293, 1118, 294, 295, 296, 297,
	492, 493, 494, 347, 955, 298, 299, 1119, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1120, 954, 305,
	495, 307, 306, 308, 309, 310, 496, 1121, 497, 1122,
	312, 956, 498, 957, 313, 314, 315, 958, 316, 317,
	0, 0, 318, 319, 320, 321, 1123, 323, 322, 1124,
	324, 499, 959, 325, 326, 960, 1125, 327, 328, 1126,
	1127, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 961, 342, 343, 345, 344,
	1128, 217, 962, 346, 1129, 500, 501, 348, 349, 1130,
	350, 351, 352, 1131, 1132, 354, 355, 356, 1133, 1134,
	357, 358, 502, 963, 359, 964, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 1135, 368, 369, 504,
	370, 505, 371, 1136, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 1137, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	1138, 394, 965, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 1139, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 1140,
	421, 401, 402, 422, 423, 966, 424, 425, 508, 426,
	427, 1141, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 1142, 439, 440, 438, 1143, 441,
	442, 443, 444, 445, 277, 446, 1144, 447, 510, 511,
	512, 513, 1145, 454, 1146, 448, 449, 514, 450, 515,
	1147, 451, 452, 453, 0, 455, 456, 1148, 1149, 457,
	458, 459, 460, 461, 463, 1150, 464, 1151, 462, 465,
	466, 467, 516, 517, 518, 1152, 469, 468, 519, 1153,
	1154, 1155, 1156, 470, 471, 520, 472, 473, 474, 1180,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1801, 0, 0, 0, 218, 219,
	220, 221, 222, 1079, 223, 1080, 1081, 1082, 0, 1083,
	475, 1084, 1085, 1086, 1087, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 1088, 232, 233,
	234, 235, 236, 237, 1089, 1090, 238, 480, 481, 482,
	1091, 239, 483, 1092, 1077, 1093, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1094, 250, 0,
	251, 252, 253, 1095, 952, 254, 255, 1096, 1097, 1099,
	1098, 1100, 1101, 1102, 256, 257, 258, 259, 260, 261,
	484, 485, 1103, 262, 1104, 264, 263, 1105, 265, 1106,
	1107, 266, 267, 268, 1108, 269, 1109, 270, 271, 1110,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 1111, 215, 1112, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 1113, 289,
	1114, 1115, 953, 290, 291, 1116, 292, 490, 1117, 491,
	293, 1118, 294, 295, 296, 297, 492, 493, 494, 347,
	955, 298, 299, 1119, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1120, 954, 305, 495, 307, 306, 308,
	309, 310, 496, 1121, 497, 1122, 312, 956, 498, 957,
	313, 314, 315, 958, 316, 317, 0, 0, 318, 319,
	320, 321, 1123, 323, 322, 1124, 324, 499, 959, 325,
	326, 960, 1125, 327, 328, 1126, 1127, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 961, 342, 343, 345, 344, 1128, 217, 962, 346,
	1129, 500, 501, 348, 349, 1130, 350, 351, 352, 1131,
	1132, 354, 355, 356, 1133, 1134, 357, 358, 502, 963,
	359, 964, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 1135, 368, 369, 504, 370, 505, 371, 1136,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 1137, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 1138, 394, 965, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 1139, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 1140, 421, 401, 402, 422,
	423, 966, 424, 425, 508, 426, 427, 1141, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	1142, 439, 440, 438, 1143, 441, 442, 443, 444, 445,
	277, 446, 1144, 447, 510, 511, 512, 513, 1145, 454,
	1146, 448, 449, 514, 450, 515, 1147, 451, 452, 453,
	0, 455, 456, 1148, 1149, 457, 458, 459, 460, 461,
	463, 1150, 464, 1151, 462, 465, 466, 467, 516, 517,
	518, 1152, 469, 468, 519, 1153, 1154, 1155, 1156, 470,
	471, 520, 472, 473, 474, 1069, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 1079,
	223, 1080, 1081, 1082, 0, 1083, 475, 1084, 1085, 1086,
	1087, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 1088, 232, 233, 234, 235, 236, 237,
	1089, 1090, 238, 480, 481, 482, 1091, 239, 483, 1092,
	1077, 1093, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1094, 250, 0, 251, 252, 253, 1095,
	952, 254, 255, 1096, 1097, 1099, 1098, 1100, 1101, 1102,
	256, 257, 258, 259, 260, 261, 484, 485, 1103, 262,
	1104, 264, 263, 1105, 265, 1106, 1107, 266, 267, 268,
	1108, 269, 1109, 270, 271, 1110, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 1111,
	215, 1112, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 1113, 289, 1114, 1115, 953, 290,
	291, 1116, 292, 490, 1117, 491, 293, 1118, 294, 295,
	296, 297, 492, 493, 494, 347, 955, 298, 299, 1119,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1120,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 1121,
	497, 1122, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 1123, 323,
	322, 1124, 324, 499, 959, 325, 326, 960, 1125, 327,
	328, 1126, 1127, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 1128, 217, 962, 346, 1129, 500, 501, 348,
	349, 1130, 350, 351, 352, 1131, 1132, 354, 355, 356,
	1133, 1134, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 1135, 368,
	369, 504, 370, 505, 371, 1136, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 1137, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 1138, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	1139, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 1140, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 1141, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 1142, 439, 440, 438,
	1143, 441, 442, 443, 444, 445, 277, 446, 1144, 447,
	510, 511, 512, 513, 1145, 454, 1146, 448, 449, 514,
	450, 515, 1147, 451, 452, 453, 0, 455, 456, 1148,
	1149, 457, 458, 459, 460, 461, 463, 1150, 464, 1151,
	462, 465, 466, 467, 516, 517, 518, 1152, 469, 468,
	519, 1153, 1154, 1155, 1156, 470, 471, 520, 472, 473,
	474, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 1079, 223, 1080, 1081, 1082, 0, 1083,
	475, 1084, 1085, 1086, 1087, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 1088, 232, 233,
	234, 235, 236, 237, 1089, 1090, 238, 480, 481, 482,
	1091, 239, 483, 1092, 1077, 1093, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1094, 250, 0,
	251, 252, 253, 1095, 952, 254, 255, 1096, 1097, 1099,
	1098, 1100, 1101, 1102, 256, 257, 258, 259, 260, 261,
	484, 485, 1103, 262, 1104, 264, 263, 1105, 265, 1106,
	1107, 266, 267, 268, 1108, 269, 1109, 270, 271, 1110,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 1111, 215, 1112, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 1113, 289,
	1114, 1115, 953, 290, 291, 1116, 292, 490, 1117, 491,
	293, 1118, 294, 295, 296, 297, 492, 493, 494, 347,
	955, 298, 299, 1119, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1120, 954, 305, 495, 307, 306, 308,
	309, 310, 496, 1121, 497, 1122, 312, 956, 498, 957,
	313, 314, 315, 958, 316, 317, 0, 0, 318, 319,
	320, 321, 1123, 323, 322, 1124, 324, 499, 959, 325,
	326, 960, 1125, 327, 328, 1126, 1127, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 961, 342, 343, 345, 344, 1128, 217, 962, 346,
	1129, 500, 501, 348, 349, 1130, 350, 351, 352, 1131,
	1132, 354, 355, 356, 1133, 1134, 357, 358, 502, 963,
	359, 964, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 1135, 368, 369, 504, 370, 505, 371, 1136,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 1137, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 1138, 394, 965, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 1139, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 1140, 421, 401, 402, 422,
	423, 966, 424, 425, 508, 426, 427, 1141, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	1142, 439, 440, 438, 1143, 441, 442, 443, 444, 445,
	277, 446, 1144, 447, 510, 511, 512, 513, 1145, 454,
	1146, 448, 449, 514, 450, 515, 1147, 451, 452, 453,
	0, 455, 456, 1148, 1149, 457, 458, 459, 460, 461,
	463, 1150, 464, 1151, 462, 465, 466, 467, 516, 517,
	518, 1152, 469, 468, 519, 1153, 1154, 1155, 1156, 470,
	471, 520, 472, 473, 474, 2063, 0, 894, 851, 852,
	853, 849, 850, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 2060,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 261, 916, 915, 840, 262,
	0, 264, 263, 0, 265, 2061, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 297, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 882, 339, 961, 342, 343,
	345, 344, 837, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	841, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 516, 921, 968, 2059, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 838, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 834, 835, 2062, 0, 0, 0,
	0, 0, 0, 864, 2058, 0, 827, 862, 894, 851,
	852, 853, 849, 850, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 943, 868, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 909, 888,
	920, 878, 919, 918, 0, 232, 880, 879, 235, 236,
	237, 870, 942, 238, 978, 979, 482, 0, 239, 949,
	0, 932, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 952, 254, 255, 935, 933, 934, 939, 937, 936,
	938, 256, 257, 258, 259, 923, 261, 916, 915, 840,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 914,
	268, 0, 269, 0, 270, 271, 0, 272, 846, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 969, 970,
	859, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	913, 911, 912, 0, 288, 0, 289, 0, 0, 953,
	290, 291, 0, 292, 976, 0, 869, 293, 0, 294,
	295, 296, 297, 944, 945, 948, 347, 955, 298, 299,
	0, 300, 301, 890, 0, 0, 216, 302, 304, 311,
	0, 954, 305, 902, 893, 904, 906, 907, 908, 903,
	0, 895, 0, 312, 956, 946, 957, 313, 314, 315,
	958, 928, 929, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 977, 959, 325, 326, 960, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 882, 339, 961, 342,
	343, 345, 344, 837, 217, 962, 346, 860, 947, 917,
	348, 349, 0, 891, 351, 892, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 963, 359, 964, 971,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 972, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 910, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 965, 395, 396, 397, 398,
	847, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 181, 416, 417, 883, 884, 886, 887, 412, 418,
	419, 420, 940, 421, 401, 402, 422, 423, 966, 424,
	425, 905, 885, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 951, 433, 434, 435, 973, 0, 439, 440,
	438, 183, 441, 442, 443, 444, 445, 277, 881, 0,
	447, 924, 925, 926, 927, 0, 454, 0, 448, 449,
	974, 450, 975, 858, 451, 452, 453, 0, 455, 456,
	0, 841, 457, 458, 459, 460, 461, 463, 941, 464,
	0, 889, 465, 466, 467, 1319, 921, 968, 0, 469,
	468, 519, 0, 0, 0, 175, 470, 471, 520, 472,
	473, 474, 838, 176, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 834, 835, 894, 851, 852,
	853, 849, 850, 863, 1525, 1523, 0, 0, 862, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 261, 916, 915, 840, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 297, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 882, 339, 961, 342, 343,
	345, 344, 837, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	181, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	183, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	841, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 1319, 921, 968, 0, 469, 468,
	519, 0, 0, 0, 175, 470, 471, 520, 472, 473,
	474, 838, 176, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 834, 835, 894, 851, 852, 853,
	849, 850, 863, 1525, 2489, 0, 0, 862, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 943, 868, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 909, 888, 920, 878,
	919, 918, 0, 232, 880, 879, 235, 236, 237, 870,
	942, 238, 978, 979, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 923, 261, 916, 915, 840, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 914, 268, 0,
	269, 0, 270, 271, 0, 272, 846, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 859, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 913, 911,
	912, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 869, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 955, 298, 299, 0, 300,
	301, 890, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 902, 893, 904, 906, 907, 908, 903, 0, 895,
	0, 312, 956, 946, 957, 313, 314, 315, 958, 928,
	929, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 977, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 882, 339, 961, 342, 343, 345,
	344, 837, 217, 962, 346, 860, 947, 917, 348, 349,
	0, 891, 351, 892, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 910, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 847, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 181,
	416, 417, 883, 884, 886, 887, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 966, 424, 425, 905,
	885, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	951, 433, 434, 435, 973, 0, 439, 440, 438, 183,
	441, 442, 443, 444, 445, 277, 881, 0, 447, 924,
	925, 926, 927, 0, 454, 0, 448, 449, 974, 450,
	975, 858, 451, 452, 453, 0, 455, 456, 0, 841,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 889,
	465, 466, 467, 1319, 921, 968, 0, 469, 468, 519,
	0, 0, 0, 175, 470, 471, 520, 472, 473, 474,
	838, 176, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 834, 835, 894, 851, 852, 853, 849,
	850, 863, 1525, 1523, 0, 0, 862, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 943, 868, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 909, 888, 920, 878, 919,
	918, 2148, 232, 880, 879, 235, 236, 237, 870, 942,
	238, 978, 979, 482, 0, 239, 949, 0, 932, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 952, 254,
	255, 935, 933, 934, 939, 937, 936, 938, 256, 257,
	258, 259, 923, 261, 916, 915, 840, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 914, 268, 0, 269,
	0, 270, 271, 0, 272, 846, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 969, 970, 859, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 913, 911, 912,
	0, 288, 0, 289, 0, 2153, 953, 290, 291, 0,
	292, 976, 0, 869, 293, 0, 294, 295, 296, 297,
	944, 945, 948, 347, 955, 298, 299, 0, 300, 301,
	890, 0, 0, 216, 302, 304, 311, 0, 954, 305,
	902, 893, 904, 906, 907, 908, 903, 0, 895, 0,
	312, 956, 946, 957, 313, 314, 315, 958, 928, 929,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 2149,
	324, 977, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 882, 339, 961, 342, 343, 345, 344,
	837, 217, 962, 346, 860, 947, 917, 348, 349, 0,
	891, 351, 892, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 971, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 972,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 910, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 847, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 883, 884, 886, 887, 412, 418, 419, 420, 940,
	421, 401, 402, 422, 423, 966, 424, 425, 905, 885,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 951,
	433, 434, 435, 973, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 881, 0, 447, 924, 925,
	926, 927, 0, 454, 2150, 448, 449, 974, 450, 975,
	858, 451, 452, 453, 0, 455, 456, 0, 841, 457,
	458, 459, 460, 461, 463, 941, 464, 0, 889, 465,
	466, 467, 516, 921, 968, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 838,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 834, 835, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 1382, 862, 894, 851, 852, 853,
	849, 850, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 943, 868, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 909, 888, 920, 878,
	919, 918, 0, 232, 880, 879, 235, 236, 237, 870,
	942, 238, 978, 979, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 923, 261, 916, 915, 840, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 914, 268, 0,
	269, 0, 270, 271, 0, 272, 846, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 859, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 913, 911,
	912, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 869, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 955, 298, 299, 0, 300,
	301, 890, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 902, 893, 904, 906, 907, 908, 903, 0, 895,
	0, 312, 956, 946, 957, 313, 314, 315, 958, 928,
	929, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 977, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 882, 339, 961, 342, 343, 345,
	344, 837, 217, 962, 346, 860, 947, 917, 348, 349,
	0, 891, 351, 892, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 910, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 847, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 883, 884, 886, 887, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 966, 424, 425, 905,
	885, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	951, 433, 434, 435, 973, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 881, 0, 447, 924,
	925, 926, 927, 0, 454, 0, 448, 449, 974, 450,
	975, 858, 451, 452, 453, 0, 455, 456, 0, 841,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 889,
	465, 466, 467, 516, 921, 968, 0, 469, 468, 519,
	1381, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	838, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 834, 835, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 830, 862, 894, 851, 852,
	853, 849, 850, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 261, 916, 915, 840, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 297, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 882, 339, 961, 342, 343,
	345, 344, 837, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 842, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	841, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 516, 921, 968, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 838, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 834, 835, 894, 851, 852, 853,
	849, 850, 863, 864, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 943, 868, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 909, 888, 920, 878,
	919, 918, 0, 232, 880, 879, 235, 236, 237, 870,
	942, 238, 978, 979, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 3458, 253, 0, 952,
	254, 255, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 923, 261, 916, 915, 840, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 914, 268, 0,
	269, 0, 270, 271, 0, 272, 846, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 859, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 913, 911,
	912, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 869, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 955, 298, 299, 0, 300,
	301, 890, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 902, 893, 904, 906, 907, 908, 903, 0, 895,
	0, 312, 956, 946, 957, 313, 314, 315, 958, 928,
	929, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 977, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 882, 339, 961, 342, 343, 345,
	344, 837, 217, 962, 346, 860, 947, 917, 348, 349,
	0, 891, 351, 892, 842, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 910, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 847, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 883, 884, 886, 887, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 966, 424, 425, 905,
	885, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	951, 433, 434, 435, 973, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 881, 0, 447, 924,
	925, 926, 927, 0, 454, 0, 448, 449, 974, 450,
	975, 858, 451, 452, 453, 0, 455, 456, 0, 841,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 889,
	465, 466, 467, 516, 921, 968, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	838, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 834, 835, 894, 851, 852, 853, 849,
	850, 863, 864, 0, 0, 0, 862, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 943, 868, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 909, 888, 920, 878, 919,
	918, 0, 232, 880, 879, 235, 236, 237, 870, 942,
	238, 978, 979, 482, 0, 239, 949, 0, 932, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 3314, 253, 0, 952, 254,
	255, 935, 933, 934, 939, 937, 936, 938, 256, 257,
	258, 259, 923, 261, 916, 915, 840, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 914, 268, 0, 269,
	0, 270, 271, 0, 272, 846, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 969, 970, 859, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 913, 911, 912,
	0, 288, 0, 289, 0, 0, 953, 290, 291, 0,
	292, 976, 0, 869, 293, 0, 294, 295, 296, 297,
	944, 945, 948, 347, 955, 298, 299, 0, 300, 301,
	890, 0, 0, 216, 302, 304, 311, 0, 954, 305,
	902, 893, 904, 906, 907, 908, 903, 0, 895, 0,
	312, 956, 946, 957, 313, 314, 315, 958, 928, 929,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 977, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 882, 339, 961, 342, 343, 345, 344,
	837, 217, 962, 346, 860, 947, 917, 348, 349, 0,
	891, 351, 892, 842, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 971, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 972,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 910, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 847, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 883, 884, 886, 887, 412, 418, 419, 420, 940,
	421, 401, 402, 422, 423, 966, 424, 425, 905, 885,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 951,
	433, 434, 435, 973, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 881, 0, 447, 924, 925,
	926, 927, 0, 454, 0, 448, 449, 974, 450, 975,
	858, 451, 452, 453, 0, 455, 456, 0, 841, 457,
	458, 459, 460, 461, 463, 941, 464, 0, 889, 465,
	466, 467, 516, 921, 968, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 838,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 834, 835, 894, 851, 852, 853, 849, 850,
	863, 864, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 943, 868, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 909, 888, 920, 878, 919, 918,
	0, 232, 880, 879, 235, 236, 237, 870, 942, 238,
	978, 979, 482, 0, 239, 949, 0, 932, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	935, 933, 934, 939, 937, 936, 938, 256, 257, 258,
	259, 923, 261, 916, 915, 840, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 914, 268, 0, 269, 0,
	270, 271, 0, 272, 846, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 969, 970, 859, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 913, 911, 912, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	976, 0, 869, 293, 0, 294, 295, 296, 297, 944,
	945, 948, 347, 955, 298, 299, 0, 300, 301, 890,
	0, 0, 216, 302, 304, 311, 0, 954, 305, 902,
	893, 904, 906, 907, 908, 903, 0, 895, 0, 312,
	956, 946, 957, 313, 314, 315, 958, 928, 929, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	977, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 882, 339, 961, 342, 343, 345, 344, 837,
	3042, 962, 346, 860, 947, 917, 348, 349, 0, 891,
	351, 892, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 971, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 972, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 910, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 847, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	883, 884, 886, 887, 412, 418, 419, 420, 940, 421,
	401, 402, 422, 423, 966, 424, 425, 905, 885, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 951, 433,
	434, 435, 973, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 881, 0, 447, 924, 925, 926,
	927, 0, 454, 0, 448, 449, 974, 450, 975, 858,
	451, 452, 453, 0, 455, 456, 0, 841, 457, 458,
	459, 460, 461, 463, 941, 464, 0, 889, 465, 466,
	467, 516, 921, 968, 0, 469, 468, 519, 0, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 838, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 834, 835, 1585, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 862, 894, 851, 852, 853, 849,
	850, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 943, 868, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 909, 888, 920, 878, 919,
	918, 0, 232, 880, 879, 235, 236, 237, 870, 942,
	238, 978, 979, 482, 0, 239, 949, 0, 932, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 952, 254,
	255, 935, 933, 934, 939, 937, 936, 938, 256, 257,
	258, 259, 923, 261, 916, 915, 840, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 914, 268, 0, 269,
	0, 270, 271, 0, 272, 846, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 969, 970, 859, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 913, 911, 912,
	0, 288, 0, 289, 0, 0, 953, 290, 291, 0,
	292, 976, 0, 869, 293, 0, 294, 295, 296, 297,
	944, 945, 948, 347, 955, 298, 299, 0, 300, 301,
	890, 0, 0, 216, 302, 304, 311, 0, 954, 305,
	902, 893, 904, 906, 907, 908, 903, 0, 895, 0,
	312, 956, 946, 957, 313, 314, 315, 958, 928, 929,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 977, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 882, 339, 961, 342, 343, 345, 344,
	837, 217, 962, 346, 860, 947, 917, 348, 349, 0,
	891, 351, 892, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 971, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 972,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 910, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 847, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 883, 884, 886, 887, 412, 418, 419, 420, 940,
	421, 401, 402, 422, 423, 966, 424, 425, 905, 885,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 951,
	433, 434, 435, 973, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 881, 0, 447, 924, 925,
	926, 927, 0, 454, 0, 448, 449, 974, 450, 975,
	858, 451, 452, 453, 0, 455, 456, 0, 841, 457,
	458, 459, 460, 461, 463, 941, 464, 0, 889, 465,
	466, 467, 516, 921, 968, 2848, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 838,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 834, 835, 894, 851, 852, 853, 849, 850,
	863, 864, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 943, 868, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 909, 888, 920, 878, 919, 918,
	0, 232, 880, 879, 235, 236, 237, 870, 942, 238,
	978, 979, 482, 0, 239, 949, 0, 932, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	935, 933, 934, 939, 937, 936, 938, 256, 257, 258,
	259, 923, 261, 916, 915, 840, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 914, 268, 0, 269, 0,
	270, 271, 0, 272, 846, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 969, 970, 859, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 913, 911, 912, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	976, 0, 869, 293, 0, 294, 295, 296, 297, 944,
	945, 948, 347, 955, 298, 299, 0, 300, 301, 890,
	0, 0, 1977, 302, 304, 311, 0, 954, 305, 902,
	893, 904, 906, 907, 908, 903, 0, 895, 0, 312,
	956, 946, 957, 313, 314, 315, 958, 928, 929, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	977, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 882, 339, 961, 342, 343, 345, 344, 837,
	217, 962, 346, 860, 947, 917, 348, 349, 0, 891,
	351, 892, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 971, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 972, 370,
	505, 371, 1976, 372, 0, 373, 374, 375, 376, 377,
	378, 910, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 847, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	883, 884, 886, 887, 412, 418, 419, 420, 940, 421,
	401, 402, 422, 423, 966, 424, 425, 905, 885, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 951, 433,
	434, 435, 973, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 881, 0, 447, 924, 925, 926,
	927, 0, 454, 0, 448, 449, 974, 450, 975, 858,
	451, 452, 453, 0, 455, 456, 0, 841, 457, 458,
	459, 460, 461, 463, 941, 464, 0, 889, 465, 466,
	467, 516, 921, 968, 0, 469, 468, 519, 0, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 838, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 834, 835, 894, 851, 852, 853, 849, 850, 863,
	864, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 943, 868, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 909, 888, 920, 878, 919, 918, 0,
	232, 880, 879, 235, 236, 237, 870, 942, 238, 978,
	979, 482, 0, 239, 949, 0, 932, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 952, 254, 255, 935,
	933, 934, 939, 937, 936, 938, 256, 257, 258, 259,
	923, 261, 916, 915, 840, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 914, 268, 0, 269, 0, 270,
	271, 0, 272, 846, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 969, 970, 859, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 913, 911, 912, 0, 288,
	0, 289, 0, 0, 953, 290, 291, 0, 292, 976,
	0, 869, 293, 0, 294, 295, 296, 297, 944, 945,
	948, 347, 955, 298, 299, 0, 300, 301, 890, 0,
	0, 216, 302, 304, 311, 0, 954, 305, 902, 893,
	904, 906, 907, 908, 903, 0, 895, 0, 312, 956,
	946, 957, 313, 314, 315, 958, 928, 929, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 977,
	959, 325, 326, 960, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 882, 339, 961, 342, 343, 345, 344, 837, 217,
	962, 346, 860, 947, 917, 348, 349, 0, 891, 351,
	892, 842, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 963, 359, 964, 971, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 972, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	910, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	965, 395, 396, 397, 398, 847, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 883,
	884, 886, 887, 412, 418, 419, 420, 940, 421, 401,
	402, 422, 423, 966, 424, 425, 905, 885, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 951, 433, 434,
	435, 973, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 881, 0, 447, 924, 925, 926, 927,
	0, 454, 0, 448, 449, 974, 450, 975, 858, 451,
	452, 453, 0, 455, 456, 0, 841, 457, 458, 459,
	460, 461, 463, 941, 464, 0, 889, 465, 466, 467,
	516, 921, 968, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 838, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	834, 835, 894, 851, 852, 853, 849, 850, 863, 864,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 943, 868, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 909, 888, 920, 878, 919, 918, 0, 232,
	880, 879, 235, 236, 237, 870, 942, 238, 978, 979,
	482, 0, 239, 949, 0, 932, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 952, 254, 255, 935, 933,
	934, 939, 937, 936, 938, 256, 257, 258, 259, 923,
	261, 916, 915, 840, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 914, 268, 0, 269, 0, 270, 271,
	0, 272, 846, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 969, 970, 859, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 913, 911, 912, 0, 288, 0,
	289, 0, 0, 953, 290, 291, 0, 292, 976, 0,
	869, 293, 0, 294, 295, 296, 297, 944, 945, 948,
	347, 955, 298, 299, 0, 300, 301, 890, 0, 0,
	216, 302, 304, 311, 0, 954, 305, 902, 893, 904,
	906, 907, 908, 903, 0, 895, 0, 312, 956, 946,
	957, 313, 314, 315, 958, 928, 929, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 977, 959,
	325, 326, 960, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	882, 339, 961, 342, 343, 345, 344, 837, 217, 962,
	346, 860, 947, 917, 348, 349, 0, 891, 351, 892,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	963, 359, 964, 971, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 972, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 910,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 965,
	395, 396, 397, 398, 847, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 883, 884,
	886, 887, 412, 418, 419, 420, 940, 421, 401, 402,
	422, 423, 966, 424, 425, 905, 885, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 951, 433, 434, 435,
	973, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 881, 0, 447, 924, 925, 926, 927, 0,
	454, 0, 448, 449, 974, 450, 975, 858, 451, 452,
	453, 0, 455, 456, 0, 841, 457, 458, 459, 460,
	461, 463, 941, 464, 0, 889, 465, 466, 467, 516,
	921, 968, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 838, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 834,
	835, 1585, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 862, 894, 851, 852, 853, 849, 850, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 943, 868, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 909, 888, 920, 878, 919, 918, 0,
	232, 880, 879, 235, 236, 237, 870, 942, 238, 978,
	979, 482, 0, 239, 949, 0, 932, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 952, 254, 255, 935,
	933, 934, 939, 937, 936, 938, 256, 257, 258, 259,
	923, 261, 916, 915, 840, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 914, 268, 0, 269, 0, 270,
	271, 0, 272, 846, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 969, 970, 859, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 913, 911, 912, 0, 288,
	0, 289, 0, 2153, 953, 290, 291, 0, 292, 976,
	0, 869, 293, 0, 294, 295, 296, 297, 944, 945,
	948, 347, 955, 298, 299, 0, 300, 301, 890, 0,
	0, 216, 302, 304, 311, 0, 954, 305, 902, 893,
	904, 906, 907, 908, 903, 0, 895, 0, 312, 956,
	946, 957, 313, 314, 315, 958, 928, 929, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 977,
	959, 325, 326, 960, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 882, 339, 961, 342, 343, 345, 344, 837, 217,
	962, 346, 860, 947, 917, 348, 349, 0, 891, 351,
	892, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 963, 359, 964, 971, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 972, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	910, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	965, 395, 396, 397, 398, 847, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 883,
	884, 886, 887, 412, 418, 419, 420, 940, 421, 401,
	402, 422, 423, 966, 424, 425, 905, 885, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 951, 433, 434,
	435, 973, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 881, 0, 447, 924, 925, 926, 927,
	0, 454, 0, 448, 449, 974, 450, 975, 858, 451,
	452, 453, 0, 455, 456, 0, 841, 457, 458, 459,
	460, 461, 463, 941, 464, 0, 889, 465, 466, 467,
	516, 921, 968, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 838, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	834, 835, 894, 851, 852, 853, 849, 850, 863, 864,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 943, 868, 0, 0, 0, 224, 226, 225, 227,
	228, 476, 909, 888, 920, 878, 919, 918, 0, 232,
	880, 879, 235, 236, 237, 870, 942, 238, 978, 979,
	482, 0, 239, 949, 0, 932, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 952, 254, 255, 935, 933,
	934, 939, 937, 936, 938, 256, 257, 258, 259, 923,
	261, 916, 915, 840, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 914, 268, 0, 269, 0, 270, 271,
	0, 272, 846, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 969, 970, 859, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 913, 911, 912, 0, 288, 0,
	289, 0, 0, 953, 290, 291, 0, 292, 976, 0,
	869, 293, 0, 294, 295, 296, 297, 944, 945, 948,
	347, 955, 298, 299, 0, 300, 301, 890, 0, 0,
	216, 302, 304, 311, 0, 954, 305, 902, 893, 904,
	906, 907, 908, 903, 0, 895, 0, 312, 956, 946,
	957, 313, 314, 315, 958, 928, 929, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 977, 959,
	325, 326, 960, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	882, 339, 961, 342, 343, 345, 344, 837, 217, 962,
	346, 860, 947, 917, 348, 349, 0, 891, 351, 892,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	963, 359, 964, 971, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 972, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 910,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 965,
	395, 396, 397, 398, 847, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 883, 884,
	886, 887, 412, 418, 419, 420, 940, 421, 401, 402,
	422, 423, 966, 424, 425, 905, 885, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 951, 433, 434, 435,
	973, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 881, 0, 447, 924, 925, 926, 927, 0,
	454, 0, 448, 449, 974, 450, 975, 858, 451, 452,
	453, 0, 455, 456, 0, 841, 457, 458, 459, 460,
	461, 463, 941, 464, 0, 889, 465, 466, 467, 516,
	921, 968, 0, 469, 468, 519, 0, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 838, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 0, 834,
	835, 0, 0, 0, 0, 0, 0, 0, 864, 1523,
	0, 2158, 862, 894, 851, 852, 853, 849, 850, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 943, 868, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 909, 888, 920, 878, 919, 918, 0,
	232, 880, 879, 235, 236, 237, 870, 942, 238, 978,
	979, 482, 0, 239, 949, 0, 932, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 952, 254, 255, 935,
	933, 934, 939, 937, 936, 938, 256, 257, 258, 259,
	923, 261, 916, 915, 840, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 914, 268, 0, 269, 0, 270,
	271, 0, 272, 846, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 969, 970, 859, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 913, 911, 912, 0, 288,
	0, 289, 0, 0, 953, 290, 291, 0, 292, 976,
	0, 869, 293, 0, 294, 295, 296, 297, 944, 945,
	948, 347, 955, 298, 299, 0, 300, 301, 890, 0,
	0, 216, 302, 304, 311, 0, 954, 305, 902, 893,
	904, 906, 907, 908, 903, 0, 895, 0, 312, 956,
	946, 957, 313, 314, 315, 958, 928, 929, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 977,
	959, 325, 326, 960, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 882, 339, 961, 342, 343, 345, 344, 837, 217,
	962, 346, 860, 947, 917, 348, 349, 0, 891, 351,
	892, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 963, 359, 964, 971, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 972, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	910, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	965, 395, 396, 397, 398, 847, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 883,
	884, 886, 887, 412, 418, 419, 420, 940, 421, 401,
	402, 422, 423, 966, 424, 425, 905, 885, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 951, 433, 434,
	435, 973, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 881, 0, 447, 924, 925, 926, 927,
	0, 454, 0, 448, 449, 974, 450, 975, 858, 451,
	452, 453, 0, 455, 456, 0, 841, 457, 458, 459,
	460, 461, 463, 941, 464, 0, 889, 465, 466, 467,
	516, 921, 968, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 838, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	834, 835, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 2156, 862, 894, 851, 852, 853, 849, 850,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 943, 868, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 909, 888, 920, 878, 919, 918,
	0, 232, 880, 879, 235, 236, 237, 870, 942, 238,
	978, 979, 482, 0, 239, 949, 0, 932, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	935, 933, 934, 939, 937, 936, 938, 256, 257, 258,
	259, 923, 261, 916, 915, 840, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 914, 268, 0, 269, 0,
	270, 271, 0, 272, 846, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 969, 970, 859, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 913, 911, 912, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	976, 0, 869, 293, 0, 294, 295, 296, 297, 944,
	945, 948, 347, 955, 298, 299, 0, 300, 301, 890,
	0, 0, 216, 302, 304, 311, 0, 954, 305, 902,
	893, 904, 906, 907, 908, 903, 0, 895, 0, 312,
	956, 946, 957, 313, 314, 315, 958, 928, 929, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	977, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 882, 339, 961, 342, 343, 345, 344, 837,
	217, 962, 346, 860, 947, 917, 348, 349, 0, 891,
	351, 892, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 971, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 972, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 910, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 847, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	883, 884, 886, 887, 412, 418, 419, 420, 940, 421,
	401, 402, 422, 423, 966, 424, 425, 905, 885, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 951, 433,
	434, 435, 973, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 881, 0, 447, 924, 925, 926,
	927, 0, 454, 0, 448, 449, 974, 450, 975, 858,
	451, 452, 453, 0, 455, 456, 0, 841, 457, 458,
	459, 460, 461, 463, 941, 464, 0, 889, 465, 466,
	467, 516, 921, 968, 0, 469, 468, 519, 0, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 838, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 834, 835, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 2144, 862, 894, 851, 852, 853, 849,
	850, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 943, 868, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 909, 888, 920, 878, 919,
	918, 0, 232, 880, 879, 235, 236, 237, 870, 942,
	238, 978, 979, 482, 0, 239, 949, 0, 932, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 952, 254,
	255, 935, 933, 934, 939, 937, 936, 938, 256, 257,
	258, 259, 923, 261, 916, 915, 840, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 914, 268, 0, 269,
	0, 270, 271, 0, 272, 846, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 969, 970, 859, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 913, 911, 912,
	0, 288, 0, 289, 0, 0, 953, 290, 291, 0,
	292, 976, 0, 869, 293, 0, 294, 295, 296, 297,
	944, 945, 948, 347, 955, 298, 299, 0, 300, 301,
	890, 0, 0, 216, 302, 304, 311, 0, 954, 305,
	902, 893, 904, 906, 907, 908, 903, 0, 895, 0,
	312, 956, 946, 957, 313, 314, 315, 958, 928, 929,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 977, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 882, 339, 961, 342, 343, 345, 344,
	837, 217, 962, 346, 860, 947, 917, 348, 349, 0,
	891, 351, 892, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 971, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 972,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 910, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 847, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 883, 884, 886, 887, 412, 418, 419, 420, 940,
	421, 401, 402, 422, 423, 966, 424, 425, 905, 885,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 951,
	433, 434, 435, 973, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 881, 0, 447, 924, 925,
	926, 927, 0, 454, 0, 448, 449, 974, 450, 975,
	858, 451, 452, 453, 0, 455, 456, 0, 841, 457,
	458, 459, 460, 461, 463, 941, 464, 0, 889, 465,
	466, 467, 516, 921, 968, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 838,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 834, 835, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 2133, 862, 894, 851, 852, 853,
	849, 850, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 943, 868, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 909, 888, 920, 878,
	919, 918, 0, 232, 880, 879, 235, 236, 237, 870,
	942, 238, 978, 979, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 923, 261, 916, 915, 840, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 914, 268, 0,
	269, 0, 270, 271, 0, 272, 846, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 859, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 913, 911,
	912, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 869, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 955, 298, 299, 0, 300,
	301, 890, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 902, 893, 904, 906, 907, 908, 903, 0, 895,
	0, 312, 956, 946, 957, 313, 314, 315, 958, 928,
	929, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 977, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 882, 339, 961, 342, 343, 345,
	344, 837, 217, 962, 346, 860, 947, 917, 348, 349,
	0, 891, 351, 892, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 910, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 847, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 883, 884, 886, 887, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 966, 424, 425, 905,
	885, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	951, 433, 434, 435, 973, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 881, 0, 447, 924,
	925, 926, 927, 0, 454, 0, 448, 449, 974, 450,
	975, 858, 451, 452, 453, 0, 455, 456, 0, 841,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 889,
	465, 466, 467, 516, 921, 968, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	838, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 834, 835, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 2131, 862, 2123, 851, 852,
	853, 849, 850, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 2126, 916, 915, 840, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 2127, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 2128, 2125, 340, 882, 339, 961, 342, 343,
	345, 344, 837, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 2129,
	0, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	841, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 516, 921, 968, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 2124,
	474, 838, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 834, 835, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 2120, 862, 2123, 851,
	852, 853, 849, 850, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 943, 868, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 909, 888,
	920, 878, 919, 918, 0, 232, 880, 879, 235, 236,
	237, 870, 942, 238, 978, 979, 482, 0, 239, 949,
	0, 932, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 952, 254, 255, 935, 933, 934, 939, 937, 936,
	938, 256, 257, 258, 259, 923, 2126, 916, 915, 840,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 914,
	268, 0, 269, 0, 270, 271, 0, 272, 846, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 969, 970,
	859, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	913, 911, 912, 0, 288, 0, 289, 0, 0, 953,
	290, 291, 0, 292, 976, 0, 869, 293, 0, 294,
	295, 296, 2127, 944, 945, 948, 347, 955, 298, 299,
	0, 300, 301, 890, 0, 0, 216, 302, 304, 311,
	0, 954, 305, 902, 893, 904, 906, 907, 908, 903,
	0, 895, 0, 312, 956, 946, 957, 313, 314, 315,
	958, 928, 929, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 977, 959, 325, 326, 960, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 2128, 2125, 340, 882, 339, 961, 342,
	343, 345, 344, 837, 217, 962, 346, 860, 947, 917,
	348, 349, 0, 891, 351, 892, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 963, 359, 964, 971,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 972, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 910, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 965, 395, 396, 397, 398,
	847, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	2129, 0, 416, 417, 883, 884, 886, 887, 412, 418,
	419, 420, 940, 421, 401, 402, 422, 423, 966, 424,
	425, 905, 885, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 951, 433, 434, 435, 973, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 881, 0,
	447, 924, 925, 926, 927, 0, 454, 0, 448, 449,
	974, 450, 975, 858, 451, 452, 453, 0, 455, 456,
	0, 841, 457, 458, 459, 460, 461, 463, 941, 464,
	0, 889, 465, 466, 467, 516, 921, 968, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	2124, 474, 838, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 834, 835, 894, 851, 852,
	853, 849, 850, 863, 864, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 261, 916, 915, 840, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 297, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 882, 339, 961, 342, 343,
	345, 344, 837, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	841, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 516, 921, 968, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 838, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 834, 835, 0, 0, 0, 0,
	0, 1531, 0, 864, 0, 0, 0, 862, 894, 851,
	852, 853, 849, 850, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	1963, 223, 0, 0, 0, 0, 0, 943, 868, 0,
	0, 0, 224, 226, 225, 227, 228, 476, 909, 888,
	920, 878, 919, 918, 0, 232, 880, 879, 235, 236,
	237, 870, 942, 238, 978, 979, 482, 0, 239, 949,
	0, 932, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 952, 254, 255, 935, 933, 934, 939, 937, 936,
	938, 256, 257, 258, 259, 923, 261, 916, 915, 840,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 914,
	268, 0, 269, 0, 270, 271, 0, 272, 846, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 969, 970,
	859, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	913, 911, 912, 0, 288, 0, 289, 0, 0, 953,
	290, 291, 0, 292, 976, 0, 869, 293, 0, 294,
	295, 296, 297, 944, 945, 948, 347, 955, 298, 299,
	0, 300, 301, 890, 0, 0, 216, 302, 304, 311,
	0, 954, 305, 902, 893, 904, 906, 907, 908, 903,
	0, 895, 0, 312, 956, 946, 957, 313, 314, 315,
	958, 928, 929, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 977, 959, 325, 326, 960, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 882, 339, 961, 342,
	343, 345, 344, 837, 217, 962, 346, 860, 947, 917,
	348, 349, 0, 891, 351, 892, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 963, 359, 964, 971,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 972, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 910, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 965, 395, 396, 397, 398,
	847, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 883, 884, 886, 887, 412, 418,
	419, 420, 940, 421, 401, 402, 422, 423, 966, 424,
	425, 905, 885, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 951, 433, 434, 435, 973, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 881, 0,
	447, 924, 925, 926, 927, 0, 454, 0, 448, 449,
	974, 450, 975, 858, 451, 452, 453, 0, 455, 456,
	0, 841, 457, 458, 459, 460, 461, 463, 941, 464,
	0, 889, 465, 466, 467, 516, 921, 968, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 838, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 834, 835, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 1209, 862, 894,
	851, 852, 853, 849, 850, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 943, 868,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 909,
	888, 920, 878, 919, 918, 0, 232, 880, 879, 235,
	236, 237, 870, 942, 238, 978, 979, 482, 0, 239,
	949, 0, 932, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 952, 254, 255, 935, 933, 934, 939, 937,
	936, 938, 256, 257, 258, 259, 923, 261, 916, 915,
	840, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	914, 268, 0, 269, 0, 270, 271, 0, 272, 846,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 969,
	970, 859, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 913, 911, 912, 0, 288, 0, 289, 0, 0,
	953, 290, 291, 0, 292, 976, 0, 869, 293, 0,
	294, 295, 296, 297, 1208, 945, 948, 347, 955, 298,
	299, 0, 300, 301, 890, 0, 0, 216, 302, 304,
	311, 0, 954, 305, 902, 893, 904, 906, 907, 908,
	903, 0, 895, 0, 312, 956, 946, 957, 313, 314,
	315, 958, 928, 929, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 977, 959, 325, 326, 960,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 882, 339, 961,
	342, 343, 345, 344, 837, 217, 962, 346, 860, 947,
	917, 348, 349, 0, 891, 351, 892, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 963, 359, 964,
	971, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 972, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 910, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 965, 395, 396, 397,
	398, 847, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 883, 884, 886, 887, 412,
	418, 419, 420, 940, 421, 401, 402, 422, 423, 966,
	424, 425, 905, 885, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 951, 433, 434, 435, 973, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 881,
	0, 447, 924, 925, 926, 927, 0, 454, 0, 448,
	449, 974, 450, 975, 858, 451, 452, 453, 0, 455,
	456, 0, 841, 457, 458, 459, 460, 461, 463, 941,
	464, 0, 889, 465, 466, 467, 516, 921, 968, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 838, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 834, 835, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 1203, 862,
	894, 851, 852, 853, 849, 850, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 943,
	868, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	909, 888, 920, 878, 919, 918, 0, 232, 880, 879,
	235, 236, 237, 870, 942, 238, 978, 979, 482, 0,
	239, 949, 0, 932, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 935, 933, 934, 939,
	937, 936, 938, 256, 257, 258, 259, 923, 261, 916,
	915, 840, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 914, 268, 0, 269, 0, 270, 271, 0, 272,
	846, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	969, 970, 859, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 913, 911, 912, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 976, 0, 869, 293,
	0, 294, 295, 296, 297, 1202, 945, 948, 347, 955,
	298, 299, 0, 300, 301, 890, 0, 0, 216, 302,
	304, 311, 0, 954, 305, 902, 893, 904, 906, 907,
	908, 903, 0, 895, 0, 312, 956, 946, 957, 313,
	314, 315, 958, 928, 929, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 977, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 882, 339,
	961, 342, 343, 345, 344, 837, 217, 962, 346, 860,
	947, 917, 348, 349, 0, 891, 351, 892, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 971, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 972, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 910, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 847, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 883, 884, 886, 887,
	412, 418, 419, 420, 940, 421, 401, 402, 422, 423,
	966, 424, 425, 905, 885, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 951, 433, 434, 435, 973, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	881, 0, 447, 924, 925, 926, 927, 0, 454, 0,
	448, 449, 974, 450, 975, 858, 451, 452, 453, 0,
	455, 456, 0, 841, 457, 458, 459, 460, 461, 463,
	941, 464, 0, 889, 465, 466, 467, 516, 921, 968,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 838, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 834, 835, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 1198,
	862, 894, 851, 852, 853, 849, 850, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	943, 868, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 909, 888, 920, 878, 919, 918, 0, 232, 880,
	879, 235, 236, 237, 870, 942, 238, 978, 979, 482,
	0, 239, 949, 0, 932, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 952, 254, 255, 935, 933, 934,
	939, 937, 936, 938, 256, 257, 258, 259, 923, 261,
	916, 915, 840, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 914, 268, 0, 269, 0, 270, 271, 0,
	272, 846, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 969, 970, 859, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 913, 911, 912, 0, 288, 0, 289,
	0, 0, 953, 290, 291, 0, 292, 976, 0, 869,
	293, 0, 294, 295, 296, 297, 944, 945, 948, 347,
	955, 298, 299, 0, 300, 301, 890, 0, 0, 216,
	302, 304, 311, 0, 954, 305, 902, 893, 904, 906,
	907, 908, 903, 0, 895, 0, 312, 956, 946, 957,
	313, 314, 315, 958, 928, 929, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 977, 959, 325,
	326, 960, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 882,
	339, 961, 342, 343, 345, 344, 837, 217, 962, 346,
	860, 947, 917, 348, 349, 0, 891, 351, 892, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 963,
	359, 964, 971, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 972, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 910, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 965, 395,
	396, 397, 398, 847, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 883, 884, 886,
	887, 412, 418, 419, 420, 940, 421, 401, 402, 422,
	423, 966, 424, 425, 905, 885, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 951, 433, 434, 435, 973,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 881, 0, 447, 924, 925, 926, 927, 0, 454,
	0, 448, 449, 974, 450, 975, 858, 451, 452, 453,
	0, 455, 456, 0, 841, 457, 458, 459, 460, 461,
	463, 941, 464, 0, 889, 465, 466, 467, 516, 921,
	968, 0, 469, 468, 519, 0, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 838, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 834, 835,
	894, 851, 852, 853, 849, 850, 863, 864, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 943,
	868, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	909, 888, 920, 878, 919, 918, 0, 232, 880, 879,
	235, 236, 237, 870, 942, 238, 978, 979, 482, 0,
	239, 949, 0, 932, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 935, 933, 934, 939,
	937, 936, 938, 256, 257, 258, 259, 923, 261, 916,
	915, 840, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 914, 268, 0, 269, 0, 270, 271, 0, 272,
	846, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	969, 970, 859, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 913, 911, 912, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 976, 0, 869, 293,
	0, 294, 295, 296, 297, 944, 945, 948, 347, 955,
	298, 299, 0, 300, 301, 890, 0, 0, 216, 302,
	304, 311, 0, 954, 305, 902, 893, 904, 906, 907,
	908, 903, 0, 895, 0, 312, 956, 946, 957, 313,
	314, 315, 958, 928, 929, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 977, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 882, 339,
	961, 342, 343, 345, 344, 837, 217, 962, 346, 860,
	947, 917, 348, 349, 0, 891, 351, 892, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 971, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 972, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 910, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 847, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 883, 884, 886, 887,
	412, 418, 419, 420, 940, 421, 401, 402, 422, 423,
	966, 424, 425, 905, 885, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 951, 433, 434, 435, 973, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	881, 0, 447, 924, 925, 926, 927, 0, 454, 0,
	448, 449, 974, 450, 975, 858, 451, 452, 453, 0,
	455, 456, 0, 841, 457, 458, 459, 460, 461, 463,
	941, 464, 0, 889, 465, 466, 467, 516, 921, 968,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 838, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 834, 835, 894,
	851, 852, 853, 849, 850, 863, 864, 0, 0, 0,
	862, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 943, 868,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 909,
	888, 920, 878, 919, 918, 0, 232, 880, 879, 235,
	236, 237, 870, 942, 238, 978, 979, 482, 0, 239,
	949, 0, 932, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 952, 254, 3487, 935, 933, 934, 939, 937,
	936, 938, 256, 257, 258, 259, 923, 261, 916, 915,
	840, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	914, 268, 0, 269, 0, 270, 271, 0, 272, 846,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 969,
	970, 859, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 913, 911, 912, 0, 288, 0, 289, 0, 0,
	953, 290, 291, 0, 292, 976, 0, 869, 293, 0,
	294, 295, 296, 297, 944, 945, 948, 347, 955, 298,
	299, 0, 300, 301, 890, 0, 0, 216, 302, 304,
	311, 0, 954, 305, 902, 893, 904, 906, 907, 908,
	903, 0, 895, 0, 312, 956, 946, 957, 313, 314,
	315, 958, 928, 929, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 977, 959, 325, 326, 960,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 882, 339, 961,
	342, 343, 345, 344, 837, 217, 962, 346, 860, 947,
	917, 348, 349, 0, 891, 351, 892, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 963, 359, 964,
	971, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 972, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 910, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 965, 395, 396, 397,
	398, 847, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 883, 884, 886, 887, 412,
	418, 419, 420, 940, 421, 401, 402, 422, 423, 966,
	424, 425, 905, 885, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 951, 433, 434, 435, 973, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 881,
	0, 447, 924, 925, 926, 927, 0, 454, 0, 448,
	449, 974, 450, 975, 858, 451, 452, 453, 0, 3486,
	456, 0, 841, 457, 458, 459, 460, 461, 463, 941,
	464, 0, 889, 465, 466, 467, 516, 921, 968, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 838, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 834, 835, 894, 851,
	852, 853, 849, 850, 863, 864, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 943, 868, 0,
	0, 0, 224, 226, 225, 227, 228, 3485, 909, 888,
	920, 878, 919, 918, 0, 232, 880, 879, 235, 236,
	237, 870, 942, 238, 978, 979, 482, 0, 239, 949,
	0, 932, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 952, 254, 3487, 935, 933, 934, 939, 937, 936,
	938, 256, 257, 258, 259, 923, 261, 916, 915, 840,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 914,
	268, 0, 269, 0, 270, 271, 0, 272, 846, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 969, 970,
	859, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	913, 911, 912, 0, 288, 0, 289, 0, 0, 953,
	290, 291, 0, 292, 976, 0, 869, 293, 0, 294,
	295, 296, 297, 944, 945, 948, 347, 955, 298, 299,
	0, 300, 301, 890, 0, 0, 216, 302, 304, 311,
	0, 954, 305, 902, 893, 904, 906, 907, 908, 903,
	0, 895, 0, 312, 956, 946, 957, 313, 314, 315,
	958, 928, 929, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 977, 959, 325, 326, 960, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 882, 339, 961, 342,
	343, 345, 344, 837, 217, 962, 346, 860, 947, 917,
	348, 349, 0, 891, 351, 892, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 963, 359, 964, 971,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 972, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 910, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 965, 395, 396, 397, 398,
	847, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 883, 884, 886, 887, 412, 418,
	419, 420, 940, 421, 401, 402, 422, 423, 966, 424,
	425, 905, 885, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 951, 433, 434, 435, 973, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 881, 0,
	447, 924, 925, 926, 927, 0, 454, 0, 448, 449,
	974, 450, 975, 858, 451, 452, 453, 0, 3486, 456,
	0, 841, 457, 458, 459, 460, 461, 463, 941, 464,
	0, 889, 465, 466, 467, 516, 921, 968, 0, 469,
	468, 519, 0, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 838, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 0, 0, 834, 835, 894, 851, 852,
	853, 849, 850, 863, 864, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 943, 868, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 909, 888, 920,
	878, 919, 918, 0, 232, 880, 879, 235, 236, 237,
	870, 942, 238, 978, 979, 482, 0, 239, 949, 0,
	932, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 935, 933, 934, 939, 937, 936, 938,
	256, 257, 258, 259, 923, 261, 916, 915, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 914, 268,
	0, 269, 0, 270, 271, 0, 272, 846, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 969, 970, 859,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 913,
	911, 912, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 976, 0, 869, 293, 0, 294, 295,
	296, 297, 944, 945, 948, 347, 955, 298, 299, 0,
	300, 301, 890, 0, 0, 216, 302, 304, 311, 0,
	954, 305, 902, 893, 904, 906, 907, 908, 903, 0,
	895, 0, 312, 956, 946, 957, 313, 314, 315, 958,
	928, 929, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 977, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 882, 339, 961, 342, 343,
	345, 344, 0, 217, 962, 346, 860, 947, 917, 348,
	349, 0, 891, 351, 892, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 971, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 972, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 910, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 847,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 883, 884, 886, 887, 412, 418, 419,
	420, 940, 421, 401, 402, 422, 423, 966, 424, 425,
	905, 885, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 951, 433, 434, 435, 973, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 881, 0, 447,
	924, 925, 926, 927, 0, 454, 0, 448, 449, 974,
	450, 975, 858, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 941, 464, 0,
	889, 465, 466, 467, 516, 921, 968, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 2141, 0, 0,
	0, 0, 0, 0, 2139, 2140, 894, 851, 852, 853,
	849, 850, 863, 864, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 943, 868, 0, 0, 0,
	224, 226, 225, 227, 228, 0, 909, 888, 920, 878,
	919, 918, 0, 232, 880, 879, 235, 236, 237, 870,
	942, 238, 978, 979, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 3487, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 923, 261, 916, 915, 840, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 914, 268, 0,
	269, 0, 270, 271, 0, 272, 846, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 859, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 913, 911,
	912, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 869, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 0, 298, 299, 0, 300,
	301, 890, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 902, 893, 904, 906, 907, 908, 903, 0, 895,
	0, 312, 0, 946, 0, 313, 314, 315, 958, 928,
	929, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 977, 959, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 882, 339, 961, 342, 343, 345,
	344, 837, 217, 0, 346, 860, 947, 917, 348, 349,
	0, 891, 351, 892, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 910, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 847, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 883, 884, 886, 887, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 0, 424, 425, 905,
	885, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	951, 433, 434, 435, 973, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 881, 0, 447, 924,
	925, 926, 927, 0, 454, 0, 448, 449, 974, 450,
	975, 858, 451, 452, 453, 0, 3486, 456, 0, 841,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 889,
	465, 466, 467, 516, 921, 968, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	1015, 0, 0, 834, 835, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 862, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 943,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 942, 238, 480, 481, 482, 0,
	239, 949, 0, 932, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 935, 933, 934, 939,
	937, 936, 938, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	969, 970, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 976, 0, 491, 293,
	0, 294, 295, 296, 297, 944, 945, 948, 347, 955,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 954, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 956, 946, 957, 313,
	314, 315, 958, 316, 317, 0, 0, 318, 319, 320,
	321, 1002, 323, 322, 0, 324, 977, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	961, 342, 343, 345, 344, 0, 217, 962, 346, 0,
	947, 501, 348, 349, 0, 350, 351, 352, 0, 1007,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 971, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 972, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 507, 1009, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 181, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 940, 421, 401, 402, 422, 423,
	966, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 973, 0,
	439, 440, 438, 183, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 974, 450, 975, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	941, 464, 0, 462, 465, 466, 467, 1319, 517, 518,
	0, 469, 468, 519, 1015, 0, 0, 175, 470, 471,
	520, 472, 473, 474, 0, 176, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 943, 999, 0, 1617, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 942, 238,
	480, 481, 482, 0, 239, 949, 0, 932, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	935, 933, 934, 939, 937, 936, 938, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 969, 970, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	976, 0, 491, 293, 0, 294, 295, 296, 297, 944,
	945, 948, 347, 955, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 954, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	956, 946, 957, 313, 314, 315, 958, 316, 317, 0,
	0, 318, 319, 320, 321, 1002, 323, 322, 0, 324,
	977, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 961, 342, 343, 345, 344, 0,
	217, 962, 346, 0, 947, 501, 348, 349, 0, 350,
	351, 352, 0, 1007, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 971, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 972, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 507, 1009, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 181, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 940, 421,
	401, 402, 422, 423, 966, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 973, 0, 439, 440, 438, 183, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 974, 450, 975, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 941, 464, 0, 462, 465, 466,
	467, 1319, 517, 518, 0, 469, 468, 519, 2598, 0,
	1015, 175, 470, 471, 520, 472, 473, 474, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 999, 943,
	1617, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 942, 238, 480, 481, 482, 0,
	239, 949, 0, 932, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 935, 933, 934, 939,
	937, 936, 938, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	969, 970, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 976, 0, 491, 293,
	0, 294, 295, 296, 297, 944, 945, 948, 347, 955,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 954, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 956, 946, 957, 313,
	314, 315, 958, 316, 317, 0, 0, 318, 319, 320,
	321, 1002, 323, 322, 0, 324, 977, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	961, 342, 343, 345, 344, 0, 217, 962, 346, 0,
	947, 501, 348, 349, 0, 350, 351, 352, 0, 1007,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 971, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 972, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 507, 1009, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 940, 421, 401, 402, 422, 423,
	966, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 973, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 974, 450, 975, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	941, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 998, 0, 1015, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 999, 943, 1004, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	942, 238, 480, 481, 482, 0, 239, 949, 0, 932,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 935, 933, 934, 939, 937, 936, 938, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 969, 970, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 976, 0, 491, 293, 0, 294, 295, 296,
	297, 944, 945, 948, 347, 955, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 954,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 956, 946, 957, 313, 314, 315, 958, 316,
	317, 0, 0, 318, 319, 320, 321, 1002, 323, 322,
	0, 324, 977, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 961, 342, 343, 345,
	344, 0, 217, 962, 346, 0, 947, 501, 348, 349,
	0, 350, 351, 352, 0, 1007, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 971, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	972, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 507, 1009,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	940, 421, 401, 402, 422, 423, 966, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 973, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 974, 450,
	975, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 941, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	1015, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 943,
	999, 0, 1004, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 942, 238, 480, 481, 482, 0,
	239, 949, 0, 932, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 935, 933, 934, 939,
	937, 936, 938, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	969, 970, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 976, 0, 491, 293,
	0, 294, 295, 296, 297, 944, 945, 948, 347, 955,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 954, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 956, 946, 957, 313,
	314, 315, 958, 316, 317, 0, 0, 318, 319, 320,
	321, 1002, 323, 322, 0, 324, 977, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	961, 342, 343, 345, 344, 0, 217, 962, 346, 0,
	947, 501, 348, 349, 0, 350, 351, 352, 0, 1007,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 971, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 972, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 507, 1009, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 940, 421, 401, 402, 422, 423,
	966, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 973, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 974, 450, 975, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	941, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 1015, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 943, 999, 0, 1004, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 942, 238,
	480, 481, 482, 0, 239, 949, 0, 932, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	935, 933, 934, 939, 937, 936, 938, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 969, 970, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	976, 0, 491, 293, 0, 294, 295, 296, 297, 944,
	945, 948, 347, 955, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 954, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	956, 946, 957, 313, 314, 315, 958, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	977, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 961, 342, 343, 345, 344, 0,
	217, 962, 346, 0, 947, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 971, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 972, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 507, 1009, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 940, 421,
	401, 402, 422, 423, 966, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 973, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 974, 450, 975, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 941, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 827, 0,
	1173, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	1512, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 1077, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 955,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 954, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 956, 498, 957, 313,
	314, 315, 958, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	961, 342, 343, 345, 344, 0, 0, 962, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 181, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	966, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 183, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 1319, 517, 518,
	0, 469, 468, 519, 1316, 0, 1173, 175, 470, 471,
	520, 472, 473, 474, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 150, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 1077,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 955, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 954,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 956, 498, 957, 313, 314, 315, 958, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 961, 342, 343, 345,
	344, 0, 0, 962, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 181,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 966, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 183,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 1319, 517, 518, 0, 469, 468, 519,
	0, 0, 0, 175, 470, 471, 520, 472, 473, 474,
	0, 176, 0, 0, 0, 0, 1173, 1172, 0, 0,
	0, 0, 1170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 1077,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 952,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 953, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 955, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 954,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 956, 498, 957, 313, 314, 315, 958, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 959, 325, 326, 960, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 961, 342, 343, 345,
	344, 0, 0, 962, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 963, 359, 964, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 965, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 966, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	0, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	1173, 1172, 0, 0, 0, 0, 1170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 1796, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 1077, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 952, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 953, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 955,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 954, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 956, 498, 957, 313,
	314, 315, 958, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 959, 325, 326,
	960, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	961, 342, 343, 345, 344, 0, 0, 962, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 963, 359,
	964, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 965, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	966, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 0, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 1173, 1172, 0, 0, 0, 0,
	1170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 2793, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 1077, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 952, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 953, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 955, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 954, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	956, 498, 957, 313, 314, 315, 958, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 959, 325, 326, 960, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 961, 342, 343, 345, 344, 0,
	0, 962, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 963, 359, 964, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 965, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 966, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 1015, 0,
	0, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 943, 0, 0,
	1323, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 942, 238, 480, 481, 482, 0, 239, 949,
	0, 932, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 952, 254, 255, 935, 933, 934, 939, 937, 936,
	938, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 969, 970,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 953,
	290, 291, 0, 292, 976, 0, 491, 293, 0, 294,
	295, 296, 297, 944, 945, 948, 347, 955, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 954, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 956, 946, 957, 313, 314, 315,
	958, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 977, 959, 325, 326, 960, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 961, 342,
	343, 345, 344, 0, 217, 962, 346, 0, 947, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 963, 359, 964, 971,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 972, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 965, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 940, 421, 401, 402, 422, 423, 966, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 973, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	974, 450, 975, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 941, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 827, 0, 212, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	0, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 181, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 183, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 1319, 517, 518, 0, 469, 468, 519, 212, 0,
	0, 175, 470, 471, 520, 472, 473, 474, 0, 176,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 475, 0, 0,
	150, 0, 224, 226, 225, 227, 228, 476, 477, 229,
	478, 230, 231, 479, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 480, 481, 482, 0, 239, 483,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 484, 485, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 486, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 487, 488,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	489, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 490, 0, 491, 293, 0, 294,
	295, 296, 297, 492, 493, 494, 347, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 495, 307, 306, 308, 309, 310, 496,
	0, 497, 0, 312, 0, 498, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 499, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 331, 0, 332, 333,
	335, 337, 334, 336, 338, 340, 341, 339, 0, 342,
	343, 345, 344, 0, 217, 0, 346, 0, 500, 501,
	348, 349, 0, 350, 351, 352, 0, 0, 354, 355,
	356, 0, 0, 357, 358, 502, 0, 359, 0, 503,
	360, 353, 361, 362, 363, 364, 365, 366, 367, 0,
	368, 369, 504, 370, 505, 371, 0, 372, 0, 373,
	374, 375, 376, 377, 378, 506, 379, 380, 0, 381,
	382, 383, 384, 385, 0, 387, 388, 389, 386, 390,
	391, 392, 393, 0, 394, 0, 395, 396, 397, 398,
	507, 399, 0, 400, 404, 405, 406, 407, 408, 409,
	410, 0, 416, 417, 411, 413, 414, 415, 412, 418,
	419, 420, 0, 421, 401, 402, 422, 423, 0, 424,
	425, 508, 426, 427, 0, 428, 429, 430, 431, 403,
	432, 436, 437, 433, 434, 435, 509, 0, 439, 440,
	438, 0, 441, 442, 443, 444, 445, 277, 446, 0,
	447, 510, 511, 512, 513, 0, 454, 0, 448, 449,
	514, 450, 515, 0, 451, 452, 453, 0, 455, 456,
	0, 0, 457, 458, 459, 460, 461, 463, 0, 464,
	0, 462, 465, 466, 467, 516, 517, 518, 0, 469,
	468, 519, 212, 0, 0, 0, 470, 471, 520, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 475, 0, 0, 1622, 0, 224, 226, 225, 227,
	228, 476, 477, 229, 478, 230, 231, 479, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 480, 481,
	482, 0, 239, 483, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 484, 485, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 486, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 487, 488, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 489, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 490, 0,
	491, 293, 0, 294, 295, 296, 297, 492, 493, 494,
	347, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 495, 307, 306,
	308, 309, 310, 496, 0, 497, 0, 312, 0, 498,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 499, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	331, 0, 332, 333, 335, 337, 334, 336, 338, 340,
	341, 339, 0, 342, 343, 345, 344, 0, 217, 0,
	346, 0, 500, 501, 348, 349, 0, 350, 351, 352,
	0, 0, 354, 355, 356, 0, 0, 357, 358, 502,
	0, 359, 0, 503, 360, 353, 361, 362, 363, 364,
	365, 366, 367, 0, 368, 369, 504, 370, 505, 371,
	0, 372, 0, 373, 374, 375, 376, 377, 378, 506,
	379, 380, 0, 381, 382, 383, 384, 385, 0, 387,
	388, 389, 386, 390, 391, 392, 393, 0, 394, 0,
	395, 396, 397, 398, 507, 399, 0, 400, 404, 405,
	406, 407, 408, 409, 410, 0, 416, 417, 411, 413,
	414, 415, 412, 418, 419, 420, 0, 421, 401, 402,
	422, 423, 0, 424, 425, 508, 426, 427, 0, 428,
	429, 430, 431, 403, 432, 436, 437, 433, 434, 435,
	509, 0, 439, 440, 438, 0, 441, 442, 443, 444,
	445, 277, 446, 0, 447, 510, 511, 512, 513, 0,
	454, 0, 448, 449, 514, 450, 515, 0, 451, 452,
	453, 0, 455, 456, 0, 0, 457, 458, 459, 460,
	461, 463, 0, 464, 0, 462, 465, 466, 467, 516,
	517, 518, 0, 469, 468, 519, 212, 0, 0, 0,
	470, 471, 520, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 475, 2746, 0, 0, 0,
	224, 226, 225, 227, 228, 476, 477, 229, 478, 230,
	231, 479, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 480, 481, 482, 0, 239, 483, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 484, 485, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 486, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 487, 488, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 489, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 490, 0, 491, 293, 0, 294, 295, 296,
	297, 492, 493, 494, 347, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 495, 307, 306, 308, 309, 310, 496, 0, 497,
	0, 312, 0, 498, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 499, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 331, 0, 332, 333, 335, 337,
	334, 336, 338, 340, 341, 339, 0, 342, 343, 345,
	344, 0, 0, 0, 346, 0, 500, 501, 348, 349,
	0, 350, 351, 352, 0, 0, 354, 355, 356, 0,
	0, 357, 358, 502, 0, 359, 0, 503, 360, 353,
	361, 362, 363, 364, 365, 366, 367, 0, 368, 369,
	504, 370, 505, 371, 0, 372, 0, 373, 374, 375,
	376, 377, 378, 506, 379, 380, 0, 381, 382, 383,
	384, 385, 0, 387, 388, 389, 386, 390, 391, 392,
	393, 0, 394, 0, 395, 396, 397, 398, 507, 399,
	0, 400, 404, 405, 406, 407, 408, 409, 410, 0,
	416, 417, 411, 413, 414, 415, 412, 418, 419, 420,
	0, 421, 401, 402, 422, 423, 0, 424, 425, 508,
	426, 427, 0, 428, 429, 430, 431, 403, 432, 436,
	437, 433, 434, 435, 509, 0, 439, 440, 438, 0,
	441, 442, 443, 444, 445, 277, 446, 0, 447, 510,
	511, 512, 513, 0, 454, 0, 448, 449, 514, 450,
	515, 0, 451, 452, 453, 0, 455, 456, 0, 0,
	457, 458, 459, 460, 461, 463, 0, 464, 0, 462,
	465, 466, 467, 516, 517, 518, 0, 469, 468, 519,
	212, 0, 0, 0, 470, 471, 520, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	0, 0, 2375, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 0, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 0, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 212, 0, 0, 0, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 475, 0, 0, 2872, 0, 224, 226,
	225, 227, 228, 476, 477, 229, 478, 230, 231, 479,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	480, 481, 482, 0, 239, 483, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 484, 485, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 486, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 487, 488, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 489, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	490, 0, 491, 293, 0, 294, 295, 296, 297, 492,
	493, 494, 347, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 495,
	307, 306, 308, 309, 310, 496, 0, 497, 0, 312,
	0, 498, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	499, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 331, 0, 332, 333, 335, 337, 334, 336,
	338, 340, 341, 339, 0, 342, 343, 345, 344, 0,
	0, 0, 346, 0, 500, 501, 348, 349, 0, 350,
	351, 352, 0, 0, 354, 355, 356, 0, 0, 357,
	358, 502, 0, 359, 0, 503, 360, 353, 361, 362,
	363, 364, 365, 366, 367, 0, 368, 369, 504, 370,
	505, 371, 0, 372, 0, 373, 374, 375, 376, 377,
	378, 506, 379, 380, 0, 381, 382, 383, 384, 385,
	0, 387, 388, 389, 386, 390, 391, 392, 393, 0,
	394, 0, 395, 396, 397, 398, 507, 399, 0, 400,
	404, 405, 406, 407, 408, 409, 410, 0, 416, 417,
	411, 413, 414, 415, 412, 418, 419, 420, 0, 421,
	401, 402, 422, 423, 0, 424, 425, 508, 426, 427,
	0, 428, 429, 430, 431, 403, 432, 436, 437, 433,
	434, 435, 509, 0, 439, 440, 438, 0, 441, 442,
	443, 444, 445, 277, 446, 0, 447, 510, 511, 512,
	513, 0, 454, 0, 448, 449, 514, 450, 515, 0,
	451, 452, 453, 0, 455, 456, 0, 0, 457, 458,
	459, 460, 461, 463, 0, 464, 0, 462, 465, 466,
	467, 516, 517, 518, 0, 469, 468, 519, 696, 0,
	587, 0, 470, 471, 520, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 475,
	1886, 0, 0, 0, 224, 226, 225, 227, 228, 476,
	477, 229, 478, 230, 231, 479, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 480, 481, 482, 0,
	239, 483, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 593, 259, 260, 261, 484,
	485, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	486, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	487, 488, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 489, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 490, 0, 491, 293,
	0, 294, 295, 296, 297, 492, 493, 494, 347, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 495, 307, 306, 308, 309,
	310, 496, 0, 497, 0, 312, 0, 498, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 499, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 331, 0,
	332, 333, 335, 337, 334, 336, 338, 340, 341, 339,
	0, 342, 343, 345, 344, 0, 217, 0, 346, 0,
	500, 501, 348, 349, 0, 350, 351, 352, 0, 0,
	354, 355, 356, 0, 0, 357, 358, 502, 0, 359,
	0, 503, 360, 353, 361, 362, 363, 364, 365, 366,
	367, 0, 368, 369, 504, 370, 505, 371, 0, 372,
	0, 373, 374, 375, 376, 377, 378, 506, 379, 380,
	0, 381, 382, 383, 384, 385, 0, 387, 388, 389,
	386, 390, 391, 392, 393, 0, 394, 0, 395, 396,
	397, 398, 507, 399, 0, 400, 404, 405, 406, 407,
	408, 409, 410, 0, 416, 417, 411, 413, 414, 415,
	412, 418, 419, 420, 0, 421, 401, 402, 422, 423,
	0, 424, 425, 508, 426, 427, 0, 428, 429, 430,
	431, 403, 432, 436, 437, 433, 434, 435, 509, 0,
	439, 440, 438, 592, 441, 442, 443, 444, 445, 277,
	446, 0, 447, 510, 511, 512, 513, 0, 454, 0,
	448, 449, 514, 450, 515, 0, 451, 452, 453, 0,
	455, 456, 0, 0, 457, 458, 459, 460, 461, 463,
	0, 464, 0, 462, 465, 466, 467, 516, 517, 518,
	0, 469, 468, 519, 0, 586, 0, 587, 470, 471,
	520, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 596,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 593, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 217, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	592, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 587, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 596, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 593, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 492, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 217, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 1916,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 592, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 587, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	596, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	593, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 592, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 212,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 596, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 217, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 1348, 0, 1173, 1172, 0, 0, 0,
	0, 1170, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 1077, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 952, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 1347, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 953, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 955, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 954, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 956, 498, 957, 313, 314, 315, 958, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 961, 342, 343, 345, 344,
	0, 0, 962, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	1346, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 1345, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 966, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 1314,
	0, 1173, 1172, 0, 0, 0, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 1077, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 952, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 953, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 1313, 493, 494, 347,
	955, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 954, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 956, 498, 957,
	313, 314, 315, 958, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 959, 325,
	326, 960, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 961, 342, 343, 345, 344, 0, 0, 962, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 963,
	359, 964, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 965, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 966, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 0, 0, 0, 0, 470,
	471, 520, 472, 473, 474, 1310, 0, 1173, 1172, 0,
	0, 0, 0, 1170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	1077, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 1309, 493, 494, 347, 955, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 0, 0, 962, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 1248, 0, 1173, 1172, 0, 0, 0, 0, 1170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 1077, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 952, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 953, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 1247, 493,
	494, 347, 955, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 954, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 956,
	498, 957, 313, 314, 315, 958, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	959, 325, 326, 960, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 961, 342, 343, 345, 344, 0, 0,
	962, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 963, 359, 964, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	965, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 966, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 1245, 0, 1173,
	1172, 0, 0, 0, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 1077, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 952, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	953, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 1244, 493, 494, 347, 955, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 954, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 956, 498, 957, 313, 314,
	315, 958, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 959, 325, 326, 960,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 961,
	342, 343, 345, 344, 0, 0, 962, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 963, 359, 964,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 965, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 966,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 1166, 0, 1173, 1172, 0, 0, 0,
	0, 1170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 1077, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 952, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 953, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	1168, 493, 494, 347, 955, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 954, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 956, 498, 957, 313, 314, 315, 958, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 959, 325, 326, 960, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 961, 342, 343, 345, 344,
	0, 0, 962, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 963, 359, 964, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 965, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 966, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 1173,
	1172, 0, 0, 0, 0, 1170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 1077, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 952, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	953, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 955, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 954, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 956, 498, 957, 313, 314,
	315, 958, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 959, 325, 326, 960,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 961,
	342, 343, 345, 344, 0, 0, 962, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 963, 359, 964,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 965, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 966,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1173, 1172, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 1077, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 952, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 1710, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 953, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 955, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 954, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 956,
	498, 957, 313, 314, 315, 958, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	959, 325, 326, 960, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 961, 342, 343, 345, 344, 0, 0,
	962, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 963, 359, 964, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	965, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 966, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 1173, 1172, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	1077, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 955, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 0, 0, 962, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 1173, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	1077, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	952, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 953, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 955, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	954, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 956, 498, 957, 313, 314, 315, 958,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 959, 325, 326, 960, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 961, 342, 343,
	345, 344, 0, 0, 962, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 963, 359, 964, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 965, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 966, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 2264, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 2261, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	2410, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 2267, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 2407, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 2409, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 2406, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 2266, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	2408, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 2264, 239, 483, 0,
	0, 2258, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 2261, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 2267, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 2257, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 2266, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	2265, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 1401, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 1404, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 1402, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 1403, 468, 519, 1161, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 1163, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 217, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 1007, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1158, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	1160, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 1007, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 1065,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 1067, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 217, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	1007, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 549, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 548, 222, 538,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 541,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 542, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	543, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 537, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 538, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 541, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 542, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 543, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 1007, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 2340, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 217, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1895, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 212, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 1829, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 1822,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 1821, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 217, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 1817, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 1819, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 217, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 1303, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 1302, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 1300, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 1299, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 217, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1297, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	1296, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 217, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 1293,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 1292, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 217, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 1268, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 217, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 1183, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 1185, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 541, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 542, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 543, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 1923, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 1921, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 1919, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 217,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 688, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 687, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 686, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 212,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 2410, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 3201, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 528, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 527, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 0, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 526, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 212, 469, 468, 519, 0,
	0, 0, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 2199, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 0, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 212,
	2397, 0, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 212,
	469, 468, 519, 0, 0, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	2996, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 212, 2397, 0, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 2394, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 212, 469, 468, 519, 0, 0, 0,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	218, 219, 220, 221, 222, 1902, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 1893, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 569, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	1043, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 1041, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 570, 0, 342, 343, 345, 344,
	0, 0, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 566, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 1044, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 565, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 1841,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 1840, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 0, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 569, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 559, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 570, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 566, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 1322,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	565, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 1307, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 239, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 1306, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 339, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 507, 399, 0, 400, 404,
	405, 406, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 419, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 510, 511, 512, 513,
	0, 454, 0, 448, 449, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 1256, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 1255, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 404, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 1240, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 0, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 1177,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 492, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 0, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 569, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 1043, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 1041, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 570, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 566, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 1044,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	565, 511, 512, 513, 0, 454, 0, 448, 1042, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 1025,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 569, 0, 212, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 476, 477, 229, 478, 230, 231, 479, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 480,
	481, 482, 0, 559, 483, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	557, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 484, 485, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 486, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 487, 488, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 489, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 490,
	0, 491, 293, 0, 294, 295, 296, 297, 492, 493,
	494, 347, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 495, 307,
	306, 308, 309, 310, 496, 0, 497, 0, 312, 0,
	498, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 499,
	0, 325, 326, 0, 0, 327, 558, 0, 0, 329,
	330, 331, 0, 332, 333, 335, 337, 334, 336, 338,
	340, 341, 570, 0, 342, 343, 345, 344, 0, 0,
	0, 346, 0, 500, 501, 348, 349, 0, 350, 351,
	352, 0, 0, 354, 355, 356, 0, 0, 357, 358,
	502, 0, 359, 0, 503, 360, 353, 361, 362, 363,
	364, 365, 366, 367, 0, 368, 369, 504, 370, 505,
	371, 0, 372, 0, 373, 374, 375, 376, 377, 378,
	506, 379, 380, 0, 381, 382, 383, 384, 385, 0,
	387, 388, 389, 386, 390, 391, 392, 393, 0, 394,
	0, 395, 396, 397, 398, 560, 399, 0, 400, 404,
	405, 566, 407, 408, 409, 410, 0, 416, 417, 411,
	413, 414, 415, 412, 418, 561, 420, 0, 421, 401,
	402, 422, 423, 0, 424, 425, 508, 426, 427, 0,
	428, 429, 430, 431, 403, 432, 436, 437, 433, 434,
	435, 509, 0, 439, 440, 438, 0, 441, 442, 443,
	444, 445, 277, 446, 0, 447, 565, 511, 512, 513,
	0, 454, 0, 448, 563, 514, 450, 515, 0, 451,
	452, 453, 0, 455, 456, 0, 0, 457, 458, 459,
	460, 461, 463, 0, 464, 0, 462, 465, 466, 467,
	516, 517, 518, 0, 469, 468, 519, 553, 0, 212,
	0, 470, 471, 520, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 476, 477,
	229, 478, 230, 231, 479, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 480, 481, 482, 0, 239,
	483, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 484, 485,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 486,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 487,
	488, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 489, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 490, 0, 491, 293, 0,
	294, 295, 296, 297, 492, 493, 494, 347, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 495, 307, 306, 308, 309, 310,
	496, 0, 497, 0, 312, 0, 498, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 499, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 331, 0, 332,
	333, 335, 337, 334, 336, 338, 340, 341, 339, 0,
	342, 343, 345, 344, 0, 0, 0, 346, 0, 500,
	501, 348, 349, 0, 350, 351, 352, 0, 0, 354,
	355, 356, 0, 0, 357, 358, 502, 0, 359, 0,
	503, 360, 353, 361, 362, 363, 364, 365, 366, 367,
	0, 368, 369, 504, 370, 505, 371, 0, 372, 0,
	373, 374, 375, 376, 377, 378, 506, 379, 380, 0,
	381, 382, 383, 384, 385, 0, 387, 388, 389, 386,
	390, 391, 392, 393, 0, 394, 0, 395, 396, 397,
	398, 507, 399, 0, 400, 554, 405, 406, 407, 408,
	409, 410, 0, 416, 417, 411, 413, 414, 415, 412,
	418, 419, 420, 0, 421, 401, 402, 422, 423, 0,
	424, 425, 508, 426, 427, 0, 428, 429, 430, 431,
	403, 432, 436, 437, 433, 434, 435, 509, 0, 439,
	440, 438, 0, 441, 442, 443, 444, 445, 277, 446,
	0, 447, 510, 511, 512, 513, 0, 454, 0, 448,
	449, 514, 450, 515, 0, 451, 452, 453, 0, 455,
	456, 0, 0, 457, 458, 459, 460, 461, 463, 0,
	464, 0, 462, 465, 466, 467, 516, 517, 518, 0,
	469, 468, 519, 551, 0, 212, 0, 470, 471, 520,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 476, 477, 229, 478, 230, 231,
	479, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 480, 481, 482, 0, 239, 483, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 484, 485, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 486, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 487, 488, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 489, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 490, 0, 491, 293, 0, 294, 295, 296, 297,
	492, 493, 494, 347, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	495, 307, 306, 308, 309, 310, 496, 0, 497, 0,
	312, 0, 498, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 499, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 331, 0, 332, 333, 335, 337, 334,
	336, 338, 340, 341, 339, 0, 342, 343, 345, 344,
	0, 0, 0, 346, 0, 500, 501, 348, 349, 0,
	350, 351, 352, 0, 0, 354, 355, 356, 0, 0,
	357, 358, 502, 0, 359, 0, 503, 360, 353, 361,
	362, 363, 364, 365, 366, 367, 0, 368, 369, 504,
	370, 505, 371, 0, 372, 0, 373, 374, 375, 376,
	377, 378, 506, 379, 380, 0, 381, 382, 383, 384,
	385, 0, 387, 388, 389, 386, 390, 391, 392, 393,
	0, 394, 0, 395, 396, 397, 398, 507, 399, 0,
	400, 404, 405, 406, 407, 408, 409, 410, 0, 416,
	417, 411, 413, 414, 415, 412, 418, 419, 420, 0,
	421, 401, 402, 422, 423, 0, 424, 425, 508, 426,
	427, 0, 428, 429, 430, 431, 403, 432, 436, 437,
	433, 434, 435, 509, 0, 439, 440, 438, 0, 441,
	442, 443, 444, 445, 277, 446, 0, 447, 510, 511,
	512, 513, 0, 454, 0, 448, 449, 514, 450, 515,
	0, 451, 452, 453, 0, 455, 456, 0, 0, 457,
	458, 459, 460, 461, 463, 0, 464, 0, 462, 465,
	466, 467, 516, 517, 518, 0, 469, 468, 519, 545,
	0, 212, 0, 470, 471, 520, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	476, 477, 229, 478, 230, 231, 479, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 480, 481, 482,
	0, 239, 483, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	484, 485, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 486, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 487, 488, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 489, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 490, 0, 491,
	293, 0, 294, 295, 296, 297, 492, 493, 494, 347,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 495, 307, 306, 308,
	309, 310, 496, 0, 497, 0, 312, 0, 498, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 499, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 331,
	0, 332, 333, 335, 337, 334, 336, 338, 340, 341,
	339, 0, 342, 343, 345, 344, 0, 0, 0, 346,
	0, 500, 501, 348, 349, 0, 350, 351, 352, 0,
	0, 354, 355, 356, 0, 0, 357, 358, 502, 0,
	359, 0, 503, 360, 353, 361, 362, 363, 364, 365,
	366, 367, 0, 368, 369, 504, 370, 505, 371, 0,
	372, 0, 373, 374, 375, 376, 377, 378, 506, 379,
	380, 0, 381, 382, 383, 384, 385, 0, 387, 388,
	389, 386, 390, 391, 392, 393, 0, 394, 0, 395,
	396, 397, 398, 507, 399, 0, 400, 404, 405, 406,
	407, 408, 409, 410, 0, 416, 417, 411, 413, 414,
	415, 412, 418, 419, 420, 0, 421, 401, 402, 422,
	423, 0, 424, 425, 508, 426, 427, 0, 428, 429,
	430, 431, 403, 432, 436, 437, 433, 434, 435, 509,
	0, 439, 440, 438, 0, 441, 442, 443, 444, 445,
	277, 446, 0, 447, 510, 511, 512, 513, 0, 454,
	0, 448, 449, 514, 450, 515, 0, 451, 452, 453,
	0, 455, 456, 0, 0, 457, 458, 459, 460, 461,
	463, 0, 464, 0, 462, 465, 466, 467, 516, 517,
	518, 0, 469, 468, 519, 523, 0, 212, 0, 470,
	471, 520, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 2686, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 2684, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 2672, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 2358, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 554, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 1853, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 0, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 1276, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 1218, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 293, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 363, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 376, 377, 378, 506, 981, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	399, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 212, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 476, 477, 229, 478,
	230, 231, 479, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 480, 481, 482, 0, 239, 483, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 484, 485, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 486, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 487, 488, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 489,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 490, 0, 491, 0, 0, 294, 295,
	296, 297, 492, 493, 494, 347, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 495, 307, 306, 308, 309, 310, 496, 0,
	497, 0, 312, 0, 498, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 499, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 331, 0, 332, 333, 335,
	337, 334, 336, 338, 340, 341, 339, 0, 342, 343,
	345, 344, 0, 0, 0, 346, 0, 500, 501, 348,
	349, 0, 350, 351, 352, 0, 0, 354, 355, 356,
	0, 0, 357, 358, 502, 0, 359, 0, 503, 360,
	353, 361, 362, 0, 364, 365, 366, 367, 0, 368,
	369, 504, 370, 505, 371, 0, 372, 0, 373, 374,
	375, 0, 377, 378, 506, 379, 380, 0, 381, 382,
	383, 384, 385, 0, 387, 388, 389, 386, 390, 391,
	392, 393, 0, 394, 0, 395, 396, 397, 398, 507,
	0, 0, 400, 404, 405, 406, 407, 408, 409, 410,
	0, 416, 417, 411, 413, 414, 415, 412, 418, 419,
	420, 0, 421, 401, 402, 422, 423, 0, 424, 425,
	508, 426, 427, 0, 428, 429, 430, 431, 403, 432,
	436, 437, 433, 434, 435, 509, 0, 439, 440, 438,
	0, 441, 442, 443, 444, 445, 277, 446, 0, 447,
	510, 511, 512, 513, 0, 454, 0, 448, 449, 514,
	450, 515, 0, 451, 452, 453, 0, 455, 456, 0,
	0, 457, 458, 459, 460, 461, 463, 0, 464, 0,
	462, 465, 466, 467, 516, 517, 518, 0, 469, 468,
	519, 0, 0, 0, 0, 470, 471, 520, 472, 473,
	474, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 1479, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1449, 0,
	1481, 1482, 1483, 1491, 1492, 1493, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 1484, 1479, 0, 0,
	0, 0, 1467, 0, 1451, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1488, 0, 0, 1498, 0, 0, 0,
	1478, 1480, 0, 0, 0, 1473, 1474, 1475, 1476, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 1488,
	0, 0, 1498, 0, 1486, 0, 1478, 1480, 0, 0,
	0, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	0, 1496, 0, 0, 0, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1477, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491,
	1492, 1493, 0, 0, 1489, 0, 1477, 0, 0, 0,
	0, 0, 1484, 1479, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 1472, 1497, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	1489, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1487, 0,
	0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 2542, 0, 0, 0, 0,
	0, 1473, 1474, 1475, 1476, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 1487, 0, 0, 1462, 1463, 1469,
	1490, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 0, 0, 1488, 0, 0, 1498, 0,
	0, 2541, 1478, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 1495, 0, 0, 0, 0, 0,
	0, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	1472, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 1467, 1448, 1449, 0, 1481, 1482, 1483,
	1491, 1492, 1493, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1484, 1479, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1473, 1474, 1475, 1476, 0, 0, 0, 0, 1470, 0,
	1456, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 1498, 0, 0,
	1487, 1478, 1480, 1462, 1463, 1469, 1490, 1468, 1464, 0,
	1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0,
	0, 1494, 0, 1495, 0, 0, 0, 2538, 0, 0,
	1465, 1466, 1473, 1474, 1475, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1498,
	0, 0, 1496, 1478, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 1494, 0, 1495, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491,
	1492, 1493, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 1484, 1479, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 1472, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 2537, 0, 0, 0,
	0, 1473, 1474, 1475, 1476, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1488, 0, 0, 1498, 0,
	0, 1487, 1478, 1480, 1462, 1463, 1469, 1490, 1468, 1464,
	0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	0, 0, 1494, 0, 1495, 0, 0, 0, 2536, 0,
	0, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	1472, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 1467, 1448, 1449, 0, 1481, 1482, 1483,
	1491, 1492, 1493, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1484, 1479, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1473, 1474, 1475, 1476, 0, 0, 0, 0, 1470, 0,
	1456, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 0, 0, 1498, 0, 0,
	1487, 1478, 1480, 1462, 1463, 1469, 1490, 1468, 1464, 0,
	1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0,
	0, 1494, 0, 1495, 0, 0, 0, 2075, 0, 0,
	1465, 1466, 1473, 1474, 1475, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1498,
	0, 0, 1496, 1478, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 1494, 0, 1495, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 1484,
	1479, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 1472, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 1489, 0, 0,
	0, 0, 0, 0, 1470, 0, 0, 0, 0, 1487,
	0, 1467, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0,
	0, 0, 3441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 1474,
	1475, 1476, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 1487, 0, 0, 1462, 1463, 1469, 1490, 1468, 1464,
	0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	0, 0, 1488, 0, 3437, 1498, 0, 0, 0, 1478,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 1495, 0, 0, 0, 0, 0, 0, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 0, 1481, 1482, 1483,
	1491, 1492, 1493, 0, 0, 0, 0, 0, 0, 1477,
	0, 0, 0, 1484, 1479, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 1497, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493, 1450,
	0, 0, 0, 1489, 0, 0, 0, 0, 1470, 1484,
	1479, 0, 0, 0, 0, 1467, 0, 1451, 0, 0,
	0, 0, 1497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 1475, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 1487, 0, 0,
	1462, 1463, 1469, 1490, 1468, 1464, 0, 1461, 1459, 1460,
	1452, 1453, 1454, 1455, 1457, 1458, 1488, 0, 0, 1498,
	3368, 0, 0, 1478, 1480, 0, 0, 0, 1473, 1474,
	1475, 1476, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 1494, 0, 1495, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 1498, 0, 1486, 0, 1478,
	1480, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 1495, 0, 0, 1496, 0, 0, 0, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 0, 1481, 1482, 1483,
	1491, 1492, 1493, 0, 0, 0, 0, 1489, 0, 1477,
	0, 0, 0, 1484, 1479, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 1497, 1472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 1489, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 1462, 1463, 1469, 1490, 1468, 1464,
	0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	0, 0, 0, 0, 3367, 0, 0, 0, 0, 0,
	0, 0, 1473, 1474, 1475, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 1487, 0, 0,
	1462, 1463, 1469, 1490, 1468, 1464, 0, 1461, 1459, 1460,
	1452, 1453, 1454, 1455, 1457, 1458, 1488, 0, 0, 1498,
	3260, 0, 0, 1478, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 1495, 0, 0, 0, 0,
	0, 0, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 1484, 1479, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	1497, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 1449, 0, 1481, 1482, 1483,
	1491, 1492, 1493, 1450, 0, 0, 0, 1489, 0, 0,
	0, 0, 1470, 1484, 1479, 0, 0, 0, 0, 1467,
	0, 1451, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 1475, 1476,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 1487, 0, 0, 1462, 1463, 1469, 1490, 1468, 1464,
	0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	1488, 0, 0, 1498, 3163, 0, 0, 1478, 1480, 0,
	0, 0, 1473, 1474, 1475, 1476, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 1494, 0, 1495,
	0, 0, 0, 0, 0, 0, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 1488, 0, 0, 1498,
	0, 1486, 0, 1478, 1480, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 1495, 0, 0, 1496, 0,
	0, 0, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0,
	0, 1489, 0, 1477, 0, 0, 0, 1484, 1479, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	1497, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 1489, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1487, 0, 0, 1462, 1463,
	1469, 1490, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453,
	1454, 1455, 1457, 1458, 0, 0, 0, 0, 3115, 0,
	0, 0, 0, 0, 0, 0, 1473, 1474, 1475, 1476,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 1487, 0, 0, 1462, 1463, 1469, 1490, 1468, 1464,
	0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458,
	1488, 0, 0, 1498, 3114, 0, 0, 1478, 1480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 1495,
	0, 0, 0, 0, 0, 0, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 1449,
	0, 1481, 1482, 1483, 1491, 1492, 1493, 1450, 0, 0,
	0, 1489, 0, 0, 0, 0, 1470, 1484, 1479, 0,
	0, 0, 0, 1467, 0, 1451, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 1487, 0, 0, 1462, 1463,
	1469, 1490, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453,
	1454, 1455, 1457, 1458, 1488, 0, 0, 1498, 3113, 0,
	0, 1478, 1480, 0, 0, 0, 1473, 1474, 1475, 1476,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 1494, 0, 1495, 0, 0, 0, 0, 0, 0,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	1488, 0, 0, 1498, 0, 1486, 0, 1478, 1480, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1494, 0, 1495,
	0, 0, 1496, 0, 0, 0, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 1489, 0, 1477, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 1489, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	0, 0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0,
	0, 0, 3080, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 1487, 0, 0, 1462, 1463,
	1469, 1490, 1468, 1464, 0, 1461, 1459, 1460, 1452, 1453,
	1454, 1455, 1457, 1458, 1488, 0, 0, 1498, 2879, 0,
	0, 1478, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 1495, 0, 0, 0, 0, 0, 0,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 1481,
	1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 1484, 1479, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1497, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 1489, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1449, 0,
	1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1479, 0, 0,
	0, 0, 2464, 0, 1451, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 1474, 1475, 1476, 0, 0,
	0, 0, 1450, 0, 1456, 3539, 0, 0, 0, 1487,
	0, 1470, 1462, 1463, 1469, 1490, 1468, 1464, 1467, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 1488, 0,
	2493, 1498, 0, 0, 0, 1478, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2465, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 1495, 0, 0,
	0, 0, 0, 0, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1475, 1476, 1486,
	0, 0, 0, 0, 0, 1456, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1488,
	0, 0, 1498, 0, 0, 0, 1478, 1480, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	0, 0, 0, 0, 3538, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 1477, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2166, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	1484, 1479, 0, 0, 0, 2165, 0, 0, 1451, 0,
	0, 0, 0, 1497, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	1489, 0, 0, 1487, 0, 1470, 1462, 1463, 1469, 1490,
	1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454, 1455,
	1457, 1458, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 1450, 0, 1456,
	0, 0, 0, 0, 1487, 0, 1470, 1462, 1463, 1469,
	1490, 1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 1488, 0, 0, 1498, 0, 0, 0,
	1478, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 1486, 0, 0, 0, 0, 0,
	1456, 0, 2581, 1471, 0, 2580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1488, 0, 0, 1498, 0, 0,
	0, 1478, 1480, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 1495, 0, 0, 0, 0, 0, 0,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	1477, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 1481,
	1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 1484, 1479, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1497, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 1489, 0, 0, 1487, 0,
	1470, 1462, 1463, 1469, 1490, 1468, 1464, 1467, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 1448, 1449, 0,
	1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1479, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 1474, 1475, 1476, 0, 0,
	0, 0, 1450, 0, 1456, 0, 0, 0, 0, 1487,
	0, 1470, 1462, 1463, 1469, 1490, 1468, 1464, 1467, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 1488, 0,
	0, 1498, 0, 0, 0, 1478, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 1495, 0, 0,
	0, 0, 0, 0, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1475, 1476, 1486,
	0, 0, 0, 0, 0, 1456, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1488,
	0, 0, 1498, 0, 0, 0, 1478, 1480, 0, 0,
	0, 0, 1485, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	0, 0, 0, 0, 0, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 1477, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	1484, 1479, 0, 0, 0, 2582, 0, 0, 1451, 0,
	0, 0, 0, 1497, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	1489, 0, 0, 1487, 0, 1470, 1462, 1463, 1469, 1490,
	1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454, 1455,
	1457, 1458, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 2867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 1450, 0, 1456,
	0, 0, 0, 0, 1487, 0, 1470, 1462, 1463, 1469,
	1490, 1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 1488, 0, 0, 1498, 0, 0, 0,
	1478, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 1486, 0, 0, 0, 0, 0,
	1456, 0, 0, 1471, 0, 2587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1488, 0, 0, 1498, 0, 0,
	0, 1478, 1480, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 1495, 0, 0, 0, 0, 0, 0,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	1477, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 0, 1481,
	1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 1484, 1479, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1497, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 1489, 0, 0, 1487, 0,
	1470, 1462, 1463, 1469, 1490, 1468, 1464, 1467, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 1448, 1449, 0,
	1481, 1482, 1483, 1491, 1492, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 1479, 0, 0,
	0, 2535, 0, 0, 1451, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 1474, 1475, 1476, 0, 0,
	0, 0, 1450, 0, 1456, 0, 0, 0, 0, 1487,
	0, 1470, 1462, 1463, 1469, 1490, 1468, 1464, 1467, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 1488, 0,
	0, 1498, 0, 0, 0, 1478, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 0, 1495, 0, 0,
	0, 0, 0, 0, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1474, 1475, 1476, 1486,
	0, 0, 0, 0, 0, 1456, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 0, 1488,
	0, 0, 1498, 0, 0, 0, 1478, 1480, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 1495, 0,
	2549, 0, 0, 0, 0, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 1477, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492, 1493,
	0, 0, 0, 0, 0, 0, 1477, 0, 0, 0,
	1484, 1479, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1497, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	1489, 0, 0, 1487, 0, 1470, 1462, 1463, 1469, 1490,
	1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454, 1455,
	1457, 1458, 1448, 1449, 0, 1481, 1482, 1483, 1491, 1492,
	1493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 1497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1474, 1475, 1476, 0, 0, 0, 0, 1450, 0, 1456,
	0, 0, 0, 0, 1487, 0, 1470, 1462, 1463, 1469,
	1490, 1468, 1464, 1467, 1461, 1459, 1460, 1452, 1453, 1454,
	1455, 1457, 1458, 1488, 0, 0, 1498, 0, 0, 0,
	1478, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1494, 0, 1495, 0, 0, 0, 0, 0, 0, 1465,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1474, 1475, 1476, 1486, 0, 0, 0, 0, 0,
	1456, 0, 0, 1471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 1488, 0, 0, 1498, 0, 0,
	0, 1478, 1480, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1494, 0, 1495, 0, 0, 0, 0, 0, 0,
	1465, 1466, 0, 0, 0, 1448, 1449, 0, 1481, 1482,
	1483, 1491, 1492, 1493, 0, 1486, 0, 0, 0, 0,
	1477, 0, 0, 0, 1471, 1479, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 1497, 1472, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 1489, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1474, 1475, 1476, 0, 0, 0,
	0, 0, 0, 1456, 0, 1489, 0, 0, 1487, 0,
	0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461, 1459,
	1460, 1452, 1453, 1454, 1455, 1457, 1458, 1488, 1663, 0,
	1498, 0, 0, 0, 1478, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 1466, 0, 0, 0, 1680, 1657,
	1664, 1647, 1690, 1689, 0, 0, 1649, 1648, 1486, 0,
	0, 0, 0, 0, 1700, 1701, 0, 1471, 0, 1487,
	0, 0, 1462, 1463, 1469, 1490, 1468, 1464, 0, 1461,
	1459, 1460, 1452, 1453, 1454, 1455, 1457, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 0, 1691, 0, 1687, 1686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1685,
	0, 0, 0, 0, 0, 0, 612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1477, 0, 0, 0, 0, 0,
	1684, 1682, 1683, 0, 0, 0, 0, 0, 0, 613,
	632, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 1659, 615, 0, 0, 0, 1489, 0,
	0, 0, 0, 1673, 1662, 1675, 1677, 1678, 1679, 1674,
	638, 1667, 0, 0, 0, 0, 616, 0, 0, 0,
	0, 1696, 1697, 0, 0, 636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1651, 0, 0, 0,
	0, 0, 0, 0, 618, 0, 0, 619, 642, 1688,
	0, 0, 645, 1660, 0, 1661, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 1462, 1463, 1469, 1490, 1468,
	1464, 0, 1461, 1459, 1460, 1452, 1453, 1454, 1455, 1457,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1681, 0, 0, 0, 1670,
	1668, 1669, 1672, 1671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 0,
	0, 0, 0, 0, 1652, 1653, 1655, 1656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1676, 1654, 0, 0, 0, 0, 0, 620, 0,
	0, 0, 1699, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1650, 0,
	0, 1692, 1693, 1694, 1695, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1658, 0, 644, 0, 0, 1665, 1698, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	640, 0, 639, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 646, 0,
	643, 0, 0, 0, 0, 633,
}
var sqlPact = [...]int{

	4807, -1000, -1000, -1000, -1000, -1000, -1000, 180, 177, 167,
	164, 163, 156, 154, 153, -1000, -1000, -1000, 152, -1000,
	-1000, 150, -1000, 149, 148, 147, 146, -1000, 145, 144,
	142, -1000, -1000, -1000, -1000, 141, 140, 139, 53639, 1750,
	65083, 56591, 2095, 48119, 64657, 47693, 64231, 63805, 137, -1000,
	63379, 136, 133, 132, -1000, -1000, 128, 1713, 39133, 127,
	126, 114, 2007, 113, 110, -1000, 109, -1000, 76171, 1197,
	-1000, 108, 107, -1000, 5019, 5976, 55745, 2219, 106, 105,
	38706, 2192, 2208, -1000, -1000, 1589, -1000, -1000, 104, 103,
	102, 101, 100, 98, 97, 96, 95, -1000, 94, 93,
	91, 89, 88, 83, 82, 81, 78, 73, 70, 68,
	67, 66, 65, 63, 61, 60, -1000, 7805, 1486, 1366,
	1361, 1360, 1312, 1313, 810, 59, 58, 57, 56, 55,
	54, 52, -1000, -1000, 51, 50, 49, 47, -1000, 46,
	45, 165, 44, 43, 42, 41, 35, 2045, 2194, 1218,
	726, 19213, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 69283, 65503, 33, -63, 28,
	-1000, 2540, 778, 32302, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 411, -1000, -1000, -1000, 263, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1390, 612, -1000, -1000, -1000, 62953, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1744, 10, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 611, -1000, 1738, 158, 1573, -1000,
	-1000, -1000, -1000, -1000, 65503, -1000, -1000, 2835, 2834, 1645,
	610, 62533, -1000, 1341, -1000, 747, 21919, -1000, 989, -1000,
	21919, 260, -1000, -1000, -1000, -1000, -1000, 47267, 15613, 46841,
	46415, 43021, 62107, 15177, 53219, 1028, -1000, -1000, -1000, -1000,
	-1000, -6, 40405, 65503, -1000, 259, -1000, -1000, -1000, -1000,
	-1000, -1000, 28337, 434, 27876, 319, 27415, 313, -1000, -1000,
	-1000, -1000, 2832, 2827, 904, 2825, 2478, 68863, 1367, 2824,
	1343, 988, 838, 2821, 2820, 2819, 2818, 2817, 2814, 2811,
	1179, 61681, 2239, 42585, 42149, 53639, 53639, 1999, 61255, -1000,
	-1000, 1085, 1071, -1000, -1000, -1000, -1000, 2317, 2205, 2172,
	52793, -1000, -1000, 2810, 2809, 2807, 2805, 2802, 68443, 1332,
	2798, 1929, 2797, 2793, 2787, 2783, 2781, 2780, 2779, 2777,
	2776, -1000, 52367, 51941, 51515, 51089, 60829, 41713, 41277, -1000,
	-1000, -1000, 34002, 7167, 60403, 35310, 53639, 53639, -1000, -1000,
	28786, 72, -1000, -1000, -1000, 2187, -1000, 28786, 72, -1000,
	65503, -1000, 2236, 1465, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1696, 1254, 2678, 40841, 1586, 1112, 2314,
	2279, 1202, 1845, 2276, 2275, 2262, 2255, 2248, 1296, 1960,
	315, 18752, 1182, 1175, 2241, 2240, 2688, 1767, 45989, 2774,
	2767, 2506, 2235, 2182, -1000, -1000, -1000, -1000, 1156, -1000,
	-1000, 48539, -1000, -1000, 959, -1000, -1000, 959, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1027, 67603, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1624, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1362, -1000, 1575, -1000, -1000, 1761, 1105, 2194,
	1875, 2512, 2512, 2512, 2545, 400, 396, -1000, 165, -1000,
	-1000, 75620, -1000, -1000, 28786, 28786, 28786, 28786, 28786, 1527,
	-1000, 609, -1000, -1000, 655, -1000, 607, 534, -1000, -1000,
	-1000, -1000, -1000, -1000, 606, 2692, -1000, 623, -1000, -1000,
	-1000, -1000, 2629, -1000, 17842, -1000, -1000, -1000, 398, 604,
	28786, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, 729, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 525, 1451, 524, 524, 524, -1000, -1000,
	829, -1000, -1000, -1000, 267, 507, 266, 502, -1000, -1000,
	-1000, -1000, 2230, 597, 591, -1000, 590, 586, 583, -1000,
	-1000, -1000, 581, 576, 575, 574, 570, 566, 565, 557,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 824, -1000, 554,
	553, 552, 551, 547, 546, 540, 539, 537, -1000, -1000,
	-7, 65503, -1000, 411, -7, -1000, -1000, 536, -1000, 22368,
	22368, 22368, -1000, -1000, 1735, 28786, -1000, 1885, -1000, 491,
	-4, 684, 33150, -1000, 31450, 684, 667, 36584, -1000, 2181,
	-1000, -1000, 535, 245, -1000, -1000, 2168, 65503, 16047, 65503,
	53639, 53639, 2430, 28786, -1000, -1000, 39981, 65503, 54059, 2591,
	76074, 39981, 65503, 2228, -1000, -1000, -1000, 65503, -1000, 28786,
	-1000, 2590, 1339, 43879, 2563, -24, -1000, -1000, -1000, -1000,
	-1000, -1000, 1899, 1882, 926, 1759, 1286, -1000, 21919, 2463,
	-1000, -1000, -1000, 233, 16047, -1000, 1812, 2400, 1102, -1000,
	1758, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1380,
	2398, -1000, 1902, 2393, 1379, -1000, -1000, 799, 2376, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1615, -1000,
	-1000, 2493, -1000, -1000, 1441, 2375, 2, -1000, -1000, 34442,
	40405, -14, -1000, -1000, -42, -1000, 14741, 75620, -1000, -1000,
	-1000, 75620, 759, -1000, -1000, 2373, -1000, 75620, 736, -1000,
	-1000, 2372, -1000, -1000, -1000, 2765, -1000, 2763, 1849, 2762,
	2759, 2754, -1000, 1316, 1417, 2753, -1000, 2751, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50663, 50237, 835, -1000, 1724,
	-1000, -1000, 49811, 792, 1846, -1000, -1000, 1839, -1000, 828,
	-1000, 2750, 59977, 2026, 792, 1838, -1000, -1000, -1000, -1000,
	-1000, 53639, -1000, 53639, -1000, 53639, -1000, 1225, -1000, 68023,
	-4, -1000, -1000, -1000, -1000, -1000, 2370, 2749, 2748, 2746,
	-1000, 65503, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 168, 2369, -1000, -1000, 168, 2367, -1000, 168, 2365,
	-1000, 166, 2358, -1000, -1000, 1673, 2355, -1000, -115, 2349,
	-1000, -1000, -115, 2348, -1000, -31, -1000, -1000, -1000, 778,
	-1000, 33576, 59551, 43455, 763, 595, 38280, 75620, -1000, 34442,
	75620, -1000, 43455, 49811, -1000, 59125, 49391, -1000, -1000, 1100,
	1953, -1000, -1000, -1000, -1000, 43455, 43455, 43455, -1000, 58699,
	-1000, 1522, 1235, 2495, 53639, -1000, 1454, -1000, -1000, -1000,
	2504, 2226, -1000, 39557, 55319, -1000, 54899, -1000, 54479, -1000,
	53639, -1000, 53639, -1000, 2745, 2744, 2743, -1000, 2742, 2503,
	75620, 2502, -1000, 2324, 1330, 1326, 65503, -1000, -1000, 65503,
	-1000, 65503, -1000, -1000, -1000, 1894, -1000, -1000, -1000, -1000,
	53639, -1000, -1000, -1000, -1000, -1000, -1000, 2224, -1000, 1356,
	-1000, 1063, -1000, -1000, 173, -1000, -1000, -24, -1000, 67603,
	-1000, -1000, 2194, 1875, -1000, 65503, -1000, 1288, 53639, -1000,
	1946, -1000, 1169, -1000, 2194, 1644, 1988, 26954, 1954, 28786,
	165, -1000, -1000, 165, 165, 21470, -1000, -1000, 76074, 76074,
	16047, 1048, 28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786,
	28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786,
	28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786,
	28786, 28786, 28786, 28786, 28786, 28786, 28786, 1798, 28786, 1026,
	28786, 28786, 28786, 28786, 1906, -1000, -1000, 1493, 437, 1543,
	-1000, 2662, 2662, 2662, 75701, 75701, 483, 2737, 655, -1000,
	28786, -1000, 72, 28786, 16483, -1000, 2681, 1229, -1000, -1000,
	396, 9688, 1779, -1000, 392, 16944, -1000, -1000, -1000, 17842,
	534, 26493, 28786, 818, 75620, 14307, 2215, 2069, -1000, 2679,
	-1000, -1000, 2634, -1000, -1000, -1000, -1000, 2634, 1044, 1038,
	2676, -1000, 2634, 2634, 533, 702, 695, 691, 689, 680,
	28786, 28786, 28786, 28786, 28786, 28786, 28786, 28786, -1000, 26044,
	25583, 25122, 30133, 24661, 28786, 18291, 24200, 23739, 65503, -7,
	2587, 28786, 155, -1000, 74160, -1000, 155, 155, 532, -32,
	75620, 1966, 1966, 32726, 1837, 1538, 1538, 1538, -1000, 531,
	645, 26, 15, 9, -1000, -1000, 8, 5, 684, 10819,
	57011, 1549, 684, 684, 200, 219, 389, 31026, 1885, 57011,
	-1000, -1000, 53639, 530, 16483, 16047, 1113, -33, 192, 1973,
	1972, 1968, -1000, 1295, -43, 1025, -39, -1000, 6666, -44,
	-1000, 891, -1000, -1000, -1000, 348, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 823, 528, 527, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 525, 1451, 524, 524, 524, -1000,
	-1000, -1000, 267, 507, 266, 502, -1000, -1000, -1000, -1000,
	-1000, -1000, 2164, -42, 54059, 740, -45, 907, -24, -1000,
	-1000, -1000, 43879, 959, -1000, 1355, -1000, -1000, -1000, -1000,
	-1000, -1000, 1103, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2689, -1000, 2669, -1000, -1000, 2674, -13, -1000, -1000, 16047,
	-1000, -26, 1290, -1000, 45563, 2500, 2499, 2489, 1209, -1000,
	1144, 2544, 48539, 2566, 2572, 679, -1000, 2157, -1000, -1000,
	742, 1292, 1024, 48539, 1902, -1000, 76074, -1000, 2011, 2541,
	1119, 1116, 1119, 1119, 1108, -1000, 48539, 1011, 1501, 43455,
	-1000, 1009, -1000, -30, 2565, 2571, 621, -1000, 2141, 1005,
	-1000, -1000, 53639, 16047, 682, -1000, 43455, -14, 40405, 65503,
	186, -1000, 28786, 72, 28786, 72, -1000, -1000, 2345, -1000,
	-1000, -1000, 2736, 1392, 1922, -1000, -1000, -1000, 501, 1835,
	1902, 1832, -1000, -1000, 48965, 2128, 65503, 1977, -22, 53639,
	-1000, -1000, 1496, -1000, 2340, 2334, 529, 2734, -1000, 1703,
	1818, -1000, -1000, -1000, 67183, 1056, 2333, 876, 365, 2586,
	365, 37432, -1000, 65503, -1000, 65503, -1000, -1000, -1000, 2733,
	-1000, 53639, -1000, -1000, 53639, -1000, 53639, -1000, 53639, -1000,
	53639, 53639, -1000, 65503, 43455, 43455, 43455, 3859, 44723, -46,
	386, -1000, 58279, 65503, 865, 45143, 65503, 2453, -208, -1000,
	763, 763, 682, -1000, 682, -1000, 53639, 2221, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2732, 2730, -1000, 790, 53639,
	65503, 53639, -1000, -1000, 65503, -1000, 65503, -1000, -1000, 65503,
	-1000, 65503, -1000, 65503, -1000, -1000, -1000, -1000, -1000, -1000,
	72, 28786, 1248, -1000, 2214, -1000, 2204, -1000, 38, -1000,
	-1000, -1000, -1000, 1805, 53639, 53639, 65503, 53639, -1000, 48539,
	-1000, -1000, 2194, -1000, -1000, 1881, -1000, -18, 887, -1000,
	-1000, -1000, -1000, -1000, 75620, 476, -1000, -1000, 75620, 1335,
	2000, -1000, 2000, -19, -1000, 73876, 1945, 53639, -1000, -1000,
	-1000, -1000, -1000, 732, 1079, 1079, 1036, 1036, 1036, 1036,
	2575, 821, 3920, 3473, 5312, 5312, 314, 314, 314, 314,
	314, 5312, 1223, 426, 426, 1223, 1223, 1223, 1223, 1223,
	426, 426, 426, 5312, 5312, 5312, 75701, 10346, 6796, 28786,
	28786, 1002, 1470, 437, 6724, 28786, 993, 993, 993, 993,
	-1000, 2127, -1000, -1000, -1000, -1000, 2121, 500, 30133, 30133,
	-1000, -1000, -1000, -1000, 17393, 28786, -1000, -1000, -1000, -1000,
	23278, -1000, -1000, 73511, -248, 385, -237, -8, -1000, 28786,
	28786, 28786, 384, -1000, 380, -1000, -1000, 992, -1000, 986,
	969, 963, -1000, 499, 185, 28786, 65503, -1000, 71052, 642,
	-117, -1000, -51, 1122, -1000, 28786, 184, -1000, 1531, 497,
	496, 378, -53, -1000, 377, 731, 701, 376, 370, 369,
	28786, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 75336, 70793, 70721, 70462, 9360, 70176, 70130, -54, 368,
	-1000, 2112, -237, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	363, -1000, 361, -1000, 75255, -237, 360, 4555, -1000, 30133,
	30133, 30133, -1000, 359, -1000, 74241, -1000, 74890, 22829, 22829,
	22829, 358, 74971, 28786, -237, -67, -1000, -68, -1000, -1000,
	492, -74, 812, 22368, 31876, 16047, -1000, 812, 812, 28786,
	-1000, 28786, 1958, -1000, -1000, -1000, 1957, 1907, 1966, 32726,
	-1000, -1000, -1000, -1000, 57011, 637, 684, -1000, -1000, -1000,
	-1000, -1000, 57011, -1000, 2629, 2180, -1000, -1000, -1000, 65503,
	411, -1000, 57011, 57011, 16047, 684, -1000, 355, 35734, -8,
	182, -1000, -1000, 16047, 2040, 2040, 2040, -1000, -1000, 65503,
	2593, -1000, 1477, -1000, 76074, -1000, 654, 947, -1000, 2671,
	490, -1000, 2634, 2634, 65503, 85, 21919, -1000, 959, -1000,
	-1000, 1237, -1000, 1402, -1000, 1035, -1000, -1000, -1000, 21919,
	-1000, 1705, 65503, 65503, 53639, -1000, -1000, 1816, 66763, 1814,
	76074, 65503, -1000, -1000, 489, 488, 1943, 1942, 65503, 65503,
	66343, 65923, 65503, 1482, 28786, 1590, 1602, 72, 72, -1000,
	-1000, 72, 486, 1037, 53639, 53639, 53639, 1378, -1000, -1000,
	-1000, -1000, -1000, 53639, -1000, -1000, 2659, -1000, 1119, -1000,
	-1000, -1000, 1119, 1902, 1346, 53639, 43455, 798, 65503, 1507,
	72, 72, -1000, -1000, 72, 485, 16047, 1463, -1000, 2037,
	-1000, -75, -1000, -1000, 13873, 75620, -1000, 75620, -1000, 65503,
	-1000, 832, 65503, 45143, 762, 2332, -1000, 1902, 2313, 411,
	-1000, -1000, 37008, -42, 763, 43455, 53639, -22, 43455, 43455,
	43455, 2729, 482, 2728, -1000, 53639, 2307, 1659, 1810, 2410,
	687, 65503, 812, 32726, 1472, -1000, 36160, 848, 65503, 1297,
	84, -1000, -1000, -1000, 24, 65503, -1000, 2727, -1000, -1000,
	168, 168, 168, -1000, 166, 1673, -1000, -115, -115, -1000,
	-1000, 3859, 763, -23, 481, -1000, 708, 703, 34876, 43455,
	-77, -1000, -1000, -1000, -1000, -1000, 53639, 65503, 635, 2019,
	65503, -83, -1000, 159, 480, -1000, 763, 34442, 2107, -1000,
	-1000, 796, -1000, 1060, -1000, -1000, -1000, -1000, -1000, -1000,
	1, -42, -42, -1000, -1000, -1000, -1000, 75620, -1000, 1240,
	1234, 65503, -1000, 16047, 65503, 53639, 16047, 53639, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1335, -1000, 28786, -1000,
	-1000, -1000, 21470, -1000, -1000, -1000, 53639, -2, 28786, 28786,
	6222, 6060, 28786, 30133, 30133, -1000, 28786, 264, -1000, -1000,
	-1000, -1000, -1000, 2102, 479, 28786, 76074, 5064, 4538, -1000,
	354, 10171, 1223, -1000, 28786, -1000, 352, 21021, -1000, 74525,
	-38, -84, -1000, 2687, 1861, 1453, 1406, 1277, 2649, 13439,
	-237, -86, -1000, -1000, 653, -1000, 2408, -1000, 28786, 74606,
	13005, -1000, 37856, 813, 1558, -1000, -1000, 2634, 739, -1000,
	-1000, -1000, 739, -1000, 73227, 76074, 76074, 28786, 28786, -1000,
	28786, 28786, 28786, -1000, -1000, 28786, -1000, -1000, 2098, 28786,
	-1000, 76074, 76074, 30133, 30133, 30133, 30133, 30133, 30133, 30133,
	30133, 30133, 30133, 30133, 30133, 30133, 30133, 30133, 30133, 30133,
	30133, 30133, 1863, 30133, 2644, 2644, 2644, -1000, 2193, 2098,
	28786, 28786, 76074, 351, 346, 345, -1000, 28786, -237, -1000,
	-1000, 3859, -1000, 2062, -1000, 28786, -1000, -105, -1000, 1885,
	-1000, -1000, 2062, 2062, -91, 75620, 32726, 32726, -1000, 478,
	28786, 1955, -1000, 626, -1000, -92, -1000, 57011, -1000, 625,
	-246, -1000, 697, -1000, -1000, -1000, -1000, 411, -1000, -1000,
	-1000, 86, 57011, -1000, -93, -1000, 2579, 344, 16047, -1000,
	-1000, -1000, -1000, -1000, -1000, -42, 1572, 2686, -1000, 2638,
	647, 619, 342, 2634, 341, 338, -42, 65503, -1000, -24,
	-1000, -1000, -1000, 28786, -1000, -1000, 2485, 961, 953, -1000,
	2304, -1000, 1803, -1000, 860, -1000, 1245, -1000, 28786, 28786,
	475, 474, 1413, 2726, 2301, 1673, 2295, 1673, -1000, -1000,
	757, -1000, 75620, 473, 472, -1000, -26, 1258, 794, -1000,
	-1000, 28786, 28786, 57855, -1000, 362, 2493, -3, -1000, 951,
	-1000, -1000, -1000, 1902, 944, -1000, -1000, 1491, -1000, -1000,
	793, -1000, -1000, 28786, -1000, -30, 934, 763, 2097, -1000,
	-1000, 2725, 2724, 2723, 333, -94, -34, 76074, 2577, 1588,
	65503, 53639, 53639, 2576, 724, -1000, 2629, -1000, -1000, -1000,
	-1000, 792, -1000, -1000, 2722, -1000, 864, 16047, 53639, 2293,
	1917, 687, 44303, -1000, 792, 1558, -114, -1000, 1297, 20560,
	2491, -99, -1000, -1000, -1000, 812, 37432, 32726, 28786, 2718,
	-100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 57435,
	57435, 43455, 43455, 43455, 763, 65503, 65503, 45143, 2712, 471,
	65503, 65503, 469, -1000, 65503, 65503, 2711, 43455, -1000, -1000,
	72, -1000, 1567, 53639, 12571, -1000, -1000, 790, -1000, -1000,
	1508, 1651, 1508, 1583, 73181, -1000, 2496, 16047, 2582, 993,
	28786, 28786, 215, 3949, 523, 993, 28786, 28786, 76074, 75904,
	-102, 28786, 28786, -1000, 28786, 618, 75620, 2665, 28786, 331,
	330, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	329, -1000, -1000, -1000, -1000, -1000, 75620, 28786, 39, -1000,
	-1000, -1000, 69703, -1000, 28786, 328, 327, -1000, -1000, -1000,
	322, 321, 10018, 8580, 72897, 72613, 72567, 75620, 2193, 75620,
	-1000, -1000, 831, 831, 1096, 1096, 1096, 1096, 2644, 1736,
	1479, 2429, 1050, 1050, 1050, 1148, 957, 957, 1050, 1050,
	1050, 2091, 1886, 466, 5451, -1000, -1000, 75620, 75620, 320,
	-1000, -1000, -1000, -237, 317, 2058, 2539, 75620, -1000, 32726,
	2058, 2058, -1000, -1000, 1907, 65503, 75620, 32726, -4, -1000,
	2629, -1000, -1000, 2180, -1000, 11265, -1000, 16047, -1000, -1000,
	35734, -1000, 451, -1000, 25, -1000, -1000, 617, 2706, 638,
	-1000, 299, -1000, -1000, -42, 75620, 65503, 65503, 65503, 2291,
	-1000, 2470, -1000, 72283, -112, -1000, 73876, 28786, 65503, -1000,
	1415, 1975, 898, -1000, 65503, -1000, 65503, -1000, -1000, 65503,
	65503, 53639, 2282, -118, 75620, -66, -1000, 694, -1000, 981,
	-1000, 12137, 53639, 53639, 43455, 2271, -124, 16047, -1000, 43455,
	-1000, -1000, -1000, 2010, -1000, 56165, 1685, 72, -1000, 2703,
	450, 1902, 72, -1000, 1562, -1000, 614, -1000, -1000, 445,
	65503, 1652, 444, 16047, 1919, 687, 44303, -1000, 1056, 1988,
	-1000, -89, -1000, 493, 72, 1558, -1000, -114, 75620, -1000,
	693, -1000, -127, -1000, -1000, 278, -1000, 2449, 2448, -1000,
	-1000, 28786, 443, 442, 65503, 2447, -1000, -1000, -132, -1000,
	1896, -1000, -1000, -1000, -1000, -1000, 16047, 1289, -1000, -1000,
	-1000, -1000, 2496, 993, 993, 28786, 28786, 28786, 993, 75904,
	-134, -1000, 993, 993, -237, -1000, -1000, 74525, -1000, -1000,
	-1000, 75620, 11703, 1510, -1000, 71999, -1000, -1000, -1000, -1000,
	28786, 28786, -1000, -1000, -1000, -1000, -1000, 30133, 2090, 441,
	76074, -1000, -1000, 801, 28786, 28786, 1885, 801, 801, -1000,
	-141, -1000, 684, -1000, -1000, -1000, 2629, 25, -1000, 2700,
	16047, 622, -1000, 2699, -1000, -1000, -1000, -1000, 65503, -1000,
	65503, -1000, 16047, 65503, 2089, 1786, -1000, -1000, 1939, 439,
	30133, 53639, 772, 2111, 1438, 28786, -1000, -142, -143, 1782,
	-1000, -1000, 1778, 28786, -1000, 76074, 1673, 1673, -154, -155,
	-1000, 28786, 929, 65503, 20111, -1000, 2698, 2493, -1000, -1000,
	-1000, 28786, 922, -1000, -115, 1507, 2043, -1000, -1000, -1000,
	-1000, 1938, -1000, -1000, 65503, 1935, 789, -1000, 45143, 762,
	-1000, -1000, 761, -1000, 28786, -1000, 53639, 28786, 1639, -1000,
	687, 44303, -1000, 2410, 1297, -1000, 2416, 65503, 2484, -1000,
	1988, 437, -1000, 763, 436, 435, -157, 28786, 28786, -160,
	433, 763, -125, -1000, 727, 725, -1000, -1000, 53639, 53639,
	-1000, 993, 993, 993, -1000, 277, -1000, -1000, 1558, 2538,
	-1000, 71953, 71669, 465, 30133, 76074, -162, -1000, 65503, 75620,
	-237, -1000, -1000, -1000, 57011, 427, -1000, 2697, -1000, -1000,
	1833, -1000, -1000, -1000, 65503, 1792, -1000, -1000, 28786, 5451,
	432, 28786, -1000, -1000, 1998, 2124, 2010, 431, -1000, -1000,
	-1000, -1000, 1397, -1000, -1000, 75620, 2518, -1000, -1000, 430,
	429, 75620, 428, 685, 2087, -1000, -1000, -1000, 75620, 425,
	762, -1000, 1520, 1685, 424, -1000, -1000, -1000, 1963, 274,
	2573, 761, -1000, 2626, -1000, -165, 864, -167, 53639, 44303,
	-1000, 1917, -1000, 1043, -173, 65503, 1297, -1000, -1000, 43455,
	43455, 1438, -174, -176, -1000, 43455, -1000, 1896, -1000, 65503,
	-1000, 65503, -1000, -1000, -1000, 1505, 28786, -1000, -1000, 465,
	-179, -1000, -133, -1000, 2570, -1000, -1000, -1000, -1000, -1000,
	2290, 71383, 1876, 65503, 71311, 2117, -1000, -1000, 1507, 65503,
	53639, 863, 16047, 1508, 1508, 28786, 19662, 1518, 28786, -1000,
	53639, 65503, -1000, 2446, 2010, 72, -1000, -1000, 1438, 415,
	1438, 414, -1000, 1919, 1192, -1000, 812, -1000, -1000, -181,
	-182, 2010, 1438, -1000, -187, -1000, -188, -193, 270, 29684,
	29684, 29684, -237, -1000, 65503, 412, 2261, -1000, 1599, 1371,
	268, 877, -1000, -1000, 2111, -195, 411, -1000, 28786, -1000,
	-198, -1000, 847, -203, -1000, 846, -206, -1000, 2080, -1000,
	-209, 407, -211, -1000, -1000, -1000, 1507, 789, 2010, 28786,
	2010, 28786, -1000, 37432, -1000, 763, 763, 1507, 2010, 763,
	-1000, -1000, -1000, 2402, -1000, 30582, 1610, 1325, 73795, 2402,
	2402, -1000, -1000, 65503, -1000, 1632, 1631, 1196, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1876, 75620, -1000, 1508,
	2041, -1000, 1508, 2079, -1000, 1514, -1000, 65503, -1000, 65503,
	762, -1000, 1507, -214, 1507, -216, -204, -1000, -1000, -1000,
	1507, -1000, -1000, 1569, 2597, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2431, -1000, 885, 1720, 1720, 1599,
	-1000, 406, -1000, 404, -1000, -217, -1000, -1000, 811, 1438,
	811, 1438, -1000, -1000, 1314, -1000, -1000, 1547, 29235, -1000,
	2610, -1000, -1000, 1918, -1000, 2111, 28786, 28786, 1640, -1000,
	2696, 2010, -1000, 2010, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -224, -225, -1000, -1000, -1000, -1000, 1507, 1507, 1507,
	921, 811, 811, -1000, 169, -1000, -1000, 28786, -230, 1507,
	-1000,
}
var sqlPgo = [...]int{

	0, 3341, 3338, 3337, 3336, 3335, 3334, 3333, 3332, 3331,
	3329, 3328, 3327, 3326, 3325, 3320, 3315, 3314, 3313, 3312,
	3311, 3310, 3309, 3305, 3304, 3303, 3300, 3297, 3296, 3290,
	3286, 3283, 3282, 3281, 3279, 3276, 3273, 3272, 3271, 3270,
	3266, 3265, 3264, 3261, 3260, 3256, 3248, 3246, 36, 3245,
	3243, 3242, 3241, 3240, 3239, 3238, 3236, 3235, 3232, 3230,
	3224, 3223, 3218, 3216, 3214, 3212, 37, 3208, 218, 3207,
	3204, 3203, 3202, 3201, 3200, 3199, 3195, 3194, 3193, 214,
	3192, 111, 3190, 3188, 3186, 3185, 3182, 213, 3181, 3179,
	3178, 3177, 3176, 3175, 3174, 3173, 130, 3172, 3170, 49,
	3169, 3167, 3166, 3164, 3163, 3161, 3157, 3150, 3148, 3147,
	195, 3145, 212, 3144, 3138, 3137, 3136, 3132, 3131, 3130,
	3128, 3125, 3123, 3122, 3121, 3120, 3119, 3118, 3111, 3110,
	3107, 3105, 3101, 3089, 3088, 3087, 3085, 3084, 3082, 210,
	141, 3081, 3080, 209, 207, 3074, 3070, 97, 95, 60,
	3069, 100, 193, 186, 4977, 174, 3068, 3066, 3064, 143,
	3063, 3062, 3061, 3060, 72, 134, 136, 140, 131, 80,
	3059, 3056, 69, 63, 33, 24, 105, 3053, 3052, 3051,
	2439, 104, 3050, 3048, 204, 194, 3044, 1680, 3041, 146,
	75, 99, 167, 92, 3040, 120, 22, 3035, 137, 40,
	3028, 129, 83, 27, 5953, 7438, 3018, 82, 217, 76,
	233, 184, 183, 168, 154, 132, 937, 3015, 196, 3014,
	56, 156, 3012, 3011, 3009, 53, 150, 78, 3006, 11,
	3, 133, 28, 90, 14, 2999, 10, 2998, 2997, 2996,
	2995, 26, 135, 2993, 119, 58, 2989, 29, 2988, 64,
	165, 2986, 170, 96, 2984, 2983, 203, 158, 160, 2982,
	13, 185, 2980, 2977, 2975, 2974, 2971, 102, 19, 98,
	2970, 2965, 108, 188, 2964, 34, 2963, 148, 74, 116,
	216, 94, 173, 91, 171, 142, 180, 2961, 2960, 2959,
	151, 2958, 2954, 122, 162, 2953, 2951, 215, 35, 57,
	181, 62, 2950, 128, 2949, 157, 2947, 2945, 2943, 208,
	139, 164, 6, 61, 93, 23, 8, 179, 124, 86,
	79, 2942, 3013, 1557, 1522, 2941, 115, 89, 52, 114,
	121, 201, 50, 2940, 2939, 1181, 2938, 2937, 2935, 2934,
	145, 2933, 2932, 2931, 107, 43, 73, 2930, 125, 67,
	12, 109, 205, 85, 166, 152, 197, 2929, 144, 2928,
	65, 112, 2927, 155, 192, 123, 2926, 606, 118, 2925,
	169, 2924, 2923, 2922, 2921, 113, 2920, 2919, 234, 2918,
	117, 2917, 2916, 149, 106, 189, 88, 30, 2915, 71,
	110, 2914, 153, 55, 2911, 163, 32, 0, 6730, 5287,
	6064, 2910, 2981, 2909, 161, 103, 2908, 2907, 2904, 84,
	2902, 54, 2901, 2895, 38, 2894, 15, 4, 7, 18,
	16, 1635, 1115, 2893, 2892, 87, 101, 126, 2890, 206,
	175, 2888, 2876, 2871, 68, 2870, 21, 2869, 25, 2868,
	2865, 31, 5, 17, 2864, 2863, 190, 2862, 191, 2859,
	2856, 2599, 2854, 199, 66, 2853, 138, 172, 2852, 2850,
	2849, 2848, 198, 2847, 200, 2846, 9, 20, 1, 2845,
	2844, 2843, 159, 2, 2549, 2842, 2841, 70, 2839, 2838,
	147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 453,
	453, 19, 31, 20, 32, 13, 454, 454, 454, 454,
	24, 21, 33, 22, 22, 22, 22, 22, 150, 150,
	150, 150, 18, 18, 27, 27, 166, 166, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 452,
	452, 168, 168, 167, 163, 163, 455, 455, 169, 169,
	169, 171, 171, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 151, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 395, 395, 396, 396, 146, 146,
	147, 147, 147, 147, 148, 148, 149, 149, 149, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 140, 140, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 460, 460,
	461, 461, 462, 462, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 63,
	63, 243, 243, 219, 219, 64, 64, 64, 65, 65,
	66, 66, 53, 53, 448, 448, 257, 257, 362, 362,
	68, 68, 276, 276, 69, 69, 69, 69, 69, 69,
	70, 70, 70, 70, 70, 70, 70, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 77, 77, 77,
	78, 78, 78, 75, 75, 75, 73, 73, 73, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 258, 258,
	79, 79, 79, 79, 79, 79, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 364, 364, 80, 80, 80, 333, 333, 84, 84,
	84, 291, 291, 85, 85, 85, 85, 85, 86, 86,
	86, 86, 98, 98, 98, 98, 451, 451, 250, 250,
	184, 184, 184, 184, 91, 91, 91, 91, 92, 92,
	92, 93, 93, 145, 145, 104, 104, 104, 104, 104,
	103, 103, 103, 103, 103, 103, 43, 43, 43, 44,
	44, 45, 45, 46, 46, 47, 47, 48, 48, 48,
	48, 48, 106, 106, 456, 456, 108, 105, 105, 105,
	107, 107, 107, 107, 109, 110, 110, 110, 110, 110,
	110, 110, 110, 111, 111, 389, 389, 266, 266, 387,
	387, 403, 403, 388, 388, 223, 223, 223, 223, 223,
	224, 224, 224, 394, 394, 394, 394, 394, 394, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	130, 130, 130, 139, 139, 139, 139, 139, 139, 139,
	132, 132, 132, 121, 121, 113, 113, 113, 113, 113,
	117, 117, 117, 117, 117, 114, 114, 123, 123, 123,
	123, 123, 118, 118, 120, 120, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 115, 115, 115, 115, 125,
	125, 125, 125, 297, 297, 297, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 135, 135, 135, 135,
	135, 135, 347, 347, 131, 131, 131, 131, 134, 134,
	134, 134, 281, 281, 128, 128, 128, 129, 129, 129,
	133, 133, 136, 136, 136, 136, 116, 116, 116, 465,
	465, 465, 137, 137, 127, 127, 138, 138, 138, 138,
	138, 138, 138, 138, 126, 126, 126, 126, 119, 449,
	449, 446, 446, 446, 446, 446, 446, 446, 447, 447,
	450, 450, 89, 89, 89, 58, 58, 466, 466, 466,
	59, 59, 467, 467, 467, 464, 464, 464, 464, 464,
	464, 464, 464, 225, 225, 226, 226, 314, 314, 314,
	314, 314, 229, 229, 170, 170, 170, 232, 233, 233,
	230, 230, 231, 231, 231, 235, 235, 234, 237, 237,
	236, 313, 410, 410, 412, 412, 412, 412, 412, 412,
	412, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 408, 408, 408, 409, 404, 404, 405, 405, 405,
	405, 227, 227, 228, 228, 228, 228, 406, 407, 248,
	248, 350, 411, 411, 413, 413, 415, 468, 468, 468,
	468, 468, 468, 469, 469, 312, 312, 241, 241, 416,
	416, 416, 416, 417, 417, 417, 417, 417, 420, 419,
	418, 418, 418, 418, 418, 343, 343, 343, 62, 62,
	62, 278, 278, 277, 277, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 142,
	142, 60, 60, 60, 176, 176, 57, 57, 57, 471,
	471, 61, 61, 61, 472, 472, 67, 67, 67, 67,
	67, 67, 56, 56, 56, 56, 56, 473, 473, 298,
	298, 296, 296, 247, 247, 349, 188, 188, 164, 164,
	164, 23, 25, 25, 17, 17, 34, 34, 35, 35,
	30, 30, 457, 457, 458, 458, 90, 90, 94, 94,
	94, 102, 102, 141, 141, 141, 141, 141, 141, 141,
	38, 38, 38, 38, 50, 50, 50, 50, 100, 475,
	475, 475, 101, 101, 474, 474, 183, 183, 183, 183,
	185, 185, 309, 309, 310, 310, 476, 476, 311, 311,
	311, 311, 178, 177, 179, 179, 55, 55, 55, 172,
	172, 173, 173, 174, 174, 175, 175, 477, 477, 87,
	87, 87, 144, 144, 218, 218, 305, 305, 305, 242,
	242, 193, 193, 308, 308, 306, 306, 306, 306, 275,
	275, 275, 143, 143, 255, 255, 268, 268, 269, 269,
	359, 359, 270, 99, 99, 154, 154, 152, 152, 152,
	152, 152, 152, 159, 159, 259, 259, 160, 160, 160,
	160, 161, 161, 161, 153, 153, 153, 155, 155, 155,
	155, 155, 155, 155, 158, 158, 158, 158, 162, 162,
	162, 157, 157, 427, 427, 427, 429, 429, 430, 426,
	426, 428, 428, 470, 470, 280, 280, 280, 239, 240,
	238, 238, 245, 245, 244, 246, 246, 348, 348, 348,
	273, 273, 273, 273, 301, 301, 299, 299, 299, 300,
	300, 302, 302, 302, 303, 303, 304, 304, 272, 272,
	329, 329, 156, 156, 156, 252, 252, 252, 253, 253,
	320, 320, 320, 320, 320, 320, 321, 321, 319, 319,
	319, 319, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 352, 352, 254, 254, 353, 307, 307, 444, 444,
	444, 445, 445, 346, 346, 354, 354, 354, 354, 354,
	354, 344, 344, 345, 345, 360, 361, 361, 284, 284,
	284, 284, 282, 282, 285, 285, 285, 285, 283, 283,
	355, 355, 355, 355, 274, 274, 356, 356, 356, 357,
	315, 316, 316, 365, 365, 365, 365, 380, 251, 251,
	251, 251, 251, 478, 478, 366, 366, 366, 366, 366,
	366, 366, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 370, 370, 370, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 379, 379, 379, 379, 379,
	371, 371, 376, 376, 377, 377, 377, 372, 373, 378,
	378, 378, 378, 479, 479, 382, 382, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 368, 368, 368, 375,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 292, 292, 293, 293, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 324, 324, 324, 324, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 421, 421, 421, 421, 421, 421, 421, 421, 424,
	424, 425, 425, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
	423, 423, 431, 431, 432, 432, 434, 434, 435, 435,
	436, 437, 437, 437, 438, 439, 439, 433, 433, 440,
	440, 440, 440, 441, 441, 442, 442, 442, 442, 442,
	443, 443, 443, 443, 443, 335, 335, 336, 336, 342,
	342, 342, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 186, 186,
	186, 186, 186, 264, 264, 262, 262, 262, 265, 265,
	263, 263, 261, 261, 260, 260, 332, 332, 330, 330,
	334, 334, 286, 286, 381, 381, 381, 381, 381, 381,
	381, 287, 287, 287, 295, 288, 288, 289, 289, 289,
	289, 289, 326, 327, 290, 290, 290, 328, 328, 337,
	341, 341, 340, 339, 339, 338, 338, 317, 317, 318,
	318, 271, 271, 480, 480, 267, 267, 358, 358, 358,
	358, 221, 221, 256, 256, 220, 220, 213, 213, 214,
	214, 214, 214, 249, 249, 383, 383, 383, 384, 385,
	386, 331, 203, 202, 190, 191, 201, 200, 199, 189,
	192, 196, 197, 198, 194, 195, 209, 208, 207, 205,
	206, 363, 215, 215, 216, 216, 216, 217, 217, 217,
	217, 187, 187, 210, 210, 211, 212, 212, 204, 204,
	204, 180, 180, 180, 181, 181, 182, 182, 393, 393,
	391, 391, 391, 392, 392, 392, 392, 390, 390, 390,
	390, 390, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 398, 398, 398, 398, 398,
	398, 398, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 399, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 402, 402,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	9, 3, 2, 0, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 3, 3,
	1, 3, 1, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 4, 3,
	4, 4, 3, 4, 4, 5, 3, 5, 5, 5,
	7, 3, 3, 3, 4, 3, 4, 3, 5, 4,
	5, 3, 4, 5, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 5, 5, 5, 3, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 10, 13, 0, 2, 3,
	9, 12, 0, 2, 3, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 5, 8, 5,
	11, 3, 0, 2, 4, 3, 3, 1, 5, 1,
	3, 1, 2, 0, 1, 2, 2, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 2, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 3, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 2, 3, 4,
	3, 4, 5, 0, 3, 0, 2, 2, 4, 2,
	3, 0, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 2, 5, 2,
	3, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 2, 4,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 3,
	3, 3, 0, 1, 4, 2, 2, 2, 2, 2,
	3, 2, 2, 3, 0, 4, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 2, 3, 1, 2, 3, 2, 3,
	2, 3, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 1, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 3, 1, 1, 1, 1,
	5, 3, 1, 1, 3, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 463, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 291, 320, 330, 314, -107, -108,
	349, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -459, 86, -428,
	-71, -74, -76, -463, 116, 131, 175, 283, -92, -93,
	316, 318, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 353, 400, 42,
	363, 71, 119, 324, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -427, -72, -73, -75, -77, -78, 315, -155, -153,
	460, 413, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 431, 439, -158, -156, -157,
	-162, 337, 421, 377, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, -205, -210, -211, -212, -204, -180,
	-399, -402, 4, -397, -400, 137, 182, 250, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 383, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 232, 234, 235, 238, 236, 239, 237, 240, 243,
	241, 242, 245, 246, 248, 247, 252, 172, 256, 257,
	259, 260, 261, 277, 264, 265, 266, 269, 270, 273,
	276, 278, 279, 280, 281, 282, 283, 284, 286, 287,
	289, 291, 293, 295, 296, 297, 298, 299, 300, 302,
	303, 305, 306, 307, 308, 309, 314, 311, 312, 313,
	315, 316, 317, 318, 320, 322, 323, 324, 325, 327,
	329, 350, 351, 365, 330, 331, 332, 333, 334, 335,
	336, 340, 344, 341, 342, 343, 338, 339, 345, 346,
	347, 349, 352, 353, 355, 356, 358, 359, 361, 362,
	363, 364, 366, 369, 370, 371, 367, 368, 376, 374,
	375, 378, 379, 380, 381, 382, 384, 386, 394, 395,
	397, 400, 401, 402, 392, 404, 405, 408, 409, 410,
	411, 412, 417, 413, 415, 418, 419, 420, 426, 425,
	432, 433, 435, 436, 437, 33, 43, 44, 46, 49,
	60, 61, 62, 65, 103, 104, 124, 134, 135, 146,
	160, 162, 169, 170, 171, 189, 195, 197, 201, 220,
	254, 255, 271, 275, 288, 290, 301, 326, 357, 372,
	387, 388, 389, 390, 396, 398, 421, 422, 423, 427,
	434, 262, -198, 2, -180, -180, 291, 26, 2, 26,
	287, 339, 379, 381, 2, -451, -250, 2, 26, -184,
	-180, 86, 158, 337, -198, 2, -451, -250, 24, 2,
	-180, 2, -185, 2, 330, -180, 463, 81, 227, 64,
	326, 346, -110, 395, -109, 387, 332, -111, -389, 2,
	243, -180, 463, 463, 463, 463, 2, 377, 280, 425,
	338, 414, 99, 298, 182, -446, 2, 4, -400, -397,
	-214, -213, 377, 99, -212, -204, 453, -211, 463, 463,
	463, 2, 204, 205, 297, 296, 346, 347, 463, 463,
	463, 2, 25, 58, 80, 83, 105, 133, 153, 156,
	267, -460, 235, 277, 295, 332, 345, 376, 384, 397,
	-464, 364, 59, 414, -471, 402, 114, -296, 99, 381,
	379, 227, 157, 409, 322, 161, 407, 109, 188, 412,
	411, 463, 463, 25, 58, 67, 83, 114, 133, 153,
	156, -462, 277, 295, 329, 332, 345, 376, 384, 402,
	397, 2, 425, 338, 377, 182, 99, 414, 322, 294,
	-81, 2, 460, 29, 349, -151, 377, 198, 2, -180,
	204, 205, 2, 463, 463, -446, 2, 204, 205, 2,
	198, 2, 59, 334, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 2, -139, 346, 364, 167, 41, 64, 26, 69,
	281, 100, 159, 182, 183, 212, 80, 81, -297, 40,
	205, 204, -347, 378, 333, 339, 374, 395, 86, 415,
	323, 437, 299, 127, 4, 99, 243, 348, 387, 227,
	73, -470, 2, 377, -474, 2, 395, 395, 2, -474,
	2, -474, 2, -183, 2, 395, 391, -475, 395, 434,
	463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
	463, 463, 463, -153, -155, -154, 463, 463, 463, 463,
	463, -139, 346, 2, 64, 26, -159, -160, 151, -244,
	-245, 406, 196, 122, 268, -152, -154, 2, -427, -387,
	2, -322, -403, -324, 451, 452, 444, 249, 438, -335,
	105, 407, 262, -402, -325, -337, 124, 326, -265, 8,
	9, 5, 6, 7, -187, -367, -331, -375, 399, 136,
	253, -217, 464, 10, 460, -424, -154, -336, 34, 162,
	57, -391, -216, -369, -377, -373, -374, -478, 47, 53,
	52, 384, 242, 340, 341, 358, 342, 343, 45, 417,
	179, 259, 261, 190, 4, 197, -215, -204, -421, -422,
	-397, -398, 189, 195, 191, 357, 192, 193, 194, 44,
	301, 147, 148, 146, 115, 104, 103, 255, 49, 48,
	46, 422, -378, 101, 387, 388, 389, 390, 207, 208,
	-180, -399, 67, 91, 92, 90, 95, 94, 96, 93,
	348, 414, 58, 33, 169, 170, 201, 254, 171, 65,
	-423, 368, 87, 155, 187, 173, 200, 202, 206, 221,
	224, 244, 251, 272, 274, 321, 354, -479, 423, 134,
	135, 275, 288, 372, 396, 398, 160, 220, 60, 61,
	-429, 302, -430, -198, -429, 463, 463, 465, 463, -238,
	-239, -240, 2, 26, 112, 460, 2, -351, 2, 458,
	-355, -154, 215, -354, 460, -352, -205, 263, -425, 327,
	-421, -422, -187, -204, -216, 4, -241, 460, 462, 99,
	377, 68, -291, 460, -180, 26, 262, 391, 465, -333,
	460, 262, 154, 265, -180, 2, 2, 350, 2, 460,
	-110, 62, 395, 39, 346, -310, 2, -311, -177, -178,
	-179, -360, 203, 293, 300, 440, 437, -387, -456, 154,
	443, 391, -387, -266, 462, 2, -355, 169, -205, 2,
	-202, -390, 4, -397, -400, -398, -401, 67, -399, 26,
	28, 29, 30, 32, 34, 35, 36, 37, 50, 57,
	58, 63, 66, 68, 80, 86, 90, 91, 93, 92,
	94, 95, 96, 105, 107, 110, 112, 113, 117, 119,
	122, 136, 138, 151, 153, 154, 158, 161, 164, 176,
	186, 196, 198, 215, 218, 225, 228, 229, 249, 253,
	258, 262, 263, 267, 268, 285, 292, 304, 319, 337,
	348, 360, 373, 377, 385, 391, 393, 399, 406, 407,
	414, 416, 424, 428, 429, 430, 431, -402, 2, -355,
	169, 2, -207, 169, -355, -210, 2, -395, 169, -393,
	10, -392, 5, 4, -397, -400, -398, 2, -189, -180,
	2, -201, -390, 2, -220, 169, -205, -206, -210, 391,
	465, -256, -213, -214, -249, -180, 462, -322, 2, -99,
	2, -322, 169, 2, -99, 169, 2, -322, 169, 2,
	-99, 169, 2, 2, 2, 397, 2, 83, 169, -180,
	377, 98, 2, 313, -461, 329, 401, 425, 2, 2,
	2, 2, 2, 2, 2, 377, 338, -472, 302, -194,
	2, -180, 151, -395, 169, 2, -395, 169, 2, -208,
	-210, -208, 182, 199, -189, 169, 2, 381, 379, 381,
	379, 154, 2, 198, 2, 198, 2, -356, 2, -357,
	-205, 2, 2, 2, 2, 2, 169, -180, 377, 98,
	2, 214, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -258, 169, 2, -205, -258, 169, 2, -258, 169,
	2, -221, 169, 2, -220, -189, 169, 2, -396, 169,
	2, -395, -396, 169, 2, -364, 2, -363, -392, 421,
	-81, 460, 346, 460, -395, -205, -205, -322, -99, 154,
	-322, -99, -151, 151, 2, 99, 377, -139, 2, 151,
	416, 2, 8, 2, -395, 333, 299, 143, 2, 350,
	2, 64, -297, 437, 154, 2, 154, 2, -281, 2,
	431, -449, 2, 262, 154, 2, 154, 2, 154, 2,
	154, 2, 154, 2, 296, 347, 205, 2, -99, 428,
	-322, 428, 2, 394, 213, 128, 154, -281, 2, 154,
	2, 154, 2, 5, 2, 203, 293, 365, 2, -205,
	-465, 2, 377, 425, 338, 2, 2, 76, 77, 154,
	2, 154, 437, 2, -274, -355, -309, -310, -309, 391,
	-185, -159, -244, -245, -139, 350, 2, -259, 256, 411,
	246, 352, 211, -159, -273, -299, -300, 225, 138, 258,
	-280, 26, 112, -280, -280, 51, 461, 461, 11, 12,
	66, 38, 451, 452, 453, 454, 149, 455, 456, 449,
	450, 448, 441, 442, 446, 209, 210, 82, 445, 443,
	75, 233, 328, 139, 140, 141, 142, 310, 180, 31,
	181, 14, 15, 16, 30, 267, 224, 438, 173, 354,
	444, 17, 18, 19, 200, 202, 251, 43, 176, -186,
	-222, -322, -322, -322, -322, -322, 274, 460, -271, -317,
	458, -154, 460, 460, 460, 5, 460, 5, -386, 8,
	-154, -322, -335, 461, -263, 460, -154, -335, -330, 460,
	326, 458, 460, -338, -322, 462, -431, 432, -371, 460,
	290, -370, 460, -370, -370, 426, -368, 460, 439, 433,
	460, -368, 460, 460, 151, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 426, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 465, -429,
	-241, 460, -267, -358, -322, 453, -267, -267, 262, -260,
	-322, 87, -284, 206, 244, 155, 221, 321, 187, -386,
	-82, -68, -79, -87, -99, -112, -143, -144, -319, 464,
	-346, 439, -154, -352, -204, -154, -354, 460, -351, -346,
	453, -205, 460, 154, 460, 462, 154, -249, -390, -189,
	-205, -215, -216, 111, -260, -446, -249, -184, 35, -332,
	-365, -366, -367, -376, -372, -375, -379, 47, 53, 52,
	384, 242, 340, 341, 358, 342, 343, 45, 417, 179,
	259, 261, 190, 4, 46, 422, -378, 197, 306, 307,
	305, 309, 308, 189, 195, 191, 357, 192, 193, 194,
	44, 301, 147, 148, 146, 115, 104, 103, 255, 49,
	48, 101, 387, 388, 389, 390, 207, 208, 423, 368,
	60, 61, -446, -249, 151, -389, -260, 35, -310, 2,
	105, -393, 39, -476, 465, 223, -224, 232, 248, 166,
	263, 435, 256, -394, 5, 4, -331, -343, 105, 227,
	-375, 9, 452, -383, 8, 451, -388, -387, 89, 462,
	-390, -166, 311, -165, 23, 27, 116, 419, 129, -231,
	184, 280, 124, 361, 410, -453, -454, 331, 382, 383,
	78, 256, 311, 124, -277, -279, 35, 97, 246, 276,
	54, 177, 237, 238, 363, 427, 124, 311, 431, 124,
	-454, 311, -454, -168, 361, 410, -453, -454, 331, 311,
	-167, -231, 124, 464, -96, -395, 460, -256, 465, 465,
	-390, 453, 124, 124, 124, 124, 2, 2, 249, 2,
	2, 2, 156, -464, -462, 2, 2, 2, -205, 169,
	-207, 169, 2, -210, 425, -243, 262, -448, -257, 377,
	-205, -176, -426, 431, 249, 249, 35, 460, 2, -191,
	169, 2, -181, -180, 182, -426, 249, -356, -218, -205,
	-218, 349, -198, 35, -319, 124, 2, 2, 2, -180,
	-169, 465, 56, 317, 124, -169, 124, -169, 124, -169,
	465, 124, -169, 124, 465, 124, 124, 461, 465, -364,
	-395, -149, 431, 154, 86, 460, 460, -151, -97, -96,
	-395, -448, -189, 2, -205, 2, 377, 207, -395, -395,
	-395, -389, 26, 351, 2, 296, 347, 77, -205, 377,
	99, 182, 70, -450, 151, -447, 322, -446, -205, 99,
	-205, 99, -205, 99, -205, -205, 2, 2, 2, 2,
	74, 74, 151, 2, 394, 2, 394, 2, -180, -180,
	-180, 223, -205, 151, 377, 182, 99, 377, -169, 465,
	-185, -159, -273, -389, -161, 356, 252, -258, 211, 352,
	-159, -300, -299, 26, -322, -304, 145, 245, -322, -324,
	-153, -153, -153, -246, -348, -322, 292, 182, -380, -365,
	-365, -203, -390, 387, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, -322,
	-322, -322, -322, -322, -322, -322, -322, -322, -322, 224,
	173, 354, 43, 176, -322, 391, -322, -322, -322, -322,
	241, 249, 253, 399, 136, 408, 112, 256, -480, 373,
	37, -328, -154, -264, 460, -342, 32, 360, 26, -335,
	460, 2, -317, -322, -318, -261, -260, -260, 461, 424,
	26, 112, 453, 2, 8, -292, -294, 436, 240, 102,
	168, 239, -293, 336, 461, 465, 35, 461, -322, -261,
	-334, -330, -260, -341, -340, 428, -390, 453, -432, 144,
	161, 8, -384, 8, -384, 387, 387, 8, -384, -384,
	460, 461, 2, 461, 2, 461, 2, 461, 2, 461,
	2, -322, -322, -322, -322, -322, -322, -322, -260, -286,
	2, -381, -260, 4, 436, 240, 102, 168, 239, 336,
	-286, 2, -287, 2, -322, -260, -288, -323, -324, 451,
	452, 444, -335, -289, 2, -322, -261, -322, 50, 218,
	393, -290, -322, 154, -260, -260, 2, -260, 2, -430,
	35, -260, -252, 465, 154, 35, 4, -252, -252, 460,
	461, 465, -285, 165, 236, 231, -285, -351, -284, 206,
	-282, 272, -282, -282, -444, 460, 459, 463, 463, 463,
	463, 463, -346, -190, 458, 466, -390, -345, -344, 35,
	-198, 269, -346, -346, 462, 461, -345, -205, 460, -260,
	-390, 366, 461, 462, 200, 200, 200, 327, 461, 391,
	431, -81, 264, 461, 465, -251, 34, 458, -294, 460,
	-382, 426, 460, 460, 154, -250, -456, 461, 395, -311,
	-223, 300, 359, 312, 344, 375, 9, 8, 8, 465,
	-390, 465, -457, 80, 391, 68, -313, 169, 68, -404,
	-192, 80, -405, -180, 63, 407, 292, 153, -457, 80,
	-457, 80, 80, 349, 364, 51, -355, 38, 38, 26,
	-99, 219, 154, 437, 377, 182, 391, -355, -279, -365,
	97, 237, 238, 51, -385, -383, 452, -385, 51, -385,
	-385, -385, 431, -207, -355, 391, 282, -395, 391, 465,
	38, 38, 26, -99, 219, 154, 391, -220, -190, -361,
	-360, -396, -213, -180, 462, -322, -99, -322, -99, 124,
	2, -472, 214, 460, -227, 249, -278, -277, 249, -209,
	2, -205, 154, -249, -362, 198, 465, -257, 282, 124,
	124, 460, 120, 298, 2, 262, 249, -191, 169, -172,
	380, 124, -276, 416, -305, -99, 460, 105, 35, -305,
	-268, -269, -359, -270, -192, 460, -198, -180, 2, -205,
	-258, -258, -258, -220, -221, -189, -395, -396, -396, -81,
	-363, 461, 461, -148, 266, -147, -180, 5, -151, 416,
	-226, -314, -313, -408, -409, -404, 224, 182, 407, 199,
	137, -242, -193, -192, 98, -149, -360, 465, -149, -149,
	-361, -361, -205, 151, 2, 2, -281, -205, -189, -220,
	-205, -249, -249, -189, -189, -189, -99, -322, 346, 151,
	151, 462, -281, 298, 99, 377, 280, 182, -205, -220,
	-189, -205, -355, -159, 230, 411, -302, -383, 460, -303,
	326, 327, 465, -164, 36, 110, 211, -205, 437, 121,
	-322, -322, 391, -480, 373, -328, 121, -322, 241, 253,
	399, 136, 408, 112, 256, 154, 460, -323, -323, 461,
	-262, -322, -322, 459, 468, 461, -245, 465, -244, -322,
	-260, -260, 461, 461, 391, 391, 391, 391, 460, 462,
	-260, -249, 459, 459, 465, 461, -339, -340, 117, -322,
	462, -437, 273, 460, 460, 461, 461, 465, 461, 437,
	437, 461, 461, 461, -322, 35, 465, 465, 465, 461,
	465, 465, 465, 461, 461, 154, 461, 461, -295, 285,
	461, 11, 12, 451, 452, 453, 454, 149, 455, 456,
	449, 450, 448, 441, 442, 443, 75, 233, 328, 14,
	15, 16, 200, 176, -323, -323, -323, 461, -326, -327,
	154, 151, 35, -290, -290, -290, 461, 154, -260, 461,
	461, 460, 461, -316, -315, 429, -358, -253, 2, -351,
	-200, -390, -316, -316, -260, -322, 206, 206, -283, 416,
	262, -285, -351, -344, 461, -445, -386, -346, -345, -386,
	-321, -320, 152, 36, 110, 247, 172, -198, -241, -345,
	-345, -390, -346, 461, -254, -353, -425, -245, 462, -390,
	-140, 5, 253, -140, -140, -249, 24, 286, -365, 458,
	459, 8, 8, 460, -384, -384, -249, 154, -387, -310,
	405, 72, 300, 387, -387, -165, 311, -192, -192, -205,
	249, -313, 169, -171, 249, -365, -199, -180, 460, 460,
	211, 211, -192, -199, 169, -192, 169, -199, -199, -452,
	300, 257, -322, 226, 298, 250, -166, 311, -99, -99,
	-99, 460, -456, 416, 111, -205, -220, -205, -209, 311,
	-215, -385, -385, -277, 311, -207, -395, 431, -189, -167,
	-99, -99, -99, 460, -190, -168, 311, -146, 178, 461,
	453, -180, 425, -180, -225, -228, -226, -192, -466, 433,
	431, 124, 124, -241, -219, -205, 458, -149, -395, -205,
	-395, -395, -395, 2, 460, 2, -205, 124, 262, 249,
	-173, 118, -477, 443, -189, -316, -253, -275, -308, 319,
	262, -242, 421, -198, -275, -255, 465, 154, 443, 462,
	-242, 2, -169, -169, -169, -169, -169, -81, -149, 465,
	460, 443, 443, 460, -395, -395, 461, 465, -205, -191,
	182, 182, -197, -181, 461, 465, 462, 460, -149, -96,
	154, -46, 431, 377, 464, 346, 346, -180, -201, -189,
	-205, -202, -220, -303, -322, -348, -205, 464, -322, -322,
	121, 121, -322, -323, -323, -322, 121, 154, 460, -322,
	-332, 30, 30, 461, 465, -318, -322, 461, 424, -245,
	-245, 461, 5, 240, 168, 239, -293, 239, -293, -293,
	8, 453, -390, 461, -330, 119, -322, 385, -390, 453,
	-438, -195, 460, -180, 429, -244, -384, -368, -368, 461,
	-380, -365, -322, -322, -322, -322, -322, -322, -326, -322,
	-380, -365, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, -323, -323, -323, -323, -323, -323, -323, -323, -323,
	-323, 112, 249, 256, -323, -327, -326, -322, -322, -365,
	461, 461, 461, -260, -81, -272, 161, -322, -361, 465,
	-272, -272, 461, -351, -351, 460, -322, 206, 459, 461,
	465, -345, 459, 465, 467, 443, -241, 462, -344, 461,
	465, -307, 35, 461, -390, 265, 5, 8, 458, 459,
	461, -384, 461, 461, -249, -322, 391, 391, 124, 249,
	418, -410, -405, -322, -247, -349, -322, 460, 460, -163,
	116, 349, -458, 2, 124, -169, 124, -169, 435, 460,
	460, 391, 431, -260, -322, -150, 105, -389, -454, 464,
	-454, 464, 391, 391, 282, 431, -260, 391, -149, 154,
	2, 2, 2, 461, 461, 465, -411, 35, 260, -180,
	-205, -207, 35, -64, 431, -360, -386, -176, 2, -298,
	416, -190, -205, 124, -174, 217, -477, -393, -426, -245,
	-275, -267, 250, 79, 461, -316, -269, -253, -322, 2,
	461, -147, -148, -395, -395, -395, -149, -151, -151, -314,
	2, 460, -191, -181, 460, -151, -193, 2, -396, -99,
	266, -205, 453, -281, -233, -232, 280, 256, -233, 263,
	461, -164, -190, -322, -322, 121, 30, 30, -322, -322,
	-332, 461, -322, -322, -260, 459, 5, -322, 461, 461,
	461, -322, 462, -439, -180, -322, 461, 461, 461, 461,
	465, 465, 461, 461, 461, 461, -327, 154, 112, 256,
	460, 461, 461, -329, 164, 51, -351, -329, -329, -283,
	-249, -351, -319, -386, -320, -190, 458, -390, -353, 460,
	462, 459, 2, 458, 461, -192, -192, -313, 124, -412,
	80, -414, 66, 137, 86, 249, 253, 407, 292, 63,
	105, 304, 35, 461, 461, 465, -164, -247, -249, 249,
	370, 105, 249, 105, 98, 402, -192, -199, -249, -249,
	-205, 130, 461, 465, 443, 2, 453, 453, -209, -207,
	-395, 130, 461, -190, -396, -229, 185, -192, -409, -406,
	-407, 292, -413, -415, 137, 292, -99, 2, 460, -227,
	-278, -99, 266, 459, 460, -180, 262, 460, -190, -175,
	216, -477, -393, -172, -301, -299, -306, 460, 262, -99,
	-245, 443, 461, 461, 98, 98, -247, 460, 460, -249,
	98, 461, -47, -48, 182, 80, 284, -202, 377, 182,
	-164, -322, -322, -322, 461, -245, -390, 453, -433, 280,
	461, -322, -322, -323, 154, 460, -332, -434, 430, -322,
	-260, -434, -434, 461, -346, -386, 2, 458, 2, -313,
	-199, -203, -196, -180, 137, 169, 253, 211, 460, -323,
	-205, 460, 2, -468, 107, 186, -312, -469, 85, 371,
	-349, 461, 461, 253, 253, -322, -365, -169, -169, 461,
	461, -322, 391, -389, 84, -387, 2, -454, -322, 391,
	-230, -231, 176, -411, 211, -196, 211, -467, 431, -225,
	-466, -65, -66, 392, -360, -247, -205, -247, 262, -477,
	-393, -173, -275, 113, -249, 80, -301, -328, -149, 460,
	460, 461, -247, -247, 461, 460, -149, 465, 26, 460,
	26, 460, -205, -220, 461, -245, 51, 461, 461, -323,
	-332, 461, -435, -436, -195, -345, 459, 2, -414, -196,
	249, -322, -182, 460, -322, 186, 108, 174, -229, 460,
	304, -188, 66, 460, 460, 460, 443, 154, 460, -466,
	278, 460, 98, 246, 461, 35, -66, 9, 461, -298,
	461, -205, -393, -174, 411, 250, 461, -199, -275, -396,
	-396, -312, 461, 461, -396, -48, -249, -249, -440, 298,
	327, 163, -260, 461, 465, 35, 124, 461, -416, 234,
	-180, 461, 108, 174, -230, -249, -205, -455, 416, -203,
	-235, -234, -232, -237, -236, -232, -260, -387, 84, 278,
	-260, -205, -248, -350, -192, 98, -229, -99, -312, 460,
	-312, 460, -175, 349, -315, 461, 461, -229, -312, 461,
	461, 461, 461, -441, -442, 43, 404, 89, -322, -441,
	-441, -436, -438, 137, -417, -420, -419, 262, 355, 155,
	279, 461, 370, 427, -468, 461, -241, -322, 461, 465,
	421, 461, 465, 421, 461, 154, 461, 460, 461, 465,
	-230, -467, -229, -247, -229, -247, -268, -149, -149, -230,
	-229, -149, -443, 123, -442, 289, 150, 326, 289, 150,
	-443, -443, -196, -419, 262, -420, 262, 411, 109, -416,
	-234, 176, -236, 154, 278, -249, -350, -466, -230, 461,
	-230, 461, -316, -230, 89, 161, 386, 246, 30, -418,
	246, 317, 56, 349, -418, -417, 460, 460, 461, -473,
	429, -312, -473, -312, 326, 270, -442, 22, 253, 105,
	-468, -260, -260, -170, 56, 317, 2, -229, -229, 461,
	461, -230, -230, -230, 391, -473, -473, 460, -260, 461,
	-230,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 366, 367, 369,
	370, 371, 373, 374, 376, 378, 380, 382, 383, 385,
	387, 389, 390, 391, 392, 393, 395, 397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 455, 457,
	0, 923, 925, 927, 929, 25, 26, 0, 0, 190,
	192, 194, 0, 218, 220, 222, 223, 225, -2, 0,
	320, 321, 323, 325, -2, -2, 0, 0, 444, 446,
	0, 0, 0, 466, 467, 0, 1013, -2, 460, 462,
	464, 529, 531, 533, 535, 537, 539, 541, 542, 544,
	546, 548, 550, 552, 554, 556, 558, 560, 562, 564,
	566, 568, 570, 572, 574, 576, 578, -2, -2, -2,
	0, -2, -2, -2, 941, 29, 31, 33, 35, 37,
	39, 41, 61, 274, 275, 277, 279, 281, 284, 285,
	287, 1061, 327, 329, 331, 333, 335, 0, -2, 1073,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1037, 1039, 1041,
	1043, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 368, 372, 375, 377, 379, 381, 384, 386,
	388, 394, 396, 398, 818, 1669, 1683, 1684, 1685, 1688,
	1689, 1690, 1691, 1692, 1693, 2032, 2112, 2113, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 0, 422, 420, 1663, 423, 1865, 425, 427, 314,
	315, 316, 317, 318, 319, 0, 437, 431, 436, 438,
	440, 441, 442, 443, 417, 415, 0, 437, 1715, 435,
	921, 922, 916, 917, 1898, 951, 456, -2, -2, -2,
	2001, -2, 488, -2, 495, 2004, 1900, 500, 0, 502,
	-2, 505, 924, 926, 928, 27, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, -2, -2, -2,
	-2, 0, 0, 1752, 1639, 1685, 1642, 1637, 191, 193,
	195, 196, 0, 0, 0, 0, 0, 0, 219, 221,
	224, 226, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	726, 0, 0, 731, 869, 870, 891, 0, 0, 0,
	0, 322, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 252,
	360, 361, 0, 1062, 0, 0, 0, 0, 171, 162,
	0, 0, 714, 445, 447, 0, 157, 0, 0, 920,
	0, 173, 0, 0, 461, 463, 465, 530, 532, 534,
	536, 538, 540, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, 571, 573, 575,
	577, 579, 580, 0, 0, 0, 0, -2, -2, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 583, 585, 586, 587, 0, 635,
	652, 0, 860, 1063, 953, 931, 944, 953, 933, 934,
	935, 936, 937, 942, 943, 946, 0, 938, 939, 940,
	30, 32, 34, 36, 38, 40, 42, 276, 278, 280,
	282, 286, 288, -2, 1035, 1036, 328, 330, 332, 334,
	336, 448, 0, 450, 0, 584, 1017, 1025, 0, -2,
	0, 1067, 1067, 1067, 0, 0, 1036, 1034, 0, 453,
	454, 509, 510, 1297, 0, 0, 0, 0, 0, 1537,
	1381, 0, 511, -2, 1412, 1414, 1980, 2001, 1536, 1416,
	1417, 1418, 1419, 1420, 0, 0, 1423, 0, 1425, 1426,
	1427, 1428, 0, 1430, 0, 1434, 1435, 1436, 0, 1985,
	1616, 1681, -2, 1202, 1203, 1204, 1205, 1206, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1677, 0, 1503, 1450,
	-2, 1702, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1761, -2, -2, -2, -2, -2,
	-2, -2, 1258, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 2015, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 0, 1969, 1986, 1987, 1992, 1994, 1988, 1977,
	1473, -2, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 1259, -2, 1981,
	1982, 1997, 1998, 2003, 2008, 2009, 1984, 1993, -2, -2,
	1053, 1873, 1056, 818, 1054, 1038, 1040, 0, 1042, 0,
	0, 0, 1047, 1070, 1068, 0, 1103, 1051, 1052, 1062,
	1121, 1144, 0, 1126, 0, 1144, 1170, 0, 1131, 1893,
	1451, 1452, 0, 1685, 1682, -2, 0, 0, 0, 0,
	0, 0, 418, 0, 424, 426, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 458, 459, 0, 483, 0,
	487, 1976, -2, 1720, 1913, -2, 491, 954, 958, 959,
	960, 961, 0, 0, 0, 0, 0, 497, 0, 0,
	484, 485, 503, 506, 0, 51, 0, 1986, 1170, 53,
	0, 1653, 1707, 1708, 1709, 1710, 1711, 2015, 2031, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103,
	2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 55, 0,
	1986, 58, 0, 1986, 0, -2, 62, 0, 1986, 174,
	175, 1698, 1699, 1703, 1704, 1705, 1706, 65, 0, 1659,
	67, 0, 1656, 76, 0, 1986, 0, 1636, -2, 0,
	0, 706, 1633, 1638, 707, 1643, 0, 197, 198, 199,
	200, 201, 1986, 203, 204, 0, 206, 207, 1986, 209,
	210, 0, 212, 227, 228, 0, 230, 0, 1986, 0,
	0, 0, 236, -2, 253, 0, 250, 0, 240, 241,
	243, 244, 245, 246, 247, 0, 0, 0, 875, 292,
	290, 1664, 0, -2, 1986, 863, 866, 1986, 868, 880,
	1667, 0, -2, 0, 1060, 1986, 968, 727, 728, 729,
	730, 0, 311, 0, 981, 0, 983, 0, 1003, 1176,
	1121, 254, 255, 256, 257, 258, 1986, 0, 0, 0,
	263, 0, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 150, 1986, 339, 358, 150, 1986, 342, 150, 1986,
	345, 150, 1986, 348, 1631, 150, 1986, 351, 352, 1986,
	354, 176, 355, 1986, 357, 0, -2, 411, 1671, -2,
	363, 0, -2, 0, 188, 0, 0, 712, 713, 0,
	918, 919, 0, 0, 468, 0, 0, 581, 582, 0,
	0, 592, 593, 594, 595, 1901, 1871, 1777, 599, 0,
	602, -2, 0, 0, 0, 606, 0, 611, 612, 613,
	0, 711, 615, 0, 0, 617, 0, 621, 0, 624,
	0, 626, 0, 628, -2, -2, -2, 639, -2, 0,
	643, 0, 645, 0, 0, 0, 0, 660, 661, 0,
	666, 0, 669, 670, 671, 0, 673, 674, 675, 676,
	0, 678, 679, -2, -2, 683, 685, 0, 692, 0,
	697, 0, 588, 589, 150, 1174, 930, -2, 932, 0,
	948, 1020, -2, 0, 449, 0, 452, 1031, 0, 1027,
	0, 1029, 0, 1018, 1023, 1082, 1083, 0, 0, 0,
	0, 1065, 1066, 0, 0, 0, 1015, 1016, 0, 0,
	0, 0, 1542, 1543, 1544, 1545, 1546, 1547, 1550, 1551,
	1548, 1549, 1552, 1553, 0, 0, 0, 0, 0, 1554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1555, 1556, 1557, 0, 0, 1559, 0, 1561, 0,
	0, 0, 0, 0, 0, 1360, 1362, 1624, 0, 0,
	1558, 1302, 1303, 1304, 1339, 1340, 0, 0, 1413, 1621,
	1620, 1415, 0, 1573, 0, 1422, 0, 1294, 1429, 1650,
	-2, 0, 1537, 1568, 0, 0, 1437, 1438, 1439, 0,
	0, 1573, 0, 0, 1615, 0, 1505, 0, 1238, 0,
	1239, 1240, 0, 1241, 1242, 1255, 1268, 0, 0, 0,
	0, 1272, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 1596, -2, 0, 0, 0, 0, 0, 1055,
	0, 0, 1107, 1625, 1629, 1630, 1107, 1107, 0, 0,
	1574, 1167, 1167, 0, 0, 1163, 1163, 1163, 1161, 1138,
	0, 399, 401, 403, 405, 406, 407, 409, 1144, 0,
	1154, 0, 1144, 1144, 0, -2, 1126, 0, 0, 1154,
	1171, 1172, 0, 0, 0, 0, 0, 0, 1686, 0,
	0, 0, 1673, 0, 0, 0, 429, 439, 1062, 0,
	1576, 1192, 1195, 1196, 1197, 1198, 1201, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, -2, 1256, 1258, 1279, 1245, 1246,
	1247, 1248, 1249, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1251, 0, 1226, 1226, 1226, 1243,
	1244, 1267, 1278, 1270, 1278, 1274, 1193, 1194, 1261, 1262,
	1263, 1264, 0, 433, 0, 0, 0, 0, -2, 493,
	498, 499, 0, 0, 956, 0, 962, 520, 521, 522,
	964, 965, 0, 496, 523, 524, 525, 526, 527, 528,
	0, 835, 0, 837, 1645, 0, 494, 513, 501, 0,
	507, 77, 913, 116, 0, 913, 913, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 101, 112, 89, 90,
	0, 0, 0, 0, 59, 843, 0, 846, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	100, 0, 95, 79, 0, 0, 0, 102, 114, 0,
	141, 143, 0, 0, 1157, 158, 0, 705, 0, 0,
	1686, 1641, 0, 0, 0, 0, 229, 231, 0, 233,
	234, 235, 0, 874, 0, 242, 239, 283, 792, 1986,
	842, 1986, 840, 1668, 0, 0, 0, 309, 304, 0,
	306, 861, 0, 1059, 0, 0, 0, 0, 881, 0,
	1986, 886, 1655, 1694, 1695, 970, 0, 313, 0, 984,
	0, 0, 1177, 0, 1179, 0, 260, 261, 262, 0,
	337, 0, 148, 149, 0, 340, 0, 343, 0, 346,
	0, 0, 349, 0, 0, 0, 0, 1062, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 188, 160,
	188, 188, 1157, 470, 1157, 472, 0, 0, 596, 597,
	598, 600, 601, 603, 604, -2, -2, 693, 663, 0,
	0, 0, 662, 614, 0, 699, 1889, 709, 616, 1752,
	619, 1752, 622, 1752, 625, 627, 630, 655, 638, 642,
	0, 0, 0, 647, 0, 649, 0, 651, 663, 664,
	667, 672, 677, 0, 0, 0, 0, 0, 859, 0,
	947, 1021, 1023, 451, 1024, 0, 1033, 1026, 0, 1030,
	1019, 1080, 1081, 1086, 1087, 1093, 1096, 1097, 1089, 1297,
	1048, 1049, 1050, 1074, 1075, 900, 0, 2112, 1298, 1187,
	1299, 1300, 1652, 0, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, -2, -2, -2, -2, -2, -2,
	-2, -2, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, -2, -2, -2, 1337, 1338, -2, 1560,
	1562, 0, 1624, 0, -2, 0, -2, -2, -2, -2,
	1357, 0, 1359, 1364, 1366, 1368, 0, 0, 0, 0,
	1623, 1378, 1607, 1608, 0, 0, 1539, 1540, 1541, 1363,
	0, 1382, 1622, 1619, 0, 0, 1572, 1073, 1441, 0,
	0, 0, 0, 1448, 0, 1651, 1293, 1280, 1281, 1282,
	1283, 1284, 1285, 1295, 1433, 1570, 0, 1569, 0, 0,
	0, 1580, 0, 1614, 1610, 0, 1674, 1680, 1513, 0,
	0, 0, 0, 1648, 0, 0, 0, 0, 0, 0,
	0, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1485, 0, 1583, -2, -2, -2, -2, -2, -2, -2,
	0, 1487, 0, 1489, 1574, 1593, 0, 0, 1383, 0,
	0, 0, 1537, 0, 1492, 1574, 1601, 0, 0, 0,
	0, 0, 1574, 0, 1606, 0, 1499, 0, 1501, 1057,
	0, 0, 1182, 0, 0, 0, 1628, 1182, 1182, 0,
	1102, 0, 0, 1164, 1165, 1166, 0, 0, 1167, 0,
	1158, 1162, 1159, 1160, 0, 0, 1144, 400, 402, 404,
	408, 410, 1154, 1118, 0, 0, 1654, 1124, 1153, 0,
	818, 1143, 1154, 1154, 0, -2, 1128, 0, 0, 1073,
	-2, 189, 817, 0, 0, 0, 0, 419, 421, 0,
	0, 413, 0, 416, 0, 1183, 1186, 0, 1199, 0,
	0, -2, 0, 0, 0, 0, 0, 486, 0, 955,
	963, 0, 517, 0, 519, 0, 836, 1647, 1646, 0,
	508, 0, 0, 0, 0, 912, 120, 1986, 0, 152,
	0, 0, 786, 1660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	91, 0, 0, 0, 0, 0, 0, 0, 844, 845,
	847, 853, 855, 0, 849, 1649, 0, 850, 0, 852,
	854, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 92, 0, 0, 0, 0, 1635, 179,
	1156, 0, 1634, 1644, 0, 202, 205, 208, 211, 0,
	237, 0, 0, 734, 717, 0, 838, 841, 0, 818,
	873, 1666, 0, 291, 188, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 1986, 972,
	978, 0, 1182, 0, 1001, 986, 0, 0, 0, 1001,
	1005, 1006, 1008, 1009, 0, 0, 1178, 0, 264, 359,
	150, 150, 150, 1632, 150, 150, 177, 353, 356, 362,
	412, 1062, 188, 186, 1850, 184, 181, 183, 0, 0,
	0, 735, 737, 738, 739, 740, 0, 1695, 0, 1806,
	1695, 0, 989, 991, 0, 155, 188, 0, 0, 303,
	469, 474, 590, 0, 632, 657, 605, 607, 608, 609,
	0, 710, 708, 618, 620, 623, 641, 644, 646, 0,
	0, 0, 659, 0, 0, 0, 0, 0, 694, 695,
	696, 698, 1175, 1022, 1032, 1028, 0, 1091, 0, 1090,
	1094, 1095, 0, 1077, 898, 899, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1379, 0, -2, 1358, 1361,
	1365, 1367, 1369, 0, 0, 0, 0, 0, 0, 1563,
	0, 1565, 1380, 1617, 1620, 1535, 0, 0, 1072, 1073,
	1073, 0, 1447, 0, 0, 0, 0, 0, 0, 0,
	1571, 0, 1578, 1579, 0, 1440, 0, 1611, 0, 0,
	0, 1449, 0, 0, 0, 1250, 1224, 0, 1278, 1276,
	1277, 1271, 1278, 1275, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 1472, 1484, 0, 1486, 1488, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1386, 1387, 1388, 1491, 1599, 1600,
	0, 0, 0, 0, 0, 0, 1497, 0, 1605, 1498,
	1500, 1062, 1104, 1099, 1181, 0, 1626, 1157, 1106, 1108,
	1627, 1657, 1099, 1099, 0, 1575, 0, 0, 1148, 0,
	0, 0, 1150, 0, 1139, 0, 1141, 1154, 1123, 0,
	0, 1116, 0, 1112, 1113, 1114, 1115, 818, 1152, 1125,
	1129, 1674, 0, 1173, 0, 1133, 1136, 0, 0, 1687,
	213, 216, 217, 214, 215, 428, 0, 0, 1577, 0,
	1188, 0, 0, 0, 0, 0, 432, 0, 482, -2,
	515, 516, 518, 0, 514, 117, 913, 0, 0, 904,
	0, 122, 1986, 131, 0, 763, 0, 1658, 0, 0,
	0, 0, 915, 0, 1986, 150, 1986, 150, 133, 136,
	0, 140, 138, 0, 0, 754, 78, 913, 81, 85,
	93, 0, 0, 0, 99, 0, 0, 0, 906, 0,
	848, 851, 857, 60, 0, 908, 902, 0, 901, 142,
	83, 87, 94, 0, 910, 80, 0, 188, 0, 159,
	1640, 0, 0, 0, 0, 0, 733, 803, 0, 0,
	0, 0, 0, 0, 297, 293, 0, 302, 308, 307,
	864, -2, 867, 876, 0, 878, 890, 0, 0, 0,
	974, 978, 0, 977, 1060, 1073, 312, 979, 1001, 0,
	0, 0, 988, 985, 982, 1182, 0, 0, 0, 0,
	0, 259, 338, 341, 344, 347, 350, 364, 163, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 0,
	1695, 1695, 0, 1662, 0, 0, 0, 0, 156, 161,
	0, 471, 0, 0, 0, 648, 650, 663, 686, 687,
	749, 0, 749, 0, 0, 1076, 900, 0, 1301, 1342,
	0, 0, -2, 0, 0, 1346, 0, 0, 0, -2,
	0, 0, 0, 1564, 1566, 0, 1619, 1442, 0, 0,
	0, 1446, 1424, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	0, 1431, 1432, 1538, 1581, 1609, 1613, 0, 1675, 1679,
	1511, 1512, 1516, 1665, 0, 0, 0, 1269, 1273, 1453,
	0, 0, 0, 0, 0, 0, 0, 1582, 1592, 1594,
	1384, 1385, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, -2, -2, -2, 1402, 1403, 1404, -2, -2,
	-2, 0, 0, 0, 1595, 1597, 1598, 1602, 1603, 0,
	1494, 1495, 1496, 1604, 0, 1101, 0, 1180, 1105, 0,
	1101, 1101, 1069, 1146, 0, 0, 1169, 0, 1121, 1140,
	0, 1130, 1119, 0, 1120, 0, 1151, 0, 1127, 1132,
	0, 1135, 0, 1442, -2, 430, 414, 0, 0, 1190,
	1200, 0, 1253, 1257, 434, 1155, 0, 0, 0, 0,
	151, 761, 785, 0, 0, 893, 900, 0, 0, 124,
	0, 0, 0, 132, 0, 129, 0, 135, 139, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 103, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	232, 872, 238, 743, 791, 0, 793, 0, 718, 0,
	792, 842, 0, 289, 0, 296, 0, 862, 877, 0,
	0, 0, 0, 0, 976, 978, 0, 969, 970, 1085,
	980, 999, -2, 998, 0, 1073, 1007, 1004, 1010, 1011,
	0, 185, 0, 180, 182, 0, 166, 0, 0, 736,
	741, 0, 0, 0, 0, 0, 990, 992, 0, 172,
	0, 591, 610, 658, 688, 748, 0, 0, 690, 1088,
	1092, 1078, 900, 1344, 1348, 0, 0, 0, 1350, -2,
	0, 1372, -2, -2, 1567, 1618, 1421, 1073, 1443, 1445,
	1296, 1612, 0, 1518, 1515, 0, 1502, 1225, 1463, 1464,
	0, 0, 1467, 1469, 1470, 1471, 1591, 0, 0, 0,
	0, 1493, 1058, 1507, 0, 0, 1109, 1507, 1507, 1147,
	0, 1149, 1144, 1142, 1117, 1110, 0, 1675, 1134, 0,
	0, 1184, 1189, 0, 1252, 118, 119, 121, 0, 762,
	0, 765, 0, 0, 0, 0, 772, 773, 0, 0,
	0, 0, 0, 807, 816, 0, 895, 0, 0, 0,
	126, 145, 0, 0, 914, 0, 150, 150, 0, 0,
	905, 0, 0, 0, 0, 106, 0, 0, 907, 909,
	903, 0, 0, 911, 178, 751, 0, 803, 795, 796,
	797, 0, 802, 804, 0, 0, 722, 719, 734, 717,
	839, 871, 0, 294, 0, 889, 0, 0, 0, 966,
	978, 0, 971, 972, 1001, 1084, 0, 0, 0, 987,
	1085, 0, 187, 188, 0, 0, 0, 0, 0, 0,
	0, 188, 473, 475, 0, 0, 481, 747, 0, 0,
	1079, 1352, -2, -2, 1373, 0, 1676, 1678, 1073, 0,
	1504, 0, 0, -2, 0, 0, 0, 1044, 0, 1100,
	1098, 1045, 1046, 1168, 1154, 0, 1137, 0, 1191, 123,
	0, 766, 767, 1661, 769, 0, 771, 774, 0, 776,
	1697, 0, 780, 787, 808, 0, 743, 0, 813, 814,
	894, 789, 0, 125, 127, 144, 897, 128, 134, 0,
	0, 82, 0, 0, 1746, 109, 107, 105, 84, 0,
	717, 750, 0, 794, 0, 805, 806, 720, 0, 0,
	0, 295, 298, 0, 301, 0, 890, 0, 0, 0,
	973, 974, 310, 0, 0, 0, 1001, 1012, 165, 0,
	0, 816, 0, 0, 784, 0, 170, 0, 477, 0,
	479, 0, 689, 691, 1444, 1522, 0, 1465, 1466, -2,
	0, 1410, 1506, 1508, 0, 1122, 1111, 1185, 764, 768,
	0, 0, 822, 0, 0, 0, 811, 812, 751, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 723, 0, 743, 0, 299, 300, 816, 0,
	816, 0, 975, 976, 0, 994, 995, 997, 1002, 0,
	0, 743, 816, 783, 0, 476, 0, 0, 0, 0,
	0, 0, 1517, 1411, 0, 0, 0, 775, 827, 0,
	0, 0, 809, 810, 807, 0, 818, 130, 0, 896,
	0, 755, 0, 0, 758, 0, 0, 110, 1746, 108,
	0, 0, 0, 799, 801, 724, 751, 722, 743, 0,
	743, 0, 967, 0, 996, 188, 188, 751, 743, 188,
	478, 480, 1514, 1534, 1523, -2, 1949, 1749, 0, 1534,
	1534, 1509, 1510, 0, 777, 823, 824, 0, 819, 820,
	821, 1696, 778, 779, 788, 815, 822, 146, 752, 0,
	0, 753, 0, 0, 113, 0, 115, 0, 798, 0,
	717, 721, 751, 0, 751, 0, 1182, 167, 168, 781,
	751, 169, 1519, 0, 0, 1525, 1526, 1527, 1528, 1529,
	1520, 1521, 770, 825, 0, 826, 0, 0, 0, 827,
	756, 0, 759, 0, 111, 0, 800, 716, 887, 816,
	887, 816, 993, 782, 0, 1531, 1532, 0, 0, 828,
	0, 831, 832, 0, 829, 807, 0, 0, 746, 882,
	0, 743, 884, 743, 1530, 1533, 1524, 830, 833, 834,
	790, 0, 0, 742, 744, 745, 888, 751, 751, 751,
	0, 887, 887, 757, 0, 883, 885, 0, 0, 751,
	760,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 449, 3, 455, 450, 3,
	460, 461, 453, 451, 465, 452, 462, 454, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 468, 3,
	441, 443, 442, 446, 464, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 458, 3, 459, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 466, 448, 467, 444,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 445, 57784, 447,
	57785, 457, 57786, 463, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1080
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1093
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1100
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1114
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1115
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1116
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1117
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1118
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1198
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1209
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1228
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1243
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1255
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1274
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1306
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1310
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1314
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1324
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1330
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1339
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1350
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1354
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1368
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1392
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1403
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1422
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1429
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1437
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1446
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1457
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1476
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1486
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1496
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1505
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1516
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1522
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1530
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1548
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1553
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1564
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1585
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1673
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1683
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1692
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1701
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1713
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1721
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1722
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1726
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1736
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1744
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1748
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1754
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1769
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1809
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1812
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1842
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1903
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1912
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1918
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1923
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1928
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1933
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1942
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1965
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1969
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1977
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2009
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2033
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2039
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2052
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2053
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2054
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2097
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2154
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2162
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2179
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2184
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2196
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2197
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2199
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2200
		{
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2201
		{
			return helpWith(sqllex, "CREATE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "create cast")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "create operator")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create publication")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create rule")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "create server")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2227
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2228
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2231
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2232
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2235
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2236
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "drop server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2263
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2265
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2268
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2306
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2315
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2334
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2338
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2369
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2377
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2397
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2412
		{

			sqlVAL.union.val = nil
		}
	case 310:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2426
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2439
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2440
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2451
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2452
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2453
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2454
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2455
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2466
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "DROP")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2471
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2501
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2542
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2565
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2580
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2588
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2592
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2599
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2604
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2630
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2636
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2647
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "DELETE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2656
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2658
		{
			return helpWith(sqllex, "INSERT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2659
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2673
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "DELETE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "INSERT")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2682
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2691
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2713
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2721
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2729
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2739
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2746
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2762
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2780
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2784
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2787
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2811
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2815
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "GRANT")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2849
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2858
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2868
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2886
		{
			return helpWith(sqllex, "RESET")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2887
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2902
		{
			return helpWith(sqllex, "RESET")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2910
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2913
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "USE")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2932
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2933
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2934
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2938
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "USE")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2971
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3000
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3004
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3008
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3014
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3064
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3089
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3109
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3118
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3137
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3154
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3159
		{
			return unimplemented(sqllex, "set from current")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3160
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3168
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3173
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3180
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3184
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3190
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3201
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3222
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3226
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = tree.Low
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3258
		{
			sqlVAL.union.val = tree.Normal
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.High
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3277
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3281
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3290
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3305
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3307
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3310
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3311
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3327
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3337
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.str = "client_encoding"
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.str = "timezone"
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3367
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3371
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3386
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3402
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3409
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3425
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3432
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3449
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3462
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3481
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3499
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3512
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3520
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3531
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3544
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3546
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3550
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3553
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3561
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3564
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3589
		{
			sqlVAL.union.val = true
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = true
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3593
		{
			sqlVAL.union.val = false
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3610
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3611
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3613
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3620
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3647
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3650
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3652
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3655
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3657
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3661
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3664
		{
			sqlVAL.union.val = true
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = false
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3673
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3676
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3678
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3681
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3709
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3712
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = true
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3716
		{
			sqlVAL.union.val = false
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3723
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3727
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3730
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3737
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3741
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3744
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3751
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3755
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3763
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3768
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3773
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3777
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3789
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3806
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3809
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3817
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3820
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3824
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3828
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3832
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3840
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3848
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3862
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3877
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3882
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3886
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3889
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3893
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3900
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3905
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4025
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4033
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4076
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4094
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4117
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4126
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4129
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4165
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4177
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4190
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4191
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4192
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4196
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4207
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4219
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4220
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4221
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4235
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4236
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4237
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4238
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4239
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4240
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4241
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4242
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4257
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4263
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4269
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4272
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4276
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4292
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4297
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4308
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4315
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4322
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4358
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4368
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4392
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4407
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4475
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4479
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4493
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4514
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4526
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4548
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4559
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4576
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4586
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4610
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4620
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4635
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4642
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4669
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4689
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4695
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4700
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4701
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4702
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4703
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4704
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4705
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4732
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4764
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4835
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4839
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4845
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4864
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4869
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4873
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4880
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4884
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4888
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4889
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4894
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4896
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4899
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4901
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4902
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4904
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4906
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4917
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4925
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4932
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4936
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4940
		{
			sqlVAL.union.val = nil
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4950
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4954
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4957
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4962
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4963
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4971
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4979
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4980
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4983
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4984
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4990
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4992
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4994
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4996
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4998
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5000
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5016
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5030
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5045
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5059
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5073
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5076
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5077
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5081
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5096
		{
			sqlVAL.union.val = false
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5102
		{
			sqlVAL.union.val = true
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5106
		{
			sqlVAL.union.val = false
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5112
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.str = ""
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = tree.Descending
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 901:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5155
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5166
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5172
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5178
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5186
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5192
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5200
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5206
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5214
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5218
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5223
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5224
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5227
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5228
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5239
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5258
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5277
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5278
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5297
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5302
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5315
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5320
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5324
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5329
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5330
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5331
		{
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5339
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5346
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5349
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5350
		{
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.str = ""
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5358
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5366
		{
			sqlVAL.str = ""
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5372
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5376
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5382
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5409
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5411
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5415
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5446
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5480
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.str = ""
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5494
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5498
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.str = ""
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5514
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.str = ""
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5523
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5524
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5536
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5543
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5550
		{
			return helpWith(sqllex, "INSERT")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5568
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5572
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5581
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5626
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5640
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5643
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5644
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5646
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5652
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5657
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5661
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5690
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5706
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5719
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5722
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5775
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5779
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5827
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5830
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5832
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5833
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5836
		{
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5838
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5839
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5844
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5879
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5880
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5881
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5916
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5930
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5942
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5946
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5964
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5986
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6006
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6028
		{
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6029
		{
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6033
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = nil
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6042
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6043
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = true
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = false
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = false
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = true
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6067
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6072
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6073
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6087
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6093
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6107
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6112
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6127
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6156
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6187
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6195
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6201
		{
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6202
		{
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6205
		{
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6206
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6233
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6256
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6259
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6261
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6273
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6276
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6294
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6298
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6303
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6308
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6319
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6331
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6342
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6346
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6350
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6389
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6403
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6438
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6449
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6479
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6501
		{
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6503
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.union.val = nil
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = true
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = false
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6576
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.str = tree.AstFull
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.str = tree.AstRight
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.str = tree.AstInner
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6620
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6621
		{
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.str = tree.AstHash
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.str = ""
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6676
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6688
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6706
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6712
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6720
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6737
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6749
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6762
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6770
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6771
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6789
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6791
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6799
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6811
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6812
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = types.String
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = types.Name
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6863
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6867
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = types.INet
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = types.Oid
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6903
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6934
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6942
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = nil
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = types.Int2
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = types.Int2
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = types.Int4
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = types.Int
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = types.Int
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = types.Int
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = types.Float4
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = types.Float4
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = types.Float
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = types.Float
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7009
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7017
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = types.Bool
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = types.Bool
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = types.RegType
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7066
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = types.Float
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7085
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7091
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7113
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = types.String
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = true
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = false
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = types.Date
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7162
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7167
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7174
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7175
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7177
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7185
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7201
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7210
		{
			sqlVAL.union.val = true
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = false
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = false
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = types.Interval
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = tree.Year
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.Month
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7230
		{
			sqlVAL.union.val = tree.Day
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7234
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7238
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = tree.Month
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = nil
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.Second
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7288
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7335
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7388
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7392
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7520
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7579
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7645
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7667
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7775
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7779
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7787
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7809
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7861
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7866
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7875
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7885
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7889
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7893
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7902
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7926
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7941
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7952
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7953
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7968
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7979
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7995
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8001
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8023
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8073
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8091
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8096
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8101
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8111
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8116
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8121
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8126
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8135
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8136
		{
			return unimplemented(sqllex, "treat")
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8162
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8167
		{
			return unimplemented(sqllex, "within group")
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8168
		{
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8203
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.str = ""
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8305
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8373
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8402
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.Any
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = tree.Some
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.All
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = tree.Div
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8436
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.LT
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = tree.GT
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = tree.LE
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = tree.GE
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = tree.NE
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = tree.Like
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8448
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8449
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8476
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8482
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8515
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8558
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8602
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8636
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8640
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8644
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8684
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8696
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8713
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8719
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8747
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8762
		{
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8763
		{
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8786
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8790
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8794
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8835
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8843
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8879
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8887
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8905
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8909
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8918
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8929
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8938
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8946
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9043
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9050
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9072
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9076
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9080
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9093
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9111
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9124
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9131
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9156
		{
			sqlVAL.str = ""
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9162
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9166
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
