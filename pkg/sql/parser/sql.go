// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}
func (u *sqlSymUnion) typeReference() tree.ResolvableTypeReference {
	return u.val.(tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) typeReferences() []tree.ResolvableTypeReference {
	return u.val.([]tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) alterTypeAddValuePlacement() *tree.AlterTypeAddValuePlacement {
	return u.val.(*tree.AlterTypeAddValuePlacement)
}

//line sql-gen.y:653
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AFTER = lex.AFTER
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const ATTRIBUTE = lex.ATTRIBUTE
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEFORE = lex.BEFORE
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OWNER = lex.OWNER
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEFORE",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10669

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1165,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	199, 989,
	211, 989,
	226, 274,
	320, 274,
	329, 788,
	357, 274,
	366, 788,
	403, 788,
	427, 274,
	452, 788,
	-2, 0,
	-1, 78,
	226, 278,
	-2, 0,
	-1, 79,
	118, 1165,
	205, 1165,
	437, 1165,
	438, 1165,
	-2, 0,
	-1, 91,
	131, 1136,
	148, 1136,
	161, 1136,
	208, 1136,
	238, 1136,
	280, 1136,
	290, 1136,
	432, 1136,
	-2, 1107,
	-1, 123,
	138, 697,
	225, 697,
	323, 677,
	371, 677,
	420, 697,
	-2, 0,
	-1, 124,
	4, 1167,
	21, 1167,
	22, 1167,
	23, 1167,
	24, 1167,
	25, 1167,
	26, 1167,
	28, 1167,
	29, 1167,
	35, 1167,
	40, 1167,
	41, 1167,
	42, 1167,
	43, 1167,
	44, 1167,
	45, 1167,
	46, 1167,
	47, 1167,
	48, 1167,
	50, 1167,
	51, 1167,
	52, 1167,
	54, 1167,
	55, 1167,
	56, 1167,
	57, 1167,
	58, 1167,
	62, 1167,
	63, 1167,
	64, 1167,
	65, 1167,
	67, 1167,
	68, 1167,
	69, 1167,
	73, 1167,
	74, 1167,
	75, 1167,
	76, 1167,
	77, 1167,
	78, 1167,
	79, 1167,
	82, 1167,
	83, 1167,
	84, 1167,
	85, 1167,
	87, 1167,
	89, 1167,
	90, 1167,
	91, 1167,
	93, 1167,
	95, 1167,
	96, 1167,
	104, 1167,
	105, 1167,
	106, 1167,
	107, 1167,
	109, 1167,
	110, 1167,
	111, 1167,
	113, 1167,
	114, 1167,
	115, 1167,
	117, 1167,
	118, 1167,
	120, 1167,
	123, 1167,
	124, 1167,
	125, 1167,
	127, 1167,
	129, 1167,
	130, 1167,
	132, 1167,
	133, 1167,
	134, 1167,
	135, 1167,
	136, 1167,
	137, 1167,
	138, 1167,
	139, 1167,
	140, 1167,
	141, 1167,
	142, 1167,
	143, 1167,
	144, 1167,
	145, 1167,
	147, 1167,
	153, 1167,
	154, 1167,
	155, 1167,
	156, 1167,
	160, 1167,
	162, 1167,
	166, 1167,
	167, 1167,
	168, 1167,
	169, 1167,
	170, 1167,
	171, 1167,
	173, 1167,
	174, 1167,
	176, 1167,
	177, 1167,
	179, 1167,
	180, 1167,
	181, 1167,
	182, 1167,
	183, 1167,
	184, 1167,
	185, 1167,
	186, 1167,
	187, 1167,
	189, 1167,
	190, 1167,
	192, 1167,
	193, 1167,
	194, 1167,
	195, 1167,
	199, 1167,
	200, 1167,
	201, 1167,
	202, 1167,
	205, 1167,
	206, 1167,
	207, 1167,
	209, 1167,
	211, 1167,
	213, 1167,
	215, 1167,
	216, 1167,
	217, 1167,
	219, 1167,
	223, 1167,
	224, 1167,
	225, 1167,
	226, 1167,
	227, 1167,
	229, 1167,
	230, 1167,
	232, 1167,
	233, 1167,
	235, 1167,
	236, 1167,
	239, 1167,
	240, 1167,
	241, 1167,
	244, 1167,
	245, 1167,
	246, 1167,
	247, 1167,
	249, 1167,
	250, 1167,
	251, 1167,
	252, 1167,
	253, 1167,
	254, 1167,
	255, 1167,
	256, 1167,
	257, 1167,
	258, 1167,
	259, 1167,
	261, 1167,
	263, 1167,
	264, 1167,
	265, 1167,
	266, 1167,
	267, 1167,
	269, 1167,
	271, 1167,
	273, 1167,
	275, 1167,
	276, 1167,
	277, 1167,
	278, 1167,
	279, 1167,
	282, 1167,
	285, 1167,
	286, 1167,
	287, 1167,
	288, 1167,
	291, 1167,
	292, 1167,
	293, 1167,
	295, 1167,
	297, 1167,
	298, 1167,
	299, 1167,
	300, 1167,
	301, 1167,
	302, 1167,
	303, 1167,
	304, 1167,
	305, 1167,
	306, 1167,
	307, 1167,
	309, 1167,
	310, 1167,
	311, 1167,
	312, 1167,
	313, 1167,
	314, 1167,
	315, 1167,
	316, 1167,
	317, 1167,
	319, 1167,
	321, 1167,
	322, 1167,
	323, 1167,
	324, 1167,
	325, 1167,
	326, 1167,
	327, 1167,
	328, 1167,
	329, 1167,
	330, 1167,
	337, 1167,
	339, 1167,
	340, 1167,
	341, 1167,
	342, 1167,
	343, 1167,
	344, 1167,
	345, 1167,
	346, 1167,
	348, 1167,
	350, 1167,
	351, 1167,
	352, 1167,
	353, 1167,
	354, 1167,
	355, 1167,
	357, 1167,
	358, 1167,
	359, 1167,
	360, 1167,
	361, 1167,
	362, 1167,
	363, 1167,
	364, 1167,
	366, 1167,
	367, 1167,
	368, 1167,
	369, 1167,
	370, 1167,
	371, 1167,
	373, 1167,
	374, 1167,
	375, 1167,
	376, 1167,
	377, 1167,
	379, 1167,
	380, 1167,
	381, 1167,
	383, 1167,
	385, 1167,
	386, 1167,
	387, 1167,
	388, 1167,
	389, 1167,
	390, 1167,
	391, 1167,
	392, 1167,
	393, 1167,
	394, 1167,
	395, 1167,
	396, 1167,
	397, 1167,
	399, 1167,
	400, 1167,
	402, 1167,
	404, 1167,
	405, 1167,
	406, 1167,
	407, 1167,
	408, 1167,
	409, 1167,
	410, 1167,
	412, 1167,
	413, 1167,
	414, 1167,
	415, 1167,
	416, 1167,
	418, 1167,
	420, 1167,
	421, 1167,
	422, 1167,
	423, 1167,
	424, 1167,
	426, 1167,
	427, 1167,
	428, 1167,
	430, 1167,
	431, 1167,
	434, 1167,
	435, 1167,
	436, 1167,
	437, 1167,
	438, 1167,
	439, 1167,
	440, 1167,
	442, 1167,
	445, 1167,
	446, 1167,
	447, 1167,
	448, 1167,
	449, 1167,
	450, 1167,
	452, 1167,
	453, 1167,
	454, 1167,
	459, 1167,
	460, 1167,
	461, 1167,
	462, 1167,
	463, 1167,
	464, 1167,
	-2, 0,
	-1, 125,
	1, 1041,
	215, 1041,
	319, 1041,
	327, 1041,
	467, 1041,
	490, 1041,
	-2, 0,
	-1, 127,
	1, 1041,
	490, 1041,
	-2, 0,
	-1, 128,
	1, 1041,
	490, 1041,
	-2, 0,
	-1, 129,
	1, 1041,
	417, 1041,
	490, 1041,
	-2, 0,
	-1, 156,
	131, 1135,
	148, 1135,
	161, 1135,
	208, 1135,
	238, 1135,
	280, 1135,
	290, 1135,
	432, 1135,
	-2, 1110,
	-1, 189,
	4, 1174,
	5, 1174,
	6, 1174,
	7, 1174,
	8, 1174,
	9, 1174,
	10, 1174,
	21, 1174,
	22, 1174,
	23, 1174,
	24, 1174,
	25, 1174,
	26, 1174,
	28, 1174,
	29, 1174,
	35, 1174,
	36, 1174,
	40, 1174,
	41, 1174,
	42, 1174,
	43, 1174,
	44, 1174,
	45, 1174,
	46, 1174,
	47, 1174,
	48, 1174,
	50, 1174,
	51, 1174,
	52, 1174,
	54, 1174,
	55, 1174,
	56, 1174,
	57, 1174,
	58, 1174,
	59, 1174,
	60, 1174,
	61, 1174,
	62, 1174,
	63, 1174,
	64, 1174,
	65, 1174,
	67, 1174,
	68, 1174,
	69, 1174,
	71, 1174,
	73, 1174,
	74, 1174,
	75, 1174,
	76, 1174,
	77, 1174,
	78, 1174,
	79, 1174,
	82, 1174,
	83, 1174,
	84, 1174,
	85, 1174,
	87, 1174,
	89, 1174,
	90, 1174,
	91, 1174,
	93, 1174,
	94, 1174,
	95, 1174,
	96, 1174,
	97, 1174,
	98, 1174,
	99, 1174,
	100, 1174,
	101, 1174,
	102, 1174,
	103, 1174,
	104, 1174,
	105, 1174,
	106, 1174,
	107, 1174,
	108, 1174,
	109, 1174,
	110, 1174,
	111, 1174,
	112, 1174,
	113, 1174,
	114, 1174,
	115, 1174,
	117, 1174,
	118, 1174,
	120, 1174,
	123, 1174,
	124, 1174,
	125, 1174,
	127, 1174,
	129, 1174,
	130, 1174,
	132, 1174,
	133, 1174,
	134, 1174,
	135, 1174,
	136, 1174,
	137, 1174,
	138, 1174,
	139, 1174,
	140, 1174,
	141, 1174,
	142, 1174,
	143, 1174,
	144, 1174,
	145, 1174,
	146, 1174,
	147, 1174,
	153, 1174,
	154, 1174,
	155, 1174,
	156, 1174,
	160, 1174,
	162, 1174,
	165, 1174,
	166, 1174,
	167, 1174,
	168, 1174,
	169, 1174,
	170, 1174,
	171, 1174,
	173, 1174,
	174, 1174,
	176, 1174,
	177, 1174,
	179, 1174,
	180, 1174,
	181, 1174,
	182, 1174,
	183, 1174,
	184, 1174,
	185, 1174,
	186, 1174,
	187, 1174,
	188, 1174,
	189, 1174,
	190, 1174,
	192, 1174,
	193, 1174,
	194, 1174,
	195, 1174,
	199, 1174,
	200, 1174,
	201, 1174,
	202, 1174,
	204, 1174,
	205, 1174,
	206, 1174,
	207, 1174,
	209, 1174,
	211, 1174,
	212, 1174,
	213, 1174,
	214, 1174,
	215, 1174,
	216, 1174,
	217, 1174,
	218, 1174,
	219, 1174,
	223, 1174,
	224, 1174,
	225, 1174,
	226, 1174,
	227, 1174,
	229, 1174,
	230, 1174,
	232, 1174,
	233, 1174,
	234, 1174,
	235, 1174,
	236, 1174,
	237, 1174,
	239, 1174,
	240, 1174,
	241, 1174,
	242, 1174,
	243, 1174,
	244, 1174,
	245, 1174,
	246, 1174,
	247, 1174,
	249, 1174,
	250, 1174,
	251, 1174,
	252, 1174,
	253, 1174,
	254, 1174,
	255, 1174,
	256, 1174,
	257, 1174,
	258, 1174,
	259, 1174,
	261, 1174,
	262, 1174,
	263, 1174,
	264, 1174,
	265, 1174,
	266, 1174,
	267, 1174,
	268, 1174,
	269, 1174,
	270, 1174,
	271, 1174,
	272, 1174,
	273, 1174,
	274, 1174,
	275, 1174,
	276, 1174,
	277, 1174,
	278, 1174,
	279, 1174,
	282, 1174,
	286, 1174,
	287, 1174,
	288, 1174,
	291, 1174,
	292, 1174,
	293, 1174,
	294, 1174,
	295, 1174,
	296, 1174,
	297, 1174,
	298, 1174,
	299, 1174,
	300, 1174,
	301, 1174,
	302, 1174,
	303, 1174,
	304, 1174,
	305, 1174,
	306, 1174,
	307, 1174,
	309, 1174,
	310, 1174,
	311, 1174,
	312, 1174,
	313, 1174,
	314, 1174,
	315, 1174,
	316, 1174,
	317, 1174,
	319, 1174,
	321, 1174,
	322, 1174,
	323, 1174,
	324, 1174,
	325, 1174,
	326, 1174,
	327, 1174,
	328, 1174,
	329, 1174,
	330, 1174,
	337, 1174,
	339, 1174,
	340, 1174,
	341, 1174,
	342, 1174,
	343, 1174,
	344, 1174,
	345, 1174,
	346, 1174,
	348, 1174,
	349, 1174,
	350, 1174,
	351, 1174,
	352, 1174,
	353, 1174,
	354, 1174,
	355, 1174,
	357, 1174,
	358, 1174,
	359, 1174,
	360, 1174,
	361, 1174,
	362, 1174,
	363, 1174,
	364, 1174,
	366, 1174,
	367, 1174,
	368, 1174,
	369, 1174,
	370, 1174,
	371, 1174,
	372, 1174,
	373, 1174,
	374, 1174,
	375, 1174,
	376, 1174,
	377, 1174,
	378, 1174,
	379, 1174,
	380, 1174,
	381, 1174,
	383, 1174,
	385, 1174,
	386, 1174,
	387, 1174,
	388, 1174,
	389, 1174,
	390, 1174,
	391, 1174,
	392, 1174,
	393, 1174,
	394, 1174,
	395, 1174,
	396, 1174,
	397, 1174,
	399, 1174,
	400, 1174,
	401, 1174,
	402, 1174,
	404, 1174,
	405, 1174,
	406, 1174,
	407, 1174,
	408, 1174,
	409, 1174,
	410, 1174,
	412, 1174,
	413, 1174,
	414, 1174,
	415, 1174,
	416, 1174,
	418, 1174,
	420, 1174,
	421, 1174,
	422, 1174,
	423, 1174,
	424, 1174,
	425, 1174,
	426, 1174,
	427, 1174,
	428, 1174,
	430, 1174,
	431, 1174,
	433, 1174,
	434, 1174,
	435, 1174,
	436, 1174,
	437, 1174,
	438, 1174,
	439, 1174,
	440, 1174,
	441, 1174,
	442, 1174,
	445, 1174,
	446, 1174,
	447, 1174,
	448, 1174,
	449, 1174,
	450, 1174,
	452, 1174,
	453, 1174,
	454, 1174,
	459, 1174,
	460, 1174,
	461, 1174,
	462, 1174,
	463, 1174,
	464, 1174,
	465, 1174,
	471, 1174,
	478, 1174,
	479, 1174,
	480, 1174,
	487, 1174,
	491, 1174,
	-2, 0,
	-1, 572,
	164, 1880,
	417, 1880,
	470, 1880,
	489, 1880,
	-2, 0,
	-1, 573,
	164, 1959,
	417, 1959,
	470, 1959,
	489, 1959,
	-2, 0,
	-1, 574,
	164, 1868,
	417, 1868,
	470, 1868,
	489, 1868,
	-2, 0,
	-1, 576,
	164, 2049,
	417, 2049,
	470, 2049,
	489, 2049,
	-2, 0,
	-1, 578,
	164, 2078,
	417, 2078,
	470, 2078,
	489, 2078,
	-2, 0,
	-1, 585,
	164, 1974,
	417, 1974,
	470, 1974,
	489, 1974,
	-2, 535,
	-1, 614,
	489, 1821,
	492, 1821,
	-2, 750,
	-1, 615,
	489, 1823,
	492, 1823,
	-2, 751,
	-1, 616,
	489, 1822,
	492, 1822,
	-2, 752,
	-1, 617,
	492, 1756,
	-2, 753,
	-1, 659,
	452, 966,
	-2, 789,
	-1, 697,
	4, 987,
	21, 987,
	22, 987,
	23, 987,
	24, 987,
	25, 987,
	26, 987,
	28, 987,
	29, 987,
	35, 987,
	40, 987,
	41, 987,
	42, 987,
	43, 987,
	44, 987,
	45, 987,
	46, 987,
	47, 987,
	48, 987,
	50, 987,
	51, 987,
	52, 987,
	54, 987,
	55, 987,
	56, 987,
	57, 987,
	58, 987,
	62, 987,
	63, 987,
	64, 987,
	65, 987,
	67, 987,
	68, 987,
	69, 987,
	73, 987,
	74, 987,
	75, 987,
	76, 987,
	77, 987,
	78, 987,
	79, 987,
	82, 987,
	83, 987,
	84, 987,
	85, 987,
	87, 987,
	89, 987,
	90, 987,
	91, 987,
	93, 987,
	95, 987,
	96, 987,
	104, 987,
	105, 987,
	106, 987,
	107, 987,
	109, 987,
	110, 987,
	111, 987,
	113, 987,
	114, 987,
	115, 987,
	117, 987,
	118, 987,
	120, 987,
	123, 987,
	124, 987,
	125, 987,
	127, 987,
	129, 987,
	130, 987,
	132, 987,
	133, 987,
	134, 987,
	135, 987,
	136, 987,
	137, 987,
	138, 987,
	139, 987,
	140, 987,
	141, 987,
	142, 987,
	143, 987,
	144, 987,
	145, 987,
	147, 987,
	153, 987,
	154, 987,
	155, 987,
	156, 987,
	160, 987,
	162, 987,
	166, 987,
	167, 987,
	168, 987,
	169, 987,
	170, 987,
	171, 987,
	173, 987,
	174, 987,
	176, 987,
	177, 987,
	179, 987,
	180, 987,
	181, 987,
	182, 987,
	183, 987,
	184, 987,
	185, 987,
	186, 987,
	187, 987,
	189, 987,
	190, 987,
	192, 987,
	193, 987,
	194, 987,
	195, 987,
	199, 987,
	200, 987,
	201, 987,
	202, 987,
	205, 987,
	206, 987,
	207, 987,
	209, 987,
	211, 987,
	213, 987,
	215, 987,
	216, 987,
	217, 987,
	219, 987,
	223, 987,
	224, 987,
	225, 987,
	226, 987,
	227, 987,
	229, 987,
	230, 987,
	232, 987,
	233, 987,
	235, 987,
	236, 987,
	239, 987,
	240, 987,
	241, 987,
	244, 987,
	245, 987,
	246, 987,
	247, 987,
	249, 987,
	250, 987,
	251, 987,
	252, 987,
	253, 987,
	254, 987,
	255, 987,
	256, 987,
	257, 987,
	258, 987,
	259, 987,
	261, 987,
	263, 987,
	264, 987,
	265, 987,
	266, 987,
	267, 987,
	269, 987,
	271, 987,
	273, 987,
	275, 987,
	276, 987,
	277, 987,
	278, 987,
	279, 987,
	282, 987,
	286, 987,
	287, 987,
	288, 987,
	291, 987,
	292, 987,
	293, 987,
	295, 987,
	297, 987,
	298, 987,
	299, 987,
	300, 987,
	301, 987,
	302, 987,
	303, 987,
	304, 987,
	305, 987,
	306, 987,
	307, 987,
	309, 987,
	310, 987,
	311, 987,
	312, 987,
	313, 987,
	314, 987,
	315, 987,
	316, 987,
	317, 987,
	319, 987,
	321, 987,
	322, 987,
	323, 987,
	324, 987,
	325, 987,
	326, 987,
	327, 987,
	328, 987,
	329, 987,
	330, 987,
	337, 987,
	339, 987,
	340, 987,
	341, 987,
	342, 987,
	343, 987,
	344, 987,
	345, 987,
	346, 987,
	348, 987,
	350, 987,
	351, 987,
	352, 987,
	353, 987,
	354, 987,
	355, 987,
	357, 987,
	358, 987,
	359, 987,
	360, 987,
	361, 987,
	362, 987,
	363, 987,
	364, 987,
	366, 987,
	367, 987,
	368, 987,
	369, 987,
	370, 987,
	371, 987,
	373, 987,
	374, 987,
	375, 987,
	376, 987,
	377, 987,
	379, 987,
	380, 987,
	381, 987,
	383, 987,
	385, 987,
	386, 987,
	387, 987,
	388, 987,
	389, 987,
	390, 987,
	391, 987,
	392, 987,
	393, 987,
	394, 987,
	395, 987,
	396, 987,
	397, 987,
	399, 987,
	400, 987,
	402, 987,
	404, 987,
	405, 987,
	406, 987,
	407, 987,
	408, 987,
	409, 987,
	410, 987,
	412, 987,
	413, 987,
	414, 987,
	415, 987,
	416, 987,
	418, 987,
	420, 987,
	421, 987,
	422, 987,
	423, 987,
	424, 987,
	426, 987,
	427, 987,
	428, 987,
	430, 987,
	431, 987,
	434, 987,
	435, 987,
	436, 987,
	437, 987,
	438, 987,
	439, 987,
	440, 987,
	442, 987,
	445, 987,
	446, 987,
	447, 987,
	448, 987,
	449, 987,
	450, 987,
	452, 987,
	453, 987,
	454, 987,
	459, 987,
	460, 987,
	461, 987,
	462, 987,
	463, 987,
	464, 987,
	-2, 0,
	-1, 762,
	323, 678,
	371, 678,
	-2, 0,
	-1, 763,
	323, 677,
	371, 677,
	-2, 625,
	-1, 767,
	1, 707,
	486, 707,
	488, 707,
	490, 707,
	-2, 0,
	-1, 768,
	1, 749,
	161, 749,
	486, 749,
	488, 749,
	490, 749,
	-2, 0,
	-1, 776,
	1, 681,
	486, 681,
	488, 681,
	490, 681,
	-2, 0,
	-1, 779,
	1, 707,
	486, 707,
	488, 707,
	490, 707,
	-2, 0,
	-1, 780,
	1, 709,
	486, 709,
	488, 709,
	490, 709,
	-2, 0,
	-1, 781,
	1, 712,
	486, 712,
	488, 712,
	490, 712,
	-2, 0,
	-1, 786,
	1, 728,
	486, 728,
	488, 728,
	490, 728,
	-2, 0,
	-1, 787,
	1, 730,
	486, 730,
	488, 730,
	490, 730,
	-2, 0,
	-1, 832,
	148, 1176,
	161, 1176,
	238, 1176,
	280, 1176,
	-2, 1114,
	-1, 846,
	148, 1175,
	161, 1175,
	238, 1175,
	280, 1175,
	-2, 1111,
	-1, 872,
	489, 1820,
	-2, 543,
	-1, 900,
	5, 1812,
	487, 1810,
	-2, 1801,
	-1, 908,
	5, 1833,
	487, 1830,
	-2, 1821,
	-1, 909,
	5, 1834,
	487, 1831,
	-2, 1822,
	-1, 917,
	489, 1818,
	-2, 1800,
	-1, 918,
	487, 2156,
	-2, 1819,
	-1, 941,
	487, 2155,
	-2, 1835,
	-1, 942,
	5, 1340,
	-2, 2126,
	-1, 943,
	5, 1341,
	-2, 2127,
	-1, 944,
	5, 1342,
	-2, 2141,
	-1, 945,
	5, 1343,
	-2, 2106,
	-1, 946,
	5, 1344,
	-2, 2139,
	-1, 947,
	5, 1352,
	-2, 2118,
	-1, 948,
	5, 1339,
	-2, 2114,
	-1, 949,
	5, 1339,
	-2, 2113,
	-1, 950,
	5, 1339,
	-2, 2132,
	-1, 951,
	5, 1350,
	-2, 2108,
	-1, 952,
	5, 1355,
	-2, 2107,
	-1, 953,
	5, 1357,
	-2, 2151,
	-1, 956,
	5, 1379,
	-2, 2144,
	-1, 957,
	5, 1371,
	-2, 2145,
	-1, 958,
	5, 1379,
	-2, 2146,
	-1, 959,
	5, 1375,
	-2, 2147,
	-1, 960,
	5, 1326,
	-2, 2119,
	-1, 961,
	5, 1327,
	-2, 2120,
	-1, 988,
	5, 1362,
	-2, 2152,
	-1, 989,
	5, 1363,
	-2, 2142,
	-1, 990,
	5, 1364,
	453, 1364,
	-2, 2109,
	-1, 991,
	5, 1365,
	453, 1365,
	-2, 2110,
	-1, 1028,
	487, 1830,
	-2, 1821,
	-1, 1029,
	487, 1831,
	-2, 1822,
	-1, 1058,
	164, 2078,
	417, 2078,
	470, 2078,
	489, 2078,
	-2, 0,
	-1, 1061,
	1, 521,
	490, 521,
	-2, 1049,
	-1, 1186,
	339, 1796,
	480, 1796,
	-2, 1794,
	-1, 1198,
	491, 1796,
	-2, 1797,
	-1, 1202,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1163,
	-1, 1250,
	329, 788,
	452, 788,
	-2, 273,
	-1, 1273,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1163,
	-1, 1279,
	4, 987,
	21, 987,
	22, 987,
	23, 987,
	24, 987,
	25, 987,
	26, 987,
	28, 987,
	29, 987,
	35, 987,
	40, 987,
	41, 987,
	42, 987,
	43, 987,
	44, 987,
	45, 987,
	46, 987,
	47, 987,
	48, 987,
	50, 987,
	51, 987,
	52, 987,
	54, 987,
	55, 987,
	56, 987,
	57, 987,
	58, 987,
	62, 987,
	63, 987,
	64, 987,
	65, 987,
	67, 987,
	68, 987,
	69, 987,
	73, 987,
	74, 987,
	75, 987,
	76, 987,
	77, 987,
	78, 987,
	79, 987,
	82, 987,
	83, 987,
	84, 987,
	85, 987,
	87, 987,
	89, 987,
	90, 987,
	91, 987,
	93, 987,
	95, 987,
	96, 987,
	104, 987,
	105, 987,
	106, 987,
	107, 987,
	109, 987,
	110, 987,
	111, 987,
	113, 987,
	114, 987,
	115, 987,
	117, 987,
	118, 987,
	120, 987,
	123, 987,
	124, 987,
	125, 987,
	127, 987,
	129, 987,
	130, 987,
	132, 987,
	133, 987,
	134, 987,
	135, 987,
	136, 987,
	137, 987,
	138, 987,
	139, 987,
	140, 987,
	141, 987,
	142, 987,
	143, 987,
	144, 987,
	145, 987,
	153, 987,
	154, 987,
	155, 987,
	156, 987,
	160, 987,
	162, 987,
	166, 987,
	167, 987,
	168, 987,
	169, 987,
	170, 987,
	171, 987,
	173, 987,
	174, 987,
	176, 987,
	177, 987,
	179, 987,
	180, 987,
	181, 987,
	182, 987,
	183, 987,
	184, 987,
	185, 987,
	186, 987,
	187, 987,
	189, 987,
	190, 987,
	192, 987,
	193, 987,
	194, 987,
	195, 987,
	200, 987,
	201, 987,
	202, 987,
	205, 987,
	206, 987,
	207, 987,
	209, 987,
	211, 987,
	213, 987,
	215, 987,
	216, 987,
	217, 987,
	219, 987,
	223, 987,
	224, 987,
	225, 987,
	226, 987,
	227, 987,
	229, 987,
	230, 987,
	232, 987,
	233, 987,
	235, 987,
	236, 987,
	239, 987,
	240, 987,
	241, 987,
	244, 987,
	245, 987,
	246, 987,
	247, 987,
	249, 987,
	250, 987,
	251, 987,
	252, 987,
	253, 987,
	254, 987,
	255, 987,
	256, 987,
	257, 987,
	258, 987,
	259, 987,
	261, 987,
	263, 987,
	264, 987,
	265, 987,
	266, 987,
	267, 987,
	269, 987,
	273, 987,
	275, 987,
	276, 987,
	277, 987,
	278, 987,
	279, 987,
	282, 987,
	284, 987,
	286, 987,
	287, 987,
	288, 987,
	291, 987,
	292, 987,
	293, 987,
	295, 987,
	297, 987,
	298, 987,
	299, 987,
	300, 987,
	301, 987,
	302, 987,
	303, 987,
	304, 987,
	305, 987,
	306, 987,
	307, 987,
	309, 987,
	310, 987,
	311, 987,
	312, 987,
	313, 987,
	314, 987,
	315, 987,
	316, 987,
	317, 987,
	319, 987,
	321, 987,
	322, 987,
	323, 987,
	324, 987,
	325, 987,
	326, 987,
	327, 987,
	328, 987,
	329, 987,
	330, 987,
	337, 987,
	339, 987,
	340, 987,
	341, 987,
	342, 987,
	343, 987,
	344, 987,
	345, 987,
	346, 987,
	348, 987,
	350, 987,
	351, 987,
	352, 987,
	353, 987,
	354, 987,
	355, 987,
	357, 987,
	358, 987,
	359, 987,
	360, 987,
	361, 987,
	362, 987,
	363, 987,
	364, 987,
	366, 987,
	367, 987,
	368, 987,
	369, 987,
	370, 987,
	371, 987,
	373, 987,
	374, 987,
	375, 987,
	376, 987,
	377, 987,
	379, 987,
	380, 987,
	381, 987,
	383, 987,
	385, 987,
	386, 987,
	387, 987,
	388, 987,
	389, 987,
	390, 987,
	391, 987,
	392, 987,
	393, 987,
	394, 987,
	395, 987,
	396, 987,
	397, 987,
	399, 987,
	400, 987,
	402, 987,
	404, 987,
	405, 987,
	406, 987,
	407, 987,
	408, 987,
	409, 987,
	410, 987,
	412, 987,
	413, 987,
	414, 987,
	415, 987,
	416, 987,
	418, 987,
	420, 987,
	421, 987,
	422, 987,
	423, 987,
	424, 987,
	426, 987,
	427, 987,
	428, 987,
	430, 987,
	431, 987,
	434, 987,
	435, 987,
	436, 987,
	437, 987,
	438, 987,
	439, 987,
	440, 987,
	442, 987,
	445, 987,
	446, 987,
	447, 987,
	448, 987,
	449, 987,
	450, 987,
	452, 987,
	453, 987,
	454, 987,
	459, 987,
	460, 987,
	461, 987,
	462, 987,
	463, 987,
	464, 987,
	-2, 0,
	-1, 1344,
	1, 396,
	486, 396,
	488, 396,
	490, 396,
	-2, 1134,
	-1, 1347,
	4, 2150,
	11, 2150,
	12, 2150,
	14, 2150,
	15, 2150,
	16, 2150,
	17, 2150,
	18, 2150,
	19, 2150,
	21, 2150,
	22, 2150,
	23, 2150,
	24, 2150,
	25, 2150,
	26, 2150,
	28, 2150,
	29, 2150,
	32, 2150,
	33, 2150,
	35, 2150,
	37, 2150,
	40, 2150,
	41, 2150,
	42, 2150,
	43, 2150,
	44, 2150,
	45, 2150,
	46, 2150,
	47, 2150,
	48, 2150,
	50, 2150,
	51, 2150,
	52, 2150,
	54, 2150,
	55, 2150,
	56, 2150,
	57, 2150,
	58, 2150,
	62, 2150,
	63, 2150,
	64, 2150,
	65, 2150,
	67, 2150,
	68, 2150,
	69, 2150,
	70, 2150,
	73, 2150,
	74, 2150,
	75, 2150,
	76, 2150,
	77, 2150,
	78, 2150,
	79, 2150,
	80, 2150,
	82, 2150,
	83, 2150,
	84, 2150,
	85, 2150,
	87, 2150,
	88, 2150,
	89, 2150,
	90, 2150,
	91, 2150,
	93, 2150,
	94, 2150,
	95, 2150,
	96, 2150,
	104, 2150,
	105, 2150,
	106, 2150,
	107, 2150,
	109, 2150,
	110, 2150,
	111, 2150,
	113, 2150,
	114, 2150,
	115, 2150,
	117, 2150,
	118, 2150,
	120, 2150,
	123, 2150,
	124, 2150,
	125, 2150,
	127, 2150,
	129, 2150,
	130, 2150,
	132, 2150,
	133, 2150,
	134, 2150,
	135, 2150,
	136, 2150,
	137, 2150,
	138, 2150,
	139, 2150,
	140, 2150,
	141, 2150,
	142, 2150,
	143, 2150,
	144, 2150,
	145, 2150,
	149, 2150,
	150, 2150,
	151, 2150,
	152, 2150,
	153, 2150,
	154, 2150,
	155, 2150,
	156, 2150,
	159, 2150,
	160, 2150,
	162, 2150,
	165, 2150,
	166, 2150,
	167, 2150,
	168, 2150,
	169, 2150,
	170, 2150,
	171, 2150,
	173, 2150,
	174, 2150,
	176, 2150,
	177, 2150,
	179, 2150,
	180, 2150,
	181, 2150,
	182, 2150,
	183, 2150,
	184, 2150,
	185, 2150,
	186, 2150,
	187, 2150,
	188, 2150,
	189, 2150,
	190, 2150,
	191, 2150,
	192, 2150,
	193, 2150,
	194, 2150,
	195, 2150,
	197, 2150,
	198, 2150,
	200, 2150,
	201, 2150,
	202, 2150,
	204, 2150,
	205, 2150,
	206, 2150,
	207, 2150,
	209, 2150,
	211, 2150,
	212, 2150,
	213, 2150,
	214, 2150,
	215, 2150,
	216, 2150,
	217, 2150,
	218, 2150,
	219, 2150,
	221, 2150,
	222, 2150,
	223, 2150,
	224, 2150,
	225, 2150,
	226, 2150,
	227, 2150,
	229, 2150,
	230, 2150,
	232, 2150,
	233, 2150,
	234, 2150,
	235, 2150,
	236, 2150,
	237, 2150,
	239, 2150,
	240, 2150,
	241, 2150,
	244, 2150,
	245, 2150,
	246, 2150,
	247, 2150,
	248, 2150,
	249, 2150,
	250, 2150,
	251, 2150,
	252, 2150,
	253, 2150,
	254, 2150,
	255, 2150,
	256, 2150,
	257, 2150,
	258, 2150,
	259, 2150,
	261, 2150,
	262, 2150,
	263, 2150,
	264, 2150,
	265, 2150,
	266, 2150,
	267, 2150,
	269, 2150,
	272, 2150,
	273, 2150,
	275, 2150,
	276, 2150,
	277, 2150,
	278, 2150,
	279, 2150,
	282, 2150,
	286, 2150,
	287, 2150,
	288, 2150,
	289, 2150,
	291, 2150,
	292, 2150,
	293, 2150,
	295, 2150,
	297, 2150,
	298, 2150,
	299, 2150,
	300, 2150,
	301, 2150,
	302, 2150,
	303, 2150,
	304, 2150,
	305, 2150,
	306, 2150,
	307, 2150,
	309, 2150,
	310, 2150,
	311, 2150,
	312, 2150,
	313, 2150,
	314, 2150,
	315, 2150,
	316, 2150,
	317, 2150,
	319, 2150,
	321, 2150,
	322, 2150,
	323, 2150,
	324, 2150,
	325, 2150,
	326, 2150,
	327, 2150,
	328, 2150,
	329, 2150,
	330, 2150,
	337, 2150,
	338, 2150,
	339, 2150,
	340, 2150,
	341, 2150,
	342, 2150,
	343, 2150,
	344, 2150,
	345, 2150,
	346, 2150,
	348, 2150,
	349, 2150,
	350, 2150,
	351, 2150,
	352, 2150,
	353, 2150,
	354, 2150,
	355, 2150,
	356, 2150,
	357, 2150,
	358, 2150,
	359, 2150,
	360, 2150,
	361, 2150,
	362, 2150,
	363, 2150,
	364, 2150,
	366, 2150,
	367, 2150,
	368, 2150,
	369, 2150,
	370, 2150,
	371, 2150,
	373, 2150,
	374, 2150,
	375, 2150,
	376, 2150,
	377, 2150,
	378, 2150,
	379, 2150,
	380, 2150,
	381, 2150,
	383, 2150,
	385, 2150,
	386, 2150,
	387, 2150,
	388, 2150,
	389, 2150,
	390, 2150,
	391, 2150,
	392, 2150,
	393, 2150,
	394, 2150,
	395, 2150,
	396, 2150,
	397, 2150,
	399, 2150,
	400, 2150,
	402, 2150,
	404, 2150,
	405, 2150,
	406, 2150,
	407, 2150,
	408, 2150,
	409, 2150,
	410, 2150,
	412, 2150,
	413, 2150,
	414, 2150,
	415, 2150,
	416, 2150,
	418, 2150,
	420, 2150,
	421, 2150,
	422, 2150,
	423, 2150,
	424, 2150,
	426, 2150,
	427, 2150,
	428, 2150,
	430, 2150,
	431, 2150,
	434, 2150,
	435, 2150,
	436, 2150,
	437, 2150,
	438, 2150,
	439, 2150,
	440, 2150,
	442, 2150,
	445, 2150,
	446, 2150,
	447, 2150,
	448, 2150,
	449, 2150,
	450, 2150,
	452, 2150,
	453, 2150,
	454, 2150,
	459, 2150,
	460, 2150,
	461, 2150,
	462, 2150,
	463, 2150,
	464, 2150,
	465, 2150,
	466, 2150,
	468, 2150,
	469, 2150,
	470, 2150,
	471, 2150,
	472, 2150,
	473, 2150,
	475, 2150,
	476, 2150,
	477, 2150,
	478, 2150,
	479, 2150,
	480, 2150,
	481, 2150,
	482, 2150,
	483, 2150,
	485, 2150,
	488, 2150,
	489, 2150,
	491, 2150,
	492, 2150,
	-2, 0,
	-1, 1352,
	164, 2049,
	417, 2049,
	470, 2049,
	489, 2049,
	-2, 0,
	-1, 1384,
	323, 678,
	371, 678,
	-2, 0,
	-1, 1408,
	1, 673,
	486, 673,
	488, 673,
	490, 673,
	-2, 0,
	-1, 1409,
	1, 698,
	486, 698,
	488, 698,
	490, 698,
	-2, 0,
	-1, 1410,
	1, 680,
	486, 680,
	488, 680,
	490, 680,
	-2, 0,
	-1, 1412,
	1, 684,
	486, 684,
	488, 684,
	490, 684,
	-2, 0,
	-1, 1439,
	1, 2098,
	486, 2098,
	488, 2098,
	489, 2098,
	490, 2098,
	-2, 726,
	-1, 1440,
	1, 2046,
	486, 2046,
	488, 2046,
	489, 2046,
	490, 2046,
	-2, 727,
	-1, 1455,
	1, 1044,
	490, 1044,
	-2, 1049,
	-1, 1458,
	148, 1175,
	161, 1175,
	238, 1175,
	280, 1175,
	-2, 1115,
	-1, 1553,
	131, 1136,
	148, 1136,
	161, 1136,
	208, 1136,
	238, 1136,
	280, 1136,
	290, 1136,
	432, 1136,
	-2, 1540,
	-1, 1613,
	488, 1690,
	-2, 0,
	-1, 1648,
	131, 1136,
	148, 1136,
	161, 1136,
	208, 1136,
	238, 1136,
	280, 1136,
	290, 1136,
	432, 1136,
	-2, 1256,
	-1, 1695,
	487, 1367,
	-2, 1355,
	-1, 1728,
	1, 523,
	490, 523,
	-2, 1049,
	-1, 1941,
	1, 675,
	486, 675,
	488, 675,
	490, 675,
	-2, 0,
	-1, 1942,
	1, 700,
	486, 700,
	488, 700,
	490, 700,
	-2, 0,
	-1, 2014,
	354, 1202,
	355, 1202,
	-2, 1400,
	-1, 2045,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1420,
	-1, 2046,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1421,
	-1, 2047,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1422,
	-1, 2048,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1423,
	-1, 2049,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1424,
	-1, 2050,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1425,
	-1, 2051,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1426,
	-1, 2052,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1427,
	-1, 2064,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1439,
	-1, 2065,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1440,
	-1, 2066,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1441,
	-1, 2069,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1446,
	-1, 2075,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1450,
	-1, 2077,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1458,
	-1, 2078,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1459,
	-1, 2079,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1460,
	-1, 2080,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1461,
	-1, 2192,
	5, 1833,
	164, 1701,
	487, 1830,
	-2, 1821,
	-1, 2193,
	164, 1702,
	-2, 2102,
	-1, 2194,
	164, 1703,
	-2, 1973,
	-1, 2195,
	164, 1704,
	-2, 1891,
	-1, 2196,
	164, 1705,
	-2, 1930,
	-1, 2197,
	164, 1706,
	-2, 1968,
	-1, 2198,
	164, 1707,
	-2, 2044,
	-1, 2199,
	164, 1708,
	-2, 1523,
	-1, 2268,
	1, 1257,
	2, 1257,
	94, 1257,
	131, 1257,
	148, 1257,
	161, 1257,
	165, 1257,
	175, 1257,
	178, 1257,
	204, 1257,
	208, 1257,
	218, 1257,
	234, 1257,
	238, 1257,
	262, 1257,
	280, 1257,
	284, 1257,
	290, 1257,
	347, 1257,
	349, 1257,
	432, 1257,
	443, 1257,
	456, 1257,
	457, 1257,
	458, 1257,
	467, 1257,
	486, 1257,
	488, 1257,
	490, 1257,
	492, 1257,
	-2, 1256,
	-1, 2281,
	487, 1802,
	-2, 1816,
	-1, 2305,
	487, 1366,
	-2, 1356,
	-1, 2417,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1163,
	-1, 2573,
	285, 1205,
	-2, 2140,
	-1, 2574,
	285, 1206,
	-2, 2033,
	-1, 2578,
	354, 1767,
	355, 1767,
	-2, 1521,
	-1, 2579,
	354, 1771,
	355, 1771,
	-2, 1522,
	-1, 2580,
	354, 1768,
	355, 1768,
	-2, 1521,
	-1, 2581,
	354, 1772,
	355, 1772,
	-2, 1522,
	-1, 2594,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1448,
	-1, 2595,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1452,
	-1, 2601,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1454,
	-1, 2798,
	215, 1049,
	319, 1049,
	327, 1049,
	467, 1049,
	-2, 520,
	-1, 2913,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1163,
	-1, 3004,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1456,
	-1, 3011,
	212, 0,
	214, 0,
	272, 0,
	-2, 1475,
	-1, 3078,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1504,
	-1, 3079,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1505,
	-1, 3080,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1506,
	-1, 3084,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1510,
	-1, 3085,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1511,
	-1, 3086,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1512,
	-1, 3132,
	487, 1803,
	-2, 1817,
	-1, 3239,
	489, 2256,
	-2, 1093,
	-1, 3290,
	212, 0,
	214, 0,
	272, 0,
	-2, 1476,
	-1, 3293,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1479,
	-1, 3294,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1481,
	-1, 3480,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1480,
	-1, 3481,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1482,
	-1, 3492,
	212, 0,
	-2, 1513,
	-1, 3630,
	212, 0,
	-2, 1514,
	-1, 3769,
	47, 0,
	188, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 2105,
}

const sqlPrivate = 57344

const sqlLast = 90857

var sqlAct = [...]int{

	221, 3651, 3412, 3768, 3779, 3522, 3669, 3273, 3870, 2899,
	3733, 3560, 3744, 3715, 3730, 2337, 3780, 1915, 2728, 3781,
	1221, 3525, 2471, 3043, 3567, 1031, 3634, 3511, 3823, 2729,
	3443, 3438, 3767, 3576, 856, 2024, 3469, 3154, 2815, 3425,
	2928, 3231, 3189, 3404, 873, 3357, 1902, 3598, 847, 2921,
	1205, 2092, 1339, 1682, 2895, 1467, 2032, 3448, 1779, 2996,
	2025, 2923, 3155, 3497, 3210, 616, 2506, 1828, 1090, 2587,
	2460, 1654, 2446, 1021, 1338, 2443, 2508, 213, 2751, 2771,
	1183, 2743, 2224, 2434, 4, 616, 855, 148, 3272, 708,
	2396, 3329, 1392, 2516, 2505, 2455, 2472, 1623, 2711, 2457,
	583, 2499, 2497, 1824, 2732, 1788, 2339, 2734, 1823, 2260,
	3635, 1561, 2261, 2710, 3103, 1827, 2105, 1191, 1900, 1266,
	90, 2136, 2408, 2029, 2418, 2263, 2134, 1811, 1820, 1804,
	1074, 3561, 2515, 2444, 1599, 904, 1683, 2571, 1764, 1766,
	1624, 2125, 1455, 2242, 2089, 2013, 1996, 2221, 1754, 1360,
	1319, 1012, 1345, 1994, 2897, 2465, 2777, 1335, 1271, 1329,
	909, 1188, 1857, 35, 702, 617, 148, 2509, 1063, 537,
	1643, 551, 2128, 559, 911, 618, 1633, 1594, 2329, 215,
	1207, 1015, 2373, 2250, 994, 214, 2106, 2188, 2178, 1545,
	2232, 1468, 1029, 1995, 1469, 612, 156, 567, 1856, 1359,
	684, 1997, 157, 577, 659, 1343, 1218, 1778, 2018, 2374,
	885, 554, 40, 39, 1017, 37, 28, 26, 24, 992,
	562, 1474, 757, 1454, 2622, 774, 3117, 2618, 3118, 1893,
	2730, 851, 1893, 1893, 1893, 1640, 3922, 3909, 1877, 1411,
	2241, 2241, 2938, 2796, 621, 3908, 1011, 1294, 3886, 2241,
	624, 3884, 3372, 3880, 3806, 3372, 3803, 1833, 3807, 3801,
	2241, 1482, 1483, 2241, 621, 3798, 2937, 3795, 3790, 3799,
	624, 3796, 1833, 3765, 3764, 851, 2586, 1833, 1833, 852,
	719, 3763, 3759, 1513, 2241, 1908, 1908, 3758, 907, 3753,
	1485, 1908, 2631, 3372, 900, 2234, 1239, 3751, 2632, 1009,
	3728, 3372, 1482, 1483, 3372, 1048, 3710, 3709, 3702, 995,
	995, 2296, 2241, 3701, 3696, 3627, 1891, 2241, 3372, 1233,
	1484, 3695, 3689, 3632, 1513, 3372, 1833, 2296, 3612, 3609,
	1504, 1485, 1833, 3372, 3569, 3542, 3541, 3533, 3570, 1833,
	1833, 1833, 3532, 3503, 3482, 833, 3372, 1833, 2296, 3467,
	3456, 832, 3399, 1908, 2953, 3390, 2241, 1043, 3371, 2241,
	3292, 1484, 3372, 1071, 2296, 3247, 3241, 1482, 1483, 2969,
	2969, 1504, 3208, 1525, 1526, 1527, 3209, 3127, 841, 1501,
	3125, 3128, 846, 3110, 3126, 3615, 3027, 2241, 3107, 1513,
	1833, 3023, 3107, 2968, 2960, 2241, 1485, 2969, 2961, 1507,
	1508, 1509, 1510, 1531, 996, 1071, 2727, 2722, 2721, 1490,
	2241, 2241, 2241, 2674, 2672, 2664, 2662, 2675, 2673, 2665,
	2241, 3286, 2131, 2633, 2495, 2494, 1484, 2241, 1911, 1911,
	1923, 2420, 1044, 2241, 2292, 1908, 1504, 2683, 2684, 2233,
	1507, 1508, 1509, 1510, 1501, 2313, 3437, 1512, 1514, 2241,
	1490, 2295, 2290, 2283, 2240, 2296, 2241, 1833, 2241, 1910,
	1908, 2683, 2684, 1911, 2701, 2702, 2703, 998, 1833, 999,
	3391, 1833, 189, 2961, 2387, 954, 1783, 2621, 1238, 2328,
	1024, 1734, 3288, 1892, 1552, 2953, 1027, 2440, 1512, 1514,
	1832, 2404, 2326, 1619, 1217, 2132, 3183, 2999, 1505, 2977,
	1641, 1232, 1814, 1482, 1483, 1507, 1508, 1509, 1510, 2939,
	191, 1394, 1499, 1500, 2277, 1490, 1894, 2276, 2275, 1894,
	1894, 1894, 2274, 2683, 2684, 2273, 1000, 997, 2940, 3345,
	2698, 189, 1485, 840, 839, 838, 837, 836, 835, 1505,
	831, 830, 2551, 3304, 1522, 829, 828, 1532, 827, 826,
	868, 825, 824, 1512, 1514, 190, 823, 822, 821, 820,
	1227, 819, 1484, 818, 817, 183, 816, 2133, 2130, 191,
	2937, 1044, 755, 184, 754, 753, 752, 1499, 1500, 751,
	750, 749, 909, 748, 747, 2689, 909, 746, 1511, 745,
	744, 743, 742, 1520, 158, 741, 740, 1552, 739, 738,
	737, 1093, 189, 2468, 1505, 1093, 1506, 736, 1210, 2689,
	735, 734, 1210, 733, 190, 732, 1073, 79, 731, 730,
	1078, 2161, 729, 2233, 728, 717, 716, 675, 636, 1511,
	909, 3138, 909, 1044, 909, 635, 627, 626, 625, 597,
	191, 589, 588, 587, 571, 211, 1067, 1506, 210, 209,
	208, 1490, 1194, 158, 207, 206, 1563, 205, 204, 189,
	203, 1210, 2704, 2485, 1482, 1483, 1906, 1892, 1989, 202,
	201, 2689, 200, 199, 2699, 2683, 2684, 2135, 198, 197,
	1186, 1199, 189, 1198, 1201, 190, 1513, 196, 195, 194,
	193, 192, 1413, 1485, 1511, 183, 3121, 191, 2699, 2970,
	2774, 1210, 2644, 184, 2627, 1210, 2683, 2684, 2424, 1210,
	2300, 2284, 1506, 2267, 909, 2725, 1762, 854, 2147, 1210,
	191, 1061, 909, 1484, 158, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 1523, 2726, 1276, 1278, 1667, 1201,
	1201, 2451, 190, 1572, 2698, 902, 1223, 1080, 1033, 3786,
	3766, 1086, 183, 1180, 1185, 3676, 2145, 3624, 1918, 3521,
	184, 1213, 1210, 1502, 1498, 190, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 183, 2129, 1201, 909, 3618,
	1056, 158, 2700, 184, 2392, 1220, 1644, 1564, 3496, 1562,
	1348, 1350, 148, 148, 1226, 1219, 1231, 1602, 1237, 621,
	2309, 3616, 3457, 1601, 158, 624, 2700, 3436, 1481, 3452,
	3350, 3327, 1490, 1602, 1364, 3326, 3320, 3319, 3318, 1601,
	3311, 1521, 3310, 2689, 1605, 852, 1281, 1524, 1502, 1498,
	1917, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1600, 189, 3308, 3303, 1563, 3300, 1323, 1326, 703, 3299,
	1512, 1514, 3207, 123, 2689, 3142, 189, 3141, 3214, 3140,
	1332, 3131, 909, 909, 909, 909, 909, 909, 909, 3098,
	1067, 3097, 1421, 1067, 63, 3096, 706, 705, 1358, 191,
	2964, 1459, 3019, 3181, 3015, 1346, 1363, 2769, 2718, 2709,
	64, 2682, 2679, 909, 191, 2678, 2676, 2671, 2670, 909,
	2669, 1505, 2666, 68, 2685, 2686, 2687, 2688, 2690, 2691,
	2663, 2643, 2699, 2626, 1008, 2619, 2496, 189, 2695, 2696,
	2697, 1297, 1570, 189, 190, 2694, 2692, 2693, 2685, 2686,
	2687, 2688, 2690, 2691, 183, 2268, 2118, 2453, 73, 190,
	1412, 1481, 184, 1838, 1836, 2360, 1480, 3917, 3879, 183,
	1868, 1453, 2723, 3878, 3816, 191, 3814, 184, 3805, 1032,
	3045, 191, 1551, 158, 3668, 3661, 3658, 3657, 3656, 3650,
	3644, 78, 1488, 1489, 1491, 1492, 3613, 2101, 2467, 3506,
	3597, 1369, 89, 3596, 2095, 3584, 3581, 79, 86, 1385,
	2685, 2686, 2687, 2688, 2690, 2691, 3538, 3517, 63, 2789,
	190, 3494, 909, 909, 909, 3477, 190, 3476, 909, 1506,
	183, 3464, 3451, 852, 64, 1029, 183, 1029, 184, 3463,
	2700, 1621, 3429, 3344, 184, 3325, 3262, 68, 3259, 1456,
	3172, 3171, 3158, 3157, 1093, 3113, 80, 3101, 3010, 158,
	909, 1464, 1549, 616, 2971, 158, 2954, 1700, 616, 1463,
	2914, 2863, 833, 1669, 2842, 2818, 909, 1458, 832, 2817,
	1210, 2791, 73, 3213, 1679, 1460, 2648, 2647, 2642, 1723,
	2610, 1477, 1478, 2433, 1608, 909, 3636, 2766, 189, 1607,
	189, 1093, 1606, 1603, 1675, 1595, 906, 1593, 2307, 2306,
	1630, 2279, 2272, 1604, 2239, 78, 1482, 1483, 2143, 2452,
	1627, 1628, 1666, 1622, 1617, 148, 89, 2160, 1616, 1760,
	1731, 79, 86, 1615, 883, 1198, 191, 1614, 191, 995,
	1613, 1612, 1677, 1611, 1651, 1485, 1067, 1596, 1597, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 852, 1726, 2694,
	2692, 2693, 2685, 2686, 2687, 2688, 2690, 2691, 1610, 1609,
	1590, 3432, 81, 1919, 1725, 1484, 1589, 1588, 1587, 1586,
	80, 190, 1585, 190, 1584, 1583, 1582, 1581, 2818, 1580,
	1579, 183, 1673, 183, 1578, 2687, 2688, 2690, 2691, 184,
	1577, 184, 1658, 1576, 1565, 1550, 1548, 1543, 1652, 155,
	84, 1055, 85, 1046, 1039, 3346, 1671, 3296, 1649, 3348,
	158, 1728, 158, 3137, 2146, 3124, 3116, 2630, 2270, 3136,
	1564, 189, 2787, 1620, 2298, 1546, 1210, 1210, 1772, 707,
	1753, 1694, 621, 123, 1093, 2683, 2684, 621, 624, 1646,
	1662, 1661, 1660, 624, 1659, 1657, 1656, 1655, 1678, 3619,
	1482, 1483, 2144, 1722, 3520, 1753, 3393, 1801, 1642, 191,
	1803, 2845, 3876, 1808, 1077, 3869, 1680, 3659, 2924, 1753,
	3572, 3617, 3571, 3455, 3392, 3119, 2956, 2955, 1829, 1485,
	1783, 3577, 124, 1602, 1071, 3217, 81, 1644, 1023, 1601,
	2668, 1756, 1751, 1746, 1071, 2667, 159, 2592, 1384, 2362,
	1451, 1075, 2378, 1072, 190, 3170, 1585, 1585, 814, 1484,
	1422, 1068, 1740, 1024, 183, 1024, 1025, 1076, 2901, 1027,
	2900, 1027, 184, 155, 84, 1574, 85, 1787, 1393, 1916,
	1071, 3568, 3791, 3778, 1394, 1825, 1812, 3186, 3174, 2975,
	3498, 1674, 2730, 704, 3047, 189, 2636, 2126, 815, 2305,
	1618, 1598, 3787, 707, 2893, 1865, 1254, 123, 1864, 3800,
	1210, 1861, 1210, 3797, 1210, 1745, 1744, 2933, 3652, 1753,
	1755, 2401, 1210, 3149, 2398, 1210, 1830, 3439, 3727, 3641,
	2821, 3165, 2503, 191, 2464, 2886, 3840, 3839, 1210, 1210,
	1210, 2991, 1866, 1220, 1373, 1874, 2800, 850, 1490, 2004,
	3558, 3382, 3688, 1219, 1933, 3199, 124, 621, 616, 1007,
	1869, 3788, 1807, 624, 1571, 1069, 1252, 1198, 1242, 812,
	159, 2314, 810, 1070, 2207, 1975, 808, 3914, 190, 3551,
	2332, 1729, 1882, 806, 1831, 803, 2409, 1973, 183, 3544,
	2002, 2332, 3195, 3194, 2330, 3188, 184, 3185, 3184, 1871,
	3146, 3145, 2641, 1555, 2640, 2330, 1921, 1560, 2683, 2684,
	3198, 2639, 1848, 2638, 2596, 1847, 2403, 158, 2394, 2386,
	2385, 797, 1420, 1748, 849, 671, 2802, 2365, 2291, 2076,
	852, 909, 852, 909, 1457, 1922, 1253, 2788, 1216, 1741,
	909, 2174, 1937, 1700, 1700, 1093, 2173, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 1697, 909, 2006, 909, 909, 909, 909, 1927,
	1346, 1880, 1346, 1884, 1885, 1297, 1876, 1879, 1419, 1879,
	1062, 2034, 2003, 1371, 1077, 1780, 851, 909, 1077, 2461,
	909, 909, 672, 1071, 1308, 1912, 1056, 1913, 3687, 909,
	1750, 1924, 1993, 909, 1926, 909, 909, 1287, 1492, 1286,
	1285, 1776, 1284, 1093, 2844, 800, 3475, 621, 2411, 909,
	909, 909, 909, 624, 909, 909, 909, 909, 909, 909,
	909, 909, 1749, 1955, 1781, 1782, 2689, 1076, 2410, 2412,
	1248, 1076, 1846, 2001, 2976, 1987, 1931, 1261, 1986, 2131,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 2030,
	2031, 2017, 1777, 909, 2321, 1418, 2282, 2353, 2569, 2091,
	3161, 2982, 2107, 2108, 1068, 1029, 1430, 2584, 2415, 3756,
	1896, 1382, 1093, 1898, 2352, 2091, 1366, 2107, 2123, 1903,
	2364, 1029, 1905, 1992, 1881, 1990, 1945, 1694, 1694, 2005,
	1998, 1991, 2981, 2299, 1983, 2126, 1662, 909, 1093, 852,
	2382, 833, 1941, 2169, 833, 833, 2122, 2021, 2548, 852,
	2022, 2023, 2132, 852, 1386, 2699, 1948, 3527, 848, 3784,
	2375, 2376, 2191, 2191, 2205, 3839, 2107, 2691, 2087, 2225,
	2227, 1985, 2135, 1940, 2402, 2231, 1462, 1486, 1487, 1488,
	1489, 1491, 1492, 2683, 2684, 2375, 2376, 2171, 3853, 2004,
	1942, 3852, 2172, 2085, 3394, 2175, 3864, 2176, 2177, 2375,
	2376, 595, 2255, 1210, 2103, 1482, 1483, 2400, 1069, 1036,
	2799, 2341, 2247, 3378, 2583, 995, 1070, 860, 1054, 2280,
	1367, 2120, 1450, 1068, 2133, 2130, 1394, 1513, 1651, 726,
	2002, 2289, 2269, 1093, 1485, 3173, 2293, 2399, 148, 1988,
	2397, 852, 3036, 1034, 1394, 2930, 2331, 2246, 2416, 1949,
	3474, 1434, 2258, 1731, 674, 673, 2576, 2577, 3529, 2099,
	1700, 1250, 1688, 2700, 1484, 3889, 2097, 2187, 2200, 3828,
	2216, 1067, 1408, 1272, 2229, 3865, 3278, 3152, 2301, 1767,
	3277, 2254, 2248, 2259, 1768, 1093, 2265, 2266, 2237, 2238,
	1417, 2252, 2253, 2000, 594, 1372, 3785, 1210, 804, 1757,
	1758, 804, 1649, 1974, 2333, 804, 2081, 909, 2344, 909,
	1270, 669, 805, 668, 804, 1972, 2856, 2082, 549, 1604,
	1409, 2083, 1307, 1767, 2363, 2088, 2312, 1069, 1768, 1774,
	2395, 2689, 3901, 2554, 2135, 1070, 1037, 2931, 1982, 628,
	2850, 2308, 2003, 544, 1893, 1783, 2437, 1186, 3162, 1800,
	2383, 1785, 2135, 1490, 1767, 3653, 1071, 1596, 1597, 1768,
	3706, 1198, 1272, 2367, 3867, 2866, 2311, 2475, 1247, 2801,
	3809, 3376, 2315, 3783, 701, 1984, 1591, 3810, 2785, 1210,
	1210, 1769, 1210, 2692, 2693, 2685, 2686, 2687, 2688, 2690,
	2691, 1512, 1514, 1024, 1210, 1771, 2368, 2355, 3849, 1027,
	2930, 3827, 1815, 2001, 2832, 2336, 2517, 1822, 2366, 1024,
	2519, 3471, 2359, 2522, 2523, 1027, 2421, 2346, 2349, 1774,
	2699, 2384, 2528, 2529, 2530, 1769, 2557, 3738, 1697, 1697,
	3369, 3274, 2491, 2129, 1694, 3421, 3487, 3667, 1783, 1771,
	909, 2391, 1505, 2538, 2117, 2539, 801, 2377, 2379, 2380,
	2381, 2488, 2831, 1947, 1201, 1201, 1769, 1773, 2598, 3365,
	2607, 1542, 3528, 2343, 1431, 2492, 2536, 148, 1220, 2251,
	1771, 2426, 2084, 2428, 2090, 1071, 2431, 2502, 2422, 2477,
	909, 2086, 621, 1381, 1383, 2605, 909, 909, 624, 3607,
	2646, 2441, 3890, 1429, 2264, 596, 3377, 1198, 593, 1944,
	2559, 1773, 2561, 2459, 1821, 3366, 2470, 851, 3704, 2533,
	2521, 2466, 3866, 2524, 2466, 2525, 2481, 1368, 2482, 2540,
	2483, 2542, 792, 2544, 3470, 3049, 3873, 3431, 2700, 727,
	2556, 1198, 1773, 1198, 2493, 2489, 2487, 3599, 3705, 2552,
	1035, 909, 909, 2520, 2504, 845, 1939, 909, 1461, 3600,
	1506, 2317, 2553, 629, 630, 3826, 3268, 2834, 3133, 1774,
	909, 909, 1346, 2100, 2319, 3033, 909, 909, 1432, 3808,
	1049, 1023, 909, 1023, 3279, 3601, 2993, 2567, 2342, 1555,
	2535, 909, 909, 909, 1396, 1632, 3670, 909, 2836, 2541,
	1053, 2543, 2320, 2545, 3782, 2838, 2599, 909, 2602, 1025,
	1802, 1025, 2546, 1774, 3838, 3836, 3422, 2318, 2629, 2566,
	1370, 2564, 792, 2603, 909, 2565, 2098, 2608, 2562, 3902,
	3684, 2575, 2332, 3212, 793, 2570, 545, 2620, 2017, 3603,
	2555, 1894, 3472, 2212, 1774, 845, 2347, 3034, 1433, 2805,
	2073, 2585, 2835, 3583, 3229, 3602, 2917, 2694, 2692, 2693,
	2685, 2686, 2687, 2688, 2690, 2691, 1636, 1774, 1855, 1629,
	632, 631, 3604, 3361, 2624, 2625, 1047, 3362, 1042, 2628,
	1765, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1818, 536,
	909, 909, 909, 546, 1472, 3323, 852, 2484, 2597, 909,
	909, 909, 3275, 1810, 909, 1639, 2020, 1471, 1688, 1688,
	1784, 1742, 1770, 1542, 909, 1029, 1093, 633, 634, 1634,
	909, 3364, 909, 1809, 793, 2997, 3895, 1471, 1816, 3535,
	1029, 547, 3087, 548, 3367, 1637, 2737, 2738, 2683, 2684,
	1466, 3534, 3871, 1636, 3515, 1697, 2635, 2778, 1093, 1805,
	2753, 3640, 3381, 3230, 3192, 3148, 1770, 2135, 2918, 3380,
	1029, 2912, 1817, 1635, 2813, 1093, 2809, 2445, 1739, 2759,
	2435, 3671, 1781, 1782, 2604, 1875, 1867, 1700, 1860, 1842,
	2775, 1093, 1639, 2606, 2010, 2745, 2720, 1770, 3032, 794,
	2369, 2071, 2783, 909, 2074, 3102, 2249, 1470, 3716, 2994,
	1806, 1979, 2739, 1471, 1735, 3232, 3444, 909, 2749, 2773,
	2432, 2795, 1637, 2243, 3566, 3280, 1310, 1470, 1700, 3564,
	3516, 2824, 2820, 3872, 2768, 2806, 2807, 2797, 2819, 2590,
	2568, 2754, 1932, 2772, 909, 1737, 3363, 2747, 723, 1472,
	2070, 2803, 2822, 3115, 2748, 2826, 2715, 2716, 2717, 2757,
	1638, 3874, 3324, 2742, 2731, 2760, 2761, 1738, 2741, 1472,
	3605, 1410, 1067, 1091, 2765, 3606, 2823, 1192, 2758, 2828,
	2829, 2288, 2746, 2287, 2752, 1093, 1397, 2286, 2348, 794,
	2245, 3088, 2810, 715, 1210, 2244, 2689, 3281, 3894, 3089,
	2285, 2847, 2011, 1470, 2869, 1279, 1210, 2872, 1293, 2756,
	795, 2880, 2882, 2439, 1291, 1093, 849, 1280, 2792, 2793,
	3646, 2794, 3413, 2786, 725, 2965, 2888, 3379, 2849, 2763,
	1210, 2764, 1198, 2780, 2781, 2782, 2419, 1638, 1873, 2898,
	3672, 1210, 3846, 3523, 2875, 3562, 2906, 2798, 2370, 2371,
	1772, 796, 3719, 1864, 2744, 1029, 2857, 2867, 2804, 3724,
	3647, 1694, 2911, 3713, 2814, 2871, 3513, 3330, 1201, 3104,
	2142, 1448, 2926, 2517, 3848, 2864, 1446, 1772, 2186, 2182,
	1426, 1424, 2517, 2843, 2837, 2699, 3802, 1407, 3660, 2755,
	3493, 2072, 3322, 1210, 1210, 2712, 3461, 1405, 2852, 1971,
	795, 2935, 1694, 3514, 2952, 2859, 3009, 2855, 1789, 1812,
	2839, 2840, 2873, 1024, 2841, 2865, 2887, 1812, 2973, 1027,
	2883, 2889, 2946, 2878, 3720, 1688, 2779, 1793, 1024, 2972,
	3524, 1632, 3648, 1403, 1027, 1401, 2890, 2677, 2858, 1399,
	2367, 796, 2860, 2861, 1093, 2919, 2862, 1093, 2180, 2609,
	2212, 2853, 2909, 1198, 1198, 2854, 3460, 2436, 1024, 2927,
	1391, 2393, 721, 722, 1027, 2184, 2185, 2183, 1389, 2950,
	2951, 148, 148, 2361, 2310, 1790, 1289, 909, 852, 1668,
	1665, 1449, 1361, 909, 909, 2934, 2713, 909, 909, 909,
	2932, 909, 2990, 2700, 2988, 2947, 2989, 2963, 3777, 2941,
	909, 1700, 1636, 1466, 2967, 2550, 2549, 713, 714, 909,
	2527, 1999, 909, 2141, 2925, 2987, 1292, 1981, 1093, 1952,
	2179, 2181, 1290, 1724, 2978, 1198, 2979, 909, 2980, 1575,
	2212, 2212, 724, 1447, 1365, 1093, 2868, 2995, 1445, 3398,
	3389, 1639, 1425, 1423, 1265, 1700, 1700, 909, 909, 1406,
	909, 909, 909, 3712, 3012, 1634, 3442, 1674, 1970, 1404,
	3403, 2984, 3021, 3022, 3354, 1794, 3228, 2922, 909, 3222,
	3197, 1637, 909, 3168, 1700, 1700, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 1402, 909, 1400, 2992, 1635,
	802, 1398, 3166, 909, 909, 1700, 2985, 3147, 3824, 2910,
	909, 1023, 2902, 2486, 2693, 2685, 2686, 2687, 2688, 2690,
	2691, 909, 1390, 1795, 1796, 3017, 2462, 1023, 2450, 2442,
	1388, 2429, 1029, 1029, 3028, 1791, 909, 1909, 1288, 1025,
	1907, 1904, 1899, 1024, 1897, 1895, 1886, 3044, 1839, 1027,
	2212, 2212, 2212, 1837, 3039, 1025, 3035, 3037, 3038, 1826,
	1813, 1799, 1697, 1786, 1775, 1093, 3029, 2879, 3051, 1792,
	3590, 2588, 1822, 1475, 3120, 1694, 1676, 3058, 3840, 3747,
	3466, 2030, 3052, 3459, 3064, 3061, 1638, 3062, 2943, 2944,
	2945, 3059, 3099, 909, 2948, 3060, 2949, 3066, 3100, 3091,
	148, 1004, 3458, 1697, 3410, 2518, 1670, 3143, 909, 909,
	2030, 3067, 1761, 1244, 3592, 3092, 2351, 2332, 1783, 1694,
	1694, 2332, 3240, 1443, 1444, 1943, 1005, 1969, 807, 809,
	811, 2330, 1331, 909, 909, 2350, 1968, 3746, 3106, 3111,
	3112, 3095, 3108, 3109, 1872, 1330, 1950, 3383, 1694, 1694,
	1482, 1483, 2589, 1763, 909, 3405, 1387, 917, 1797, 1482,
	1483, 3626, 3331, 3309, 3123, 607, 3122, 1476, 2372, 1821,
	2354, 1479, 3842, 3834, 3191, 1732, 2398, 1210, 550, 1694,
	1210, 2406, 2405, 3868, 2390, 2388, 2356, 2358, 1485, 1700,
	3711, 3680, 3677, 3559, 3190, 3180, 3182, 2389, 3203, 217,
	2357, 539, 540, 3139, 555, 539, 555, 565, 570, 1484,
	3221, 586, 3151, 3211, 1210, 3175, 592, 3130, 1484, 2469,
	1006, 909, 217, 1331, 1331, 1798, 2230, 561, 1727, 1029,
	909, 1681, 3202, 2784, 3193, 3179, 3187, 1201, 712, 660,
	3893, 3679, 217, 2475, 700, 3242, 1210, 1210, 1210, 2683,
	2684, 2367, 1482, 1483, 2324, 2325, 3205, 2322, 2323, 1552,
	3237, 3218, 1210, 1375, 3234, 3236, 3254, 3219, 1093, 1374,
	3301, 598, 2137, 3135, 3233, 2517, 2324, 3881, 1864, 2322,
	2170, 3220, 1428, 3580, 3552, 1427, 3406, 3402, 3401, 3297,
	1093, 3226, 3134, 909, 909, 3040, 1834, 2870, 1569, 909,
	909, 1700, 1568, 3854, 909, 909, 3637, 909, 3548, 3507,
	3505, 909, 3223, 3428, 3266, 3347, 3265, 3246, 3238, 3235,
	1024, 1024, 909, 3206, 3243, 2814, 1027, 1027, 3204, 3164,
	3159, 2942, 1688, 3244, 2916, 2915, 2532, 2531, 909, 3255,
	3256, 539, 539, 2479, 2454, 3249, 3257, 3250, 3263, 217,
	3260, 2430, 2303, 3264, 3291, 3261, 2302, 2102, 3282, 1967,
	1966, 1965, 1964, 1694, 1889, 1888, 3271, 3276, 1887, 1870,
	1850, 1849, 1845, 1688, 1844, 603, 1697, 1843, 1841, 1840,
	3283, 1442, 1441, 1318, 1317, 1316, 1315, 1314, 1313, 3295,
	1312, 1311, 1309, 1304, 1303, 1302, 1301, 1300, 1029, 1260,
	1259, 1258, 1257, 1256, 1255, 1249, 1029, 1243, 1241, 1240,
	1093, 1084, 1093, 1083, 1082, 1081, 1052, 1051, 987, 1029,
	1697, 1697, 1733, 813, 3336, 799, 3526, 3267, 3368, 1093,
	1436, 77, 1251, 3167, 647, 3169, 72, 1819, 2212, 2212,
	2874, 3163, 655, 3726, 609, 2830, 2407, 1951, 909, 1697,
	1697, 3351, 3352, 3321, 1395, 1953, 2767, 2271, 3703, 3305,
	2645, 3633, 3486, 2140, 1573, 2724, 74, 893, 605, 3375,
	939, 3420, 3384, 3419, 1093, 1694, 3328, 3355, 148, 1093,
	1697, 3150, 3386, 3387, 3335, 3374, 3338, 3196, 3342, 2507,
	3333, 3334, 2772, 3417, 3416, 1685, 1687, 3385, 3343, 859,
	3339, 3407, 1096, 3408, 3353, 3332, 1743, 899, 1759, 1752,
	2014, 2304, 2190, 3337, 916, 3414, 3373, 1024, 913, 1093,
	1689, 3411, 1691, 1027, 1210, 915, 2212, 2212, 2212, 2212,
	2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212, 2212,
	2212, 2212, 2212, 2212, 2212, 914, 2212, 3396, 1690, 1592,
	909, 912, 1684, 1864, 3248, 3225, 3397, 2033, 3224, 2438,
	2473, 1296, 778, 3409, 1747, 1093, 1201, 2096, 2124, 3400,
	2634, 1566, 600, 3465, 3446, 874, 3415, 909, 909, 909,
	895, 3454, 3449, 2121, 3445, 3435, 3433, 3462, 1045, 3430,
	884, 2750, 2929, 3129, 604, 1093, 3447, 3450, 2009, 663,
	909, 2680, 2127, 909, 909, 1038, 2213, 2206, 2202, 3440,
	2463, 1023, 1452, 909, 1544, 2474, 1700, 1079, 877, 608,
	2094, 909, 909, 1557, 2614, 2019, 1023, 2936, 2770, 2297,
	3743, 3048, 1854, 3473, 1003, 602, 1093, 3483, 1002, 1025,
	1001, 3732, 3729, 3478, 3258, 2138, 1688, 2896, 1736, 1093,
	2208, 2316, 1534, 2903, 1025, 889, 1023, 909, 1197, 2735,
	3489, 2966, 1262, 909, 1697, 3423, 591, 901, 1533, 3495,
	2414, 909, 599, 1700, 2413, 3434, 3643, 1066, 1065, 1064,
	909, 2812, 3900, 909, 1025, 3509, 1024, 3501, 3502, 909,
	1688, 1688, 1027, 3160, 1024, 3453, 1093, 606, 188, 1040,
	1027, 2582, 3504, 1473, 3500, 3510, 843, 1024, 792, 1465,
	610, 3508, 185, 1027, 187, 186, 3424, 3547, 3177, 1688,
	1688, 601, 19, 3531, 18, 3530, 17, 1050, 94, 38,
	3574, 845, 16, 1093, 586, 2898, 1210, 122, 121, 3565,
	2281, 120, 119, 3557, 3549, 118, 117, 116, 111, 115,
	1688, 3579, 3554, 219, 909, 909, 114, 217, 113, 217,
	217, 1189, 3591, 217, 217, 3595, 112, 909, 909, 3563,
	110, 109, 844, 108, 3573, 3614, 1697, 217, 1222, 3589,
	107, 106, 3545, 105, 909, 1700, 3587, 3588, 104, 3578,
	1694, 3610, 3611, 103, 2611, 2612, 3586, 3594, 102, 3608,
	3449, 1246, 3593, 101, 100, 99, 98, 97, 909, 3537,
	793, 909, 3621, 96, 1264, 95, 1269, 582, 3649, 217,
	217, 579, 1189, 3585, 52, 3625, 51, 93, 92, 909,
	15, 3639, 217, 36, 13, 2327, 56, 57, 3631, 1306,
	12, 1023, 31, 1198, 32, 3638, 83, 1694, 82, 3622,
	3623, 30, 217, 217, 217, 14, 1189, 217, 29, 27,
	3666, 10, 909, 909, 8, 586, 3655, 217, 217, 1025,
	7, 3654, 909, 33, 1653, 909, 11, 1210, 153, 152,
	154, 151, 712, 76, 150, 3662, 149, 1210, 1210, 75,
	25, 9, 145, 3575, 3216, 71, 147, 146, 144, 3678,
	3673, 3694, 143, 142, 1210, 69, 3674, 3675, 141, 3681,
	140, 70, 3683, 872, 2706, 2707, 2708, 909, 909, 139,
	3686, 3690, 23, 3664, 3691, 5, 1201, 3685, 3699, 55,
	3700, 6, 3468, 3578, 1688, 2974, 87, 88, 34, 3692,
	3693, 67, 3698, 217, 3723, 66, 65, 22, 54, 909,
	909, 3721, 909, 3708, 3731, 3734, 3697, 217, 21, 1694,
	178, 3722, 177, 3741, 176, 794, 175, 170, 169, 3748,
	174, 172, 171, 173, 3745, 168, 180, 179, 182, 166,
	162, 161, 165, 167, 3736, 164, 163, 3761, 160, 1342,
	181, 3539, 3540, 3369, 138, 909, 909, 909, 3740, 3707,
	62, 137, 136, 135, 3752, 3762, 3760, 3755, 134, 3757,
	133, 3553, 132, 3665, 3555, 3556, 131, 3789, 909, 61,
	3794, 20, 3365, 2, 1, 3776, 3358, 3775, 3773, 3774,
	0, 3735, 0, 0, 3739, 0, 0, 0, 0, 0,
	0, 3792, 3356, 3813, 0, 0, 1688, 2572, 3360, 0,
	3811, 0, 0, 3820, 0, 0, 0, 0, 0, 0,
	909, 0, 2475, 3825, 3812, 3815, 3818, 3819, 3366, 3817,
	0, 3822, 0, 3821, 842, 0, 795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3844, 3837, 0,
	3835, 1697, 3831, 3832, 3731, 3833, 3843, 3734, 3841, 0,
	3847, 3845, 0, 3359, 0, 909, 0, 909, 3859, 3856,
	3851, 3855, 0, 3745, 3863, 0, 3850, 796, 1023, 1023,
	0, 0, 3862, 0, 0, 3857, 3861, 2208, 2208, 0,
	0, 3749, 0, 0, 3750, 0, 0, 0, 3877, 3875,
	0, 0, 3858, 0, 3860, 0, 1025, 1025, 1697, 0,
	3883, 539, 3882, 0, 0, 0, 0, 0, 0, 909,
	909, 3885, 3891, 2212, 3663, 3888, 0, 909, 0, 909,
	909, 3887, 217, 3897, 217, 0, 3904, 0, 217, 0,
	0, 0, 0, 0, 0, 3903, 0, 0, 0, 0,
	1222, 0, 1189, 217, 3905, 217, 0, 3907, 3906, 3912,
	217, 1222, 555, 0, 3915, 217, 1222, 2212, 909, 0,
	3913, 586, 3910, 0, 3916, 0, 3911, 3918, 0, 0,
	0, 0, 0, 0, 3923, 3919, 3361, 3921, 0, 0,
	3362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2208, 2208, 2208,
	0, 3898, 3899, 0, 0, 0, 0, 0, 0, 0,
	1697, 0, 1631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3367, 0, 0,
	3920, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3005, 3006, 0, 0, 0, 0, 2736, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2212, 872, 0, 0, 0, 872,
	2762, 0, 0, 1025, 0, 0, 0, 3804, 2683, 2684,
	0, 2701, 2702, 2703, 1177, 0, 0, 2776, 1177, 0,
	0, 1688, 0, 0, 0, 0, 0, 0, 0, 3287,
	0, 0, 0, 2790, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3363,
	3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077,
	3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 0,
	3090, 0, 2212, 2212, 0, 0, 0, 2698, 1688, 217,
	0, 0, 858, 217, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 217, 0,
	217, 0, 1482, 1483, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1890, 0,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 0, 1023, 0, 0, 217, 0, 0,
	0, 0, 1023, 0, 0, 0, 2689, 2776, 0, 0,
	0, 0, 0, 0, 0, 1023, 0, 0, 0, 0,
	586, 1484, 1025, 0, 712, 0, 0, 0, 0, 0,
	1025, 1504, 0, 217, 0, 1189, 217, 0, 0, 1501,
	1688, 0, 0, 1025, 0, 0, 0, 0, 0, 586,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 2704,
	0, 0, 0, 0, 0, 217, 217, 0, 217, 0,
	217, 0, 217, 0, 217, 0, 1482, 1483, 0, 0,
	0, 3008, 0, 0, 0, 0, 0, 0, 1976, 0,
	0, 1977, 0, 1978, 0, 2699, 0, 0, 1513, 0,
	1507, 1508, 1509, 1510, 217, 1485, 0, 1202, 0, 0,
	1490, 1214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 0, 0, 0, 586,
	0, 0, 0, 0, 0, 1484, 1192, 0, 0, 1091,
	0, 0, 0, 0, 0, 2208, 2208, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	1273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 2700, 0, 0, 0, 0, 1354, 0,
	3025, 2683, 2684, 0, 2701, 2702, 2703, 0, 1214, 0,
	0, 0, 0, 73, 1490, 0, 0, 3041, 0, 0,
	0, 0, 0, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
	2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
	2208, 2208, 0, 2208, 0, 0, 78, 0, 0, 0,
	0, 1376, 1512, 1514, 0, 0, 0, 89, 0, 0,
	0, 0, 79, 86, 1482, 1483, 0, 0, 0, 0,
	2698, 0, 0, 0, 0, 0, 0, 539, 0, 1511,
	0, 0, 0, 0, 0, 0, 1513, 1177, 0, 0,
	0, 0, 217, 1485, 0, 0, 0, 1506, 0, 0,
	0, 539, 0, 1505, 0, 2695, 2696, 2697, 217, 0,
	539, 80, 2694, 2692, 2693, 2685, 2686, 2687, 2688, 2690,
	2691, 0, 217, 1484, 0, 0, 0, 0, 872, 0,
	0, 1482, 1483, 1504, 1177, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 858, 0, 0, 3132, 858, 2689,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 3003, 0, 0, 0, 0, 0, 0,
	1484, 0, 1224, 0, 1228, 0, 1234, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 2294, 0, 0,
	0, 1506, 1490, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 2340, 0, 81, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 2699, 0,
	0, 0, 0, 0, 217, 0, 0, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 155, 84, 0, 85, 0, 0,
	0, 217, 0, 0, 1499, 1500, 1357, 1177, 0, 1490,
	0, 0, 0, 0, 1362, 0, 189, 0, 0, 0,
	217, 2423, 0, 0, 707, 0, 0, 0, 123, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1222, 0, 0, 217, 1512, 1514, 0,
	0, 0, 0, 217, 191, 0, 0, 3492, 0, 2458,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 2340,
	1414, 539, 0, 0, 2478, 0, 2700, 124, 0, 0,
	217, 0, 0, 217, 0, 217, 0, 217, 0, 0,
	0, 159, 1189, 0, 217, 217, 0, 0, 1505, 190,
	0, 3518, 0, 0, 2500, 712, 0, 2340, 2340, 183,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 217,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 1189, 217, 158, 1506,
	1222, 0, 1222, 0, 0, 1189, 0, 1189, 0, 1189,
	0, 0, 0, 0, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 217, 217, 217, 1189, 217, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 1554, 0, 0, 2695, 2696,
	2697, 1567, 0, 0, 0, 2694, 2692, 2693, 2685, 2686,
	2687, 2688, 2690, 2691, 0, 0, 1506, 0, 217, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 3341, 0, 0, 0, 3630, 0,
	0, 0, 0, 0, 0, 0, 1214, 0, 0, 0,
	0, 3349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 693, 1177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 676, 0, 0, 1625, 1625, 1625, 0, 0, 0,
	0, 0, 0, 0, 0, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 677, 0, 0, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 0, 1177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 698, 0, 1914, 0, 0, 0, 1091, 0, 0,
	0, 1214, 0, 0, 1925, 0, 0, 0, 680, 0,
	2208, 0, 0, 0, 0, 0, 0, 1934, 1935, 1936,
	0, 0, 0, 0, 0, 0, 0, 3484, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1177, 0, 0, 682, 0,
	0, 683, 0, 0, 2208, 0, 0, 217, 0, 0,
	609, 0, 539, 0, 0, 0, 0, 539, 3484, 0,
	539, 1177, 0, 539, 539, 0, 0, 0, 0, 539,
	0, 2033, 0, 0, 697, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	1482, 1483, 0, 0, 0, 0, 0, 0, 2033, 0,
	0, 0, 0, 0, 0, 0, 0, 2340, 2340, 217,
	0, 0, 1513, 2340, 0, 0, 2816, 0, 0, 1485,
	0, 0, 0, 0, 2340, 2816, 0, 2340, 2816, 2816,
	0, 0, 0, 0, 0, 0, 1177, 0, 0, 0,
	0, 217, 217, 217, 0, 0, 0, 0, 0, 1484,
	0, 2208, 0, 0, 0, 685, 0, 0, 0, 1504,
	0, 0, 0, 217, 1189, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 701, 2340, 686, 217, 2340,
	1269, 0, 0, 2340, 2340, 0, 0, 0, 1177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 2892, 0, 3002,
	2894, 2340, 687, 0, 217, 688, 0, 0, 217, 0,
	1269, 695, 0, 0, 689, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 2458, 1490, 0,
	1189, 0, 217, 0, 0, 2340, 0, 539, 0, 0,
	0, 0, 63, 0, 2340, 0, 0, 690, 696, 0,
	0, 0, 0, 217, 217, 691, 0, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 1512, 1514, 692, 0,
	0, 68, 0, 699, 0, 0, 0, 0, 217, 2458,
	0, 0, 2458, 0, 0, 0, 610, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 0, 694, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 2983,
	0, 0, 1189, 217, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 2008, 0, 2012, 0, 0, 0, 0,
	89, 0, 2026, 0, 0, 79, 86, 0, 217, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 0, 2075, 0, 2077, 2078, 2079,
	2080, 0, 0, 0, 80, 0, 0, 1511, 63, 0,
	0, 0, 0, 0, 3046, 0, 0, 0, 0, 2104,
	0, 0, 0, 0, 64, 1506, 2417, 0, 0, 0,
	0, 1554, 0, 0, 0, 2119, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2149, 2152, 2155, 2158, 0, 2162, 2163, 2164, 2165,
	2166, 2167, 2168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2204, 0, 2215, 2217, 2222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 2490, 217,
	217, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	81, 79, 86, 1214, 0, 0, 0, 0, 0, 0,
	0, 539, 539, 0, 0, 0, 0, 0, 0, 0,
	0, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 155, 84, 0,
	85, 0, 0, 0, 1222, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 0, 0, 0, 707, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1177, 0, 0, 0, 0, 0, 217, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 1177, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 217, 190, 0, 1177, 0, 0, 0, 0, 0,
	217, 0, 183, 0, 0, 0, 872, 0, 217, 0,
	184, 0, 0, 0, 0, 217, 81, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 0, 0, 2340, 217, 0, 0, 2425,
	0, 2427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2500, 2500, 155, 84, 0, 85, 712, 712, 2340,
	0, 0, 2458, 2458, 0, 0, 712, 2340, 0, 0,
	0, 0, 0, 0, 217, 189, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 0, 123, 1177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1482, 1483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 0, 1177, 0,
	1513, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 3306, 0, 0, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 0, 0, 1484, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 183, 0,
	0, 0, 2547, 0, 0, 1501, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 1222, 0, 217, 0, 0, 0, 2600, 1535, 1536,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 2340, 2340, 2340, 1490, 1177, 0, 0,
	1177, 0, 0, 0, 0, 0, 1222, 0, 0, 0,
	0, 0, 0, 0, 2340, 0, 2816, 0, 0, 1222,
	1222, 217, 0, 2594, 2595, 0, 0, 0, 0, 2601,
	0, 0, 217, 217, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 2340, 130, 2340, 217, 0, 2615, 2616,
	0, 63, 0, 0, 2119, 0, 0, 2340, 1499, 1500,
	0, 3426, 0, 2623, 0, 0, 0, 64, 0, 125,
	217, 1177, 0, 0, 0, 0, 0, 217, 0, 2637,
	68, 0, 0, 0, 0, 1505, 0, 0, 1177, 0,
	58, 0, 0, 0, 0, 2884, 2649, 42, 0, 127,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 0,
	1222, 0, 0, 41, 0, 73, 0, 0, 0, 2907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2913, 0, 0, 0, 0, 0, 0, 44, 59, 0,
	0, 0, 0, 45, 0, 218, 0, 0, 78, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 43, 89,
	0, 0, 0, 0, 79, 86, 0, 0, 218, 0,
	0, 2222, 2222, 2222, 0, 1511, 0, 0, 0, 0,
	0, 0, 2958, 2959, 0, 0, 1625, 0, 218, 0,
	0, 0, 0, 1506, 2740, 46, 0, 0, 0, 0,
	0, 0, 2340, 0, 2816, 0, 0, 3512, 0, 0,
	0, 0, 0, 80, 0, 217, 0, 0, 1177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 586,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2683, 2684, 858, 2701, 2702, 2703, 3512,
	0, 0, 0, 0, 0, 1482, 1483, 2340, 0, 858,
	0, 0, 0, 0, 3014, 0, 0, 3582, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1222,
	0, 0, 0, 0, 1485, 0, 2833, 0, 0, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 0, 217, 217, 0, 0, 0, 0, 0, 81,
	0, 0, 2698, 0, 1484, 0, 0, 0, 0, 47,
	0, 0, 0, 905, 1504, 0, 3046, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	60, 3512, 0, 0, 0, 50, 155, 84, 0, 85,
	0, 48, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 216, 0, 0, 189, 0,
	0, 0, 0, 0, 2593, 0, 53, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 217, 0, 622, 0,
	126, 2689, 0, 1507, 1508, 1509, 1510, 0, 3426, 0,
	0, 1177, 0, 1490, 0, 0, 191, 0, 622, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	2816, 0, 0, 1177, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1512, 1514, 159, 2704, 1222, 0, 1222, 0, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 1499, 1500, 0, 0, 184,
	0, 0, 3717, 0, 0, 0, 0, 0, 1222, 0,
	2699, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 0, 1505, 3, 0, 217, 2340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 1026, 0, 0, 0, 2026,
	0, 0, 0, 0, 0, 3000, 3001, 0, 0, 3004,
	0, 0, 0, 3007, 0, 0, 0, 0, 3046, 0,
	0, 0, 3011, 1177, 0, 1177, 3200, 0, 0, 0,
	0, 3018, 0, 0, 2740, 0, 0, 0, 0, 0,
	0, 1019, 1177, 0, 0, 0, 0, 0, 0, 3030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 2340, 0, 0, 0, 2700, 3053,
	3054, 0, 3055, 3056, 3057, 0, 0, 0, 0, 0,
	1506, 0, 0, 212, 0, 3512, 0, 1177, 0, 0,
	3063, 0, 1177, 0, 3065, 3251, 3252, 3253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1222, 0, 2340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3093, 3094, 0, 0, 0,
	0, 0, 1177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3114, 0,
	0, 0, 0, 218, 1097, 218, 218, 0, 1097, 218,
	218, 1097, 0, 0, 0, 1097, 0, 0, 1177, 0,
	2695, 2696, 2697, 218, 0, 0, 0, 2694, 2692, 2693,
	2685, 2686, 2687, 2688, 2690, 2691, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1177, 0,
	0, 0, 0, 0, 0, 3144, 0, 0, 0, 0,
	0, 1482, 1483, 0, 1097, 218, 218, 0, 0, 0,
	3153, 3156, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 1513, 0, 0, 0, 0, 0, 1177,
	1485, 0, 0, 0, 0, 0, 3176, 0, 218, 218,
	218, 0, 1177, 218, 1097, 0, 0, 0, 1097, 0,
	0, 0, 1097, 218, 218, 0, 0, 0, 0, 0,
	1484, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 872, 0, 1501, 0,
	0, 0, 0, 894, 91, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1625, 0, 0, 1177, 0, 0, 218,
	0, 0, 3245, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 218, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 216, 216, 1512, 1514, 216,
	216, 0, 0, 0, 0, 3284, 3285, 0, 0, 0,
	0, 3289, 3290, 622, 0, 0, 3293, 3294, 0, 0,
	0, 1499, 1500, 3298, 0, 0, 0, 0, 2683, 2684,
	0, 2701, 2702, 2703, 3302, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 1505, 3013,
	3307, 0, 853, 0, 0, 216, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1013, 0, 0, 216, 216,
	216, 0, 0, 216, 0, 0, 0, 2698, 0, 0,
	0, 0, 0, 216, 216, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1513, 0, 0, 0, 0, 0, 0, 1485, 1511, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 1506, 0, 0, 0,
	3156, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 218, 0, 2689, 1504, 0, 216,
	0, 0, 0, 0, 0, 1501, 0, 1097, 0, 218,
	218, 218, 0, 216, 0, 0, 218, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2704,
	0, 1088, 0, 0, 1097, 0, 0, 1196, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 3156, 0, 0, 2699, 0, 0, 0, 0,
	0, 0, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 1522, 0, 0, 1532, 3479,
	3480, 3481, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 0,
	0, 0, 2026, 0, 0, 3490, 3491, 0, 1499, 1500,
	0, 0, 0, 0, 0, 0, 1322, 1322, 1322, 0,
	0, 0, 0, 3499, 1520, 0, 0, 0, 0, 0,
	0, 1355, 1356, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	1097, 218, 0, 2700, 0, 3156, 0, 1097, 0, 0,
	0, 0, 0, 3536, 0, 0, 0, 0, 0, 0,
	0, 0, 3543, 0, 0, 858, 0, 0, 0, 0,
	0, 3550, 0, 0, 0, 0, 0, 0, 1647, 0,
	1026, 0, 0, 0, 216, 218, 0, 1435, 0, 218,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 216,
	1647, 216, 0, 0, 0, 1511, 622, 0, 0, 0,
	0, 622, 218, 0, 218, 0, 218, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3156, 3156, 0, 0,
	0, 0, 0, 0, 0, 1523, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 2695, 2696, 2697, 0, 0,
	0, 0, 2694, 2692, 2693, 2685, 2686, 2687, 2688, 2690,
	2691, 0, 0, 1097, 0, 1097, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1097, 218,
	3642, 0, 218, 3645, 91, 0, 91, 0, 91, 0,
	0, 1097, 1097, 1097, 0, 0, 0, 0, 0, 0,
	0, 3156, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 218, 0, 218, 0, 218, 0, 218, 0,
	218, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 0, 0, 0, 3156, 0, 0, 3156, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 853, 91,
	91, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 622, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2026, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 2683, 2684, 216, 2701, 2702, 2703, 216,
	0, 0, 858, 0, 216, 0, 0, 1672, 0, 1196,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 216, 0, 216, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3772, 3772, 3772,
	1513, 0, 0, 0, 0, 0, 0, 1485, 0, 0,
	0, 0, 2698, 216, 1531, 0, 1097, 0, 0, 0,
	3793, 0, 0, 2683, 2684, 0, 2701, 2702, 2703, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 834,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 216,
	0, 0, 216, 0, 0, 1501, 0, 0, 0, 1547,
	0, 0, 3772, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 1553, 0, 0, 0,
	1559, 622, 216, 0, 216, 1097, 216, 0, 216, 0,
	216, 2689, 2698, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3156, 218, 3156,
	0, 1097, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	216, 0, 0, 2705, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2704, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 0, 0, 1532, 0,
	0, 3772, 3892, 0, 1512, 1514, 0, 0, 0, 3896,
	0, 2689, 0, 0, 0, 0, 1097, 0, 0, 1528,
	2699, 1529, 0, 1852, 0, 0, 0, 1859, 1499, 1500,
	0, 0, 0, 0, 0, 0, 0, 0, 1645, 0,
	1648, 0, 91, 0, 1520, 0, 1097, 0, 0, 0,
	1298, 0, 1878, 0, 1878, 1505, 0, 0, 0, 218,
	0, 0, 0, 0, 2704, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 1196, 0, 0, 0, 0, 0, 218, 1097, 0,
	2699, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1859, 2700, 0,
	1929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 1511, 0, 0, 0, 218,
	1946, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	1956, 0, 1958, 1506, 1960, 0, 1962, 0, 1963, 0,
	0, 0, 0, 0, 1026, 0, 218, 0, 0, 218,
	0, 218, 0, 218, 0, 1523, 0, 0, 216, 0,
	218, 218, 1097, 1097, 0, 1097, 0, 0, 1980, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 2700, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 218, 0, 0, 0, 0, 0, 0,
	2695, 2696, 2697, 0, 0, 0, 0, 2694, 2692, 2693,
	2685, 2686, 2687, 2688, 2690, 2691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 218, 218, 218,
	0, 218, 1521, 218, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	216, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	2695, 2696, 2697, 216, 0, 0, 0, 2694, 2692, 2693,
	2685, 2686, 2687, 2688, 2690, 2691, 0, 216, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 853, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 0, 0, 216,
	0, 216, 0, 216, 0, 0, 2278, 0, 0, 0,
	216, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 216, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 834, 834, 0, 0, 0, 216, 216, 216, 216,
	0, 216, 0, 216, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 1097, 216, 0, 0, 0, 2093, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 853, 0, 0, 1196, 0, 0, 0, 0,
	0, 0, 1553, 0, 1097, 0, 1553, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	1859, 0, 0, 0, 0, 0, 0, 2449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 218, 218,
	0, 0, 0, 0, 2480, 0, 218, 1322, 1013, 1322,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 1648, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 218, 0, 0, 1097, 0, 0,
	0, 0, 0, 2526, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 91, 0, 0, 1097, 2534,
	0, 2537, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 1097, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2558, 1196, 2560, 1196, 0, 2563,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	218, 0, 0, 1026, 0, 0, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 1097, 1097, 0, 0,
	2591, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 91, 1647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 1097, 0, 218,
	1097, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 91, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 216, 216,
	0, 0, 0, 0, 0, 0, 1647, 0, 0, 0,
	0, 91, 0, 0, 91, 0, 0, 0, 0, 216,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 1030,
	0, 0, 0, 1030, 0, 0, 1030, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1026, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 216,
	216, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 1030,
	0, 0, 0, 1030, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 0, 2808, 0, 0, 0, 0, 2093, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 1553,
	0, 0, 0, 0, 0, 2846, 2848, 2449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1097, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 2904, 0,
	0, 218, 2908, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	1097, 1097, 0, 0, 0, 0, 0, 1196, 1196, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1013, 0,
	218, 1097, 0, 0, 0, 1026, 1026, 0, 0, 0,
	0, 0, 2962, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2986, 0, 1196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2998, 1030, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	91, 91, 0, 0, 91, 1701, 0, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 1097, 0, 1097, 0, 0, 0, 0,
	0, 0, 91, 91, 0, 0, 91, 216, 0, 1030,
	1095, 0, 1097, 0, 1095, 0, 216, 1212, 0, 0,
	0, 1212, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 1026, 0, 0, 0, 0, 1097, 218, 218,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	1212, 0, 218, 0, 0, 0, 0, 0, 1013, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 1097, 218, 0, 0, 0, 1097, 91, 91,
	1212, 0, 0, 0, 1212, 0, 0, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1030, 1030, 0, 0, 1097, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	1094, 0, 0, 1211, 0, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 1026,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 1647, 0, 0, 2449, 0, 0, 0, 0,
	0, 0, 0, 0, 3215, 0, 1211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3227,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 1097,
	1030, 0, 1030, 0, 0, 0, 0, 216, 0, 0,
	1030, 0, 0, 1030, 0, 0, 1211, 0, 216, 216,
	1211, 0, 0, 0, 1211, 0, 1030, 1030, 1030, 0,
	0, 0, 216, 0, 1211, 0, 1097, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 3269, 0,
	0, 0, 0, 0, 0, 0, 216, 91, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 218, 218,
	0, 0, 0, 0, 0, 1013, 1013, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1701, 1701, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 756, 0, 792, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 763,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	1097, 1097, 0, 0, 0, 775, 761, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 1097, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 1030, 0, 0, 0, 765, 0, 0, 0, 0,
	798, 0, 0, 0, 0, 0, 0, 0, 772, 773,
	0, 0, 0, 0, 785, 3388, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 2449, 0, 793, 767,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 791,
	1030, 0, 0, 0, 2449, 0, 0, 0, 0, 1030,
	0, 3441, 0, 0, 0, 0, 0, 91, 216, 216,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 768, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1212, 1212, 0, 0, 1094,
	0, 769, 770, 1095, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 777, 776,
	0, 0, 0, 0, 0, 1211, 771, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 797, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 0, 794, 0, 0, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 1701, 3519,
	0, 1013, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 764, 0, 1030, 0, 789, 790, 1212,
	0, 1212, 0, 1212, 0, 0, 0, 216, 0, 0,
	0, 1212, 0, 0, 1212, 0, 0, 0, 0, 0,
	0, 216, 0, 787, 0, 0, 0, 1212, 1212, 1212,
	783, 0, 0, 780, 0, 0, 0, 0, 216, 781,
	0, 0, 758, 0, 795, 0, 0, 0, 0, 0,
	0, 1211, 1211, 0, 0, 0, 0, 0, 0, 1094,
	759, 0, 0, 0, 0, 91, 3620, 1196, 0, 0,
	0, 782, 0, 0, 0, 91, 779, 1030, 1030, 0,
	1030, 0, 0, 0, 0, 796, 0, 0, 0, 637,
	0, 0, 1030, 784, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 638, 786, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 0, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 640, 0, 3682, 641, 0, 0, 0,
	0, 0, 0, 0, 0, 1211, 0, 1211, 0, 1211,
	0, 0, 0, 664, 0, 0, 0, 1211, 0, 642,
	1211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	662, 0, 0, 1211, 1211, 1211, 0, 0, 0, 0,
	1482, 1483, 1095, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	643, 0, 0, 615, 0, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 3725, 0, 0, 0, 1485,
	644, 0, 0, 645, 0, 0, 1531, 0, 666, 3742,
	0, 0, 609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3754, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 1095, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2093,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 646, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 0, 649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1522, 0, 0,
	1532, 0, 0, 1030, 1030, 0, 1512, 1514, 1094, 650,
	0, 0, 1095, 91, 0, 0, 0, 0, 1030, 0,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 1030, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 658, 1030, 0,
	0, 0, 0, 1030, 0, 0, 651, 1505, 0, 0,
	0, 0, 0, 0, 1095, 1701, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 656, 1212, 1094, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 652,
	0, 0, 669, 0, 668, 0, 0, 653, 1519, 0,
	0, 0, 0, 1094, 0, 0, 1701, 0, 0, 0,
	654, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	670, 0, 667, 0, 0, 0, 0, 0, 610, 0,
	0, 91, 0, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1212, 1212,
	0, 1212, 0, 1030, 0, 1506, 0, 0, 1211, 0,
	0, 0, 1030, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1030, 0, 0, 1523, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1211, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 1030, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 3314, 0, 0,
	0, 3313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1211, 1211, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1701, 1701, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1701, 1701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1701, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526, 1527,
	1030, 1030, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 0, 0, 1095, 0, 0, 1531, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 1095, 0, 0, 0, 0, 1490,
	0, 0, 0, 1212, 0, 1030, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 1212, 0, 1701, 0, 0,
	0, 1094, 0, 0, 1095, 0, 0, 0, 1522, 0,
	0, 1532, 0, 0, 0, 0, 0, 1512, 1514, 1212,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	1212, 0, 1528, 1094, 1529, 0, 0, 1030, 0, 0,
	0, 1499, 1500, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 1030, 1030, 1030, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 1505, 0,
	1030, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 1212, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 1211,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 1211, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 1523, 0,
	0, 0, 0, 0, 0, 1211, 1030, 1095, 0, 0,
	0, 0, 0, 0, 1030, 0, 1211, 0, 1030, 0,
	1030, 0, 0, 0, 1095, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1211, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 1521, 0, 1030, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 1094, 0, 0, 0, 0, 1030, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 0, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 1030, 0, 0, 0, 0, 1485, 0,
	1094, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 1701, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 1030, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 1212, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1701, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1212, 1030, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 1212, 1212, 1212, 0, 0,
	1094, 1030, 0, 0, 1030, 0, 0, 0, 0, 0,
	0, 1212, 0, 0, 0, 0, 1522, 1095, 0, 1532,
	0, 0, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	1528, 0, 1529, 0, 0, 0, 0, 0, 0, 1499,
	1500, 0, 0, 1701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1211, 0, 0, 1211, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 1211,
	0, 0, 0, 0, 0, 1030, 1030, 0, 0, 1095,
	0, 1095, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 1095, 0,
	0, 1211, 1211, 1211, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 0, 0,
	0, 0, 0, 1094, 0, 0, 1523, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 1094, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1212, 0, 1518, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 1484, 1095, 0, 2658, 0, 0, 0,
	2659, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 1094, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 1095, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 0, 1532, 0, 0, 0, 0, 0,
	1512, 1514, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 1094, 1528, 0, 1529, 0, 1211,
	0, 0, 0, 0, 1499, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 1095, 0, 0, 1212, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 0, 0, 0, 0, 1212, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1212, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 1211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 2115, 0, 0, 0, 2116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 1211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1211, 1211, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 1098, 232, 233, 1099, 1100, 1101, 1211,
	1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 1107,
	242, 243, 244, 245, 246, 1108, 1109, 0, 247, 490,
	491, 492, 1110, 248, 249, 493, 1111, 1178, 1112, 250,
	251, 252, 253, 254, 255, 256, 0, 1113, 258, 259,
	260, 257, 1114, 261, 0, 262, 263, 264, 1115, 265,
	971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122,
	268, 269, 270, 271, 0, 272, 494, 495, 1123, 276,
	273, 274, 1124, 277, 275, 1125, 278, 1126, 1127, 279,
	280, 281, 1128, 282, 1129, 283, 284, 1130, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 1131, 223, 1132, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 1133, 301, 1134,
	1135, 972, 302, 303, 500, 501, 304, 305, 1136, 306,
	502, 1137, 503, 307, 1138, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 974, 313, 314, 1139, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 1140,
	973, 321, 507, 508, 1141, 509, 1142, 323, 975, 510,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1143, 334, 333, 1144, 335, 511,
	978, 336, 337, 979, 1145, 338, 339, 340, 1146, 1147,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 1148, 225, 982, 363,
	1149, 512, 364, 513, 366, 367, 1150, 0, 368, 0,
	1151, 1152, 370, 371, 372, 1153, 1154, 373, 374, 514,
	983, 375, 984, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 1155, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 1156, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 1157, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 1158, 409, 985, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 1159, 427, 428, 426, 429, 430, 431, 1160, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	1161, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 1162, 449, 450, 0, 448, 1163,
	451, 452, 453, 454, 455, 291, 456, 1164, 457, 525,
	526, 527, 528, 1165, 464, 1166, 458, 459, 529, 460,
	530, 1167, 461, 462, 463, 0, 465, 466, 1168, 1169,
	467, 468, 469, 471, 472, 470, 473, 1170, 474, 1171,
	0, 475, 476, 477, 531, 532, 533, 1172, 479, 478,
	534, 1173, 1174, 1175, 1176, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 0,
	0, 2256, 0, 0, 0, 0, 0, 0, 0, 2257,
	226, 227, 228, 229, 230, 231, 1098, 232, 233, 1099,
	1100, 1101, 0, 1102, 485, 1103, 1104, 1105, 1106, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 1107, 242, 243, 244, 245, 246, 1108, 1109,
	0, 247, 490, 491, 492, 1110, 248, 249, 493, 1111,
	1178, 1112, 250, 251, 252, 253, 254, 255, 256, 0,
	1113, 258, 259, 260, 257, 1114, 261, 0, 262, 263,
	264, 1115, 265, 971, 266, 267, 1116, 1117, 1119, 1118,
	1120, 1121, 1122, 268, 269, 270, 271, 0, 272, 494,
	495, 1123, 276, 273, 274, 1124, 277, 275, 1125, 278,
	1126, 1127, 279, 280, 281, 1128, 282, 1129, 283, 284,
	1130, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 1131, 223, 1132, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	1133, 301, 1134, 1135, 972, 302, 303, 500, 501, 304,
	305, 1136, 306, 502, 1137, 503, 307, 1138, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 974, 313, 314,
	1139, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 1140, 973, 321, 507, 508, 1141, 509, 1142,
	323, 975, 510, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 1143, 334, 333,
	1144, 335, 511, 978, 336, 337, 979, 1145, 338, 339,
	340, 1146, 1147, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 1148,
	225, 982, 363, 1149, 512, 364, 513, 366, 367, 1150,
	0, 368, 0, 1151, 1152, 370, 371, 372, 1153, 1154,
	373, 374, 514, 983, 375, 984, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 1155, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 1156, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	1157, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 1158, 409, 985, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 1159, 427, 428, 426, 429, 430,
	431, 1160, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 1161, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 1162, 449, 450,
	0, 448, 1163, 451, 452, 453, 454, 455, 291, 456,
	1164, 457, 525, 526, 527, 528, 1165, 464, 1166, 458,
	459, 529, 460, 530, 1167, 461, 462, 463, 0, 465,
	466, 1168, 1169, 467, 468, 469, 471, 472, 470, 473,
	1170, 474, 1171, 0, 475, 476, 477, 531, 532, 533,
	1172, 479, 478, 534, 1173, 1174, 1175, 1176, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 0, 3024,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3026, 226, 227, 228, 229, 230, 231, 1098, 232, 233,
	1099, 1100, 1101, 0, 1102, 485, 1103, 1104, 1105, 1106,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 1107, 242, 243, 244, 245, 246, 1108,
	1109, 0, 247, 490, 491, 492, 1110, 248, 249, 493,
	1111, 1178, 1112, 250, 251, 252, 253, 254, 255, 256,
	0, 1113, 258, 259, 260, 257, 1114, 261, 0, 262,
	263, 264, 1115, 265, 971, 266, 267, 1116, 1117, 1119,
	1118, 1120, 1121, 1122, 268, 269, 270, 271, 0, 272,
	494, 495, 1123, 276, 273, 274, 1124, 277, 275, 1125,
	278, 1126, 1127, 279, 280, 281, 1128, 282, 1129, 283,
	284, 1130, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 1131, 223, 1132, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 1133, 301, 1134, 1135, 972, 302, 303, 500, 501,
	304, 305, 1136, 306, 502, 1137, 503, 307, 1138, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 974, 313,
	314, 1139, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 1140, 973, 321, 507, 508, 1141, 509,
	1142, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 1143, 334,
	333, 1144, 335, 511, 978, 336, 337, 979, 1145, 338,
	339, 340, 1146, 1147, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	1148, 225, 982, 363, 1149, 512, 364, 513, 366, 367,
	1150, 0, 368, 0, 1151, 1152, 370, 371, 372, 1153,
	1154, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 1155, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 1156, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 1157, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 1158, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 1159, 427, 428, 426, 429,
	430, 431, 1160, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 1161, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 1162, 449,
	450, 0, 448, 1163, 451, 452, 453, 454, 455, 291,
	456, 1164, 457, 525, 526, 527, 528, 1165, 464, 1166,
	458, 459, 529, 460, 530, 1167, 461, 462, 463, 0,
	465, 466, 1168, 1169, 467, 468, 469, 471, 472, 470,
	473, 1170, 474, 1171, 0, 475, 476, 477, 531, 532,
	533, 1172, 479, 478, 534, 1173, 1174, 1175, 1176, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3340, 226, 227, 228, 229,
	230, 231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102,
	485, 1103, 1104, 1105, 1106, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 1107, 242,
	243, 244, 245, 246, 1108, 1109, 0, 247, 490, 491,
	492, 1110, 248, 249, 493, 1111, 1178, 1112, 250, 251,
	252, 253, 254, 255, 256, 0, 1113, 258, 259, 260,
	257, 1114, 261, 0, 262, 263, 264, 1115, 265, 971,
	266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268,
	269, 270, 271, 0, 272, 494, 495, 1123, 276, 273,
	274, 1124, 277, 275, 1125, 278, 1126, 1127, 279, 280,
	281, 1128, 282, 1129, 283, 284, 1130, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 1131, 223, 1132, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 1133, 301, 1134, 1135,
	972, 302, 303, 500, 501, 304, 305, 1136, 306, 502,
	1137, 503, 307, 1138, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 1139, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 1140, 973,
	321, 507, 508, 1141, 509, 1142, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 1143, 334, 333, 1144, 335, 511, 978,
	336, 337, 979, 1145, 338, 339, 340, 1146, 1147, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 1148, 225, 982, 363, 1149,
	512, 364, 513, 366, 367, 1150, 0, 368, 0, 1151,
	1152, 370, 371, 372, 1153, 1154, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 1155, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 1156, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 1157, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 1158, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	1159, 427, 428, 426, 429, 430, 431, 1160, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 1161,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 1162, 449, 450, 0, 448, 1163, 451,
	452, 453, 454, 455, 291, 456, 1164, 457, 525, 526,
	527, 528, 1165, 464, 1166, 458, 459, 529, 460, 530,
	1167, 461, 462, 463, 0, 465, 466, 1168, 1169, 467,
	468, 469, 471, 472, 470, 473, 1170, 474, 1171, 0,
	475, 476, 477, 531, 532, 533, 1172, 479, 478, 534,
	1173, 1174, 1175, 1176, 480, 481, 535, 482, 483, 484,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3485, 0, 226, 227, 228,
	229, 230, 231, 1098, 232, 233, 1099, 1100, 1101, 0,
	1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 1107,
	242, 243, 244, 245, 246, 1108, 1109, 0, 247, 490,
	491, 492, 1110, 248, 249, 493, 1111, 1178, 1112, 250,
	251, 252, 253, 254, 255, 256, 0, 1113, 258, 259,
	260, 257, 1114, 261, 0, 262, 263, 264, 1115, 265,
	971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122,
	268, 269, 270, 271, 0, 272, 494, 495, 1123, 276,
	273, 274, 1124, 277, 275, 1125, 278, 1126, 1127, 279,
	280, 281, 1128, 282, 1129, 283, 284, 1130, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 1131, 223, 1132, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 1133, 301, 1134,
	1135, 972, 302, 303, 500, 501, 304, 305, 1136, 306,
	502, 1137, 503, 307, 1138, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 974, 313, 314, 1139, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 1140,
	973, 321, 507, 508, 1141, 509, 1142, 323, 975, 510,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1143, 334, 333, 1144, 335, 511,
	978, 336, 337, 979, 1145, 338, 339, 340, 1146, 1147,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 1148, 225, 982, 363,
	1149, 512, 364, 513, 366, 367, 1150, 0, 368, 0,
	1151, 1152, 370, 371, 372, 1153, 1154, 373, 374, 514,
	983, 375, 984, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 1155, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 1156, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 1157, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 1158, 409, 985, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 1159, 427, 428, 426, 429, 430, 431, 1160, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	1161, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 1162, 449, 450, 0, 448, 1163,
	451, 452, 453, 454, 455, 291, 456, 1164, 457, 525,
	526, 527, 528, 1165, 464, 1166, 458, 459, 529, 460,
	530, 1167, 461, 462, 463, 0, 465, 466, 1168, 1169,
	467, 468, 469, 471, 472, 470, 473, 1170, 474, 1171,
	0, 475, 476, 477, 531, 532, 533, 1172, 479, 478,
	534, 1173, 1174, 1175, 1176, 480, 481, 535, 482, 483,
	484, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3395, 0, 226, 227,
	228, 229, 230, 231, 1098, 232, 233, 1099, 1100, 1101,
	0, 1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	1107, 242, 243, 244, 245, 246, 1108, 1109, 0, 247,
	490, 491, 492, 1110, 248, 249, 493, 1111, 1178, 1112,
	250, 251, 252, 253, 254, 255, 256, 0, 1113, 258,
	259, 260, 257, 1114, 261, 0, 262, 263, 264, 1115,
	265, 971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121,
	1122, 268, 269, 270, 271, 0, 272, 494, 495, 1123,
	276, 273, 274, 1124, 277, 275, 1125, 278, 1126, 1127,
	279, 280, 281, 1128, 282, 1129, 283, 284, 1130, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 1131, 223, 1132, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 1133, 301,
	1134, 1135, 972, 302, 303, 500, 501, 304, 305, 1136,
	306, 502, 1137, 503, 307, 1138, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 1139, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	1140, 973, 321, 507, 508, 1141, 509, 1142, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 1143, 334, 333, 1144, 335,
	511, 978, 336, 337, 979, 1145, 338, 339, 340, 1146,
	1147, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 1148, 225, 982,
	363, 1149, 512, 364, 513, 366, 367, 1150, 0, 368,
	0, 1151, 1152, 370, 371, 372, 1153, 1154, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 1155, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 1156, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 1157, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 1158, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 1159, 427, 428, 426, 429, 430, 431, 1160,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 1161, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 1162, 449, 450, 0, 448,
	1163, 451, 452, 453, 454, 455, 291, 456, 1164, 457,
	525, 526, 527, 528, 1165, 464, 1166, 458, 459, 529,
	460, 530, 1167, 461, 462, 463, 0, 465, 466, 1168,
	1169, 467, 468, 469, 471, 472, 470, 473, 1170, 474,
	1171, 0, 475, 476, 477, 531, 532, 533, 1172, 479,
	478, 534, 1173, 1174, 1175, 1176, 480, 481, 535, 482,
	483, 484, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3270, 0, 226,
	227, 228, 229, 230, 231, 1098, 232, 233, 1099, 1100,
	1101, 0, 1102, 485, 1103, 1104, 1105, 1106, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 1107, 242, 243, 244, 245, 246, 1108, 1109, 0,
	247, 490, 491, 492, 1110, 248, 249, 493, 1111, 1178,
	1112, 250, 251, 252, 253, 254, 255, 256, 0, 1113,
	258, 259, 260, 257, 1114, 261, 0, 262, 263, 264,
	1115, 265, 971, 266, 267, 1116, 1117, 1119, 1118, 1120,
	1121, 1122, 268, 269, 270, 271, 0, 272, 494, 495,
	1123, 276, 273, 274, 1124, 277, 275, 1125, 278, 1126,
	1127, 279, 280, 281, 1128, 282, 1129, 283, 284, 1130,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 1131, 223, 1132, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 1133,
	301, 1134, 1135, 972, 302, 303, 500, 501, 304, 305,
	1136, 306, 502, 1137, 503, 307, 1138, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 974, 313, 314, 1139,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 1140, 973, 321, 507, 508, 1141, 509, 1142, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 1143, 334, 333, 1144,
	335, 511, 978, 336, 337, 979, 1145, 338, 339, 340,
	1146, 1147, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 1148, 225,
	982, 363, 1149, 512, 364, 513, 366, 367, 1150, 0,
	368, 0, 1151, 1152, 370, 371, 372, 1153, 1154, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 1155, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 1156, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 1157,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 1158, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 1159, 427, 428, 426, 429, 430, 431,
	1160, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 1161, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 1162, 449, 450, 0,
	448, 1163, 451, 452, 453, 454, 455, 291, 456, 1164,
	457, 525, 526, 527, 528, 1165, 464, 1166, 458, 459,
	529, 460, 530, 1167, 461, 462, 463, 0, 465, 466,
	1168, 1169, 467, 468, 469, 471, 472, 470, 473, 1170,
	474, 1171, 0, 475, 476, 477, 531, 532, 533, 1172,
	479, 478, 534, 1173, 1174, 1175, 1176, 480, 481, 535,
	482, 483, 484, 1092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3042, 0,
	226, 227, 228, 229, 230, 231, 1098, 232, 233, 1099,
	1100, 1101, 0, 1102, 485, 1103, 1104, 1105, 1106, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 1107, 242, 243, 244, 245, 246, 1108, 1109,
	0, 247, 490, 491, 492, 1110, 248, 249, 493, 1111,
	1178, 1112, 250, 251, 252, 253, 254, 255, 256, 0,
	1113, 258, 259, 260, 257, 1114, 261, 0, 262, 263,
	264, 1115, 265, 971, 266, 267, 1116, 1117, 1119, 1118,
	1120, 1121, 1122, 268, 269, 270, 271, 0, 272, 494,
	495, 1123, 276, 273, 274, 1124, 277, 275, 1125, 278,
	1126, 1127, 279, 280, 281, 1128, 282, 1129, 283, 284,
	1130, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 1131, 223, 1132, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	1133, 301, 1134, 1135, 972, 302, 303, 500, 501, 304,
	305, 1136, 306, 502, 1137, 503, 307, 1138, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 974, 313, 314,
	1139, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 1140, 973, 321, 507, 508, 1141, 509, 1142,
	323, 975, 510, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 1143, 334, 333,
	1144, 335, 511, 978, 336, 337, 979, 1145, 338, 339,
	340, 1146, 1147, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 1148,
	225, 982, 363, 1149, 512, 364, 513, 366, 367, 1150,
	0, 368, 0, 1151, 1152, 370, 371, 372, 1153, 1154,
	373, 374, 514, 983, 375, 984, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 1155, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 1156, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	1157, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 1158, 409, 985, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 1159, 427, 428, 426, 429, 430,
	431, 1160, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 1161, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 1162, 449, 450,
	0, 448, 1163, 451, 452, 453, 454, 455, 291, 456,
	1164, 457, 525, 526, 527, 528, 1165, 464, 1166, 458,
	459, 529, 460, 530, 1167, 461, 462, 463, 0, 465,
	466, 1168, 1169, 467, 468, 469, 471, 472, 470, 473,
	1170, 474, 1171, 0, 475, 476, 477, 531, 532, 533,
	1172, 479, 478, 534, 1173, 1174, 1175, 1176, 480, 481,
	535, 482, 483, 484, 1092, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2891,
	0, 226, 227, 228, 229, 230, 231, 1098, 232, 233,
	1099, 1100, 1101, 0, 1102, 485, 1103, 1104, 1105, 1106,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 1107, 242, 243, 244, 245, 246, 1108,
	1109, 0, 247, 490, 491, 492, 1110, 248, 249, 493,
	1111, 1178, 1112, 250, 251, 252, 253, 254, 255, 256,
	0, 1113, 258, 259, 260, 257, 1114, 261, 0, 262,
	263, 264, 1115, 265, 971, 266, 267, 1116, 1117, 1119,
	1118, 1120, 1121, 1122, 268, 269, 270, 271, 0, 272,
	494, 495, 1123, 276, 273, 274, 1124, 277, 275, 1125,
	278, 1126, 1127, 279, 280, 281, 1128, 282, 1129, 283,
	284, 1130, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 1131, 223, 1132, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 1133, 301, 1134, 1135, 972, 302, 303, 500, 501,
	304, 305, 1136, 306, 502, 1137, 503, 307, 1138, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 974, 313,
	314, 1139, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 1140, 973, 321, 507, 508, 1141, 509,
	1142, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 1143, 334,
	333, 1144, 335, 511, 978, 336, 337, 979, 1145, 338,
	339, 340, 1146, 1147, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	1148, 225, 982, 363, 1149, 512, 364, 513, 366, 367,
	1150, 0, 368, 0, 1151, 1152, 370, 371, 372, 1153,
	1154, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 1155, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 1156, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 1157, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 1158, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 1159, 427, 428, 426, 429,
	430, 431, 1160, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 1161, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 1162, 449,
	450, 0, 448, 1163, 451, 452, 453, 454, 455, 291,
	456, 1164, 457, 525, 526, 527, 528, 1165, 464, 1166,
	458, 459, 529, 460, 530, 1167, 461, 462, 463, 0,
	465, 466, 1168, 1169, 467, 468, 469, 471, 472, 470,
	473, 1170, 474, 1171, 0, 475, 476, 477, 531, 532,
	533, 1172, 479, 478, 534, 1173, 1174, 1175, 1176, 480,
	481, 535, 482, 483, 484, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2139, 0, 226, 227, 228, 229, 230, 231, 1098, 232,
	233, 1099, 1100, 1101, 0, 1102, 485, 1103, 1104, 1105,
	1106, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 1107, 242, 243, 244, 245, 246,
	1108, 1109, 0, 247, 490, 491, 492, 1110, 248, 249,
	493, 1111, 1178, 1112, 250, 251, 252, 253, 254, 255,
	256, 0, 1113, 258, 259, 260, 257, 1114, 261, 0,
	262, 263, 264, 1115, 265, 971, 266, 267, 1116, 1117,
	1119, 1118, 1120, 1121, 1122, 268, 269, 270, 271, 0,
	272, 494, 495, 1123, 276, 273, 274, 1124, 277, 275,
	1125, 278, 1126, 1127, 279, 280, 281, 1128, 282, 1129,
	283, 284, 1130, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 1131, 223, 1132,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 1133, 301, 1134, 1135, 972, 302, 303, 500,
	501, 304, 305, 1136, 306, 502, 1137, 503, 307, 1138,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 1139, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 1140, 973, 321, 507, 508, 1141,
	509, 1142, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 1143,
	334, 333, 1144, 335, 511, 978, 336, 337, 979, 1145,
	338, 339, 340, 1146, 1147, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 1148, 225, 982, 363, 1149, 512, 364, 513, 366,
	367, 1150, 0, 368, 0, 1151, 1152, 370, 371, 372,
	1153, 1154, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 1155,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 1156,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 1157, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 1158, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 1159, 427, 428, 426,
	429, 430, 431, 1160, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 1161, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 1162,
	449, 450, 0, 448, 1163, 451, 452, 453, 454, 455,
	291, 456, 1164, 457, 525, 526, 527, 528, 1165, 464,
	1166, 458, 459, 529, 460, 530, 1167, 461, 462, 463,
	0, 465, 466, 1168, 1169, 467, 468, 469, 471, 472,
	470, 473, 1170, 474, 1171, 0, 475, 476, 477, 531,
	532, 533, 1172, 479, 478, 534, 1173, 1174, 1175, 1176,
	480, 481, 535, 482, 483, 484, 1190, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1835, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102, 485,
	1103, 1104, 1105, 1106, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 1107, 242, 243,
	244, 245, 246, 1108, 1109, 0, 247, 490, 491, 492,
	1110, 248, 249, 493, 1111, 1178, 1112, 250, 251, 252,
	253, 254, 255, 256, 0, 1113, 258, 259, 260, 257,
	1114, 261, 0, 262, 263, 264, 1115, 265, 971, 266,
	267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268, 269,
	270, 271, 0, 272, 494, 495, 1123, 276, 273, 274,
	1124, 277, 275, 1125, 278, 1126, 1127, 279, 280, 281,
	1128, 282, 1129, 283, 284, 1130, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	1131, 223, 1132, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 1133, 301, 1134, 1135, 972,
	302, 303, 500, 501, 304, 305, 1136, 306, 502, 1137,
	503, 307, 1138, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 1139, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 1140, 973, 321,
	507, 508, 1141, 509, 1142, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 1143, 334, 333, 1144, 335, 511, 978, 336,
	337, 979, 1145, 338, 339, 340, 1146, 1147, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 1148, 225, 982, 363, 1149, 512,
	364, 513, 366, 367, 1150, 0, 368, 0, 1151, 1152,
	370, 371, 372, 1153, 1154, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 1155, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 1156, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 1157, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 1158, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 1159,
	427, 428, 426, 429, 430, 431, 1160, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 1161, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 1162, 449, 450, 0, 448, 1163, 451, 452,
	453, 454, 455, 291, 456, 1164, 457, 525, 526, 527,
	528, 1165, 464, 1166, 458, 459, 529, 460, 530, 1167,
	461, 462, 463, 0, 465, 466, 1168, 1169, 467, 468,
	469, 471, 472, 470, 473, 1170, 474, 1171, 0, 475,
	476, 477, 531, 532, 533, 1172, 479, 478, 534, 1173,
	1174, 1175, 1176, 480, 481, 535, 482, 483, 484, 1089,
	0, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 1098, 232, 233, 1099, 1100, 1101,
	0, 1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	1107, 242, 243, 244, 245, 246, 1108, 1109, 0, 247,
	490, 491, 492, 1110, 248, 249, 493, 1111, 1178, 1112,
	250, 251, 252, 253, 254, 255, 256, 0, 1113, 258,
	259, 260, 257, 1114, 261, 0, 262, 263, 264, 1115,
	265, 971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121,
	1122, 268, 269, 270, 271, 0, 272, 494, 495, 1123,
	276, 273, 274, 1124, 277, 275, 1125, 278, 1126, 1127,
	279, 280, 281, 1128, 282, 1129, 283, 284, 1130, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 1131, 223, 1132, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 1133, 301,
	1134, 1135, 972, 302, 303, 500, 501, 304, 305, 1136,
	306, 502, 1137, 503, 307, 1138, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 1139, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	1140, 973, 321, 507, 508, 1141, 509, 1142, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 1143, 334, 333, 1144, 335,
	511, 978, 336, 337, 979, 1145, 338, 339, 340, 1146,
	1147, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 1148, 225, 982,
	363, 1149, 512, 364, 513, 366, 367, 1150, 0, 368,
	0, 1151, 1152, 370, 371, 372, 1153, 1154, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 1155, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 1156, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 1157, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 1158, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 1159, 427, 428, 426, 429, 430, 431, 1160,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 1161, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 1162, 449, 450, 0, 448,
	1163, 451, 452, 453, 454, 455, 291, 456, 1164, 457,
	525, 526, 527, 528, 1165, 464, 1166, 458, 459, 529,
	460, 530, 1167, 461, 462, 463, 0, 465, 466, 1168,
	1169, 467, 468, 469, 471, 472, 470, 473, 1170, 474,
	1171, 0, 475, 476, 477, 531, 532, 533, 1172, 479,
	478, 534, 1173, 1174, 1175, 1176, 480, 481, 535, 482,
	483, 484, 1092, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 1098, 232, 233, 1099, 1100,
	1101, 0, 1102, 485, 1103, 1104, 1105, 1106, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 1107, 242, 243, 244, 245, 246, 1108, 1109, 0,
	247, 490, 491, 492, 1110, 248, 249, 493, 1111, 1178,
	1112, 250, 251, 252, 253, 254, 255, 256, 0, 1113,
	258, 259, 260, 257, 1114, 261, 0, 262, 263, 264,
	1115, 265, 971, 266, 267, 1116, 1117, 1119, 1118, 1120,
	1121, 1122, 268, 269, 270, 271, 0, 272, 494, 495,
	1123, 276, 273, 274, 1124, 277, 275, 1125, 278, 1126,
	1127, 279, 280, 281, 1128, 282, 1129, 283, 284, 1130,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 1131, 223, 1132, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 1133,
	301, 1134, 1135, 972, 302, 303, 500, 501, 304, 305,
	1136, 306, 502, 1137, 503, 307, 1138, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 974, 313, 314, 1139,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 1140, 973, 321, 507, 508, 1141, 509, 1142, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 1143, 334, 333, 1144,
	335, 511, 978, 336, 337, 979, 1145, 338, 339, 340,
	1146, 1147, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 1148, 225,
	982, 363, 1149, 512, 364, 513, 366, 367, 1150, 0,
	368, 0, 1151, 1152, 370, 371, 372, 1153, 1154, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 1155, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 1156, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 1157,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 1158, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 1159, 427, 428, 426, 429, 430, 431,
	1160, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 1161, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 1162, 449, 450, 0,
	448, 1163, 451, 452, 453, 454, 455, 291, 456, 1164,
	457, 525, 526, 527, 528, 1165, 464, 1166, 458, 459,
	529, 460, 530, 1167, 461, 462, 463, 0, 465, 466,
	1168, 1169, 467, 468, 469, 471, 472, 470, 473, 1170,
	474, 1171, 0, 475, 476, 477, 531, 532, 533, 1172,
	479, 478, 534, 1173, 1174, 1175, 1176, 480, 481, 535,
	482, 483, 484, 2114, 0, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 2111, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 2112, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 2110, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 2113, 0, 0, 0, 0, 0, 0, 892, 2109,
	0, 854, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 189, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 191, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 1347, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 183, 480, 481,
	535, 482, 483, 484, 867, 184, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 1558, 1556, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	189, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 191, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 1347, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 183, 480, 481, 535, 482, 483, 484,
	867, 184, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 1558, 2613, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 189, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 191, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 1347,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 183,
	480, 481, 535, 482, 483, 484, 867, 184, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 1558, 1556,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	2218, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 2223, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 2219, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 2220, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 2159, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 0, 0, 0, 0, 0,
	0, 0, 892, 2157, 0, 2156, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 2154, 0, 2153, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 2151,
	0, 2150, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 2148, 0, 1416,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 1415, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 857, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 871,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 892, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 3737, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 871, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 2028, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 2027, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 3546, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 871, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	3239, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 1626,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 3020, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 871, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 1626,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 0,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 2223, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 1556, 0, 2228, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 2226, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 2214,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 2203, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 2201, 890, 2192, 2199, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 2195, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 2196, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 2197, 2194, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 2198, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 2193, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 2189, 890, 2192, 2199, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	2195, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 2196, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 2197, 2194, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 2198, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 2193, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 1564, 0, 892, 0, 0, 0, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 2007, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 1236, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 1235, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 1230, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 1229, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 1225, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 892, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 3771, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 3770, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 3769, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 3771, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 3770, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 2580, 2581, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 2578, 2579, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 2015, 2016, 908, 880, 881, 882, 878,
	879, 891, 892, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 0, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 2211, 0, 0, 0, 0, 0, 0, 2209,
	2210, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 0, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 2573, 2574, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1757, 1758, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	0, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 3771,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 0, 935, 0, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	0, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 0, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 0, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 3770, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 0, 931,
	0, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 0,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 854, 0, 1028, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 892, 932, 0, 0,
	890, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 931, 0, 247, 490, 491, 492, 0, 248,
	249, 938, 0, 919, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 971, 266, 267, 922,
	920, 921, 928, 924, 923, 927, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 962, 963, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 972, 302, 303,
	500, 501, 304, 305, 0, 306, 969, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 933, 934, 937, 365,
	974, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 973, 321, 507, 508,
	0, 509, 0, 323, 975, 935, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	1014, 334, 333, 0, 335, 970, 978, 336, 337, 979,
	0, 338, 339, 340, 926, 925, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 0, 225, 982, 363, 0, 936, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 1020, 370, 371,
	372, 0, 0, 373, 374, 514, 983, 375, 984, 964,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 965, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 985, 410, 411, 412, 413, 521, 1022, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 189, 427, 428,
	426, 429, 430, 431, 929, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 966,
	0, 449, 450, 0, 448, 191, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 967, 460, 968, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 930, 474, 0, 0, 475, 476, 477,
	1347, 532, 533, 0, 479, 478, 534, 1028, 0, 0,
	183, 480, 481, 535, 482, 483, 484, 0, 184, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 1018, 932, 1650,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 931, 0, 247, 490, 491, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 500, 501, 304, 305, 0, 306, 969, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 507,
	508, 0, 509, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 1014, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 0, 225, 982, 363, 0, 936, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 1020, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 521, 1022, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 189, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	966, 0, 449, 450, 0, 448, 191, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 967, 460, 968, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 1347, 532, 533, 0, 479, 478, 534, 2733, 0,
	1028, 183, 480, 481, 535, 482, 483, 484, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 1018, 0,
	1650, 932, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 931, 0, 247, 490,
	491, 492, 0, 248, 249, 938, 0, 919, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	971, 266, 267, 922, 920, 921, 928, 924, 923, 927,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	962, 963, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 972, 302, 303, 500, 501, 304, 305, 0, 306,
	969, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	933, 934, 937, 365, 974, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	973, 321, 507, 508, 0, 509, 0, 323, 975, 935,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1014, 334, 333, 0, 335, 970,
	978, 336, 337, 979, 0, 338, 339, 340, 926, 925,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 0, 225, 982, 363,
	0, 936, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 1020, 370, 371, 372, 0, 0, 373, 374, 514,
	983, 375, 984, 964, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 965,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 985, 410, 411, 412, 413,
	521, 1022, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 929, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 966, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 967, 460,
	968, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 930, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 1010, 0, 1028, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 1018, 0, 1016, 932, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 931,
	0, 247, 490, 491, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 500, 501, 304,
	305, 0, 306, 969, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 507, 508, 0, 509, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 1014, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 0,
	225, 982, 363, 0, 936, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 1020, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 521, 1022, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 966, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 967, 460, 968, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1028, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 1018, 932, 1016, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	931, 0, 247, 490, 491, 492, 0, 248, 249, 938,
	0, 919, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 971, 266, 267, 922, 920, 921,
	928, 924, 923, 927, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 962, 963, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 972, 302, 303, 500, 501,
	304, 305, 0, 306, 969, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 933, 934, 937, 365, 974, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 0, 973, 321, 507, 508, 0, 509,
	0, 323, 975, 935, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 1014, 334,
	333, 0, 335, 970, 978, 336, 337, 979, 0, 338,
	339, 340, 926, 925, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	0, 225, 982, 363, 0, 936, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 1020, 370, 371, 372, 0,
	0, 373, 374, 514, 983, 375, 984, 964, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 965, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 985,
	410, 411, 412, 413, 521, 1022, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 929, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 966, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 967, 460, 968, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 930, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 1028, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 1018, 932, 1016, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 931, 0, 247, 490, 491, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 969, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 225, 982, 363, 0, 936, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 1022, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 966, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 967, 460, 968, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 854, 0, 1209, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 1548, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 189,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 191, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 1347, 532, 533, 0, 479, 478, 534, 1344,
	0, 1209, 183, 480, 481, 535, 482, 483, 484, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 158, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 1178, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 978, 336, 337, 979, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 0, 982,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 189, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	191, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 1347, 532, 533, 0, 479,
	478, 534, 0, 0, 0, 183, 480, 481, 535, 482,
	483, 484, 0, 184, 0, 0, 0, 0, 1209, 1208,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 158, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 1209, 1208, 0, 0, 0,
	0, 1206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2957, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 1178, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 978, 336, 337, 979, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 0, 982, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 1209, 1208, 0, 0, 0, 0, 1206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 1178,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 973, 321, 507, 508, 0, 509, 0, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 978, 336, 337, 979, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 0,
	982, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1028, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 1353, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 931,
	0, 247, 490, 491, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 500, 501, 304,
	305, 0, 306, 969, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 507, 508, 0, 509, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 0,
	225, 982, 363, 0, 936, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 966, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 967, 460, 968, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 854, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 189, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 191, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	1347, 532, 533, 0, 479, 478, 534, 220, 0, 0,
	183, 480, 481, 535, 482, 483, 484, 0, 184, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 158,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1295, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	1664, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 1299, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 2905, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 225, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 1299, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 220, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 2476, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 220, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 3045, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 720, 0, 614, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 1920, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 620, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 718, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 619, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 613, 0, 614,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 623, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 620, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 619, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 611, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	1209, 1208, 0, 0, 0, 0, 1206, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 1178, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	971, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 972, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 974, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	973, 321, 507, 508, 0, 509, 0, 323, 975, 510,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	978, 336, 337, 979, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 0, 0, 982, 363,
	3201, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	983, 375, 984, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 985, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 1209, 1208, 0, 0, 0, 0, 1206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 1178, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 978, 336, 337, 979, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 0, 982,
	363, 2885, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 1209, 1208, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 1178,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 0, 0, 0, 0, 0,
	0, 2876, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 973, 321, 507, 508, 0, 509, 0, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 978, 336, 337, 979, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 0,
	982, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	2877, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 614,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 620, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 1954, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 619, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 614, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 623, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 620, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 619, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 1380, 0, 1209,
	1208, 0, 0, 0, 0, 1206, 0, 0, 0, 0,
	0, 0, 623, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 1178, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 1379, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 973,
	321, 507, 508, 0, 509, 0, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 978,
	336, 337, 979, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 0, 982, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 1378, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 1377, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	1341, 0, 1209, 1208, 0, 0, 0, 0, 1206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 1178,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 1340, 505, 506, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 973, 321, 507, 508, 0, 509, 0, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 978, 336, 337, 979, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 0,
	982, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 1275, 0, 1209, 1208, 0, 0, 0,
	0, 1206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 1178, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 1274, 505, 506, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 978, 336, 337, 979, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 0, 982, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 1204, 0, 1209, 1208,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 1203, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 1209,
	1208, 0, 0, 0, 0, 1206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 1178, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 973,
	321, 507, 508, 0, 509, 0, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 978,
	336, 337, 979, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 0, 982, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 1699, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 0,
	1705, 0, 1695, 241, 1711, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 1720, 1721, 0, 0, 248,
	249, 0, 0, 1178, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 971, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	955, 272, 1709, 1708, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 940, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 0, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 1707, 0,
	0, 0, 300, 0, 301, 0, 0, 972, 302, 303,
	1716, 1717, 304, 305, 0, 306, 0, 0, 0, 307,
	0, 308, 309, 310, 311, 312, 0, 0, 0, 365,
	974, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 973, 321, 1702, 1703,
	0, 1698, 0, 323, 975, 0, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 0, 978, 336, 337, 979,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 0, 0, 982, 363, 0, 0, 364, 1710,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 0, 983, 375, 984, 0,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 1692, 1693, 0, 387, 0, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	1706, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 985, 410, 411, 412, 413, 0, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	986, 435, 436, 1704, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 1719, 443, 444, 445, 446, 0,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 1712, 1713, 1714, 1715, 0,
	464, 0, 458, 459, 0, 460, 0, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	0, 1696, 1718, 0, 479, 478, 0, 0, 220, 0,
	0, 480, 481, 0, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 1686, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 225, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 0,
	0, 1209, 1208, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 623, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 1178, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 1730,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 978, 336, 337, 979, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 0, 982,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 1209, 1208, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 1178,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 973, 321, 507, 508, 0, 509, 0, 323,
	975, 510, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 978, 336, 337, 979, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 0,
	982, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 983, 375, 984, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 1209,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 1178, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 973,
	321, 507, 508, 0, 509, 0, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 978,
	336, 337, 979, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 0, 982, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 2341, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 2338, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 2345, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 2514,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 2344, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 2511, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 2513, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 2510,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	2343, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 2512, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 2341, 248, 249, 493, 0,
	0, 2335, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 2338, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 2345, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 2344, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 2334, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 2343, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 2342, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1437, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 1440, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 1438, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 1439, 478, 534, 1182, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 1184,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	1020, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	1179, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 1181, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 1020, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1085, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 1087, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 1020, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 564, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 563, 230,
	231, 553, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 556, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 557, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 558,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 552,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 553, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 556,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 557,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 558, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 2851, 359, 0, 225, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 220, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 1020, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 2448, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 2447, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 225, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 1930,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 225, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 225, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 1858, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 1863,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 1862, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 225, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 1851, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 1853, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 225, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 1337, 0, 220, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 1336, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1328, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	1327, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 1325, 0, 220, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 1324, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1321, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 1320, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1277, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	1200, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1193, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 1195, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 556, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 557, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	558, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 1961, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 1959, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 1957, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 1901, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 711, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 710, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 709,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	2514, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 3418, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 543, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 542, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 541, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 220, 3427, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 220, 2501, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 3178, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 2262,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 220, 2501, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 2498, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 1938, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 1928, 0, 220, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 584, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 1059, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 1057, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 585, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 581, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 1060, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 580,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 584, 0, 220, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 574, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	585, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 581,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 1352,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 580, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1334, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 1333, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1283, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 1282,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	1268, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 1267, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1263, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 1187, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 584,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 1059,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 1057, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 585, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 581, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 1060, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	580, 526, 527, 528, 0, 464, 0, 458, 1058, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 1041, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 220, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 590, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 584, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 574, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 572, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 573, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 585, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 575, 414,
	0, 415, 419, 420, 581, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 576, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 580, 526, 527,
	528, 0, 464, 0, 458, 578, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 568,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 569, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 566, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 560, 0, 220, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 538, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 2920, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 2881, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 2827, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 220, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 2825, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 2811, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 2456,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	569, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 1883, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 0, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	1305, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 1245, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 993,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 0, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	0, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 0, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 0, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 1504, 0, 0, 1485, 0, 0, 0, 0, 1501,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 0, 1532, 1507, 1508, 1509, 1510, 0, 1512, 1514,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 1532, 0, 0, 1520, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 0, 0, 0, 0, 1523,
	0, 0, 1511, 1518, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 0, 0, 0, 0, 0, 1531, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 3312, 0, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 1521,
	1490, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 3016, 0, 0, 1522,
	0, 0, 1532, 0, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 0, 1505,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 0, 0, 0, 0, 1485,
	0, 1522, 0, 0, 1532, 0, 1531, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 1529, 0, 1484,
	0, 0, 0, 0, 1499, 1500, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0, 0,
	0, 0, 0, 2661, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 1522, 0, 0,
	1532, 1511, 1485, 0, 0, 0, 1512, 1514, 0, 1531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 1504, 0, 0, 0, 1520, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0, 0,
	1522, 0, 0, 1532, 0, 2660, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 1482, 1483, 1523, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	1505, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	1511, 2657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 1522, 0, 0, 1532, 0, 1531, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	1484, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0,
	0, 0, 0, 0, 2656, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 1522, 0,
	0, 1532, 1511, 1485, 0, 0, 0, 1512, 1514, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1528, 0, 1529, 0, 0, 0, 0, 0,
	0, 1499, 1500, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 1504, 0, 0, 0, 1520, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0,
	0, 1522, 0, 0, 1532, 0, 2655, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1482, 1483, 1523, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	0, 1505, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 1511, 2116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526,
	1527, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 1522, 0, 0, 1532, 0, 1531, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 1484, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0,
	0, 3718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 1522,
	0, 0, 1532, 1511, 1485, 0, 0, 0, 1512, 1514,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 1523, 1504, 0, 0, 0, 1520, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511,
	0, 0, 1522, 3714, 0, 1532, 0, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1482, 1483, 1523,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 0, 1505, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 3629,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 1482, 1483, 1490, 1515, 1516, 1517, 1525,
	1526, 1527, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 1522, 0, 0, 1532, 0, 1531,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 1484, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530, 0,
	0, 0, 3628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	1522, 0, 0, 1532, 1511, 1485, 0, 0, 0, 1512,
	1514, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 1523, 1504, 0, 0, 0, 1520,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1511, 0, 0, 1522, 3488, 0, 1532, 0, 0, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 1482, 1483,
	1523, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 0, 1505, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	3370, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516, 1517,
	1525, 1526, 1527, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 1522, 0, 0, 1532, 0,
	1531, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 1484, 0, 0, 0, 0, 1499, 1500,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530,
	0, 0, 0, 3317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 1522, 0, 0, 1532, 1511, 1485, 0, 0, 0,
	1512, 1514, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 1523, 1504, 0, 0, 0,
	1520, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1511, 0, 0, 1522, 3316, 0, 1532, 0, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 1482,
	1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 0, 1505, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 3315, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516,
	1517, 1525, 1526, 1527, 1523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 1522, 0, 0, 1532,
	0, 1531, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 1484, 0, 0, 0, 0, 1499,
	1500, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1530, 0, 0, 0, 3050, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 1522, 0, 0, 1532, 1511, 1485, 0, 0,
	0, 1512, 1514, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 1504, 0, 0,
	0, 1520, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1511, 0, 0, 1522, 2653, 0, 1532, 0,
	0, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 0, 1499, 1500,
	1482, 1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 1505, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	0, 0, 2652, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 1482, 1483, 1490, 1515,
	1516, 1517, 1525, 1526, 1527, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	0, 0, 0, 0, 0, 1485, 0, 1522, 0, 0,
	1532, 0, 1531, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 1529, 0, 1484, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1530, 0, 0, 0, 2651, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 1522, 0, 0, 1532, 1511, 1485, 0,
	0, 0, 1512, 1514, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 1523, 1504, 0,
	0, 0, 1520, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 3830, 0,
	0, 0, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 1511, 0, 0, 1522, 2650, 0, 1532,
	0, 0, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 0, 0, 0, 0, 0, 1499,
	1500, 1482, 1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 1505, 0, 2588, 0,
	1485, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 3829, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 2589,
	0, 2617, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 1482, 1483, 1490,
	1515, 1516, 1517, 1525, 1526, 1527, 1523, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 0, 0, 0, 0, 0, 1485, 0, 1522, 0,
	0, 1532, 0, 1531, 0, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 1529, 0, 1484, 0, 0, 0,
	0, 1499, 1500, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 2713, 0, 0,
	2712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 0, 1532, 1511, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 1528, 0,
	1529, 0, 2236, 0, 0, 0, 0, 1499, 1500, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 1523, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 0, 1505, 2235, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516,
	1517, 1525, 1526, 1527, 1523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 1522, 0, 0, 1532,
	0, 1531, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 1484, 0, 0, 0, 0, 1499,
	1500, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 1522, 0, 0, 1532, 1511, 1485, 0, 0,
	0, 1512, 1514, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 1504, 0, 0,
	0, 1520, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1511, 0, 0, 1522, 0, 0, 1532, 0,
	0, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 0, 1499, 1500,
	1482, 1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 1505, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0,
	0, 0, 0, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 2719, 0, 1523, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 1522, 0, 0,
	1532, 0, 0, 0, 1518, 1513, 1512, 1514, 3031, 2714,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 1531,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 1520, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 1505, 0, 0,
	1501, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 1506, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 1523, 0, 0,
	0, 0, 0, 1499, 1500, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	1505, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 2654, 0, 0,
	1485, 0, 1522, 0, 0, 1532, 0, 1531, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	1484, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 2681, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 1522, 0,
	0, 1532, 1511, 1485, 0, 0, 0, 1512, 1514, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1528, 0, 1529, 0, 0, 0, 0, 0,
	0, 1499, 1500, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 1504, 0, 0, 0, 1520, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0,
	0, 1522, 0, 0, 1532, 0, 0, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 0, 0, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492,
}
var sqlPact = [...]int{

	6043, -1000, -1000, -1000, -1000, -1000, -1000, 201, 200, 199,
	198, 197, 189, 188, 183, -1000, -1000, -1000, -1000, -1000,
	-1000, 182, -1000, -1000, 180, -1000, 179, 170, 168, 167,
	-1000, 165, 164, 160, -1000, -1000, -1000, -1000, 159, 158,
	155, 64908, 1925, 78426, 68496, 1846, 58137, 77973, 57684, 77520,
	77067, 154, -1000, 76614, 153, 152, 151, -1000, 76161, -1000,
	1625, -1000, 149, 2979, 47695, 148, 147, 146, 1867, 145,
	-1000, 138, -1000, 10097, 1347, -1000, 137, -1000, 4945, 846,
	67596, 2401, 136, 135, 47242, 2356, 2432, -1000, -1000, 1697,
	-1000, -1000, 134, 132, 129, 128, 125, 123, 121, 120,
	117, -1000, 110, 109, 108, 106, 105, 102, 101, -1000,
	100, 99, 97, 94, 93, 91, 90, 89, 86, 85,
	84, 82, -1000, 9682, 1573, 1423, 1421, 1414, 1410, 1407,
	877, 76, 74, 73, 71, 69, 68, 67, 66, -1000,
	62, 61, 59, 58, 56, 55, 51, 50, 166, 48,
	47, 46, 45, 44, 43, 3414, -1000, 1256, 715, 23295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 83790, 78873, 37, -23, 36, -1000, 2809,
	912, 39529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 472, -1000, -1000, -1000, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1667, 707, -1000, -1000,
	-1000, 75714, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1914, -60, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 706,
	-1000, 1912, 141, 1813, -1000, -1000, -1000, -1000, -1000, 78873,
	-1000, -1000, 3125, 3124, 1746, 704, 75267, -1000, 1538, -1000,
	829, 26163, -1000, 1127, -1000, 26163, 258, -1000, -1000, -1000,
	-1000, -1000, -1000, 3123, 3122, 3121, 3119, -1000, -1000, 57231,
	17527, 56778, 56325, 74814, 17064, 64461, 64008, 51814, -1000, -1000,
	-1000, 42271, 1061, -1000, -1000, -1000, -1000, -1000, 2, 53174,
	78873, -1000, 257, -1000, -1000, -1000, -1000, -1000, -1000, 32959,
	558, 32471, 317, 31983, 294, -1000, -1000, -1000, 3117, 3116,
	985, 3115, 2734, 83343, 1495, 3113, 1450, 1049, 894, 3112,
	3111, 3110, 3109, 3108, 3107, 1204, 74361, 2493, 73908, 1474,
	51351, 63555, 64908, 2216, 73455, 1165, 1162, -1000, -1000, -1000,
	-1000, 2584, 2422, 2416, 44546, -1000, 3105, 3104, 3103, 3102,
	3101, 82896, 1449, 3100, 2110, 3099, 3098, 3096, 3095, 3094,
	3093, 3092, 3091, -1000, 63102, 62649, 62196, 2853, 73002, 61743,
	50888, -1000, -1000, -1000, 41337, 5480, 5314, 72549, 42738, 64908,
	64908, -1000, -1000, 33435, 107, -1000, -1000, -1000, 42271, 2428,
	-1000, 33435, 107, -1000, 78873, -1000, 2483, 1644, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2138, 1382,
	2971, 50425, 1639, 1220, 2798, 2576, 2568, 1316, 2112, 2547,
	2543, 2541, 2505, 2495, 1479, 2164, 237, 22807, 1400, 1298,
	2489, 2488, 2990, 1634, 1779, 55872, 3090, 3089, 2751, 2484,
	2479, 2427, -1000, -1000, -1000, -1000, 1288, -1000, -1000, 59031,
	-1000, -1000, 1086, -1000, -1000, 1086, -1000, -1000, -1000, -1000,
	-1000, 1057, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1256, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2048, -1000, 1704, -1000, -1000, 2099, 2756, 2756,
	2756, 2826, 458, 453, -1000, 166, -1000, -1000, 90373, -1000,
	-1000, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 1695, -1000,
	700, -1000, -1000, 730, -1000, 699, 555, -1000, -1000, -1000,
	-1000, -1000, -1000, 698, -1000, -1000, -1000, -1000, -1000, -1000,
	2961, -1000, 19891, -1000, -1000, -1000, 302, 697, 33435, -1000,
	-1000, 3007, 3003, 917, -1000, 254, 856, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2478,
	696, 693, -1000, 687, 683, 682, 680, 679, -1000, -1000,
	-1000, 678, 677, 675, 672, 671, 670, 669, 663, -1000,
	1591, -1000, -1000, -1000, -1000, -1000, -1000, 600, 598, 598,
	598, -1000, 888, -1000, -1000, -1000, 353, 596, 337, 595,
	592, 587, 662, 661, 636, 634, 633, 630, 626, 621,
	617, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 887, -1000, -1000,
	-1000, -1000, 1, 78873, -1000, 472, 1, -1000, -1000, 616,
	-1000, 26639, 26639, 26639, -1000, -1000, 1905, 33435, -1000, 2447,
	-1000, 9, 9, 811, 40431, -1000, 38623, 811, 476, 750,
	44093, -1000, 2426, -1000, -1000, 615, 249, -1000, -1000, -1000,
	-1000, 2425, 78873, 17988, 78873, 64908, 64908, 64908, 2666, 33435,
	-1000, -1000, 49962, 78873, 65355, 2904, 52722, 49962, 78873, 2472,
	-1000, -1000, -1000, 78873, -1000, 33435, -1000, 2901, 1419, 53627,
	2843, -11, -1000, -1000, -1000, -1000, -1000, -1000, 2088, 2108,
	1017, 1953, 1351, -1000, 26163, 2726, -1000, -1000, -1000, 227,
	17988, -1000, -1000, -1000, -1000, -1000, 1861, 2640, 1186, -1000,
	1952, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1542, 2639, -1000, 2481, 2637, 1540, -1000, -1000, 1791, -1000,
	-1000, 2744, -1000, -1000, 1884, 2636, 11, -1000, -1000, 1909,
	-1000, -1000, 867, 2635, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 807, -1000, 52275, 42271, 53174, -2, -1000,
	-1000, -21, -1000, 16601, 90373, -1000, -1000, -1000, 90373, 810,
	-1000, -1000, 2629, -1000, 90373, 809, -1000, -1000, 2624, -1000,
	-1000, -1000, 3087, -1000, 3086, 2029, 3085, 3082, 3080, -1000,
	1436, 1584, 3079, -1000, 3078, -1000, -1000, -1000, -1000, -1000,
	-1000, 61290, 1904, -1000, -1000, 60384, -1000, 2028, -1000, -1000,
	60837, 893, -1000, 867, 2026, -1000, 913, -1000, 3077, 2852,
	2249, 867, 2025, -1000, -1000, -1000, -1000, -1000, 45440, -1000,
	45440, -1000, 45440, -1000, 1281, -1000, 82449, 9, 9, 2961,
	-1000, -1000, -1000, -1000, -1000, 2622, 3076, 3073, 3072, -1000,
	78873, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 175,
	2621, -1000, -1000, 175, 2620, -1000, 175, 2618, -1000, 67143,
	-1000, -1000, 1816, 2617, -1000, 174, 2616, -1000, -1000, -32,
	2613, -1000, -1000, -29, -1000, -1000, -1000, 912, -1000, 40884,
	-1000, 40884, 72096, 52275, 861, 666, 46789, 90373, -1000, -62,
	-1000, 42271, 90373, -1000, 52275, 60384, -1000, 71643, 59937, -1000,
	-1000, 1203, 2133, -1000, -1000, -1000, 861, 52275, 52275, 52275,
	-1000, 71190, -1000, -1000, 1701, 1349, 2752, 1654, 64908, -1000,
	1580, -1000, -1000, -1000, 2782, 2468, -1000, 49515, 66696, -1000,
	66249, -1000, 65802, -1000, 64908, -1000, 64908, -1000, 3070, 3069,
	3068, -1000, 3067, 2767, 90373, 2758, -1000, 2507, 1425, 1413,
	78873, -1000, -1000, 78873, -1000, 78873, -1000, -1000, -1000, -1000,
	-1000, 2085, -1000, -1000, -1000, -1000, 64908, -1000, -1000, -1000,
	-1000, -1000, -1000, 2466, -1000, 1465, -1000, 1502, -1000, 1202,
	-1000, -1000, 176, -1000, -1000, -11, -1000, 82002, -1000, 2099,
	-1000, 78873, -1000, 2079, 2452, 2460, 1496, 1934, 2175, -1000,
	31495, 2149, 35815, 1948, 166, -1000, -1000, 166, 166, 24247,
	-1000, -1000, 52722, 52722, 17988, 1128, 33435, 33435, 33435, 33435,
	33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435,
	33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435,
	33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435, 33435,
	33435, 2123, 33435, 1052, 33435, 33435, 33435, 33435, 1577, -1000,
	-1000, 1606, 497, 1762, -1000, 2951, 2951, 2951, 1229, 1229,
	7647, 7647, 490, 3065, 730, -1000, 33435, -1000, 107, 33435,
	18451, -1000, -1000, 453, 11863, 1937, -1000, 448, 18939, -1000,
	-1000, -1000, 19891, 555, 31007, 33435, 882, 90373, -1000, -1000,
	1500, 2974, 16140, 2469, 2305, 611, 754, 716, 22319, 21831,
	21343, 20855, 619, 33435, 33435, 33435, 33435, 33435, 33435, 33435,
	33435, -1000, -1000, 2982, -1000, 2974, -1000, -1000, -1000, -1000,
	2974, 1073, 1068, 2974, -1000, 2974, 2974, 2319, 2319, 30531,
	30043, 29555, 36291, 29067, 33435, 20367, 28579, 28091, -1000, 78873,
	1, 2899, 33435, 131, -1000, 89188, -1000, 131, 131, 607,
	-34, 90373, 2154, 2154, 39980, 2098, 1705, 1705, 1705, -1000,
	811, 12426, 811, 70292, 1733, 811, 811, 224, 320, 447,
	38172, 2447, 70292, 722, 605, 35, 32, 28, -1000, -1000,
	27, 24, -1000, -1000, 64908, 604, 18451, 17988, 1236, -35,
	222, 2198, 2185, 2181, -1000, 2179, 1406, -36, 1051, -24,
	-1000, 4331, -37, -1000, 1178, 221, 2974, -1000, -1000, -1000,
	-1000, -1000, 3064, 3060, -1000, 886, 602, 601, 313, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 600, 598, 598,
	598, -1000, 353, 596, 337, 595, 592, 587, -1000, -1000,
	-1000, -1000, 2420, -21, 65355, 837, -43, 990, -11, -1000,
	-1000, -1000, 53627, 1086, -1000, 1754, -1000, -1000, -1000, -1000,
	-1000, -1000, 1224, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	917, -1000, -1000, -1000, -1000, -1000, -1000, 2959, 2956, 0,
	-1000, -1000, 17988, -1000, -13, 1359, -1000, 55419, 2080, 2759,
	2740, 1271, -1000, 1239, 2825, 59031, 2856, 2870, 713, -1000,
	2419, -1000, -1000, 825, 1451, 1050, 59031, 2481, -1000, 52722,
	-1000, 2206, 2823, 1251, 1237, 1251, 1251, 1212, -1000, 59031,
	1043, -1000, 1042, -1000, -18, 2855, 2867, 552, -1000, 2407,
	1041, -1000, -1000, 64908, 17988, 1323, 1320, 1344, 1039, -1,
	-1000, 2851, 2850, -1000, 1333, -1000, 52275, 2251, -1000, -57,
	807, -2, 53174, 78873, 219, -1000, 33435, 107, 33435, 107,
	-1000, -1000, 2607, -1000, -1000, -1000, 3059, 1563, 2104, -1000,
	-1000, -1000, 586, 2020, 2403, 78873, 2213, -5, 64908, -1000,
	2605, 2481, 2017, -1000, -1000, 59484, -1000, 2604, 612, 3052,
	-1000, 81555, -1000, 2761, 1143, 2602, 931, 491, 2892, -1000,
	491, 45887, -1000, 78873, -1000, -1000, 78873, -1000, -1000, -1000,
	3051, -1000, 64908, -1000, -1000, 64908, -1000, 64908, -1000, 64908,
	171, 2589, -1000, -1000, 78873, -1000, 64908, 64908, 52275, 52275,
	970, 54525, -63, -64, 428, -1000, 70743, 78873, 929, 54972,
	78873, 2710, 861, 42271, -62, 861, 861, 807, -1000, 807,
	-1000, 64908, 2459, -1000, 861, 861, 861, -1000, -1000, -1000,
	-1000, 3045, 3044, -1000, -1000, -1000, 866, 64908, 78873, 64908,
	-1000, -1000, 78873, -1000, 78873, -1000, 866, 78873, 866, 78873,
	866, 78873, -1000, -1000, -1000, -1000, -1000, -1000, 107, 33435,
	1308, -1000, 2455, -1000, 2454, -1000, 53, -1000, -1000, -1000,
	-1000, 1757, 64908, 64908, 64908, 64908, 78873, 64908, -1000, 59031,
	-1000, 2079, 2452, -1000, -1000, -1000, -1000, -1000, -1000, 1166,
	1822, -1000, 2127, -1000, 1252, -1000, -1000, -1000, 90373, 36767,
	-1000, -1000, 90373, 1432, -1000, 35339, 34863, -1000, -1000, 1364,
	64908, 2218, -1000, 2218, -216, -1000, 88830, 2126, 64908, -1000,
	-1000, -1000, -1000, -1000, 823, 492, 492, 1085, 1085, 1085,
	1085, 2858, 1724, 4530, 653, 356, 356, 250, 250, 250,
	250, 250, 356, 4265, 1229, 1229, 4265, 4265, 4265, 4265,
	4265, 1229, 1229, 1229, 356, 356, 356, 7647, 10900, 6284,
	33435, 33435, 1037, 1590, 497, 5857, 33435, 6770, 6770, 6770,
	6770, -1000, 1869, -1000, -1000, -1000, -1000, 2395, 583, 36291,
	36291, -1000, -1000, -1000, -1000, 19415, 33435, -1000, -1000, -1000,
	-1000, 27603, -1000, -1000, 88465, -268, 427, -208, -15, -1000,
	33435, 33435, 33435, 425, -1000, 215, 33435, 78873, -1000, 85910,
	721, -194, -1000, -65, 1210, -1000, 33435, -1000, -1000, 1036,
	-1000, 1034, 1027, 1025, -1000, 581, 423, -1000, 213, -1000,
	1725, 580, 579, 33435, -1000, -1000, -1000, -1000, -1000, 88319,
	-1000, -1000, 88107, -1000, -1000, 87954, -1000, -1000, 87808, -1000,
	-1000, -1000, 90220, 85764, 85552, 85399, 11448, 85253, 85041, -72,
	422, -73, 414, 821, 816, 412, 410, 409, -74, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -75, 408, -1000,
	2383, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	407, -1000, 404, -1000, 90074, -208, 403, 7612, -1000, 36291,
	36291, 36291, -1000, 401, -1000, 88976, -1000, 89862, 27127, 27127,
	27127, 400, 89699, 33435, -208, -80, -1000, -81, -1000, -1000,
	465, -82, 876, 26639, 39076, 17988, -1000, 876, 876, 33435,
	-1000, 33435, 2160, -1000, -1000, -1000, 2155, 2021, 2154, 39980,
	-1000, -1000, -1000, -1000, 70292, -1000, 2961, 2232, -1000, 70292,
	-1000, -1000, 78873, 472, -1000, 70292, 70292, 17988, 811, -1000,
	811, 70292, 589, -1000, -1000, -1000, -1000, -1000, 399, 43189,
	-15, 211, 861, -1000, 17988, 2262, 2262, 2262, 2262, -1000,
	-1000, 78873, 2919, -1000, 1599, -1000, 52722, -1000, 727, 991,
	17988, -1000, -1000, -1000, 574, -1000, 2974, 2974, -1000, 2974,
	78873, 79, 26163, -1000, 1086, -1000, -1000, 1309, -1000, 1572,
	-1000, 1053, -1000, -1000, -1000, -1000, 26163, -1000, 1830, 78873,
	78873, 64908, -1000, -1000, 2016, 81108, 2014, 52722, 78873, -1000,
	-1000, 572, 568, 2125, 2119, 927, 78873, 78873, 2118, 80661,
	80214, 78873, 1655, 33435, 1847, 1786, 107, 107, -1000, -1000,
	107, 567, 1131, 64908, 64908, 64908, 1531, -1000, -1000, -1000,
	-1000, -1000, 58584, -1000, -1000, 2981, 2978, -1000, 1251, -1000,
	-1000, -1000, 1251, 2481, 1507, 64908, 78873, 1646, 107, 107,
	-1000, -1000, 107, 564, 17988, 1556, -1000, 2462, 78873, 3002,
	64908, 78873, 78873, 49068, 2754, 79767, 78873, 1333, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48617, 936, 867, 861, 2367,
	-1000, 2251, -1000, -1000, 15679, 90373, -1000, 90373, -1000, 78873,
	-1000, 892, 78873, 54972, 850, 2588, 44993, -21, 861, 52275,
	64908, -5, 78873, -1000, 2481, 2585, 472, 2011, -1000, -1000,
	52275, 563, 3043, 3042, -1000, 1892, 2008, -1000, -1000, 79320,
	2550, 788, 78873, 876, 39980, 1583, -1000, 43642, 909, 78873,
	1428, 78, -1000, -1000, -1000, 39, 78873, -1000, 3039, -1000,
	-1000, 175, 175, 175, -1000, 64908, 64908, 1816, -1000, 174,
	-1000, -32, -1000, -1000, 970, 970, 861, -7, 559, -1000,
	797, 796, 41804, 52275, -94, -1000, -1000, -1000, -1000, -1000,
	64908, 78873, 681, 2236, 78873, -95, -1000, 210, 557, -1000,
	-1000, 861, 2364, -1000, -1000, 871, -1000, 1201, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8, -21, -21,
	-1000, 866, -1000, 866, -1000, 866, -1000, 90373, -1000, 1292,
	1261, 78873, -1000, 17988, 78873, 64908, 17988, 64908, 2445, 2441,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 944, -1000,
	1432, 1821, -1000, 555, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2075, -1000, -9, 24247, 1969, -1000, -1000,
	64908, 6, 33435, 33435, 5169, 4463, 33435, 36291, 36291, -1000,
	33435, 4151, -1000, -1000, -1000, -1000, -1000, 2352, 551, 33435,
	52722, 6987, 6272, -1000, 396, 84734, 4265, -1000, 33435, -1000,
	394, 25687, -1000, 89334, -59, -97, -1000, 12899, -208, -102,
	-1000, -1000, 725, -1000, 2648, -1000, 33435, 89487, 2053, 1913,
	1518, 1338, 2974, 3000, 15218, -1000, 46338, 878, 1765, 87596,
	-1000, -1000, -1000, -1000, 52722, 52722, 33435, 33435, -1000, 33435,
	33435, 33435, -1000, -1000, -1000, 2974, 813, -1000, -1000, -1000,
	813, -1000, -1000, 2974, -1000, 2974, -1000, 33435, -1000, -1000,
	2341, 33435, -1000, 52722, 52722, 36291, 36291, 36291, 36291, 36291,
	36291, 36291, 36291, 36291, 36291, 36291, 36291, 36291, 36291, 36291,
	36291, 36291, 36291, 36291, 2131, 36291, 2948, 2948, 2948, -1000,
	2435, 2341, 33435, 33435, 52722, 387, 383, 381, -1000, 33435,
	-208, -1000, -1000, 970, 550, -1000, 2065, -1000, 2304, -1000,
	33435, -1000, -104, -1000, 2447, -1000, -1000, 2304, 2304, -105,
	90373, 39980, 39980, -1000, 548, 33435, 2145, -1000, -1000, 720,
	-266, -1000, 795, -1000, -1000, -1000, -1000, -1000, 472, -1000,
	-1000, -1000, 207, 70292, 70292, 719, -1000, -108, -1000, -1000,
	-111, -1000, 2890, 373, 17988, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -21, 1801, 2997, -1000, 2975, 724, 717,
	142, 2974, 371, 369, 367, -21, 78873, -1000, -11, -1000,
	-1000, -1000, 33435, -1000, -1000, 2755, 1024, 1023, -1000, 2583,
	-1000, 2005, -1000, 918, -1000, 1675, -1000, 33435, 33435, 546,
	545, 3038, 1505, 3037, 928, 2578, 1816, 2549, 1816, -1000,
	-1000, 833, -1000, 90373, 544, 543, -1000, -13, 1348, 870,
	-1000, -1000, 33435, 33435, 69845, -1000, 392, 2744, 5, -1000,
	1021, -1000, -1000, -1000, -1000, 2481, 1020, -1000, -1000, -1000,
	869, -1000, -1000, 33435, -1000, -18, 1018, 2859, 2004, 64908,
	1016, -1000, 1015, -1000, -1000, -1000, -1000, -1000, -1000, 2845,
	1816, 2546, 1022, -1000, -1000, -1000, 48156, -1000, -1000, 52275,
	861, -1000, 3036, 64908, 3031, 364, -116, -19, 52722, 2886,
	1871, 576, 64908, 817, -1000, 2961, -1000, -1000, -1000, -1000,
	64908, 2883, 2545, 867, 2996, -1000, -1000, 64908, 2542, 1890,
	2003, 2095, 788, 54078, -1000, 867, 1747, -100, -1000, 1428,
	25199, 2747, -122, -1000, -1000, -1000, 876, 45887, 39980, 33435,
	3025, -123, -1000, -1000, -1000, -1000, -1000, 171, -1000, -1000,
	-1000, -1000, -1000, 69398, 69398, 52275, 52275, 52275, 861, 78873,
	78873, 54972, -1000, 541, 78873, 78873, 539, -1000, 78873, 78873,
	3024, 52275, -1000, 107, -1000, 1798, 64908, 14757, -1000, -1000,
	-1000, -1000, -1000, 866, -1000, -1000, 1658, 1944, 1658, 1456,
	1452, -1000, 1819, -1000, -1000, -1000, -1000, 2180, 2743, 17988,
	2849, 6770, 33435, 33435, 291, 4047, 450, 6770, 33435, 33435,
	52722, 7067, -128, 33435, 33435, -1000, 33435, 711, 90373, 2994,
	33435, 361, 357, -1000, -1000, -1000, 2972, -1000, -1000, -1000,
	90373, 33435, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 355,
	-1000, 54, -1000, -1000, -1000, 84237, -1000, 33435, 354, 2818,
	-1000, 334, 332, 84691, 10219, 87443, 87297, 87085, 330, -1000,
	-1000, 329, 328, 90373, 2435, 90373, -1000, -1000, 695, 695,
	1214, 1214, 1214, 1214, 2948, 2247, 426, 1437, 664, 664,
	664, 1702, 512, 512, 664, 664, 664, 2338, 2094, 538,
	7692, -1000, -1000, 90373, 90373, 327, -1000, -1000, -1000, -208,
	323, 970, -1000, 2299, 2817, 90373, -1000, 39980, 2299, 2299,
	-1000, -1000, 2021, 78873, 90373, 39980, -1000, 2232, -1000, 13370,
	-1000, 17988, -1000, -1000, -1000, -1000, 2961, -1000, 43189, -1000,
	536, -1000, 40, -1000, -1000, 709, 3023, 714, 17988, 322,
	-1000, -1000, -1000, -21, 90373, 78873, 78873, 78873, 2540, -1000,
	3666, -1000, 927, 86932, -130, -1000, 88830, 33435, 78873, -1000,
	-1000, 1631, 2167, 963, -1000, 2784, 78873, -1000, 78873, -1000,
	-1000, 78873, 78873, 64908, 2510, -133, 90373, -22, -1000, 794,
	-1000, 1244, -1000, 14296, 64908, 64908, 2509, -136, 17988, -1000,
	2993, 2992, 2536, 2795, 2991, 78873, -1000, 78873, 64908, 2709,
	-1000, -1000, -32, -1000, -1000, 472, -1000, 2230, -1000, 68043,
	1818, 107, -1000, 68947, 3021, 535, -1000, 1769, -1000, 665,
	2481, 107, 64908, -1000, 319, -46, -1000, 924, 17988, 64908,
	2532, 2097, 788, 54078, -1000, 1143, 2175, -1000, -53, -1000,
	525, 107, 1747, -1000, -100, 90373, -1000, 793, -1000, -1000,
	-138, -1000, -1000, 314, -1000, 2707, 2688, -1000, 2373, 33435,
	532, 524, 78873, 2685, -1000, -1000, -139, -1000, 1855, -1000,
	-1000, -1000, -1000, -1000, 17988, 1377, -1000, 520, 518, -1000,
	-1000, -1000, -1000, 2743, 6770, 6770, 33435, 33435, 33435, 6770,
	7067, -144, -1000, 6770, 6770, -208, -1000, -1000, 89334, -1000,
	-1000, -1000, 90373, -1000, 13835, 1663, -1000, 86786, -1000, 24247,
	-1000, -1000, 33435, 33435, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36291, 2336, 514, 52722, -1000, -1000, 300, 873,
	33435, 33435, 2447, 873, 873, -1000, -145, -1000, -1000, -1000,
	2961, 40, -1000, -1000, 3018, 17988, 494, -1000, 3017, -1000,
	-1000, -1000, -1000, -1000, 78873, -1000, 78873, -1000, 17988, 78873,
	2329, 1990, -1000, -1000, 2117, 510, 36291, 64908, 757, -1000,
	2337, 1596, 33435, 1969, -146, -151, 1987, -1000, -1000, 1975,
	33435, -1000, 52722, 509, 1816, 1816, -152, -153, -1000, 33435,
	1012, 78873, 24723, -1000, 3016, 2744, -1000, -1000, 33435, 1002,
	-1000, -1000, -1000, 2989, 1816, 17988, -1000, 1816, 1816, 2795,
	962, 2866, 1646, 2264, -1000, -1000, -1000, -1000, 2116, -1000,
	-1000, 78873, 2111, 863, -154, -1000, 792, 790, -1000, 54972,
	850, 853, -1000, -1000, -1000, 472, -1000, 2988, 499, 78873,
	1889, 498, 17988, -1000, 788, 54078, -1000, 2550, 1428, -1000,
	2658, 78873, 2738, -1000, 2175, 497, -1000, 861, 496, 493,
	1992, 1992, -159, 33435, 33435, -160, 489, 861, -107, -1000,
	774, 752, -1000, -1000, 64908, 64908, 33435, 33435, -1000, 6770,
	6770, 6770, -1000, 269, -1000, -1000, 1747, 2816, -1000, -177,
	86574, 86421, 4400, 36291, 52722, -165, -1000, -1000, 78873, 90373,
	-208, -1000, -1000, -1000, 590, -1000, 3014, -1000, -1000, 1923,
	-1000, -1000, -1000, 78873, 2001, -1000, 926, 33435, 7692, 483,
	33435, -1000, -1000, 2227, 2353, 2230, 482, -1000, -1000, -1000,
	-1000, -1000, 915, 1554, -1000, -1000, 90373, 2795, 33435, -1000,
	-1000, 481, 480, 90373, 479, 787, 2334, -1000, -1000, -1000,
	90373, 478, 2859, -1000, -1000, -1000, -1000, 1816, 64908, 107,
	850, -1000, 1666, 1818, 477, -1000, -1000, 1832, 2186, -1000,
	68947, 37719, 37719, 267, 2865, 853, -1000, 2942, -1000, 2864,
	-1000, 33435, -1000, 64908, 33435, 1866, 54078, -1000, 2095, -1000,
	1121, -166, 78873, 1428, -1000, -1000, 52275, 52275, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 915,
	-167, -174, -1000, 52275, -1000, 1855, -1000, 78873, -1000, 78873,
	-1000, -1000, -175, -180, -1000, 1713, 33435, 24247, -1000, -1000,
	4400, -181, -1000, -186, -1000, 2863, -1000, -1000, -1000, -1000,
	2529, 2294, 86275, 2069, 78873, 86063, 2345, -1000, -1000, 1646,
	78873, 2230, 2290, 64908, 925, -188, 1658, 1658, 33435, 23771,
	1656, 33435, -1000, -1000, 2795, -1000, 1832, 64908, 78873, -1000,
	2771, -1000, 2684, -1000, -1000, -1000, 2230, 107, -1000, -1000,
	107, -191, 924, -199, 64908, -1000, 2097, 1266, -1000, 876,
	-1000, -1000, -201, -206, 1596, 915, 876, -207, -1000, -214,
	-215, -1000, -1000, 262, 34387, 34387, 34387, -208, -216, -1000,
	78873, 473, 2461, 865, -1000, 1840, 1524, 261, 947, -1000,
	-1000, 2337, -220, -1000, 864, 472, -1000, 33435, 915, -221,
	-1000, 905, -223, -1000, 901, -229, -1000, 2332, -1000, -232,
	1816, -1000, 471, -234, -1000, -1000, 1782, -1000, 1646, 863,
	-1000, 915, 469, 1596, 467, -1000, 45887, -1000, 861, 861,
	2230, 1596, -1000, 861, -1000, -1000, -1000, 2586, -1000, 37243,
	1771, 1445, 88618, 2586, 2586, -1000, -1000, 78873, 2832, -1000,
	1851, 1850, 1258, -1000, -1000, -1000, -1000, -1000, -1000, 876,
	-1000, 2831, 2069, 90373, 2230, -1000, 1658, 2261, -1000, 1658,
	2320, -1000, 1627, -1000, -1000, 78873, -1000, 78873, 1366, 1363,
	3011, 850, 1832, 1596, 33435, 2230, 33435, -226, -1000, -1000,
	1646, 2230, -1000, -1000, 1630, 2861, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 785, -1000, 2670, -1000, 940, 1998,
	1998, -1000, 782, 1840, -1000, -1000, 466, -1000, 461, -1000,
	-235, -1000, -1000, 2985, -1000, 1832, -1000, 2230, -237, 1646,
	-240, -1000, 876, 1646, 1441, -1000, -1000, 1730, 33911, 33435,
	-1000, 2928, -1000, -1000, 2134, -1000, 33435, 2337, 33435, 33435,
	1804, -1000, -1000, 1646, 915, 876, 1596, -1000, 876, -1000,
	-1000, -1000, 90373, -1000, -1000, -1000, 90373, -1000, -243, -251,
	-1000, -1000, -1000, 876, 1596, -1000, 2230, -1000, 1646, 1000,
	-1000, 2230, 1646, -1000, 460, 1646, 876, 33435, 876, -1000,
	-252, -1000, 1646, -1000,
}
var sqlPgo = [...]int{

	0, 3734, 3733, 3731, 3729, 3726, 3722, 3720, 3718, 3713,
	3712, 3711, 3710, 3704, 3700, 3698, 3696, 3695, 3693, 3692,
	3691, 3690, 3689, 3688, 3687, 3686, 3685, 3683, 3682, 3681,
	3680, 3678, 3677, 3676, 3674, 3672, 3670, 3668, 3658, 3657,
	3656, 3655, 3651, 3648, 3647, 3646, 3645, 3642, 36, 3641,
	3639, 3635, 3632, 3629, 3621, 3620, 3618, 3615, 3613, 3612,
	3608, 3607, 3606, 3605, 3604, 3603, 33, 3602, 218, 3601,
	3600, 3599, 3596, 3594, 3593, 3591, 3590, 3589, 3588, 217,
	3586, 84, 3584, 3583, 3580, 3574, 3571, 216, 3569, 3568,
	3565, 3561, 3558, 3556, 3554, 3552, 149, 199, 3550, 163,
	3547, 3546, 3544, 3543, 3540, 3538, 3537, 3536, 3534, 3531,
	203, 3527, 215, 3525, 3523, 3517, 3516, 3515, 3514, 3513,
	3508, 3503, 3498, 3493, 3491, 3490, 3483, 3481, 3480, 3476,
	3468, 3466, 3459, 3458, 3457, 3456, 3455, 3452, 3451, 3448,
	3447, 222, 156, 3442, 3439, 213, 212, 3438, 3436, 3434,
	3432, 124, 101, 102, 17, 3428, 89, 39, 3426, 9,
	120, 202, 6863, 196, 3425, 3424, 3422, 201, 146, 3419,
	194, 3413, 3411, 3408, 3403, 69, 59, 139, 138, 127,
	129, 316, 3392, 3391, 70, 49, 41, 30, 3389, 3388,
	3387, 2867, 99, 3386, 211, 197, 122, 3384, 3380, 3378,
	1114, 3377, 43, 3376, 161, 90, 95, 15, 93, 3372,
	110, 27, 3371, 125, 38, 3369, 117, 68, 56, 6363,
	6601, 3368, 80, 74, 72, 77, 185, 179, 157, 119,
	175, 165, 135, 294, 3365, 238, 3363, 46, 118, 3362,
	3361, 3358, 54, 154, 83, 3357, 3354, 47, 6, 2,
	11, 131, 7, 88, 14, 3352, 10, 3351, 3350, 3348,
	3344, 25, 132, 3342, 224, 3341, 48, 35, 37, 3340,
	20, 171, 3339, 190, 104, 3338, 3337, 206, 162, 150,
	3335, 82, 186, 3334, 3333, 3330, 3328, 3327, 97, 22,
	96, 3325, 3324, 114, 193, 153, 3322, 40, 3320, 133,
	75, 105, 221, 92, 183, 81, 176, 143, 187, 3318,
	3317, 3316, 147, 3315, 3312, 172, 126, 3311, 3309, 159,
	225, 31, 55, 191, 57, 145, 137, 3308, 155, 3307,
	3303, 3302, 223, 142, 168, 1, 21, 66, 94, 29,
	18, 189, 116, 235, 78, 3301, 3972, 1414, 1747, 44,
	3300, 113, 98, 51, 91, 111, 210, 53, 3298, 3293,
	550, 3290, 3285, 3281, 3280, 141, 3278, 3277, 3274, 112,
	109, 170, 3272, 60, 62, 12, 107, 246, 214, 79,
	181, 151, 247, 3271, 140, 3270, 67, 115, 3269, 152,
	205, 3268, 3265, 136, 3262, 123, 745, 42, 134, 3261,
	177, 3259, 3258, 3255, 3235, 3232, 3230, 3228, 475, 188,
	3224, 3222, 3221, 209, 148, 3219, 208, 121, 182, 71,
	34, 3218, 100, 1782, 3217, 174, 180, 50, 3216, 3699,
	52, 0, 8659, 8178, 6123, 8845, 3212, 3463, 3209, 3206,
	3205, 167, 106, 3204, 3203, 3199, 76, 3191, 64, 3187,
	3183, 45, 3181, 13, 4, 8, 19, 16, 1086, 288,
	3180, 3177, 73, 103, 86, 3176, 219, 184, 3175, 3174,
	3173, 3172, 63, 3171, 26, 3170, 23, 3169, 3168, 32,
	3, 28, 3167, 3166, 195, 3165, 198, 3164, 3157, 2888,
	108, 3156, 3155, 207, 58, 3153, 204, 3152, 2875, 130,
	178, 3151, 3150, 3147, 128, 3146, 3144, 3142, 200, 3141,
	3140, 24, 3138, 5, 3136, 3135, 158, 2710, 3133, 3132,
	61, 3128, 144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 11, 11, 7,
	7, 8, 8, 8, 36, 36, 9, 9, 9, 10,
	10, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	15, 15, 26, 26, 16, 16, 28, 28, 17, 17,
	29, 29, 493, 493, 20, 31, 21, 32, 14, 494,
	494, 494, 494, 25, 22, 33, 23, 23, 23, 23,
	23, 155, 155, 155, 155, 19, 19, 27, 27, 178,
	178, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 492, 492, 180, 180, 179, 174, 174,
	495, 495, 181, 181, 181, 183, 183, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 397, 397, 397, 502,
	502, 502, 503, 503, 504, 504, 504, 504, 504, 37,
	37, 37, 95, 95, 95, 96, 96, 97, 97, 156,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 83,
	83, 429, 429, 430, 430, 151, 151, 152, 152, 152,
	152, 153, 153, 154, 154, 154, 51, 39, 39, 39,
	39, 39, 39, 39, 40, 40, 40, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 42, 42, 42,
	49, 49, 49, 49, 142, 142, 52, 52, 52, 52,
	52, 52, 52, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 506, 506, 507, 507, 508, 508, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 63, 63, 263, 263,
	236, 236, 64, 64, 64, 65, 65, 66, 66, 53,
	53, 486, 486, 278, 278, 388, 388, 68, 68, 298,
	298, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 228, 228, 74, 74, 74, 279, 279, 79,
	79, 79, 79, 79, 79, 79, 79, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 390, 390, 80, 80, 80, 358, 358, 84,
	84, 84, 313, 313, 85, 85, 85, 85, 85, 86,
	86, 86, 86, 98, 98, 98, 98, 489, 489, 271,
	271, 194, 194, 194, 194, 91, 91, 91, 91, 92,
	92, 92, 93, 93, 147, 147, 104, 104, 104, 104,
	104, 103, 103, 103, 103, 103, 103, 43, 43, 43,
	44, 44, 45, 45, 46, 46, 47, 47, 48, 48,
	48, 48, 48, 106, 106, 499, 499, 108, 105, 105,
	105, 107, 107, 107, 107, 109, 110, 110, 110, 110,
	110, 110, 110, 110, 111, 111, 422, 422, 287, 287,
	420, 420, 438, 438, 421, 421, 240, 240, 240, 240,
	240, 241, 241, 241, 428, 428, 428, 428, 428, 428,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 148, 148, 149, 150, 150, 150,
	150, 131, 131, 131, 141, 141, 141, 141, 141, 141,
	141, 134, 134, 134, 121, 121, 113, 113, 113, 113,
	113, 117, 117, 117, 117, 117, 117, 117, 117, 114,
	114, 123, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 320, 320, 320,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	137, 137, 137, 137, 137, 137, 372, 372, 132, 132,
	132, 132, 136, 136, 136, 136, 303, 303, 129, 129,
	129, 130, 130, 130, 135, 135, 133, 133, 138, 138,
	138, 138, 116, 116, 116, 510, 510, 510, 139, 139,
	128, 128, 140, 140, 140, 140, 140, 140, 140, 140,
	127, 127, 127, 126, 126, 126, 126, 119, 487, 487,
	484, 484, 484, 484, 484, 484, 484, 485, 485, 488,
	488, 89, 89, 89, 58, 58, 58, 59, 59, 159,
	159, 159, 159, 248, 248, 248, 248, 157, 157, 158,
	158, 60, 60, 511, 511, 511, 496, 496, 496, 497,
	497, 497, 497, 497, 497, 242, 242, 243, 243, 338,
	338, 338, 338, 338, 246, 246, 246, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 249, 249, 182, 182,
	182, 252, 253, 253, 250, 250, 251, 251, 251, 255,
	255, 254, 257, 257, 256, 337, 447, 447, 449, 449,
	449, 449, 449, 449, 449, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 512, 445, 445, 445,
	446, 441, 441, 442, 442, 442, 442, 442, 244, 244,
	245, 245, 245, 245, 443, 444, 269, 269, 375, 448,
	448, 450, 450, 452, 513, 513, 513, 513, 513, 513,
	514, 514, 514, 336, 336, 335, 335, 261, 261, 453,
	453, 453, 453, 454, 454, 454, 454, 454, 457, 456,
	455, 455, 455, 455, 455, 62, 62, 62, 300, 300,
	299, 299, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 144, 144, 197,
	197, 57, 57, 57, 12, 12, 12, 498, 498, 498,
	61, 61, 61, 61, 196, 196, 196, 196, 196, 196,
	491, 491, 490, 490, 198, 198, 516, 516, 67, 67,
	67, 67, 67, 67, 67, 391, 391, 392, 392, 56,
	56, 56, 56, 56, 321, 321, 319, 319, 318, 318,
	268, 268, 374, 202, 202, 175, 175, 175, 24, 18,
	18, 34, 34, 35, 35, 30, 30, 500, 500, 501,
	501, 90, 90, 94, 94, 94, 102, 102, 143, 143,
	143, 143, 143, 143, 143, 38, 38, 38, 38, 50,
	50, 50, 50, 100, 518, 518, 518, 101, 101, 101,
	517, 517, 195, 195, 332, 332, 333, 333, 519, 519,
	334, 334, 334, 334, 189, 188, 190, 190, 55, 55,
	55, 184, 184, 185, 185, 186, 186, 187, 187, 520,
	520, 87, 87, 87, 146, 146, 235, 235, 235, 328,
	328, 328, 262, 262, 208, 208, 331, 331, 329, 329,
	329, 329, 297, 297, 297, 145, 145, 276, 276, 289,
	289, 290, 290, 385, 385, 291, 99, 99, 162, 162,
	160, 160, 160, 160, 160, 160, 160, 160, 167, 167,
	168, 168, 169, 169, 170, 171, 171, 171, 171, 280,
	280, 172, 172, 172, 161, 161, 161, 163, 163, 163,
	163, 163, 163, 163, 166, 166, 166, 166, 173, 173,
	173, 165, 165, 464, 464, 464, 466, 466, 468, 468,
	467, 467, 463, 463, 465, 465, 515, 515, 302, 302,
	302, 259, 260, 258, 258, 266, 266, 264, 265, 265,
	267, 267, 373, 373, 373, 176, 176, 176, 294, 294,
	294, 294, 295, 295, 324, 324, 322, 322, 322, 322,
	323, 323, 325, 325, 325, 326, 326, 327, 327, 293,
	293, 354, 354, 164, 164, 164, 273, 273, 273, 274,
	274, 344, 344, 344, 344, 344, 344, 345, 345, 343,
	343, 343, 343, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 377, 378, 378, 275, 275, 379, 330, 330,
	482, 482, 482, 483, 483, 371, 371, 380, 380, 380,
	380, 380, 380, 369, 369, 370, 370, 386, 387, 387,
	306, 306, 306, 306, 304, 304, 307, 307, 307, 307,
	305, 305, 381, 381, 381, 381, 296, 296, 382, 382,
	382, 382, 383, 339, 340, 340, 393, 393, 393, 393,
	395, 272, 272, 272, 272, 272, 440, 439, 439, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 409, 409,
	409, 409, 409, 409, 409, 409, 410, 410, 410, 410,
	410, 410, 396, 396, 396, 396, 396, 400, 400, 400,
	399, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 401, 401, 406, 406, 407, 407, 407, 402, 403,
	408, 408, 408, 408, 521, 521, 412, 412, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 398, 398, 398,
	405, 405, 405, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 314, 314, 316, 316,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 348, 348, 348,
	348, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 458, 458, 458, 458,
	458, 458, 458, 458, 350, 350, 461, 461, 462, 462,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 469,
	469, 470, 470, 472, 472, 473, 473, 474, 475, 475,
	475, 476, 477, 477, 471, 471, 478, 478, 478, 478,
	479, 479, 480, 480, 480, 480, 480, 481, 481, 481,
	481, 481, 360, 360, 361, 361, 367, 367, 367, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 199, 199, 199, 199, 199,
	285, 285, 283, 283, 283, 286, 286, 284, 284, 282,
	282, 281, 281, 357, 357, 355, 355, 359, 359, 308,
	308, 411, 411, 411, 411, 411, 411, 411, 411, 309,
	309, 309, 317, 310, 310, 311, 311, 311, 311, 311,
	351, 352, 312, 312, 312, 353, 353, 362, 366, 366,
	365, 364, 364, 363, 363, 341, 341, 342, 342, 292,
	292, 522, 522, 288, 288, 384, 384, 384, 384, 238,
	238, 277, 277, 237, 237, 230, 230, 231, 231, 231,
	231, 270, 270, 368, 368, 413, 413, 414, 414, 415,
	415, 416, 416, 417, 418, 419, 356, 356, 218, 217,
	205, 206, 216, 215, 214, 204, 207, 211, 212, 213,
	209, 210, 224, 223, 222, 229, 220, 221, 389, 203,
	232, 232, 233, 233, 233, 234, 234, 234, 234, 200,
	200, 201, 201, 225, 225, 226, 227, 227, 219, 219,
	219, 191, 191, 191, 192, 192, 193, 193, 427, 427,
	424, 424, 424, 425, 425, 425, 426, 426, 426, 426,
	423, 423, 423, 423, 423, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 432, 432, 433, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 434, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 437, 437,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 1, 3, 4, 6, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 9, 6, 9, 6, 5,
	6, 5, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 4, 7, 7, 9, 8,
	9, 5, 3, 5, 7, 4, 12, 4, 12, 1,
	3, 5, 5, 2, 5, 3, 6, 4, 6, 5,
	6, 6, 4, 8, 3, 4, 10, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 10, 8,
	6, 6, 6, 9, 4, 3, 2, 2, 0, 1,
	1, 1, 1, 3, 6, 4, 6, 7, 9, 6,
	7, 2, 5, 6, 2, 1, 3, 1, 3, 1,
	6, 4, 9, 7, 12, 12, 12, 9, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 6, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 6, 6, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 3, 3, 4, 3, 4, 7, 4,
	4, 4, 3, 5, 7, 4, 3, 3, 4, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	1, 2, 1, 2, 1, 2, 7, 3, 2, 0,
	1, 3, 3, 1, 0, 1, 2, 2, 1, 6,
	5, 1, 2, 1, 3, 2, 0, 9, 3, 2,
	0, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 5, 7, 3, 4, 6, 3, 4,
	6, 3, 1, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 3, 6, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 3, 5, 7, 2, 3, 0, 3,
	5, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	4, 7, 2, 6, 4, 7, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 3, 1, 1, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 1, 3, 2, 3,
	3, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 2, 1, 3, 3, 3,
	3, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 4, 5, 5, 5,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 5, 5, 5, 7, 3, 3, 3, 4, 3,
	5, 3, 6, 5, 6, 3, 5, 6, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 7, 9, 3, 4,
	10, 10, 3, 5, 5, 5, 3, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 3, 6, 3, 11, 14, 0,
	2, 4, 3, 0, 4, 5, 4, 3, 3, 1,
	3, 10, 13, 0, 2, 3, 1, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 8,
	4, 2, 5, 5, 5, 2, 1, 10, 11, 7,
	5, 3, 1, 5, 9, 7, 11, 3, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 1, 4, 0, 6, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 5, 8, 4, 1, 0,
	1, 2, 2, 1, 2, 3, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 2,
	2, 4, 7, 3, 4, 6, 3, 1, 1, 1,
	8, 10, 11, 5, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 3, 0, 1, 8, 3,
	6, 6, 5, 3, 4, 1, 0, 1, 3, 16,
	19, 15, 18, 4, 2, 0, 1, 0, 1, 0,
	1, 3, 3, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 4, 2,
	1, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	1, 2, 4, 4, 2, 3, 5, 5, 1, 3,
	1, 0, 1, 2, 3, 2, 4, 2, 3, 0,
	2, 0, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 1, 2,
	6, 7, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 3, 5,
	1, 3, 3, 4, 5, 2, 2, 0, 2, 2,
	1, 1, 1, 0, 1, 0, 2, 2, 5, 4,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 2, 0, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 1, 1, 1, 3, 2,
	4, 4, 0, 4, 4, 3, 4, 1, 5, 3,
	4, 5, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 2, 1, 0, 2, 5, 7, 2,
	1, 2, 4, 3, 5, 0, 1, 3, 5, 1,
	2, 1, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	6, 6, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 5, 4, 6,
	3, 5, 4, 6, 4, 6, 5, 7, 3, 3,
	3, 3, 3, 4, 3, 2, 4, 2, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 6, 1, 1, 1,
	1, 1, 1, 2, 1, 5, 5, 6, 3, 1,
	1, 1, 2, 2, 2, 4, 3, 5, 6, 8,
	6, 5, 4, 3, 2, 2, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 3, 4, 3, 3, 4, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 3, 3, 3, 0,
	1, 4, 2, 2, 2, 2, 2, 3, 2, 2,
	3, 0, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 1, 1, 1, 2, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 1, 7, 5, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 490, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -143, -148, -149, -150,
	-3, -37, -39, -52, -68, -70, -79, -88, -87, -89,
	-91, -95, -94, -83, -43, -99, -103, -112, -144, -145,
	-146, 90, 74, 135, 114, 120, 172, 316, 348, 358,
	342, -107, -108, 373, -38, -50, -101, -100, 67, 115,
	337, -4, -12, 28, 44, -40, -41, -42, 57, -57,
	-54, -63, -505, 92, -465, -71, -74, -509, 125, 141,
	190, 306, -92, -93, 344, 346, 142, -45, -44, 136,
	-160, -162, -105, -106, -147, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -133, -129, -130, -131, -132, -134, -135, -136, -137,
	-138, -139, -140, 377, 426, 46, 387, 76, 128, 352,
	21, -5, -6, -7, -8, -9, -10, -11, -13, -53,
	-55, -56, -58, -59, -60, -67, -61, -62, -464, -72,
	-73, -75, -77, -78, -76, 343, -163, -161, 487, 440,
	-15, -20, -21, -16, -17, -19, -22, -18, -26, -31,
	-32, -28, -29, -27, -30, -33, -34, -35, -36, -24,
	-25, -14, -23, 458, 466, -166, -164, -165, -173, 365,
	448, 403, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, -220, -225, -226, -227, -219, -191, -434, -437,
	4, -431, -435, 147, 199, 271, 21, 22, 23, 24,
	25, 26, 28, 29, 40, 41, 43, 42, 44, 45,
	46, 51, 54, 55, 56, 57, 58, 62, 67, 68,
	73, 74, 75, 76, 77, 78, 79, 85, 82, 83,
	84, 87, 89, 90, 91, 93, 95, 96, 104, 105,
	106, 107, 109, 114, 115, 118, 113, 117, 120, 123,
	124, 125, 127, 129, 130, 132, 133, 135, 136, 139,
	137, 409, 138, 140, 141, 142, 143, 153, 154, 155,
	160, 162, 166, 167, 170, 171, 173, 177, 179, 180,
	181, 182, 183, 189, 190, 192, 193, 194, 195, 200,
	201, 205, 202, 211, 215, 216, 217, 219, 223, 224,
	225, 226, 227, 230, 229, 232, 235, 236, 239, 240,
	241, 244, 245, 246, 247, 249, 250, 253, 251, 254,
	252, 256, 257, 258, 255, 261, 259, 263, 264, 269,
	267, 265, 266, 273, 276, 187, 278, 279, 282, 300,
	286, 287, 288, 291, 292, 295, 298, 299, 301, 302,
	303, 304, 305, 306, 307, 309, 310, 314, 316, 317,
	319, 321, 322, 323, 324, 325, 326, 327, 329, 330,
	337, 342, 339, 340, 341, 343, 344, 345, 346, 348,
	350, 351, 352, 353, 355, 357, 374, 375, 389, 358,
	359, 360, 361, 362, 363, 364, 368, 366, 367, 369,
	370, 371, 373, 376, 377, 379, 380, 383, 385, 386,
	387, 388, 390, 393, 394, 395, 396, 391, 402, 399,
	400, 404, 405, 406, 407, 408, 410, 412, 420, 421,
	423, 426, 427, 428, 418, 430, 431, 434, 435, 436,
	439, 437, 438, 440, 442, 445, 446, 447, 453, 452,
	459, 460, 462, 463, 464, 35, 47, 48, 50, 52,
	63, 64, 65, 69, 110, 111, 134, 144, 145, 156,
	168, 169, 174, 176, 184, 185, 186, 206, 207, 209,
	213, 233, 275, 277, 293, 297, 311, 312, 313, 315,
	328, 354, 381, 392, 397, 413, 414, 415, 416, 422,
	424, 448, 449, 450, 454, 461, 284, -213, 2, -191,
	-191, 316, 27, 2, 27, 310, 367, 405, 407, 2,
	-489, -271, 2, 27, -194, -191, 92, 172, 365, -213,
	2, -489, -271, 24, 2, -191, 2, -195, 2, 358,
	-191, 490, 87, 241, 68, 354, 370, -110, 421, -109,
	413, 360, -111, -422, 2, 261, -191, 490, 490, 490,
	27, -203, -191, 403, 199, 106, 400, 490, 2, 403,
	303, 452, 366, 106, 325, 199, 428, -498, 350, 175,
	441, 417, -484, 2, 4, -435, -431, -231, -230, 403,
	106, -227, -219, 480, -226, 490, 490, 490, 2, 216,
	217, 324, 323, 370, 371, 490, 490, 2, 26, 60,
	86, 89, 112, 143, 163, 166, 289, -506, 250, 300,
	322, 369, 402, 410, 423, -497, 388, 62, 360, -496,
	-498, 428, 123, -318, 106, 241, 171, 435, 407, 405,
	433, 118, 205, 438, 437, 490, 26, 60, 71, 89,
	123, 143, 163, 166, -508, 300, 322, 357, 360, 369,
	402, 410, 423, 2, 452, 366, 403, 199, 106, 428,
	-498, 320, -81, 2, 487, 31, 30, 373, -156, 403,
	210, 2, -191, 216, 217, 2, 490, 490, 164, -484,
	2, 216, 217, 2, 210, 2, 62, 362, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 2, -141, 370, 388,
	181, 44, 68, 27, 321, 73, 304, 107, 173, 199,
	200, 224, 86, 87, -320, 43, 217, 216, -372, 404,
	361, 367, 399, 358, 421, 92, 442, 351, 464, 325,
	326, 137, 4, 106, 261, 372, 413, 241, 78, -515,
	2, 403, -517, 2, 421, 421, 2, -517, 2, -517,
	2, -517, 2, -518, 421, 461, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, -161, -163, -162, 490, 490, 490, 490, 490,
	490, -141, 370, 2, 68, 27, -264, -266, 432, 208,
	131, 290, -160, -162, 2, -464, -420, 2, -346, -438,
	-348, 478, 479, 471, 401, 61, 270, 465, -360, 112,
	433, 284, -437, -349, -362, 134, 354, -286, 8, 9,
	5, 6, 7, -200, -350, -356, 425, 146, 274, -234,
	491, 10, 487, -461, -162, -361, 36, 176, 59, -424,
	-233, -201, -396, 209, -232, -219, -458, -459, 4, -431,
	-432, -425, -399, -407, -403, -404, -410, -191, -434, 71,
	98, 99, 97, 102, 101, 243, 242, 103, 100, 372,
	441, 60, 35, 184, 185, 213, 275, 186, 69, -460,
	124, -433, 206, 207, 381, 48, 328, 156, 111, 110,
	277, 52, 50, 449, -408, 108, 413, 414, 415, 416,
	168, 169, 144, 145, 297, 313, 397, 422, 424, 174,
	233, 94, 165, 204, 188, 212, 214, 218, 234, 237,
	262, 268, 272, 294, 296, 349, 378, -521, 450, 392,
	63, 64, -466, 329, -467, -213, -466, 490, 490, 492,
	490, -258, -259, -260, 2, 27, 121, 487, 2, -376,
	2, -377, -381, -162, 228, -380, 487, -378, 485, -220,
	285, -462, 355, -458, -459, -200, -219, -233, 4, -431,
	-433, -261, 487, 489, 106, 403, 72, 199, -313, 487,
	-191, 27, 284, 417, 492, -358, 487, 284, 164, 287,
	-191, 2, 2, 374, 2, 487, -110, 65, 421, 42,
	370, -333, 2, -334, -188, -189, -190, -386, 215, 319,
	327, 467, 464, -420, -499, 164, 470, 417, -420, -287,
	489, 2, 2, 2, 2, 2, -381, 184, -220, 2,
	-217, -423, 4, -431, -435, -432, -436, -434, 27, 30,
	31, 32, 34, 36, 37, 38, 39, 53, 59, 60,
	66, 70, 72, 81, 86, 92, 97, 98, 100, 99,
	101, 102, 103, 112, 116, 119, 121, 122, 126, 128,
	131, 146, 148, 161, 163, 164, 172, 175, 178, 191,
	203, 208, 210, 228, 231, 238, 242, 243, 270, 274,
	280, 284, 285, 289, 290, 308, 318, 331, 347, 365,
	372, 384, 398, 403, 411, 417, 419, 425, 432, 433,
	441, 443, 451, 455, 456, 457, 458, -437, 71, 2,
	-381, 184, 2, -222, 184, -381, -225, 2, -204, -191,
	2, -216, -423, 2, -237, 184, -220, -221, -225, -223,
	2, -225, -429, 184, 2, -427, 10, -426, 5, 4,
	-431, -435, -432, -96, -429, 487, 417, 492, -277, -230,
	-231, -270, -191, 489, -346, 2, -99, 2, -346, 184,
	2, -99, 184, 2, -346, 184, 2, -99, 184, 2,
	2, 2, 423, 2, 89, 184, -191, 403, 105, 2,
	341, -507, 357, 427, 452, 2, 2, 2, 2, 2,
	2, 403, -209, 2, -191, 161, -229, 184, 2, -191,
	366, -516, 329, -429, 184, 2, -223, 2, -223, 199,
	211, -204, 184, 2, 407, 405, 407, 405, 164, 2,
	210, 2, 210, 2, -382, 2, -383, -377, -220, 485,
	2, 2, 2, 2, 2, 184, -191, 403, 105, 2,
	226, 2, 2, 2, 2, 2, 2, 2, 2, -279,
	184, 2, -220, -279, 184, 2, -279, 184, 2, -319,
	2, 81, -204, 184, 2, -228, 184, 2, -223, -430,
	184, 2, -429, -390, 2, -389, -426, 448, -81, 487,
	-81, 487, 370, 487, -429, -220, -220, -346, -99, -97,
	-96, 164, -346, -99, -156, 161, 2, 106, 403, -141,
	2, 161, 443, 2, 8, 2, -429, 361, 326, 153,
	2, 374, 2, 375, 68, -320, 464, 68, 164, 2,
	164, 2, -303, 2, 458, -487, 2, 284, 164, 2,
	164, 2, 164, 2, 164, 2, 164, 2, 323, 371,
	217, 2, -99, 455, -346, 455, 2, 420, 225, 138,
	164, -303, 2, 164, 2, 164, 2, 5, 2, 389,
	2, 215, 319, 389, 2, -220, -510, 2, 403, 452,
	366, 2, 2, 82, 83, 164, 2, 164, 2, 164,
	464, 2, -296, -381, -332, -333, -332, 417, -264, -266,
	-141, 374, 2, -167, -294, -169, 161, -322, -323, -170,
	238, 148, 280, -171, -302, 27, 121, -302, -302, 55,
	488, 488, 11, 12, 70, 40, 478, 479, 480, 481,
	159, 482, 483, 476, 477, 475, 468, 469, 473, 221,
	222, 88, 472, 470, 80, 248, 356, 149, 150, 151,
	152, 338, 197, 33, 198, 14, 15, 16, 32, 289,
	237, 465, 188, 378, 471, 17, 18, 19, 212, 214,
	272, 47, 191, -199, -239, -346, -346, -346, -346, -346,
	-346, -346, 296, 487, -292, -341, 485, -162, 487, 487,
	487, -419, 8, -162, -346, -360, 488, -284, 487, -162,
	-360, -355, 487, 354, 485, 487, -363, -346, 5, 5,
	5, 487, 489, -469, 459, 161, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 315, -401, 487, -400, 487, -400, -400, 453, -398,
	487, 466, 460, 487, -398, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 453, 492,
	-466, -261, 487, -288, -384, -346, 480, -288, -288, 284,
	-281, -346, 94, -306, 218, 262, 165, 234, 349, 204,
	-343, 491, -343, -371, 466, -162, -378, -219, -162, -380,
	487, -376, -371, -82, -419, -68, -79, -87, -99, -112,
	-145, -146, 480, -220, 487, 164, 487, 489, 164, -270,
	-423, -204, -220, -232, -233, -237, 120, -281, -484, -270,
	-194, 37, -357, -393, -394, -440, 491, -439, -396, -406,
	-402, -405, 311, 312, -425, 50, 449, -408, 209, 4,
	-431, -433, 206, 207, 381, 48, 328, 156, 111, 110,
	277, 52, 413, 414, 415, 416, 168, 169, 450, 392,
	63, 64, -484, -270, 161, -422, -281, 37, -333, 2,
	112, -427, 42, -519, 492, 236, -241, 247, 269, 180,
	285, 462, 278, -428, 5, 4, -356, -368, 112, 241,
	209, -413, -415, 8, -414, 9, -416, 478, 479, -421,
	-420, 96, 489, -423, -178, 339, -177, 23, 28, 125,
	446, 139, -251, 201, 303, 134, 385, 436, -493, -494,
	359, 408, 409, 84, 278, 339, 134, -299, -301, 37,
	104, 264, 298, 56, 194, 252, 253, 387, 454, 134,
	339, -494, 339, -494, -180, 385, 436, -493, -494, 359,
	339, -179, -251, 134, 491, 23, 339, 373, 299, -503,
	-504, 125, 28, -490, -463, 458, 134, -387, -386, -430,
	-96, -277, 492, 492, -423, 480, 134, 134, 134, 134,
	2, 2, 270, 2, 2, 2, 166, -496, -508, 2,
	2, 2, -220, 184, -263, 284, -486, -278, 403, -220,
	270, -222, 184, 2, -225, 452, -490, 270, 37, 487,
	2, -319, 2, 199, -463, 270, -382, -235, -220, -377,
	-235, 373, -213, 37, -343, -343, 134, 2, 2, 2,
	-191, -181, 492, 58, 345, 134, -181, 134, -181, 134,
	-238, 184, -237, -181, 134, -181, 492, 134, 492, 134,
	488, 492, -390, -390, -429, -154, 458, 164, 92, 487,
	487, -156, -387, 492, -97, -429, -486, -204, 2, -220,
	2, 403, 219, -154, -429, -429, -429, -422, 27, 375,
	2, 323, 371, 83, 375, 2, -220, 403, 106, 199,
	74, -488, 161, -485, 350, -484, -220, 106, -220, 106,
	-220, 106, -220, -220, 2, 2, 2, 2, 79, 79,
	161, 2, 420, 2, 420, 2, -191, -191, -191, 236,
	-220, 161, 403, 199, 403, 199, 106, 403, -181, 492,
	-195, -167, -294, -422, -295, -294, -168, -167, -170, 161,
	327, 437, 264, 376, 223, -323, -322, 27, -346, -327,
	155, 263, -346, -325, -348, 478, 479, -414, -416, -280,
	278, -161, -161, -161, -267, -373, -346, 318, 199, -395,
	-393, -393, -218, -423, 413, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	237, 188, 378, 47, 191, -346, 417, -346, -346, -346,
	-346, 259, 270, 274, 425, 146, 434, 121, 278, -522,
	398, 39, -353, -162, -285, 487, -367, 34, 384, 27,
	-360, 487, 2, -341, -346, -342, -282, -281, -281, 488,
	451, 27, 121, 480, 2, 488, 492, 37, 488, -346,
	-282, -359, -355, -281, -366, -365, 455, -314, -315, 463,
	255, 109, 182, 254, -316, 364, -417, 8, -423, 480,
	-470, 154, 175, 487, 488, 2, 488, 2, 488, -346,
	2, 488, -346, 2, 488, -346, 2, 488, -346, 2,
	488, 2, -346, -346, -346, -346, -346, -346, -346, -281,
	8, -417, -417, 413, 413, -417, -417, -417, -409, 311,
	239, 312, 170, 258, 256, 257, 169, -409, -308, 2,
	-411, -281, 4, 463, 255, 109, 182, 254, 364, 5,
	-308, 2, -309, 2, -346, -281, -310, -347, -348, 478,
	479, 471, -360, -311, 2, -346, -282, -346, 53, 231,
	419, -312, -346, 164, -281, -281, 2, -281, 2, -467,
	37, -281, -273, 492, 164, 37, 4, -273, -273, 487,
	488, 492, -307, 179, 251, 246, -307, -376, -306, 218,
	-304, 294, -304, -304, -371, -205, 485, 493, -423, -371,
	-370, -369, 37, -213, 291, -371, -371, 489, 488, -370,
	486, -482, 487, 490, 490, 490, 490, 490, -220, 487,
	-281, -423, 390, 488, 489, 212, 212, 212, 212, 355,
	488, 417, 458, -81, 286, 488, 492, -272, 36, 485,
	489, -417, 2, 2, -412, 453, 487, 487, -315, 487,
	164, -271, -499, 488, 421, -334, -240, 327, 383, 340,
	368, 400, 8, 9, 8, 9, 492, -423, 492, -500,
	86, 417, 72, -337, 184, 72, -441, -207, 86, -442,
	-191, 66, 433, 318, 163, 132, -500, 86, 318, -500,
	86, 86, 373, 388, 55, -381, 40, 40, 27, -99,
	232, 164, 464, 403, 199, 417, -381, -301, -393, 104,
	252, 253, 55, -418, -413, 478, 479, -418, 55, -418,
	-418, -418, 458, -222, -381, 417, 417, 492, 40, 40,
	27, -99, 232, 164, 417, -237, -205, 447, 41, 447,
	417, 41, 360, 417, 492, 41, 41, -491, -196, 93,
	265, 245, 266, -197, -198, 305, 445, -429, -151, 195,
	488, -387, -230, -191, 489, -346, -99, -346, -99, 134,
	2, -516, 226, 487, -244, 270, 164, -270, -388, 210,
	492, -278, 134, -300, -299, 270, -224, 184, 2, -220,
	134, 129, 487, 325, 2, -206, 184, -192, -191, -319,
	-184, 406, 134, -298, 443, -328, -99, 487, 112, 37,
	-328, -289, -290, -385, -291, -207, 487, -213, -191, 2,
	-220, -279, -279, -279, -181, 492, 134, -204, -223, -228,
	-429, -430, -81, -389, 488, 488, 488, -153, 288, -152,
	-191, 5, -156, 443, -243, -338, -337, -445, -446, -441,
	237, 199, 433, 211, 147, -262, -208, -207, 105, -154,
	-96, -387, -154, -154, -387, -387, -220, 161, -154, -154,
	-154, 2, 2, -303, -220, -204, -237, -220, -270, -270,
	-303, -204, -303, -204, -303, -204, -99, -346, 370, 161,
	161, 489, -303, 325, 106, 403, 303, 199, -220, -237,
	-220, -237, -204, -220, -381, -295, -168, 285, 223, 376,
	-325, -326, -348, 354, 355, -326, 354, 355, 8, 9,
	8, 9, -172, 380, 273, -279, 492, -175, 38, 119,
	223, -220, 464, 130, -346, -346, 417, -522, 398, -353,
	130, -346, 259, 274, 425, 146, 434, 121, 278, 164,
	487, -347, -347, 488, -283, -346, -346, 486, 495, 488,
	-266, 492, -264, -346, -281, -281, 488, 489, -281, -270,
	486, 486, 492, 488, -364, -365, 126, -346, 417, 417,
	417, 417, 487, 488, 489, -475, 295, 487, 487, -346,
	488, 488, 488, 488, 37, 492, 492, 492, 488, 492,
	492, 492, 488, 488, 488, 492, 488, 464, 464, 488,
	488, 488, 488, 492, 488, 492, 488, 164, 488, 488,
	-317, 308, 488, 11, 12, 478, 479, 480, 481, 159,
	482, 483, 476, 477, 475, 468, 469, 470, 80, 248,
	356, 14, 15, 16, 212, 191, -347, -347, -347, 488,
	-351, -352, 164, 161, 37, -312, -312, -312, 488, 164,
	-281, 488, 488, 487, -468, 250, 270, 488, -340, -339,
	456, -384, -274, 2, -376, -215, -423, -340, -340, -281,
	-346, 218, 218, -305, 443, 284, -307, -376, -370, -419,
	-345, -344, 162, 38, 119, 267, 187, -370, -213, -261,
	-370, -370, -423, -371, -371, -369, 488, -483, -419, 488,
	-275, -379, -462, -266, 489, -154, -423, -142, 5, 274,
	-142, -142, -142, -270, 24, 309, -393, 485, 486, 8,
	-423, 487, -417, -417, -417, -270, 164, -420, -333, 431,
	77, 327, 413, -420, -177, 339, -207, -207, -220, 270,
	-337, 184, -183, 270, -393, -214, -191, 487, 487, 223,
	223, 443, -207, -214, 223, 184, -207, 184, -214, -214,
	-492, 327, 279, -346, 240, 325, 271, -178, 339, -99,
	-99, -99, 487, -499, 443, 120, -220, -237, -220, -224,
	339, 268, -232, -418, -418, -299, 339, -222, -204, -179,
	-99, -99, -99, 487, -205, -180, 339, 5, 184, -207,
	5, -223, -207, -229, -502, -427, 103, 372, -504, 23,
	-207, 184, -207, -196, -429, 274, 439, -490, -154, 164,
	-151, 480, -191, 452, -191, -242, -245, -243, -207, -159,
	460, 458, 134, -236, -220, 485, -154, -429, -220, -229,
	134, -261, 270, -429, 487, 2, 2, 284, 270, -206,
	184, -185, 127, -520, 470, -204, -340, -274, -297, -331,
	347, 284, -262, 448, -213, -297, -276, 492, 164, 470,
	489, -262, 2, -181, -181, -181, -237, -238, -181, -181,
	-81, -81, -154, 492, 487, 470, 470, 487, -429, -429,
	488, 492, -220, -206, 199, 199, -212, -192, 488, 492,
	489, 487, -154, 164, -46, 458, 403, 491, -303, -303,
	-303, 370, 370, -191, -216, -204, -220, -217, -237, 161,
	161, 437, -326, 285, 244, -373, -176, 276, -220, 491,
	-346, -346, 130, 130, -346, -347, -347, -346, 130, 164,
	487, -346, -357, 32, 32, 488, 492, -342, -346, 488,
	451, -266, -266, 488, 480, -423, 491, 488, -355, 128,
	-346, 411, 255, 182, 254, -316, 254, -316, -316, -417,
	5, -423, 480, -476, -210, 487, -191, 456, -265, 290,
	488, -395, -393, -346, -346, -346, -346, -346, -417, -398,
	-398, -417, -417, -346, -351, -346, -395, -393, -347, -347,
	-347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
	-347, -347, -347, -347, -347, -347, -347, 121, 270, 278,
	-347, -352, -351, -346, -346, -393, 488, 488, 488, -281,
	-81, 487, 250, -293, 175, -346, -387, 492, -293, -293,
	488, -376, -376, 487, -346, 218, 486, 492, 494, 470,
	-261, 489, -369, -370, 486, 488, 492, 488, 492, -330,
	37, 488, -423, 287, 5, 8, 485, 486, 489, -417,
	488, 488, 488, -270, -346, 417, 417, 134, 270, 445,
	-447, -442, 132, -346, -268, -374, -346, 487, 487, 2,
	-174, 125, 373, -501, 2, 443, 134, -181, 134, -181,
	462, 487, 487, 417, 458, -281, -346, -155, 112, -422,
	-494, 491, -494, 491, 417, 417, 458, -281, 417, -397,
	45, 25, 270, -223, 417, 417, -181, 134, 428, 373,
	-429, 274, -430, -154, 2, -224, 2, 488, 488, 492,
	-448, 37, 282, 487, 282, -220, -64, 458, -386, -419,
	-222, 37, 134, -490, -391, -392, 5, -220, 134, 284,
	270, -186, 230, -520, -427, -463, -266, -297, -288, 271,
	85, 488, -340, -290, -274, -346, 2, 488, -181, -152,
	-153, -429, -429, -429, -154, -156, -156, -338, -246, 487,
	-206, -192, 487, -156, -208, 2, -430, -99, 288, -220,
	480, -303, -253, -252, 303, 278, -253, 354, 354, 285,
	155, 227, -175, -205, -346, -346, 130, 32, 32, -346,
	-346, -357, 488, -346, -346, -281, 486, 5, -346, 488,
	488, 8, -346, 488, 489, -477, -191, -346, 488, 55,
	488, 488, 492, 492, 488, 488, 488, 488, 488, 488,
	488, -352, 164, 121, 278, 487, 488, 488, -81, -354,
	178, 55, -376, -354, -354, -305, -270, -376, -344, -205,
	485, -423, -419, -379, 487, 489, 486, 2, 485, -423,
	488, -207, -207, -337, 134, -449, 86, -451, 70, 147,
	92, 270, 274, 433, 318, 66, 112, 331, -512, 37,
	488, 488, 492, -175, -268, -270, 270, 395, 112, 270,
	112, 105, 428, 73, -207, -214, -270, -270, -220, 140,
	488, 492, 470, 2, 480, 480, -224, -222, 140, 488,
	-205, 5, 5, 134, -202, 70, 5, -207, -207, -223,
	105, -261, -249, 202, -207, -446, -443, -444, 318, -450,
	-452, 147, 318, -99, -158, -157, -191, 5, 2, 487,
	-244, 288, 486, -300, -99, -224, 488, 492, -321, 443,
	-205, -220, 134, -187, 229, -520, -427, -184, -324, -322,
	-329, 487, 284, -99, -266, 470, 488, 488, 105, 105,
	193, 133, -268, 487, 487, -270, 105, 488, -47, -48,
	199, 86, 307, -217, 403, 199, 487, 487, -175, -346,
	-346, -346, 488, -266, -423, 480, -471, 303, 488, -373,
	-346, -346, -347, 164, 487, -357, 488, -472, 457, -346,
	-281, -472, -472, 488, -419, 2, 485, 2, -337, -214,
	-218, -211, -191, 147, 184, 274, 223, 487, -347, -220,
	487, 2, -513, 116, 203, -336, -514, 91, 396, 192,
	-374, -176, 488, 488, 274, 274, -346, -393, 487, -181,
	-181, 488, 488, -346, 417, -422, 90, -420, 2, -494,
	-346, 417, 5, -181, -218, -181, -181, -202, 428, 37,
	-250, -251, 191, -448, 223, -211, 223, -511, 458, 488,
	492, 470, 470, -242, -159, -65, -66, 418, -386, -261,
	5, 487, -191, 284, 487, -205, -520, -427, -185, -297,
	122, -270, 86, -324, -353, -154, 487, 487, -247, 75,
	87, 113, 183, 167, 200, 388, 393, 27, -247, 488,
	-268, -268, 488, 487, -154, 492, 27, 487, 27, 487,
	-220, -237, -281, -281, 488, -266, 55, 492, 488, 488,
	-347, -357, 488, -473, -474, -210, 486, 2, -451, -211,
	270, 443, -346, -193, 487, -346, 203, 117, 189, -249,
	487, -335, 443, 331, -202, -268, 487, 487, 487, 470,
	164, 487, -397, -181, -223, -99, -159, 301, 487, -248,
	284, 105, 264, -157, -349, -349, 488, 37, -66, 9,
	37, -268, -220, -268, 284, -427, -186, 437, 271, 488,
	-214, -297, -430, -430, -335, 488, 488, -430, -48, -270,
	-270, 488, 488, -478, 325, 355, 177, -281, -267, 488,
	492, 37, 134, 179, 488, -453, 249, -191, 488, 117,
	189, -250, -270, -249, 179, -220, -495, 443, 488, -255,
	-254, -252, -257, -256, -252, -281, -420, 90, 301, -281,
	-202, -248, -220, -269, -375, -207, 76, 105, -249, -99,
	-99, 488, -321, 488, -220, -187, 373, -339, 488, 488,
	-336, -335, -340, 488, 488, 488, 488, -479, -480, 47,
	430, 96, -346, -479, -479, -474, -476, 147, 458, -454,
	-457, -456, 284, 379, 165, 302, 488, 395, 454, -513,
	488, 458, -261, -346, -335, 488, 492, 448, 488, 492,
	448, 488, 164, 488, -181, 487, 488, 492, 317, 118,
	125, -250, -511, -335, 487, -336, 487, -289, -154, -154,
	-249, -336, -154, -481, 132, -480, 314, 160, 354, 314,
	160, -481, -481, -211, 51, -456, 284, -457, 284, 437,
	118, -340, 51, -453, -249, -254, 191, -256, 164, 301,
	-270, -375, 355, 355, 2, -159, -248, -336, -268, -249,
	-268, -340, -250, -249, 96, 175, 412, 264, 32, 470,
	-455, 264, 345, 58, 373, -455, 470, -454, 487, 487,
	488, 2, -248, -249, 488, -250, 488, -340, -250, 354,
	292, -480, -346, 22, 274, 112, -346, -513, -281, -281,
	-182, 58, 345, -250, -335, -340, -336, -340, 488, 488,
	-340, -336, -249, -250, 417, -249, -250, 487, -250, -340,
	-281, -340, 488, -250,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	397, 398, 400, 401, 402, 404, 405, 407, 409, 411,
	413, 414, 416, 418, 420, 421, 422, 423, 424, 426,
	428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 486, 488, 0, 1018, 1020, 1022, 1024, 0, 616,
	0, 28, 29, 0, 0, 217, 219, 221, 0, 246,
	248, 249, 251, -2, 0, 347, 348, 350, -2, -2,
	0, 0, 475, 477, 0, 0, 0, 497, 498, 0,
	1106, -2, 491, 493, 495, 560, 562, 564, 566, 568,
	570, 572, 573, 575, 577, 579, 581, 583, 585, 587,
	588, 590, 592, 594, 596, 598, 600, 602, 604, 606,
	608, 610, 612, -2, -2, -2, 0, -2, -2, -2,
	1036, 32, 34, 36, 38, 40, 42, 44, 46, 298,
	299, 301, 303, 305, 307, 310, 312, 314, 1164, 352,
	354, 356, 358, 360, 362, 0, -2, 1176, 0, 0,
	48, 49, 50, 51, 52, 53, 54, 55, 71, 72,
	73, 74, 75, 76, 77, 78, 59, 61, 62, 66,
	67, 69, 57, 0, 0, 1137, 1139, 1141, 1143, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	399, 403, 406, 408, 410, 412, 415, 417, 419, 425,
	427, 429, 898, 1796, 1813, 1814, 1815, 1818, 1819, 1820,
	1821, 1822, 1823, 2174, 2255, 2256, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
	1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 0, 453, 451, 1789,
	454, 2007, 456, 458, 341, 342, 343, 344, 345, 346,
	0, 468, 462, 467, 469, 471, 472, 473, 474, 448,
	446, 0, 468, 1848, 466, 1016, 1017, 1011, 1012, 2038,
	1043, 487, -2, -2, -2, 2140, -2, 519, -2, 526,
	2144, 2040, 531, 0, 533, -2, 536, 1019, 1021, 1023,
	614, 615, 1799, 0, 0, 0, 0, 30, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 948,
	949, 0, 0, 181, -2, -2, -2, -2, 0, 0,
	1889, 1757, 1815, 1760, 1755, 218, 220, 222, 223, 0,
	0, 0, 0, 0, 0, 247, 250, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 794, 786, 787,
	988, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, -2, 0, 0,
	0, 277, 389, 390, 0, 1165, 1165, 0, 0, 0,
	0, 198, 189, 0, 0, 763, 476, 478, 0, 0,
	184, 0, 0, 1015, 0, 200, 0, 0, 492, 494,
	496, 561, 563, 565, 567, 569, 571, 574, 576, 578,
	580, 582, 584, 586, 589, 591, 593, 595, 597, 599,
	601, 603, 605, 607, 609, 611, 613, 621, 0, 0,
	0, 0, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, -2,
	-2, -2, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 624, 626, 627, 628, 0, 679, 696, 0,
	938, 1166, 1045, 1026, 1040, 1045, 1028, 1029, 1030, 1031,
	1032, 1037, 1039, 1033, 1034, 1035, 33, 35, 37, 39,
	41, 43, 45, 47, 300, 302, 304, 306, 308, 311,
	313, 315, -2, 1135, 1136, 353, 355, 357, 359, 361,
	363, 479, 0, 481, 0, 625, -2, 0, 1170, 1170,
	1170, 0, 0, 1136, 1134, 0, 484, 485, 540, 541,
	1400, 0, 0, 0, 0, 0, 0, 0, 1654, 1486,
	0, 542, -2, 1517, 1519, 2115, 2140, 1653, 1521, 1522,
	1523, 1524, 1525, 0, 1527, 1528, 1529, 1530, 1531, 1532,
	0, 1534, 0, 1539, 1540, 1541, 0, 2122, 1734, 1809,
	-2, 0, 0, 2128, 1805, 0, 1620, 1557, -2, -2,
	1832, 1811, 1332, 1333, 1334, 1335, 1336, -2, -2, 2157,
	1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 0, 2104, 2123, 2124, 2129, 2131, 2125, 2112, 1582,
	1899, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1359, 1368, -2, -2, -2, -2,
	-2, -2, 2116, 2117, 2134, 2137, 2143, 2148, 2149, 2121,
	2130, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
	2167, 2168, 2169, 2170, 2171, 2172, 2173, 1360, -2, -2,
	-2, -2, 1153, 2017, 1156, 898, 1154, 1138, 1140, 0,
	1142, 0, 0, 0, 1147, 1173, 1171, 0, 1214, 1151,
	1152, 1232, 1232, 1256, 0, 1237, 0, 1256, 1165, 1282,
	0, 1243, 2033, 1558, 1559, 0, 1815, 1810, -2, -2,
	2155, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	455, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 489, 490, 0, 514, 0, 518, 2111, -2, 1856,
	2049, -2, 522, 1046, 1050, 1051, 1052, 1053, 0, 0,
	0, 0, 0, 528, 0, 0, 515, 516, 534, 537,
	0, 617, 618, 619, 620, 56, 0, 2123, 1282, 58,
	0, 1779, 1840, 1841, 1842, 1843, 1844, 2156, 2175, 2176,
	2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
	2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
	2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
	2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
	2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2157, 60,
	0, 2123, 63, 0, 2123, 0, -2, 68, 0, 1785,
	70, 0, 1782, 79, 0, 2123, 0, 1754, -2, 0,
	165, 1793, -2, 2123, 946, 201, 202, 1828, 1829, 1836,
	1837, 1838, 1839, 1269, 185, 0, 0, 0, 755, 1751,
	1756, 756, 1761, 0, 224, 225, 226, 227, 228, 2123,
	230, 231, 0, 233, 234, 2123, 236, 237, 0, 239,
	253, 254, 0, 256, 0, 2123, 0, 0, 0, 262,
	-2, 278, 0, 275, 0, 266, 267, 269, 270, 271,
	272, 0, 319, 317, 1790, 0, 764, 2123, 766, 1795,
	0, 0, 967, -2, 2123, 943, 973, 969, 0, -2,
	0, 1163, 2123, 1060, 790, 791, 792, 793, 0, 338,
	0, 1073, 0, 1075, 0, 1096, 1288, 1232, 1232, 0,
	279, 280, 281, 282, 283, 2123, 0, 0, 0, 288,
	0, 290, 291, 292, 293, 294, 295, 296, 297, 154,
	2123, 366, 387, 154, 2123, 369, 154, 2123, 372, 0,
	375, 986, 154, 2123, 378, 154, 2123, 381, 382, 384,
	2123, 386, 203, 0, -2, 442, 1798, -2, 392, 0,
	393, 0, -2, 0, 215, 0, 0, 761, 762, 1269,
	187, 0, 1013, 1014, 0, 0, 499, 0, 0, 622,
	623, 0, 0, 633, 634, 635, 215, 2041, 2015, 1916,
	640, 0, 643, 646, -2, 0, 0, 0, 0, 650,
	0, 655, 656, 657, 0, 760, 659, 0, 0, 661,
	0, 665, 0, 668, 0, 670, 0, 672, -2, -2,
	-2, 683, -2, 0, 687, 0, 689, 0, 0, 0,
	0, 704, 705, 0, 710, 0, 713, 714, 715, 716,
	717, 0, 719, 720, 721, 722, 0, 724, 725, -2,
	-2, 729, 731, 0, 738, 0, 742, 0, 746, 0,
	629, 630, 154, 1286, 1025, -2, 1027, 0, -2, 0,
	480, 0, 483, 1193, 1121, 1118, 0, 1190, 1191, 1122,
	0, 0, 0, 1129, 0, 1168, 1169, 0, 0, 0,
	1108, 1109, 0, 0, 0, 0, 1659, 1660, 1661, 1662,
	1663, 1664, 1667, 1668, 1665, 1666, 1669, 1670, 0, 0,
	0, 0, 0, 1671, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1672, 1673, 1674, 0, 0,
	1676, 0, 1678, 0, 0, 0, 0, 0, 0, 1465,
	1467, 1742, 0, 0, 1675, 1405, 1406, 1407, 1408, 1409,
	1444, 1445, 0, 0, 1518, 1739, 1738, 1520, 0, 1690,
	0, 1533, 1775, -2, 0, 1654, 1685, 0, 0, 1542,
	1543, 1544, 0, 0, 1690, 0, 0, 1733, 1554, 1555,
	1397, 0, 0, 1622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1345, 0, 1347, 0, 1348, 1349, 1356, 1369,
	0, 0, 0, 0, 1373, 0, 0, 0, 0, 0,
	0, 0, 1714, -2, 0, 0, 0, 0, 1361, 0,
	1155, 0, 0, 1218, 1743, 1747, 1748, 1218, 1218, 0,
	0, 1691, 1279, 1279, 0, 0, 1275, 1275, 1275, 1273,
	1256, 0, 1256, 1266, 0, 1256, 1256, 0, -2, 1237,
	0, 0, 1266, 0, 1250, 430, 432, 434, 436, 437,
	438, 440, 1283, 1284, 0, 0, 0, 0, 0, 0,
	1816, 0, 0, 0, 1801, 0, 0, 0, 0, 460,
	470, 1165, 0, 1693, 1305, 1309, 0, 1311, 1312, 1313,
	1314, 1315, 0, 0, 1306, -2, 1357, 1359, 1380, 1833,
	1834, 1835, 1340, 1341, 1342, 1343, 1344, 1352, 1339, 1339,
	1339, 1350, 1379, 1371, 1379, 1375, 1326, 1327, 1362, 1363,
	1364, 1365, 0, 464, 0, 0, 0, 0, -2, 524,
	529, 530, 0, 0, 1048, 0, 1054, 551, 552, 553,
	1056, 1057, 0, 527, 554, 555, 556, 557, 558, 559,
	0, 1763, 1764, 1765, 1766, 1769, 1770, 0, 0, 525,
	544, 532, 0, 538, 80, 1008, 119, 0, 1008, 1008,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 104,
	115, 92, 93, 0, 0, 0, 0, 64, 920, 0,
	923, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 103, 0, 98, 82, 0, 0, 0, 105, 117,
	0, 145, 147, 0, 0, 0, 0, 0, 0, 164,
	172, 0, 0, 944, 0, 1162, 0, 206, 1268, 0,
	1269, 754, 0, 0, 1816, 1759, 0, 0, 0, 0,
	255, 257, 0, 259, 260, 261, 0, 966, 0, 268,
	265, 309, 869, 2123, 0, 0, 336, 331, 0, 333,
	0, 919, 2123, 917, 1794, 0, 941, 0, 0, 0,
	974, 1825, 983, 987, 1062, 0, 340, 0, 1076, 1078,
	0, 0, 1289, 0, 1291, 1292, 0, 285, 286, 287,
	0, 364, 0, 152, 153, 0, 367, 0, 370, 0,
	154, 2123, 1749, 376, 0, 379, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 0, 215, 0, 1269, 215, 215, 1269, 501, 1269,
	503, 0, 0, 636, 215, 215, 215, 641, 642, 644,
	645, -2, -2, 739, 647, 648, 707, 0, 0, 0,
	706, 658, 0, 748, 2029, 758, 707, 1889, 707, 1889,
	707, 1889, 669, 671, 674, 699, 682, 686, 0, 0,
	0, 691, 0, 693, 0, 695, 707, 708, 711, 718,
	723, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	1038, 1193, 1121, 482, 1112, 1192, 1113, 1120, 1123, 0,
	0, 1125, 0, 1127, 0, 1188, 1189, 1196, 1197, 0,
	1207, 1208, 1200, 0, -2, 0, 0, 1203, 1204, 1131,
	0, 1148, 1149, 1150, 1177, 1180, 997, 0, 2255, 1401,
	1300, 1402, 1403, 1778, 0, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, -2, -2, -2, -2, -2,
	-2, -2, -2, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, -2, -2, -2, 1442, 1443, -2,
	1677, 1679, 0, 1742, 0, -2, 0, -2, -2, -2,
	-2, 1462, 0, 1464, 1469, 1471, 1473, 0, 0, 0,
	0, 1741, 1483, 1725, 1726, 0, 0, 1656, 1657, 1658,
	1468, 0, 1487, 1740, 1737, 0, 0, 1689, 1176, 1546,
	0, 0, 0, 0, 1553, 1538, 1687, 0, 1686, 0,
	0, 0, 1697, 0, 1732, 1728, 0, 1776, 1396, 1383,
	1384, 1385, 1386, 1387, 1388, 1398, 0, 1773, 1802, 1808,
	1630, 0, 0, 0, 1583, 1584, 1585, 1586, 1587, 0,
	1589, 1590, 0, 1592, 1593, 0, 1595, 1596, 0, 1598,
	1599, 1600, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 0, 0, 1602,
	0, 1700, -2, -2, -2, -2, -2, -2, -2, -2,
	0, 1604, 0, 1606, 1691, 1711, 0, 0, 1488, 0,
	0, 0, 1654, 0, 1609, 1691, 1719, 0, 0, 0,
	0, 0, 1691, 0, 1724, 0, 1616, 0, 1618, 1157,
	0, 0, 1295, 0, 0, 0, 1746, 1295, 1295, 0,
	1213, 0, 0, 1276, 1277, 1278, 0, 0, 1279, 0,
	1270, 1274, 1271, 1272, 1266, 1229, 0, 0, 1780, 1266,
	1235, 1265, 0, 898, 1255, 1266, 1266, 0, -2, 1239,
	1256, 0, 0, 431, 433, 435, 439, 441, 0, 0,
	1176, -2, 215, 897, 0, 0, 0, 0, 0, 450,
	452, 0, 0, 444, 0, 447, 0, 1296, 1299, 0,
	0, 1310, 1316, 1317, 0, -2, 0, 0, 1381, 0,
	0, 0, 0, 517, 0, 1047, 1055, 0, 548, 0,
	550, 0, 1767, 1771, 1768, 1772, 0, 539, 0, 0,
	0, 0, 1007, 123, 2123, 0, 156, 0, 0, 862,
	1786, 0, 0, 0, 0, 1904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 94,
	0, 0, 0, 0, 0, 0, 0, 921, 922, 924,
	931, 933, 0, 927, 1774, 0, 0, 928, 0, 930,
	932, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 95, 0, 0, 0, 0, 1753, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 960, 954,
	955, 956, 957, 958, 959, 0, 0, -2, 215, 0,
	186, 206, 1752, 1762, 0, 229, 232, 235, 238, 0,
	263, 0, 0, 796, 769, 0, 0, 318, 215, 0,
	0, 332, 0, 915, 918, 0, 898, 2123, 953, 1792,
	0, 0, 0, 0, 972, 0, 2123, 1781, 1824, 1825,
	1064, 1070, 0, 1295, 0, 1094, 1079, 0, 0, 0,
	1094, 1098, 1099, 1101, 1102, 0, 0, 1290, 0, 289,
	388, 154, 154, 154, 373, 0, 0, 154, 383, 154,
	204, 385, 391, 443, 1165, 1165, 215, 213, 1991, 211,
	208, 210, 0, 0, 0, 797, 799, 800, 801, 802,
	0, 1825, 0, 1942, 1825, 0, 1082, 1084, 0, 182,
	188, 215, 0, 330, 500, 505, 631, 0, 637, 638,
	639, 676, 701, 649, 651, 652, 653, 0, 759, 757,
	660, 707, 663, 707, 666, 707, 685, 688, 690, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	743, 744, 745, 747, 1287, 1116, 1117, 1119, 0, 1128,
	0, 0, 1202, -2, -2, 1201, 1205, 1206, -2, -2,
	-2, -2, 1124, 0, 1133, 1130, 0, 1187, 995, 996,
	0, 0, 0, 0, -2, -2, 0, 0, 0, 1484,
	0, -2, 1463, 1466, 1470, 1472, 1474, 0, 0, 0,
	0, 0, 0, 1680, 0, 1682, 1485, 1735, 1738, 1652,
	0, 0, 1175, 1176, 1176, 0, 1552, 0, 1688, 0,
	1695, 1696, 0, 1545, 0, 1729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1556, 0, 0, 0, 0,
	1588, 1591, 1594, 1597, 0, 0, 0, 0, 1577, 0,
	0, 0, 1581, 1351, 1337, 0, 1379, 1377, 1378, 1372,
	1379, 1376, 1329, 0, 1328, 0, 1601, 0, 1603, 1605,
	0, 0, 1607, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 1492, 1493, 1608,
	1717, 1718, 0, 0, 0, 0, 0, 0, 1614, 0,
	1723, 1615, 1617, 1165, 0, 1158, 0, 1215, 1210, 1294,
	0, 1744, 1269, 1217, 1219, 1745, 1783, 1210, 1210, 0,
	1692, 0, 0, 1260, 0, 0, 0, 1262, 1233, 0,
	0, 1227, 0, 1223, 1224, 1225, 1226, 1234, 898, 1264,
	1236, 1240, 1802, 0, 1266, 0, 1251, 0, 1253, 1285,
	0, 1245, 1248, 0, 0, 216, 1817, 240, 244, 245,
	241, 242, 243, 459, 0, 0, 1694, 0, 1301, 0,
	1307, 0, 0, 0, 0, 463, 0, 513, -2, 546,
	547, 549, 0, 545, 120, 1008, 0, 0, 999, 0,
	125, 2123, 134, 0, 837, 0, 1784, 0, 0, 0,
	0, 0, 1010, 0, 0, 2123, 154, 2123, 154, 137,
	140, 0, 144, 142, 0, 0, 828, 81, 1008, 84,
	88, 96, 0, 0, 0, 102, 0, 0, 0, 1001,
	0, 925, 926, 929, 935, 65, 0, 1003, 998, 146,
	86, 90, 97, 0, 1005, 83, 0, 168, 0, 0,
	0, 160, 0, 161, 162, 169, 170, 171, 173, 0,
	154, 2123, 0, 961, 939, 940, 0, 945, 179, 0,
	215, 1758, 0, 0, 0, 0, 0, 795, 880, 0,
	0, 0, 0, 324, 320, 0, 329, 335, 334, 765,
	0, 0, 0, -2, 976, 970, 971, 0, 0, 0,
	2123, 1066, 1070, 0, 1069, 1163, 1176, 339, 1071, 1094,
	0, 0, 0, 1081, 1077, 1074, 1295, 0, 0, 0,
	0, 0, 284, 365, 368, 371, 1750, 154, 377, 380,
	394, 395, 190, 0, 0, 0, 0, 0, 215, 0,
	0, 0, 806, 0, 1825, 1825, 0, 1788, 0, 0,
	0, 0, 183, 0, 502, 0, 0, 0, 662, 664,
	667, 692, 694, 707, 732, 733, 823, 0, 823, 0,
	0, 1126, 0, 1199, 1132, 1181, 1182, 0, 997, 0,
	1404, 1447, 0, 0, -2, 0, 0, 1451, 0, 0,
	0, -2, 0, 0, 0, 1681, 1683, 0, 1737, 1547,
	0, 0, 0, 1551, 1535, 1536, 0, 1655, 1698, 1727,
	1731, 0, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 0,
	1777, 1803, 1807, 1628, 1629, 1633, 1791, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 0, 1370,
	1374, 0, 0, 1699, 1710, 1712, 1489, 1490, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, -2, -2,
	-2, 1507, 1508, 1509, -2, -2, -2, 0, 0, 0,
	1713, 1715, 1716, 1720, 1721, 0, 1611, 1612, 1613, 1722,
	0, 1165, 1159, 1212, 0, 1293, 1216, 0, 1212, 1212,
	1172, 1258, 0, 0, 1281, 0, 1230, 0, 1231, 0,
	1263, 0, 1238, 1241, 1242, 1252, 0, 1244, 0, 1247,
	0, 1547, -2, 461, 445, 0, 0, 1303, 0, 0,
	1354, 1358, 1382, 465, 1267, 0, 0, 0, 0, 155,
	835, 861, 0, 0, 0, 990, 997, 0, 0, 867,
	127, 0, 0, 0, 135, 0, 0, 132, 0, 139,
	143, 0, 0, 0, 0, 0, 99, 100, 101, 0,
	106, 0, 107, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 994, 0, 0, 175, 0, 0, 0,
	964, 965, 205, 180, 258, 898, 264, 817, 868, 0,
	870, 0, 770, 0, 0, 869, 316, 0, 323, 0,
	919, 0, 0, 942, 0, 975, 977, 985, 0, 0,
	0, 1068, 1070, 0, 1061, 1062, 1195, 1072, 1092, -2,
	1091, 0, 1176, 1100, 1097, 1103, 1104, 0, 374, 212,
	0, 207, 209, 0, 193, 0, 0, 798, 803, 0,
	0, 0, 0, 0, 1083, 1085, 0, 199, 0, 632,
	654, 702, 734, 822, 0, 0, 736, 0, 0, 1198,
	1185, 1186, 1183, 997, 1449, 1453, 0, 0, 0, 1455,
	-2, 0, 1477, -2, -2, 1684, 1736, 1526, 1176, 1548,
	1550, 1537, 1730, 1399, 0, 1635, 1632, 0, 1619, 0,
	1572, 1573, 0, 0, 1576, 1578, 1579, 1580, 1338, 1331,
	1330, 1709, 0, 0, 0, 0, 1610, 1160, 0, 1624,
	0, 0, 1220, 1624, 1624, 1259, 0, 1261, 1228, 1221,
	0, 1803, 1254, 1246, 0, 0, 1297, 1302, 0, 1308,
	1353, 121, 122, 124, 0, 836, 0, 839, 0, 0,
	0, 0, 846, 847, 0, 0, 0, 0, 0, 856,
	884, 894, 0, 1187, 0, 0, 0, 129, 149, 0,
	0, 1009, 0, 0, 154, 154, 0, 0, 1000, 0,
	0, 0, 0, 109, 0, 0, 1002, 1004, 0, 0,
	1006, 166, 167, 0, 154, 0, 159, 154, 154, 994,
	0, 0, 825, 0, 880, 872, 873, 874, 0, 879,
	881, 0, 0, 783, 0, 779, 0, 0, 772, 796,
	769, 0, 321, 916, 950, 898, 968, 0, 0, 0,
	0, 0, 0, 1058, 1070, 0, 1063, 1064, 1094, 1194,
	0, 0, 0, 1080, 1195, 0, 214, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 504, 506,
	0, 0, 512, 821, 0, 0, 0, 0, 1184, 1457,
	-2, -2, 1478, 0, 1804, 1806, 1176, 0, 1621, 1178,
	0, 0, -2, 0, 0, 0, 1161, 1144, 0, 1211,
	1209, 1145, 1146, 1280, 0, 1249, 0, 1304, 126, 0,
	840, 841, 1787, 843, 0, 845, 848, 0, 851, 1827,
	0, 855, 863, 885, 0, 817, 0, 890, 891, 892,
	991, 992, 896, 0, 128, 130, 148, 994, 0, 131,
	138, 0, 0, 85, 0, 0, 1882, 112, 110, 108,
	87, 0, 168, 174, 993, 163, 176, 154, 0, 0,
	769, 824, 0, 871, 0, 882, 883, 773, 0, 771,
	0, 0, 0, 0, 0, 322, 325, 0, 328, 0,
	978, 0, 984, 0, 0, 0, 0, 1065, 1066, 337,
	0, 0, 0, 1094, 1105, 192, 0, 0, 804, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 805, 896,
	0, 0, 860, 0, 197, 0, 508, 0, 510, 0,
	735, 737, 0, 0, 1549, 1639, 0, 0, 1574, 1575,
	-2, 0, 1515, 1623, 1625, 0, 1222, 1298, 838, 842,
	0, 0, 0, 902, 0, 0, 0, 888, 889, 825,
	0, 817, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 158, 177, 994, 951, 773, 0, 0, 781,
	0, 784, 0, 780, 777, 778, 817, 0, 326, 327,
	0, 0, 985, 0, 0, 1067, 1068, 0, 1087, 1088,
	1090, 1095, 0, 0, 894, 896, 1295, 0, 507, 0,
	0, 740, 741, 0, 0, 0, 0, 1634, 1179, 1516,
	0, 0, 0, 0, 850, 907, 0, 0, 0, 886,
	887, 884, 0, 865, 0, 898, 133, 0, 896, 0,
	829, 0, 0, 832, 0, 0, 113, 1882, 111, 0,
	154, 767, 0, 0, 876, 878, 0, 785, 825, 783,
	952, 896, 0, 894, 0, 1059, 0, 1089, 215, 215,
	817, 894, 859, 215, 509, 511, 1631, 1651, 1640, -2,
	2084, 1886, 0, 1651, 1651, 1626, 1627, 0, 0, 852,
	903, 904, 0, 899, 900, 901, 1826, 853, 854, 1295,
	893, 0, 902, 150, 817, 826, 0, 0, 827, 0,
	0, 116, 0, 118, 178, 0, 875, 0, 0, 0,
	0, 769, 773, 894, 0, 817, 0, 1295, 194, 195,
	825, 817, 196, 1636, 0, 0, 1642, 1643, 1644, 1645,
	1646, 1637, 1638, 844, 0, 905, 0, 906, 0, 0,
	0, 864, 0, 907, 136, 830, 0, 833, 0, 114,
	0, 877, 774, 0, 776, 773, 782, 817, 0, 825,
	0, 1086, 1295, 825, 0, 1648, 1649, 0, 0, 0,
	908, 0, 911, 912, 0, 909, 0, 884, 0, 0,
	820, 775, 768, 825, 896, 1295, 894, 857, 1295, 1647,
	1650, 1641, 849, 910, 913, 914, 895, 866, 0, 0,
	816, 818, 819, 1295, 894, 981, 817, 858, 825, 0,
	979, 817, 825, 831, 0, 825, 1295, 0, 1295, 982,
	0, 980, 825, 834,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 476, 3, 482, 477, 3,
	487, 488, 480, 478, 492, 479, 489, 481, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 495, 3,
	468, 470, 469, 473, 491, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 485, 3, 486, 483, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 493, 475, 494, 471,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 472, 57811, 474, 57812, 484, 57813, 490, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1164
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1169
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1175
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1176
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1177
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1180
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1187
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1197
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1261
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1298
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1313
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1335
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1354
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1386
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1404
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1419
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1440
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1472
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1490
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1502
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1517
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1545
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1556
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1576
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1585
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 109:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1596
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1602
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1633
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1665
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1680
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1685
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1695
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1700
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1724
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1736
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.typeReference(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1753
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 136:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1795
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1802
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = nil
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 157:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[6].str,
					IfNotExists: false,
					Placement:   sqlDollar[7].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[9].str,
					IfNotExists: true,
					Placement:   sqlDollar[10].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRenameValue{
					OldVal: sqlDollar[6].str,
					NewVal: sqlDollar[8].str,
				},
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRename{
					NewName: sqlDollar[6].union.unresolvedObjectName(),
				},
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeSetSchema{
					Schema: sqlDollar[6].str,
				},
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1947
		{
			return unimplementedWithIssueDetail(sqllex, 48700, "ALTER TYPE OWNER TO")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1951
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1955
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      true,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1969
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      false,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = (*tree.AlterTypeAddValuePlacement)(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2069
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2116
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2121
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2125
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2131
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2136
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2141
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2146
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2151
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2155
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2171
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2182
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2214
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2228
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = nil
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2252
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2266
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2321
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2355
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2357
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2376
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2395
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2400
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "CREATE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2419
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			return unimplemented(sqllex, "create cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2421
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2422
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2423
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2424
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2429
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2430
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2431
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2432
		{
			return unimplemented(sqllex, "create operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return unimplemented(sqllex, "create publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2434
		{
			return unimplemented(sqllex, "create rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2435
		{
			return unimplemented(sqllex, "create server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2437
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2438
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2441
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2442
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2445
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2446
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2450
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2454
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2455
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2456
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2457
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2458
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2460
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2465
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2466
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2467
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2468
		{
			return unimplemented(sqllex, "drop server")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2471
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2529
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2575
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2583
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2591
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2626
		{

			sqlVAL.union.val = nil
		}
	case 337:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "DELETE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2654
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2679
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "DROP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2683
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2726
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2758
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2835
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2840
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2872
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2880
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2896
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2904
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2924
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "INSERT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2929
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2941
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2946
		{
			return helpWith(sqllex, "DELETE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "INSERT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2959
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2981
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = sqlDollar[2].union.typeReferences()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3014
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3030
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "GRANT")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3126
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3154
		{
			return helpWith(sqllex, "RESET")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3170
		{
			return helpWith(sqllex, "RESET")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3181
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "USE")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3201
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3202
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "USE")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3319
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3386
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3412
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3422
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return unimplemented(sqllex, "set from current")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3428
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3441
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = tree.Low
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = tree.Normal
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3530
		{
			sqlVAL.union.val = tree.High
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3574
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3575
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3576
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3579
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3581
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3586
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3588
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3589
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3590
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3591
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3592
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3596
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3597
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3604
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3605
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3608
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3612
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3622
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3627
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3637
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.str = "client_encoding"
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.str = "timezone"
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3654
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3672
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3720
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3729
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3737
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3754
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3759
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3768
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3776
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3779
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3799
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3802
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3826
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3858
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3860
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3867
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3875
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3878
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3883
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3894
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3899
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3905
		{
			sqlVAL.union.val = true
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = false
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3925
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3931
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3934
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3952
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3961
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3964
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3969
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3971
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3975
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3979
		{
			sqlVAL.union.val = false
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3990
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3992
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3995
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4003
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4026
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.union.val = true
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4030
		{
			sqlVAL.union.val = false
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4037
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4041
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4044
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4051
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4058
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4065
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4069
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4076
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4079
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4087
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4092
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4101
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4113
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4117
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4133
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4144
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4156
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4164
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4201
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4215
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4224
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4236
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4240
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4380
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4423
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4473
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4496
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4535
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4550
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = nil
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4571
		{

			sqlVAL.union.val = nil
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4577
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4582
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4592
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4597
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4602
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4629
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4642
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4656
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4657
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4658
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = true
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = true
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = false
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = true
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = true
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4686
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4730
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4741
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4743
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4744
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4745
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4747
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4748
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4749
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4754
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4770
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4775
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4820
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4836
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4870
		{
			typ := sqlDollar[2].union.typeReference()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, tree.IsReferenceSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4891
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4903
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4911
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4915
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4937
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4941
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4945
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4949
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4964
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4978
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4989
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
				Predicate:   sqlDollar[10].union.expr(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
					Predicate:   sqlDollar[11].union.expr(),
				},
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:      tree.Name(sqlDollar[3].str),
				Columns:   sqlDollar[5].union.idxElems(),
				Inverted:  true,
				Predicate: sqlDollar[7].union.expr(),
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5032
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5044
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5049
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:5061
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
					Predicate:   sqlDollar[9].union.expr(),
				},
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5073
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5085
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5096
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5113
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5123
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5138
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5145
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5192
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5203
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5204
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5205
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5206
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5207
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5208
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5242
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5280
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5284
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5333
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5345
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5364
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5373
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5381
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5388
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5392
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.typeReference().SQLString())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5395
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5396
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5397
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5407
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5410
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5412
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5414
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5417
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5420
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5422
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5432
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5435
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5443
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5457
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5460
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5472
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5475
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5481
		{
			sqlVAL.union.val = true
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5485
		{

			sqlVAL.union.val = true
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5490
		{
			sqlVAL.union.val = false
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5500
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5514
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5526
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5537
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = nil
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5585
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5590
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5591
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5608
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5610
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5612
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5614
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5616
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5618
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5626
		{
			sqlVAL.union.val = []string(nil)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5636
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5654
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Predicate:    sqlDollar[16].union.expr(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5671
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Predicate:    sqlDollar[19].union.expr(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5689
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Predicate:    sqlDollar[15].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5705
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Predicate:    sqlDollar[18].union.expr(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5721
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5725
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5740
		{
			sqlVAL.union.val = false
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = true
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = false
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = true
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = false
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5779
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5801
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 994:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.str = ""
		}
	case 995:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = tree.Descending
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 998:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5820
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5826
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5832
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5840
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5846
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5854
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5860
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5877
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5878
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5881
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5882
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5893
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5915
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5926
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5930
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5931
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5932
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5948
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5951
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5953
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5956
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5969
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5974
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5983
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5984
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5985
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6002
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6005
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6006
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6024
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6030
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6034
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6047
		{
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6049
		{
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6053
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6072
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6098
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6118
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.str = ""
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.str = ""
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.str = ""
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.str = ""
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6161
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6162
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6188
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6206
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6210
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6219
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6224
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6268
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6282
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6285
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6286
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6294
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6332
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6335
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6338
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6364
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6411
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6497
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6507
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6514
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6549
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6550
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6551
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6612
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6625
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6649
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6656
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6672
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = true
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6697
		{
			sqlVAL.union.val = false
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Set: false,
				},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Materialize: sqlDollar[4].union.bool(),
					Set:         true,
				},
				Stmt: sqlDollar[6].union.stmt(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6725
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6726
		{
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = nil
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6740
		{
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = true
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6748
		{
			sqlVAL.union.val = false
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = false
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = true
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6764
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6769
		{
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6770
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = tree.OrderBy([]*tree.Order{sqlDollar[3].union.order()})
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqllex.Error("multiple ORDER BY clauses are not supported in this function")
			return 1
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6811
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6832
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6837
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6866
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6899
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6954
		{
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6955
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6958
		{
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6959
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6986
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7012
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7014
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7026
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7029
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7051
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7056
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7072
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7084
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7103
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7142
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7152
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7198
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7228
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7261
		{
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7266
		{
			sqlVAL.union.val = nil
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = true
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = false
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.str = tree.AstFull
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.str = tree.AstRight
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.str = tree.AstInner
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7380
		{
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7381
		{
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.str = tree.AstHash
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.str = ""
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7443
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7448
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7466
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7478
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7488
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7517
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.typeReference()
			}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7530
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7538
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7539
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7557
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7559
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7567
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7580
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7587
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7596
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {

				var ok bool
				var err error
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						aIdx := sqllex.(*lexer).NewAnnotation()
						sqlVAL.union.val, err = tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
						if err != nil {
							return setErr(sqllex, err)
						}
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7636
		{
			id := sqlDollar[2].union.int32()
			sqlVAL.union.val = &tree.IDTypeReference{ID: uint32(id)}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7648
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7649
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7655
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7659
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = types.Geography
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), 0)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), 0)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7673
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7677
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7699
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7707
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = nil
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = types.Int2
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = types.Int
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = types.Float4
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = types.Float
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7750
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7758
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7766
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = types.Bool
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7793
		{
			sqlVAL.union.val = types.Float
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7799
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7805
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7817
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7827
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = types.String
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = true
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7867
		{
			sqlVAL.union.val = false
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = types.Date
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7876
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7884
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7898
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7907
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7915
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7932
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = true
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = false
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = false
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = types.Interval
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7952
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7956
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7983
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7991
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8040
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8055
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8071
		{
			sqlVAL.union.val = nil
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8085
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8145
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8214
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8226
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8302
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8306
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8314
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8318
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8322
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8326
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8330
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8338
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8397
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8435
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8439
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8443
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8463
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8485
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8505
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8509
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8513
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8569
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8593
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8601
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8605
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8667
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8679
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8684
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8690
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8694
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8706
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8710
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8719
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8726
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8730
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8734
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8761
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8764
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8772
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8775
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8776
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8791
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8800
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {

					var typ tree.ResolvableTypeReference
					var ok bool
					var err error
					var unimp int
					typ, ok, unimp = types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							aIdx := sqllex.(*lexer).NewAnnotation()
							typ, err = name.ToUnresolvedObjectName(aIdx)
							if err != nil {
								return setErr(sqllex, err)
							}
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				aIdx := sqllex.(*lexer).NewAnnotation()
				res, err := name.ToUnresolvedObjectName(aIdx)
				if err != nil {
					return setErr(sqllex, err)
				}
				sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: res, SyntaxMode: tree.CastPrepend}
			}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8853
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8866
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			w := sqlDollar[2].union.expr().(*tree.FuncExpr)
			if w.AggType != 0 {
				f.AggType = w.AggType
				f.OrderBy = w.OrderBy
			}
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8887
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8897
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8911
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8919
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8937
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8941
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8945
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.CastExplicit}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8949
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8953
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8957
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8961
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8965
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8969
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8973
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8977
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8981
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8991
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9014
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9023
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9025
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9032
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9037
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9039
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9042
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9047
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9052
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9061
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9062
		{
			return unimplemented(sqllex, "treat")
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9064
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9072
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9080
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9083
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9088
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9094
		{
			sqlVAL.union.val = &tree.FuncExpr{OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.OrderedSetAgg}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9098
		{
			sqlVAL.union.val = &tree.FuncExpr{}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9104
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9108
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9115
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9119
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9125
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9135
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9143
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9147
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9151
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9158
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9178
		{
			sqlVAL.str = ""
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9184
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9188
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9194
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9202
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9210
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9218
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9224
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9237
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9265
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9269
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9273
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9277
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9284
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9293
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9297
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9301
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9305
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9310
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9323
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9327
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9334
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9346
		{
			sqlVAL.union.val = tree.Any
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = tree.Some
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9354
		{
			sqlVAL.union.val = tree.All
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9359
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9360
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9361
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9362
		{
			sqlVAL.union.val = tree.Div
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9363
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9364
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9365
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9366
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9367
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9368
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9369
		{
			sqlVAL.union.val = tree.LT
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9370
		{
			sqlVAL.union.val = tree.GT
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9371
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9372
		{
			sqlVAL.union.val = tree.LE
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9373
		{
			sqlVAL.union.val = tree.GE
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9374
		{
			sqlVAL.union.val = tree.NE
		}
	case 1676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9378
		{
			sqlVAL.union.val = tree.Like
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9379
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9380
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9381
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9404
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9408
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9414
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9418
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9422
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9433
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9437
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9443
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9447
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9454
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9460
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9470
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference{sqlDollar[1].union.typeReference()}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9474
		{
			sqlVAL.union.val = append(sqlDollar[1].union.typeReferences(), sqlDollar[3].union.typeReference())
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9480
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9484
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9500
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9504
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9527
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9531
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9535
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9541
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9548
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9552
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9569
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9573
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9577
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9581
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9585
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9591
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9597
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9603
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9607
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9611
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9617
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9629
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9636
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9646
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9652
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9656
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9663
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9669
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9673
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9680
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9686
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9690
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9695
		{
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9696
		{
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9700
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9710
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9719
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9723
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9727
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9735
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9745
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9768
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9776
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9799
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9808
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9812
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9816
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9820
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9826
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9845
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9849
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9861
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9865
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9874
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9885
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9894
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9902
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9914
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10015
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10022
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10026
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1804:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10030
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1806:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10044
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10048
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10052
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10065
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10074
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10092
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10105
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10112
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10137
		{
			sqlVAL.str = ""
		}
	case 1826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10143
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10147
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
